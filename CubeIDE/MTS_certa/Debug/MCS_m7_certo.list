
MCS_m7_certo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf78  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  0800d148  0800d148  0000e148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dabc  0800dabc  0000f1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dabc  0800dabc  0000eabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dac4  0800dac4  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dac4  0800dac4  0000eac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dac8  0800dac8  0000eac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800dacc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006f08  200001e8  0800dcb4  0000f1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200070f0  0800dcb4  000100f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba3f  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002221  00000000  00000000  0001ac57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0001ce78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083b  00000000  00000000  0001d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275fb  00000000  00000000  0001e18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115b2  00000000  00000000  00045786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e694f  00000000  00000000  00056d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d687  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004080  00000000  00000000  0013d6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014174c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d130 	.word	0x0800d130

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800d130 	.word	0x0800d130

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	@ 0x30
 8001028:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800103a:	4b8f      	ldr	r3, [pc, #572]	@ (8001278 <MX_GPIO_Init+0x254>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a8e      	ldr	r2, [pc, #568]	@ (8001278 <MX_GPIO_Init+0x254>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b8c      	ldr	r3, [pc, #560]	@ (8001278 <MX_GPIO_Init+0x254>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001052:	4b89      	ldr	r3, [pc, #548]	@ (8001278 <MX_GPIO_Init+0x254>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a88      	ldr	r2, [pc, #544]	@ (8001278 <MX_GPIO_Init+0x254>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b86      	ldr	r3, [pc, #536]	@ (8001278 <MX_GPIO_Init+0x254>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b83      	ldr	r3, [pc, #524]	@ (8001278 <MX_GPIO_Init+0x254>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a82      	ldr	r2, [pc, #520]	@ (8001278 <MX_GPIO_Init+0x254>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b80      	ldr	r3, [pc, #512]	@ (8001278 <MX_GPIO_Init+0x254>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	4b7d      	ldr	r3, [pc, #500]	@ (8001278 <MX_GPIO_Init+0x254>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a7c      	ldr	r2, [pc, #496]	@ (8001278 <MX_GPIO_Init+0x254>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b7a      	ldr	r3, [pc, #488]	@ (8001278 <MX_GPIO_Init+0x254>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	4b77      	ldr	r3, [pc, #476]	@ (8001278 <MX_GPIO_Init+0x254>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a76      	ldr	r2, [pc, #472]	@ (8001278 <MX_GPIO_Init+0x254>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b74      	ldr	r3, [pc, #464]	@ (8001278 <MX_GPIO_Init+0x254>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b2:	4b71      	ldr	r3, [pc, #452]	@ (8001278 <MX_GPIO_Init+0x254>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	4a70      	ldr	r2, [pc, #448]	@ (8001278 <MX_GPIO_Init+0x254>)
 80010b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010be:	4b6e      	ldr	r3, [pc, #440]	@ (8001278 <MX_GPIO_Init+0x254>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SINC_master_GPIO_Port, SINC_master_Pin, GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2108      	movs	r1, #8
 80010ce:	486b      	ldr	r0, [pc, #428]	@ (800127c <MX_GPIO_Init+0x258>)
 80010d0:	f001 fc06 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f244 0181 	movw	r1, #16513	@ 0x4081
 80010da:	4869      	ldr	r0, [pc, #420]	@ (8001280 <MX_GPIO_Init+0x25c>)
 80010dc:	f001 fc00 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2140      	movs	r1, #64	@ 0x40
 80010e4:	4867      	ldr	r0, [pc, #412]	@ (8001284 <MX_GPIO_Init+0x260>)
 80010e6:	f001 fbfb 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4861      	ldr	r0, [pc, #388]	@ (8001288 <MX_GPIO_Init+0x264>)
 8001102:	f001 fa29 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_slave_Pin;
 8001106:	2301      	movs	r3, #1
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SINC_slave_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	485b      	ldr	r0, [pc, #364]	@ (8001288 <MX_GPIO_Init+0x264>)
 800111a:	f001 fa1d 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 800111e:	2302      	movs	r3, #2
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800112e:	230b      	movs	r3, #11
 8001130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	4853      	ldr	r0, [pc, #332]	@ (8001288 <MX_GPIO_Init+0x264>)
 800113a:	f001 fa0d 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800113e:	2306      	movs	r3, #6
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800114e:	230b      	movs	r3, #11
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4848      	ldr	r0, [pc, #288]	@ (800127c <MX_GPIO_Init+0x258>)
 800115a:	f001 f9fd 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_master_Pin;
 800115e:	2308      	movs	r3, #8
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	2303      	movs	r3, #3
 800116c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SINC_master_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	4841      	ldr	r0, [pc, #260]	@ (800127c <MX_GPIO_Init+0x258>)
 8001176:	f001 f9ef 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800117a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	483b      	ldr	r0, [pc, #236]	@ (8001280 <MX_GPIO_Init+0x25c>)
 8001194:	f001 f9e0 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001198:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011aa:	230b      	movs	r3, #11
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4832      	ldr	r0, [pc, #200]	@ (8001280 <MX_GPIO_Init+0x25c>)
 80011b6:	f001 f9cf 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011cc:	2307      	movs	r3, #7
 80011ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4619      	mov	r1, r3
 80011d6:	482d      	ldr	r0, [pc, #180]	@ (800128c <MX_GPIO_Init+0x268>)
 80011d8:	f001 f9be 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011dc:	2340      	movs	r3, #64	@ 0x40
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4824      	ldr	r0, [pc, #144]	@ (8001284 <MX_GPIO_Init+0x260>)
 80011f4:	f001 f9b0 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	481e      	ldr	r0, [pc, #120]	@ (8001284 <MX_GPIO_Init+0x260>)
 800120c:	f001 f9a4 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001210:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121e:	2303      	movs	r3, #3
 8001220:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001222:	230a      	movs	r3, #10
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	4813      	ldr	r0, [pc, #76]	@ (800127c <MX_GPIO_Init+0x258>)
 800122e:	f001 f993 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001232:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	480d      	ldr	r0, [pc, #52]	@ (800127c <MX_GPIO_Init+0x258>)
 8001248:	f001 f986 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800124c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001250:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800125e:	230b      	movs	r3, #11
 8001260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4806      	ldr	r0, [pc, #24]	@ (8001284 <MX_GPIO_Init+0x260>)
 800126a:	f001 f975 	bl	8002558 <HAL_GPIO_Init>

}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	@ 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40021800 	.word	0x40021800
 8001288:	40020800 	.word	0x40020800
 800128c:	40020c00 	.word	0x40020c00

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	f5ad 4dfb 	sub.w	sp, sp, #32128	@ 0x7d80
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  char file_read[25] = {0};
 800129a:	2300      	movs	r3, #0
 800129c:	f647 5240 	movw	r2, #32064	@ 0x7d40
 80012a0:	443a      	add	r2, r7
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	f647 5344 	movw	r3, #32068	@ 0x7d44
 80012a8:	443b      	add	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
 80012b6:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b8:	f000 ffe7 	bl	800228a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012bc:	f000 fb76 	bl	80019ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c0:	f7ff feb0 	bl	8001024 <MX_GPIO_Init>
  MX_SPI3_Init();
 80012c4:	f000 fdb0 	bl	8001e28 <MX_SPI3_Init>
  MX_FATFS_Init();
 80012c8:	f002 ff50 	bl	800416c <MX_FATFS_Init>
  MX_SPI1_Init();
 80012cc:	f000 fd6e 	bl	8001dac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //uint32_t start_time = 0;
  uint16_t file_cont = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	f647 5286 	movw	r2, #32134	@ 0x7d86
 80012d6:	443a      	add	r2, r7
 80012d8:	8013      	strh	r3, [r2, #0]

  FATFS fs;
  FRESULT res;

  // Monta o sistema de arquivos na unidade lógica "0:"
  res = f_mount(&fs, "0:", 1);
 80012da:	f647 23bc 	movw	r3, #31420	@ 0x7abc
 80012de:	443b      	add	r3, r7
 80012e0:	2201      	movs	r2, #1
 80012e2:	49b6      	ldr	r1, [pc, #728]	@ (80015bc <main+0x32c>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f006 fa61 	bl	80077ac <f_mount>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f647 5263 	movw	r2, #32099	@ 0x7d63
 80012f0:	443a      	add	r2, r7
 80012f2:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) {
 80012f4:	f647 5363 	movw	r3, #32099	@ 0x7d63
 80012f8:	443b      	add	r3, r7
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <main+0x74>
      //printf("Falha ao montar o sistema de arquivos: %d\n", res);
      Error_Handler(); // ou retorne um erro
 8001300:	f000 fbb0 	bl	8001a64 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(file_cont >= 3001)
 8001304:	f647 5386 	movw	r3, #32134	@ 0x7d86
 8001308:	443b      	add	r3, r7
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001310:	4293      	cmp	r3, r2
 8001312:	d901      	bls.n	8001318 <main+0x88>
	{
		return 1;
 8001314:	2301      	movs	r3, #1
 8001316:	e337      	b.n	8001988 <main+0x6f8>
	}

	sprintf(file_read, "0:/DATA1/run%d.txt", file_cont);  // Prefixo de volume (0:) é comum no FatFs
 8001318:	f647 5386 	movw	r3, #32134	@ 0x7d86
 800131c:	443b      	add	r3, r7
 800131e:	881a      	ldrh	r2, [r3, #0]
 8001320:	f647 5340 	movw	r3, #32064	@ 0x7d40
 8001324:	443b      	add	r3, r7
 8001326:	49a6      	ldr	r1, [pc, #664]	@ (80015c0 <main+0x330>)
 8001328:	4618      	mov	r0, r3
 800132a:	f009 f875 	bl	800a418 <siprintf>

	FIL fil;
	FRESULT res;

	res = f_open(&fil, file_read, FA_READ);
 800132e:	f647 5140 	movw	r1, #32064	@ 0x7d40
 8001332:	4439      	add	r1, r7
 8001334:	4ba3      	ldr	r3, [pc, #652]	@ (80015c4 <main+0x334>)
 8001336:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 800133a:	f103 0308 	add.w	r3, r3, #8
 800133e:	443b      	add	r3, r7
 8001340:	2201      	movs	r2, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f006 fa78 	bl	8007838 <f_open>
 8001348:	4603      	mov	r3, r0
 800134a:	f647 5262 	movw	r2, #32098	@ 0x7d62
 800134e:	443a      	add	r2, r7
 8001350:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 8001352:	f647 5362 	movw	r3, #32098	@ 0x7d62
 8001356:	443b      	add	r3, r7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <main+0xd2>
	{
		return 1;
 800135e:	2301      	movs	r3, #1
 8001360:	e312      	b.n	8001988 <main+0x6f8>
	}

	char line[30670];
	UINT br; // Bytes lidos

	float *linhas[] = {mx, my, mz};  // Vetor de ponteiros para facilitar o acesso
 8001362:	f647 5388 	movw	r3, #32136	@ 0x7d88
 8001366:	443b      	add	r3, r7
 8001368:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800136c:	4a96      	ldr	r2, [pc, #600]	@ (80015c8 <main+0x338>)
 800136e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001370:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 3; i++)
 8001374:	2300      	movs	r3, #0
 8001376:	f507 42fb 	add.w	r2, r7, #32128	@ 0x7d80
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	e0b3      	b.n	80014e6 <main+0x256>
	{
		// lê uma linha completa (até '\n' ou fim do buffer)
		int line_pos = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	f647 527c 	movw	r2, #32124	@ 0x7d7c
 8001384:	443a      	add	r2, r7
 8001386:	6013      	str	r3, [r2, #0]
		char ch;
		do {
			res = f_read(&fil, &ch, 1, &br);
 8001388:	f647 23b8 	movw	r3, #31416	@ 0x7ab8
 800138c:	443b      	add	r3, r7
 800138e:	f647 21a7 	movw	r1, #31399	@ 0x7aa7
 8001392:	4439      	add	r1, r7
 8001394:	488b      	ldr	r0, [pc, #556]	@ (80015c4 <main+0x334>)
 8001396:	f647 5288 	movw	r2, #32136	@ 0x7d88
 800139a:	4402      	add	r2, r0
 800139c:	19d0      	adds	r0, r2, r7
 800139e:	2201      	movs	r2, #1
 80013a0:	f006 fd07 	bl	8007db2 <f_read>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f647 5262 	movw	r2, #32098	@ 0x7d62
 80013aa:	443a      	add	r2, r7
 80013ac:	7013      	strb	r3, [r2, #0]
			if (res != FR_OK || br == 0) {
 80013ae:	f647 5362 	movw	r3, #32098	@ 0x7d62
 80013b2:	443b      	add	r3, r7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d107      	bne.n	80013ca <main+0x13a>
 80013ba:	f647 5388 	movw	r3, #32136	@ 0x7d88
 80013be:	443b      	add	r3, r7
 80013c0:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <main+0x13e>
				return 1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e2dc      	b.n	8001988 <main+0x6f8>
			}
			line[line_pos++] = ch;
 80013ce:	f647 537c 	movw	r3, #32124	@ 0x7d7c
 80013d2:	443b      	add	r3, r7
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	f647 517c 	movw	r1, #32124	@ 0x7d7c
 80013dc:	4439      	add	r1, r7
 80013de:	600a      	str	r2, [r1, #0]
 80013e0:	f647 5288 	movw	r2, #32136	@ 0x7d88
 80013e4:	443a      	add	r2, r7
 80013e6:	f2a2 22e1 	subw	r2, r2, #737	@ 0x2e1
 80013ea:	7811      	ldrb	r1, [r2, #0]
 80013ec:	f607 5288 	addw	r2, r7, #3464	@ 0xd88
 80013f0:	f5a2 622b 	sub.w	r2, r2, #2736	@ 0xab0
 80013f4:	54d1      	strb	r1, [r2, r3]
		} while (ch != '\n' && line_pos < sizeof(line)-1);
 80013f6:	f647 5388 	movw	r3, #32136	@ 0x7d88
 80013fa:	443b      	add	r3, r7
 80013fc:	f2a3 23e1 	subw	r3, r3, #737	@ 0x2e1
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b0a      	cmp	r3, #10
 8001404:	d007      	beq.n	8001416 <main+0x186>
 8001406:	f647 537c 	movw	r3, #32124	@ 0x7d7c
 800140a:	443b      	add	r3, r7
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 8001412:	4293      	cmp	r3, r2
 8001414:	d9b8      	bls.n	8001388 <main+0xf8>
		line[line_pos] = '\0';
 8001416:	f607 5388 	addw	r3, r7, #3464	@ 0xd88
 800141a:	f5a3 622b 	sub.w	r2, r3, #2736	@ 0xab0
 800141e:	f647 537c 	movw	r3, #32124	@ 0x7d7c
 8001422:	443b      	add	r3, r7
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]

		char *token = strtok(line, ",");
 800142c:	4b67      	ldr	r3, [pc, #412]	@ (80015cc <main+0x33c>)
 800142e:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 8001432:	f103 0308 	add.w	r3, r3, #8
 8001436:	443b      	add	r3, r7
 8001438:	4965      	ldr	r1, [pc, #404]	@ (80015d0 <main+0x340>)
 800143a:	4618      	mov	r0, r3
 800143c:	f009 f86a 	bl	800a514 <strtok>
 8001440:	f647 5378 	movw	r3, #32120	@ 0x7d78
 8001444:	443b      	add	r3, r7
 8001446:	6018      	str	r0, [r3, #0]
		int j = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	f647 5274 	movw	r2, #32116	@ 0x7d74
 800144e:	443a      	add	r2, r7
 8001450:	6013      	str	r3, [r2, #0]

		while (token != NULL && j < tam)
 8001452:	e02b      	b.n	80014ac <main+0x21c>
		{
			linhas[i][j] = strtof(token, NULL);
 8001454:	f647 5388 	movw	r3, #32136	@ 0x7d88
 8001458:	443b      	add	r3, r7
 800145a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800145e:	f507 42fb 	add.w	r2, r7, #32128	@ 0x7d80
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001468:	f647 5374 	movw	r3, #32116	@ 0x7d74
 800146c:	443b      	add	r3, r7
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	18d4      	adds	r4, r2, r3
 8001474:	2100      	movs	r1, #0
 8001476:	f647 5378 	movw	r3, #32120	@ 0x7d78
 800147a:	443b      	add	r3, r7
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	f008 f839 	bl	80094f4 <strtof>
 8001482:	eef0 7a40 	vmov.f32	s15, s0
 8001486:	edc4 7a00 	vstr	s15, [r4]
			token = strtok(NULL, ",");
 800148a:	4951      	ldr	r1, [pc, #324]	@ (80015d0 <main+0x340>)
 800148c:	2000      	movs	r0, #0
 800148e:	f009 f841 	bl	800a514 <strtok>
 8001492:	f647 5378 	movw	r3, #32120	@ 0x7d78
 8001496:	443b      	add	r3, r7
 8001498:	6018      	str	r0, [r3, #0]
			j++;
 800149a:	f647 5374 	movw	r3, #32116	@ 0x7d74
 800149e:	443b      	add	r3, r7
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	f647 5274 	movw	r2, #32116	@ 0x7d74
 80014a8:	443a      	add	r2, r7
 80014aa:	6013      	str	r3, [r2, #0]
		while (token != NULL && j < tam)
 80014ac:	f647 5378 	movw	r3, #32120	@ 0x7d78
 80014b0:	443b      	add	r3, r7
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <main+0x236>
 80014b8:	f647 5374 	movw	r3, #32116	@ 0x7d74
 80014bc:	443b      	add	r3, r7
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f5b3 7f0b 	cmp.w	r3, #556	@ 0x22c
 80014c4:	dbc6      	blt.n	8001454 <main+0x1c4>
		}

		if (j != tam)
 80014c6:	f647 5374 	movw	r3, #32116	@ 0x7d74
 80014ca:	443b      	add	r3, r7
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f5b3 7f0b 	cmp.w	r3, #556	@ 0x22c
 80014d2:	d001      	beq.n	80014d8 <main+0x248>
		{
			return 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e257      	b.n	8001988 <main+0x6f8>
	for (int i = 0; i < 3; i++)
 80014d8:	f507 43fb 	add.w	r3, r7, #32128	@ 0x7d80
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	f507 42fb 	add.w	r2, r7, #32128	@ 0x7d80
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	f507 43fb 	add.w	r3, r7, #32128	@ 0x7d80
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	f77f af46 	ble.w	800137e <main+0xee>
		}
	}

	f_close(&fil);
 80014f2:	4b34      	ldr	r3, [pc, #208]	@ (80015c4 <main+0x334>)
 80014f4:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 80014f8:	f103 0308 	add.w	r3, r3, #8
 80014fc:	443b      	add	r3, r7
 80014fe:	4618      	mov	r0, r3
 8001500:	f007 f8a1 	bl	8008646 <f_close>

	for(uint16_t i = 0; i <= 1111; i++)
 8001504:	2300      	movs	r3, #0
 8001506:	f647 5272 	movw	r2, #32114	@ 0x7d72
 800150a:	443a      	add	r2, r7
 800150c:	8013      	strh	r3, [r2, #0]
 800150e:	e038      	b.n	8001582 <main+0x2f2>
	{
		mx_[i].flutuante = mx[i];
 8001510:	f647 5372 	movw	r3, #32114	@ 0x7d72
 8001514:	443b      	add	r3, r7
 8001516:	881a      	ldrh	r2, [r3, #0]
 8001518:	f647 5372 	movw	r3, #32114	@ 0x7d72
 800151c:	443b      	add	r3, r7
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	492c      	ldr	r1, [pc, #176]	@ (80015d4 <main+0x344>)
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	440a      	add	r2, r1
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	492b      	ldr	r1, [pc, #172]	@ (80015d8 <main+0x348>)
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	601a      	str	r2, [r3, #0]
		my_[i].flutuante = my[i];
 8001530:	f647 5372 	movw	r3, #32114	@ 0x7d72
 8001534:	443b      	add	r3, r7
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	f647 5372 	movw	r3, #32114	@ 0x7d72
 800153c:	443b      	add	r3, r7
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	4926      	ldr	r1, [pc, #152]	@ (80015dc <main+0x34c>)
 8001542:	0092      	lsls	r2, r2, #2
 8001544:	440a      	add	r2, r1
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	4925      	ldr	r1, [pc, #148]	@ (80015e0 <main+0x350>)
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	601a      	str	r2, [r3, #0]
		mz_[i].flutuante = mz[i];
 8001550:	f647 5372 	movw	r3, #32114	@ 0x7d72
 8001554:	443b      	add	r3, r7
 8001556:	881a      	ldrh	r2, [r3, #0]
 8001558:	f647 5372 	movw	r3, #32114	@ 0x7d72
 800155c:	443b      	add	r3, r7
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	4920      	ldr	r1, [pc, #128]	@ (80015e4 <main+0x354>)
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	440a      	add	r2, r1
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	491f      	ldr	r1, [pc, #124]	@ (80015e8 <main+0x358>)
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i <= 1111; i++)
 8001570:	f647 5372 	movw	r3, #32114	@ 0x7d72
 8001574:	443b      	add	r3, r7
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	f647 5272 	movw	r2, #32114	@ 0x7d72
 800157e:	443a      	add	r2, r7
 8001580:	8013      	strh	r3, [r2, #0]
 8001582:	f647 5372 	movw	r3, #32114	@ 0x7d72
 8001586:	443b      	add	r3, r7
 8001588:	881b      	ldrh	r3, [r3, #0]
 800158a:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 800158e:	d3bf      	bcc.n	8001510 <main+0x280>

	start_time = HAL_GetTick();
	passos_NLLS = NLLS(mx, my, mz, p1);
	NLLS_time = HAL_GetTick() - start_time;*/

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 8001590:	2201      	movs	r2, #1
 8001592:	2108      	movs	r1, #8
 8001594:	4815      	ldr	r0, [pc, #84]	@ (80015ec <main+0x35c>)
 8001596:	f001 f9a3 	bl	80028e0 <HAL_GPIO_WritePin>
	while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0));
 800159a:	bf00      	nop
 800159c:	2101      	movs	r1, #1
 800159e:	4814      	ldr	r0, [pc, #80]	@ (80015f0 <main+0x360>)
 80015a0:	f001 f986 	bl	80028b0 <HAL_GPIO_ReadPin>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f8      	beq.n	800159c <main+0x30c>
	HAL_Delay(5);
 80015aa:	2005      	movs	r0, #5
 80015ac:	f000 feca 	bl	8002344 <HAL_Delay>
	for(uint16_t i = 0; i <= 1111; i++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	f647 5270 	movw	r2, #32112	@ 0x7d70
 80015b6:	443a      	add	r2, r7
 80015b8:	8013      	strh	r3, [r2, #0]
 80015ba:	e031      	b.n	8001620 <main+0x390>
 80015bc:	0800d148 	.word	0x0800d148
 80015c0:	0800d14c 	.word	0x0800d14c
 80015c4:	ffff82f8 	.word	0xffff82f8
 80015c8:	0800d180 	.word	0x0800d180
 80015cc:	ffff8550 	.word	0xffff8550
 80015d0:	0800d160 	.word	0x0800d160
 80015d4:	20000204 	.word	0x20000204
 80015d8:	20003624 	.word	0x20003624
 80015dc:	20001364 	.word	0x20001364
 80015e0:	20004784 	.word	0x20004784
 80015e4:	200024c4 	.word	0x200024c4
 80015e8:	200058e4 	.word	0x200058e4
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020800 	.word	0x40020800
	{
		HAL_SPI_Transmit(&hspi1, mx_[i].inteiro, 4, HAL_MAX_DELAY);
 80015f4:	f647 5370 	movw	r3, #32112	@ 0x7d70
 80015f8:	443b      	add	r3, r7
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4a7f      	ldr	r2, [pc, #508]	@ (80017fc <main+0x56c>)
 8001600:	1899      	adds	r1, r3, r2
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	2204      	movs	r2, #4
 8001608:	487d      	ldr	r0, [pc, #500]	@ (8001800 <main+0x570>)
 800160a:	f001 fede 	bl	80033ca <HAL_SPI_Transmit>
	for(uint16_t i = 0; i <= 1111; i++)
 800160e:	f647 5370 	movw	r3, #32112	@ 0x7d70
 8001612:	443b      	add	r3, r7
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	f647 5270 	movw	r2, #32112	@ 0x7d70
 800161c:	443a      	add	r2, r7
 800161e:	8013      	strh	r3, [r2, #0]
 8001620:	f647 5370 	movw	r3, #32112	@ 0x7d70
 8001624:	443b      	add	r3, r7
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 800162c:	d3e2      	bcc.n	80015f4 <main+0x364>
	}
	for(uint16_t i = 0; i <= 1111; i++)
 800162e:	2300      	movs	r3, #0
 8001630:	f647 526e 	movw	r2, #32110	@ 0x7d6e
 8001634:	443a      	add	r2, r7
 8001636:	8013      	strh	r3, [r2, #0]
 8001638:	e015      	b.n	8001666 <main+0x3d6>
	{
		HAL_SPI_Transmit(&hspi1, my_[i].inteiro, 4, HAL_MAX_DELAY);
 800163a:	f647 536e 	movw	r3, #32110	@ 0x7d6e
 800163e:	443b      	add	r3, r7
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4a6f      	ldr	r2, [pc, #444]	@ (8001804 <main+0x574>)
 8001646:	1899      	adds	r1, r3, r2
 8001648:	f04f 33ff 	mov.w	r3, #4294967295
 800164c:	2204      	movs	r2, #4
 800164e:	486c      	ldr	r0, [pc, #432]	@ (8001800 <main+0x570>)
 8001650:	f001 febb 	bl	80033ca <HAL_SPI_Transmit>
	for(uint16_t i = 0; i <= 1111; i++)
 8001654:	f647 536e 	movw	r3, #32110	@ 0x7d6e
 8001658:	443b      	add	r3, r7
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	f647 526e 	movw	r2, #32110	@ 0x7d6e
 8001662:	443a      	add	r2, r7
 8001664:	8013      	strh	r3, [r2, #0]
 8001666:	f647 536e 	movw	r3, #32110	@ 0x7d6e
 800166a:	443b      	add	r3, r7
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8001672:	d3e2      	bcc.n	800163a <main+0x3aa>
	}
	for(uint16_t i = 0; i <= 1111; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	f647 526c 	movw	r2, #32108	@ 0x7d6c
 800167a:	443a      	add	r2, r7
 800167c:	8013      	strh	r3, [r2, #0]
 800167e:	e015      	b.n	80016ac <main+0x41c>
	{
		HAL_SPI_Transmit(&hspi1, mz_[i].inteiro, 4, HAL_MAX_DELAY);
 8001680:	f647 536c 	movw	r3, #32108	@ 0x7d6c
 8001684:	443b      	add	r3, r7
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4a5f      	ldr	r2, [pc, #380]	@ (8001808 <main+0x578>)
 800168c:	1899      	adds	r1, r3, r2
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	2204      	movs	r2, #4
 8001694:	485a      	ldr	r0, [pc, #360]	@ (8001800 <main+0x570>)
 8001696:	f001 fe98 	bl	80033ca <HAL_SPI_Transmit>
	for(uint16_t i = 0; i <= 1111; i++)
 800169a:	f647 536c 	movw	r3, #32108	@ 0x7d6c
 800169e:	443b      	add	r3, r7
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	f647 526c 	movw	r2, #32108	@ 0x7d6c
 80016a8:	443a      	add	r2, r7
 80016aa:	8013      	strh	r3, [r2, #0]
 80016ac:	f647 536c 	movw	r3, #32108	@ 0x7d6c
 80016b0:	443b      	add	r3, r7
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80016b8:	d3e2      	bcc.n	8001680 <main+0x3f0>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2108      	movs	r1, #8
 80016be:	4853      	ldr	r0, [pc, #332]	@ (800180c <main+0x57c>)
 80016c0:	f001 f90e 	bl	80028e0 <HAL_GPIO_WritePin>

	while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0));
 80016c4:	bf00      	nop
 80016c6:	2101      	movs	r1, #1
 80016c8:	4851      	ldr	r0, [pc, #324]	@ (8001810 <main+0x580>)
 80016ca:	f001 f8f1 	bl	80028b0 <HAL_GPIO_ReadPin>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f8      	beq.n	80016c6 <main+0x436>
	for(uint8_t i = 0; i < 10; i++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	f647 526b 	movw	r2, #32107	@ 0x7d6b
 80016da:	443a      	add	r2, r7
 80016dc:	7013      	strb	r3, [r2, #0]
 80016de:	e017      	b.n	8001710 <main+0x480>
	{
		HAL_SPI_Receive(&hspi1, param[i].inteiro, 4, HAL_MAX_DELAY);
 80016e0:	f647 536b 	movw	r3, #32107	@ 0x7d6b
 80016e4:	443b      	add	r3, r7
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	f647 521c 	movw	r2, #32028	@ 0x7d1c
 80016ec:	443a      	add	r2, r7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	18d1      	adds	r1, r2, r3
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	2204      	movs	r2, #4
 80016f8:	4841      	ldr	r0, [pc, #260]	@ (8001800 <main+0x570>)
 80016fa:	f001 ffdc 	bl	80036b6 <HAL_SPI_Receive>
	for(uint8_t i = 0; i < 10; i++)
 80016fe:	f647 536b 	movw	r3, #32107	@ 0x7d6b
 8001702:	443b      	add	r3, r7
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	f647 526b 	movw	r2, #32107	@ 0x7d6b
 800170c:	443a      	add	r2, r7
 800170e:	7013      	strb	r3, [r2, #0]
 8001710:	f647 536b 	movw	r3, #32107	@ 0x7d6b
 8001714:	443b      	add	r3, r7
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b09      	cmp	r3, #9
 800171a:	d9e1      	bls.n	80016e0 <main+0x450>
	}
	HAL_SPI_Receive(&hspi1, time.inteiro, 4, HAL_MAX_DELAY);
 800171c:	f647 5118 	movw	r1, #32024	@ 0x7d18
 8001720:	4439      	add	r1, r7
 8001722:	f04f 33ff 	mov.w	r3, #4294967295
 8001726:	2204      	movs	r2, #4
 8001728:	4835      	ldr	r0, [pc, #212]	@ (8001800 <main+0x570>)
 800172a:	f001 ffc4 	bl	80036b6 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &passos_NLLS, 1, HAL_MAX_DELAY);
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	2201      	movs	r2, #1
 8001734:	4937      	ldr	r1, [pc, #220]	@ (8001814 <main+0x584>)
 8001736:	4832      	ldr	r0, [pc, #200]	@ (8001800 <main+0x570>)
 8001738:	f001 ffbd 	bl	80036b6 <HAL_SPI_Receive>

	for(uint8_t i = 0; i < 10; i++)
 800173c:	2300      	movs	r3, #0
 800173e:	f647 526a 	movw	r2, #32106	@ 0x7d6a
 8001742:	443a      	add	r2, r7
 8001744:	7013      	strb	r3, [r2, #0]
 8001746:	e020      	b.n	800178a <main+0x4fa>
	{
		p1[i] = param[i].flutuante;
 8001748:	f647 536a 	movw	r3, #32106	@ 0x7d6a
 800174c:	443b      	add	r3, r7
 800174e:	781a      	ldrb	r2, [r3, #0]
 8001750:	f647 536a 	movw	r3, #32106	@ 0x7d6a
 8001754:	443b      	add	r3, r7
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	0092      	lsls	r2, r2, #2
 800175a:	f502 42fb 	add.w	r2, r2, #32128	@ 0x7d80
 800175e:	f102 0208 	add.w	r2, r2, #8
 8001762:	443a      	add	r2, r7
 8001764:	3a6c      	subs	r2, #108	@ 0x6c
 8001766:	6812      	ldr	r2, [r2, #0]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 800176e:	f103 0308 	add.w	r3, r3, #8
 8001772:	443b      	add	r3, r7
 8001774:	3b94      	subs	r3, #148	@ 0x94
 8001776:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 10; i++)
 8001778:	f647 536a 	movw	r3, #32106	@ 0x7d6a
 800177c:	443b      	add	r3, r7
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	f647 526a 	movw	r2, #32106	@ 0x7d6a
 8001786:	443a      	add	r2, r7
 8001788:	7013      	strb	r3, [r2, #0]
 800178a:	f647 536a 	movw	r3, #32106	@ 0x7d6a
 800178e:	443b      	add	r3, r7
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b09      	cmp	r3, #9
 8001794:	d9d8      	bls.n	8001748 <main+0x4b8>
	}
	NLLS_time = time.flutuante;
 8001796:	f647 5318 	movw	r3, #32024	@ 0x7d18
 800179a:	443b      	add	r3, r7
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f647 525c 	movw	r2, #32092	@ 0x7d5c
 80017a2:	443a      	add	r2, r7
 80017a4:	6013      	str	r3, [r2, #0]





	sprintf(file_read, "0:/RES/run%d.txt", file_cont);
 80017a6:	f647 5386 	movw	r3, #32134	@ 0x7d86
 80017aa:	443b      	add	r3, r7
 80017ac:	881a      	ldrh	r2, [r3, #0]
 80017ae:	f647 5340 	movw	r3, #32064	@ 0x7d40
 80017b2:	443b      	add	r3, r7
 80017b4:	4918      	ldr	r1, [pc, #96]	@ (8001818 <main+0x588>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f008 fe2e 	bl	800a418 <siprintf>
	res = f_open(&fil, file_read, FA_WRITE | FA_CREATE_ALWAYS);
 80017bc:	f647 5140 	movw	r1, #32064	@ 0x7d40
 80017c0:	4439      	add	r1, r7
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <main+0x58c>)
 80017c4:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 80017c8:	f103 0308 	add.w	r3, r3, #8
 80017cc:	443b      	add	r3, r7
 80017ce:	220a      	movs	r2, #10
 80017d0:	4618      	mov	r0, r3
 80017d2:	f006 f831 	bl	8007838 <f_open>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f647 5262 	movw	r2, #32098	@ 0x7d62
 80017dc:	443a      	add	r2, r7
 80017de:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 80017e0:	f647 5362 	movw	r3, #32098	@ 0x7d62
 80017e4:	443b      	add	r3, r7
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <main+0x560>
	{
		return 1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0cb      	b.n	8001988 <main+0x6f8>
	}

	char out_line[128];
	UINT bw;

	for (int i = 0; i < 9; i++) {
 80017f0:	2300      	movs	r3, #0
 80017f2:	f647 5264 	movw	r2, #32100	@ 0x7d64
 80017f6:	443a      	add	r2, r7
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e04e      	b.n	800189a <main+0x60a>
 80017fc:	20003624 	.word	0x20003624
 8001800:	20006a48 	.word	0x20006a48
 8001804:	20004784 	.word	0x20004784
 8001808:	200058e4 	.word	0x200058e4
 800180c:	40020000 	.word	0x40020000
 8001810:	40020800 	.word	0x40020800
 8001814:	20006a44 	.word	0x20006a44
 8001818:	0800d164 	.word	0x0800d164
 800181c:	ffff82f8 	.word	0xffff82f8
		sprintf(out_line, "%f\n", p1[i]);
 8001820:	f647 5364 	movw	r3, #32100	@ 0x7d64
 8001824:	443b      	add	r3, r7
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 800182e:	f103 0308 	add.w	r3, r3, #8
 8001832:	443b      	add	r3, r7
 8001834:	3b94      	subs	r3, #148	@ 0x94
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fea5 	bl	8000588 <__aeabi_f2d>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4854      	ldr	r0, [pc, #336]	@ (8001994 <main+0x704>)
 8001844:	f647 5188 	movw	r1, #32136	@ 0x7d88
 8001848:	4401      	add	r1, r0
 800184a:	19c8      	adds	r0, r1, r7
 800184c:	4952      	ldr	r1, [pc, #328]	@ (8001998 <main+0x708>)
 800184e:	f008 fde3 	bl	800a418 <siprintf>
		f_write(&fil, out_line, strlen(out_line), &bw);
 8001852:	4b50      	ldr	r3, [pc, #320]	@ (8001994 <main+0x704>)
 8001854:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 8001858:	f103 0308 	add.w	r3, r3, #8
 800185c:	443b      	add	r3, r7
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fd26 	bl	80002b0 <strlen>
 8001864:	4602      	mov	r2, r0
 8001866:	f647 23a8 	movw	r3, #31400	@ 0x7aa8
 800186a:	443b      	add	r3, r7
 800186c:	4949      	ldr	r1, [pc, #292]	@ (8001994 <main+0x704>)
 800186e:	f501 41fb 	add.w	r1, r1, #32128	@ 0x7d80
 8001872:	f101 0108 	add.w	r1, r1, #8
 8001876:	4439      	add	r1, r7
 8001878:	4848      	ldr	r0, [pc, #288]	@ (800199c <main+0x70c>)
 800187a:	f500 40fb 	add.w	r0, r0, #32128	@ 0x7d80
 800187e:	f100 0008 	add.w	r0, r0, #8
 8001882:	4438      	add	r0, r7
 8001884:	f006 fc0d 	bl	80080a2 <f_write>
	for (int i = 0; i < 9; i++) {
 8001888:	f647 5364 	movw	r3, #32100	@ 0x7d64
 800188c:	443b      	add	r3, r7
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	3301      	adds	r3, #1
 8001892:	f647 5264 	movw	r2, #32100	@ 0x7d64
 8001896:	443a      	add	r2, r7
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	f647 5364 	movw	r3, #32100	@ 0x7d64
 800189e:	443b      	add	r3, r7
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b08      	cmp	r3, #8
 80018a4:	ddbc      	ble.n	8001820 <main+0x590>
	}

	sprintf(out_line, "%f\n", NLLS_time);
 80018a6:	f647 535c 	movw	r3, #32092	@ 0x7d5c
 80018aa:	443b      	add	r3, r7
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	f7fe fe6b 	bl	8000588 <__aeabi_f2d>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4837      	ldr	r0, [pc, #220]	@ (8001994 <main+0x704>)
 80018b8:	f647 5188 	movw	r1, #32136	@ 0x7d88
 80018bc:	4401      	add	r1, r0
 80018be:	19c8      	adds	r0, r1, r7
 80018c0:	4935      	ldr	r1, [pc, #212]	@ (8001998 <main+0x708>)
 80018c2:	f008 fda9 	bl	800a418 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 80018c6:	4b33      	ldr	r3, [pc, #204]	@ (8001994 <main+0x704>)
 80018c8:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 80018cc:	f103 0308 	add.w	r3, r3, #8
 80018d0:	443b      	add	r3, r7
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fcec 	bl	80002b0 <strlen>
 80018d8:	4602      	mov	r2, r0
 80018da:	f647 23a8 	movw	r3, #31400	@ 0x7aa8
 80018de:	443b      	add	r3, r7
 80018e0:	492c      	ldr	r1, [pc, #176]	@ (8001994 <main+0x704>)
 80018e2:	f501 41fb 	add.w	r1, r1, #32128	@ 0x7d80
 80018e6:	f101 0108 	add.w	r1, r1, #8
 80018ea:	4439      	add	r1, r7
 80018ec:	482b      	ldr	r0, [pc, #172]	@ (800199c <main+0x70c>)
 80018ee:	f500 40fb 	add.w	r0, r0, #32128	@ 0x7d80
 80018f2:	f100 0008 	add.w	r0, r0, #8
 80018f6:	4438      	add	r0, r7
 80018f8:	f006 fbd3 	bl	80080a2 <f_write>

	sprintf(out_line, "%u\n", passos_NLLS);
 80018fc:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <main+0x710>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b24      	ldr	r3, [pc, #144]	@ (8001994 <main+0x704>)
 8001904:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 8001908:	f103 0308 	add.w	r3, r3, #8
 800190c:	443b      	add	r3, r7
 800190e:	4925      	ldr	r1, [pc, #148]	@ (80019a4 <main+0x714>)
 8001910:	4618      	mov	r0, r3
 8001912:	f008 fd81 	bl	800a418 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 8001916:	4b1f      	ldr	r3, [pc, #124]	@ (8001994 <main+0x704>)
 8001918:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 800191c:	f103 0308 	add.w	r3, r3, #8
 8001920:	443b      	add	r3, r7
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fcc4 	bl	80002b0 <strlen>
 8001928:	4602      	mov	r2, r0
 800192a:	f647 23a8 	movw	r3, #31400	@ 0x7aa8
 800192e:	443b      	add	r3, r7
 8001930:	4918      	ldr	r1, [pc, #96]	@ (8001994 <main+0x704>)
 8001932:	f501 41fb 	add.w	r1, r1, #32128	@ 0x7d80
 8001936:	f101 0108 	add.w	r1, r1, #8
 800193a:	4439      	add	r1, r7
 800193c:	4817      	ldr	r0, [pc, #92]	@ (800199c <main+0x70c>)
 800193e:	f500 40fb 	add.w	r0, r0, #32128	@ 0x7d80
 8001942:	f100 0008 	add.w	r0, r0, #8
 8001946:	4438      	add	r0, r7
 8001948:	f006 fbab 	bl	80080a2 <f_write>

	f_close(&fil);
 800194c:	4b13      	ldr	r3, [pc, #76]	@ (800199c <main+0x70c>)
 800194e:	f503 43fb 	add.w	r3, r3, #32128	@ 0x7d80
 8001952:	f103 0308 	add.w	r3, r3, #8
 8001956:	443b      	add	r3, r7
 8001958:	4618      	mov	r0, r3
 800195a:	f006 fe74 	bl	8008646 <f_close>

	file_cont++;
 800195e:	f647 5386 	movw	r3, #32134	@ 0x7d86
 8001962:	443b      	add	r3, r7
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	f647 5286 	movw	r2, #32134	@ 0x7d86
 800196c:	443a      	add	r2, r7
 800196e:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001970:	2180      	movs	r1, #128	@ 0x80
 8001972:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <main+0x718>)
 8001974:	f000 ffcd 	bl	8002912 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001978:	2064      	movs	r0, #100	@ 0x64
 800197a:	f000 fce3 	bl	8002344 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800197e:	2180      	movs	r1, #128	@ 0x80
 8001980:	4809      	ldr	r0, [pc, #36]	@ (80019a8 <main+0x718>)
 8001982:	f000 ffc6 	bl	8002912 <HAL_GPIO_TogglePin>
  {
 8001986:	e4bd      	b.n	8001304 <main+0x74>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001988:	4618      	mov	r0, r3
 800198a:	f507 47fb 	add.w	r7, r7, #32128	@ 0x7d80
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	ffff8278 	.word	0xffff8278
 8001998:	0800d178 	.word	0x0800d178
 800199c:	ffff82f8 	.word	0xffff82f8
 80019a0:	20006a44 	.word	0x20006a44
 80019a4:	0800d17c 	.word	0x0800d17c
 80019a8:	40020400 	.word	0x40020400

080019ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b094      	sub	sp, #80	@ 0x50
 80019b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b2:	f107 0320 	add.w	r3, r7, #32
 80019b6:	2230      	movs	r2, #48	@ 0x30
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f008 fd8f 	bl	800a4de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d0:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <SystemClock_Config+0xb0>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	4a21      	ldr	r2, [pc, #132]	@ (8001a5c <SystemClock_Config+0xb0>)
 80019d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019da:	6413      	str	r3, [r2, #64]	@ 0x40
 80019dc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a5c <SystemClock_Config+0xb0>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <SystemClock_Config+0xb4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80019f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a60 <SystemClock_Config+0xb4>)
 80019f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <SystemClock_Config+0xb4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a00:	607b      	str	r3, [r7, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a04:	2302      	movs	r3, #2
 8001a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a0c:	2310      	movs	r3, #16
 8001a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 ff95 	bl	8002948 <HAL_RCC_OscConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001a24:	f000 f81e 	bl	8001a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a28:	230f      	movs	r3, #15
 8001a2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f001 fa23 	bl	8002e90 <HAL_RCC_ClockConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001a50:	f000 f808 	bl	8001a64 <Error_Handler>
  }
}
 8001a54:	bf00      	nop
 8001a56:	3750      	adds	r7, #80	@ 0x50
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40007000 	.word	0x40007000

08001a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a68:	b672      	cpsid	i
}
 8001a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2101      	movs	r1, #1
 8001a70:	4802      	ldr	r0, [pc, #8]	@ (8001a7c <Error_Handler+0x18>)
 8001a72:	f000 ff35 	bl	80028e0 <HAL_GPIO_WritePin>
  while (1)
 8001a76:	bf00      	nop
 8001a78:	e7fd      	b.n	8001a76 <Error_Handler+0x12>
 8001a7a:	bf00      	nop
 8001a7c:	40020400 	.word	0x40020400

08001a80 <SD_SendDummyClock>:
#define SD_CS_LOW()   HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET)
#define SD_CS_HIGH()  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET)

extern SPI_HandleTypeDef hspi3; // Use a instância correta do SPI

static void SD_SendDummyClock(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
    uint8_t dummy = 0xFF;
 8001a86:	23ff      	movs	r3, #255	@ 0xff
 8001a88:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 10; i++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	e009      	b.n	8001aa4 <SD_SendDummyClock+0x24>
        HAL_SPI_Transmit(&hspi3, &dummy, 1, HAL_MAX_DELAY);
 8001a90:	1cf9      	adds	r1, r7, #3
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	2201      	movs	r2, #1
 8001a98:	4806      	ldr	r0, [pc, #24]	@ (8001ab4 <SD_SendDummyClock+0x34>)
 8001a9a:	f001 fc96 	bl	80033ca <HAL_SPI_Transmit>
    for (int i = 0; i < 10; i++)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b09      	cmp	r3, #9
 8001aa8:	ddf2      	ble.n	8001a90 <SD_SendDummyClock+0x10>
}
 8001aaa:	bf00      	nop
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20006aac 	.word	0x20006aac

08001ab8 <SD_TransmitByte>:

static uint8_t SD_TransmitByte(uint8_t data) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af02      	add	r7, sp, #8
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
    uint8_t received;
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8001ac2:	f107 020f 	add.w	r2, r7, #15
 8001ac6:	1df9      	adds	r1, r7, #7
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	4803      	ldr	r0, [pc, #12]	@ (8001ae0 <SD_TransmitByte+0x28>)
 8001ad2:	f001 ff28 	bl	8003926 <HAL_SPI_TransmitReceive>
    return received;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20006aac 	.word	0x20006aac

08001ae4 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
    return SD_TransmitByte(0xFF);
 8001ae8:	20ff      	movs	r0, #255	@ 0xff
 8001aea:	f7ff ffe5 	bl	8001ab8 <SD_TransmitByte>
 8001aee:	4603      	mov	r3, r0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <SD_WaitReady>:

static uint8_t SD_WaitReady(void) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
    uint8_t res;
    uint32_t timeout = HAL_GetTick();
 8001afa:	f000 fc17 	bl	800232c <HAL_GetTick>
 8001afe:	6078      	str	r0, [r7, #4]
    do {
        res = SD_ReceiveByte();
 8001b00:	f7ff fff0 	bl	8001ae4 <SD_ReceiveByte>
 8001b04:	4603      	mov	r3, r0
 8001b06:	70fb      	strb	r3, [r7, #3]
        if (res == 0xFF) return 1;
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	2bff      	cmp	r3, #255	@ 0xff
 8001b0c:	d101      	bne.n	8001b12 <SD_WaitReady+0x1e>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e008      	b.n	8001b24 <SD_WaitReady+0x30>
    } while ((HAL_GetTick() - timeout) < 500);
 8001b12:	f000 fc0b 	bl	800232c <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b20:	d3ee      	bcc.n	8001b00 <SD_WaitReady+0xc>
    return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <SD_Select>:

static void SD_Select(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
    SD_CS_LOW();
 8001b30:	2200      	movs	r2, #0
 8001b32:	2110      	movs	r1, #16
 8001b34:	4803      	ldr	r0, [pc, #12]	@ (8001b44 <SD_Select+0x18>)
 8001b36:	f000 fed3 	bl	80028e0 <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 8001b3a:	f7ff ffd3 	bl	8001ae4 <SD_ReceiveByte>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40020000 	.word	0x40020000

08001b48 <SD_Deselect>:

static void SD_Deselect(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2110      	movs	r1, #16
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <SD_Deselect+0x18>)
 8001b52:	f000 fec5 	bl	80028e0 <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 8001b56:	f7ff ffc5 	bl	8001ae4 <SD_ReceiveByte>
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020000 	.word	0x40020000

08001b64 <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[6];
    buf[0] = 0x40 | cmd;
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	723b      	strb	r3, [r7, #8]
    buf[1] = (arg >> 24) & 0xFF;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	0e1b      	lsrs	r3, r3, #24
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	727b      	strb	r3, [r7, #9]
    buf[2] = (arg >> 16) & 0xFF;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	72bb      	strb	r3, [r7, #10]
    buf[3] = (arg >> 8) & 0xFF;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	72fb      	strb	r3, [r7, #11]
    buf[4] = arg & 0xFF;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	733b      	strb	r3, [r7, #12]
    buf[5] = crc;
 8001b9c:	79bb      	ldrb	r3, [r7, #6]
 8001b9e:	737b      	strb	r3, [r7, #13]

    SD_Deselect();
 8001ba0:	f7ff ffd2 	bl	8001b48 <SD_Deselect>
    SD_Select();
 8001ba4:	f7ff ffc2 	bl	8001b2c <SD_Select>

    if (!SD_WaitReady()) {
 8001ba8:	f7ff ffa4 	bl	8001af4 <SD_WaitReady>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d103      	bne.n	8001bba <SD_SendCommand+0x56>
        SD_Deselect();
 8001bb2:	f7ff ffc9 	bl	8001b48 <SD_Deselect>
        return 0xFF;
 8001bb6:	23ff      	movs	r3, #255	@ 0xff
 8001bb8:	e024      	b.n	8001c04 <SD_SendCommand+0xa0>
    }

    for (int i = 0; i < 6; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e00a      	b.n	8001bd6 <SD_SendCommand+0x72>
        SD_TransmitByte(buf[i]);
 8001bc0:	f107 0208 	add.w	r2, r7, #8
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff74 	bl	8001ab8 <SD_TransmitByte>
    for (int i = 0; i < 6; i++)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	ddf1      	ble.n	8001bc0 <SD_SendCommand+0x5c>

    // Aguarda resposta (bit 7 == 0)
    for (int i = 0; i < 10; i++) {
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e00c      	b.n	8001bfc <SD_SendCommand+0x98>
        uint8_t res = SD_ReceiveByte();
 8001be2:	f7ff ff7f 	bl	8001ae4 <SD_ReceiveByte>
 8001be6:	4603      	mov	r3, r0
 8001be8:	73fb      	strb	r3, [r7, #15]
        if ((res & 0x80) == 0)
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db01      	blt.n	8001bf6 <SD_SendCommand+0x92>
            return res;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	e006      	b.n	8001c04 <SD_SendCommand+0xa0>
    for (int i = 0; i < 10; i++) {
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b09      	cmp	r3, #9
 8001c00:	ddef      	ble.n	8001be2 <SD_SendCommand+0x7e>
    }

    return 0xFF;
 8001c02:	23ff      	movs	r3, #255	@ 0xff
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <SD_Init>:

uint8_t SD_Init(void) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8001c12:	2201      	movs	r2, #1
 8001c14:	2110      	movs	r1, #16
 8001c16:	4820      	ldr	r0, [pc, #128]	@ (8001c98 <SD_Init+0x8c>)
 8001c18:	f000 fe62 	bl	80028e0 <HAL_GPIO_WritePin>
    SD_SendDummyClock(); // 80 clocks
 8001c1c:	f7ff ff30 	bl	8001a80 <SD_SendDummyClock>

    uint8_t res = SD_SendCommand(CMD0, 0, 0x95);
 8001c20:	2295      	movs	r2, #149	@ 0x95
 8001c22:	2100      	movs	r1, #0
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff ff9d 	bl	8001b64 <SD_SendCommand>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d001      	beq.n	8001c38 <SD_Init+0x2c>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e02b      	b.n	8001c90 <SD_Init+0x84>

    res = SD_SendCommand(CMD8, 0x1AA, 0x87);
 8001c38:	2287      	movs	r2, #135	@ 0x87
 8001c3a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001c3e:	2008      	movs	r0, #8
 8001c40:	f7ff ff90 	bl	8001b64 <SD_SendCommand>
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d001      	beq.n	8001c52 <SD_Init+0x46>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e01e      	b.n	8001c90 <SD_Init+0x84>

    // Espera inicialização
    do {
        SD_SendCommand(CMD55, 0, 0x01);
 8001c52:	2201      	movs	r2, #1
 8001c54:	2100      	movs	r1, #0
 8001c56:	2037      	movs	r0, #55	@ 0x37
 8001c58:	f7ff ff84 	bl	8001b64 <SD_SendCommand>
        res = SD_SendCommand(ACMD41, 0x40000000, 0x01);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c62:	2029      	movs	r0, #41	@ 0x29
 8001c64:	f7ff ff7e 	bl	8001b64 <SD_SendCommand>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
    } while (res != 0x00);
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1ef      	bne.n	8001c52 <SD_Init+0x46>

    res = SD_SendCommand(CMD58, 0, 0x01);
 8001c72:	2201      	movs	r2, #1
 8001c74:	2100      	movs	r1, #0
 8001c76:	203a      	movs	r0, #58	@ 0x3a
 8001c78:	f7ff ff74 	bl	8001b64 <SD_SendCommand>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
    SD_Deselect();
 8001c80:	f7ff ff62 	bl	8001b48 <SD_Deselect>
    return (res == 0x00) ? SD_OK : SD_ERROR;
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bf14      	ite	ne
 8001c8a:	2301      	movne	r3, #1
 8001c8c:	2300      	moveq	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40020000 	.word	0x40020000

08001c9c <SD_ReadBlock>:

uint8_t SD_ReadBlock(uint32_t blockAddr, uint8_t* buff) {
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
    uint8_t token;

    if (SD_SendCommand(CMD17, blockAddr, 0x01) != 0x00)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	2011      	movs	r0, #17
 8001cac:	f7ff ff5a 	bl	8001b64 <SD_SendCommand>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SD_ReadBlock+0x1e>
        return SD_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e030      	b.n	8001d1c <SD_ReadBlock+0x80>

    // Espera token 0xFE (início do bloco)
    for (int i = 0; i < 10000; i++) {
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	e009      	b.n	8001cd4 <SD_ReadBlock+0x38>
        token = SD_ReceiveByte();
 8001cc0:	f7ff ff10 	bl	8001ae4 <SD_ReceiveByte>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	75fb      	strb	r3, [r7, #23]
        if (token == 0xFE) break;
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	2bfe      	cmp	r3, #254	@ 0xfe
 8001ccc:	d008      	beq.n	8001ce0 <SD_ReadBlock+0x44>
    for (int i = 0; i < 10000; i++) {
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	ddf0      	ble.n	8001cc0 <SD_ReadBlock+0x24>
 8001cde:	e000      	b.n	8001ce2 <SD_ReadBlock+0x46>
        if (token == 0xFE) break;
 8001ce0:	bf00      	nop
    }
    if (token != 0xFE) return SD_ERROR;
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	2bfe      	cmp	r3, #254	@ 0xfe
 8001ce6:	d001      	beq.n	8001cec <SD_ReadBlock+0x50>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e017      	b.n	8001d1c <SD_ReadBlock+0x80>

    for (int i = 0; i < 512; i++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e009      	b.n	8001d06 <SD_ReadBlock+0x6a>
        buff[i] = SD_ReceiveByte();
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	18d4      	adds	r4, r2, r3
 8001cf8:	f7ff fef4 	bl	8001ae4 <SD_ReceiveByte>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 512; i++)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3301      	adds	r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d0c:	dbf1      	blt.n	8001cf2 <SD_ReadBlock+0x56>

    SD_ReceiveByte(); // Discard CRC
 8001d0e:	f7ff fee9 	bl	8001ae4 <SD_ReceiveByte>
    SD_ReceiveByte();
 8001d12:	f7ff fee7 	bl	8001ae4 <SD_ReceiveByte>

    SD_Deselect();
 8001d16:	f7ff ff17 	bl	8001b48 <SD_Deselect>
    return SD_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd90      	pop	{r4, r7, pc}

08001d24 <SD_WriteBlock>:

uint8_t SD_WriteBlock(uint32_t blockAddr, const uint8_t* buff) {
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
    if (SD_SendCommand(CMD24, blockAddr, 0x01) != 0x00)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	2018      	movs	r0, #24
 8001d34:	f7ff ff16 	bl	8001b64 <SD_SendCommand>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <SD_WriteBlock+0x1e>
        return SD_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e02f      	b.n	8001da2 <SD_WriteBlock+0x7e>

    SD_TransmitByte(0xFE); // Start token
 8001d42:	20fe      	movs	r0, #254	@ 0xfe
 8001d44:	f7ff feb8 	bl	8001ab8 <SD_TransmitByte>

    for (int i = 0; i < 512; i++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	e009      	b.n	8001d62 <SD_WriteBlock+0x3e>
        SD_TransmitByte(buff[i]);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff feae 	bl	8001ab8 <SD_TransmitByte>
    for (int i = 0; i < 512; i++)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d68:	dbf1      	blt.n	8001d4e <SD_WriteBlock+0x2a>

    SD_TransmitByte(0xFF); // Dummy CRC
 8001d6a:	20ff      	movs	r0, #255	@ 0xff
 8001d6c:	f7ff fea4 	bl	8001ab8 <SD_TransmitByte>
    SD_TransmitByte(0xFF);
 8001d70:	20ff      	movs	r0, #255	@ 0xff
 8001d72:	f7ff fea1 	bl	8001ab8 <SD_TransmitByte>

    uint8_t resp = SD_ReceiveByte();
 8001d76:	f7ff feb5 	bl	8001ae4 <SD_ReceiveByte>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	72fb      	strb	r3, [r7, #11]
    if ((resp & 0x1F) != 0x05) {
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d003      	beq.n	8001d90 <SD_WriteBlock+0x6c>
        SD_Deselect();
 8001d88:	f7ff fede 	bl	8001b48 <SD_Deselect>
        return SD_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e008      	b.n	8001da2 <SD_WriteBlock+0x7e>
    }

    while (!SD_ReceiveByte()); // Espera escrever
 8001d90:	bf00      	nop
 8001d92:	f7ff fea7 	bl	8001ae4 <SD_ReceiveByte>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0fa      	beq.n	8001d92 <SD_WriteBlock+0x6e>

    SD_Deselect();
 8001d9c:	f7ff fed4 	bl	8001b48 <SD_Deselect>
    return SD_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001db2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e24 <MX_SPI1_Init+0x78>)
 8001db4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001db8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001dbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dbe:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dc4:	4b16      	ldr	r3, [pc, #88]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dc6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001dca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dcc:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dd2:	4b13      	ldr	r3, [pc, #76]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dda:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001dde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001de0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001de2:	2228      	movs	r2, #40	@ 0x28
 8001de4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dec:	4b0c      	ldr	r3, [pc, #48]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df2:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001df8:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dfe:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001e06:	2208      	movs	r2, #8
 8001e08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e0a:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <MX_SPI1_Init+0x74>)
 8001e0c:	f001 fa32 	bl	8003274 <HAL_SPI_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e16:	f7ff fe25 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20006a48 	.word	0x20006a48
 8001e24:	40013000 	.word	0x40013000

08001e28 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea0 <MX_SPI3_Init+0x78>)
 8001e30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3a:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e40:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e42:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001e46:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e48:	4b14      	ldr	r3, [pc, #80]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001e54:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e56:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e5a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001e74:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e76:	2207      	movs	r2, #7
 8001e78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e82:	2208      	movs	r2, #8
 8001e84:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <MX_SPI3_Init+0x74>)
 8001e88:	f001 f9f4 	bl	8003274 <HAL_SPI_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001e92:	f7ff fde7 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20006aac 	.word	0x20006aac
 8001ea0:	40003c00 	.word	0x40003c00

08001ea4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb4 <HAL_SPI_MspInit+0x110>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d129      	bne.n	8001f1a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	4a3b      	ldr	r2, [pc, #236]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001ecc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ed0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed2:	4b39      	ldr	r3, [pc, #228]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	4b36      	ldr	r3, [pc, #216]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a35      	ldr	r2, [pc, #212]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b33      	ldr	r3, [pc, #204]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8001ef6:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 8001efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f08:	2305      	movs	r3, #5
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	4619      	mov	r1, r3
 8001f12:	482a      	ldr	r0, [pc, #168]	@ (8001fbc <HAL_SPI_MspInit+0x118>)
 8001f14:	f000 fb20 	bl	8002558 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001f18:	e048      	b.n	8001fac <HAL_SPI_MspInit+0x108>
  else if(spiHandle->Instance==SPI3)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a28      	ldr	r2, [pc, #160]	@ (8001fc0 <HAL_SPI_MspInit+0x11c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d143      	bne.n	8001fac <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f24:	4b24      	ldr	r3, [pc, #144]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f28:	4a23      	ldr	r2, [pc, #140]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f30:	4b21      	ldr	r3, [pc, #132]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f48:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f58:	4a17      	ldr	r2, [pc, #92]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001f5a:	f043 0302 	orr.w	r3, r3, #2
 8001f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f60:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <HAL_SPI_MspInit+0x114>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f7c:	2306      	movs	r3, #6
 8001f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	4619      	mov	r1, r3
 8001f86:	480d      	ldr	r0, [pc, #52]	@ (8001fbc <HAL_SPI_MspInit+0x118>)
 8001f88:	f000 fae6 	bl	8002558 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001f8c:	2338      	movs	r3, #56	@ 0x38
 8001f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f9c:	2306      	movs	r3, #6
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <HAL_SPI_MspInit+0x120>)
 8001fa8:	f000 fad6 	bl	8002558 <HAL_GPIO_Init>
}
 8001fac:	bf00      	nop
 8001fae:	3730      	adds	r7, #48	@ 0x30
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40013000 	.word	0x40013000
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40003c00 	.word	0x40003c00
 8001fc4:	40020400 	.word	0x40020400

08001fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <HAL_MspInit+0x44>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <HAL_MspInit+0x44>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fda:	4b0c      	ldr	r3, [pc, #48]	@ (800200c <HAL_MspInit+0x44>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	4b09      	ldr	r3, [pc, #36]	@ (800200c <HAL_MspInit+0x44>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	4a08      	ldr	r2, [pc, #32]	@ (800200c <HAL_MspInit+0x44>)
 8001fec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <HAL_MspInit+0x44>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800

08002010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <NMI_Handler+0x4>

08002018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800201c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002020:	4804      	ldr	r0, [pc, #16]	@ (8002034 <HardFault_Handler+0x1c>)
 8002022:	f000 fc76 	bl	8002912 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8002026:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800202a:	f000 f98b 	bl	8002344 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800202e:	bf00      	nop
 8002030:	e7f4      	b.n	800201c <HardFault_Handler+0x4>
 8002032:	bf00      	nop
 8002034:	40020400 	.word	0x40020400

08002038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <MemManage_Handler+0x4>

08002040 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <UsageFault_Handler+0x4>

08002050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207e:	f000 f941 	bl	8002304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}

08002086 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  return 1;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <_kill>:

int _kill(int pid, int sig)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020a0:	f008 fade 	bl	800a660 <__errno>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2216      	movs	r2, #22
 80020a8:	601a      	str	r2, [r3, #0]
  return -1;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_exit>:

void _exit (int status)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020be:	f04f 31ff 	mov.w	r1, #4294967295
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffe7 	bl	8002096 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <_exit+0x12>

080020cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e00a      	b.n	80020f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020de:	f3af 8000 	nop.w
 80020e2:	4601      	mov	r1, r0
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	60ba      	str	r2, [r7, #8]
 80020ea:	b2ca      	uxtb	r2, r1
 80020ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dbf0      	blt.n	80020de <_read+0x12>
  }

  return len;
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	e009      	b.n	800212c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	60ba      	str	r2, [r7, #8]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	3301      	adds	r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	429a      	cmp	r2, r3
 8002132:	dbf1      	blt.n	8002118 <_write+0x12>
  }
  return len;
 8002134:	687b      	ldr	r3, [r7, #4]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <_close>:

int _close(int file)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800214a:	4618      	mov	r0, r3
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002166:	605a      	str	r2, [r3, #4]
  return 0;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <_isatty>:

int _isatty(int file)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800217e:	2301      	movs	r3, #1
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b0:	4a14      	ldr	r2, [pc, #80]	@ (8002204 <_sbrk+0x5c>)
 80021b2:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <_sbrk+0x60>)
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021bc:	4b13      	ldr	r3, [pc, #76]	@ (800220c <_sbrk+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <_sbrk+0x64>)
 80021c6:	4a12      	ldr	r2, [pc, #72]	@ (8002210 <_sbrk+0x68>)
 80021c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <_sbrk+0x64>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d207      	bcs.n	80021e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d8:	f008 fa42 	bl	800a660 <__errno>
 80021dc:	4603      	mov	r3, r0
 80021de:	220c      	movs	r2, #12
 80021e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	e009      	b.n	80021fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e8:	4b08      	ldr	r3, [pc, #32]	@ (800220c <_sbrk+0x64>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ee:	4b07      	ldr	r3, [pc, #28]	@ (800220c <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	4a05      	ldr	r2, [pc, #20]	@ (800220c <_sbrk+0x64>)
 80021f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20050000 	.word	0x20050000
 8002208:	00000400 	.word	0x00000400
 800220c:	20006b10 	.word	0x20006b10
 8002210:	200070f0 	.word	0x200070f0

08002214 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <SystemInit+0x20>)
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221e:	4a05      	ldr	r2, [pc, #20]	@ (8002234 <SystemInit+0x20>)
 8002220:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002224:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002238:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002270 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800223c:	f7ff ffea 	bl	8002214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002240:	480c      	ldr	r0, [pc, #48]	@ (8002274 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002242:	490d      	ldr	r1, [pc, #52]	@ (8002278 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002244:	4a0d      	ldr	r2, [pc, #52]	@ (800227c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002248:	e002      	b.n	8002250 <LoopCopyDataInit>

0800224a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800224c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224e:	3304      	adds	r3, #4

08002250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002254:	d3f9      	bcc.n	800224a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002256:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002258:	4c0a      	ldr	r4, [pc, #40]	@ (8002284 <LoopFillZerobss+0x22>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800225c:	e001      	b.n	8002262 <LoopFillZerobss>

0800225e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002260:	3204      	adds	r2, #4

08002262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002264:	d3fb      	bcc.n	800225e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002266:	f008 fa01 	bl	800a66c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800226a:	f7ff f811 	bl	8001290 <main>
  bx  lr    
 800226e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002270:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002278:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800227c:	0800dacc 	.word	0x0800dacc
  ldr r2, =_sbss
 8002280:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002284:	200070f0 	.word	0x200070f0

08002288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <ADC_IRQHandler>

0800228a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228e:	2003      	movs	r0, #3
 8002290:	f000 f92e 	bl	80024f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002294:	2000      	movs	r0, #0
 8002296:	f000 f805 	bl	80022a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800229a:	f7ff fe95 	bl	8001fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <HAL_InitTick+0x54>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <HAL_InitTick+0x58>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	4619      	mov	r1, r3
 80022b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f93b 	bl	800253e <HAL_SYSTICK_Config>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00e      	b.n	80022f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b0f      	cmp	r3, #15
 80022d6:	d80a      	bhi.n	80022ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d8:	2200      	movs	r2, #0
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f000 f911 	bl	8002506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e4:	4a06      	ldr	r2, [pc, #24]	@ (8002300 <HAL_InitTick+0x5c>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e000      	b.n	80022f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000008 	.word	0x20000008
 8002300:	20000004 	.word	0x20000004

08002304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_IncTick+0x20>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_IncTick+0x24>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4413      	add	r3, r2
 8002314:	4a04      	ldr	r2, [pc, #16]	@ (8002328 <HAL_IncTick+0x24>)
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000008 	.word	0x20000008
 8002328:	20006b14 	.word	0x20006b14

0800232c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return uwTick;
 8002330:	4b03      	ldr	r3, [pc, #12]	@ (8002340 <HAL_GetTick+0x14>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20006b14 	.word	0x20006b14

08002344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff ffee 	bl	800232c <HAL_GetTick>
 8002350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235c:	d005      	beq.n	800236a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <HAL_Delay+0x44>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4413      	add	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800236a:	bf00      	nop
 800236c:	f7ff ffde 	bl	800232c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d8f7      	bhi.n	800236c <HAL_Delay+0x28>
  {
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000008 	.word	0x20000008

0800238c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b0b      	ldr	r3, [pc, #44]	@ (80023cc <__NVIC_SetPriorityGrouping+0x40>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ba:	4a04      	ldr	r2, [pc, #16]	@ (80023cc <__NVIC_SetPriorityGrouping+0x40>)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	60d3      	str	r3, [r2, #12]
}
 80023c0:	bf00      	nop
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00
 80023d0:	05fa0000 	.word	0x05fa0000

080023d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d8:	4b04      	ldr	r3, [pc, #16]	@ (80023ec <__NVIC_GetPriorityGrouping+0x18>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0307 	and.w	r3, r3, #7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	@ (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	@ (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	@ 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f1c3 0307 	rsb	r3, r3, #7
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf28      	it	cs
 8002462:	2304      	movcs	r3, #4
 8002464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3304      	adds	r3, #4
 800246a:	2b06      	cmp	r3, #6
 800246c:	d902      	bls.n	8002474 <NVIC_EncodePriority+0x30>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b03      	subs	r3, #3
 8002472:	e000      	b.n	8002476 <NVIC_EncodePriority+0x32>
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248c:	f04f 31ff 	mov.w	r1, #4294967295
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43d9      	mvns	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	4313      	orrs	r3, r2
         );
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3724      	adds	r7, #36	@ 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
	...

080024ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024bc:	d301      	bcc.n	80024c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024be:	2301      	movs	r3, #1
 80024c0:	e00f      	b.n	80024e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c2:	4a0a      	ldr	r2, [pc, #40]	@ (80024ec <SysTick_Config+0x40>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ca:	210f      	movs	r1, #15
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f7ff ff8e 	bl	80023f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d4:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <SysTick_Config+0x40>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024da:	4b04      	ldr	r3, [pc, #16]	@ (80024ec <SysTick_Config+0x40>)
 80024dc:	2207      	movs	r2, #7
 80024de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	e000e010 	.word	0xe000e010

080024f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff47 	bl	800238c <__NVIC_SetPriorityGrouping>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002518:	f7ff ff5c 	bl	80023d4 <__NVIC_GetPriorityGrouping>
 800251c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f7ff ff8e 	bl	8002444 <NVIC_EncodePriority>
 8002528:	4602      	mov	r2, r0
 800252a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff ff5d 	bl	80023f0 <__NVIC_SetPriority>
}
 8002536:	bf00      	nop
 8002538:	3718      	adds	r7, #24
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ffb0 	bl	80024ac <SysTick_Config>
 800254c:	4603      	mov	r3, r0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	@ 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	e175      	b.n	8002864 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	f040 8164 	bne.w	800285e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d005      	beq.n	80025ae <HAL_GPIO_Init+0x56>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d130      	bne.n	8002610 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	2203      	movs	r2, #3
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e4:	2201      	movs	r2, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 0201 	and.w	r2, r3, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b03      	cmp	r3, #3
 800261a:	d017      	beq.n	800264c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d123      	bne.n	80026a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	08da      	lsrs	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3208      	adds	r2, #8
 8002660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	220f      	movs	r2, #15
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	08da      	lsrs	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3208      	adds	r2, #8
 800269a:	69b9      	ldr	r1, [r7, #24]
 800269c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0203 	and.w	r2, r3, #3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80be 	beq.w	800285e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e2:	4b66      	ldr	r3, [pc, #408]	@ (800287c <HAL_GPIO_Init+0x324>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e6:	4a65      	ldr	r2, [pc, #404]	@ (800287c <HAL_GPIO_Init+0x324>)
 80026e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ee:	4b63      	ldr	r3, [pc, #396]	@ (800287c <HAL_GPIO_Init+0x324>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026fa:	4a61      	ldr	r2, [pc, #388]	@ (8002880 <HAL_GPIO_Init+0x328>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a58      	ldr	r2, [pc, #352]	@ (8002884 <HAL_GPIO_Init+0x32c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d037      	beq.n	8002796 <HAL_GPIO_Init+0x23e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a57      	ldr	r2, [pc, #348]	@ (8002888 <HAL_GPIO_Init+0x330>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d031      	beq.n	8002792 <HAL_GPIO_Init+0x23a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a56      	ldr	r2, [pc, #344]	@ (800288c <HAL_GPIO_Init+0x334>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d02b      	beq.n	800278e <HAL_GPIO_Init+0x236>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a55      	ldr	r2, [pc, #340]	@ (8002890 <HAL_GPIO_Init+0x338>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d025      	beq.n	800278a <HAL_GPIO_Init+0x232>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a54      	ldr	r2, [pc, #336]	@ (8002894 <HAL_GPIO_Init+0x33c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d01f      	beq.n	8002786 <HAL_GPIO_Init+0x22e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a53      	ldr	r2, [pc, #332]	@ (8002898 <HAL_GPIO_Init+0x340>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d019      	beq.n	8002782 <HAL_GPIO_Init+0x22a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a52      	ldr	r2, [pc, #328]	@ (800289c <HAL_GPIO_Init+0x344>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d013      	beq.n	800277e <HAL_GPIO_Init+0x226>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a51      	ldr	r2, [pc, #324]	@ (80028a0 <HAL_GPIO_Init+0x348>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00d      	beq.n	800277a <HAL_GPIO_Init+0x222>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a50      	ldr	r2, [pc, #320]	@ (80028a4 <HAL_GPIO_Init+0x34c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x21e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4f      	ldr	r2, [pc, #316]	@ (80028a8 <HAL_GPIO_Init+0x350>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d101      	bne.n	8002772 <HAL_GPIO_Init+0x21a>
 800276e:	2309      	movs	r3, #9
 8002770:	e012      	b.n	8002798 <HAL_GPIO_Init+0x240>
 8002772:	230a      	movs	r3, #10
 8002774:	e010      	b.n	8002798 <HAL_GPIO_Init+0x240>
 8002776:	2308      	movs	r3, #8
 8002778:	e00e      	b.n	8002798 <HAL_GPIO_Init+0x240>
 800277a:	2307      	movs	r3, #7
 800277c:	e00c      	b.n	8002798 <HAL_GPIO_Init+0x240>
 800277e:	2306      	movs	r3, #6
 8002780:	e00a      	b.n	8002798 <HAL_GPIO_Init+0x240>
 8002782:	2305      	movs	r3, #5
 8002784:	e008      	b.n	8002798 <HAL_GPIO_Init+0x240>
 8002786:	2304      	movs	r3, #4
 8002788:	e006      	b.n	8002798 <HAL_GPIO_Init+0x240>
 800278a:	2303      	movs	r3, #3
 800278c:	e004      	b.n	8002798 <HAL_GPIO_Init+0x240>
 800278e:	2302      	movs	r3, #2
 8002790:	e002      	b.n	8002798 <HAL_GPIO_Init+0x240>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_GPIO_Init+0x240>
 8002796:	2300      	movs	r3, #0
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	f002 0203 	and.w	r2, r2, #3
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	4093      	lsls	r3, r2
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027a8:	4935      	ldr	r1, [pc, #212]	@ (8002880 <HAL_GPIO_Init+0x328>)
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b6:	4b3d      	ldr	r3, [pc, #244]	@ (80028ac <HAL_GPIO_Init+0x354>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027da:	4a34      	ldr	r2, [pc, #208]	@ (80028ac <HAL_GPIO_Init+0x354>)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e0:	4b32      	ldr	r3, [pc, #200]	@ (80028ac <HAL_GPIO_Init+0x354>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002804:	4a29      	ldr	r2, [pc, #164]	@ (80028ac <HAL_GPIO_Init+0x354>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800280a:	4b28      	ldr	r3, [pc, #160]	@ (80028ac <HAL_GPIO_Init+0x354>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800282e:	4a1f      	ldr	r2, [pc, #124]	@ (80028ac <HAL_GPIO_Init+0x354>)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002834:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <HAL_GPIO_Init+0x354>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002858:	4a14      	ldr	r2, [pc, #80]	@ (80028ac <HAL_GPIO_Init+0x354>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3301      	adds	r3, #1
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2b0f      	cmp	r3, #15
 8002868:	f67f ae86 	bls.w	8002578 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3724      	adds	r7, #36	@ 0x24
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40013800 	.word	0x40013800
 8002884:	40020000 	.word	0x40020000
 8002888:	40020400 	.word	0x40020400
 800288c:	40020800 	.word	0x40020800
 8002890:	40020c00 	.word	0x40020c00
 8002894:	40021000 	.word	0x40021000
 8002898:	40021400 	.word	0x40021400
 800289c:	40021800 	.word	0x40021800
 80028a0:	40021c00 	.word	0x40021c00
 80028a4:	40022000 	.word	0x40022000
 80028a8:	40022400 	.word	0x40022400
 80028ac:	40013c00 	.word	0x40013c00

080028b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	887b      	ldrh	r3, [r7, #2]
 80028c2:	4013      	ands	r3, r2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d002      	beq.n	80028ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	e001      	b.n	80028d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
 80028ec:	4613      	mov	r3, r2
 80028ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028f0:	787b      	ldrb	r3, [r7, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028fc:	e003      	b.n	8002906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028fe:	887b      	ldrh	r3, [r7, #2]
 8002900:	041a      	lsls	r2, r3, #16
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	619a      	str	r2, [r3, #24]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002912:	b480      	push	{r7}
 8002914:	b085      	sub	sp, #20
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002924:	887a      	ldrh	r2, [r7, #2]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4013      	ands	r3, r2
 800292a:	041a      	lsls	r2, r3, #16
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43d9      	mvns	r1, r3
 8002930:	887b      	ldrh	r3, [r7, #2]
 8002932:	400b      	ands	r3, r1
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	619a      	str	r2, [r3, #24]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002950:	2300      	movs	r3, #0
 8002952:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e291      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8087 	beq.w	8002a7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800296c:	4b96      	ldr	r3, [pc, #600]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b04      	cmp	r3, #4
 8002976:	d00c      	beq.n	8002992 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002978:	4b93      	ldr	r3, [pc, #588]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 030c 	and.w	r3, r3, #12
 8002980:	2b08      	cmp	r3, #8
 8002982:	d112      	bne.n	80029aa <HAL_RCC_OscConfig+0x62>
 8002984:	4b90      	ldr	r3, [pc, #576]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800298c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002990:	d10b      	bne.n	80029aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002992:	4b8d      	ldr	r3, [pc, #564]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d06c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x130>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d168      	bne.n	8002a78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e26b      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b2:	d106      	bne.n	80029c2 <HAL_RCC_OscConfig+0x7a>
 80029b4:	4b84      	ldr	r3, [pc, #528]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a83      	ldr	r2, [pc, #524]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 80029ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	e02e      	b.n	8002a20 <HAL_RCC_OscConfig+0xd8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10c      	bne.n	80029e4 <HAL_RCC_OscConfig+0x9c>
 80029ca:	4b7f      	ldr	r3, [pc, #508]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a7e      	ldr	r2, [pc, #504]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 80029d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d4:	6013      	str	r3, [r2, #0]
 80029d6:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7b      	ldr	r2, [pc, #492]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 80029dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e01d      	b.n	8002a20 <HAL_RCC_OscConfig+0xd8>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0xc0>
 80029ee:	4b76      	ldr	r3, [pc, #472]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a75      	ldr	r2, [pc, #468]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 80029f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b73      	ldr	r3, [pc, #460]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a72      	ldr	r2, [pc, #456]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e00b      	b.n	8002a20 <HAL_RCC_OscConfig+0xd8>
 8002a08:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b6c      	ldr	r3, [pc, #432]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6b      	ldr	r2, [pc, #428]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d013      	beq.n	8002a50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7ff fc80 	bl	800232c <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a30:	f7ff fc7c 	bl	800232c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	@ 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e21f      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	4b61      	ldr	r3, [pc, #388]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0xe8>
 8002a4e:	e014      	b.n	8002a7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7ff fc6c 	bl	800232c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a58:	f7ff fc68 	bl	800232c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	@ 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e20b      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	4b57      	ldr	r3, [pc, #348]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x110>
 8002a76:	e000      	b.n	8002a7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d069      	beq.n	8002b5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a86:	4b50      	ldr	r3, [pc, #320]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a92:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x190>
 8002a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d116      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aaa:	4b47      	ldr	r3, [pc, #284]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x17a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e1df      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac2:	4b41      	ldr	r3, [pc, #260]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	493d      	ldr	r1, [pc, #244]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad6:	e040      	b.n	8002b5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d023      	beq.n	8002b28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae0:	4b39      	ldr	r3, [pc, #228]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a38      	ldr	r2, [pc, #224]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7ff fc1e 	bl	800232c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af4:	f7ff fc1a 	bl	800232c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e1bd      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b06:	4b30      	ldr	r3, [pc, #192]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b12:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4929      	ldr	r1, [pc, #164]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]
 8002b26:	e018      	b.n	8002b5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b28:	4b27      	ldr	r3, [pc, #156]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a26      	ldr	r2, [pc, #152]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002b2e:	f023 0301 	bic.w	r3, r3, #1
 8002b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7ff fbfa 	bl	800232c <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3c:	f7ff fbf6 	bl	800232c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e199      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d038      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d019      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6e:	4b16      	ldr	r3, [pc, #88]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b72:	4a15      	ldr	r2, [pc, #84]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7a:	f7ff fbd7 	bl	800232c <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b82:	f7ff fbd3 	bl	800232c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e176      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b94:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x23a>
 8002ba0:	e01a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba2:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba6:	4a08      	ldr	r2, [pc, #32]	@ (8002bc8 <HAL_RCC_OscConfig+0x280>)
 8002ba8:	f023 0301 	bic.w	r3, r3, #1
 8002bac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bae:	f7ff fbbd 	bl	800232c <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb4:	e00a      	b.n	8002bcc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb6:	f7ff fbb9 	bl	800232c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d903      	bls.n	8002bcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e15c      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
 8002bc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bcc:	4b91      	ldr	r3, [pc, #580]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1ee      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a4 	beq.w	8002d2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be6:	4b8b      	ldr	r3, [pc, #556]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10d      	bne.n	8002c0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf2:	4b88      	ldr	r3, [pc, #544]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	4a87      	ldr	r2, [pc, #540]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfe:	4b85      	ldr	r3, [pc, #532]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0e:	4b82      	ldr	r3, [pc, #520]	@ (8002e18 <HAL_RCC_OscConfig+0x4d0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d118      	bne.n	8002c4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e18 <HAL_RCC_OscConfig+0x4d0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e18 <HAL_RCC_OscConfig+0x4d0>)
 8002c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c26:	f7ff fb81 	bl	800232c <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c2e:	f7ff fb7d 	bl	800232c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b64      	cmp	r3, #100	@ 0x64
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e120      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c40:	4b75      	ldr	r3, [pc, #468]	@ (8002e18 <HAL_RCC_OscConfig+0x4d0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d106      	bne.n	8002c62 <HAL_RCC_OscConfig+0x31a>
 8002c54:	4b6f      	ldr	r3, [pc, #444]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c58:	4a6e      	ldr	r2, [pc, #440]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c60:	e02d      	b.n	8002cbe <HAL_RCC_OscConfig+0x376>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCC_OscConfig+0x33c>
 8002c6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6e:	4a69      	ldr	r2, [pc, #420]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c76:	4b67      	ldr	r3, [pc, #412]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7a:	4a66      	ldr	r2, [pc, #408]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002c7c:	f023 0304 	bic.w	r3, r3, #4
 8002c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c82:	e01c      	b.n	8002cbe <HAL_RCC_OscConfig+0x376>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b05      	cmp	r3, #5
 8002c8a:	d10c      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x35e>
 8002c8c:	4b61      	ldr	r3, [pc, #388]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c90:	4a60      	ldr	r2, [pc, #384]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c98:	4b5e      	ldr	r3, [pc, #376]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ca4:	e00b      	b.n	8002cbe <HAL_RCC_OscConfig+0x376>
 8002ca6:	4b5b      	ldr	r3, [pc, #364]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002caa:	4a5a      	ldr	r2, [pc, #360]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002cac:	f023 0301 	bic.w	r3, r3, #1
 8002cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb2:	4b58      	ldr	r3, [pc, #352]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb6:	4a57      	ldr	r2, [pc, #348]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002cb8:	f023 0304 	bic.w	r3, r3, #4
 8002cbc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d015      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7ff fb31 	bl	800232c <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7ff fb2d 	bl	800232c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0ce      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0ee      	beq.n	8002cce <HAL_RCC_OscConfig+0x386>
 8002cf0:	e014      	b.n	8002d1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf2:	f7ff fb1b 	bl	800232c <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf8:	e00a      	b.n	8002d10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7ff fb17 	bl	800232c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e0b8      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d10:	4b40      	ldr	r3, [pc, #256]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ee      	bne.n	8002cfa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d1c:	7dfb      	ldrb	r3, [r7, #23]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d105      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d22:	4b3c      	ldr	r3, [pc, #240]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	4a3b      	ldr	r2, [pc, #236]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002d28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d2c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 80a4 	beq.w	8002e80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d38:	4b36      	ldr	r3, [pc, #216]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d06b      	beq.n	8002e1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d149      	bne.n	8002de0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4c:	4b31      	ldr	r3, [pc, #196]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a30      	ldr	r2, [pc, #192]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d58:	f7ff fae8 	bl	800232c <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7ff fae4 	bl	800232c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e087      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d72:	4b28      	ldr	r3, [pc, #160]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69da      	ldr	r2, [r3, #28]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8c:	019b      	lsls	r3, r3, #6
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	3b01      	subs	r3, #1
 8002d98:	041b      	lsls	r3, r3, #16
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	4313      	orrs	r3, r2
 8002da4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002da6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002daa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dac:	4b19      	ldr	r3, [pc, #100]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a18      	ldr	r2, [pc, #96]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002db2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7ff fab8 	bl	800232c <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7ff fab4 	bl	800232c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e057      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd2:	4b10      	ldr	r3, [pc, #64]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x478>
 8002dde:	e04f      	b.n	8002e80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0b      	ldr	r2, [pc, #44]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002de6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7ff fa9e 	bl	800232c <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7ff fa9a 	bl	800232c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e03d      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	4b03      	ldr	r3, [pc, #12]	@ (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x4ac>
 8002e12:	e035      	b.n	8002e80 <HAL_RCC_OscConfig+0x538>
 8002e14:	40023800 	.word	0x40023800
 8002e18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <HAL_RCC_OscConfig+0x544>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d028      	beq.n	8002e7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d121      	bne.n	8002e7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d11a      	bne.n	8002e7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d111      	bne.n	8002e7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e62:	085b      	lsrs	r3, r3, #1
 8002e64:	3b01      	subs	r3, #1
 8002e66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800

08002e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0d0      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b6a      	ldr	r3, [pc, #424]	@ (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d910      	bls.n	8002ed8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b67      	ldr	r3, [pc, #412]	@ (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 020f 	bic.w	r2, r3, #15
 8002ebe:	4965      	ldr	r1, [pc, #404]	@ (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b63      	ldr	r3, [pc, #396]	@ (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0b8      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef0:	4b59      	ldr	r3, [pc, #356]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a58      	ldr	r2, [pc, #352]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002efa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f08:	4b53      	ldr	r3, [pc, #332]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a52      	ldr	r2, [pc, #328]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f14:	4b50      	ldr	r3, [pc, #320]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	494d      	ldr	r1, [pc, #308]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d040      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	4b47      	ldr	r3, [pc, #284]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d115      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e07f      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f52:	4b41      	ldr	r3, [pc, #260]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e073      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f62:	4b3d      	ldr	r3, [pc, #244]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e06b      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f72:	4b39      	ldr	r3, [pc, #228]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4936      	ldr	r1, [pc, #216]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f84:	f7ff f9d2 	bl	800232c <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8c:	f7ff f9ce 	bl	800232c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e053      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 020c 	and.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d1eb      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b27      	ldr	r3, [pc, #156]	@ (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d210      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b24      	ldr	r3, [pc, #144]	@ (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 020f 	bic.w	r2, r3, #15
 8002fca:	4922      	ldr	r1, [pc, #136]	@ (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b20      	ldr	r3, [pc, #128]	@ (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e032      	b.n	800304a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff0:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4916      	ldr	r1, [pc, #88]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800300e:	4b12      	ldr	r3, [pc, #72]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	490e      	ldr	r1, [pc, #56]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003022:	f000 f821 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003026:	4602      	mov	r2, r0
 8003028:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	490a      	ldr	r1, [pc, #40]	@ (800305c <HAL_RCC_ClockConfig+0x1cc>)
 8003034:	5ccb      	ldrb	r3, [r1, r3]
 8003036:	fa22 f303 	lsr.w	r3, r2, r3
 800303a:	4a09      	ldr	r2, [pc, #36]	@ (8003060 <HAL_RCC_ClockConfig+0x1d0>)
 800303c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800303e:	4b09      	ldr	r3, [pc, #36]	@ (8003064 <HAL_RCC_ClockConfig+0x1d4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff f92e 	bl	80022a4 <HAL_InitTick>

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023c00 	.word	0x40023c00
 8003058:	40023800 	.word	0x40023800
 800305c:	0800d1e0 	.word	0x0800d1e0
 8003060:	20000000 	.word	0x20000000
 8003064:	20000004 	.word	0x20000004

08003068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800306c:	b094      	sub	sp, #80	@ 0x50
 800306e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	647b      	str	r3, [r7, #68]	@ 0x44
 8003074:	2300      	movs	r3, #0
 8003076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003078:	2300      	movs	r3, #0
 800307a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003080:	4b79      	ldr	r3, [pc, #484]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b08      	cmp	r3, #8
 800308a:	d00d      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x40>
 800308c:	2b08      	cmp	r3, #8
 800308e:	f200 80e1 	bhi.w	8003254 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x34>
 8003096:	2b04      	cmp	r3, #4
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800309a:	e0db      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b73      	ldr	r3, [pc, #460]	@ (800326c <HAL_RCC_GetSysClockFreq+0x204>)
 800309e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030a0:	e0db      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030a2:	4b73      	ldr	r3, [pc, #460]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x208>)
 80030a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030a6:	e0d8      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d063      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030be:	4b6a      	ldr	r3, [pc, #424]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	099b      	lsrs	r3, r3, #6
 80030c4:	2200      	movs	r2, #0
 80030c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030d2:	2300      	movs	r3, #0
 80030d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80030d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030da:	4622      	mov	r2, r4
 80030dc:	462b      	mov	r3, r5
 80030de:	f04f 0000 	mov.w	r0, #0
 80030e2:	f04f 0100 	mov.w	r1, #0
 80030e6:	0159      	lsls	r1, r3, #5
 80030e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ec:	0150      	lsls	r0, r2, #5
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4621      	mov	r1, r4
 80030f4:	1a51      	subs	r1, r2, r1
 80030f6:	6139      	str	r1, [r7, #16]
 80030f8:	4629      	mov	r1, r5
 80030fa:	eb63 0301 	sbc.w	r3, r3, r1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800310c:	4659      	mov	r1, fp
 800310e:	018b      	lsls	r3, r1, #6
 8003110:	4651      	mov	r1, sl
 8003112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003116:	4651      	mov	r1, sl
 8003118:	018a      	lsls	r2, r1, #6
 800311a:	4651      	mov	r1, sl
 800311c:	ebb2 0801 	subs.w	r8, r2, r1
 8003120:	4659      	mov	r1, fp
 8003122:	eb63 0901 	sbc.w	r9, r3, r1
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800313a:	4690      	mov	r8, r2
 800313c:	4699      	mov	r9, r3
 800313e:	4623      	mov	r3, r4
 8003140:	eb18 0303 	adds.w	r3, r8, r3
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	462b      	mov	r3, r5
 8003148:	eb49 0303 	adc.w	r3, r9, r3
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800315a:	4629      	mov	r1, r5
 800315c:	024b      	lsls	r3, r1, #9
 800315e:	4621      	mov	r1, r4
 8003160:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003164:	4621      	mov	r1, r4
 8003166:	024a      	lsls	r2, r1, #9
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800316e:	2200      	movs	r2, #0
 8003170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003174:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003178:	f7fd fda6 	bl	8000cc8 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003184:	e058      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003186:	4b38      	ldr	r3, [pc, #224]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	099b      	lsrs	r3, r3, #6
 800318c:	2200      	movs	r2, #0
 800318e:	4618      	mov	r0, r3
 8003190:	4611      	mov	r1, r2
 8003192:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
 800319c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	f04f 0000 	mov.w	r0, #0
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	0159      	lsls	r1, r3, #5
 80031ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b2:	0150      	lsls	r0, r2, #5
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4641      	mov	r1, r8
 80031ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80031be:	4649      	mov	r1, r9
 80031c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031d8:	ebb2 040a 	subs.w	r4, r2, sl
 80031dc:	eb63 050b 	sbc.w	r5, r3, fp
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	00eb      	lsls	r3, r5, #3
 80031ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ee:	00e2      	lsls	r2, r4, #3
 80031f0:	4614      	mov	r4, r2
 80031f2:	461d      	mov	r5, r3
 80031f4:	4643      	mov	r3, r8
 80031f6:	18e3      	adds	r3, r4, r3
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	464b      	mov	r3, r9
 80031fc:	eb45 0303 	adc.w	r3, r5, r3
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800320e:	4629      	mov	r1, r5
 8003210:	028b      	lsls	r3, r1, #10
 8003212:	4621      	mov	r1, r4
 8003214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003218:	4621      	mov	r1, r4
 800321a:	028a      	lsls	r2, r1, #10
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003222:	2200      	movs	r2, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	61fa      	str	r2, [r7, #28]
 8003228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322c:	f7fd fd4c 	bl	8000cc8 <__aeabi_uldivmod>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4613      	mov	r3, r2
 8003236:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003238:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003248:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800324a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003252:	e002      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <HAL_RCC_GetSysClockFreq+0x204>)
 8003256:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800325a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800325c:	4618      	mov	r0, r3
 800325e:	3750      	adds	r7, #80	@ 0x50
 8003260:	46bd      	mov	sp, r7
 8003262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	00f42400 	.word	0x00f42400
 8003270:	007a1200 	.word	0x007a1200

08003274 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e09d      	b.n	80033c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	2b00      	cmp	r3, #0
 800328c:	d108      	bne.n	80032a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003296:	d009      	beq.n	80032ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	61da      	str	r2, [r3, #28]
 800329e:	e005      	b.n	80032ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe fdec 	bl	8001ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032ec:	d902      	bls.n	80032f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	e002      	b.n	80032fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003302:	d007      	beq.n	8003314 <HAL_SPI_Init+0xa0>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800330c:	d002      	beq.n	8003314 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003356:	ea42 0103 	orr.w	r1, r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	0c1b      	lsrs	r3, r3, #16
 8003370:	f003 0204 	and.w	r2, r3, #4
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003390:	ea42 0103 	orr.w	r1, r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69da      	ldr	r2, [r3, #28]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b088      	sub	sp, #32
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	603b      	str	r3, [r7, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033da:	f7fe ffa7 	bl	800232c <HAL_GetTick>
 80033de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d001      	beq.n	80033f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80033f0:	2302      	movs	r3, #2
 80033f2:	e15c      	b.n	80036ae <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_SPI_Transmit+0x36>
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e154      	b.n	80036ae <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_SPI_Transmit+0x48>
 800340e:	2302      	movs	r3, #2
 8003410:	e14d      	b.n	80036ae <HAL_SPI_Transmit+0x2e4>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2203      	movs	r2, #3
 800341e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	88fa      	ldrh	r2, [r7, #6]
 8003432:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	88fa      	ldrh	r2, [r7, #6]
 8003438:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003464:	d10f      	bne.n	8003486 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003484:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003490:	2b40      	cmp	r3, #64	@ 0x40
 8003492:	d007      	beq.n	80034a4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80034a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034ac:	d952      	bls.n	8003554 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_SPI_Transmit+0xf2>
 80034b6:	8b7b      	ldrh	r3, [r7, #26]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d145      	bne.n	8003548 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	881a      	ldrh	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034cc:	1c9a      	adds	r2, r3, #2
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034e0:	e032      	b.n	8003548 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d112      	bne.n	8003516 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f4:	881a      	ldrh	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003500:	1c9a      	adds	r2, r3, #2
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003514:	e018      	b.n	8003548 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003516:	f7fe ff09 	bl	800232c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d803      	bhi.n	800352e <HAL_SPI_Transmit+0x164>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d102      	bne.n	8003534 <HAL_SPI_Transmit+0x16a>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e0b2      	b.n	80036ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1c7      	bne.n	80034e2 <HAL_SPI_Transmit+0x118>
 8003552:	e083      	b.n	800365c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_SPI_Transmit+0x198>
 800355c:	8b7b      	ldrh	r3, [r7, #26]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d177      	bne.n	8003652 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d912      	bls.n	8003592 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	881a      	ldrh	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357c:	1c9a      	adds	r2, r3, #2
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b02      	subs	r3, #2
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003590:	e05f      	b.n	8003652 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	7812      	ldrb	r2, [r2, #0]
 800359e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80035b8:	e04b      	b.n	8003652 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d12b      	bne.n	8003620 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d912      	bls.n	80035f8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d6:	881a      	ldrh	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e2:	1c9a      	adds	r2, r3, #2
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b02      	subs	r3, #2
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035f6:	e02c      	b.n	8003652 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	330c      	adds	r3, #12
 8003602:	7812      	ldrb	r2, [r2, #0]
 8003604:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800361e:	e018      	b.n	8003652 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003620:	f7fe fe84 	bl	800232c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d803      	bhi.n	8003638 <HAL_SPI_Transmit+0x26e>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	d102      	bne.n	800363e <HAL_SPI_Transmit+0x274>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d109      	bne.n	8003652 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e02d      	b.n	80036ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ae      	bne.n	80035ba <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	6839      	ldr	r1, [r7, #0]
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fd19 	bl	8004098 <SPI_EndRxTxTransaction>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80036ac:	2300      	movs	r3, #0
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b088      	sub	sp, #32
 80036ba:	af02      	add	r7, sp, #8
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	603b      	str	r3, [r7, #0]
 80036c2:	4613      	mov	r3, r2
 80036c4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
 80036d4:	e123      	b.n	800391e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_SPI_Receive+0x2c>
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e11b      	b.n	800391e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036ee:	d112      	bne.n	8003716 <HAL_SPI_Receive+0x60>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10e      	bne.n	8003716 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2204      	movs	r2, #4
 80036fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	4613      	mov	r3, r2
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f90a 	bl	8003926 <HAL_SPI_TransmitReceive>
 8003712:	4603      	mov	r3, r0
 8003714:	e103      	b.n	800391e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003716:	f7fe fe09 	bl	800232c <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_SPI_Receive+0x74>
 8003726:	2302      	movs	r3, #2
 8003728:	e0f9      	b.n	800391e <HAL_SPI_Receive+0x268>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2204      	movs	r2, #4
 8003736:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	88fa      	ldrh	r2, [r7, #6]
 800374a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	88fa      	ldrh	r2, [r7, #6]
 8003752:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800377c:	d908      	bls.n	8003790 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	e007      	b.n	80037a0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800379e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a8:	d10f      	bne.n	80037ca <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d4:	2b40      	cmp	r3, #64	@ 0x40
 80037d6:	d007      	beq.n	80037e8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037f0:	d875      	bhi.n	80038de <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80037f2:	e037      	b.n	8003864 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d117      	bne.n	8003832 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f103 020c 	add.w	r2, r3, #12
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	7812      	ldrb	r2, [r2, #0]
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003830:	e018      	b.n	8003864 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003832:	f7fe fd7b 	bl	800232c <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d803      	bhi.n	800384a <HAL_SPI_Receive+0x194>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d102      	bne.n	8003850 <HAL_SPI_Receive+0x19a>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e05c      	b.n	800391e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1c1      	bne.n	80037f4 <HAL_SPI_Receive+0x13e>
 8003870:	e03b      	b.n	80038ea <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b01      	cmp	r3, #1
 800387e:	d115      	bne.n	80038ac <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	b292      	uxth	r2, r2
 800388c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	1c9a      	adds	r2, r3, #2
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80038aa:	e018      	b.n	80038de <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ac:	f7fe fd3e 	bl	800232c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d803      	bhi.n	80038c4 <HAL_SPI_Receive+0x20e>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c2:	d102      	bne.n	80038ca <HAL_SPI_Receive+0x214>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e01f      	b.n	800391e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1c3      	bne.n	8003872 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	6839      	ldr	r1, [r7, #0]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fb56 	bl	8003fa0 <SPI_EndRxTransaction>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800391c:	2300      	movs	r3, #0
  }
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b08a      	sub	sp, #40	@ 0x28
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003934:	2301      	movs	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003938:	f7fe fcf8 	bl	800232c <HAL_GetTick>
 800393c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003944:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800394c:	887b      	ldrh	r3, [r7, #2]
 800394e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003954:	7ffb      	ldrb	r3, [r7, #31]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d00c      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x4e>
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003960:	d106      	bne.n	8003970 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <HAL_SPI_TransmitReceive+0x4a>
 800396a:	7ffb      	ldrb	r3, [r7, #31]
 800396c:	2b04      	cmp	r3, #4
 800396e:	d001      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003970:	2302      	movs	r3, #2
 8003972:	e1f3      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_SPI_TransmitReceive+0x60>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_SPI_TransmitReceive+0x60>
 8003980:	887b      	ldrh	r3, [r7, #2]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e1e8      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_SPI_TransmitReceive+0x72>
 8003994:	2302      	movs	r3, #2
 8003996:	e1e1      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x436>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d003      	beq.n	80039b4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2205      	movs	r2, #5
 80039b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	887a      	ldrh	r2, [r7, #2]
 80039c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	887a      	ldrh	r2, [r7, #2]
 80039cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	887a      	ldrh	r2, [r7, #2]
 80039da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039f6:	d802      	bhi.n	80039fe <HAL_SPI_TransmitReceive+0xd8>
 80039f8:	8abb      	ldrh	r3, [r7, #20]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d908      	bls.n	8003a10 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	e007      	b.n	8003a20 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a1e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2a:	2b40      	cmp	r3, #64	@ 0x40
 8003a2c:	d007      	beq.n	8003a3e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a46:	f240 8083 	bls.w	8003b50 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <HAL_SPI_TransmitReceive+0x132>
 8003a52:	8afb      	ldrh	r3, [r7, #22]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d16f      	bne.n	8003b38 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5c:	881a      	ldrh	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a68:	1c9a      	adds	r2, r3, #2
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a7c:	e05c      	b.n	8003b38 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d11b      	bne.n	8003ac4 <HAL_SPI_TransmitReceive+0x19e>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <HAL_SPI_TransmitReceive+0x19e>
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d113      	bne.n	8003ac4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa0:	881a      	ldrh	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aac:	1c9a      	adds	r2, r3, #2
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d11c      	bne.n	8003b0c <HAL_SPI_TransmitReceive+0x1e6>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d016      	beq.n	8003b0c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	b292      	uxth	r2, r2
 8003aea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af0:	1c9a      	adds	r2, r3, #2
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b0c:	f7fe fc0e 	bl	800232c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d80d      	bhi.n	8003b38 <HAL_SPI_TransmitReceive+0x212>
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b22:	d009      	beq.n	8003b38 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e111      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d19d      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x158>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d197      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x158>
 8003b4e:	e0e5      	b.n	8003d1c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_SPI_TransmitReceive+0x23a>
 8003b58:	8afb      	ldrh	r3, [r7, #22]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	f040 80d1 	bne.w	8003d02 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d912      	bls.n	8003b90 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6e:	881a      	ldrh	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	3b02      	subs	r3, #2
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b8e:	e0b8      	b.n	8003d02 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	7812      	ldrb	r2, [r2, #0]
 8003b9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb6:	e0a4      	b.n	8003d02 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d134      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x30a>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d02f      	beq.n	8003c30 <HAL_SPI_TransmitReceive+0x30a>
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d12c      	bne.n	8003c30 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d912      	bls.n	8003c06 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be4:	881a      	ldrh	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf0:	1c9a      	adds	r2, r3, #2
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b02      	subs	r3, #2
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c04:	e012      	b.n	8003c2c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	7812      	ldrb	r2, [r2, #0]
 8003c12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d148      	bne.n	8003cd0 <HAL_SPI_TransmitReceive+0x3aa>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d042      	beq.n	8003cd0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d923      	bls.n	8003c9e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c60:	b292      	uxth	r2, r2
 8003c62:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	1c9a      	adds	r2, r3, #2
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b02      	subs	r3, #2
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d81f      	bhi.n	8003ccc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c9a:	605a      	str	r2, [r3, #4]
 8003c9c:	e016      	b.n	8003ccc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f103 020c 	add.w	r2, r3, #12
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003caa:	7812      	ldrb	r2, [r2, #0]
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cd0:	f7fe fb2c 	bl	800232c <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d803      	bhi.n	8003ce8 <HAL_SPI_TransmitReceive+0x3c2>
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	d102      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x3c8>
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e02c      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f47f af55 	bne.w	8003bb8 <HAL_SPI_TransmitReceive+0x292>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f47f af4e 	bne.w	8003bb8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d1c:	6a3a      	ldr	r2, [r7, #32]
 8003d1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f9b9 	bl	8004098 <SPI_EndRxTxTransaction>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e00e      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3728      	adds	r7, #40	@ 0x28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d74:	f7fe fada 	bl	800232c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	4413      	add	r3, r2
 8003d82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d84:	f7fe fad2 	bl	800232c <HAL_GetTick>
 8003d88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d8a:	4b39      	ldr	r3, [pc, #228]	@ (8003e70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	015b      	lsls	r3, r3, #5
 8003d90:	0d1b      	lsrs	r3, r3, #20
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	fb02 f303 	mul.w	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d9a:	e055      	b.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d051      	beq.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003da4:	f7fe fac2 	bl	800232c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d902      	bls.n	8003dba <SPI_WaitFlagStateUntilTimeout+0x56>
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d13d      	bne.n	8003e36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dd2:	d111      	bne.n	8003df8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ddc:	d004      	beq.n	8003de8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003de6:	d107      	bne.n	8003df8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003df6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e00:	d10f      	bne.n	8003e22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e018      	b.n	8003e68 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	e002      	b.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4013      	ands	r3, r2
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d19a      	bne.n	8003d9c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3720      	adds	r7, #32
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000000 	.word	0x20000000

08003e74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	@ 0x28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
 8003e80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e82:	2300      	movs	r3, #0
 8003e84:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e86:	f7fe fa51 	bl	800232c <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e96:	f7fe fa49 	bl	800232c <HAL_GetTick>
 8003e9a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ea4:	4b3d      	ldr	r3, [pc, #244]	@ (8003f9c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	00da      	lsls	r2, r3, #3
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	0d1b      	lsrs	r3, r3, #20
 8003eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ebc:	e061      	b.n	8003f82 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003ec4:	d107      	bne.n	8003ed6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d104      	bne.n	8003ed6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ed4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d051      	beq.n	8003f82 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ede:	f7fe fa25 	bl	800232c <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d902      	bls.n	8003ef4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d13d      	bne.n	8003f70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f0c:	d111      	bne.n	8003f32 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f16:	d004      	beq.n	8003f22 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f20:	d107      	bne.n	8003f32 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f3a:	d10f      	bne.n	8003f5c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e011      	b.n	8003f94 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7a:	e002      	b.n	8003f82 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d195      	bne.n	8003ebe <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3728      	adds	r7, #40	@ 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000000 	.word	0x20000000

08003fa0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fb4:	d111      	bne.n	8003fda <SPI_EndRxTransaction+0x3a>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fbe:	d004      	beq.n	8003fca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fc8:	d107      	bne.n	8003fda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fd8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fe2:	d112      	bne.n	800400a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2200      	movs	r2, #0
 8003fec:	2180      	movs	r1, #128	@ 0x80
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7ff feb8 	bl	8003d64 <SPI_WaitFlagStateUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d021      	beq.n	800403e <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffe:	f043 0220 	orr.w	r2, r3, #32
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e03d      	b.n	8004086 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800400a:	4b21      	ldr	r3, [pc, #132]	@ (8004090 <SPI_EndRxTransaction+0xf0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a21      	ldr	r2, [pc, #132]	@ (8004094 <SPI_EndRxTransaction+0xf4>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	0d5b      	lsrs	r3, r3, #21
 8004016:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800401a:	fb02 f303 	mul.w	r3, r2, r3
 800401e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	3b01      	subs	r3, #1
 800402a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004036:	2b80      	cmp	r3, #128	@ 0x80
 8004038:	d0f2      	beq.n	8004020 <SPI_EndRxTransaction+0x80>
 800403a:	e000      	b.n	800403e <SPI_EndRxTransaction+0x9e>
        break;
 800403c:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004046:	d11d      	bne.n	8004084 <SPI_EndRxTransaction+0xe4>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004050:	d004      	beq.n	800405c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800405a:	d113      	bne.n	8004084 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2200      	movs	r2, #0
 8004064:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff ff03 	bl	8003e74 <SPI_WaitFifoStateUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d007      	beq.n	8004084 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004078:	f043 0220 	orr.w	r2, r3, #32
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e000      	b.n	8004086 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000000 	.word	0x20000000
 8004094:	165e9f81 	.word	0x165e9f81

08004098 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af02      	add	r7, sp, #8
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff fedf 	bl	8003e74 <SPI_WaitFifoStateUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e046      	b.n	800415a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040cc:	4b25      	ldr	r3, [pc, #148]	@ (8004164 <SPI_EndRxTxTransaction+0xcc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a25      	ldr	r2, [pc, #148]	@ (8004168 <SPI_EndRxTxTransaction+0xd0>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	0d5b      	lsrs	r3, r3, #21
 80040d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040dc:	fb02 f303 	mul.w	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040ea:	d112      	bne.n	8004112 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2200      	movs	r2, #0
 80040f4:	2180      	movs	r1, #128	@ 0x80
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f7ff fe34 	bl	8003d64 <SPI_WaitFlagStateUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d016      	beq.n	8004130 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004106:	f043 0220 	orr.w	r2, r3, #32
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e023      	b.n	800415a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	3b01      	subs	r3, #1
 800411c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004128:	2b80      	cmp	r3, #128	@ 0x80
 800412a:	d0f2      	beq.n	8004112 <SPI_EndRxTxTransaction+0x7a>
 800412c:	e000      	b.n	8004130 <SPI_EndRxTxTransaction+0x98>
        break;
 800412e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2200      	movs	r2, #0
 8004138:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f7ff fe99 	bl	8003e74 <SPI_WaitFifoStateUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d007      	beq.n	8004158 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e000      	b.n	800415a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20000000 	.word	0x20000000
 8004168:	165e9f81 	.word	0x165e9f81

0800416c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004170:	4904      	ldr	r1, [pc, #16]	@ (8004184 <MX_FATFS_Init+0x18>)
 8004172:	4805      	ldr	r0, [pc, #20]	@ (8004188 <MX_FATFS_Init+0x1c>)
 8004174:	f004 fade 	bl	8008734 <FATFS_LinkDriver>
 8004178:	4603      	mov	r3, r0
 800417a:	461a      	mov	r2, r3
 800417c:	4b03      	ldr	r3, [pc, #12]	@ (800418c <MX_FATFS_Init+0x20>)
 800417e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004180:	bf00      	nop
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20006b1c 	.word	0x20006b1c
 8004188:	2000000c 	.word	0x2000000c
 800418c:	20006b18 	.word	0x20006b18

08004190 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004194:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <disk_status>:
    disk_ioctl
#endif
};


DSTATUS disk_status(BYTE pdrv) {
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <disk_status+0x14>
        return 0;  // OK
 80041b0:	2300      	movs	r3, #0
 80041b2:	e000      	b.n	80041b6 <disk_status+0x16>
    }
    return STA_NOINIT;
 80041b4:	2301      	movs	r3, #1
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <disk_initialize>:

DSTATUS disk_initialize(BYTE pdrv) {
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	4603      	mov	r3, r0
 80041ca:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d108      	bne.n	80041e4 <disk_initialize+0x22>
        return (SD_Init() == SD_OK) ? 0 : STA_NOINIT;
 80041d2:	f7fd fd1b 	bl	8001c0c <SD_Init>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	e000      	b.n	80041e6 <disk_initialize+0x24>
    }
    return STA_NOINIT;
 80041e4:	2301      	movs	r3, #1
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <disk_read>:

DRESULT disk_read(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count) {
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b086      	sub	sp, #24
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
 80041fa:	4603      	mov	r3, r0
 80041fc:	73fb      	strb	r3, [r7, #15]
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <disk_read+0x1c>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <disk_read+0x20>
 800420a:	2304      	movs	r3, #4
 800420c:	e01a      	b.n	8004244 <disk_read+0x56>

    for (UINT i = 0; i < count; i++) {
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e012      	b.n	800423a <disk_read+0x4c>
        if (SD_ReadBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	4413      	add	r3, r2
 800421a:	0258      	lsls	r0, r3, #9
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	025b      	lsls	r3, r3, #9
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	4413      	add	r3, r2
 8004224:	4619      	mov	r1, r3
 8004226:	f7fd fd39 	bl	8001c9c <SD_ReadBlock>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <disk_read+0x46>
            return RES_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e007      	b.n	8004244 <disk_read+0x56>
    for (UINT i = 0; i < count; i++) {
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3301      	adds	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d3e8      	bcc.n	8004214 <disk_read+0x26>
    }

    return RES_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <disk_write>:

DRESULT disk_write(BYTE pdrv, const BYTE* buff, LBA_t sector, UINT count) {
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	4603      	mov	r3, r0
 800425a:	73fb      	strb	r3, [r7, #15]
#if FF_FS_READONLY
    return RES_WRPRT;
#else
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <disk_write+0x1c>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <disk_write+0x20>
 8004268:	2304      	movs	r3, #4
 800426a:	e01a      	b.n	80042a2 <disk_write+0x56>

    for (UINT i = 0; i < count; i++) {
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	e012      	b.n	8004298 <disk_write+0x4c>
        if (SD_WriteBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	4413      	add	r3, r2
 8004278:	0258      	lsls	r0, r3, #9
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	025b      	lsls	r3, r3, #9
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	4413      	add	r3, r2
 8004282:	4619      	mov	r1, r3
 8004284:	f7fd fd4e 	bl	8001d24 <SD_WriteBlock>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <disk_write+0x46>
            return RES_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e007      	b.n	80042a2 <disk_write+0x56>
    for (UINT i = 0; i < count; i++) {
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	3301      	adds	r3, #1
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d3e8      	bcc.n	8004272 <disk_write+0x26>
    }

    return RES_OK;
 80042a0:	2300      	movs	r3, #0
#endif
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <disk_ioctl>:

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	603a      	str	r2, [r7, #0]
 80042b6:	71fb      	strb	r3, [r7, #7]
 80042b8:	460b      	mov	r3, r1
 80042ba:	71bb      	strb	r3, [r7, #6]
    if (pdrv != DEV_MMC) return RES_PARERR;
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <disk_ioctl+0x1a>
 80042c2:	2304      	movs	r3, #4
 80042c4:	e022      	b.n	800430c <disk_ioctl+0x60>

    switch (cmd) {
 80042c6:	79bb      	ldrb	r3, [r7, #6]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d81e      	bhi.n	800430a <disk_ioctl+0x5e>
 80042cc:	a201      	add	r2, pc, #4	@ (adr r2, 80042d4 <disk_ioctl+0x28>)
 80042ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d2:	bf00      	nop
 80042d4:	080042e5 	.word	0x080042e5
 80042d8:	080042e9 	.word	0x080042e9
 80042dc:	080042f5 	.word	0x080042f5
 80042e0:	08004301 	.word	0x08004301
        case CTRL_SYNC:
            return RES_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e011      	b.n	800430c <disk_ioctl+0x60>
        case GET_SECTOR_COUNT:
            *(DWORD*)buff = 32768;  // Exemplo: 16 MB
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80042ee:	601a      	str	r2, [r3, #0]
            return RES_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	e00b      	b.n	800430c <disk_ioctl+0x60>
        case GET_SECTOR_SIZE:
            *(WORD*)buff = 512;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042fa:	801a      	strh	r2, [r3, #0]
            return RES_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	e005      	b.n	800430c <disk_ioctl+0x60>
        case GET_BLOCK_SIZE:
            *(DWORD*)buff = 1;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]
            return RES_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e000      	b.n	800430c <disk_ioctl+0x60>
    }

    return RES_PARERR;
 800430a:	2304      	movs	r3, #4
}
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3301      	adds	r3, #1
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004328:	89fb      	ldrh	r3, [r7, #14]
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	b21a      	sxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	b21b      	sxth	r3, r3
 8004334:	4313      	orrs	r3, r2
 8004336:	b21b      	sxth	r3, r3
 8004338:	81fb      	strh	r3, [r7, #14]
	return rv;
 800433a:	89fb      	ldrh	r3, [r7, #14]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3303      	adds	r3, #3
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	021b      	lsls	r3, r3, #8
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	3202      	adds	r2, #2
 8004360:	7812      	ldrb	r2, [r2, #0]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	3201      	adds	r2, #1
 800436e:	7812      	ldrb	r2, [r2, #0]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	7812      	ldrb	r2, [r2, #0]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004380:	68fb      	ldr	r3, [r7, #12]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800438e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004392:	b09d      	sub	sp, #116	@ 0x74
 8004394:	af00      	add	r7, sp, #0
 8004396:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8004398:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800439a:	3307      	adds	r3, #7
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2200      	movs	r2, #0
 80043a2:	469a      	mov	sl, r3
 80043a4:	4693      	mov	fp, r2
 80043a6:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 80043aa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80043ae:	f04f 0000 	mov.w	r0, #0
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	0219      	lsls	r1, r3, #8
 80043b8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80043bc:	0210      	lsls	r0, r2, #8
 80043be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043c0:	3306      	adds	r3, #6
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2200      	movs	r2, #0
 80043c8:	461c      	mov	r4, r3
 80043ca:	4615      	mov	r5, r2
 80043cc:	ea40 0804 	orr.w	r8, r0, r4
 80043d0:	ea41 0905 	orr.w	r9, r1, r5
 80043d4:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 80043d8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80043dc:	f04f 0000 	mov.w	r0, #0
 80043e0:	f04f 0100 	mov.w	r1, #0
 80043e4:	0219      	lsls	r1, r3, #8
 80043e6:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80043ea:	0210      	lsls	r0, r2, #8
 80043ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80043ee:	3305      	adds	r3, #5
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2200      	movs	r2, #0
 80043f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043f8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80043fa:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80043fe:	4623      	mov	r3, r4
 8004400:	4303      	orrs	r3, r0
 8004402:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004404:	462b      	mov	r3, r5
 8004406:	430b      	orrs	r3, r1
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800440a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800440e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8004412:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004416:	f04f 0000 	mov.w	r0, #0
 800441a:	f04f 0100 	mov.w	r1, #0
 800441e:	0219      	lsls	r1, r3, #8
 8004420:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004424:	0210      	lsls	r0, r2, #8
 8004426:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004428:	3304      	adds	r3, #4
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2200      	movs	r2, #0
 8004430:	653b      	str	r3, [r7, #80]	@ 0x50
 8004432:	657a      	str	r2, [r7, #84]	@ 0x54
 8004434:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004438:	4623      	mov	r3, r4
 800443a:	4303      	orrs	r3, r0
 800443c:	623b      	str	r3, [r7, #32]
 800443e:	462b      	mov	r3, r5
 8004440:	430b      	orrs	r3, r1
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
 8004444:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004448:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 800444c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004450:	f04f 0000 	mov.w	r0, #0
 8004454:	f04f 0100 	mov.w	r1, #0
 8004458:	0219      	lsls	r1, r3, #8
 800445a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800445e:	0210      	lsls	r0, r2, #8
 8004460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004462:	3303      	adds	r3, #3
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2200      	movs	r2, #0
 800446a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800446c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800446e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004472:	4623      	mov	r3, r4
 8004474:	4303      	orrs	r3, r0
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	462b      	mov	r3, r5
 800447a:	430b      	orrs	r3, r1
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004482:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8004486:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800448a:	f04f 0000 	mov.w	r0, #0
 800448e:	f04f 0100 	mov.w	r1, #0
 8004492:	0219      	lsls	r1, r3, #8
 8004494:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004498:	0210      	lsls	r0, r2, #8
 800449a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800449c:	3302      	adds	r3, #2
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2200      	movs	r2, #0
 80044a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80044a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80044a8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80044ac:	4623      	mov	r3, r4
 80044ae:	4303      	orrs	r3, r0
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	462b      	mov	r3, r5
 80044b4:	430b      	orrs	r3, r1
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80044bc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 80044c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	020b      	lsls	r3, r1, #8
 80044ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044d2:	0202      	lsls	r2, r0, #8
 80044d4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80044d6:	3101      	adds	r1, #1
 80044d8:	7809      	ldrb	r1, [r1, #0]
 80044da:	b2c9      	uxtb	r1, r1
 80044dc:	2000      	movs	r0, #0
 80044de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80044e2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80044e6:	4621      	mov	r1, r4
 80044e8:	4311      	orrs	r1, r2
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	4629      	mov	r1, r5
 80044ee:	4319      	orrs	r1, r3
 80044f0:	60f9      	str	r1, [r7, #12]
 80044f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80044f6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 80044fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	020b      	lsls	r3, r1, #8
 8004508:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800450c:	0202      	lsls	r2, r0, #8
 800450e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004510:	7809      	ldrb	r1, [r1, #0]
 8004512:	b2c9      	uxtb	r1, r1
 8004514:	2000      	movs	r0, #0
 8004516:	6339      	str	r1, [r7, #48]	@ 0x30
 8004518:	6378      	str	r0, [r7, #52]	@ 0x34
 800451a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800451e:	4621      	mov	r1, r4
 8004520:	4311      	orrs	r1, r2
 8004522:	6039      	str	r1, [r7, #0]
 8004524:	4629      	mov	r1, r5
 8004526:	4319      	orrs	r1, r3
 8004528:	6079      	str	r1, [r7, #4]
 800452a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800452e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8004532:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	3774      	adds	r7, #116	@ 0x74
 800453c:	46bd      	mov	sp, r7
 800453e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004542:	4770      	bx	lr

08004544 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	607a      	str	r2, [r7, #4]
 8004556:	887a      	ldrh	r2, [r7, #2]
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	887a      	ldrh	r2, [r7, #2]
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	1c5a      	adds	r2, r3, #1
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	0a1b      	lsrs	r3, r3, #8
 8004594:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	607a      	str	r2, [r7, #4]
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	0a1b      	lsrs	r3, r3, #8
 80045a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	607a      	str	r2, [r7, #4]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	60fa      	str	r2, [r7, #12]
 80045e4:	783a      	ldrb	r2, [r7, #0]
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	0a02      	lsrs	r2, r0, #8
 80045f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80045fa:	0a0b      	lsrs	r3, r1, #8
 80045fc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	60fa      	str	r2, [r7, #12]
 8004606:	783a      	ldrb	r2, [r7, #0]
 8004608:	701a      	strb	r2, [r3, #0]
 800460a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	0a02      	lsrs	r2, r0, #8
 8004618:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800461c:	0a0b      	lsrs	r3, r1, #8
 800461e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	60fa      	str	r2, [r7, #12]
 8004628:	783a      	ldrb	r2, [r7, #0]
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	0a02      	lsrs	r2, r0, #8
 800463a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800463e:	0a0b      	lsrs	r3, r1, #8
 8004640:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	60fa      	str	r2, [r7, #12]
 800464a:	783a      	ldrb	r2, [r7, #0]
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	0a02      	lsrs	r2, r0, #8
 800465c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004660:	0a0b      	lsrs	r3, r1, #8
 8004662:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	60fa      	str	r2, [r7, #12]
 800466c:	783a      	ldrb	r2, [r7, #0]
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	0a02      	lsrs	r2, r0, #8
 800467e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004682:	0a0b      	lsrs	r3, r1, #8
 8004684:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	60fa      	str	r2, [r7, #12]
 800468e:	783a      	ldrb	r2, [r7, #0]
 8004690:	701a      	strb	r2, [r3, #0]
 8004692:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004696:	f04f 0200 	mov.w	r2, #0
 800469a:	f04f 0300 	mov.w	r3, #0
 800469e:	0a02      	lsrs	r2, r0, #8
 80046a0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80046a4:	0a0b      	lsrs	r3, r1, #8
 80046a6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	60fa      	str	r2, [r7, #12]
 80046b0:	783a      	ldrb	r2, [r7, #0]
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	0a02      	lsrs	r2, r0, #8
 80046c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80046c6:	0a0b      	lsrs	r3, r1, #8
 80046c8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	60fa      	str	r2, [r7, #12]
 80046d2:	783a      	ldrb	r2, [r7, #0]
 80046d4:	701a      	strb	r2, [r3, #0]
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80046e2:	b480      	push	{r7}
 80046e4:	b087      	sub	sp, #28
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00d      	beq.n	8004718 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	1c53      	adds	r3, r2, #1
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	1c59      	adds	r1, r3, #1
 8004706:	6179      	str	r1, [r7, #20]
 8004708:	7812      	ldrb	r2, [r2, #0]
 800470a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3b01      	subs	r3, #1
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f1      	bne.n	80046fc <mem_cpy+0x1a>
	}
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	617a      	str	r2, [r7, #20]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	b2d2      	uxtb	r2, r2
 800473e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3b01      	subs	r3, #1
 8004744:	607b      	str	r3, [r7, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f3      	bne.n	8004734 <mem_set+0x10>
}
 800474c:	bf00      	nop
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800475a:	b480      	push	{r7}
 800475c:	b089      	sub	sp, #36	@ 0x24
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	61fb      	str	r3, [r7, #28]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	61fa      	str	r2, [r7, #28]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	4619      	mov	r1, r3
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	61ba      	str	r2, [r7, #24]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	1acb      	subs	r3, r1, r3
 8004786:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3b01      	subs	r3, #1
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <mem_cmp+0x40>
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0eb      	beq.n	8004772 <mem_cmp+0x18>

	return r;
 800479a:	697b      	ldr	r3, [r7, #20]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3724      	adds	r7, #36	@ 0x24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80047b2:	e002      	b.n	80047ba <chk_chr+0x12>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3301      	adds	r3, #1
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <chk_chr+0x26>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d1f2      	bne.n	80047b4 <chk_chr+0xc>
	return *str;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	781b      	ldrb	r3, [r3, #0]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
	...

080047e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	e029      	b.n	8004848 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80047f4:	4a27      	ldr	r2, [pc, #156]	@ (8004894 <chk_lock+0xb4>)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	4413      	add	r3, r2
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01d      	beq.n	800483e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004802:	4a24      	ldr	r2, [pc, #144]	@ (8004894 <chk_lock+0xb4>)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	4413      	add	r3, r2
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d116      	bne.n	8004842 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004814:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <chk_lock+0xb4>)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	4413      	add	r3, r2
 800481c:	3304      	adds	r3, #4
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004824:	429a      	cmp	r2, r3
 8004826:	d10c      	bne.n	8004842 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004828:	4a1a      	ldr	r2, [pc, #104]	@ (8004894 <chk_lock+0xb4>)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	4413      	add	r3, r2
 8004830:	3308      	adds	r3, #8
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8004838:	429a      	cmp	r2, r3
 800483a:	d102      	bne.n	8004842 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800483c:	e007      	b.n	800484e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800483e:	2301      	movs	r3, #1
 8004840:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3301      	adds	r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0d2      	beq.n	80047f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d109      	bne.n	8004868 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <chk_lock+0x80>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d101      	bne.n	8004864 <chk_lock+0x84>
 8004860:	2300      	movs	r3, #0
 8004862:	e010      	b.n	8004886 <chk_lock+0xa6>
 8004864:	2312      	movs	r3, #18
 8004866:	e00e      	b.n	8004886 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d108      	bne.n	8004880 <chk_lock+0xa0>
 800486e:	4a09      	ldr	r2, [pc, #36]	@ (8004894 <chk_lock+0xb4>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	4413      	add	r3, r2
 8004876:	330c      	adds	r3, #12
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800487e:	d101      	bne.n	8004884 <chk_lock+0xa4>
 8004880:	2310      	movs	r3, #16
 8004882:	e000      	b.n	8004886 <chk_lock+0xa6>
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20006b28 	.word	0x20006b28

08004898 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800489e:	2300      	movs	r3, #0
 80048a0:	607b      	str	r3, [r7, #4]
 80048a2:	e002      	b.n	80048aa <enq_lock+0x12>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3301      	adds	r3, #1
 80048a8:	607b      	str	r3, [r7, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d106      	bne.n	80048be <enq_lock+0x26>
 80048b0:	4a09      	ldr	r2, [pc, #36]	@ (80048d8 <enq_lock+0x40>)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	4413      	add	r3, r2
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f2      	bne.n	80048a4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20006b28 	.word	0x20006b28

080048dc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e01f      	b.n	800492c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80048ec:	4a41      	ldr	r2, [pc, #260]	@ (80049f4 <inc_lock+0x118>)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	4413      	add	r3, r2
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d113      	bne.n	8004926 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80048fe:	4a3d      	ldr	r2, [pc, #244]	@ (80049f4 <inc_lock+0x118>)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	4413      	add	r3, r2
 8004906:	3304      	adds	r3, #4
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800490e:	429a      	cmp	r2, r3
 8004910:	d109      	bne.n	8004926 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004912:	4a38      	ldr	r2, [pc, #224]	@ (80049f4 <inc_lock+0x118>)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	4413      	add	r3, r2
 800491a:	3308      	adds	r3, #8
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8004922:	429a      	cmp	r2, r3
 8004924:	d006      	beq.n	8004934 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3301      	adds	r3, #1
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0dc      	beq.n	80048ec <inc_lock+0x10>
 8004932:	e000      	b.n	8004936 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004934:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d132      	bne.n	80049a2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e002      	b.n	8004948 <inc_lock+0x6c>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3301      	adds	r3, #1
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <inc_lock+0x80>
 800494e:	4a29      	ldr	r2, [pc, #164]	@ (80049f4 <inc_lock+0x118>)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	4413      	add	r3, r2
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f2      	bne.n	8004942 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <inc_lock+0x8a>
 8004962:	2300      	movs	r3, #0
 8004964:	e040      	b.n	80049e8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4922      	ldr	r1, [pc, #136]	@ (80049f4 <inc_lock+0x118>)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	440b      	add	r3, r1
 8004972:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	491e      	ldr	r1, [pc, #120]	@ (80049f4 <inc_lock+0x118>)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	440b      	add	r3, r1
 8004980:	3304      	adds	r3, #4
 8004982:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004988:	491a      	ldr	r1, [pc, #104]	@ (80049f4 <inc_lock+0x118>)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	440b      	add	r3, r1
 8004990:	3308      	adds	r3, #8
 8004992:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004994:	4a17      	ldr	r2, [pc, #92]	@ (80049f4 <inc_lock+0x118>)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	4413      	add	r3, r2
 800499c:	330c      	adds	r3, #12
 800499e:	2200      	movs	r2, #0
 80049a0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d009      	beq.n	80049bc <inc_lock+0xe0>
 80049a8:	4a12      	ldr	r2, [pc, #72]	@ (80049f4 <inc_lock+0x118>)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	4413      	add	r3, r2
 80049b0:	330c      	adds	r3, #12
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <inc_lock+0xe0>
 80049b8:	2300      	movs	r3, #0
 80049ba:	e015      	b.n	80049e8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d108      	bne.n	80049d4 <inc_lock+0xf8>
 80049c2:	4a0c      	ldr	r2, [pc, #48]	@ (80049f4 <inc_lock+0x118>)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	4413      	add	r3, r2
 80049ca:	330c      	adds	r3, #12
 80049cc:	881b      	ldrh	r3, [r3, #0]
 80049ce:	3301      	adds	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	e001      	b.n	80049d8 <inc_lock+0xfc>
 80049d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049d8:	4906      	ldr	r1, [pc, #24]	@ (80049f4 <inc_lock+0x118>)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	440b      	add	r3, r1
 80049e0:	330c      	adds	r3, #12
 80049e2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3301      	adds	r3, #1
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	20006b28 	.word	0x20006b28

080049f8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	607b      	str	r3, [r7, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d125      	bne.n	8004a58 <dec_lock+0x60>
		n = Files[i].ctr;
 8004a0c:	4a17      	ldr	r2, [pc, #92]	@ (8004a6c <dec_lock+0x74>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	4413      	add	r3, r2
 8004a14:	330c      	adds	r3, #12
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004a1a:	89fb      	ldrh	r3, [r7, #14]
 8004a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a20:	d101      	bne.n	8004a26 <dec_lock+0x2e>
 8004a22:	2300      	movs	r3, #0
 8004a24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004a26:	89fb      	ldrh	r3, [r7, #14]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <dec_lock+0x3a>
 8004a2c:	89fb      	ldrh	r3, [r7, #14]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004a32:	4a0e      	ldr	r2, [pc, #56]	@ (8004a6c <dec_lock+0x74>)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	4413      	add	r3, r2
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	89fa      	ldrh	r2, [r7, #14]
 8004a3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004a40:	89fb      	ldrh	r3, [r7, #14]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d105      	bne.n	8004a52 <dec_lock+0x5a>
 8004a46:	4a09      	ldr	r2, [pc, #36]	@ (8004a6c <dec_lock+0x74>)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	4413      	add	r3, r2
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	737b      	strb	r3, [r7, #13]
 8004a56:	e001      	b.n	8004a5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004a58:	2302      	movs	r3, #2
 8004a5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004a5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	20006b28 	.word	0x20006b28

08004a70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]
 8004a7c:	e010      	b.n	8004aa0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8004ab4 <clear_lock+0x44>)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	4413      	add	r3, r2
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d105      	bne.n	8004a9a <clear_lock+0x2a>
 8004a8e:	4a09      	ldr	r2, [pc, #36]	@ (8004ab4 <clear_lock+0x44>)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	4413      	add	r3, r2
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0eb      	beq.n	8004a7e <clear_lock+0xe>
	}
}
 8004aa6:	bf00      	nop
 8004aa8:	bf00      	nop
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	20006b28 	.word	0x20006b28

08004ab8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	78db      	ldrb	r3, [r3, #3]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d034      	beq.n	8004b36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	7858      	ldrb	r0, [r3, #1]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004adc:	2301      	movs	r3, #1
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	f7ff fbb4 	bl	800424c <disk_write>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	73fb      	strb	r3, [r7, #15]
 8004aee:	e022      	b.n	8004b36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	1ad2      	subs	r2, r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d217      	bcs.n	8004b36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	789b      	ldrb	r3, [r3, #2]
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	e010      	b.n	8004b30 <sync_window+0x78>
					wsect += fs->fsize;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4413      	add	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	7858      	ldrb	r0, [r3, #1]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b22:	2301      	movs	r3, #1
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	f7ff fb91 	bl	800424c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	613b      	str	r3, [r7, #16]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d8eb      	bhi.n	8004b0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d01b      	beq.n	8004b90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff ffad 	bl	8004ab8 <sync_window>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d113      	bne.n	8004b90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	7858      	ldrb	r0, [r3, #1]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004b72:	2301      	movs	r3, #1
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	f7ff fb3a 	bl	80041ee <disk_read>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004b80:	f04f 33ff 	mov.w	r3, #4294967295
 8004b84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff ff87 	bl	8004ab8 <sync_window>
 8004baa:	4603      	mov	r3, r0
 8004bac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d158      	bne.n	8004c66 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d148      	bne.n	8004c4e <sync_fs+0xb2>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	791b      	ldrb	r3, [r3, #4]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d144      	bne.n	8004c4e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3338      	adds	r3, #56	@ 0x38
 8004bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fda8 	bl	8004724 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3338      	adds	r3, #56	@ 0x38
 8004bd8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004bdc:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff fcaf 	bl	8004544 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3338      	adds	r3, #56	@ 0x38
 8004bea:	4921      	ldr	r1, [pc, #132]	@ (8004c70 <sync_fs+0xd4>)
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fcc4 	bl	800457a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3338      	adds	r3, #56	@ 0x38
 8004bf6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004bfa:	491e      	ldr	r1, [pc, #120]	@ (8004c74 <sync_fs+0xd8>)
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fcbc 	bl	800457a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3338      	adds	r3, #56	@ 0x38
 8004c06:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f7ff fcb2 	bl	800457a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3338      	adds	r3, #56	@ 0x38
 8004c1a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f7ff fca8 	bl	800457a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	7858      	ldrb	r0, [r3, #1]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c42:	2301      	movs	r3, #1
 8004c44:	f7ff fb02 	bl	800424c <disk_write>
			fs->fsi_flag = 0;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	785b      	ldrb	r3, [r3, #1]
 8004c52:	2200      	movs	r2, #0
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff fb28 	bl	80042ac <disk_ioctl>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <sync_fs+0xca>
 8004c62:	2301      	movs	r3, #1
 8004c64:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	41615252 	.word	0x41615252
 8004c74:	61417272 	.word	0x61417272

08004c78 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	3b02      	subs	r3, #2
 8004c86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	3b02      	subs	r3, #2
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d301      	bcc.n	8004c98 <clust2sect+0x20>
 8004c94:	2300      	movs	r3, #0
 8004c96:	e008      	b.n	8004caa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	895b      	ldrh	r3, [r3, #10]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	fb03 f202 	mul.w	r2, r3, r2
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca8:	4413      	add	r3, r2
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
	...

08004cb8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	6809      	ldr	r1, [r1, #0]
 8004cc6:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004cc8:	6839      	ldr	r1, [r7, #0]
 8004cca:	2901      	cmp	r1, #1
 8004ccc:	d904      	bls.n	8004cd8 <get_fat+0x20>
 8004cce:	69b9      	ldr	r1, [r7, #24]
 8004cd0:	69c9      	ldr	r1, [r1, #28]
 8004cd2:	6838      	ldr	r0, [r7, #0]
 8004cd4:	4288      	cmp	r0, r1
 8004cd6:	d302      	bcc.n	8004cde <get_fat+0x26>
		val = 1;	/* Internal error */
 8004cd8:	2301      	movs	r3, #1
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e100      	b.n	8004ee0 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004cde:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce2:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8004ce4:	69b9      	ldr	r1, [r7, #24]
 8004ce6:	7809      	ldrb	r1, [r1, #0]
 8004ce8:	3901      	subs	r1, #1
 8004cea:	2903      	cmp	r1, #3
 8004cec:	f200 80ec 	bhi.w	8004ec8 <get_fat+0x210>
 8004cf0:	a001      	add	r0, pc, #4	@ (adr r0, 8004cf8 <get_fat+0x40>)
 8004cf2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004cf6:	bf00      	nop
 8004cf8:	08004d09 	.word	0x08004d09
 8004cfc:	08004d8f 	.word	0x08004d8f
 8004d00:	08004dc5 	.word	0x08004dc5
 8004d04:	08004dfd 	.word	0x08004dfd
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	0a5b      	lsrs	r3, r3, #9
 8004d1e:	4413      	add	r3, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	69b8      	ldr	r0, [r7, #24]
 8004d24:	f7ff ff0c 	bl	8004b40 <move_window>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f040 80cf 	bne.w	8004ece <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	60fa      	str	r2, [r7, #12]
 8004d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d42:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	0a5b      	lsrs	r3, r3, #9
 8004d4c:	4413      	add	r3, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	69b8      	ldr	r0, [r7, #24]
 8004d52:	f7ff fef5 	bl	8004b40 <move_window>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f040 80ba 	bne.w	8004ed2 <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4413      	add	r3, r2
 8004d68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <get_fat+0xcc>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	e002      	b.n	8004d8a <get_fat+0xd2>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8a:	61fb      	str	r3, [r7, #28]
			break;
 8004d8c:	e0a8      	b.n	8004ee0 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	0a1b      	lsrs	r3, r3, #8
 8004d96:	4413      	add	r3, r2
 8004d98:	4619      	mov	r1, r3
 8004d9a:	69b8      	ldr	r0, [r7, #24]
 8004d9c:	f7ff fed0 	bl	8004b40 <move_window>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f040 8097 	bne.w	8004ed6 <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004db6:	4413      	add	r3, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff faad 	bl	8004318 <ld_word>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	61fb      	str	r3, [r7, #28]
			break;
 8004dc2:	e08d      	b.n	8004ee0 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	09db      	lsrs	r3, r3, #7
 8004dcc:	4413      	add	r3, r2
 8004dce:	4619      	mov	r1, r3
 8004dd0:	69b8      	ldr	r0, [r7, #24]
 8004dd2:	f7ff feb5 	bl	8004b40 <move_window>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d17e      	bne.n	8004eda <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004dea:	4413      	add	r3, r2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff faab 	bl	8004348 <ld_dword>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004df8:	61fb      	str	r3, [r7, #28]
			break;
 8004dfa:	e071      	b.n	8004ee0 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8004e02:	4301      	orrs	r1, r0
 8004e04:	d060      	beq.n	8004ec8 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	6889      	ldr	r1, [r1, #8]
 8004e0a:	6838      	ldr	r0, [r7, #0]
 8004e0c:	1a41      	subs	r1, r0, r1
 8004e0e:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8004e16:	1e42      	subs	r2, r0, #1
 8004e18:	f141 33ff 	adc.w	r3, r1, #4294967295
 8004e1c:	f04f 0000 	mov.w	r0, #0
 8004e20:	f04f 0100 	mov.w	r1, #0
 8004e24:	0a50      	lsrs	r0, r2, #9
 8004e26:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8004e2a:	0a59      	lsrs	r1, r3, #9
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	895b      	ldrh	r3, [r3, #10]
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	79db      	ldrb	r3, [r3, #7]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d10e      	bne.n	8004e5e <get_fat+0x1a6>
					if (cofs <= clen) {
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d80a      	bhi.n	8004e5e <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d002      	beq.n	8004e56 <get_fat+0x19e>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	3301      	adds	r3, #1
 8004e54:	e001      	b.n	8004e5a <get_fat+0x1a2>
 8004e56:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8004e5a:	61fb      	str	r3, [r7, #28]
						break;
 8004e5c:	e040      	b.n	8004ee0 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	79db      	ldrb	r3, [r3, #7]
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d108      	bne.n	8004e78 <get_fat+0x1c0>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d203      	bcs.n	8004e78 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	3301      	adds	r3, #1
 8004e74:	61fb      	str	r3, [r7, #28]
					break;
 8004e76:	e033      	b.n	8004ee0 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	79db      	ldrb	r3, [r3, #7]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d023      	beq.n	8004ec8 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8004e88:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8004e8c:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8004e8e:	e027      	b.n	8004ee0 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	09db      	lsrs	r3, r3, #7
 8004e98:	4413      	add	r3, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	69b8      	ldr	r0, [r7, #24]
 8004e9e:	f7ff fe4f 	bl	8004b40 <move_window>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d11a      	bne.n	8004ede <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004eb6:	4413      	add	r3, r2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fa45 	bl	8004348 <ld_dword>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ec4:	61fb      	str	r3, [r7, #28]
					break;
 8004ec6:	e00b      	b.n	8004ee0 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004ec8:	2301      	movs	r3, #1
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	e008      	b.n	8004ee0 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ece:	bf00      	nop
 8004ed0:	e006      	b.n	8004ee0 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ed2:	bf00      	nop
 8004ed4:	e004      	b.n	8004ee0 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004ed6:	bf00      	nop
 8004ed8:	e002      	b.n	8004ee0 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004eda:	bf00      	nop
 8004edc:	e000      	b.n	8004ee0 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ede:	bf00      	nop
		}
	}

	return val;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop

08004eec <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b089      	sub	sp, #36	@ 0x24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	f240 80dd 	bls.w	80050be <put_fat+0x1d2>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	f080 80d7 	bcs.w	80050be <put_fat+0x1d2>
		switch (fs->fs_type) {
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	f300 80d2 	bgt.w	80050be <put_fat+0x1d2>
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	f280 8093 	bge.w	8005046 <put_fat+0x15a>
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d002      	beq.n	8004f2a <put_fat+0x3e>
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d06e      	beq.n	8005006 <put_fat+0x11a>
 8004f28:	e0c9      	b.n	80050be <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4413      	add	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	0a5b      	lsrs	r3, r3, #9
 8004f40:	4413      	add	r3, r2
 8004f42:	4619      	mov	r1, r3
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7ff fdfb 	bl	8004b40 <move_window>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004f4e:	7ffb      	ldrb	r3, [r7, #31]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f040 80ad 	bne.w	80050b0 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	1c59      	adds	r1, r3, #1
 8004f60:	61b9      	str	r1, [r7, #24]
 8004f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f66:	4413      	add	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00d      	beq.n	8004f90 <put_fat+0xa4>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	b25b      	sxtb	r3, r3
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	b25a      	sxtb	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	b25b      	sxtb	r3, r3
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	e001      	b.n	8004f94 <put_fat+0xa8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	0a5b      	lsrs	r3, r3, #9
 8004fa6:	4413      	add	r3, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f7ff fdc8 	bl	8004b40 <move_window>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004fb4:	7ffb      	ldrb	r3, [r7, #31]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d17c      	bne.n	80050b4 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc6:	4413      	add	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <put_fat+0xf0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	091b      	lsrs	r3, r3, #4
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	e00e      	b.n	8004ffa <put_fat+0x10e>
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	b25b      	sxtb	r3, r3
 8004fe2:	f023 030f 	bic.w	r3, r3, #15
 8004fe6:	b25a      	sxtb	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	0a1b      	lsrs	r3, r3, #8
 8004fec:	b25b      	sxtb	r3, r3
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	b25b      	sxtb	r3, r3
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	b25b      	sxtb	r3, r3
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	70da      	strb	r2, [r3, #3]
			break;
 8005004:	e05b      	b.n	80050be <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	0a1b      	lsrs	r3, r3, #8
 800500e:	4413      	add	r3, r2
 8005010:	4619      	mov	r1, r3
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f7ff fd94 	bl	8004b40 <move_window>
 8005018:	4603      	mov	r3, r0
 800501a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800501c:	7ffb      	ldrb	r3, [r7, #31]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d14a      	bne.n	80050b8 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005030:	4413      	add	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	b292      	uxth	r2, r2
 8005036:	4611      	mov	r1, r2
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fa83 	bl	8004544 <st_word>
			fs->wflag = 1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	70da      	strb	r2, [r3, #3]
			break;
 8005044:	e03b      	b.n	80050be <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	09db      	lsrs	r3, r3, #7
 800504e:	4413      	add	r3, r2
 8005050:	4619      	mov	r1, r3
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff fd74 	bl	8004b40 <move_window>
 8005058:	4603      	mov	r3, r0
 800505a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800505c:	7ffb      	ldrb	r3, [r7, #31]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d12c      	bne.n	80050bc <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b04      	cmp	r3, #4
 8005068:	d012      	beq.n	8005090 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800507e:	4413      	add	r3, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff f961 	bl	8004348 <ld_dword>
 8005086:	4603      	mov	r3, r0
 8005088:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800508c:	4323      	orrs	r3, r4
 800508e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800509e:	4413      	add	r3, r2
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff fa69 	bl	800457a <st_dword>
			fs->wflag = 1;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	70da      	strb	r2, [r3, #3]
			break;
 80050ae:	e006      	b.n	80050be <put_fat+0x1d2>
			if (res != FR_OK) break;
 80050b0:	bf00      	nop
 80050b2:	e004      	b.n	80050be <put_fat+0x1d2>
			if (res != FR_OK) break;
 80050b4:	bf00      	nop
 80050b6:	e002      	b.n	80050be <put_fat+0x1d2>
			if (res != FR_OK) break;
 80050b8:	bf00      	nop
 80050ba:	e000      	b.n	80050be <put_fat+0x1d2>
			if (res != FR_OK) break;
 80050bc:	bf00      	nop
		}
	}
	return res;
 80050be:	7ffb      	ldrb	r3, [r7, #31]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3724      	adds	r7, #36	@ 0x24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd90      	pop	{r4, r7, pc}

080050c8 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	@ 0x28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	3b02      	subs	r3, #2
 80050d8:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	3b02      	subs	r3, #2
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d301      	bcc.n	80050ea <find_bitmap+0x22>
 80050e6:	2300      	movs	r3, #0
 80050e8:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	61fb      	str	r3, [r7, #28]
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	0b1b      	lsrs	r3, r3, #12
 80050fe:	4413      	add	r3, r2
 8005100:	4619      	mov	r1, r3
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f7ff fd1c 	bl	8004b40 <move_window>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <find_bitmap+0x4c>
 800510e:	f04f 33ff 	mov.w	r3, #4294967295
 8005112:	e051      	b.n	80051b8 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	08db      	lsrs	r3, r3, #3
 8005118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511c:	623b      	str	r3, [r7, #32]
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	2201      	movs	r2, #1
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	4413      	add	r3, r2
 8005134:	3338      	adds	r3, #56	@ 0x38
 8005136:	781a      	ldrb	r2, [r3, #0]
 8005138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800513c:	4013      	ands	r3, r2
 800513e:	74fb      	strb	r3, [r7, #19]
 8005140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	3301      	adds	r3, #1
 800514e:	61fb      	str	r3, [r7, #28]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	3b02      	subs	r3, #2
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	429a      	cmp	r2, r3
 800515a:	d307      	bcc.n	800516c <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	2300      	movs	r3, #0
 8005162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005166:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800516a:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800516c:	7cfb      	ldrb	r3, [r7, #19]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d109      	bne.n	8005186 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	3301      	adds	r3, #1
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d106      	bne.n	800518e <find_bitmap+0xc6>
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	3302      	adds	r3, #2
 8005184:	e018      	b.n	80051b8 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d101      	bne.n	800519a <find_bitmap+0xd2>
 8005196:	2300      	movs	r3, #0
 8005198:	e00e      	b.n	80051b8 <find_bitmap+0xf0>
			} while (bm);
 800519a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1c5      	bne.n	800512e <find_bitmap+0x66>
			bm = 1;
 80051a2:	2301      	movs	r3, #1
 80051a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	3301      	adds	r3, #1
 80051ac:	623b      	str	r3, [r7, #32]
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051b4:	d3bb      	bcc.n	800512e <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80051b6:	e79e      	b.n	80050f6 <find_bitmap+0x2e>
	}
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3728      	adds	r7, #40	@ 0x28
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	3b02      	subs	r3, #2
 80051d2:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	0b1b      	lsrs	r3, r3, #12
 80051dc:	4413      	add	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	08db      	lsrs	r3, r3, #3
 80051e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	2201      	movs	r2, #1
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	617a      	str	r2, [r7, #20]
 80051fe:	4619      	mov	r1, r3
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f7ff fc9d 	bl	8004b40 <move_window>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <change_bitmap+0x50>
 800520c:	2301      	movs	r3, #1
 800520e:	e03d      	b.n	800528c <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	4413      	add	r3, r2
 8005216:	3338      	adds	r3, #56	@ 0x38
 8005218:	781a      	ldrb	r2, [r3, #0]
 800521a:	7ffb      	ldrb	r3, [r7, #31]
 800521c:	4013      	ands	r3, r2
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	bf14      	ite	ne
 8005224:	2301      	movne	r3, #1
 8005226:	2300      	moveq	r3, #0
 8005228:	b2db      	uxtb	r3, r3
 800522a:	461a      	mov	r2, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <change_bitmap+0x76>
 8005232:	2302      	movs	r3, #2
 8005234:	e02a      	b.n	800528c <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	4413      	add	r3, r2
 800523c:	3338      	adds	r3, #56	@ 0x38
 800523e:	781a      	ldrb	r2, [r3, #0]
 8005240:	7ffb      	ldrb	r3, [r7, #31]
 8005242:	4053      	eors	r3, r2
 8005244:	b2d9      	uxtb	r1, r3
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	4413      	add	r3, r2
 800524c:	3338      	adds	r3, #56	@ 0x38
 800524e:	460a      	mov	r2, r1
 8005250:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3b01      	subs	r3, #1
 800525c:	607b      	str	r3, [r7, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <change_bitmap+0xa8>
 8005264:	2300      	movs	r3, #0
 8005266:	e011      	b.n	800528c <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8005268:	7ffb      	ldrb	r3, [r7, #31]
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	77fb      	strb	r3, [r7, #31]
 800526e:	7ffb      	ldrb	r3, [r7, #31]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1cd      	bne.n	8005210 <change_bitmap+0x50>
			bm = 1;
 8005274:	2301      	movs	r3, #1
 8005276:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	3301      	adds	r3, #1
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005284:	d3c4      	bcc.n	8005210 <change_bitmap+0x50>
		i = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800528a:	e7b5      	b.n	80051f8 <change_bitmap+0x38>
	}
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	79db      	ldrb	r3, [r3, #7]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d121      	bne.n	80052e8 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	e014      	b.n	80052dc <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	3301      	adds	r3, #1
 80052ba:	461a      	mov	r2, r3
 80052bc:	6979      	ldr	r1, [r7, #20]
 80052be:	f7ff fe15 	bl	8004eec <put_fat>
 80052c2:	4603      	mov	r3, r0
 80052c4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <fill_first_frag+0x3c>
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	e00c      	b.n	80052ea <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	3301      	adds	r3, #1
 80052d4:	617b      	str	r3, [r7, #20]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	3b01      	subs	r3, #1
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1e7      	bne.n	80052b2 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b086      	sub	sp, #24
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80052fe:	e020      	b.n	8005342 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	1c59      	adds	r1, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d905      	bls.n	8005322 <fill_last_frag+0x30>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	3302      	adds	r3, #2
 8005320:	e000      	b.n	8005324 <fill_last_frag+0x32>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	461a      	mov	r2, r3
 8005326:	f7ff fde1 	bl	8004eec <put_fat>
 800532a:	4603      	mov	r3, r0
 800532c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <fill_last_frag+0x46>
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	e009      	b.n	800534c <fill_last_frag+0x5a>
		obj->n_frag--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	1e5a      	subs	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1da      	bne.n	8005300 <fill_last_frag+0xe>
	}
	return FR_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	@ 0x28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	627b      	str	r3, [r7, #36]	@ 0x24
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d904      	bls.n	8005382 <remove_chain+0x2e>
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	d301      	bcc.n	8005386 <remove_chain+0x32>
 8005382:	2302      	movs	r3, #2
 8005384:	e096      	b.n	80054b4 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d014      	beq.n	80053b6 <remove_chain+0x62>
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b04      	cmp	r3, #4
 8005392:	d103      	bne.n	800539c <remove_chain+0x48>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	79db      	ldrb	r3, [r3, #7]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d00c      	beq.n	80053b6 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800539c:	f04f 32ff 	mov.w	r2, #4294967295
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	69b8      	ldr	r0, [r7, #24]
 80053a4:	f7ff fda2 	bl	8004eec <put_fat>
 80053a8:	4603      	mov	r3, r0
 80053aa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80053ac:	7ffb      	ldrb	r3, [r7, #31]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <remove_chain+0x62>
 80053b2:	7ffb      	ldrb	r3, [r7, #31]
 80053b4:	e07e      	b.n	80054b4 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7ff fc7d 	bl	8004cb8 <get_fat>
 80053be:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d055      	beq.n	8005472 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <remove_chain+0x7c>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e071      	b.n	80054b4 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d101      	bne.n	80053dc <remove_chain+0x88>
 80053d8:	2301      	movs	r3, #1
 80053da:	e06b      	b.n	80054b4 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d00b      	beq.n	80053fc <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80053e4:	2200      	movs	r2, #0
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	69b8      	ldr	r0, [r7, #24]
 80053ea:	f7ff fd7f 	bl	8004eec <put_fat>
 80053ee:	4603      	mov	r3, r0
 80053f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80053f2:	7ffb      	ldrb	r3, [r7, #31]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <remove_chain+0xa8>
 80053f8:	7ffb      	ldrb	r3, [r7, #31]
 80053fa:	e05b      	b.n	80054b4 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	3b02      	subs	r3, #2
 8005406:	429a      	cmp	r2, r3
 8005408:	d20b      	bcs.n	8005422 <remove_chain+0xce>
			fs->free_clst++;
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	791b      	ldrb	r3, [r3, #4]
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	b2da      	uxtb	r2, r3
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	3301      	adds	r3, #1
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	429a      	cmp	r2, r3
 800542a:	d102      	bne.n	8005432 <remove_chain+0xde>
			ecl = nxt;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	623b      	str	r3, [r7, #32]
 8005430:	e017      	b.n	8005462 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b04      	cmp	r3, #4
 8005438:	d10f      	bne.n	800545a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800543a:	6a3a      	ldr	r2, [r7, #32]
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	2300      	movs	r3, #0
 8005444:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005446:	69b8      	ldr	r0, [r7, #24]
 8005448:	f7ff feba 	bl	80051c0 <change_bitmap>
 800544c:	4603      	mov	r3, r0
 800544e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8005450:	7ffb      	ldrb	r3, [r7, #31]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <remove_chain+0x106>
 8005456:	7ffb      	ldrb	r3, [r7, #31]
 8005458:	e02c      	b.n	80054b4 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	623b      	str	r3, [r7, #32]
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	429a      	cmp	r2, r3
 800546e:	d3a2      	bcc.n	80053b6 <remove_chain+0x62>
 8005470:	e000      	b.n	8005474 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8005472:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b04      	cmp	r3, #4
 800547a:	d11a      	bne.n	80054b2 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d103      	bne.n	800548a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	71da      	strb	r2, [r3, #7]
 8005488:	e013      	b.n	80054b2 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	79db      	ldrb	r3, [r3, #7]
 800548e:	2b03      	cmp	r3, #3
 8005490:	d10f      	bne.n	80054b2 <remove_chain+0x15e>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	429a      	cmp	r2, r3
 800549a:	d30a      	bcc.n	80054b2 <remove_chain+0x15e>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	4413      	add	r3, r2
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d802      	bhi.n	80054b2 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2202      	movs	r2, #2
 80054b0:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3728      	adds	r7, #40	@ 0x28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10d      	bne.n	80054ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <create_chain+0x2c>
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d31b      	bcc.n	8005520 <create_chain+0x64>
 80054e8:	2301      	movs	r3, #1
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	e018      	b.n	8005520 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff fbe1 	bl	8004cb8 <get_fat>
 80054f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d801      	bhi.n	8005502 <create_chain+0x46>
 80054fe:	2301      	movs	r3, #1
 8005500:	e0d9      	b.n	80056b6 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005508:	d101      	bne.n	800550e <create_chain+0x52>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	e0d3      	b.n	80056b6 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	429a      	cmp	r2, r3
 8005516:	d201      	bcs.n	800551c <create_chain+0x60>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	e0cc      	b.n	80056b6 <create_chain+0x1fa>
		scl = clst;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b04      	cmp	r3, #4
 8005526:	d164      	bne.n	80055f2 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8005528:	2201      	movs	r2, #1
 800552a:	69b9      	ldr	r1, [r7, #24]
 800552c:	6938      	ldr	r0, [r7, #16]
 800552e:	f7ff fdcb 	bl	80050c8 <find_bitmap>
 8005532:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <create_chain+0x86>
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005540:	d101      	bne.n	8005546 <create_chain+0x8a>
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	e0b7      	b.n	80056b6 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8005546:	2301      	movs	r3, #1
 8005548:	2201      	movs	r2, #1
 800554a:	69f9      	ldr	r1, [r7, #28]
 800554c:	6938      	ldr	r0, [r7, #16]
 800554e:	f7ff fe37 	bl	80051c0 <change_bitmap>
 8005552:	4603      	mov	r3, r0
 8005554:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8005556:	7dfb      	ldrb	r3, [r7, #23]
 8005558:	2b02      	cmp	r3, #2
 800555a:	d101      	bne.n	8005560 <create_chain+0xa4>
 800555c:	2301      	movs	r3, #1
 800555e:	e0aa      	b.n	80056b6 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8005560:	7dfb      	ldrb	r3, [r7, #23]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d102      	bne.n	800556c <create_chain+0xb0>
 8005566:	f04f 33ff 	mov.w	r3, #4294967295
 800556a:	e0a4      	b.n	80056b6 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d103      	bne.n	800557a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	71da      	strb	r2, [r3, #7]
 8005578:	e011      	b.n	800559e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	79db      	ldrb	r3, [r3, #7]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d10d      	bne.n	800559e <create_chain+0xe2>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	3301      	adds	r3, #1
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	429a      	cmp	r2, r3
 800558a:	d008      	beq.n	800559e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	1ad2      	subs	r2, r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2203      	movs	r2, #3
 800559c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	79db      	ldrb	r3, [r3, #7]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d064      	beq.n	8005670 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	3301      	adds	r3, #1
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d10b      	bne.n	80055c8 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <create_chain+0x104>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	3301      	adds	r3, #1
 80055be:	e000      	b.n	80055c2 <create_chain+0x106>
 80055c0:	2302      	movs	r3, #2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	61d3      	str	r3, [r2, #28]
 80055c6:	e053      	b.n	8005670 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d102      	bne.n	80055d6 <create_chain+0x11a>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	6839      	ldr	r1, [r7, #0]
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fe89 	bl	80052f2 <fill_last_frag>
 80055e0:	4603      	mov	r3, r0
 80055e2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80055e4:	7dfb      	ldrb	r3, [r7, #23]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d142      	bne.n	8005670 <create_chain+0x1b4>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	61da      	str	r2, [r3, #28]
 80055f0:	e03e      	b.n	8005670 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	3301      	adds	r3, #1
 80055fa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	429a      	cmp	r2, r3
 8005604:	d307      	bcc.n	8005616 <create_chain+0x15a>
				ncl = 2;
 8005606:	2302      	movs	r3, #2
 8005608:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	429a      	cmp	r2, r3
 8005610:	d901      	bls.n	8005616 <create_chain+0x15a>
 8005612:	2300      	movs	r3, #0
 8005614:	e04f      	b.n	80056b6 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005616:	69f9      	ldr	r1, [r7, #28]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff fb4d 	bl	8004cb8 <get_fat>
 800561e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00e      	beq.n	8005644 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d003      	beq.n	8005634 <create_chain+0x178>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d101      	bne.n	8005638 <create_chain+0x17c>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	e03e      	b.n	80056b6 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	429a      	cmp	r2, r3
 800563e:	d1da      	bne.n	80055f6 <create_chain+0x13a>
 8005640:	2300      	movs	r3, #0
 8005642:	e038      	b.n	80056b6 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8005644:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005646:	f04f 32ff 	mov.w	r2, #4294967295
 800564a:	69f9      	ldr	r1, [r7, #28]
 800564c:	6938      	ldr	r0, [r7, #16]
 800564e:	f7ff fc4d 	bl	8004eec <put_fat>
 8005652:	4603      	mov	r3, r0
 8005654:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d109      	bne.n	8005670 <create_chain+0x1b4>
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d006      	beq.n	8005670 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	6938      	ldr	r0, [r7, #16]
 8005668:	f7ff fc40 	bl	8004eec <put_fat>
 800566c:	4603      	mov	r3, r0
 800566e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005670:	7dfb      	ldrb	r3, [r7, #23]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d116      	bne.n	80056a4 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	699a      	ldr	r2, [r3, #24]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	3b02      	subs	r3, #2
 8005686:	429a      	cmp	r2, r3
 8005688:	d804      	bhi.n	8005694 <create_chain+0x1d8>
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	1e5a      	subs	r2, r3, #1
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	791b      	ldrb	r3, [r3, #4]
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	b2da      	uxtb	r2, r3
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	711a      	strb	r2, [r3, #4]
 80056a2:	e007      	b.n	80056b4 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d102      	bne.n	80056b0 <create_chain+0x1f4>
 80056aa:	f04f 33ff 	mov.w	r3, #4294967295
 80056ae:	e000      	b.n	80056b2 <create_chain+0x1f6>
 80056b0:	2301      	movs	r3, #1
 80056b2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80056b4:	69fb      	ldr	r3, [r7, #28]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80056be:	b5b0      	push	{r4, r5, r7, lr}
 80056c0:	b088      	sub	sp, #32
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d4:	3304      	adds	r3, #4
 80056d6:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80056d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056dc:	f04f 0000 	mov.w	r0, #0
 80056e0:	f04f 0100 	mov.w	r1, #0
 80056e4:	0a50      	lsrs	r0, r2, #9
 80056e6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80056ea:	0a59      	lsrs	r1, r3, #9
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	895b      	ldrh	r3, [r3, #10]
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2200      	movs	r2, #0
 80056f4:	461c      	mov	r4, r3
 80056f6:	4615      	mov	r5, r2
 80056f8:	4622      	mov	r2, r4
 80056fa:	462b      	mov	r3, r5
 80056fc:	f7fb fae4 	bl	8000cc8 <__aeabi_uldivmod>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4613      	mov	r3, r2
 8005706:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	1d1a      	adds	r2, r3, #4
 800570c:	61ba      	str	r2, [r7, #24]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <clmt_clust+0x5e>
 8005718:	2300      	movs	r3, #0
 800571a:	e010      	b.n	800573e <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	429a      	cmp	r2, r3
 8005722:	d307      	bcc.n	8005734 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	61fb      	str	r3, [r7, #28]
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	3304      	adds	r3, #4
 8005730:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005732:	e7e9      	b.n	8005708 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8005734:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	4413      	add	r3, r2
}
 800573e:	4618      	mov	r0, r3
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bdb0      	pop	{r4, r5, r7, pc}

08005746 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b04      	cmp	r3, #4
 800575c:	d102      	bne.n	8005764 <dir_sdi+0x1e>
 800575e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005762:	e001      	b.n	8005768 <dir_sdi+0x22>
 8005764:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d904      	bls.n	8005778 <dir_sdi+0x32>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f003 031f 	and.w	r3, r3, #31
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <dir_sdi+0x36>
		return FR_INT_ERR;
 8005778:	2302      	movs	r3, #2
 800577a:	e066      	b.n	800584a <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d109      	bne.n	80057a2 <dir_sdi+0x5c>
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b02      	cmp	r3, #2
 8005794:	d905      	bls.n	80057a2 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10c      	bne.n	80057c2 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	8912      	ldrh	r2, [r2, #8]
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d301      	bcc.n	80057b8 <dir_sdi+0x72>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e048      	b.n	800584a <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	639a      	str	r2, [r3, #56]	@ 0x38
 80057c0:	e029      	b.n	8005816 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	895b      	ldrh	r3, [r3, #10]
 80057c6:	025b      	lsls	r3, r3, #9
 80057c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80057ca:	e019      	b.n	8005800 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6979      	ldr	r1, [r7, #20]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff fa71 	bl	8004cb8 <get_fat>
 80057d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057de:	d101      	bne.n	80057e4 <dir_sdi+0x9e>
 80057e0:	2301      	movs	r3, #1
 80057e2:	e032      	b.n	800584a <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d904      	bls.n	80057f4 <dir_sdi+0xae>
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d301      	bcc.n	80057f8 <dir_sdi+0xb2>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e028      	b.n	800584a <dir_sdi+0x104>
			ofs -= csz;
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	429a      	cmp	r2, r3
 8005806:	d2e1      	bcs.n	80057cc <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8005808:	6979      	ldr	r1, [r7, #20]
 800580a:	6938      	ldr	r0, [r7, #16]
 800580c:	f7ff fa34 	bl	8004c78 <clust2sect>
 8005810:	4602      	mov	r2, r0
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <dir_sdi+0xe2>
 8005824:	2302      	movs	r3, #2
 8005826:	e010      	b.n	800584a <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	0a5b      	lsrs	r3, r3, #9
 8005830:	441a      	add	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005842:	441a      	add	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b086      	sub	sp, #24
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	3320      	adds	r3, #32
 8005868:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <dir_next+0x38>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b04      	cmp	r3, #4
 8005878:	d102      	bne.n	8005880 <dir_next+0x2e>
 800587a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800587e:	e001      	b.n	8005884 <dir_next+0x32>
 8005880:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	429a      	cmp	r2, r3
 8005888:	d801      	bhi.n	800588e <dir_next+0x3c>
 800588a:	2304      	movs	r3, #4
 800588c:	e0b2      	b.n	80059f4 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005894:	2b00      	cmp	r3, #0
 8005896:	f040 80a0 	bne.w	80059da <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10b      	bne.n	80058c4 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	8912      	ldrh	r2, [r2, #8]
 80058b4:	4293      	cmp	r3, r2
 80058b6:	f0c0 8090 	bcc.w	80059da <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	639a      	str	r2, [r3, #56]	@ 0x38
 80058c0:	2304      	movs	r3, #4
 80058c2:	e097      	b.n	80059f4 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	0a5b      	lsrs	r3, r3, #9
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	8952      	ldrh	r2, [r2, #10]
 80058cc:	3a01      	subs	r2, #1
 80058ce:	4013      	ands	r3, r2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 8082 	bne.w	80059da <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	f7ff f9ea 	bl	8004cb8 <get_fat>
 80058e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d801      	bhi.n	80058f0 <dir_next+0x9e>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e081      	b.n	80059f4 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d101      	bne.n	80058fc <dir_next+0xaa>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e07b      	b.n	80059f4 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	429a      	cmp	r2, r3
 8005904:	d35f      	bcc.n	80059c6 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	639a      	str	r2, [r3, #56]	@ 0x38
 8005912:	2304      	movs	r3, #4
 8005914:	e06e      	b.n	80059f4 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f7ff fdcc 	bl	80054bc <create_chain>
 8005924:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <dir_next+0xde>
 800592c:	2307      	movs	r3, #7
 800592e:	e061      	b.n	80059f4 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <dir_next+0xe8>
 8005936:	2302      	movs	r3, #2
 8005938:	e05c      	b.n	80059f4 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005940:	d101      	bne.n	8005946 <dir_next+0xf4>
 8005942:	2301      	movs	r3, #1
 8005944:	e056      	b.n	80059f4 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	79db      	ldrb	r3, [r3, #7]
 800594a:	f043 0304 	orr.w	r3, r3, #4
 800594e:	b2da      	uxtb	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff f8af 	bl	8004ab8 <sync_window>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <dir_next+0x112>
 8005960:	2301      	movs	r3, #1
 8005962:	e047      	b.n	80059f4 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3338      	adds	r3, #56	@ 0x38
 8005968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800596c:	2100      	movs	r1, #0
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe fed8 	bl	8004724 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005974:	2300      	movs	r3, #0
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	6979      	ldr	r1, [r7, #20]
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7ff f97c 	bl	8004c78 <clust2sect>
 8005980:	4602      	mov	r2, r0
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	635a      	str	r2, [r3, #52]	@ 0x34
 8005986:	e012      	b.n	80059ae <dir_next+0x15c>
						fs->wflag = 1;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2201      	movs	r2, #1
 800598c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f7ff f892 	bl	8004ab8 <sync_window>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <dir_next+0x14c>
 800599a:	2301      	movs	r3, #1
 800599c:	e02a      	b.n	80059f4 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	3301      	adds	r3, #1
 80059a2:	613b      	str	r3, [r7, #16]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	895b      	ldrh	r3, [r3, #10]
 80059b2:	461a      	mov	r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d3e6      	bcc.n	8005988 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad2      	subs	r2, r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 80059cc:	6979      	ldr	r1, [r7, #20]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f7ff f952 	bl	8004c78 <clust2sect>
 80059d4:	4602      	mov	r2, r0
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ec:	441a      	add	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff fe99 	bl	8005746 <dir_sdi>
 8005a14:	4603      	mov	r3, r0
 8005a16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d140      	bne.n	8005aa0 <dir_alloc+0xa4>
		n = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	4619      	mov	r1, r3
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f7ff f889 	bl	8004b40 <move_window>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d132      	bne.n	8005a9e <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d108      	bne.n	8005a52 <dir_alloc+0x56>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	b25b      	sxtb	r3, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	09db      	lsrs	r3, r3, #7
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	e00f      	b.n	8005a72 <dir_alloc+0x76>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2be5      	cmp	r3, #229	@ 0xe5
 8005a5a:	d004      	beq.n	8005a66 <dir_alloc+0x6a>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <dir_alloc+0x6e>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <dir_alloc+0x70>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d102      	bne.n	8005a8a <dir_alloc+0x8e>
 8005a84:	e00c      	b.n	8005aa0 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005a86:	2300      	movs	r3, #0
 8005a88:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff fee0 	bl	8005852 <dir_next>
 8005a92:	4603      	mov	r3, r0
 8005a94:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0c2      	beq.n	8005a22 <dir_alloc+0x26>
 8005a9c:	e000      	b.n	8005aa0 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8005a9e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005aa0:	7dfb      	ldrb	r3, [r7, #23]
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d101      	bne.n	8005aaa <dir_alloc+0xae>
 8005aa6:	2307      	movs	r3, #7
 8005aa8:	75fb      	strb	r3, [r7, #23]
	return res;
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	331a      	adds	r3, #26
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fc28 	bl	8004318 <ld_word>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d109      	bne.n	8005ae8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	3314      	adds	r3, #20
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fe fc1d 	bl	8004318 <ld_word>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	041b      	lsls	r3, r3, #16
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	331a      	adds	r3, #26
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	b292      	uxth	r2, r2
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe fd1b 	bl	8004544 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d109      	bne.n	8005b2a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f103 0214 	add.w	r2, r3, #20
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	0c1b      	lsrs	r3, r3, #16
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f7fe fd0d 	bl	8004544 <st_word>
	}
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	331a      	adds	r3, #26
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fbe8 	bl	8004318 <ld_word>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <cmp_lfn+0x1e>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e059      	b.n	8005c06 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b5a:	1e5a      	subs	r2, r3, #1
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005b68:	2301      	movs	r3, #1
 8005b6a:	81fb      	strh	r3, [r7, #14]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	613b      	str	r3, [r7, #16]
 8005b70:	e033      	b.n	8005bda <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005b72:	4a27      	ldr	r2, [pc, #156]	@ (8005c10 <cmp_lfn+0xdc>)
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4413      	add	r3, r2
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	4413      	add	r3, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fe fbc9 	bl	8004318 <ld_word>
 8005b86:	4603      	mov	r3, r0
 8005b88:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005b8a:	89fb      	ldrh	r3, [r7, #14]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01a      	beq.n	8005bc6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2bfe      	cmp	r3, #254	@ 0xfe
 8005b94:	d812      	bhi.n	8005bbc <cmp_lfn+0x88>
 8005b96:	89bb      	ldrh	r3, [r7, #12]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f002 fe17 	bl	80087cc <ff_wtoupper>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	461c      	mov	r4, r3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	617a      	str	r2, [r7, #20]
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f002 fe0b 	bl	80087cc <ff_wtoupper>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	429c      	cmp	r4, r3
 8005bba:	d001      	beq.n	8005bc0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	e022      	b.n	8005c06 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005bc0:	89bb      	ldrh	r3, [r7, #12]
 8005bc2:	81fb      	strh	r3, [r7, #14]
 8005bc4:	e006      	b.n	8005bd4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005bc6:	89bb      	ldrh	r3, [r7, #12]
 8005bc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d001      	beq.n	8005bd4 <cmp_lfn+0xa0>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e018      	b.n	8005c06 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	613b      	str	r3, [r7, #16]
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b0c      	cmp	r3, #12
 8005bde:	d9c8      	bls.n	8005b72 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00b      	beq.n	8005c04 <cmp_lfn+0xd0>
 8005bec:	89fb      	ldrh	r3, [r7, #14]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d008      	beq.n	8005c04 <cmp_lfn+0xd0>
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <cmp_lfn+0xd0>
 8005c00:	2300      	movs	r3, #0
 8005c02:	e000      	b.n	8005c06 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005c04:	2301      	movs	r3, #1
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd90      	pop	{r4, r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	0800d270 	.word	0x0800d270

08005c14 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	331a      	adds	r3, #26
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fe fb78 	bl	8004318 <ld_word>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <pick_lfn+0x1e>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e04d      	b.n	8005cce <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c3a:	1e5a      	subs	r2, r3, #1
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005c48:	2301      	movs	r3, #1
 8005c4a:	81fb      	strh	r3, [r7, #14]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	e028      	b.n	8005ca4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005c52:	4a21      	ldr	r2, [pc, #132]	@ (8005cd8 <pick_lfn+0xc4>)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4413      	add	r3, r2
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	4413      	add	r3, r2
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe fb59 	bl	8004318 <ld_word>
 8005c66:	4603      	mov	r3, r0
 8005c68:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005c6a:	89fb      	ldrh	r3, [r7, #14]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d00f      	beq.n	8005c90 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2bfe      	cmp	r3, #254	@ 0xfe
 8005c74:	d901      	bls.n	8005c7a <pick_lfn+0x66>
 8005c76:	2300      	movs	r3, #0
 8005c78:	e029      	b.n	8005cce <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005c7a:	89bb      	ldrh	r3, [r7, #12]
 8005c7c:	81fb      	strh	r3, [r7, #14]
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	617a      	str	r2, [r7, #20]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4413      	add	r3, r2
 8005c8a:	89fa      	ldrh	r2, [r7, #14]
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	e006      	b.n	8005c9e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005c90:	89bb      	ldrh	r3, [r7, #12]
 8005c92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d001      	beq.n	8005c9e <pick_lfn+0x8a>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e017      	b.n	8005cce <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	613b      	str	r3, [r7, #16]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b0c      	cmp	r3, #12
 8005ca8:	d9d3      	bls.n	8005c52 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2bfe      	cmp	r3, #254	@ 0xfe
 8005cba:	d901      	bls.n	8005cc0 <pick_lfn+0xac>
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	e006      	b.n	8005cce <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	2200      	movs	r2, #0
 8005cca:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8005ccc:	2301      	movs	r3, #1
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	0800d270 	.word	0x0800d270

08005cdc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	461a      	mov	r2, r3
 8005cea:	460b      	mov	r3, r1
 8005cec:	71fb      	strb	r3, [r7, #7]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	330d      	adds	r3, #13
 8005cf6:	79ba      	ldrb	r2, [r7, #6]
 8005cf8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	330b      	adds	r3, #11
 8005cfe:	220f      	movs	r2, #15
 8005d00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	330c      	adds	r3, #12
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	331a      	adds	r3, #26
 8005d0e:	2100      	movs	r1, #0
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fe fc17 	bl	8004544 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	1e5a      	subs	r2, r3, #1
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	4413      	add	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	82fb      	strh	r3, [r7, #22]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005d2e:	8afb      	ldrh	r3, [r7, #22]
 8005d30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <put_lfn+0x6c>
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	61fa      	str	r2, [r7, #28]
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005d48:	4a17      	ldr	r2, [pc, #92]	@ (8005da8 <put_lfn+0xcc>)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	4413      	add	r3, r2
 8005d56:	8afa      	ldrh	r2, [r7, #22]
 8005d58:	4611      	mov	r1, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe fbf2 	bl	8004544 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005d60:	8afb      	ldrh	r3, [r7, #22]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d102      	bne.n	8005d6c <put_lfn+0x90>
 8005d66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005d6a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	2b0c      	cmp	r3, #12
 8005d76:	d9da      	bls.n	8005d2e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005d78:	8afb      	ldrh	r3, [r7, #22]
 8005d7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d006      	beq.n	8005d90 <put_lfn+0xb4>
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d103      	bne.n	8005d98 <put_lfn+0xbc>
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d96:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	79fa      	ldrb	r2, [r7, #7]
 8005d9c:	701a      	strb	r2, [r3, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	0800d270 	.word	0x0800d270

08005dac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	@ 0x30
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005dba:	220b      	movs	r2, #11
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f7fe fc8f 	bl	80046e2 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	d929      	bls.n	8005e1e <gen_numname+0x72>
		sr = seq;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005dce:	e020      	b.n	8005e12 <gen_numname+0x66>
			wc = *lfn++;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	1c9a      	adds	r2, r3, #2
 8005dd4:	607a      	str	r2, [r7, #4]
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005dda:	2300      	movs	r3, #0
 8005ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dde:	e015      	b.n	8005e0c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	005a      	lsls	r2, r3, #1
 8005de4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	4413      	add	r3, r2
 8005dec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005dee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <gen_numname+0x5a>
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	4b30      	ldr	r3, [pc, #192]	@ (8005ec4 <gen_numname+0x118>)
 8005e02:	4053      	eors	r3, r2
 8005e04:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e08:	3301      	adds	r3, #1
 8005e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0e:	2b0f      	cmp	r3, #15
 8005e10:	d9e6      	bls.n	8005de0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1da      	bne.n	8005dd0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005e1e:	2307      	movs	r3, #7
 8005e20:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	3330      	adds	r3, #48	@ 0x30
 8005e2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8005e32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e36:	2b39      	cmp	r3, #57	@ 0x39
 8005e38:	d904      	bls.n	8005e44 <gen_numname+0x98>
 8005e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e3e:	3307      	adds	r3, #7
 8005e40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8005e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e46:	1e5a      	subs	r2, r3, #1
 8005e48:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005e4a:	3330      	adds	r3, #48	@ 0x30
 8005e4c:	443b      	add	r3, r7
 8005e4e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005e52:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1df      	bne.n	8005e22 <gen_numname+0x76>
	ns[i] = '~';
 8005e62:	f107 0214 	add.w	r2, r7, #20
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	4413      	add	r3, r2
 8005e6a:	227e      	movs	r2, #126	@ 0x7e
 8005e6c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005e6e:	2300      	movs	r3, #0
 8005e70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e72:	e002      	b.n	8005e7a <gen_numname+0xce>
 8005e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e76:	3301      	adds	r3, #1
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d205      	bcs.n	8005e8e <gen_numname+0xe2>
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e86:	4413      	add	r3, r2
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d1f2      	bne.n	8005e74 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e90:	2b07      	cmp	r3, #7
 8005e92:	d807      	bhi.n	8005ea4 <gen_numname+0xf8>
 8005e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e96:	1c5a      	adds	r2, r3, #1
 8005e98:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005e9a:	3330      	adds	r3, #48	@ 0x30
 8005e9c:	443b      	add	r3, r7
 8005e9e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005ea2:	e000      	b.n	8005ea6 <gen_numname+0xfa>
 8005ea4:	2120      	movs	r1, #32
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	627a      	str	r2, [r7, #36]	@ 0x24
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	460a      	mov	r2, r1
 8005eb2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	2b07      	cmp	r3, #7
 8005eb8:	d9e9      	bls.n	8005e8e <gen_numname+0xe2>
}
 8005eba:	bf00      	nop
 8005ebc:	bf00      	nop
 8005ebe:	3730      	adds	r7, #48	@ 0x30
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	00011021 	.word	0x00011021

08005ec8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005ed4:	230b      	movs	r3, #11
 8005ed6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	0852      	lsrs	r2, r2, #1
 8005ede:	01db      	lsls	r3, r3, #7
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	1c59      	adds	r1, r3, #1
 8005ee8:	6079      	str	r1, [r7, #4]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	4413      	add	r3, r2
 8005eee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	60bb      	str	r3, [r7, #8]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1ed      	bne.n	8005ed8 <sum_sfn+0x10>
	return sum;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b087      	sub	sp, #28
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3301      	adds	r3, #1
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	015b      	lsls	r3, r3, #5
 8005f1c:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8005f1e:	2300      	movs	r3, #0
 8005f20:	827b      	strh	r3, [r7, #18]
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	e017      	b.n	8005f58 <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d103      	bne.n	8005f36 <xdir_sum+0x2c>
			i++;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	3301      	adds	r3, #1
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	e00d      	b.n	8005f52 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8005f36:	8a7b      	ldrh	r3, [r7, #18]
 8005f38:	03db      	lsls	r3, r3, #15
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	8a7b      	ldrh	r3, [r7, #18]
 8005f3e:	085b      	lsrs	r3, r3, #1
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	4413      	add	r3, r2
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	7812      	ldrb	r2, [r2, #0]
 8005f4e:	4413      	add	r3, r2
 8005f50:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	3301      	adds	r3, #1
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d3e3      	bcc.n	8005f28 <xdir_sum+0x1e>
		}
	}
	return sum;
 8005f60:	8a7b      	ldrh	r3, [r7, #18]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8005f7a:	e01f      	b.n	8005fbc <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8005f7c:	89bb      	ldrh	r3, [r7, #12]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f002 fc24 	bl	80087cc <ff_wtoupper>
 8005f84:	4603      	mov	r3, r0
 8005f86:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8005f88:	89fb      	ldrh	r3, [r7, #14]
 8005f8a:	03db      	lsls	r3, r3, #15
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	89fb      	ldrh	r3, [r7, #14]
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4413      	add	r3, r2
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	89bb      	ldrh	r3, [r7, #12]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	4413      	add	r3, r2
 8005fa0:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8005fa2:	89fb      	ldrh	r3, [r7, #14]
 8005fa4:	03db      	lsls	r3, r3, #15
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	89fb      	ldrh	r3, [r7, #14]
 8005faa:	085b      	lsrs	r3, r3, #1
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	4413      	add	r3, r2
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	89bb      	ldrh	r3, [r7, #12]
 8005fb4:	0a1b      	lsrs	r3, r3, #8
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	4413      	add	r3, r2
 8005fba:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	1c9a      	adds	r2, r3, #2
 8005fc0:	607a      	str	r2, [r7, #4]
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	81bb      	strh	r3, [r7, #12]
 8005fc6:	89bb      	ldrh	r3, [r7, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1d7      	bne.n	8005f7c <xname_sum+0xe>
	}
	return sum;
 8005fcc:	89fb      	ldrh	r3, [r7, #14]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7fe fda4 	bl	8004b40 <move_window>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <load_xdir+0x2e>
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	e09f      	b.n	8006146 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b85      	cmp	r3, #133	@ 0x85
 800600e:	d001      	beq.n	8006014 <load_xdir+0x3c>
 8006010:	2302      	movs	r3, #2
 8006012:	e098      	b.n	8006146 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006018:	2220      	movs	r2, #32
 800601a:	4619      	mov	r1, r3
 800601c:	6938      	ldr	r0, [r7, #16]
 800601e:	f7fe fb60 	bl	80046e2 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	3301      	adds	r3, #1
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	3301      	adds	r3, #1
 800602a:	015b      	lsls	r3, r3, #5
 800602c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b5f      	cmp	r3, #95	@ 0x5f
 8006032:	d903      	bls.n	800603c <load_xdir+0x64>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800603a:	d901      	bls.n	8006040 <load_xdir+0x68>
 800603c:	2302      	movs	r3, #2
 800603e:	e082      	b.n	8006146 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8006040:	2100      	movs	r1, #0
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff fc05 	bl	8005852 <dir_next>
 8006048:	4603      	mov	r3, r0
 800604a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <load_xdir+0x7e>
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	e077      	b.n	8006146 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605e:	4619      	mov	r1, r3
 8006060:	4610      	mov	r0, r2
 8006062:	f7fe fd6d 	bl	8004b40 <move_window>
 8006066:	4603      	mov	r3, r0
 8006068:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <load_xdir+0x9c>
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	e068      	b.n	8006146 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2bc0      	cmp	r3, #192	@ 0xc0
 800607c:	d001      	beq.n	8006082 <load_xdir+0xaa>
 800607e:	2302      	movs	r3, #2
 8006080:	e061      	b.n	8006146 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f103 0020 	add.w	r0, r3, #32
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800608c:	2220      	movs	r2, #32
 800608e:	4619      	mov	r1, r3
 8006090:	f7fe fb27 	bl	80046e2 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	3323      	adds	r3, #35	@ 0x23
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	332c      	adds	r3, #44	@ 0x2c
 800609c:	4a2c      	ldr	r2, [pc, #176]	@ (8006150 <load_xdir+0x178>)
 800609e:	fba2 2303 	umull	r2, r3, r2, r3
 80060a2:	08db      	lsrs	r3, r3, #3
 80060a4:	015b      	lsls	r3, r3, #5
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d201      	bcs.n	80060b0 <load_xdir+0xd8>
 80060ac:	2302      	movs	r3, #2
 80060ae:	e04a      	b.n	8006146 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 80060b0:	2340      	movs	r3, #64	@ 0x40
 80060b2:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 80060b4:	2100      	movs	r1, #0
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fbcb 	bl	8005852 <dir_next>
 80060bc:	4603      	mov	r3, r0
 80060be:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <load_xdir+0xf2>
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	e03d      	b.n	8006146 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f7fe fd33 	bl	8004b40 <move_window>
 80060da:	4603      	mov	r3, r0
 80060dc:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <load_xdir+0x110>
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
 80060e6:	e02e      	b.n	8006146 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	2bc1      	cmp	r3, #193	@ 0xc1
 80060f0:	d001      	beq.n	80060f6 <load_xdir+0x11e>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e027      	b.n	8006146 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80060fc:	d208      	bcs.n	8006110 <load_xdir+0x138>
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	18d0      	adds	r0, r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006108:	2220      	movs	r2, #32
 800610a:	4619      	mov	r1, r3
 800610c:	f7fe fae9 	bl	80046e2 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	3320      	adds	r3, #32
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	d3ca      	bcc.n	80060b4 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8006124:	d80e      	bhi.n	8006144 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8006126:	6938      	ldr	r0, [r7, #16]
 8006128:	f7ff feef 	bl	8005f0a <xdir_sum>
 800612c:	4603      	mov	r3, r0
 800612e:	461c      	mov	r4, r3
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	3302      	adds	r3, #2
 8006134:	4618      	mov	r0, r3
 8006136:	f7fe f8ef 	bl	8004318 <ld_word>
 800613a:	4603      	mov	r3, r0
 800613c:	429c      	cmp	r4, r3
 800613e:	d001      	beq.n	8006144 <load_xdir+0x16c>
 8006140:	2302      	movs	r3, #2
 8006142:	e000      	b.n	8006146 <load_xdir+0x16e>
	}
	return FR_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	371c      	adds	r7, #28
 800614a:	46bd      	mov	sp, r7
 800614c:	bd90      	pop	{r4, r7, pc}
 800614e:	bf00      	nop
 8006150:	88888889 	.word	0x88888889

08006154 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8006154:	b5b0      	push	{r4, r5, r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	6808      	ldr	r0, [r1, #0]
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6a08      	ldr	r0, [r1, #32]
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800616e:	6839      	ldr	r1, [r7, #0]
 8006170:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8006172:	b2c8      	uxtb	r0, r1
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800617c:	2000      	movs	r0, #0
 800617e:	460c      	mov	r4, r1
 8006180:	4605      	mov	r5, r0
 8006182:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 8006186:	2300      	movs	r3, #0
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fad2 	bl	8005746 <dir_sdi>
 80061a2:	4603      	mov	r3, r0
 80061a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d104      	bne.n	80061b6 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff ff13 	bl	8005fd8 <load_xdir>
 80061b2:	4603      	mov	r3, r0
 80061b4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bdb0      	pop	{r4, r5, r7, pc}

080061c0 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 80061c0:	b590      	push	{r4, r7, lr}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	1c9c      	adds	r4, r3, #2
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff fe98 	bl	8005f0a <xdir_sum>
 80061da:	4603      	mov	r3, r0
 80061dc:	4619      	mov	r1, r3
 80061de:	4620      	mov	r0, r4
 80061e0:	f7fe f9b0 	bl	8004544 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3301      	adds	r3, #1
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	3301      	adds	r3, #1
 80061ec:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff faa6 	bl	8005746 <dir_sdi>
 80061fa:	4603      	mov	r3, r0
 80061fc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80061fe:	e026      	b.n	800624e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006208:	4619      	mov	r1, r3
 800620a:	4610      	mov	r0, r2
 800620c:	f7fe fc98 	bl	8004b40 <move_window>
 8006210:	4603      	mov	r3, r0
 8006212:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d11d      	bne.n	8006256 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621e:	2220      	movs	r2, #32
 8006220:	68f9      	ldr	r1, [r7, #12]
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe fa5d 	bl	80046e2 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2201      	movs	r2, #1
 800622e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	3b01      	subs	r3, #1
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00e      	beq.n	800625a <store_xdir+0x9a>
		dirb += SZDIRE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3320      	adds	r3, #32
 8006240:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8006242:	2100      	movs	r1, #0
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff fb04 	bl	8005852 <dir_next>
 800624a:	4603      	mov	r3, r0
 800624c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800624e:	7dfb      	ldrb	r3, [r7, #23]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0d5      	beq.n	8006200 <store_xdir+0x40>
 8006254:	e002      	b.n	800625c <store_xdir+0x9c>
		if (res != FR_OK) break;
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <store_xdir+0x9c>
		if (--nent == 0) break;
 800625a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800625c:	7dfb      	ldrb	r3, [r7, #23]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <store_xdir+0xa8>
 8006262:	7dfb      	ldrb	r3, [r7, #23]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <store_xdir+0xac>
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	e000      	b.n	800626e <store_xdir+0xae>
 800626c:	2302      	movs	r3, #2
}
 800626e:	4618      	mov	r0, r3
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	bd90      	pop	{r4, r7, pc}

08006276 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8006276:	b590      	push	{r4, r7, lr}
 8006278:	b085      	sub	sp, #20
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8006280:	2240      	movs	r2, #64	@ 0x40
 8006282:	2100      	movs	r1, #0
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7fe fa4d 	bl	8004724 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2285      	movs	r2, #133	@ 0x85
 800628e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3320      	adds	r3, #32
 8006294:	22c0      	movs	r2, #192	@ 0xc0
 8006296:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8006298:	2300      	movs	r3, #0
 800629a:	72bb      	strb	r3, [r7, #10]
 800629c:	2301      	movs	r3, #1
 800629e:	72fb      	strb	r3, [r7, #11]
 80062a0:	2301      	movs	r3, #1
 80062a2:	813b      	strh	r3, [r7, #8]
 80062a4:	2340      	movs	r3, #64	@ 0x40
 80062a6:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	1c5a      	adds	r2, r3, #1
 80062ac:	60fa      	str	r2, [r7, #12]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	4413      	add	r3, r2
 80062b2:	22c1      	movs	r2, #193	@ 0xc1
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	60fa      	str	r2, [r7, #12]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	2200      	movs	r2, #0
 80062c2:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80062c4:	893b      	ldrh	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00b      	beq.n	80062e2 <create_xdir+0x6c>
 80062ca:	7abb      	ldrb	r3, [r7, #10]
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	813b      	strh	r3, [r7, #8]
 80062d6:	893b      	ldrh	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <create_xdir+0x6c>
 80062dc:	7abb      	ldrb	r3, [r7, #10]
 80062de:	3301      	adds	r3, #1
 80062e0:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4413      	add	r3, r2
 80062e8:	893a      	ldrh	r2, [r7, #8]
 80062ea:	4611      	mov	r1, r2
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fe f929 	bl	8004544 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3302      	adds	r3, #2
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e0      	bne.n	80062c4 <create_xdir+0x4e>
		nb++;
 8006302:	7afb      	ldrb	r3, [r7, #11]
 8006304:	3301      	adds	r3, #1
 8006306:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8006308:	7abb      	ldrb	r3, [r7, #10]
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	4413      	add	r3, r2
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1c8      	bne.n	80062a8 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3323      	adds	r3, #35	@ 0x23
 800631a:	7aba      	ldrb	r2, [r7, #10]
 800631c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3301      	adds	r3, #1
 8006322:	7afa      	ldrb	r2, [r7, #11]
 8006324:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800632c:	6838      	ldr	r0, [r7, #0]
 800632e:	f7ff fe1e 	bl	8005f6e <xname_sum>
 8006332:	4603      	mov	r3, r0
 8006334:	4619      	mov	r1, r3
 8006336:	4620      	mov	r0, r4
 8006338:	f7fe f904 	bl	8004544 <st_word>
}
 800633c:	bf00      	nop
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	bd90      	pop	{r4, r7, pc}

08006344 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800634e:	2304      	movs	r3, #4
 8006350:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8006358:	23ff      	movs	r3, #255	@ 0xff
 800635a:	757b      	strb	r3, [r7, #21]
 800635c:	23ff      	movs	r3, #255	@ 0xff
 800635e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006360:	e09f      	b.n	80064a2 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006366:	4619      	mov	r1, r3
 8006368:	6938      	ldr	r0, [r7, #16]
 800636a:	f7fe fbe9 	bl	8004b40 <move_window>
 800636e:	4603      	mov	r3, r0
 8006370:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f040 809a 	bne.w	80064ae <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006382:	7dbb      	ldrb	r3, [r7, #22]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006388:	2304      	movs	r3, #4
 800638a:	75fb      	strb	r3, [r7, #23]
 800638c:	e096      	b.n	80064bc <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b04      	cmp	r3, #4
 8006394:	d118      	bne.n	80063c8 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8006396:	7dbb      	ldrb	r3, [r7, #22]
 8006398:	2b85      	cmp	r3, #133	@ 0x85
 800639a:	d179      	bne.n	8006490 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff fe17 	bl	8005fd8 <load_xdir>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d17e      	bne.n	80064b2 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	3304      	adds	r3, #4
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	719a      	strb	r2, [r3, #6]
					}
					break;
 80063c6:	e074      	b.n	80064b2 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063cc:	330b      	adds	r3, #11
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80063d4:	73fb      	strb	r3, [r7, #15]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	7bfa      	ldrb	r2, [r7, #15]
 80063da:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80063dc:	7dbb      	ldrb	r3, [r7, #22]
 80063de:	2be5      	cmp	r3, #229	@ 0xe5
 80063e0:	d00e      	beq.n	8006400 <dir_read+0xbc>
 80063e2:	7dbb      	ldrb	r3, [r7, #22]
 80063e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80063e6:	d00b      	beq.n	8006400 <dir_read+0xbc>
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	f023 0320 	bic.w	r3, r3, #32
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	bf0c      	ite	eq
 80063f2:	2301      	moveq	r3, #1
 80063f4:	2300      	movne	r3, #0
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	461a      	mov	r2, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d002      	beq.n	8006406 <dir_read+0xc2>
				ord = 0xFF;
 8006400:	23ff      	movs	r3, #255	@ 0xff
 8006402:	757b      	strb	r3, [r7, #21]
 8006404:	e044      	b.n	8006490 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006406:	7bfb      	ldrb	r3, [r7, #15]
 8006408:	2b0f      	cmp	r3, #15
 800640a:	d12f      	bne.n	800646c <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800640c:	7dbb      	ldrb	r3, [r7, #22]
 800640e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00d      	beq.n	8006432 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641a:	7b5b      	ldrb	r3, [r3, #13]
 800641c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800641e:	7dbb      	ldrb	r3, [r7, #22]
 8006420:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006424:	75bb      	strb	r3, [r7, #22]
 8006426:	7dbb      	ldrb	r3, [r7, #22]
 8006428:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006432:	7dba      	ldrb	r2, [r7, #22]
 8006434:	7d7b      	ldrb	r3, [r7, #21]
 8006436:	429a      	cmp	r2, r3
 8006438:	d115      	bne.n	8006466 <dir_read+0x122>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643e:	330d      	adds	r3, #13
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	7d3a      	ldrb	r2, [r7, #20]
 8006444:	429a      	cmp	r2, r3
 8006446:	d10e      	bne.n	8006466 <dir_read+0x122>
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006450:	4619      	mov	r1, r3
 8006452:	4610      	mov	r0, r2
 8006454:	f7ff fbde 	bl	8005c14 <pick_lfn>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <dir_read+0x122>
 800645e:	7d7b      	ldrb	r3, [r7, #21]
 8006460:	3b01      	subs	r3, #1
 8006462:	b2db      	uxtb	r3, r3
 8006464:	e000      	b.n	8006468 <dir_read+0x124>
 8006466:	23ff      	movs	r3, #255	@ 0xff
 8006468:	757b      	strb	r3, [r7, #21]
 800646a:	e011      	b.n	8006490 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800646c:	7d7b      	ldrb	r3, [r7, #21]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <dir_read+0x142>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff fd26 	bl	8005ec8 <sum_sfn>
 800647c:	4603      	mov	r3, r0
 800647e:	461a      	mov	r2, r3
 8006480:	7d3b      	ldrb	r3, [r7, #20]
 8006482:	4293      	cmp	r3, r2
 8006484:	d017      	beq.n	80064b6 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f04f 32ff 	mov.w	r2, #4294967295
 800648c:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800648e:	e012      	b.n	80064b6 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006490:	2100      	movs	r1, #0
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff f9dd 	bl	8005852 <dir_next>
 8006498:	4603      	mov	r3, r0
 800649a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800649c:	7dfb      	ldrb	r3, [r7, #23]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <dir_read+0x176>
	while (dp->sect) {
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f47f af5b 	bne.w	8006362 <dir_read+0x1e>
 80064ac:	e006      	b.n	80064bc <dir_read+0x178>
		if (res != FR_OK) break;
 80064ae:	bf00      	nop
 80064b0:	e004      	b.n	80064bc <dir_read+0x178>
					break;
 80064b2:	bf00      	nop
 80064b4:	e002      	b.n	80064bc <dir_read+0x178>
					break;
 80064b6:	bf00      	nop
 80064b8:	e000      	b.n	80064bc <dir_read+0x178>
		if (res != FR_OK) break;
 80064ba:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <dir_read+0x184>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80064d2:	b590      	push	{r4, r7, lr}
 80064d4:	b089      	sub	sp, #36	@ 0x24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80064e0:	2100      	movs	r1, #0
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff f92f 	bl	8005746 <dir_sdi>
 80064e8:	4603      	mov	r3, r0
 80064ea:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80064ec:	7ffb      	ldrb	r3, [r7, #31]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <dir_find+0x24>
 80064f2:	7ffb      	ldrb	r3, [r7, #31]
 80064f4:	e113      	b.n	800671e <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d165      	bne.n	80065ca <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff fd33 	bl	8005f6e <xname_sum>
 8006508:	4603      	mov	r3, r0
 800650a:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800650c:	e050      	b.n	80065b0 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	3324      	adds	r3, #36	@ 0x24
 8006514:	4618      	mov	r0, r3
 8006516:	f7fd feff 	bl	8004318 <ld_word>
 800651a:	4603      	mov	r3, r0
 800651c:	461a      	mov	r2, r3
 800651e:	893b      	ldrh	r3, [r7, #8]
 8006520:	4293      	cmp	r3, r2
 8006522:	d144      	bne.n	80065ae <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800652c:	76fb      	strb	r3, [r7, #27]
 800652e:	2340      	movs	r3, #64	@ 0x40
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	2300      	movs	r3, #0
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	e029      	b.n	800658c <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	2b00      	cmp	r3, #0
 8006540:	d102      	bne.n	8006548 <dir_find+0x76>
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	3302      	adds	r3, #2
 8006546:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	691a      	ldr	r2, [r3, #16]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	4413      	add	r3, r2
 8006550:	4618      	mov	r0, r3
 8006552:	f7fd fee1 	bl	8004318 <ld_word>
 8006556:	4603      	mov	r3, r0
 8006558:	4618      	mov	r0, r3
 800655a:	f002 f937 	bl	80087cc <ff_wtoupper>
 800655e:	4603      	mov	r3, r0
 8006560:	461c      	mov	r4, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	4413      	add	r3, r2
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f002 f92c 	bl	80087cc <ff_wtoupper>
 8006574:	4603      	mov	r3, r0
 8006576:	429c      	cmp	r4, r3
 8006578:	d10c      	bne.n	8006594 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800657a:	7efb      	ldrb	r3, [r7, #27]
 800657c:	3b01      	subs	r3, #1
 800657e:	76fb      	strb	r3, [r7, #27]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	3302      	adds	r3, #2
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	3301      	adds	r3, #1
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	7efb      	ldrb	r3, [r7, #27]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1d2      	bne.n	8006538 <dir_find+0x66>
 8006592:	e000      	b.n	8006596 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8006594:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8006596:	7efb      	ldrb	r3, [r7, #27]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d109      	bne.n	80065b0 <dir_find+0xde>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	4413      	add	r3, r2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00b      	beq.n	80065c4 <dir_find+0xf2>
 80065ac:	e000      	b.n	80065b0 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80065ae:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80065b0:	2100      	movs	r1, #0
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fec6 	bl	8006344 <dir_read>
 80065b8:	4603      	mov	r3, r0
 80065ba:	77fb      	strb	r3, [r7, #31]
 80065bc:	7ffb      	ldrb	r3, [r7, #31]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0a5      	beq.n	800650e <dir_find+0x3c>
 80065c2:	e000      	b.n	80065c6 <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80065c4:	bf00      	nop
		}
		return res;
 80065c6:	7ffb      	ldrb	r3, [r7, #31]
 80065c8:	e0a9      	b.n	800671e <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80065ca:	23ff      	movs	r3, #255	@ 0xff
 80065cc:	773b      	strb	r3, [r7, #28]
 80065ce:	7f3b      	ldrb	r3, [r7, #28]
 80065d0:	777b      	strb	r3, [r7, #29]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f04f 32ff 	mov.w	r2, #4294967295
 80065d8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065de:	4619      	mov	r1, r3
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f7fe faad 	bl	8004b40 <move_window>
 80065e6:	4603      	mov	r3, r0
 80065e8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 80065ea:	7ffb      	ldrb	r3, [r7, #31]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 8090 	bne.w	8006712 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80065fa:	7fbb      	ldrb	r3, [r7, #30]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d102      	bne.n	8006606 <dir_find+0x134>
 8006600:	2304      	movs	r3, #4
 8006602:	77fb      	strb	r3, [r7, #31]
 8006604:	e08a      	b.n	800671c <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800660a:	330b      	adds	r3, #11
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006612:	72fb      	strb	r3, [r7, #11]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	7afa      	ldrb	r2, [r7, #11]
 8006618:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800661a:	7fbb      	ldrb	r3, [r7, #30]
 800661c:	2be5      	cmp	r3, #229	@ 0xe5
 800661e:	d007      	beq.n	8006630 <dir_find+0x15e>
 8006620:	7afb      	ldrb	r3, [r7, #11]
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d009      	beq.n	800663e <dir_find+0x16c>
 800662a:	7afb      	ldrb	r3, [r7, #11]
 800662c:	2b0f      	cmp	r3, #15
 800662e:	d006      	beq.n	800663e <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006630:	23ff      	movs	r3, #255	@ 0xff
 8006632:	777b      	strb	r3, [r7, #29]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f04f 32ff 	mov.w	r2, #4294967295
 800663a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800663c:	e05e      	b.n	80066fc <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800663e:	7afb      	ldrb	r3, [r7, #11]
 8006640:	2b0f      	cmp	r3, #15
 8006642:	d136      	bne.n	80066b2 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800664a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d154      	bne.n	80066fc <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006652:	7fbb      	ldrb	r3, [r7, #30]
 8006654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00d      	beq.n	8006678 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006660:	7b5b      	ldrb	r3, [r3, #13]
 8006662:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006664:	7fbb      	ldrb	r3, [r7, #30]
 8006666:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800666a:	77bb      	strb	r3, [r7, #30]
 800666c:	7fbb      	ldrb	r3, [r7, #30]
 800666e:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006678:	7fba      	ldrb	r2, [r7, #30]
 800667a:	7f7b      	ldrb	r3, [r7, #29]
 800667c:	429a      	cmp	r2, r3
 800667e:	d115      	bne.n	80066ac <dir_find+0x1da>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006684:	330d      	adds	r3, #13
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	7f3a      	ldrb	r2, [r7, #28]
 800668a:	429a      	cmp	r2, r3
 800668c:	d10e      	bne.n	80066ac <dir_find+0x1da>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f7ff fa4b 	bl	8005b34 <cmp_lfn>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <dir_find+0x1da>
 80066a4:	7f7b      	ldrb	r3, [r7, #29]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	e000      	b.n	80066ae <dir_find+0x1dc>
 80066ac:	23ff      	movs	r3, #255	@ 0xff
 80066ae:	777b      	strb	r3, [r7, #29]
 80066b0:	e024      	b.n	80066fc <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80066b2:	7f7b      	ldrb	r3, [r7, #29]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d109      	bne.n	80066cc <dir_find+0x1fa>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fc03 	bl	8005ec8 <sum_sfn>
 80066c2:	4603      	mov	r3, r0
 80066c4:	461a      	mov	r2, r3
 80066c6:	7f3b      	ldrb	r3, [r7, #28]
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d024      	beq.n	8006716 <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10a      	bne.n	80066f0 <dir_find+0x21e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3340      	adds	r3, #64	@ 0x40
 80066e2:	220b      	movs	r2, #11
 80066e4:	4619      	mov	r1, r3
 80066e6:	f7fe f838 	bl	800475a <mem_cmp>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d014      	beq.n	800671a <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80066f0:	23ff      	movs	r3, #255	@ 0xff
 80066f2:	777b      	strb	r3, [r7, #29]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f04f 32ff 	mov.w	r2, #4294967295
 80066fa:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80066fc:	2100      	movs	r1, #0
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff f8a7 	bl	8005852 <dir_next>
 8006704:	4603      	mov	r3, r0
 8006706:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8006708:	7ffb      	ldrb	r3, [r7, #31]
 800670a:	2b00      	cmp	r3, #0
 800670c:	f43f af65 	beq.w	80065da <dir_find+0x108>
 8006710:	e004      	b.n	800671c <dir_find+0x24a>
		if (res != FR_OK) break;
 8006712:	bf00      	nop
 8006714:	e002      	b.n	800671c <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006716:	bf00      	nop
 8006718:	e000      	b.n	800671c <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800671a:	bf00      	nop

	return res;
 800671c:	7ffb      	ldrb	r3, [r7, #31]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3724      	adds	r7, #36	@ 0x24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd90      	pop	{r4, r7, pc}
	...

08006728 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006728:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800672c:	b0a0      	sub	sp, #128	@ 0x80
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800673e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <dir_register+0x22>
 8006746:	2306      	movs	r3, #6
 8006748:	e18e      	b.n	8006a68 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800674a:	2300      	movs	r3, #0
 800674c:	677b      	str	r3, [r7, #116]	@ 0x74
 800674e:	e002      	b.n	8006756 <dir_register+0x2e>
 8006750:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006752:	3301      	adds	r3, #1
 8006754:	677b      	str	r3, [r7, #116]	@ 0x74
 8006756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f4      	bne.n	8006750 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	2b04      	cmp	r3, #4
 800676c:	f040 809f 	bne.w	80068ae <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8006770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006772:	330e      	adds	r3, #14
 8006774:	4aa2      	ldr	r2, [pc, #648]	@ (8006a00 <dir_register+0x2d8>)
 8006776:	fba2 2303 	umull	r2, r3, r2, r3
 800677a:	08db      	lsrs	r3, r3, #3
 800677c:	3302      	adds	r3, #2
 800677e:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8006780:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff f93a 	bl	80059fc <dir_alloc>
 8006788:	4603      	mov	r3, r0
 800678a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800678e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <dir_register+0x74>
 8006796:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800679a:	e165      	b.n	8006a68 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067a2:	3b01      	subs	r3, #1
 80067a4:	015b      	lsls	r3, r3, #5
 80067a6:	1ad2      	subs	r2, r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d072      	beq.n	800689a <dir_register+0x172>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	79db      	ldrb	r3, [r3, #7]
 80067b8:	f003 0304 	and.w	r3, r3, #4
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d06c      	beq.n	800689a <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80067c6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80067c8:	8949      	ldrh	r1, [r1, #10]
 80067ca:	0249      	lsls	r1, r1, #9
 80067cc:	2000      	movs	r0, #0
 80067ce:	460c      	mov	r4, r1
 80067d0:	4605      	mov	r5, r0
 80067d2:	eb12 0804 	adds.w	r8, r2, r4
 80067d6:	eb43 0905 	adc.w	r9, r3, r5
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fd56 	bl	8005294 <fill_first_frag>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80067ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <dir_register+0xd4>
 80067f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80067fa:	e135      	b.n	8006a68 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006802:	f04f 32ff 	mov.w	r2, #4294967295
 8006806:	4619      	mov	r1, r3
 8006808:	f7fe fd73 	bl	80052f2 <fill_last_frag>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8006812:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <dir_register+0xf8>
 800681a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800681e:	e123      	b.n	8006a68 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	f107 0308 	add.w	r3, r7, #8
 8006826:	4611      	mov	r1, r2
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff fc93 	bl	8006154 <load_obj_dir>
 800682e:	4603      	mov	r3, r0
 8006830:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8006834:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <dir_register+0x11a>
 800683c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006840:	e112      	b.n	8006a68 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8006842:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006850:	4608      	mov	r0, r1
 8006852:	f7fd febe 	bl	80045d2 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8006856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006864:	4608      	mov	r0, r1
 8006866:	f7fd feb4 	bl	80045d2 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	79da      	ldrb	r2, [r3, #7]
 800686e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	3321      	adds	r3, #33	@ 0x21
 8006874:	f042 0201 	orr.w	r2, r2, #1
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800687c:	f107 0308 	add.w	r3, r7, #8
 8006880:	4618      	mov	r0, r3
 8006882:	f7ff fc9d 	bl	80061c0 <store_xdir>
 8006886:	4603      	mov	r3, r0
 8006888:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800688c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <dir_register+0x172>
 8006894:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006898:	e0e6      	b.n	8006a68 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800689a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800689c:	691a      	ldr	r2, [r3, #16]
 800689e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	4619      	mov	r1, r3
 80068a4:	4610      	mov	r0, r2
 80068a6:	f7ff fce6 	bl	8006276 <create_xdir>
		return FR_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	e0dc      	b.n	8006a68 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80068b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80068b8:	220c      	movs	r2, #12
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fd ff11 	bl	80046e2 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80068c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d033      	beq.n	8006934 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2240      	movs	r2, #64	@ 0x40
 80068d0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 80068d4:	2301      	movs	r3, #1
 80068d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068d8:	e016      	b.n	8006908 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80068e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80068e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068ea:	f7ff fa5f 	bl	8005dac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff fdef 	bl	80064d2 <dir_find>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 80068fa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 8006902:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006904:	3301      	adds	r3, #1
 8006906:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006908:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800690a:	2b63      	cmp	r3, #99	@ 0x63
 800690c:	d9e5      	bls.n	80068da <dir_register+0x1b2>
 800690e:	e000      	b.n	8006912 <dir_register+0x1ea>
			if (res != FR_OK) break;
 8006910:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006912:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006914:	2b64      	cmp	r3, #100	@ 0x64
 8006916:	d101      	bne.n	800691c <dir_register+0x1f4>
 8006918:	2307      	movs	r3, #7
 800691a:	e0a5      	b.n	8006a68 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800691c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006920:	2b04      	cmp	r3, #4
 8006922:	d002      	beq.n	800692a <dir_register+0x202>
 8006924:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006928:	e09e      	b.n	8006a68 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800692a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006934:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d007      	beq.n	8006950 <dir_register+0x228>
 8006940:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006942:	330c      	adds	r3, #12
 8006944:	4a2f      	ldr	r2, [pc, #188]	@ (8006a04 <dir_register+0x2dc>)
 8006946:	fba2 2303 	umull	r2, r3, r2, r3
 800694a:	089b      	lsrs	r3, r3, #2
 800694c:	3301      	adds	r3, #1
 800694e:	e000      	b.n	8006952 <dir_register+0x22a>
 8006950:	2301      	movs	r3, #1
 8006952:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006954:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff f850 	bl	80059fc <dir_alloc>
 800695c:	4603      	mov	r3, r0
 800695e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006962:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006966:	2b00      	cmp	r3, #0
 8006968:	d14f      	bne.n	8006a0a <dir_register+0x2e2>
 800696a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800696c:	3b01      	subs	r3, #1
 800696e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006970:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006972:	2b00      	cmp	r3, #0
 8006974:	d049      	beq.n	8006a0a <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800697a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800697c:	015b      	lsls	r3, r3, #5
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fe fedf 	bl	8005746 <dir_sdi>
 8006988:	4603      	mov	r3, r0
 800698a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800698e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006992:	2b00      	cmp	r3, #0
 8006994:	d139      	bne.n	8006a0a <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3340      	adds	r3, #64	@ 0x40
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fa94 	bl	8005ec8 <sum_sfn>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069aa:	4619      	mov	r1, r3
 80069ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80069ae:	f7fe f8c7 	bl	8004b40 <move_window>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 80069b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d123      	bne.n	8006a08 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80069c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069c2:	68d8      	ldr	r0, [r3, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80069c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80069d0:	f7ff f984 	bl	8005cdc <put_lfn>
				fs->wflag = 1;
 80069d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069d6:	2201      	movs	r2, #1
 80069d8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80069da:	2100      	movs	r1, #0
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7fe ff38 	bl	8005852 <dir_next>
 80069e2:	4603      	mov	r3, r0
 80069e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 80069e8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10c      	bne.n	8006a0a <dir_register+0x2e2>
 80069f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069f2:	3b01      	subs	r3, #1
 80069f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80069f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1d4      	bne.n	80069a6 <dir_register+0x27e>
 80069fc:	e005      	b.n	8006a0a <dir_register+0x2e2>
 80069fe:	bf00      	nop
 8006a00:	88888889 	.word	0x88888889
 8006a04:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8006a08:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006a0a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d128      	bne.n	8006a64 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a16:	4619      	mov	r1, r3
 8006a18:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a1a:	f7fe f891 	bl	8004b40 <move_window>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8006a24:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d11b      	bne.n	8006a64 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a30:	2220      	movs	r2, #32
 8006a32:	2100      	movs	r1, #0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7fd fe75 	bl	8004724 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3340      	adds	r3, #64	@ 0x40
 8006a42:	220b      	movs	r2, #11
 8006a44:	4619      	mov	r1, r3
 8006a46:	f7fd fe4c 	bl	80046e2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a54:	330c      	adds	r3, #12
 8006a56:	f002 0218 	and.w	r2, r2, #24
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a60:	2201      	movs	r2, #1
 8006a62:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006a64:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3780      	adds	r7, #128	@ 0x80
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a72:	bf00      	nop

08006a74 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08a      	sub	sp, #40	@ 0x28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	61ba      	str	r2, [r7, #24]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006aa2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006aa4:	2b1f      	cmp	r3, #31
 8006aa6:	d940      	bls.n	8006b2a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006aa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006aaa:	2b2f      	cmp	r3, #47	@ 0x2f
 8006aac:	d006      	beq.n	8006abc <create_name+0x48>
 8006aae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ab0:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ab2:	d110      	bne.n	8006ad6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006ab4:	e002      	b.n	8006abc <create_name+0x48>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	61bb      	str	r3, [r7, #24]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b2f      	cmp	r3, #47	@ 0x2f
 8006ac6:	d0f6      	beq.n	8006ab6 <create_name+0x42>
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	4413      	add	r3, r2
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b5c      	cmp	r3, #92	@ 0x5c
 8006ad2:	d0f0      	beq.n	8006ab6 <create_name+0x42>
			break;
 8006ad4:	e02a      	b.n	8006b2c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2bfe      	cmp	r3, #254	@ 0xfe
 8006ada:	d901      	bls.n	8006ae0 <create_name+0x6c>
 8006adc:	2306      	movs	r3, #6
 8006ade:	e17d      	b.n	8006ddc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006ae0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006ae6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ae8:	2101      	movs	r1, #1
 8006aea:	4618      	mov	r0, r3
 8006aec:	f001 fe32 	bl	8008754 <ff_convert>
 8006af0:	4603      	mov	r3, r0
 8006af2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006af4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <create_name+0x8a>
 8006afa:	2306      	movs	r3, #6
 8006afc:	e16e      	b.n	8006ddc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006afe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b00:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b02:	d809      	bhi.n	8006b18 <create_name+0xa4>
 8006b04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b06:	4619      	mov	r1, r3
 8006b08:	488d      	ldr	r0, [pc, #564]	@ (8006d40 <create_name+0x2cc>)
 8006b0a:	f7fd fe4d 	bl	80047a8 <chk_chr>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <create_name+0xa4>
 8006b14:	2306      	movs	r3, #6
 8006b16:	e161      	b.n	8006ddc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	617a      	str	r2, [r7, #20]
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006b26:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006b28:	e7b4      	b.n	8006a94 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006b2a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	441a      	add	r2, r3
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006b36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b38:	2b1f      	cmp	r3, #31
 8006b3a:	d801      	bhi.n	8006b40 <create_name+0xcc>
 8006b3c:	2304      	movs	r3, #4
 8006b3e:	e000      	b.n	8006b42 <create_name+0xce>
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006b46:	e011      	b.n	8006b6c <create_name+0xf8>
		w = lfn[di - 1];
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8006b4e:	4413      	add	r3, r2
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8006b5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d002      	beq.n	8006b66 <create_name+0xf2>
 8006b60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b62:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b64:	d106      	bne.n	8006b74 <create_name+0x100>
		di--;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1ea      	bne.n	8006b48 <create_name+0xd4>
 8006b72:	e000      	b.n	8006b76 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006b74:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	2200      	movs	r2, #0
 8006b80:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <create_name+0x118>
 8006b88:	2306      	movs	r3, #6
 8006b8a:	e127      	b.n	8006ddc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3340      	adds	r3, #64	@ 0x40
 8006b90:	220b      	movs	r2, #11
 8006b92:	2120      	movs	r1, #32
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fd fdc5 	bl	8004724 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	e002      	b.n	8006ba6 <create_name+0x132>
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	2b20      	cmp	r3, #32
 8006bb2:	d0f5      	beq.n	8006ba0 <create_name+0x12c>
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bc0:	d0ee      	beq.n	8006ba0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d009      	beq.n	8006bdc <create_name+0x168>
 8006bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bcc:	f043 0303 	orr.w	r3, r3, #3
 8006bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006bd4:	e002      	b.n	8006bdc <create_name+0x168>
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	3b01      	subs	r3, #1
 8006bda:	617b      	str	r3, [r7, #20]
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d009      	beq.n	8006bf6 <create_name+0x182>
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8006be8:	4413      	add	r3, r2
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bf4:	d1ef      	bne.n	8006bd6 <create_name+0x162>

	i = b = 0; ni = 8;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	623b      	str	r3, [r7, #32]
 8006c00:	2308      	movs	r3, #8
 8006c02:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	61ba      	str	r2, [r7, #24]
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006c14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8090 	beq.w	8006d3c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006c1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d006      	beq.n	8006c30 <create_name+0x1bc>
 8006c22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c24:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c26:	d10a      	bne.n	8006c3e <create_name+0x1ca>
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d006      	beq.n	8006c3e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006c30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c34:	f043 0303 	orr.w	r3, r3, #3
 8006c38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c3c:	e07d      	b.n	8006d3a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006c3e:	6a3a      	ldr	r2, [r7, #32]
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d203      	bcs.n	8006c4e <create_name+0x1da>
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d123      	bne.n	8006c96 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	2b0b      	cmp	r3, #11
 8006c52:	d106      	bne.n	8006c62 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006c54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c58:	f043 0303 	orr.w	r3, r3, #3
 8006c5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c60:	e075      	b.n	8006d4e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d005      	beq.n	8006c76 <create_name+0x202>
 8006c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c6e:	f043 0303 	orr.w	r3, r3, #3
 8006c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d866      	bhi.n	8006d4c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	61bb      	str	r3, [r7, #24]
 8006c82:	2308      	movs	r3, #8
 8006c84:	623b      	str	r3, [r7, #32]
 8006c86:	230b      	movs	r3, #11
 8006c88:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006c8a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006c94:	e051      	b.n	8006d3a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006c96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c98:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c9a:	d914      	bls.n	8006cc6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006c9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 fd57 	bl	8008754 <ff_convert>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006caa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d004      	beq.n	8006cba <create_name+0x246>
 8006cb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cb2:	3b80      	subs	r3, #128	@ 0x80
 8006cb4:	4a23      	ldr	r2, [pc, #140]	@ (8006d44 <create_name+0x2d0>)
 8006cb6:	5cd3      	ldrb	r3, [r2, r3]
 8006cb8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006cba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cbe:	f043 0302 	orr.w	r3, r3, #2
 8006cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006cc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <create_name+0x268>
 8006ccc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cce:	4619      	mov	r1, r3
 8006cd0:	481d      	ldr	r0, [pc, #116]	@ (8006d48 <create_name+0x2d4>)
 8006cd2:	f7fd fd69 	bl	80047a8 <chk_chr>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006cdc:	235f      	movs	r3, #95	@ 0x5f
 8006cde:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ce4:	f043 0303 	orr.w	r3, r3, #3
 8006ce8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006cec:	e01b      	b.n	8006d26 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006cee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cf0:	2b40      	cmp	r3, #64	@ 0x40
 8006cf2:	d909      	bls.n	8006d08 <create_name+0x294>
 8006cf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cf6:	2b5a      	cmp	r3, #90	@ 0x5a
 8006cf8:	d806      	bhi.n	8006d08 <create_name+0x294>
					b |= 2;
 8006cfa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006cfe:	f043 0302 	orr.w	r3, r3, #2
 8006d02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006d06:	e00e      	b.n	8006d26 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006d08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d0a:	2b60      	cmp	r3, #96	@ 0x60
 8006d0c:	d90b      	bls.n	8006d26 <create_name+0x2b2>
 8006d0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d10:	2b7a      	cmp	r3, #122	@ 0x7a
 8006d12:	d808      	bhi.n	8006d26 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006d14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d18:	f043 0301 	orr.w	r3, r3, #1
 8006d1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006d20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d22:	3b20      	subs	r3, #32
 8006d24:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	623a      	str	r2, [r7, #32]
 8006d2c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d2e:	b2d1      	uxtb	r1, r2
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	4413      	add	r3, r2
 8006d34:	460a      	mov	r2, r1
 8006d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 8006d3a:	e763      	b.n	8006c04 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006d3c:	bf00      	nop
 8006d3e:	e006      	b.n	8006d4e <create_name+0x2da>
 8006d40:	0800d18c 	.word	0x0800d18c
 8006d44:	0800d1f0 	.word	0x0800d1f0
 8006d48:	0800d198 	.word	0x0800d198
			if (si > di) break;			/* No extension */
 8006d4c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d54:	2be5      	cmp	r3, #229	@ 0xe5
 8006d56:	d103      	bne.n	8006d60 <create_name+0x2ec>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2205      	movs	r2, #5
 8006d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	d104      	bne.n	8006d70 <create_name+0x2fc>
 8006d66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006d70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d74:	f003 030c 	and.w	r3, r3, #12
 8006d78:	2b0c      	cmp	r3, #12
 8006d7a:	d005      	beq.n	8006d88 <create_name+0x314>
 8006d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d80:	f003 0303 	and.w	r3, r3, #3
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d105      	bne.n	8006d94 <create_name+0x320>
 8006d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d8c:	f043 0302 	orr.w	r3, r3, #2
 8006d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006d94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d117      	bne.n	8006dd0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006da0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006da4:	f003 0303 	and.w	r3, r3, #3
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d105      	bne.n	8006db8 <create_name+0x344>
 8006dac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006db0:	f043 0310 	orr.w	r3, r3, #16
 8006db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006db8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006dbc:	f003 030c 	and.w	r3, r3, #12
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d105      	bne.n	8006dd0 <create_name+0x35c>
 8006dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006dc8:	f043 0308 	orr.w	r3, r3, #8
 8006dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006dd6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 8006dda:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3728      	adds	r7, #40	@ 0x28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006df8:	e002      	b.n	8006e00 <follow_path+0x1c>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	603b      	str	r3, [r7, #0]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e06:	d0f8      	beq.n	8006dfa <follow_path+0x16>
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b5c      	cmp	r3, #92	@ 0x5c
 8006e0e:	d0f4      	beq.n	8006dfa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2200      	movs	r2, #0
 8006e14:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b1f      	cmp	r3, #31
 8006e22:	d80a      	bhi.n	8006e3a <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2280      	movs	r2, #128	@ 0x80
 8006e28:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fe fc89 	bl	8005746 <dir_sdi>
 8006e34:	4603      	mov	r3, r0
 8006e36:	75fb      	strb	r3, [r7, #23]
 8006e38:	e078      	b.n	8006f2c <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff fe18 	bl	8006a74 <create_name>
 8006e44:	4603      	mov	r3, r0
 8006e46:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d169      	bne.n	8006f22 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7ff fb3f 	bl	80064d2 <dir_find>
 8006e54:	4603      	mov	r3, r0
 8006e56:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006e5e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006e66:	7dfb      	ldrb	r3, [r7, #23]
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d15c      	bne.n	8006f26 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d157      	bne.n	8006f26 <follow_path+0x142>
 8006e76:	2305      	movs	r3, #5
 8006e78:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006e7a:	e054      	b.n	8006f26 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
 8006e7e:	f003 0304 	and.w	r3, r3, #4
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d151      	bne.n	8006f2a <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	799b      	ldrb	r3, [r3, #6]
 8006e8a:	f003 0310 	and.w	r3, r3, #16
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8006e92:	2305      	movs	r3, #5
 8006e94:	75fb      	strb	r3, [r7, #23]
 8006e96:	e049      	b.n	8006f2c <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d130      	bne.n	8006f02 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	79d2      	ldrb	r2, [r2, #7]
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	3334      	adds	r3, #52	@ 0x34
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fd fa3b 	bl	8004348 <ld_dword>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	3321      	adds	r3, #33	@ 0x21
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	3338      	adds	r3, #56	@ 0x38
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7fd fa4c 	bl	800438e <ld_qword>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	6939      	ldr	r1, [r7, #16]
 8006efc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006f00:	e79b      	b.n	8006e3a <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f10:	4413      	add	r3, r2
 8006f12:	4619      	mov	r1, r3
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f7fe fdcd 	bl	8005ab4 <ld_clust>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006f20:	e78b      	b.n	8006e3a <follow_path+0x56>
			if (res != FR_OK) break;
 8006f22:	bf00      	nop
 8006f24:	e002      	b.n	8006f2c <follow_path+0x148>
				break;
 8006f26:	bf00      	nop
 8006f28:	e000      	b.n	8006f2c <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006f2a:	bf00      	nop
			}
		}
	}

	return res;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b087      	sub	sp, #28
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f42:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d031      	beq.n	8006fb0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	e002      	b.n	8006f5a <get_ldnumber+0x24>
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	3301      	adds	r3, #1
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b1f      	cmp	r3, #31
 8006f60:	d903      	bls.n	8006f6a <get_ldnumber+0x34>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b3a      	cmp	r3, #58	@ 0x3a
 8006f68:	d1f4      	bne.n	8006f54 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006f70:	d11c      	bne.n	8006fac <get_ldnumber+0x76>
			tp = *path;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	60fa      	str	r2, [r7, #12]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	3b30      	subs	r3, #48	@ 0x30
 8006f82:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b09      	cmp	r3, #9
 8006f88:	d80e      	bhi.n	8006fa8 <get_ldnumber+0x72>
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d10a      	bne.n	8006fa8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d107      	bne.n	8006fa8 <get_ldnumber+0x72>
					vol = (int)i;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	e002      	b.n	8006fb2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006fac:	2300      	movs	r3, #0
 8006fae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006fb0:	693b      	ldr	r3, [r7, #16]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
	...

08006fc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	70da      	strb	r2, [r3, #3]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fd fdb0 	bl	8004b40 <move_window>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <check_fs+0x2a>
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	e044      	b.n	8007074 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3338      	adds	r3, #56	@ 0x38
 8006fee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fd f990 	bl	8004318 <ld_word>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007000:	429a      	cmp	r2, r3
 8007002:	d001      	beq.n	8007008 <check_fs+0x48>
 8007004:	2303      	movs	r3, #3
 8007006:	e035      	b.n	8007074 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800700e:	2be9      	cmp	r3, #233	@ 0xe9
 8007010:	d009      	beq.n	8007026 <check_fs+0x66>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007018:	2beb      	cmp	r3, #235	@ 0xeb
 800701a:	d11e      	bne.n	800705a <check_fs+0x9a>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007022:	2b90      	cmp	r3, #144	@ 0x90
 8007024:	d119      	bne.n	800705a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3338      	adds	r3, #56	@ 0x38
 800702a:	3336      	adds	r3, #54	@ 0x36
 800702c:	4618      	mov	r0, r3
 800702e:	f7fd f98b 	bl	8004348 <ld_dword>
 8007032:	4603      	mov	r3, r0
 8007034:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007038:	4a10      	ldr	r2, [pc, #64]	@ (800707c <check_fs+0xbc>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d101      	bne.n	8007042 <check_fs+0x82>
 800703e:	2300      	movs	r3, #0
 8007040:	e018      	b.n	8007074 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	3338      	adds	r3, #56	@ 0x38
 8007046:	3352      	adds	r3, #82	@ 0x52
 8007048:	4618      	mov	r0, r3
 800704a:	f7fd f97d 	bl	8004348 <ld_dword>
 800704e:	4603      	mov	r3, r0
 8007050:	4a0b      	ldr	r2, [pc, #44]	@ (8007080 <check_fs+0xc0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d101      	bne.n	800705a <check_fs+0x9a>
 8007056:	2300      	movs	r3, #0
 8007058:	e00c      	b.n	8007074 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3338      	adds	r3, #56	@ 0x38
 800705e:	220b      	movs	r2, #11
 8007060:	4908      	ldr	r1, [pc, #32]	@ (8007084 <check_fs+0xc4>)
 8007062:	4618      	mov	r0, r3
 8007064:	f7fd fb79 	bl	800475a <mem_cmp>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <check_fs+0xb2>
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <check_fs+0xb4>
#endif
	return 2;
 8007072:	2302      	movs	r3, #2
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	00544146 	.word	0x00544146
 8007080:	33544146 	.word	0x33544146
 8007084:	0800d1a0 	.word	0x0800d1a0

08007088 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800708c:	b09c      	sub	sp, #112	@ 0x70
 800708e:	af00      	add	r7, sp, #0
 8007090:	61f8      	str	r0, [r7, #28]
 8007092:	61b9      	str	r1, [r7, #24]
 8007094:	4613      	mov	r3, r2
 8007096:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800709e:	69f8      	ldr	r0, [r7, #28]
 80070a0:	f7ff ff49 	bl	8006f36 <get_ldnumber>
 80070a4:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 80070a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	da01      	bge.n	80070b0 <find_volume+0x28>
 80070ac:	230b      	movs	r3, #11
 80070ae:	e337      	b.n	8007720 <find_volume+0x698>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80070b0:	4a99      	ldr	r2, [pc, #612]	@ (8007318 <find_volume+0x290>)
 80070b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b8:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80070ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <find_volume+0x3c>
 80070c0:	230c      	movs	r3, #12
 80070c2:	e32d      	b.n	8007720 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80070c8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	f023 0301 	bic.w	r3, r3, #1
 80070d0:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80070d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01a      	beq.n	8007110 <find_volume+0x88>
		stat = disk_status(fs->drv);
 80070da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fd f85e 	bl	80041a0 <disk_status>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80070ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10c      	bne.n	8007110 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80070f6:	7dfb      	ldrb	r3, [r7, #23]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d007      	beq.n	800710c <find_volume+0x84>
 80070fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8007108:	230a      	movs	r3, #10
 800710a:	e309      	b.n	8007720 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800710c:	2300      	movs	r3, #0
 800710e:	e307      	b.n	8007720 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007118:	b2da      	uxtb	r2, r3
 800711a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800711c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800711e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	4618      	mov	r0, r3
 8007124:	f7fd f84d 	bl	80041c2 <disk_initialize>
 8007128:	4603      	mov	r3, r0
 800712a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800712e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800713a:	2303      	movs	r3, #3
 800713c:	e2f0      	b.n	8007720 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800713e:	7dfb      	ldrb	r3, [r7, #23]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <find_volume+0xcc>
 8007144:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007150:	230a      	movs	r3, #10
 8007152:	e2e5      	b.n	8007720 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007158:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800715a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800715c:	f7ff ff30 	bl	8006fc0 <check_fs>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007166:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800716a:	2b02      	cmp	r3, #2
 800716c:	d14d      	bne.n	800720a <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800716e:	2300      	movs	r3, #0
 8007170:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007172:	e020      	b.n	80071b6 <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007176:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800717a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007182:	4413      	add	r3, r2
 8007184:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007188:	3304      	adds	r3, #4
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d006      	beq.n	800719e <find_volume+0x116>
 8007190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007192:	3308      	adds	r3, #8
 8007194:	4618      	mov	r0, r3
 8007196:	f7fd f8d7 	bl	8004348 <ld_dword>
 800719a:	4602      	mov	r2, r0
 800719c:	e000      	b.n	80071a0 <find_volume+0x118>
 800719e:	2200      	movs	r2, #0
 80071a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	3360      	adds	r3, #96	@ 0x60
 80071a6:	f107 0110 	add.w	r1, r7, #16
 80071aa:	440b      	add	r3, r1
 80071ac:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80071b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071b2:	3301      	adds	r3, #1
 80071b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d9db      	bls.n	8007174 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80071bc:	2300      	movs	r3, #0
 80071be:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 80071c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <find_volume+0x144>
 80071c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071c8:	3b01      	subs	r3, #1
 80071ca:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 80071cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	3360      	adds	r3, #96	@ 0x60
 80071d2:	f107 0210 	add.w	r2, r7, #16
 80071d6:	4413      	add	r3, r2
 80071d8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80071dc:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80071de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <find_volume+0x168>
 80071e4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071e6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80071e8:	f7ff feea 	bl	8006fc0 <check_fs>
 80071ec:	4603      	mov	r3, r0
 80071ee:	e000      	b.n	80071f2 <find_volume+0x16a>
 80071f0:	2303      	movs	r3, #3
 80071f2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80071f6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d905      	bls.n	800720a <find_volume+0x182>
 80071fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007200:	3301      	adds	r3, #1
 8007202:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007204:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007206:	2b03      	cmp	r3, #3
 8007208:	d9e0      	bls.n	80071cc <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800720a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800720e:	2b04      	cmp	r3, #4
 8007210:	d101      	bne.n	8007216 <find_volume+0x18e>
 8007212:	2301      	movs	r3, #1
 8007214:	e284      	b.n	8007720 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007216:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800721a:	2b01      	cmp	r3, #1
 800721c:	d901      	bls.n	8007222 <find_volume+0x19a>
 800721e:	230d      	movs	r3, #13
 8007220:	e27e      	b.n	8007720 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8007222:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007226:	2b01      	cmp	r3, #1
 8007228:	f040 80fa 	bne.w	8007420 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800722c:	230b      	movs	r3, #11
 800722e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007230:	e002      	b.n	8007238 <find_volume+0x1b0>
 8007232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007234:	3301      	adds	r3, #1
 8007236:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007238:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800723a:	2b3f      	cmp	r3, #63	@ 0x3f
 800723c:	d806      	bhi.n	800724c <find_volume+0x1c4>
 800723e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007240:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007242:	4413      	add	r3, r2
 8007244:	3338      	adds	r3, #56	@ 0x38
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0f2      	beq.n	8007232 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800724c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800724e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007250:	d801      	bhi.n	8007256 <find_volume+0x1ce>
 8007252:	230d      	movs	r3, #13
 8007254:	e264      	b.n	8007720 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8007256:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007258:	3338      	adds	r3, #56	@ 0x38
 800725a:	3368      	adds	r3, #104	@ 0x68
 800725c:	4618      	mov	r0, r3
 800725e:	f7fd f85b 	bl	8004318 <ld_word>
 8007262:	4603      	mov	r3, r0
 8007264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007268:	d001      	beq.n	800726e <find_volume+0x1e6>
 800726a:	230d      	movs	r3, #13
 800726c:	e258      	b.n	8007720 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800726e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007270:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007274:	2b09      	cmp	r3, #9
 8007276:	d001      	beq.n	800727c <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 8007278:	230d      	movs	r3, #13
 800727a:	e251      	b.n	8007720 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800727c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800727e:	3338      	adds	r3, #56	@ 0x38
 8007280:	3348      	adds	r3, #72	@ 0x48
 8007282:	4618      	mov	r0, r3
 8007284:	f7fd f883 	bl	800438e <ld_qword>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800728e:	2000      	movs	r0, #0
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	1851      	adds	r1, r2, r1
 8007298:	6039      	str	r1, [r7, #0]
 800729a:	68f9      	ldr	r1, [r7, #12]
 800729c:	eb43 0101 	adc.w	r1, r3, r1
 80072a0:	6079      	str	r1, [r7, #4]
 80072a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80072aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d301      	bcc.n	80072b6 <find_volume+0x22e>
 80072b2:	230d      	movs	r3, #13
 80072b4:	e234      	b.n	8007720 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80072b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072b8:	3338      	adds	r3, #56	@ 0x38
 80072ba:	3354      	adds	r3, #84	@ 0x54
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fd f843 	bl	8004348 <ld_dword>
 80072c2:	4602      	mov	r2, r0
 80072c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072c6:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80072c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072ca:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 80072ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072d0:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80072d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072d4:	789b      	ldrb	r3, [r3, #2]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d001      	beq.n	80072de <find_volume+0x256>
 80072da:	230d      	movs	r3, #13
 80072dc:	e220      	b.n	8007720 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80072de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072e4:	461a      	mov	r2, r3
 80072e6:	2301      	movs	r3, #1
 80072e8:	4093      	lsls	r3, r2
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072ee:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80072f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072f2:	895b      	ldrh	r3, [r3, #10]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <find_volume+0x274>
 80072f8:	230d      	movs	r3, #13
 80072fa:	e211      	b.n	8007720 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80072fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072fe:	3338      	adds	r3, #56	@ 0x38
 8007300:	335c      	adds	r3, #92	@ 0x5c
 8007302:	4618      	mov	r0, r3
 8007304:	f7fd f820 	bl	8004348 <ld_dword>
 8007308:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800730a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800730c:	4a03      	ldr	r2, [pc, #12]	@ (800731c <find_volume+0x294>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d906      	bls.n	8007320 <find_volume+0x298>
 8007312:	230d      	movs	r3, #13
 8007314:	e204      	b.n	8007720 <find_volume+0x698>
 8007316:	bf00      	nop
 8007318:	20006b20 	.word	0x20006b20
 800731c:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8007320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007322:	1c9a      	adds	r2, r3, #2
 8007324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007326:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8007328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800732a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800732c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800732e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007330:	3338      	adds	r3, #56	@ 0x38
 8007332:	3358      	adds	r3, #88	@ 0x58
 8007334:	4618      	mov	r0, r3
 8007336:	f7fd f807 	bl	8004348 <ld_dword>
 800733a:	4602      	mov	r2, r0
 800733c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800733e:	441a      	add	r2, r3
 8007340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007342:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8007344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007346:	3338      	adds	r3, #56	@ 0x38
 8007348:	3350      	adds	r3, #80	@ 0x50
 800734a:	4618      	mov	r0, r3
 800734c:	f7fc fffc 	bl	8004348 <ld_dword>
 8007350:	4602      	mov	r2, r0
 8007352:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007354:	441a      	add	r2, r3
 8007356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007358:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800735a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800735c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800735e:	2200      	movs	r2, #0
 8007360:	469a      	mov	sl, r3
 8007362:	4693      	mov	fp, r2
 8007364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007366:	895b      	ldrh	r3, [r3, #10]
 8007368:	461a      	mov	r2, r3
 800736a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800736c:	fb02 f303 	mul.w	r3, r2, r3
 8007370:	2200      	movs	r2, #0
 8007372:	4698      	mov	r8, r3
 8007374:	4691      	mov	r9, r2
 8007376:	eb1a 0408 	adds.w	r4, sl, r8
 800737a:	eb4b 0509 	adc.w	r5, fp, r9
 800737e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007382:	42a2      	cmp	r2, r4
 8007384:	41ab      	sbcs	r3, r5
 8007386:	d201      	bcs.n	800738c <find_volume+0x304>
 8007388:	230d      	movs	r3, #13
 800738a:	e1c9      	b.n	8007720 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800738c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800738e:	3338      	adds	r3, #56	@ 0x38
 8007390:	3360      	adds	r3, #96	@ 0x60
 8007392:	4618      	mov	r0, r3
 8007394:	f7fc ffd8 	bl	8004348 <ld_dword>
 8007398:	4602      	mov	r2, r0
 800739a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800739c:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800739e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a2:	4619      	mov	r1, r3
 80073a4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80073a6:	f7fd fc67 	bl	8004c78 <clust2sect>
 80073aa:	4603      	mov	r3, r0
 80073ac:	4619      	mov	r1, r3
 80073ae:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80073b0:	f7fd fbc6 	bl	8004b40 <move_window>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <find_volume+0x336>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e1b0      	b.n	8007720 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80073be:	2300      	movs	r3, #0
 80073c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073c2:	e015      	b.n	80073f0 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80073c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80073c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073c8:	4413      	add	r3, r2
 80073ca:	3338      	adds	r3, #56	@ 0x38
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b81      	cmp	r3, #129	@ 0x81
 80073d0:	d10b      	bne.n	80073ea <find_volume+0x362>
 80073d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073d4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80073d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073da:	3314      	adds	r3, #20
 80073dc:	4413      	add	r3, r2
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fc ffb2 	bl	8004348 <ld_dword>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d007      	beq.n	80073fa <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80073ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073ec:	3320      	adds	r3, #32
 80073ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073f6:	d3e5      	bcc.n	80073c4 <find_volume+0x33c>
 80073f8:	e000      	b.n	80073fc <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80073fa:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80073fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80073fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007402:	d101      	bne.n	8007408 <find_volume+0x380>
 8007404:	230d      	movs	r3, #13
 8007406:	e18b      	b.n	8007720 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800740a:	f04f 32ff 	mov.w	r2, #4294967295
 800740e:	619a      	str	r2, [r3, #24]
 8007410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007412:	699a      	ldr	r2, [r3, #24]
 8007414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007416:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8007418:	2304      	movs	r3, #4
 800741a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800741e:	e167      	b.n	80076f0 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007422:	3338      	adds	r3, #56	@ 0x38
 8007424:	330b      	adds	r3, #11
 8007426:	4618      	mov	r0, r3
 8007428:	f7fc ff76 	bl	8004318 <ld_word>
 800742c:	4603      	mov	r3, r0
 800742e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007432:	d001      	beq.n	8007438 <find_volume+0x3b0>
 8007434:	230d      	movs	r3, #13
 8007436:	e173      	b.n	8007720 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800743a:	3338      	adds	r3, #56	@ 0x38
 800743c:	3316      	adds	r3, #22
 800743e:	4618      	mov	r0, r3
 8007440:	f7fc ff6a 	bl	8004318 <ld_word>
 8007444:	4603      	mov	r3, r0
 8007446:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800744a:	2b00      	cmp	r3, #0
 800744c:	d106      	bne.n	800745c <find_volume+0x3d4>
 800744e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007450:	3338      	adds	r3, #56	@ 0x38
 8007452:	3324      	adds	r3, #36	@ 0x24
 8007454:	4618      	mov	r0, r3
 8007456:	f7fc ff77 	bl	8004348 <ld_dword>
 800745a:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800745c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800745e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007460:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007464:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8007468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800746a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800746c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800746e:	789b      	ldrb	r3, [r3, #2]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d005      	beq.n	8007480 <find_volume+0x3f8>
 8007474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007476:	789b      	ldrb	r3, [r3, #2]
 8007478:	2b02      	cmp	r3, #2
 800747a:	d001      	beq.n	8007480 <find_volume+0x3f8>
 800747c:	230d      	movs	r3, #13
 800747e:	e14f      	b.n	8007720 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007482:	789b      	ldrb	r3, [r3, #2]
 8007484:	461a      	mov	r2, r3
 8007486:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007488:	fb02 f303 	mul.w	r3, r2, r3
 800748c:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800748e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007490:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007494:	461a      	mov	r2, r3
 8007496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007498:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800749a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800749c:	895b      	ldrh	r3, [r3, #10]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d008      	beq.n	80074b4 <find_volume+0x42c>
 80074a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074a4:	895b      	ldrh	r3, [r3, #10]
 80074a6:	461a      	mov	r2, r3
 80074a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074aa:	895b      	ldrh	r3, [r3, #10]
 80074ac:	3b01      	subs	r3, #1
 80074ae:	4013      	ands	r3, r2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <find_volume+0x430>
 80074b4:	230d      	movs	r3, #13
 80074b6:	e133      	b.n	8007720 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80074b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ba:	3338      	adds	r3, #56	@ 0x38
 80074bc:	3311      	adds	r3, #17
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fc ff2a 	bl	8004318 <ld_word>
 80074c4:	4603      	mov	r3, r0
 80074c6:	461a      	mov	r2, r3
 80074c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80074cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ce:	891b      	ldrh	r3, [r3, #8]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <find_volume+0x456>
 80074da:	230d      	movs	r3, #13
 80074dc:	e120      	b.n	8007720 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80074de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074e0:	3338      	adds	r3, #56	@ 0x38
 80074e2:	3313      	adds	r3, #19
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fc ff17 	bl	8004318 <ld_word>
 80074ea:	4603      	mov	r3, r0
 80074ec:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80074ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d106      	bne.n	8007502 <find_volume+0x47a>
 80074f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074f6:	3338      	adds	r3, #56	@ 0x38
 80074f8:	3320      	adds	r3, #32
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fc ff24 	bl	8004348 <ld_dword>
 8007500:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007504:	3338      	adds	r3, #56	@ 0x38
 8007506:	330e      	adds	r3, #14
 8007508:	4618      	mov	r0, r3
 800750a:	f7fc ff05 	bl	8004318 <ld_word>
 800750e:	4603      	mov	r3, r0
 8007510:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <find_volume+0x498>
 800751c:	230d      	movs	r3, #13
 800751e:	e0ff      	b.n	8007720 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007520:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007524:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007526:	4413      	add	r3, r2
 8007528:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800752a:	8912      	ldrh	r2, [r2, #8]
 800752c:	0912      	lsrs	r2, r2, #4
 800752e:	b292      	uxth	r2, r2
 8007530:	4413      	add	r3, r2
 8007532:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007534:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007538:	429a      	cmp	r2, r3
 800753a:	d201      	bcs.n	8007540 <find_volume+0x4b8>
 800753c:	230d      	movs	r3, #13
 800753e:	e0ef      	b.n	8007720 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007540:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007548:	8952      	ldrh	r2, [r2, #10]
 800754a:	fbb3 f3f2 	udiv	r3, r3, r2
 800754e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <find_volume+0x4d2>
 8007556:	230d      	movs	r3, #13
 8007558:	e0e2      	b.n	8007720 <find_volume+0x698>
		fmt = FS_FAT32;
 800755a:	2303      	movs	r3, #3
 800755c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007562:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007566:	4293      	cmp	r3, r2
 8007568:	d802      	bhi.n	8007570 <find_volume+0x4e8>
 800756a:	2302      	movs	r3, #2
 800756c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007572:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007576:	4293      	cmp	r3, r2
 8007578:	d802      	bhi.n	8007580 <find_volume+0x4f8>
 800757a:	2301      	movs	r3, #1
 800757c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007582:	1c9a      	adds	r2, r3, #2
 8007584:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007586:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800758a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800758c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800758e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007592:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007594:	441a      	add	r2, r3
 8007596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007598:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800759a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800759c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800759e:	441a      	add	r2, r3
 80075a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075a2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80075a4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d11e      	bne.n	80075ea <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80075ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ae:	3338      	adds	r3, #56	@ 0x38
 80075b0:	332a      	adds	r3, #42	@ 0x2a
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fc feb0 	bl	8004318 <ld_word>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <find_volume+0x53a>
 80075be:	230d      	movs	r3, #13
 80075c0:	e0ae      	b.n	8007720 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80075c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075c4:	891b      	ldrh	r3, [r3, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <find_volume+0x546>
 80075ca:	230d      	movs	r3, #13
 80075cc:	e0a8      	b.n	8007720 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80075ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075d0:	3338      	adds	r3, #56	@ 0x38
 80075d2:	332c      	adds	r3, #44	@ 0x2c
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fc feb7 	bl	8004348 <ld_dword>
 80075da:	4602      	mov	r2, r0
 80075dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075de:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80075e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075e8:	e01f      	b.n	800762a <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80075ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075ec:	891b      	ldrh	r3, [r3, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <find_volume+0x56e>
 80075f2:	230d      	movs	r3, #13
 80075f4:	e094      	b.n	8007720 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80075f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075fc:	441a      	add	r2, r3
 80075fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007600:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007602:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007606:	2b02      	cmp	r3, #2
 8007608:	d103      	bne.n	8007612 <find_volume+0x58a>
 800760a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	e00a      	b.n	8007628 <find_volume+0x5a0>
 8007612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007614:	69da      	ldr	r2, [r3, #28]
 8007616:	4613      	mov	r3, r2
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	4413      	add	r3, r2
 800761c:	085a      	lsrs	r2, r3, #1
 800761e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007628:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800762a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800762c:	6a1a      	ldr	r2, [r3, #32]
 800762e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007630:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8007634:	0a5b      	lsrs	r3, r3, #9
 8007636:	429a      	cmp	r2, r3
 8007638:	d201      	bcs.n	800763e <find_volume+0x5b6>
 800763a:	230d      	movs	r3, #13
 800763c:	e070      	b.n	8007720 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800763e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007640:	f04f 32ff 	mov.w	r2, #4294967295
 8007644:	619a      	str	r2, [r3, #24]
 8007646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007648:	699a      	ldr	r2, [r3, #24]
 800764a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800764c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800764e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007650:	2280      	movs	r2, #128	@ 0x80
 8007652:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007654:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007658:	2b03      	cmp	r3, #3
 800765a:	d149      	bne.n	80076f0 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800765c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800765e:	3338      	adds	r3, #56	@ 0x38
 8007660:	3330      	adds	r3, #48	@ 0x30
 8007662:	4618      	mov	r0, r3
 8007664:	f7fc fe58 	bl	8004318 <ld_word>
 8007668:	4603      	mov	r3, r0
 800766a:	2b01      	cmp	r3, #1
 800766c:	d140      	bne.n	80076f0 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800766e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007670:	3301      	adds	r3, #1
 8007672:	4619      	mov	r1, r3
 8007674:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007676:	f7fd fa63 	bl	8004b40 <move_window>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d137      	bne.n	80076f0 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 8007680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007682:	2200      	movs	r2, #0
 8007684:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007688:	3338      	adds	r3, #56	@ 0x38
 800768a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800768e:	4618      	mov	r0, r3
 8007690:	f7fc fe42 	bl	8004318 <ld_word>
 8007694:	4603      	mov	r3, r0
 8007696:	461a      	mov	r2, r3
 8007698:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800769c:	429a      	cmp	r2, r3
 800769e:	d127      	bne.n	80076f0 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80076a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076a2:	3338      	adds	r3, #56	@ 0x38
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fc fe4f 	bl	8004348 <ld_dword>
 80076aa:	4603      	mov	r3, r0
 80076ac:	4a1f      	ldr	r2, [pc, #124]	@ (800772c <find_volume+0x6a4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d11e      	bne.n	80076f0 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80076b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076b4:	3338      	adds	r3, #56	@ 0x38
 80076b6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fc fe44 	bl	8004348 <ld_dword>
 80076c0:	4603      	mov	r3, r0
 80076c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007730 <find_volume+0x6a8>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d113      	bne.n	80076f0 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80076c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ca:	3338      	adds	r3, #56	@ 0x38
 80076cc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fc fe39 	bl	8004348 <ld_dword>
 80076d6:	4602      	mov	r2, r0
 80076d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076da:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80076dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076de:	3338      	adds	r3, #56	@ 0x38
 80076e0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fc fe2f 	bl	8004348 <ld_dword>
 80076ea:	4602      	mov	r2, r0
 80076ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ee:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80076f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076f2:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 80076f6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80076f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007734 <find_volume+0x6ac>)
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	3301      	adds	r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	4b0c      	ldr	r3, [pc, #48]	@ (8007734 <find_volume+0x6ac>)
 8007702:	801a      	strh	r2, [r3, #0]
 8007704:	4b0b      	ldr	r3, [pc, #44]	@ (8007734 <find_volume+0x6ac>)
 8007706:	881a      	ldrh	r2, [r3, #0]
 8007708:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800770a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800770c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800770e:	4a0a      	ldr	r2, [pc, #40]	@ (8007738 <find_volume+0x6b0>)
 8007710:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8007712:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007714:	4a09      	ldr	r2, [pc, #36]	@ (800773c <find_volume+0x6b4>)
 8007716:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007718:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800771a:	f7fd f9a9 	bl	8004a70 <clear_lock>
#endif
	return FR_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3770      	adds	r7, #112	@ 0x70
 8007724:	46bd      	mov	sp, r7
 8007726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800772a:	bf00      	nop
 800772c:	41615252 	.word	0x41615252
 8007730:	61417272 	.word	0x61417272
 8007734:	20006b24 	.word	0x20006b24
 8007738:	20006d98 	.word	0x20006d98
 800773c:	20006b38 	.word	0x20006b38

08007740 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800774a:	2309      	movs	r3, #9
 800774c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d01c      	beq.n	800778e <validate+0x4e>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d018      	beq.n	800778e <validate+0x4e>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d013      	beq.n	800778e <validate+0x4e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	889a      	ldrh	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	88db      	ldrh	r3, [r3, #6]
 8007770:	429a      	cmp	r2, r3
 8007772:	d10c      	bne.n	800778e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	785b      	ldrb	r3, [r3, #1]
 800777a:	4618      	mov	r0, r3
 800777c:	f7fc fd10 	bl	80041a0 <disk_status>
 8007780:	4603      	mov	r3, r0
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <validate+0x4e>
			res = FR_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d102      	bne.n	800779a <validate+0x5a>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	e000      	b.n	800779c <validate+0x5c>
 800779a:	2300      	movs	r3, #0
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	6013      	str	r3, [r2, #0]
	return res;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
	...

080077ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b088      	sub	sp, #32
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	4613      	mov	r3, r2
 80077b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80077be:	f107 0310 	add.w	r3, r7, #16
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff fbb7 	bl	8006f36 <get_ldnumber>
 80077c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	da01      	bge.n	80077d4 <f_mount+0x28>
 80077d0:	230b      	movs	r3, #11
 80077d2:	e02b      	b.n	800782c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80077d4:	4a17      	ldr	r2, [pc, #92]	@ (8007834 <f_mount+0x88>)
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80077e4:	69b8      	ldr	r0, [r7, #24]
 80077e6:	f7fd f943 	bl	8004a70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	2200      	movs	r2, #0
 80077ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	490d      	ldr	r1, [pc, #52]	@ (8007834 <f_mount+0x88>)
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <f_mount+0x66>
 800780c:	79fb      	ldrb	r3, [r7, #7]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d001      	beq.n	8007816 <f_mount+0x6a>
 8007812:	2300      	movs	r3, #0
 8007814:	e00a      	b.n	800782c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007816:	f107 010c 	add.w	r1, r7, #12
 800781a:	f107 0308 	add.w	r3, r7, #8
 800781e:	2200      	movs	r2, #0
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff fc31 	bl	8007088 <find_volume>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800782a:	7dfb      	ldrb	r3, [r7, #23]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3720      	adds	r7, #32
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20006b20 	.word	0x20006b20

08007838 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800783c:	b0a6      	sub	sp, #152	@ 0x98
 800783e:	af00      	add	r7, sp, #0
 8007840:	61f8      	str	r0, [r7, #28]
 8007842:	61b9      	str	r1, [r7, #24]
 8007844:	4613      	mov	r3, r2
 8007846:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <f_open+0x1a>
 800784e:	2309      	movs	r3, #9
 8007850:	e2aa      	b.n	8007da8 <f_open+0x570>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007858:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800785a:	7dfa      	ldrb	r2, [r7, #23]
 800785c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8007860:	f107 0318 	add.w	r3, r7, #24
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fc0f 	bl	8007088 <find_volume>
 800786a:	4603      	mov	r3, r0
 800786c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	if (res == FR_OK) {
 8007870:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007874:	2b00      	cmp	r3, #0
 8007876:	f040 828e 	bne.w	8007d96 <f_open+0x55e>
		dj.obj.fs = fs;
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007884:	4611      	mov	r1, r2
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff faac 	bl	8006de4 <follow_path>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007892:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007896:	2b00      	cmp	r3, #0
 8007898:	d118      	bne.n	80078cc <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800789a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800789e:	b25b      	sxtb	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	da03      	bge.n	80078ac <f_open+0x74>
				res = FR_INVALID_NAME;
 80078a4:	2306      	movs	r3, #6
 80078a6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 80078aa:	e00f      	b.n	80078cc <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	bf8c      	ite	hi
 80078b2:	2301      	movhi	r3, #1
 80078b4:	2300      	movls	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80078be:	4611      	mov	r1, r2
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fc ff8d 	bl	80047e0 <chk_lock>
 80078c6:	4603      	mov	r3, r0
 80078c8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	f003 031c 	and.w	r3, r3, #28
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f000 8115 	beq.w	8007b02 <f_open+0x2ca>
			if (res != FR_OK) {					/* No file, create new */
 80078d8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d017      	beq.n	8007910 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80078e0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d10e      	bne.n	8007906 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80078e8:	f7fc ffd6 	bl	8004898 <enq_lock>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d006      	beq.n	8007900 <f_open+0xc8>
 80078f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe ff16 	bl	8006728 <dir_register>
 80078fc:	4603      	mov	r3, r0
 80078fe:	e000      	b.n	8007902 <f_open+0xca>
 8007900:	2312      	movs	r3, #18
 8007902:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007906:	7dfb      	ldrb	r3, [r7, #23]
 8007908:	f043 0308 	orr.w	r3, r3, #8
 800790c:	75fb      	strb	r3, [r7, #23]
 800790e:	e011      	b.n	8007934 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007910:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007914:	f003 0311 	and.w	r3, r3, #17
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <f_open+0xec>
					res = FR_DENIED;
 800791c:	2307      	movs	r3, #7
 800791e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8007922:	e007      	b.n	8007934 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007924:	7dfb      	ldrb	r3, [r7, #23]
 8007926:	f003 0304 	and.w	r3, r3, #4
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <f_open+0xfc>
 800792e:	2308      	movs	r3, #8
 8007930:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007934:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007938:	2b00      	cmp	r3, #0
 800793a:	f040 80fe 	bne.w	8007b3a <f_open+0x302>
 800793e:	7dfb      	ldrb	r3, [r7, #23]
 8007940:	f003 0308 	and.w	r3, r3, #8
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 80f8 	beq.w	8007b3a <f_open+0x302>
				dw = GET_FATTIME();
 800794a:	f7fc fc21 	bl	8004190 <get_fattime>
 800794e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b04      	cmp	r3, #4
 8007958:	f040 8084 	bne.w	8007a64 <f_open+0x22c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800795c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	3334      	adds	r3, #52	@ 0x34
 8007968:	4618      	mov	r0, r3
 800796a:	f7fc fced 	bl	8004348 <ld_dword>
 800796e:	4602      	mov	r2, r0
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	3338      	adds	r3, #56	@ 0x38
 800797a:	4618      	mov	r0, r3
 800797c:	f7fc fd07 	bl	800438e <ld_qword>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	69f9      	ldr	r1, [r7, #28]
 8007986:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800798a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	3321      	adds	r3, #33	@ 0x21
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	b2da      	uxtb	r2, r3
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	2200      	movs	r2, #0
 80079a0:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80079a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	3308      	adds	r3, #8
 80079a8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fc fde4 	bl	800457a <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80079b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	3314      	adds	r3, #20
 80079b8:	2200      	movs	r2, #0
 80079ba:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	330c      	adds	r3, #12
 80079c2:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7fc fdd7 	bl	800457a <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	3315      	adds	r3, #21
 80079d2:	2200      	movs	r2, #0
 80079d4:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80079d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	3304      	adds	r3, #4
 80079dc:	2220      	movs	r2, #32
 80079de:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80079e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	3334      	adds	r3, #52	@ 0x34
 80079e6:	2100      	movs	r1, #0
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fc fdc6 	bl	800457a <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80079ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80079f6:	f04f 0200 	mov.w	r2, #0
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	4608      	mov	r0, r1
 8007a00:	f7fc fde7 	bl	80045d2 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	f04f 0300 	mov.w	r3, #0
 8007a14:	4608      	mov	r0, r1
 8007a16:	f7fc fddc 	bl	80045d2 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	3321      	adds	r3, #33	@ 0x21
 8007a20:	2201      	movs	r2, #1
 8007a22:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8007a24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe fbc9 	bl	80061c0 <store_xdir>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8007a34:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d17e      	bne.n	8007b3a <f_open+0x302>
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d07a      	beq.n	8007b3a <f_open+0x302>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8007a44:	69f8      	ldr	r0, [r7, #28]
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f7fd fc81 	bl	8005354 <remove_chain>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5e:	3a01      	subs	r2, #1
 8007a60:	615a      	str	r2, [r3, #20]
 8007a62:	e06a      	b.n	8007b3a <f_open+0x302>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a66:	330e      	adds	r3, #14
 8007a68:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fc fd84 	bl	800457a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a74:	3316      	adds	r3, #22
 8007a76:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fc fd7d 	bl	800457a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007a80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a82:	330b      	adds	r3, #11
 8007a84:	2220      	movs	r2, #32
 8007a86:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe f810 	bl	8005ab4 <ld_clust>
 8007a94:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fe f827 	bl	8005af2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007aa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007aa6:	331c      	adds	r3, #28
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fc fd65 	bl	800457a <st_dword>
					fs->wflag = 1;
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007ab6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d03d      	beq.n	8007b3a <f_open+0x302>
						dw = fs->winsect;
 8007abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ac2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						res = remove_chain(&dj.obj, cl, 0);
 8007ac6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fd fc3f 	bl	8005354 <remove_chain>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						if (res == FR_OK) {
 8007adc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d12a      	bne.n	8007b3a <f_open+0x302>
							res = move_window(fs, dw);
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fd f828 	bl	8004b40 <move_window>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007afc:	3a01      	subs	r2, #1
 8007afe:	615a      	str	r2, [r3, #20]
 8007b00:	e01b      	b.n	8007b3a <f_open+0x302>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007b02:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d117      	bne.n	8007b3a <f_open+0x302>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007b0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b0e:	f003 0310 	and.w	r3, r3, #16
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <f_open+0x2e6>
					res = FR_NO_FILE;
 8007b16:	2304      	movs	r3, #4
 8007b18:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8007b1c:	e00d      	b.n	8007b3a <f_open+0x302>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d008      	beq.n	8007b3a <f_open+0x302>
 8007b28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <f_open+0x302>
						res = FR_DENIED;
 8007b34:	2307      	movs	r3, #7
 8007b36:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 8007b3a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d126      	bne.n	8007b90 <f_open+0x358>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <f_open+0x31c>
				mode |= FA_MODIFIED;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b52:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8007b5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	bf8c      	ite	hi
 8007b68:	2301      	movhi	r3, #1
 8007b6a:	2300      	movls	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007b74:	4611      	mov	r1, r2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fc feb0 	bl	80048dc <inc_lock>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d102      	bne.n	8007b90 <f_open+0x358>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007b90:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f040 80fe 	bne.w	8007d96 <f_open+0x55e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d12d      	bne.n	8007bfe <f_open+0x3c6>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8007ba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8007ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007bac:	4613      	mov	r3, r2
 8007bae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007bb2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8007bbc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	3334      	adds	r3, #52	@ 0x34
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fc fbbd 	bl	8004348 <ld_dword>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	3338      	adds	r3, #56	@ 0x38
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fc fbd7 	bl	800438e <ld_qword>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	69f9      	ldr	r1, [r7, #28]
 8007be6:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8007bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	3321      	adds	r3, #33	@ 0x21
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	71da      	strb	r2, [r3, #7]
 8007bfc:	e016      	b.n	8007c2c <f_open+0x3f4>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007c02:	4611      	mov	r1, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fd ff55 	bl	8005ab4 <ld_clust>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007c10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c12:	331c      	adds	r3, #28
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fc fb97 	bl	8004348 <ld_dword>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	60bb      	str	r3, [r7, #8]
 8007c20:	60fa      	str	r2, [r7, #12]
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007c28:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3a:	88da      	ldrh	r2, [r3, #6]
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	7dfa      	ldrb	r2, [r7, #23]
 8007c44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2200      	movs	r2, #0
 8007c54:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007c56:	69f9      	ldr	r1, [r7, #28]
 8007c58:	f04f 0200 	mov.w	r2, #0
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	3354      	adds	r3, #84	@ 0x54
 8007c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fc fd58 	bl	8004724 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 808b 	beq.w	8007d96 <f_open+0x55e>
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	f000 8085 	beq.w	8007d96 <f_open+0x55e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007c92:	69f9      	ldr	r1, [r7, #28]
 8007c94:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9a:	895b      	ldrh	r3, [r3, #10]
 8007c9c:	025b      	lsls	r3, r3, #9
 8007c9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007cae:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8007cb2:	e026      	b.n	8007d02 <f_open+0x4ca>
					clst = get_fat(&fp->obj, clst);
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fc fffc 	bl	8004cb8 <get_fat>
 8007cc0:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					if (clst <= 1) res = FR_INT_ERR;
 8007cc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d802      	bhi.n	8007cd2 <f_open+0x49a>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007cd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cda:	d102      	bne.n	8007ce2 <f_open+0x4aa>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007ce2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	469a      	mov	sl, r3
 8007ce8:	4693      	mov	fp, r2
 8007cea:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007cee:	ebb2 010a 	subs.w	r1, r2, sl
 8007cf2:	6039      	str	r1, [r7, #0]
 8007cf4:	eb63 030b 	sbc.w	r3, r3, fp
 8007cf8:	607b      	str	r3, [r7, #4]
 8007cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cfe:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8007d02:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d109      	bne.n	8007d1e <f_open+0x4e6>
 8007d0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4698      	mov	r8, r3
 8007d10:	4691      	mov	r9, r2
 8007d12:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007d16:	4590      	cmp	r8, r2
 8007d18:	eb79 0303 	sbcs.w	r3, r9, r3
 8007d1c:	d3ca      	bcc.n	8007cb4 <f_open+0x47c>
				}
				fp->clust = clst;
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007d24:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007d26:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d133      	bne.n	8007d96 <f_open+0x55e>
 8007d2e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007d32:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8007d36:	2500      	movs	r5, #0
 8007d38:	ea54 0305 	orrs.w	r3, r4, r5
 8007d3c:	d02b      	beq.n	8007d96 <f_open+0x55e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fc ff97 	bl	8004c78 <clust2sect>
 8007d4a:	67b8      	str	r0, [r7, #120]	@ 0x78
 8007d4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d103      	bne.n	8007d5a <f_open+0x522>
						res = FR_INT_ERR;
 8007d52:	2302      	movs	r3, #2
 8007d54:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8007d58:	e01d      	b.n	8007d96 <f_open+0x55e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007d5a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007d5e:	f04f 0200 	mov.w	r2, #0
 8007d62:	f04f 0300 	mov.w	r3, #0
 8007d66:	0a42      	lsrs	r2, r0, #9
 8007d68:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8007d6c:	0a4b      	lsrs	r3, r1, #9
 8007d6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d70:	441a      	add	r2, r3
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	7858      	ldrb	r0, [r3, #1]
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d84:	2301      	movs	r3, #1
 8007d86:	f7fc fa32 	bl	80041ee <disk_read>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <f_open+0x55e>
 8007d90:	2301      	movs	r3, #1
 8007d92:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007d96:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <f_open+0x56c>
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007da4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3798      	adds	r7, #152	@ 0x98
 8007dac:	46bd      	mov	sp, r7
 8007dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007db2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007db2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db6:	b095      	sub	sp, #84	@ 0x54
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	61f8      	str	r0, [r7, #28]
 8007dbc:	61b9      	str	r1, [r7, #24]
 8007dbe:	617a      	str	r2, [r7, #20]
 8007dc0:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fcb3 	bl	8007740 <validate>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007de0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d108      	bne.n	8007dfa <f_read+0x48>
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007dee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8007df2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d002      	beq.n	8007e00 <f_read+0x4e>
 8007dfa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007dfe:	e14b      	b.n	8008098 <f_read+0x2e6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <f_read+0x60>
 8007e0e:	2307      	movs	r3, #7
 8007e10:	e142      	b.n	8008098 <f_read+0x2e6>
	remain = fp->obj.objsize - fp->fptr;
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007e1e:	1a86      	subs	r6, r0, r2
 8007e20:	603e      	str	r6, [r7, #0]
 8007e22:	eb61 0303 	sbc.w	r3, r1, r3
 8007e26:	607b      	str	r3, [r7, #4]
 8007e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	2200      	movs	r2, #0
 8007e34:	469a      	mov	sl, r3
 8007e36:	4693      	mov	fp, r2
 8007e38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007e3c:	4552      	cmp	r2, sl
 8007e3e:	eb73 030b 	sbcs.w	r3, r3, fp
 8007e42:	f080 8124 	bcs.w	800808e <f_read+0x2dc>
 8007e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e48:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 8007e4a:	e120      	b.n	800808e <f_read+0x2dc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007e52:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8007e56:	2500      	movs	r5, #0
 8007e58:	ea54 0305 	orrs.w	r3, r4, r5
 8007e5c:	f040 80d9 	bne.w	8008012 <f_read+0x260>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007e66:	f04f 0200 	mov.w	r2, #0
 8007e6a:	f04f 0300 	mov.w	r3, #0
 8007e6e:	0a42      	lsrs	r2, r0, #9
 8007e70:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8007e74:	0a4b      	lsrs	r3, r1, #9
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	895b      	ldrh	r3, [r3, #10]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 8007e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d132      	bne.n	8007eec <f_read+0x13a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	d103      	bne.n	8007e98 <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e96:	e013      	b.n	8007ec0 <f_read+0x10e>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <f_read+0xfe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007ea6:	69f8      	ldr	r0, [r7, #28]
 8007ea8:	f7fd fc09 	bl	80056be <clmt_clust>
 8007eac:	64b8      	str	r0, [r7, #72]	@ 0x48
 8007eae:	e007      	b.n	8007ec0 <f_read+0x10e>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4610      	mov	r0, r2
 8007eba:	f7fc fefd 	bl	8004cb8 <get_fat>
 8007ebe:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007ec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d805      	bhi.n	8007ed2 <f_read+0x120>
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8007ece:	2302      	movs	r3, #2
 8007ed0:	e0e2      	b.n	8008098 <f_read+0x2e6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ed2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed8:	d105      	bne.n	8007ee6 <f_read+0x134>
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e0d8      	b.n	8008098 <f_read+0x2e6>
				fp->clust = clst;				/* Update current cluster */
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eea:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	f7fc febf 	bl	8004c78 <clust2sect>
 8007efa:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d105      	bne.n	8007f0e <f_read+0x15c>
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	e0c4      	b.n	8008098 <f_read+0x2e6>
			sect += csect;
 8007f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f12:	4413      	add	r3, r2
 8007f14:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	0a5b      	lsrs	r3, r3, #9
 8007f1a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d03b      	beq.n	8007f9a <f_read+0x1e8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f26:	4413      	add	r3, r2
 8007f28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f2a:	8952      	ldrh	r2, [r2, #10]
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d905      	bls.n	8007f3c <f_read+0x18a>
					cc = fs->csize - csect;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f32:	895b      	ldrh	r3, [r3, #10]
 8007f34:	461a      	mov	r2, r3
 8007f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3e:	7858      	ldrb	r0, [r3, #1]
 8007f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f46:	f7fc f952 	bl	80041ee <disk_read>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <f_read+0x1aa>
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e09d      	b.n	8008098 <f_read+0x2e6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f62:	b25b      	sxtb	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	da14      	bge.n	8007f92 <f_read+0x1e0>
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6e:	1ad3      	subs	r3, r2, r3
 8007f70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d90d      	bls.n	8007f92 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	025b      	lsls	r3, r3, #9
 8007f80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007f82:	18d0      	adds	r0, r2, r3
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	3354      	adds	r3, #84	@ 0x54
 8007f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	f7fc fba8 	bl	80046e2 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f94:	025b      	lsls	r3, r3, #9
 8007f96:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 8007f98:	e059      	b.n	800804e <f_read+0x29c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d033      	beq.n	800800c <f_read+0x25a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007faa:	b25b      	sxtb	r3, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	da1b      	bge.n	8007fe8 <f_read+0x236>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	7858      	ldrb	r0, [r3, #1]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	f7fc f944 	bl	800424c <disk_write>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d005      	beq.n	8007fd6 <f_read+0x224>
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e060      	b.n	8008098 <f_read+0x2e6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fea:	7858      	ldrb	r0, [r3, #1]
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ff6:	f7fc f8fa 	bl	80041ee <disk_read>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <f_read+0x25a>
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008008:	2301      	movs	r3, #1
 800800a:	e045      	b.n	8008098 <f_read+0x2e6>
			}
#endif
			fp->sect = sect;
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008010:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008018:	4613      	mov	r3, r2
 800801a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800801e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008022:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008024:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	429a      	cmp	r2, r3
 800802a:	d901      	bls.n	8008030 <f_read+0x27e>
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	647b      	str	r3, [r7, #68]	@ 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800803c:	4613      	mov	r3, r2
 800803e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008042:	440b      	add	r3, r1
 8008044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008046:	4619      	mov	r1, r3
 8008048:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800804a:	f7fc fb4a 	bl	80046e2 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800804e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008052:	4413      	add	r3, r2
 8008054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800805c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800805e:	2000      	movs	r0, #0
 8008060:	4688      	mov	r8, r1
 8008062:	4681      	mov	r9, r0
 8008064:	eb12 0108 	adds.w	r1, r2, r8
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	eb43 0309 	adc.w	r3, r3, r9
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008076:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008080:	441a      	add	r2, r3
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f47f aedb 	bne.w	8007e4c <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3754      	adds	r7, #84	@ 0x54
 800809c:	46bd      	mov	sp, r7
 800809e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080a2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80080a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a6:	b08d      	sub	sp, #52	@ 0x34
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
 80080b0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2200      	movs	r2, #0
 80080ba:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f107 0210 	add.w	r2, r7, #16
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff fb3b 	bl	8007740 <validate>
 80080ca:	4603      	mov	r3, r0
 80080cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80080d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d108      	bne.n	80080ea <f_write+0x48>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80080de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80080e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <f_write+0x4e>
 80080ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80080ee:	e187      	b.n	8008400 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <f_write+0x60>
 80080fe:	2307      	movs	r3, #7
 8008100:	e17e      	b.n	8008400 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	2b04      	cmp	r3, #4
 8008108:	f000 816a 	beq.w	80083e0 <f_write+0x33e>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	18d1      	adds	r1, r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800811c:	4613      	mov	r3, r2
 800811e:	4299      	cmp	r1, r3
 8008120:	f080 815e 	bcs.w	80083e0 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800812a:	4613      	mov	r3, r2
 800812c:	43db      	mvns	r3, r3
 800812e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008130:	e156      	b.n	80083e0 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008138:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800813c:	2500      	movs	r5, #0
 800813e:	ea54 0305 	orrs.w	r3, r4, r5
 8008142:	f040 80fb 	bne.w	800833c <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800814c:	f04f 0200 	mov.w	r2, #0
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	0a42      	lsrs	r2, r0, #9
 8008156:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800815a:	0a4b      	lsrs	r3, r1, #9
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	895b      	ldrh	r3, [r3, #10]
 8008160:	3b01      	subs	r3, #1
 8008162:	4013      	ands	r3, r2
 8008164:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d146      	bne.n	80081fa <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008172:	4313      	orrs	r3, r2
 8008174:	d10c      	bne.n	8008190 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800817c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817e:	2b00      	cmp	r3, #0
 8008180:	d11a      	bne.n	80081b8 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2100      	movs	r1, #0
 8008186:	4618      	mov	r0, r3
 8008188:	f7fd f998 	bl	80054bc <create_chain>
 800818c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800818e:	e013      	b.n	80081b8 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7fd fa8d 	bl	80056be <clmt_clust>
 80081a4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80081a6:	e007      	b.n	80081b8 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ae:	4619      	mov	r1, r3
 80081b0:	4610      	mov	r0, r2
 80081b2:	f7fd f983 	bl	80054bc <create_chain>
 80081b6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80081b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 8115 	beq.w	80083ea <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80081c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d105      	bne.n	80081d2 <f_write+0x130>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2202      	movs	r2, #2
 80081ca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80081ce:	2302      	movs	r3, #2
 80081d0:	e116      	b.n	8008400 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80081d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d8:	d105      	bne.n	80081e6 <f_write+0x144>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80081e2:	2301      	movs	r3, #1
 80081e4:	e10c      	b.n	8008400 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081ea:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <f_write+0x158>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081f8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008200:	b25b      	sxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	da1b      	bge.n	800823e <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	7858      	ldrb	r0, [r3, #1]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008214:	2301      	movs	r3, #1
 8008216:	f7fc f819 	bl	800424c <disk_write>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d005      	beq.n	800822c <f_write+0x18a>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008228:	2301      	movs	r3, #1
 800822a:	e0e9      	b.n	8008400 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008236:	b2da      	uxtb	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008244:	4619      	mov	r1, r3
 8008246:	4610      	mov	r0, r2
 8008248:	f7fc fd16 	bl	8004c78 <clust2sect>
 800824c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <f_write+0x1be>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2202      	movs	r2, #2
 8008258:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800825c:	2302      	movs	r3, #2
 800825e:	e0cf      	b.n	8008400 <f_write+0x35e>
			sect += csect;
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	4413      	add	r3, r2
 8008266:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	0a5b      	lsrs	r3, r3, #9
 800826c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d03f      	beq.n	80082f4 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	4413      	add	r3, r2
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	8952      	ldrh	r2, [r2, #10]
 800827e:	4293      	cmp	r3, r2
 8008280:	d905      	bls.n	800828e <f_write+0x1ec>
					cc = fs->csize - csect;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	895b      	ldrh	r3, [r3, #10]
 8008286:	461a      	mov	r2, r3
 8008288:	69bb      	ldr	r3, [r7, #24]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	7858      	ldrb	r0, [r3, #1]
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	69f9      	ldr	r1, [r7, #28]
 8008298:	f7fb ffd8 	bl	800424c <disk_write>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d005      	beq.n	80082ae <f_write+0x20c>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80082aa:	2301      	movs	r3, #1
 80082ac:	e0a8      	b.n	8008400 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	1ad3      	subs	r3, r2, r3
 80082b6:	6a3a      	ldr	r2, [r7, #32]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d917      	bls.n	80082ec <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	025b      	lsls	r3, r3, #9
 80082cc:	69fa      	ldr	r2, [r7, #28]
 80082ce:	4413      	add	r3, r2
 80082d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082d4:	4619      	mov	r1, r3
 80082d6:	f7fc fa04 	bl	80046e2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80082e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	025b      	lsls	r3, r3, #9
 80082f0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80082f2:	e04a      	b.n	800838a <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d01b      	beq.n	8008336 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800830a:	4290      	cmp	r0, r2
 800830c:	eb71 0303 	sbcs.w	r3, r1, r3
 8008310:	d211      	bcs.n	8008336 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	7858      	ldrb	r0, [r3, #1]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800831c:	2301      	movs	r3, #1
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	f7fb ff65 	bl	80041ee <disk_read>
 8008324:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008326:	2b00      	cmp	r3, #0
 8008328:	d005      	beq.n	8008336 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008332:	2301      	movs	r3, #1
 8008334:	e064      	b.n	8008400 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008342:	4613      	mov	r3, r2
 8008344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008348:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800834c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800834e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	429a      	cmp	r2, r3
 8008354:	d901      	bls.n	800835a <f_write+0x2b8>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008366:	4613      	mov	r3, r2
 8008368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836c:	440b      	add	r3, r1
 800836e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008370:	69f9      	ldr	r1, [r7, #28]
 8008372:	4618      	mov	r0, r3
 8008374:	f7fc f9b5 	bl	80046e2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800837e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008382:	b2da      	uxtb	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800838a:	69fa      	ldr	r2, [r7, #28]
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	4413      	add	r3, r2
 8008390:	61fb      	str	r3, [r7, #28]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008398:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800839a:	2000      	movs	r0, #0
 800839c:	4688      	mov	r8, r1
 800839e:	4681      	mov	r9, r0
 80083a0:	eb12 0a08 	adds.w	sl, r2, r8
 80083a4:	eb43 0b09 	adc.w	fp, r3, r9
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80083b4:	68f9      	ldr	r1, [r7, #12]
 80083b6:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 80083ba:	4282      	cmp	r2, r0
 80083bc:	eb73 0601 	sbcs.w	r6, r3, r1
 80083c0:	d201      	bcs.n	80083c6 <f_write+0x324>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d2:	441a      	add	r2, r3
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083dc:	1ad3      	subs	r3, r2, r3
 80083de:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f47f aea5 	bne.w	8008132 <f_write+0x90>
 80083e8:	e000      	b.n	80083ec <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80083ea:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083f6:	b2da      	uxtb	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	3734      	adds	r7, #52	@ 0x34
 8008404:	46bd      	mov	sp, r7
 8008406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800840a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b09a      	sub	sp, #104	@ 0x68
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8008418:	4611      	mov	r1, r2
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff f990 	bl	8007740 <validate>
 8008420:	4603      	mov	r3, r0
 8008422:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8008426:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800842a:	2b00      	cmp	r3, #0
 800842c:	f040 8105 	bne.w	800863a <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 80fd 	beq.w	800863a <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008446:	b25b      	sxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	da17      	bge.n	800847c <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800844c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800844e:	7858      	ldrb	r0, [r3, #1]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800845a:	2301      	movs	r3, #1
 800845c:	f7fb fef6 	bl	800424c <disk_write>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <f_sync+0x60>
 8008466:	2301      	movs	r3, #1
 8008468:	e0e9      	b.n	800863e <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008474:	b2da      	uxtb	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800847c:	f7fb fe88 	bl	8004190 <get_fattime>
 8008480:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8008482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b04      	cmp	r3, #4
 8008488:	f040 808c 	bne.w	80085a4 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4618      	mov	r0, r3
 8008490:	f7fc ff00 	bl	8005294 <fill_first_frag>
 8008494:	4603      	mov	r3, r0
 8008496:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800849a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a8:	f04f 32ff 	mov.w	r2, #4294967295
 80084ac:	4619      	mov	r1, r3
 80084ae:	f7fc ff20 	bl	80052f2 <fill_last_frag>
 80084b2:	4603      	mov	r3, r0
 80084b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 80084b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f040 80bc 	bne.w	800863a <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	f107 0308 	add.w	r3, r7, #8
 80084c8:	4611      	mov	r1, r2
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fd fe42 	bl	8006154 <load_obj_dir>
 80084d0:	4603      	mov	r3, r0
 80084d2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 80084d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f040 80ad 	bne.w	800863a <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 80084e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	3304      	adds	r3, #4
 80084e6:	781a      	ldrb	r2, [r3, #0]
 80084e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	3304      	adds	r3, #4
 80084ee:	f042 0220 	orr.w	r2, r2, #32
 80084f2:	b2d2      	uxtb	r2, r2
 80084f4:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	79da      	ldrb	r2, [r3, #7]
 80084fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	3321      	adds	r3, #33	@ 0x21
 8008500:	f042 0201 	orr.w	r2, r2, #1
 8008504:	b2d2      	uxtb	r2, r2
 8008506:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8008508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	4619      	mov	r1, r3
 8008516:	4610      	mov	r0, r2
 8008518:	f7fc f82f 	bl	800457a <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800851c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800852a:	4608      	mov	r0, r1
 800852c:	f7fc f851 	bl	80045d2 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8008530:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800853e:	4608      	mov	r0, r1
 8008540:	f7fc f847 	bl	80045d2 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8008544:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	330c      	adds	r3, #12
 800854a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800854c:	4618      	mov	r0, r3
 800854e:	f7fc f814 	bl	800457a <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8008552:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	3315      	adds	r3, #21
 8008558:	2200      	movs	r2, #0
 800855a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800855c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	3310      	adds	r3, #16
 8008562:	2100      	movs	r1, #0
 8008564:	4618      	mov	r0, r3
 8008566:	f7fc f808 	bl	800457a <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800856a:	f107 0308 	add.w	r3, r7, #8
 800856e:	4618      	mov	r0, r3
 8008570:	f7fd fe26 	bl	80061c0 <store_xdir>
 8008574:	4603      	mov	r3, r0
 8008576:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800857a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800857e:	2b00      	cmp	r3, #0
 8008580:	d15b      	bne.n	800863a <f_sync+0x230>
							res = sync_fs(fs);
 8008582:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008584:	4618      	mov	r0, r3
 8008586:	f7fc fb09 	bl	8004b9c <sync_fs>
 800858a:	4603      	mov	r3, r0
 800858c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800859a:	b2da      	uxtb	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 80085a2:	e04a      	b.n	800863a <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80085a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085aa:	4619      	mov	r1, r3
 80085ac:	4610      	mov	r0, r2
 80085ae:	f7fc fac7 	bl	8004b40 <move_window>
 80085b2:	4603      	mov	r3, r0
 80085b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 80085b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d13c      	bne.n	800863a <f_sync+0x230>
					dir = fp->dir_ptr;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80085c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085c8:	330b      	adds	r3, #11
 80085ca:	781a      	ldrb	r2, [r3, #0]
 80085cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085ce:	330b      	adds	r3, #11
 80085d0:	f042 0220 	orr.w	r2, r2, #32
 80085d4:	b2d2      	uxtb	r2, r2
 80085d6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	461a      	mov	r2, r3
 80085e2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80085e4:	f7fd fa85 	bl	8005af2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80085e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085ea:	f103 001c 	add.w	r0, r3, #28
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80085f4:	4613      	mov	r3, r2
 80085f6:	4619      	mov	r1, r3
 80085f8:	f7fb ffbf 	bl	800457a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80085fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085fe:	3316      	adds	r3, #22
 8008600:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008602:	4618      	mov	r0, r3
 8008604:	f7fb ffb9 	bl	800457a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008608:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800860a:	3312      	adds	r3, #18
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f7fb ff98 	bl	8004544 <st_word>
					fs->wflag = 1;
 8008614:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008616:	2201      	movs	r2, #1
 8008618:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800861a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800861c:	4618      	mov	r0, r3
 800861e:	f7fc fabd 	bl	8004b9c <sync_fs>
 8008622:	4603      	mov	r3, r0
 8008624:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800862e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008632:	b2da      	uxtb	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800863a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800863e:	4618      	mov	r0, r3
 8008640:	3768      	adds	r7, #104	@ 0x68
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7ff fedb 	bl	800840a <f_sync>
 8008654:	4603      	mov	r3, r0
 8008656:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d118      	bne.n	8008690 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f107 0208 	add.w	r2, r7, #8
 8008664:	4611      	mov	r1, r2
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff f86a 	bl	8007740 <validate>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10c      	bne.n	8008690 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867a:	4618      	mov	r0, r3
 800867c:	f7fc f9bc 	bl	80049f8 <dec_lock>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d102      	bne.n	8008690 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800869c:	b480      	push	{r7}
 800869e:	b087      	sub	sp, #28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	4613      	mov	r3, r2
 80086a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80086aa:	2301      	movs	r3, #1
 80086ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80086b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008730 <FATFS_LinkDriverEx+0x94>)
 80086b4:	7a5b      	ldrb	r3, [r3, #9]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d131      	bne.n	8008720 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80086bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008730 <FATFS_LinkDriverEx+0x94>)
 80086be:	7a5b      	ldrb	r3, [r3, #9]
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	461a      	mov	r2, r3
 80086c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008730 <FATFS_LinkDriverEx+0x94>)
 80086c6:	2100      	movs	r1, #0
 80086c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80086ca:	4b19      	ldr	r3, [pc, #100]	@ (8008730 <FATFS_LinkDriverEx+0x94>)
 80086cc:	7a5b      	ldrb	r3, [r3, #9]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	4a17      	ldr	r2, [pc, #92]	@ (8008730 <FATFS_LinkDriverEx+0x94>)
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80086da:	4b15      	ldr	r3, [pc, #84]	@ (8008730 <FATFS_LinkDriverEx+0x94>)
 80086dc:	7a5b      	ldrb	r3, [r3, #9]
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	461a      	mov	r2, r3
 80086e2:	4b13      	ldr	r3, [pc, #76]	@ (8008730 <FATFS_LinkDriverEx+0x94>)
 80086e4:	4413      	add	r3, r2
 80086e6:	79fa      	ldrb	r2, [r7, #7]
 80086e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80086ea:	4b11      	ldr	r3, [pc, #68]	@ (8008730 <FATFS_LinkDriverEx+0x94>)
 80086ec:	7a5b      	ldrb	r3, [r3, #9]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	b2d1      	uxtb	r1, r2
 80086f4:	4a0e      	ldr	r2, [pc, #56]	@ (8008730 <FATFS_LinkDriverEx+0x94>)
 80086f6:	7251      	strb	r1, [r2, #9]
 80086f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80086fa:	7dbb      	ldrb	r3, [r7, #22]
 80086fc:	3330      	adds	r3, #48	@ 0x30
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	3301      	adds	r3, #1
 8008708:	223a      	movs	r2, #58	@ 0x3a
 800870a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	3302      	adds	r3, #2
 8008710:	222f      	movs	r2, #47	@ 0x2f
 8008712:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	3303      	adds	r3, #3
 8008718:	2200      	movs	r2, #0
 800871a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008720:	7dfb      	ldrb	r3, [r7, #23]
}
 8008722:	4618      	mov	r0, r3
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20006f98 	.word	0x20006f98

08008734 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800873e:	2200      	movs	r2, #0
 8008740:	6839      	ldr	r1, [r7, #0]
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7ff ffaa 	bl	800869c <FATFS_LinkDriverEx>
 8008748:	4603      	mov	r3, r0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	4603      	mov	r3, r0
 800875c:	6039      	str	r1, [r7, #0]
 800875e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008760:	88fb      	ldrh	r3, [r7, #6]
 8008762:	2b7f      	cmp	r3, #127	@ 0x7f
 8008764:	d802      	bhi.n	800876c <ff_convert+0x18>
		c = chr;
 8008766:	88fb      	ldrh	r3, [r7, #6]
 8008768:	81fb      	strh	r3, [r7, #14]
 800876a:	e025      	b.n	80087b8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00b      	beq.n	800878a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008772:	88fb      	ldrh	r3, [r7, #6]
 8008774:	2bff      	cmp	r3, #255	@ 0xff
 8008776:	d805      	bhi.n	8008784 <ff_convert+0x30>
 8008778:	88fb      	ldrh	r3, [r7, #6]
 800877a:	3b80      	subs	r3, #128	@ 0x80
 800877c:	4a12      	ldr	r2, [pc, #72]	@ (80087c8 <ff_convert+0x74>)
 800877e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008782:	e000      	b.n	8008786 <ff_convert+0x32>
 8008784:	2300      	movs	r3, #0
 8008786:	81fb      	strh	r3, [r7, #14]
 8008788:	e016      	b.n	80087b8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800878a:	2300      	movs	r3, #0
 800878c:	81fb      	strh	r3, [r7, #14]
 800878e:	e009      	b.n	80087a4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008790:	89fb      	ldrh	r3, [r7, #14]
 8008792:	4a0d      	ldr	r2, [pc, #52]	@ (80087c8 <ff_convert+0x74>)
 8008794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008798:	88fa      	ldrh	r2, [r7, #6]
 800879a:	429a      	cmp	r2, r3
 800879c:	d006      	beq.n	80087ac <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800879e:	89fb      	ldrh	r3, [r7, #14]
 80087a0:	3301      	adds	r3, #1
 80087a2:	81fb      	strh	r3, [r7, #14]
 80087a4:	89fb      	ldrh	r3, [r7, #14]
 80087a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80087a8:	d9f2      	bls.n	8008790 <ff_convert+0x3c>
 80087aa:	e000      	b.n	80087ae <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80087ac:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80087ae:	89fb      	ldrh	r3, [r7, #14]
 80087b0:	3380      	adds	r3, #128	@ 0x80
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80087b8:	89fb      	ldrh	r3, [r7, #14]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	0800d280 	.word	0x0800d280

080087cc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80087d6:	88fb      	ldrh	r3, [r7, #6]
 80087d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087dc:	d201      	bcs.n	80087e2 <ff_wtoupper+0x16>
 80087de:	4b3e      	ldr	r3, [pc, #248]	@ (80088d8 <ff_wtoupper+0x10c>)
 80087e0:	e000      	b.n	80087e4 <ff_wtoupper+0x18>
 80087e2:	4b3e      	ldr	r3, [pc, #248]	@ (80088dc <ff_wtoupper+0x110>)
 80087e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	1c9a      	adds	r2, r3, #2
 80087ea:	617a      	str	r2, [r7, #20]
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80087f0:	8a7b      	ldrh	r3, [r7, #18]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d068      	beq.n	80088c8 <ff_wtoupper+0xfc>
 80087f6:	88fa      	ldrh	r2, [r7, #6]
 80087f8:	8a7b      	ldrh	r3, [r7, #18]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d364      	bcc.n	80088c8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	1c9a      	adds	r2, r3, #2
 8008802:	617a      	str	r2, [r7, #20]
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	823b      	strh	r3, [r7, #16]
 8008808:	8a3b      	ldrh	r3, [r7, #16]
 800880a:	0a1b      	lsrs	r3, r3, #8
 800880c:	81fb      	strh	r3, [r7, #14]
 800880e:	8a3b      	ldrh	r3, [r7, #16]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008814:	88fa      	ldrh	r2, [r7, #6]
 8008816:	8a79      	ldrh	r1, [r7, #18]
 8008818:	8a3b      	ldrh	r3, [r7, #16]
 800881a:	440b      	add	r3, r1
 800881c:	429a      	cmp	r2, r3
 800881e:	da49      	bge.n	80088b4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008820:	89fb      	ldrh	r3, [r7, #14]
 8008822:	2b08      	cmp	r3, #8
 8008824:	d84f      	bhi.n	80088c6 <ff_wtoupper+0xfa>
 8008826:	a201      	add	r2, pc, #4	@ (adr r2, 800882c <ff_wtoupper+0x60>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	08008851 	.word	0x08008851
 8008830:	08008863 	.word	0x08008863
 8008834:	08008879 	.word	0x08008879
 8008838:	08008881 	.word	0x08008881
 800883c:	08008889 	.word	0x08008889
 8008840:	08008891 	.word	0x08008891
 8008844:	08008899 	.word	0x08008899
 8008848:	080088a1 	.word	0x080088a1
 800884c:	080088a9 	.word	0x080088a9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008850:	88fa      	ldrh	r2, [r7, #6]
 8008852:	8a7b      	ldrh	r3, [r7, #18]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	005b      	lsls	r3, r3, #1
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	4413      	add	r3, r2
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	80fb      	strh	r3, [r7, #6]
 8008860:	e027      	b.n	80088b2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008862:	88fa      	ldrh	r2, [r7, #6]
 8008864:	8a7b      	ldrh	r3, [r7, #18]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	b29b      	uxth	r3, r3
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	b29b      	uxth	r3, r3
 8008870:	88fa      	ldrh	r2, [r7, #6]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	80fb      	strh	r3, [r7, #6]
 8008876:	e01c      	b.n	80088b2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008878:	88fb      	ldrh	r3, [r7, #6]
 800887a:	3b10      	subs	r3, #16
 800887c:	80fb      	strh	r3, [r7, #6]
 800887e:	e018      	b.n	80088b2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008880:	88fb      	ldrh	r3, [r7, #6]
 8008882:	3b20      	subs	r3, #32
 8008884:	80fb      	strh	r3, [r7, #6]
 8008886:	e014      	b.n	80088b2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008888:	88fb      	ldrh	r3, [r7, #6]
 800888a:	3b30      	subs	r3, #48	@ 0x30
 800888c:	80fb      	strh	r3, [r7, #6]
 800888e:	e010      	b.n	80088b2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008890:	88fb      	ldrh	r3, [r7, #6]
 8008892:	3b1a      	subs	r3, #26
 8008894:	80fb      	strh	r3, [r7, #6]
 8008896:	e00c      	b.n	80088b2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008898:	88fb      	ldrh	r3, [r7, #6]
 800889a:	3308      	adds	r3, #8
 800889c:	80fb      	strh	r3, [r7, #6]
 800889e:	e008      	b.n	80088b2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80088a0:	88fb      	ldrh	r3, [r7, #6]
 80088a2:	3b50      	subs	r3, #80	@ 0x50
 80088a4:	80fb      	strh	r3, [r7, #6]
 80088a6:	e004      	b.n	80088b2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80088a8:	88fb      	ldrh	r3, [r7, #6]
 80088aa:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 80088ae:	80fb      	strh	r3, [r7, #6]
 80088b0:	bf00      	nop
			}
			break;
 80088b2:	e008      	b.n	80088c6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80088b4:	89fb      	ldrh	r3, [r7, #14]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d195      	bne.n	80087e6 <ff_wtoupper+0x1a>
 80088ba:	8a3b      	ldrh	r3, [r7, #16]
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	4413      	add	r3, r2
 80088c2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80088c4:	e78f      	b.n	80087e6 <ff_wtoupper+0x1a>
			break;
 80088c6:	bf00      	nop
	}

	return chr;
 80088c8:	88fb      	ldrh	r3, [r7, #6]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	0800d380 	.word	0x0800d380
 80088dc:	0800d574 	.word	0x0800d574

080088e0 <sulp>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	4604      	mov	r4, r0
 80088e4:	460d      	mov	r5, r1
 80088e6:	ec45 4b10 	vmov	d0, r4, r5
 80088ea:	4616      	mov	r6, r2
 80088ec:	f003 fd2c 	bl	800c348 <__ulp>
 80088f0:	ec51 0b10 	vmov	r0, r1, d0
 80088f4:	b17e      	cbz	r6, 8008916 <sulp+0x36>
 80088f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80088fa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80088fe:	2b00      	cmp	r3, #0
 8008900:	dd09      	ble.n	8008916 <sulp+0x36>
 8008902:	051b      	lsls	r3, r3, #20
 8008904:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008908:	2400      	movs	r4, #0
 800890a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800890e:	4622      	mov	r2, r4
 8008910:	462b      	mov	r3, r5
 8008912:	f7f7 fe91 	bl	8000638 <__aeabi_dmul>
 8008916:	ec41 0b10 	vmov	d0, r0, r1
 800891a:	bd70      	pop	{r4, r5, r6, pc}
 800891c:	0000      	movs	r0, r0
	...

08008920 <_strtod_l>:
 8008920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	b09f      	sub	sp, #124	@ 0x7c
 8008926:	460c      	mov	r4, r1
 8008928:	9217      	str	r2, [sp, #92]	@ 0x5c
 800892a:	2200      	movs	r2, #0
 800892c:	921a      	str	r2, [sp, #104]	@ 0x68
 800892e:	9005      	str	r0, [sp, #20]
 8008930:	f04f 0a00 	mov.w	sl, #0
 8008934:	f04f 0b00 	mov.w	fp, #0
 8008938:	460a      	mov	r2, r1
 800893a:	9219      	str	r2, [sp, #100]	@ 0x64
 800893c:	7811      	ldrb	r1, [r2, #0]
 800893e:	292b      	cmp	r1, #43	@ 0x2b
 8008940:	d04a      	beq.n	80089d8 <_strtod_l+0xb8>
 8008942:	d838      	bhi.n	80089b6 <_strtod_l+0x96>
 8008944:	290d      	cmp	r1, #13
 8008946:	d832      	bhi.n	80089ae <_strtod_l+0x8e>
 8008948:	2908      	cmp	r1, #8
 800894a:	d832      	bhi.n	80089b2 <_strtod_l+0x92>
 800894c:	2900      	cmp	r1, #0
 800894e:	d03b      	beq.n	80089c8 <_strtod_l+0xa8>
 8008950:	2200      	movs	r2, #0
 8008952:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008954:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008956:	782a      	ldrb	r2, [r5, #0]
 8008958:	2a30      	cmp	r2, #48	@ 0x30
 800895a:	f040 80b3 	bne.w	8008ac4 <_strtod_l+0x1a4>
 800895e:	786a      	ldrb	r2, [r5, #1]
 8008960:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008964:	2a58      	cmp	r2, #88	@ 0x58
 8008966:	d16e      	bne.n	8008a46 <_strtod_l+0x126>
 8008968:	9302      	str	r3, [sp, #8]
 800896a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	4a8e      	ldr	r2, [pc, #568]	@ (8008bac <_strtod_l+0x28c>)
 8008974:	9805      	ldr	r0, [sp, #20]
 8008976:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008978:	a919      	add	r1, sp, #100	@ 0x64
 800897a:	f002 fdd7 	bl	800b52c <__gethex>
 800897e:	f010 060f 	ands.w	r6, r0, #15
 8008982:	4604      	mov	r4, r0
 8008984:	d005      	beq.n	8008992 <_strtod_l+0x72>
 8008986:	2e06      	cmp	r6, #6
 8008988:	d128      	bne.n	80089dc <_strtod_l+0xbc>
 800898a:	3501      	adds	r5, #1
 800898c:	2300      	movs	r3, #0
 800898e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008990:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008992:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008994:	2b00      	cmp	r3, #0
 8008996:	f040 858e 	bne.w	80094b6 <_strtod_l+0xb96>
 800899a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800899c:	b1cb      	cbz	r3, 80089d2 <_strtod_l+0xb2>
 800899e:	4652      	mov	r2, sl
 80089a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80089a4:	ec43 2b10 	vmov	d0, r2, r3
 80089a8:	b01f      	add	sp, #124	@ 0x7c
 80089aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ae:	2920      	cmp	r1, #32
 80089b0:	d1ce      	bne.n	8008950 <_strtod_l+0x30>
 80089b2:	3201      	adds	r2, #1
 80089b4:	e7c1      	b.n	800893a <_strtod_l+0x1a>
 80089b6:	292d      	cmp	r1, #45	@ 0x2d
 80089b8:	d1ca      	bne.n	8008950 <_strtod_l+0x30>
 80089ba:	2101      	movs	r1, #1
 80089bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80089be:	1c51      	adds	r1, r2, #1
 80089c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80089c2:	7852      	ldrb	r2, [r2, #1]
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	d1c5      	bne.n	8008954 <_strtod_l+0x34>
 80089c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f040 8570 	bne.w	80094b2 <_strtod_l+0xb92>
 80089d2:	4652      	mov	r2, sl
 80089d4:	465b      	mov	r3, fp
 80089d6:	e7e5      	b.n	80089a4 <_strtod_l+0x84>
 80089d8:	2100      	movs	r1, #0
 80089da:	e7ef      	b.n	80089bc <_strtod_l+0x9c>
 80089dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80089de:	b13a      	cbz	r2, 80089f0 <_strtod_l+0xd0>
 80089e0:	2135      	movs	r1, #53	@ 0x35
 80089e2:	a81c      	add	r0, sp, #112	@ 0x70
 80089e4:	f003 fdaa 	bl	800c53c <__copybits>
 80089e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089ea:	9805      	ldr	r0, [sp, #20]
 80089ec:	f003 f978 	bl	800bce0 <_Bfree>
 80089f0:	3e01      	subs	r6, #1
 80089f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80089f4:	2e04      	cmp	r6, #4
 80089f6:	d806      	bhi.n	8008a06 <_strtod_l+0xe6>
 80089f8:	e8df f006 	tbb	[pc, r6]
 80089fc:	201d0314 	.word	0x201d0314
 8008a00:	14          	.byte	0x14
 8008a01:	00          	.byte	0x00
 8008a02:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008a06:	05e1      	lsls	r1, r4, #23
 8008a08:	bf48      	it	mi
 8008a0a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008a0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a12:	0d1b      	lsrs	r3, r3, #20
 8008a14:	051b      	lsls	r3, r3, #20
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1bb      	bne.n	8008992 <_strtod_l+0x72>
 8008a1a:	f001 fe21 	bl	800a660 <__errno>
 8008a1e:	2322      	movs	r3, #34	@ 0x22
 8008a20:	6003      	str	r3, [r0, #0]
 8008a22:	e7b6      	b.n	8008992 <_strtod_l+0x72>
 8008a24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008a28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008a2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008a30:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a34:	e7e7      	b.n	8008a06 <_strtod_l+0xe6>
 8008a36:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008bb4 <_strtod_l+0x294>
 8008a3a:	e7e4      	b.n	8008a06 <_strtod_l+0xe6>
 8008a3c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008a40:	f04f 3aff 	mov.w	sl, #4294967295
 8008a44:	e7df      	b.n	8008a06 <_strtod_l+0xe6>
 8008a46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a48:	1c5a      	adds	r2, r3, #1
 8008a4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a4c:	785b      	ldrb	r3, [r3, #1]
 8008a4e:	2b30      	cmp	r3, #48	@ 0x30
 8008a50:	d0f9      	beq.n	8008a46 <_strtod_l+0x126>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d09d      	beq.n	8008992 <_strtod_l+0x72>
 8008a56:	2301      	movs	r3, #1
 8008a58:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9308      	str	r3, [sp, #32]
 8008a62:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a64:	461f      	mov	r7, r3
 8008a66:	220a      	movs	r2, #10
 8008a68:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008a6a:	7805      	ldrb	r5, [r0, #0]
 8008a6c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008a70:	b2d9      	uxtb	r1, r3
 8008a72:	2909      	cmp	r1, #9
 8008a74:	d928      	bls.n	8008ac8 <_strtod_l+0x1a8>
 8008a76:	494e      	ldr	r1, [pc, #312]	@ (8008bb0 <_strtod_l+0x290>)
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f001 fd38 	bl	800a4ee <strncmp>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d032      	beq.n	8008ae8 <_strtod_l+0x1c8>
 8008a82:	2000      	movs	r0, #0
 8008a84:	462a      	mov	r2, r5
 8008a86:	4681      	mov	r9, r0
 8008a88:	463d      	mov	r5, r7
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2a65      	cmp	r2, #101	@ 0x65
 8008a8e:	d001      	beq.n	8008a94 <_strtod_l+0x174>
 8008a90:	2a45      	cmp	r2, #69	@ 0x45
 8008a92:	d114      	bne.n	8008abe <_strtod_l+0x19e>
 8008a94:	b91d      	cbnz	r5, 8008a9e <_strtod_l+0x17e>
 8008a96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a98:	4302      	orrs	r2, r0
 8008a9a:	d095      	beq.n	80089c8 <_strtod_l+0xa8>
 8008a9c:	2500      	movs	r5, #0
 8008a9e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008aa0:	1c62      	adds	r2, r4, #1
 8008aa2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008aa4:	7862      	ldrb	r2, [r4, #1]
 8008aa6:	2a2b      	cmp	r2, #43	@ 0x2b
 8008aa8:	d077      	beq.n	8008b9a <_strtod_l+0x27a>
 8008aaa:	2a2d      	cmp	r2, #45	@ 0x2d
 8008aac:	d07b      	beq.n	8008ba6 <_strtod_l+0x286>
 8008aae:	f04f 0c00 	mov.w	ip, #0
 8008ab2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008ab6:	2909      	cmp	r1, #9
 8008ab8:	f240 8082 	bls.w	8008bc0 <_strtod_l+0x2a0>
 8008abc:	9419      	str	r4, [sp, #100]	@ 0x64
 8008abe:	f04f 0800 	mov.w	r8, #0
 8008ac2:	e0a2      	b.n	8008c0a <_strtod_l+0x2ea>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	e7c7      	b.n	8008a58 <_strtod_l+0x138>
 8008ac8:	2f08      	cmp	r7, #8
 8008aca:	bfd5      	itete	le
 8008acc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008ace:	9908      	ldrgt	r1, [sp, #32]
 8008ad0:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ad4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ad8:	f100 0001 	add.w	r0, r0, #1
 8008adc:	bfd4      	ite	le
 8008ade:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008ae0:	9308      	strgt	r3, [sp, #32]
 8008ae2:	3701      	adds	r7, #1
 8008ae4:	9019      	str	r0, [sp, #100]	@ 0x64
 8008ae6:	e7bf      	b.n	8008a68 <_strtod_l+0x148>
 8008ae8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008aea:	1c5a      	adds	r2, r3, #1
 8008aec:	9219      	str	r2, [sp, #100]	@ 0x64
 8008aee:	785a      	ldrb	r2, [r3, #1]
 8008af0:	b37f      	cbz	r7, 8008b52 <_strtod_l+0x232>
 8008af2:	4681      	mov	r9, r0
 8008af4:	463d      	mov	r5, r7
 8008af6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008afa:	2b09      	cmp	r3, #9
 8008afc:	d912      	bls.n	8008b24 <_strtod_l+0x204>
 8008afe:	2301      	movs	r3, #1
 8008b00:	e7c4      	b.n	8008a8c <_strtod_l+0x16c>
 8008b02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b08:	785a      	ldrb	r2, [r3, #1]
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	2a30      	cmp	r2, #48	@ 0x30
 8008b0e:	d0f8      	beq.n	8008b02 <_strtod_l+0x1e2>
 8008b10:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008b14:	2b08      	cmp	r3, #8
 8008b16:	f200 84d3 	bhi.w	80094c0 <_strtod_l+0xba0>
 8008b1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b1e:	4681      	mov	r9, r0
 8008b20:	2000      	movs	r0, #0
 8008b22:	4605      	mov	r5, r0
 8008b24:	3a30      	subs	r2, #48	@ 0x30
 8008b26:	f100 0301 	add.w	r3, r0, #1
 8008b2a:	d02a      	beq.n	8008b82 <_strtod_l+0x262>
 8008b2c:	4499      	add	r9, r3
 8008b2e:	eb00 0c05 	add.w	ip, r0, r5
 8008b32:	462b      	mov	r3, r5
 8008b34:	210a      	movs	r1, #10
 8008b36:	4563      	cmp	r3, ip
 8008b38:	d10d      	bne.n	8008b56 <_strtod_l+0x236>
 8008b3a:	1c69      	adds	r1, r5, #1
 8008b3c:	4401      	add	r1, r0
 8008b3e:	4428      	add	r0, r5
 8008b40:	2808      	cmp	r0, #8
 8008b42:	dc16      	bgt.n	8008b72 <_strtod_l+0x252>
 8008b44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b46:	230a      	movs	r3, #10
 8008b48:	fb03 2300 	mla	r3, r3, r0, r2
 8008b4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b4e:	2300      	movs	r3, #0
 8008b50:	e018      	b.n	8008b84 <_strtod_l+0x264>
 8008b52:	4638      	mov	r0, r7
 8008b54:	e7da      	b.n	8008b0c <_strtod_l+0x1ec>
 8008b56:	2b08      	cmp	r3, #8
 8008b58:	f103 0301 	add.w	r3, r3, #1
 8008b5c:	dc03      	bgt.n	8008b66 <_strtod_l+0x246>
 8008b5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008b60:	434e      	muls	r6, r1
 8008b62:	960a      	str	r6, [sp, #40]	@ 0x28
 8008b64:	e7e7      	b.n	8008b36 <_strtod_l+0x216>
 8008b66:	2b10      	cmp	r3, #16
 8008b68:	bfde      	ittt	le
 8008b6a:	9e08      	ldrle	r6, [sp, #32]
 8008b6c:	434e      	mulle	r6, r1
 8008b6e:	9608      	strle	r6, [sp, #32]
 8008b70:	e7e1      	b.n	8008b36 <_strtod_l+0x216>
 8008b72:	280f      	cmp	r0, #15
 8008b74:	dceb      	bgt.n	8008b4e <_strtod_l+0x22e>
 8008b76:	9808      	ldr	r0, [sp, #32]
 8008b78:	230a      	movs	r3, #10
 8008b7a:	fb03 2300 	mla	r3, r3, r0, r2
 8008b7e:	9308      	str	r3, [sp, #32]
 8008b80:	e7e5      	b.n	8008b4e <_strtod_l+0x22e>
 8008b82:	4629      	mov	r1, r5
 8008b84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b86:	1c50      	adds	r0, r2, #1
 8008b88:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b8a:	7852      	ldrb	r2, [r2, #1]
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	460d      	mov	r5, r1
 8008b90:	e7b1      	b.n	8008af6 <_strtod_l+0x1d6>
 8008b92:	f04f 0900 	mov.w	r9, #0
 8008b96:	2301      	movs	r3, #1
 8008b98:	e77d      	b.n	8008a96 <_strtod_l+0x176>
 8008b9a:	f04f 0c00 	mov.w	ip, #0
 8008b9e:	1ca2      	adds	r2, r4, #2
 8008ba0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ba2:	78a2      	ldrb	r2, [r4, #2]
 8008ba4:	e785      	b.n	8008ab2 <_strtod_l+0x192>
 8008ba6:	f04f 0c01 	mov.w	ip, #1
 8008baa:	e7f8      	b.n	8008b9e <_strtod_l+0x27e>
 8008bac:	0800d648 	.word	0x0800d648
 8008bb0:	0800d630 	.word	0x0800d630
 8008bb4:	7ff00000 	.word	0x7ff00000
 8008bb8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bba:	1c51      	adds	r1, r2, #1
 8008bbc:	9119      	str	r1, [sp, #100]	@ 0x64
 8008bbe:	7852      	ldrb	r2, [r2, #1]
 8008bc0:	2a30      	cmp	r2, #48	@ 0x30
 8008bc2:	d0f9      	beq.n	8008bb8 <_strtod_l+0x298>
 8008bc4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008bc8:	2908      	cmp	r1, #8
 8008bca:	f63f af78 	bhi.w	8008abe <_strtod_l+0x19e>
 8008bce:	3a30      	subs	r2, #48	@ 0x30
 8008bd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bd4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008bd6:	f04f 080a 	mov.w	r8, #10
 8008bda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008bdc:	1c56      	adds	r6, r2, #1
 8008bde:	9619      	str	r6, [sp, #100]	@ 0x64
 8008be0:	7852      	ldrb	r2, [r2, #1]
 8008be2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008be6:	f1be 0f09 	cmp.w	lr, #9
 8008bea:	d939      	bls.n	8008c60 <_strtod_l+0x340>
 8008bec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008bee:	1a76      	subs	r6, r6, r1
 8008bf0:	2e08      	cmp	r6, #8
 8008bf2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008bf6:	dc03      	bgt.n	8008c00 <_strtod_l+0x2e0>
 8008bf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008bfa:	4588      	cmp	r8, r1
 8008bfc:	bfa8      	it	ge
 8008bfe:	4688      	movge	r8, r1
 8008c00:	f1bc 0f00 	cmp.w	ip, #0
 8008c04:	d001      	beq.n	8008c0a <_strtod_l+0x2ea>
 8008c06:	f1c8 0800 	rsb	r8, r8, #0
 8008c0a:	2d00      	cmp	r5, #0
 8008c0c:	d14e      	bne.n	8008cac <_strtod_l+0x38c>
 8008c0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c10:	4308      	orrs	r0, r1
 8008c12:	f47f aebe 	bne.w	8008992 <_strtod_l+0x72>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f47f aed6 	bne.w	80089c8 <_strtod_l+0xa8>
 8008c1c:	2a69      	cmp	r2, #105	@ 0x69
 8008c1e:	d028      	beq.n	8008c72 <_strtod_l+0x352>
 8008c20:	dc25      	bgt.n	8008c6e <_strtod_l+0x34e>
 8008c22:	2a49      	cmp	r2, #73	@ 0x49
 8008c24:	d025      	beq.n	8008c72 <_strtod_l+0x352>
 8008c26:	2a4e      	cmp	r2, #78	@ 0x4e
 8008c28:	f47f aece 	bne.w	80089c8 <_strtod_l+0xa8>
 8008c2c:	499b      	ldr	r1, [pc, #620]	@ (8008e9c <_strtod_l+0x57c>)
 8008c2e:	a819      	add	r0, sp, #100	@ 0x64
 8008c30:	f002 fe9e 	bl	800b970 <__match>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	f43f aec7 	beq.w	80089c8 <_strtod_l+0xa8>
 8008c3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	2b28      	cmp	r3, #40	@ 0x28
 8008c40:	d12e      	bne.n	8008ca0 <_strtod_l+0x380>
 8008c42:	4997      	ldr	r1, [pc, #604]	@ (8008ea0 <_strtod_l+0x580>)
 8008c44:	aa1c      	add	r2, sp, #112	@ 0x70
 8008c46:	a819      	add	r0, sp, #100	@ 0x64
 8008c48:	f002 fea6 	bl	800b998 <__hexnan>
 8008c4c:	2805      	cmp	r0, #5
 8008c4e:	d127      	bne.n	8008ca0 <_strtod_l+0x380>
 8008c50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008c52:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008c56:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008c5a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008c5e:	e698      	b.n	8008992 <_strtod_l+0x72>
 8008c60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008c62:	fb08 2101 	mla	r1, r8, r1, r2
 8008c66:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008c6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c6c:	e7b5      	b.n	8008bda <_strtod_l+0x2ba>
 8008c6e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008c70:	e7da      	b.n	8008c28 <_strtod_l+0x308>
 8008c72:	498c      	ldr	r1, [pc, #560]	@ (8008ea4 <_strtod_l+0x584>)
 8008c74:	a819      	add	r0, sp, #100	@ 0x64
 8008c76:	f002 fe7b 	bl	800b970 <__match>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	f43f aea4 	beq.w	80089c8 <_strtod_l+0xa8>
 8008c80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c82:	4989      	ldr	r1, [pc, #548]	@ (8008ea8 <_strtod_l+0x588>)
 8008c84:	3b01      	subs	r3, #1
 8008c86:	a819      	add	r0, sp, #100	@ 0x64
 8008c88:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c8a:	f002 fe71 	bl	800b970 <__match>
 8008c8e:	b910      	cbnz	r0, 8008c96 <_strtod_l+0x376>
 8008c90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c92:	3301      	adds	r3, #1
 8008c94:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c96:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008eb8 <_strtod_l+0x598>
 8008c9a:	f04f 0a00 	mov.w	sl, #0
 8008c9e:	e678      	b.n	8008992 <_strtod_l+0x72>
 8008ca0:	4882      	ldr	r0, [pc, #520]	@ (8008eac <_strtod_l+0x58c>)
 8008ca2:	f001 fd19 	bl	800a6d8 <nan>
 8008ca6:	ec5b ab10 	vmov	sl, fp, d0
 8008caa:	e672      	b.n	8008992 <_strtod_l+0x72>
 8008cac:	eba8 0309 	sub.w	r3, r8, r9
 8008cb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cb4:	2f00      	cmp	r7, #0
 8008cb6:	bf08      	it	eq
 8008cb8:	462f      	moveq	r7, r5
 8008cba:	2d10      	cmp	r5, #16
 8008cbc:	462c      	mov	r4, r5
 8008cbe:	bfa8      	it	ge
 8008cc0:	2410      	movge	r4, #16
 8008cc2:	f7f7 fc3f 	bl	8000544 <__aeabi_ui2d>
 8008cc6:	2d09      	cmp	r5, #9
 8008cc8:	4682      	mov	sl, r0
 8008cca:	468b      	mov	fp, r1
 8008ccc:	dc13      	bgt.n	8008cf6 <_strtod_l+0x3d6>
 8008cce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f43f ae5e 	beq.w	8008992 <_strtod_l+0x72>
 8008cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd8:	dd78      	ble.n	8008dcc <_strtod_l+0x4ac>
 8008cda:	2b16      	cmp	r3, #22
 8008cdc:	dc5f      	bgt.n	8008d9e <_strtod_l+0x47e>
 8008cde:	4974      	ldr	r1, [pc, #464]	@ (8008eb0 <_strtod_l+0x590>)
 8008ce0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce8:	4652      	mov	r2, sl
 8008cea:	465b      	mov	r3, fp
 8008cec:	f7f7 fca4 	bl	8000638 <__aeabi_dmul>
 8008cf0:	4682      	mov	sl, r0
 8008cf2:	468b      	mov	fp, r1
 8008cf4:	e64d      	b.n	8008992 <_strtod_l+0x72>
 8008cf6:	4b6e      	ldr	r3, [pc, #440]	@ (8008eb0 <_strtod_l+0x590>)
 8008cf8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008d00:	f7f7 fc9a 	bl	8000638 <__aeabi_dmul>
 8008d04:	4682      	mov	sl, r0
 8008d06:	9808      	ldr	r0, [sp, #32]
 8008d08:	468b      	mov	fp, r1
 8008d0a:	f7f7 fc1b 	bl	8000544 <__aeabi_ui2d>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4650      	mov	r0, sl
 8008d14:	4659      	mov	r1, fp
 8008d16:	f7f7 fad9 	bl	80002cc <__adddf3>
 8008d1a:	2d0f      	cmp	r5, #15
 8008d1c:	4682      	mov	sl, r0
 8008d1e:	468b      	mov	fp, r1
 8008d20:	ddd5      	ble.n	8008cce <_strtod_l+0x3ae>
 8008d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d24:	1b2c      	subs	r4, r5, r4
 8008d26:	441c      	add	r4, r3
 8008d28:	2c00      	cmp	r4, #0
 8008d2a:	f340 8096 	ble.w	8008e5a <_strtod_l+0x53a>
 8008d2e:	f014 030f 	ands.w	r3, r4, #15
 8008d32:	d00a      	beq.n	8008d4a <_strtod_l+0x42a>
 8008d34:	495e      	ldr	r1, [pc, #376]	@ (8008eb0 <_strtod_l+0x590>)
 8008d36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008d3a:	4652      	mov	r2, sl
 8008d3c:	465b      	mov	r3, fp
 8008d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d42:	f7f7 fc79 	bl	8000638 <__aeabi_dmul>
 8008d46:	4682      	mov	sl, r0
 8008d48:	468b      	mov	fp, r1
 8008d4a:	f034 040f 	bics.w	r4, r4, #15
 8008d4e:	d073      	beq.n	8008e38 <_strtod_l+0x518>
 8008d50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008d54:	dd48      	ble.n	8008de8 <_strtod_l+0x4c8>
 8008d56:	2400      	movs	r4, #0
 8008d58:	46a0      	mov	r8, r4
 8008d5a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d5c:	46a1      	mov	r9, r4
 8008d5e:	9a05      	ldr	r2, [sp, #20]
 8008d60:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008eb8 <_strtod_l+0x598>
 8008d64:	2322      	movs	r3, #34	@ 0x22
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	f04f 0a00 	mov.w	sl, #0
 8008d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	f43f ae0f 	beq.w	8008992 <_strtod_l+0x72>
 8008d74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d76:	9805      	ldr	r0, [sp, #20]
 8008d78:	f002 ffb2 	bl	800bce0 <_Bfree>
 8008d7c:	9805      	ldr	r0, [sp, #20]
 8008d7e:	4649      	mov	r1, r9
 8008d80:	f002 ffae 	bl	800bce0 <_Bfree>
 8008d84:	9805      	ldr	r0, [sp, #20]
 8008d86:	4641      	mov	r1, r8
 8008d88:	f002 ffaa 	bl	800bce0 <_Bfree>
 8008d8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008d8e:	9805      	ldr	r0, [sp, #20]
 8008d90:	f002 ffa6 	bl	800bce0 <_Bfree>
 8008d94:	9805      	ldr	r0, [sp, #20]
 8008d96:	4621      	mov	r1, r4
 8008d98:	f002 ffa2 	bl	800bce0 <_Bfree>
 8008d9c:	e5f9      	b.n	8008992 <_strtod_l+0x72>
 8008d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008da0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008da4:	4293      	cmp	r3, r2
 8008da6:	dbbc      	blt.n	8008d22 <_strtod_l+0x402>
 8008da8:	4c41      	ldr	r4, [pc, #260]	@ (8008eb0 <_strtod_l+0x590>)
 8008daa:	f1c5 050f 	rsb	r5, r5, #15
 8008dae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008db2:	4652      	mov	r2, sl
 8008db4:	465b      	mov	r3, fp
 8008db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dba:	f7f7 fc3d 	bl	8000638 <__aeabi_dmul>
 8008dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc0:	1b5d      	subs	r5, r3, r5
 8008dc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008dc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008dca:	e78f      	b.n	8008cec <_strtod_l+0x3cc>
 8008dcc:	3316      	adds	r3, #22
 8008dce:	dba8      	blt.n	8008d22 <_strtod_l+0x402>
 8008dd0:	4b37      	ldr	r3, [pc, #220]	@ (8008eb0 <_strtod_l+0x590>)
 8008dd2:	eba9 0808 	sub.w	r8, r9, r8
 8008dd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008dda:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008dde:	4650      	mov	r0, sl
 8008de0:	4659      	mov	r1, fp
 8008de2:	f7f7 fd53 	bl	800088c <__aeabi_ddiv>
 8008de6:	e783      	b.n	8008cf0 <_strtod_l+0x3d0>
 8008de8:	4b32      	ldr	r3, [pc, #200]	@ (8008eb4 <_strtod_l+0x594>)
 8008dea:	9308      	str	r3, [sp, #32]
 8008dec:	2300      	movs	r3, #0
 8008dee:	1124      	asrs	r4, r4, #4
 8008df0:	4650      	mov	r0, sl
 8008df2:	4659      	mov	r1, fp
 8008df4:	461e      	mov	r6, r3
 8008df6:	2c01      	cmp	r4, #1
 8008df8:	dc21      	bgt.n	8008e3e <_strtod_l+0x51e>
 8008dfa:	b10b      	cbz	r3, 8008e00 <_strtod_l+0x4e0>
 8008dfc:	4682      	mov	sl, r0
 8008dfe:	468b      	mov	fp, r1
 8008e00:	492c      	ldr	r1, [pc, #176]	@ (8008eb4 <_strtod_l+0x594>)
 8008e02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008e06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008e0a:	4652      	mov	r2, sl
 8008e0c:	465b      	mov	r3, fp
 8008e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e12:	f7f7 fc11 	bl	8000638 <__aeabi_dmul>
 8008e16:	4b28      	ldr	r3, [pc, #160]	@ (8008eb8 <_strtod_l+0x598>)
 8008e18:	460a      	mov	r2, r1
 8008e1a:	400b      	ands	r3, r1
 8008e1c:	4927      	ldr	r1, [pc, #156]	@ (8008ebc <_strtod_l+0x59c>)
 8008e1e:	428b      	cmp	r3, r1
 8008e20:	4682      	mov	sl, r0
 8008e22:	d898      	bhi.n	8008d56 <_strtod_l+0x436>
 8008e24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008e28:	428b      	cmp	r3, r1
 8008e2a:	bf86      	itte	hi
 8008e2c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008ec0 <_strtod_l+0x5a0>
 8008e30:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9308      	str	r3, [sp, #32]
 8008e3c:	e07a      	b.n	8008f34 <_strtod_l+0x614>
 8008e3e:	07e2      	lsls	r2, r4, #31
 8008e40:	d505      	bpl.n	8008e4e <_strtod_l+0x52e>
 8008e42:	9b08      	ldr	r3, [sp, #32]
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 fbf6 	bl	8000638 <__aeabi_dmul>
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	9a08      	ldr	r2, [sp, #32]
 8008e50:	3208      	adds	r2, #8
 8008e52:	3601      	adds	r6, #1
 8008e54:	1064      	asrs	r4, r4, #1
 8008e56:	9208      	str	r2, [sp, #32]
 8008e58:	e7cd      	b.n	8008df6 <_strtod_l+0x4d6>
 8008e5a:	d0ed      	beq.n	8008e38 <_strtod_l+0x518>
 8008e5c:	4264      	negs	r4, r4
 8008e5e:	f014 020f 	ands.w	r2, r4, #15
 8008e62:	d00a      	beq.n	8008e7a <_strtod_l+0x55a>
 8008e64:	4b12      	ldr	r3, [pc, #72]	@ (8008eb0 <_strtod_l+0x590>)
 8008e66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e6a:	4650      	mov	r0, sl
 8008e6c:	4659      	mov	r1, fp
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	f7f7 fd0b 	bl	800088c <__aeabi_ddiv>
 8008e76:	4682      	mov	sl, r0
 8008e78:	468b      	mov	fp, r1
 8008e7a:	1124      	asrs	r4, r4, #4
 8008e7c:	d0dc      	beq.n	8008e38 <_strtod_l+0x518>
 8008e7e:	2c1f      	cmp	r4, #31
 8008e80:	dd20      	ble.n	8008ec4 <_strtod_l+0x5a4>
 8008e82:	2400      	movs	r4, #0
 8008e84:	46a0      	mov	r8, r4
 8008e86:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e88:	46a1      	mov	r9, r4
 8008e8a:	9a05      	ldr	r2, [sp, #20]
 8008e8c:	2322      	movs	r3, #34	@ 0x22
 8008e8e:	f04f 0a00 	mov.w	sl, #0
 8008e92:	f04f 0b00 	mov.w	fp, #0
 8008e96:	6013      	str	r3, [r2, #0]
 8008e98:	e768      	b.n	8008d6c <_strtod_l+0x44c>
 8008e9a:	bf00      	nop
 8008e9c:	0800d695 	.word	0x0800d695
 8008ea0:	0800d634 	.word	0x0800d634
 8008ea4:	0800d68d 	.word	0x0800d68d
 8008ea8:	0800d779 	.word	0x0800d779
 8008eac:	0800d775 	.word	0x0800d775
 8008eb0:	0800d8e0 	.word	0x0800d8e0
 8008eb4:	0800d8b8 	.word	0x0800d8b8
 8008eb8:	7ff00000 	.word	0x7ff00000
 8008ebc:	7ca00000 	.word	0x7ca00000
 8008ec0:	7fefffff 	.word	0x7fefffff
 8008ec4:	f014 0310 	ands.w	r3, r4, #16
 8008ec8:	bf18      	it	ne
 8008eca:	236a      	movne	r3, #106	@ 0x6a
 8008ecc:	4ea9      	ldr	r6, [pc, #676]	@ (8009174 <_strtod_l+0x854>)
 8008ece:	9308      	str	r3, [sp, #32]
 8008ed0:	4650      	mov	r0, sl
 8008ed2:	4659      	mov	r1, fp
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	07e2      	lsls	r2, r4, #31
 8008ed8:	d504      	bpl.n	8008ee4 <_strtod_l+0x5c4>
 8008eda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ede:	f7f7 fbab 	bl	8000638 <__aeabi_dmul>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	1064      	asrs	r4, r4, #1
 8008ee6:	f106 0608 	add.w	r6, r6, #8
 8008eea:	d1f4      	bne.n	8008ed6 <_strtod_l+0x5b6>
 8008eec:	b10b      	cbz	r3, 8008ef2 <_strtod_l+0x5d2>
 8008eee:	4682      	mov	sl, r0
 8008ef0:	468b      	mov	fp, r1
 8008ef2:	9b08      	ldr	r3, [sp, #32]
 8008ef4:	b1b3      	cbz	r3, 8008f24 <_strtod_l+0x604>
 8008ef6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008efa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	4659      	mov	r1, fp
 8008f02:	dd0f      	ble.n	8008f24 <_strtod_l+0x604>
 8008f04:	2b1f      	cmp	r3, #31
 8008f06:	dd55      	ble.n	8008fb4 <_strtod_l+0x694>
 8008f08:	2b34      	cmp	r3, #52	@ 0x34
 8008f0a:	bfde      	ittt	le
 8008f0c:	f04f 33ff 	movle.w	r3, #4294967295
 8008f10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008f14:	4093      	lslle	r3, r2
 8008f16:	f04f 0a00 	mov.w	sl, #0
 8008f1a:	bfcc      	ite	gt
 8008f1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008f20:	ea03 0b01 	andle.w	fp, r3, r1
 8008f24:	2200      	movs	r2, #0
 8008f26:	2300      	movs	r3, #0
 8008f28:	4650      	mov	r0, sl
 8008f2a:	4659      	mov	r1, fp
 8008f2c:	f7f7 fdec 	bl	8000b08 <__aeabi_dcmpeq>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	d1a6      	bne.n	8008e82 <_strtod_l+0x562>
 8008f34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008f3a:	9805      	ldr	r0, [sp, #20]
 8008f3c:	462b      	mov	r3, r5
 8008f3e:	463a      	mov	r2, r7
 8008f40:	f002 ff36 	bl	800bdb0 <__s2b>
 8008f44:	900a      	str	r0, [sp, #40]	@ 0x28
 8008f46:	2800      	cmp	r0, #0
 8008f48:	f43f af05 	beq.w	8008d56 <_strtod_l+0x436>
 8008f4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	eba9 0308 	sub.w	r3, r9, r8
 8008f54:	bfa8      	it	ge
 8008f56:	2300      	movge	r3, #0
 8008f58:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f5a:	2400      	movs	r4, #0
 8008f5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f60:	9316      	str	r3, [sp, #88]	@ 0x58
 8008f62:	46a0      	mov	r8, r4
 8008f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f66:	9805      	ldr	r0, [sp, #20]
 8008f68:	6859      	ldr	r1, [r3, #4]
 8008f6a:	f002 fe79 	bl	800bc60 <_Balloc>
 8008f6e:	4681      	mov	r9, r0
 8008f70:	2800      	cmp	r0, #0
 8008f72:	f43f aef4 	beq.w	8008d5e <_strtod_l+0x43e>
 8008f76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f78:	691a      	ldr	r2, [r3, #16]
 8008f7a:	3202      	adds	r2, #2
 8008f7c:	f103 010c 	add.w	r1, r3, #12
 8008f80:	0092      	lsls	r2, r2, #2
 8008f82:	300c      	adds	r0, #12
 8008f84:	f001 fb99 	bl	800a6ba <memcpy>
 8008f88:	ec4b ab10 	vmov	d0, sl, fp
 8008f8c:	9805      	ldr	r0, [sp, #20]
 8008f8e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f90:	a91b      	add	r1, sp, #108	@ 0x6c
 8008f92:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008f96:	f003 fa47 	bl	800c428 <__d2b>
 8008f9a:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	f43f aede 	beq.w	8008d5e <_strtod_l+0x43e>
 8008fa2:	9805      	ldr	r0, [sp, #20]
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	f002 ff99 	bl	800bedc <__i2b>
 8008faa:	4680      	mov	r8, r0
 8008fac:	b948      	cbnz	r0, 8008fc2 <_strtod_l+0x6a2>
 8008fae:	f04f 0800 	mov.w	r8, #0
 8008fb2:	e6d4      	b.n	8008d5e <_strtod_l+0x43e>
 8008fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbc:	ea03 0a0a 	and.w	sl, r3, sl
 8008fc0:	e7b0      	b.n	8008f24 <_strtod_l+0x604>
 8008fc2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008fc4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	bfab      	itete	ge
 8008fca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008fcc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008fce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008fd0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008fd2:	bfac      	ite	ge
 8008fd4:	18ef      	addge	r7, r5, r3
 8008fd6:	1b5e      	sublt	r6, r3, r5
 8008fd8:	9b08      	ldr	r3, [sp, #32]
 8008fda:	1aed      	subs	r5, r5, r3
 8008fdc:	4415      	add	r5, r2
 8008fde:	4b66      	ldr	r3, [pc, #408]	@ (8009178 <_strtod_l+0x858>)
 8008fe0:	3d01      	subs	r5, #1
 8008fe2:	429d      	cmp	r5, r3
 8008fe4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008fe8:	da50      	bge.n	800908c <_strtod_l+0x76c>
 8008fea:	1b5b      	subs	r3, r3, r5
 8008fec:	2b1f      	cmp	r3, #31
 8008fee:	eba2 0203 	sub.w	r2, r2, r3
 8008ff2:	f04f 0101 	mov.w	r1, #1
 8008ff6:	dc3d      	bgt.n	8009074 <_strtod_l+0x754>
 8008ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ffc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ffe:	2300      	movs	r3, #0
 8009000:	9310      	str	r3, [sp, #64]	@ 0x40
 8009002:	18bd      	adds	r5, r7, r2
 8009004:	9b08      	ldr	r3, [sp, #32]
 8009006:	42af      	cmp	r7, r5
 8009008:	4416      	add	r6, r2
 800900a:	441e      	add	r6, r3
 800900c:	463b      	mov	r3, r7
 800900e:	bfa8      	it	ge
 8009010:	462b      	movge	r3, r5
 8009012:	42b3      	cmp	r3, r6
 8009014:	bfa8      	it	ge
 8009016:	4633      	movge	r3, r6
 8009018:	2b00      	cmp	r3, #0
 800901a:	bfc2      	ittt	gt
 800901c:	1aed      	subgt	r5, r5, r3
 800901e:	1af6      	subgt	r6, r6, r3
 8009020:	1aff      	subgt	r7, r7, r3
 8009022:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009024:	2b00      	cmp	r3, #0
 8009026:	dd16      	ble.n	8009056 <_strtod_l+0x736>
 8009028:	4641      	mov	r1, r8
 800902a:	9805      	ldr	r0, [sp, #20]
 800902c:	461a      	mov	r2, r3
 800902e:	f003 f815 	bl	800c05c <__pow5mult>
 8009032:	4680      	mov	r8, r0
 8009034:	2800      	cmp	r0, #0
 8009036:	d0ba      	beq.n	8008fae <_strtod_l+0x68e>
 8009038:	4601      	mov	r1, r0
 800903a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800903c:	9805      	ldr	r0, [sp, #20]
 800903e:	f002 ff63 	bl	800bf08 <__multiply>
 8009042:	900e      	str	r0, [sp, #56]	@ 0x38
 8009044:	2800      	cmp	r0, #0
 8009046:	f43f ae8a 	beq.w	8008d5e <_strtod_l+0x43e>
 800904a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800904c:	9805      	ldr	r0, [sp, #20]
 800904e:	f002 fe47 	bl	800bce0 <_Bfree>
 8009052:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009054:	931a      	str	r3, [sp, #104]	@ 0x68
 8009056:	2d00      	cmp	r5, #0
 8009058:	dc1d      	bgt.n	8009096 <_strtod_l+0x776>
 800905a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800905c:	2b00      	cmp	r3, #0
 800905e:	dd23      	ble.n	80090a8 <_strtod_l+0x788>
 8009060:	4649      	mov	r1, r9
 8009062:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009064:	9805      	ldr	r0, [sp, #20]
 8009066:	f002 fff9 	bl	800c05c <__pow5mult>
 800906a:	4681      	mov	r9, r0
 800906c:	b9e0      	cbnz	r0, 80090a8 <_strtod_l+0x788>
 800906e:	f04f 0900 	mov.w	r9, #0
 8009072:	e674      	b.n	8008d5e <_strtod_l+0x43e>
 8009074:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009078:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800907c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009080:	35e2      	adds	r5, #226	@ 0xe2
 8009082:	fa01 f305 	lsl.w	r3, r1, r5
 8009086:	9310      	str	r3, [sp, #64]	@ 0x40
 8009088:	9113      	str	r1, [sp, #76]	@ 0x4c
 800908a:	e7ba      	b.n	8009002 <_strtod_l+0x6e2>
 800908c:	2300      	movs	r3, #0
 800908e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009090:	2301      	movs	r3, #1
 8009092:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009094:	e7b5      	b.n	8009002 <_strtod_l+0x6e2>
 8009096:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009098:	9805      	ldr	r0, [sp, #20]
 800909a:	462a      	mov	r2, r5
 800909c:	f003 f838 	bl	800c110 <__lshift>
 80090a0:	901a      	str	r0, [sp, #104]	@ 0x68
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d1d9      	bne.n	800905a <_strtod_l+0x73a>
 80090a6:	e65a      	b.n	8008d5e <_strtod_l+0x43e>
 80090a8:	2e00      	cmp	r6, #0
 80090aa:	dd07      	ble.n	80090bc <_strtod_l+0x79c>
 80090ac:	4649      	mov	r1, r9
 80090ae:	9805      	ldr	r0, [sp, #20]
 80090b0:	4632      	mov	r2, r6
 80090b2:	f003 f82d 	bl	800c110 <__lshift>
 80090b6:	4681      	mov	r9, r0
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d0d8      	beq.n	800906e <_strtod_l+0x74e>
 80090bc:	2f00      	cmp	r7, #0
 80090be:	dd08      	ble.n	80090d2 <_strtod_l+0x7b2>
 80090c0:	4641      	mov	r1, r8
 80090c2:	9805      	ldr	r0, [sp, #20]
 80090c4:	463a      	mov	r2, r7
 80090c6:	f003 f823 	bl	800c110 <__lshift>
 80090ca:	4680      	mov	r8, r0
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f43f ae46 	beq.w	8008d5e <_strtod_l+0x43e>
 80090d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80090d4:	9805      	ldr	r0, [sp, #20]
 80090d6:	464a      	mov	r2, r9
 80090d8:	f003 f8a2 	bl	800c220 <__mdiff>
 80090dc:	4604      	mov	r4, r0
 80090de:	2800      	cmp	r0, #0
 80090e0:	f43f ae3d 	beq.w	8008d5e <_strtod_l+0x43e>
 80090e4:	68c3      	ldr	r3, [r0, #12]
 80090e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80090e8:	2300      	movs	r3, #0
 80090ea:	60c3      	str	r3, [r0, #12]
 80090ec:	4641      	mov	r1, r8
 80090ee:	f003 f87b 	bl	800c1e8 <__mcmp>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	da46      	bge.n	8009184 <_strtod_l+0x864>
 80090f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090f8:	ea53 030a 	orrs.w	r3, r3, sl
 80090fc:	d16c      	bne.n	80091d8 <_strtod_l+0x8b8>
 80090fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009102:	2b00      	cmp	r3, #0
 8009104:	d168      	bne.n	80091d8 <_strtod_l+0x8b8>
 8009106:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800910a:	0d1b      	lsrs	r3, r3, #20
 800910c:	051b      	lsls	r3, r3, #20
 800910e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009112:	d961      	bls.n	80091d8 <_strtod_l+0x8b8>
 8009114:	6963      	ldr	r3, [r4, #20]
 8009116:	b913      	cbnz	r3, 800911e <_strtod_l+0x7fe>
 8009118:	6923      	ldr	r3, [r4, #16]
 800911a:	2b01      	cmp	r3, #1
 800911c:	dd5c      	ble.n	80091d8 <_strtod_l+0x8b8>
 800911e:	4621      	mov	r1, r4
 8009120:	2201      	movs	r2, #1
 8009122:	9805      	ldr	r0, [sp, #20]
 8009124:	f002 fff4 	bl	800c110 <__lshift>
 8009128:	4641      	mov	r1, r8
 800912a:	4604      	mov	r4, r0
 800912c:	f003 f85c 	bl	800c1e8 <__mcmp>
 8009130:	2800      	cmp	r0, #0
 8009132:	dd51      	ble.n	80091d8 <_strtod_l+0x8b8>
 8009134:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009138:	9a08      	ldr	r2, [sp, #32]
 800913a:	0d1b      	lsrs	r3, r3, #20
 800913c:	051b      	lsls	r3, r3, #20
 800913e:	2a00      	cmp	r2, #0
 8009140:	d06b      	beq.n	800921a <_strtod_l+0x8fa>
 8009142:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009146:	d868      	bhi.n	800921a <_strtod_l+0x8fa>
 8009148:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800914c:	f67f ae9d 	bls.w	8008e8a <_strtod_l+0x56a>
 8009150:	4b0a      	ldr	r3, [pc, #40]	@ (800917c <_strtod_l+0x85c>)
 8009152:	4650      	mov	r0, sl
 8009154:	4659      	mov	r1, fp
 8009156:	2200      	movs	r2, #0
 8009158:	f7f7 fa6e 	bl	8000638 <__aeabi_dmul>
 800915c:	4b08      	ldr	r3, [pc, #32]	@ (8009180 <_strtod_l+0x860>)
 800915e:	400b      	ands	r3, r1
 8009160:	4682      	mov	sl, r0
 8009162:	468b      	mov	fp, r1
 8009164:	2b00      	cmp	r3, #0
 8009166:	f47f ae05 	bne.w	8008d74 <_strtod_l+0x454>
 800916a:	9a05      	ldr	r2, [sp, #20]
 800916c:	2322      	movs	r3, #34	@ 0x22
 800916e:	6013      	str	r3, [r2, #0]
 8009170:	e600      	b.n	8008d74 <_strtod_l+0x454>
 8009172:	bf00      	nop
 8009174:	0800d660 	.word	0x0800d660
 8009178:	fffffc02 	.word	0xfffffc02
 800917c:	39500000 	.word	0x39500000
 8009180:	7ff00000 	.word	0x7ff00000
 8009184:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009188:	d165      	bne.n	8009256 <_strtod_l+0x936>
 800918a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800918c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009190:	b35a      	cbz	r2, 80091ea <_strtod_l+0x8ca>
 8009192:	4a9f      	ldr	r2, [pc, #636]	@ (8009410 <_strtod_l+0xaf0>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d12b      	bne.n	80091f0 <_strtod_l+0x8d0>
 8009198:	9b08      	ldr	r3, [sp, #32]
 800919a:	4651      	mov	r1, sl
 800919c:	b303      	cbz	r3, 80091e0 <_strtod_l+0x8c0>
 800919e:	4b9d      	ldr	r3, [pc, #628]	@ (8009414 <_strtod_l+0xaf4>)
 80091a0:	465a      	mov	r2, fp
 80091a2:	4013      	ands	r3, r2
 80091a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80091a8:	f04f 32ff 	mov.w	r2, #4294967295
 80091ac:	d81b      	bhi.n	80091e6 <_strtod_l+0x8c6>
 80091ae:	0d1b      	lsrs	r3, r3, #20
 80091b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80091b4:	fa02 f303 	lsl.w	r3, r2, r3
 80091b8:	4299      	cmp	r1, r3
 80091ba:	d119      	bne.n	80091f0 <_strtod_l+0x8d0>
 80091bc:	4b96      	ldr	r3, [pc, #600]	@ (8009418 <_strtod_l+0xaf8>)
 80091be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d102      	bne.n	80091ca <_strtod_l+0x8aa>
 80091c4:	3101      	adds	r1, #1
 80091c6:	f43f adca 	beq.w	8008d5e <_strtod_l+0x43e>
 80091ca:	4b92      	ldr	r3, [pc, #584]	@ (8009414 <_strtod_l+0xaf4>)
 80091cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091ce:	401a      	ands	r2, r3
 80091d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80091d4:	f04f 0a00 	mov.w	sl, #0
 80091d8:	9b08      	ldr	r3, [sp, #32]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1b8      	bne.n	8009150 <_strtod_l+0x830>
 80091de:	e5c9      	b.n	8008d74 <_strtod_l+0x454>
 80091e0:	f04f 33ff 	mov.w	r3, #4294967295
 80091e4:	e7e8      	b.n	80091b8 <_strtod_l+0x898>
 80091e6:	4613      	mov	r3, r2
 80091e8:	e7e6      	b.n	80091b8 <_strtod_l+0x898>
 80091ea:	ea53 030a 	orrs.w	r3, r3, sl
 80091ee:	d0a1      	beq.n	8009134 <_strtod_l+0x814>
 80091f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091f2:	b1db      	cbz	r3, 800922c <_strtod_l+0x90c>
 80091f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091f6:	4213      	tst	r3, r2
 80091f8:	d0ee      	beq.n	80091d8 <_strtod_l+0x8b8>
 80091fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091fc:	9a08      	ldr	r2, [sp, #32]
 80091fe:	4650      	mov	r0, sl
 8009200:	4659      	mov	r1, fp
 8009202:	b1bb      	cbz	r3, 8009234 <_strtod_l+0x914>
 8009204:	f7ff fb6c 	bl	80088e0 <sulp>
 8009208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800920c:	ec53 2b10 	vmov	r2, r3, d0
 8009210:	f7f7 f85c 	bl	80002cc <__adddf3>
 8009214:	4682      	mov	sl, r0
 8009216:	468b      	mov	fp, r1
 8009218:	e7de      	b.n	80091d8 <_strtod_l+0x8b8>
 800921a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800921e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009222:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009226:	f04f 3aff 	mov.w	sl, #4294967295
 800922a:	e7d5      	b.n	80091d8 <_strtod_l+0x8b8>
 800922c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800922e:	ea13 0f0a 	tst.w	r3, sl
 8009232:	e7e1      	b.n	80091f8 <_strtod_l+0x8d8>
 8009234:	f7ff fb54 	bl	80088e0 <sulp>
 8009238:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800923c:	ec53 2b10 	vmov	r2, r3, d0
 8009240:	f7f7 f842 	bl	80002c8 <__aeabi_dsub>
 8009244:	2200      	movs	r2, #0
 8009246:	2300      	movs	r3, #0
 8009248:	4682      	mov	sl, r0
 800924a:	468b      	mov	fp, r1
 800924c:	f7f7 fc5c 	bl	8000b08 <__aeabi_dcmpeq>
 8009250:	2800      	cmp	r0, #0
 8009252:	d0c1      	beq.n	80091d8 <_strtod_l+0x8b8>
 8009254:	e619      	b.n	8008e8a <_strtod_l+0x56a>
 8009256:	4641      	mov	r1, r8
 8009258:	4620      	mov	r0, r4
 800925a:	f003 f93d 	bl	800c4d8 <__ratio>
 800925e:	ec57 6b10 	vmov	r6, r7, d0
 8009262:	2200      	movs	r2, #0
 8009264:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009268:	4630      	mov	r0, r6
 800926a:	4639      	mov	r1, r7
 800926c:	f7f7 fc60 	bl	8000b30 <__aeabi_dcmple>
 8009270:	2800      	cmp	r0, #0
 8009272:	d06f      	beq.n	8009354 <_strtod_l+0xa34>
 8009274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009276:	2b00      	cmp	r3, #0
 8009278:	d17a      	bne.n	8009370 <_strtod_l+0xa50>
 800927a:	f1ba 0f00 	cmp.w	sl, #0
 800927e:	d158      	bne.n	8009332 <_strtod_l+0xa12>
 8009280:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009282:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009286:	2b00      	cmp	r3, #0
 8009288:	d15a      	bne.n	8009340 <_strtod_l+0xa20>
 800928a:	4b64      	ldr	r3, [pc, #400]	@ (800941c <_strtod_l+0xafc>)
 800928c:	2200      	movs	r2, #0
 800928e:	4630      	mov	r0, r6
 8009290:	4639      	mov	r1, r7
 8009292:	f7f7 fc43 	bl	8000b1c <__aeabi_dcmplt>
 8009296:	2800      	cmp	r0, #0
 8009298:	d159      	bne.n	800934e <_strtod_l+0xa2e>
 800929a:	4630      	mov	r0, r6
 800929c:	4639      	mov	r1, r7
 800929e:	4b60      	ldr	r3, [pc, #384]	@ (8009420 <_strtod_l+0xb00>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	f7f7 f9c9 	bl	8000638 <__aeabi_dmul>
 80092a6:	4606      	mov	r6, r0
 80092a8:	460f      	mov	r7, r1
 80092aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80092ae:	9606      	str	r6, [sp, #24]
 80092b0:	9307      	str	r3, [sp, #28]
 80092b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092b6:	4d57      	ldr	r5, [pc, #348]	@ (8009414 <_strtod_l+0xaf4>)
 80092b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80092bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092be:	401d      	ands	r5, r3
 80092c0:	4b58      	ldr	r3, [pc, #352]	@ (8009424 <_strtod_l+0xb04>)
 80092c2:	429d      	cmp	r5, r3
 80092c4:	f040 80b2 	bne.w	800942c <_strtod_l+0xb0c>
 80092c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80092ce:	ec4b ab10 	vmov	d0, sl, fp
 80092d2:	f003 f839 	bl	800c348 <__ulp>
 80092d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092da:	ec51 0b10 	vmov	r0, r1, d0
 80092de:	f7f7 f9ab 	bl	8000638 <__aeabi_dmul>
 80092e2:	4652      	mov	r2, sl
 80092e4:	465b      	mov	r3, fp
 80092e6:	f7f6 fff1 	bl	80002cc <__adddf3>
 80092ea:	460b      	mov	r3, r1
 80092ec:	4949      	ldr	r1, [pc, #292]	@ (8009414 <_strtod_l+0xaf4>)
 80092ee:	4a4e      	ldr	r2, [pc, #312]	@ (8009428 <_strtod_l+0xb08>)
 80092f0:	4019      	ands	r1, r3
 80092f2:	4291      	cmp	r1, r2
 80092f4:	4682      	mov	sl, r0
 80092f6:	d942      	bls.n	800937e <_strtod_l+0xa5e>
 80092f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80092fa:	4b47      	ldr	r3, [pc, #284]	@ (8009418 <_strtod_l+0xaf8>)
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d103      	bne.n	8009308 <_strtod_l+0x9e8>
 8009300:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009302:	3301      	adds	r3, #1
 8009304:	f43f ad2b 	beq.w	8008d5e <_strtod_l+0x43e>
 8009308:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009418 <_strtod_l+0xaf8>
 800930c:	f04f 3aff 	mov.w	sl, #4294967295
 8009310:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009312:	9805      	ldr	r0, [sp, #20]
 8009314:	f002 fce4 	bl	800bce0 <_Bfree>
 8009318:	9805      	ldr	r0, [sp, #20]
 800931a:	4649      	mov	r1, r9
 800931c:	f002 fce0 	bl	800bce0 <_Bfree>
 8009320:	9805      	ldr	r0, [sp, #20]
 8009322:	4641      	mov	r1, r8
 8009324:	f002 fcdc 	bl	800bce0 <_Bfree>
 8009328:	9805      	ldr	r0, [sp, #20]
 800932a:	4621      	mov	r1, r4
 800932c:	f002 fcd8 	bl	800bce0 <_Bfree>
 8009330:	e618      	b.n	8008f64 <_strtod_l+0x644>
 8009332:	f1ba 0f01 	cmp.w	sl, #1
 8009336:	d103      	bne.n	8009340 <_strtod_l+0xa20>
 8009338:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800933a:	2b00      	cmp	r3, #0
 800933c:	f43f ada5 	beq.w	8008e8a <_strtod_l+0x56a>
 8009340:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80093f0 <_strtod_l+0xad0>
 8009344:	4f35      	ldr	r7, [pc, #212]	@ (800941c <_strtod_l+0xafc>)
 8009346:	ed8d 7b06 	vstr	d7, [sp, #24]
 800934a:	2600      	movs	r6, #0
 800934c:	e7b1      	b.n	80092b2 <_strtod_l+0x992>
 800934e:	4f34      	ldr	r7, [pc, #208]	@ (8009420 <_strtod_l+0xb00>)
 8009350:	2600      	movs	r6, #0
 8009352:	e7aa      	b.n	80092aa <_strtod_l+0x98a>
 8009354:	4b32      	ldr	r3, [pc, #200]	@ (8009420 <_strtod_l+0xb00>)
 8009356:	4630      	mov	r0, r6
 8009358:	4639      	mov	r1, r7
 800935a:	2200      	movs	r2, #0
 800935c:	f7f7 f96c 	bl	8000638 <__aeabi_dmul>
 8009360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009362:	4606      	mov	r6, r0
 8009364:	460f      	mov	r7, r1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d09f      	beq.n	80092aa <_strtod_l+0x98a>
 800936a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800936e:	e7a0      	b.n	80092b2 <_strtod_l+0x992>
 8009370:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80093f8 <_strtod_l+0xad8>
 8009374:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009378:	ec57 6b17 	vmov	r6, r7, d7
 800937c:	e799      	b.n	80092b2 <_strtod_l+0x992>
 800937e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009382:	9b08      	ldr	r3, [sp, #32]
 8009384:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1c1      	bne.n	8009310 <_strtod_l+0x9f0>
 800938c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009390:	0d1b      	lsrs	r3, r3, #20
 8009392:	051b      	lsls	r3, r3, #20
 8009394:	429d      	cmp	r5, r3
 8009396:	d1bb      	bne.n	8009310 <_strtod_l+0x9f0>
 8009398:	4630      	mov	r0, r6
 800939a:	4639      	mov	r1, r7
 800939c:	f7f7 fcac 	bl	8000cf8 <__aeabi_d2lz>
 80093a0:	f7f7 f91c 	bl	80005dc <__aeabi_l2d>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	4630      	mov	r0, r6
 80093aa:	4639      	mov	r1, r7
 80093ac:	f7f6 ff8c 	bl	80002c8 <__aeabi_dsub>
 80093b0:	460b      	mov	r3, r1
 80093b2:	4602      	mov	r2, r0
 80093b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80093b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80093bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093be:	ea46 060a 	orr.w	r6, r6, sl
 80093c2:	431e      	orrs	r6, r3
 80093c4:	d06f      	beq.n	80094a6 <_strtod_l+0xb86>
 80093c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009400 <_strtod_l+0xae0>)
 80093c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093cc:	f7f7 fba6 	bl	8000b1c <__aeabi_dcmplt>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	f47f accf 	bne.w	8008d74 <_strtod_l+0x454>
 80093d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009408 <_strtod_l+0xae8>)
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093e0:	f7f7 fbba 	bl	8000b58 <__aeabi_dcmpgt>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d093      	beq.n	8009310 <_strtod_l+0x9f0>
 80093e8:	e4c4      	b.n	8008d74 <_strtod_l+0x454>
 80093ea:	bf00      	nop
 80093ec:	f3af 8000 	nop.w
 80093f0:	00000000 	.word	0x00000000
 80093f4:	bff00000 	.word	0xbff00000
 80093f8:	00000000 	.word	0x00000000
 80093fc:	3ff00000 	.word	0x3ff00000
 8009400:	94a03595 	.word	0x94a03595
 8009404:	3fdfffff 	.word	0x3fdfffff
 8009408:	35afe535 	.word	0x35afe535
 800940c:	3fe00000 	.word	0x3fe00000
 8009410:	000fffff 	.word	0x000fffff
 8009414:	7ff00000 	.word	0x7ff00000
 8009418:	7fefffff 	.word	0x7fefffff
 800941c:	3ff00000 	.word	0x3ff00000
 8009420:	3fe00000 	.word	0x3fe00000
 8009424:	7fe00000 	.word	0x7fe00000
 8009428:	7c9fffff 	.word	0x7c9fffff
 800942c:	9b08      	ldr	r3, [sp, #32]
 800942e:	b323      	cbz	r3, 800947a <_strtod_l+0xb5a>
 8009430:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009434:	d821      	bhi.n	800947a <_strtod_l+0xb5a>
 8009436:	a328      	add	r3, pc, #160	@ (adr r3, 80094d8 <_strtod_l+0xbb8>)
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	4630      	mov	r0, r6
 800943e:	4639      	mov	r1, r7
 8009440:	f7f7 fb76 	bl	8000b30 <__aeabi_dcmple>
 8009444:	b1a0      	cbz	r0, 8009470 <_strtod_l+0xb50>
 8009446:	4639      	mov	r1, r7
 8009448:	4630      	mov	r0, r6
 800944a:	f7f7 fbcd 	bl	8000be8 <__aeabi_d2uiz>
 800944e:	2801      	cmp	r0, #1
 8009450:	bf38      	it	cc
 8009452:	2001      	movcc	r0, #1
 8009454:	f7f7 f876 	bl	8000544 <__aeabi_ui2d>
 8009458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800945a:	4606      	mov	r6, r0
 800945c:	460f      	mov	r7, r1
 800945e:	b9fb      	cbnz	r3, 80094a0 <_strtod_l+0xb80>
 8009460:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009464:	9014      	str	r0, [sp, #80]	@ 0x50
 8009466:	9315      	str	r3, [sp, #84]	@ 0x54
 8009468:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800946c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009470:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009472:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009476:	1b5b      	subs	r3, r3, r5
 8009478:	9311      	str	r3, [sp, #68]	@ 0x44
 800947a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800947e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009482:	f002 ff61 	bl	800c348 <__ulp>
 8009486:	4650      	mov	r0, sl
 8009488:	ec53 2b10 	vmov	r2, r3, d0
 800948c:	4659      	mov	r1, fp
 800948e:	f7f7 f8d3 	bl	8000638 <__aeabi_dmul>
 8009492:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009496:	f7f6 ff19 	bl	80002cc <__adddf3>
 800949a:	4682      	mov	sl, r0
 800949c:	468b      	mov	fp, r1
 800949e:	e770      	b.n	8009382 <_strtod_l+0xa62>
 80094a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80094a4:	e7e0      	b.n	8009468 <_strtod_l+0xb48>
 80094a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80094e0 <_strtod_l+0xbc0>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f7f7 fb36 	bl	8000b1c <__aeabi_dcmplt>
 80094b0:	e798      	b.n	80093e4 <_strtod_l+0xac4>
 80094b2:	2300      	movs	r3, #0
 80094b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80094b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	f7ff ba6d 	b.w	800899a <_strtod_l+0x7a>
 80094c0:	2a65      	cmp	r2, #101	@ 0x65
 80094c2:	f43f ab66 	beq.w	8008b92 <_strtod_l+0x272>
 80094c6:	2a45      	cmp	r2, #69	@ 0x45
 80094c8:	f43f ab63 	beq.w	8008b92 <_strtod_l+0x272>
 80094cc:	2301      	movs	r3, #1
 80094ce:	f7ff bb9e 	b.w	8008c0e <_strtod_l+0x2ee>
 80094d2:	bf00      	nop
 80094d4:	f3af 8000 	nop.w
 80094d8:	ffc00000 	.word	0xffc00000
 80094dc:	41dfffff 	.word	0x41dfffff
 80094e0:	94a03595 	.word	0x94a03595
 80094e4:	3fcfffff 	.word	0x3fcfffff

080094e8 <_strtod_r>:
 80094e8:	4b01      	ldr	r3, [pc, #4]	@ (80094f0 <_strtod_r+0x8>)
 80094ea:	f7ff ba19 	b.w	8008920 <_strtod_l>
 80094ee:	bf00      	nop
 80094f0:	2000002c 	.word	0x2000002c

080094f4 <strtof>:
 80094f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 80095b8 <strtof+0xc4>
 80094fc:	4b29      	ldr	r3, [pc, #164]	@ (80095a4 <strtof+0xb0>)
 80094fe:	460a      	mov	r2, r1
 8009500:	ed2d 8b02 	vpush	{d8}
 8009504:	4601      	mov	r1, r0
 8009506:	f8d8 0000 	ldr.w	r0, [r8]
 800950a:	f7ff fa09 	bl	8008920 <_strtod_l>
 800950e:	ec55 4b10 	vmov	r4, r5, d0
 8009512:	4622      	mov	r2, r4
 8009514:	462b      	mov	r3, r5
 8009516:	4620      	mov	r0, r4
 8009518:	4629      	mov	r1, r5
 800951a:	f7f7 fb27 	bl	8000b6c <__aeabi_dcmpun>
 800951e:	b190      	cbz	r0, 8009546 <strtof+0x52>
 8009520:	2d00      	cmp	r5, #0
 8009522:	4821      	ldr	r0, [pc, #132]	@ (80095a8 <strtof+0xb4>)
 8009524:	da09      	bge.n	800953a <strtof+0x46>
 8009526:	f001 f8df 	bl	800a6e8 <nanf>
 800952a:	eeb1 8a40 	vneg.f32	s16, s0
 800952e:	eeb0 0a48 	vmov.f32	s0, s16
 8009532:	ecbd 8b02 	vpop	{d8}
 8009536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800953a:	ecbd 8b02 	vpop	{d8}
 800953e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009542:	f001 b8d1 	b.w	800a6e8 <nanf>
 8009546:	4620      	mov	r0, r4
 8009548:	4629      	mov	r1, r5
 800954a:	f7f7 fb6d 	bl	8000c28 <__aeabi_d2f>
 800954e:	ee08 0a10 	vmov	s16, r0
 8009552:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80095ac <strtof+0xb8>
 8009556:	eeb0 7ac8 	vabs.f32	s14, s16
 800955a:	eeb4 7a67 	vcmp.f32	s14, s15
 800955e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009562:	dd11      	ble.n	8009588 <strtof+0x94>
 8009564:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8009568:	4b11      	ldr	r3, [pc, #68]	@ (80095b0 <strtof+0xbc>)
 800956a:	f04f 32ff 	mov.w	r2, #4294967295
 800956e:	4620      	mov	r0, r4
 8009570:	4639      	mov	r1, r7
 8009572:	f7f7 fafb 	bl	8000b6c <__aeabi_dcmpun>
 8009576:	b980      	cbnz	r0, 800959a <strtof+0xa6>
 8009578:	4b0d      	ldr	r3, [pc, #52]	@ (80095b0 <strtof+0xbc>)
 800957a:	f04f 32ff 	mov.w	r2, #4294967295
 800957e:	4620      	mov	r0, r4
 8009580:	4639      	mov	r1, r7
 8009582:	f7f7 fad5 	bl	8000b30 <__aeabi_dcmple>
 8009586:	b940      	cbnz	r0, 800959a <strtof+0xa6>
 8009588:	ee18 3a10 	vmov	r3, s16
 800958c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009590:	d1cd      	bne.n	800952e <strtof+0x3a>
 8009592:	4b08      	ldr	r3, [pc, #32]	@ (80095b4 <strtof+0xc0>)
 8009594:	402b      	ands	r3, r5
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0c9      	beq.n	800952e <strtof+0x3a>
 800959a:	f8d8 3000 	ldr.w	r3, [r8]
 800959e:	2222      	movs	r2, #34	@ 0x22
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	e7c4      	b.n	800952e <strtof+0x3a>
 80095a4:	2000002c 	.word	0x2000002c
 80095a8:	0800d775 	.word	0x0800d775
 80095ac:	7f7fffff 	.word	0x7f7fffff
 80095b0:	7fefffff 	.word	0x7fefffff
 80095b4:	7ff00000 	.word	0x7ff00000
 80095b8:	20000198 	.word	0x20000198

080095bc <__cvt>:
 80095bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095c0:	ec57 6b10 	vmov	r6, r7, d0
 80095c4:	2f00      	cmp	r7, #0
 80095c6:	460c      	mov	r4, r1
 80095c8:	4619      	mov	r1, r3
 80095ca:	463b      	mov	r3, r7
 80095cc:	bfbb      	ittet	lt
 80095ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80095d2:	461f      	movlt	r7, r3
 80095d4:	2300      	movge	r3, #0
 80095d6:	232d      	movlt	r3, #45	@ 0x2d
 80095d8:	700b      	strb	r3, [r1, #0]
 80095da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80095e0:	4691      	mov	r9, r2
 80095e2:	f023 0820 	bic.w	r8, r3, #32
 80095e6:	bfbc      	itt	lt
 80095e8:	4632      	movlt	r2, r6
 80095ea:	4616      	movlt	r6, r2
 80095ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095f0:	d005      	beq.n	80095fe <__cvt+0x42>
 80095f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80095f6:	d100      	bne.n	80095fa <__cvt+0x3e>
 80095f8:	3401      	adds	r4, #1
 80095fa:	2102      	movs	r1, #2
 80095fc:	e000      	b.n	8009600 <__cvt+0x44>
 80095fe:	2103      	movs	r1, #3
 8009600:	ab03      	add	r3, sp, #12
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	ab02      	add	r3, sp, #8
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	ec47 6b10 	vmov	d0, r6, r7
 800960c:	4653      	mov	r3, sl
 800960e:	4622      	mov	r2, r4
 8009610:	f001 f916 	bl	800a840 <_dtoa_r>
 8009614:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009618:	4605      	mov	r5, r0
 800961a:	d119      	bne.n	8009650 <__cvt+0x94>
 800961c:	f019 0f01 	tst.w	r9, #1
 8009620:	d00e      	beq.n	8009640 <__cvt+0x84>
 8009622:	eb00 0904 	add.w	r9, r0, r4
 8009626:	2200      	movs	r2, #0
 8009628:	2300      	movs	r3, #0
 800962a:	4630      	mov	r0, r6
 800962c:	4639      	mov	r1, r7
 800962e:	f7f7 fa6b 	bl	8000b08 <__aeabi_dcmpeq>
 8009632:	b108      	cbz	r0, 8009638 <__cvt+0x7c>
 8009634:	f8cd 900c 	str.w	r9, [sp, #12]
 8009638:	2230      	movs	r2, #48	@ 0x30
 800963a:	9b03      	ldr	r3, [sp, #12]
 800963c:	454b      	cmp	r3, r9
 800963e:	d31e      	bcc.n	800967e <__cvt+0xc2>
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009644:	1b5b      	subs	r3, r3, r5
 8009646:	4628      	mov	r0, r5
 8009648:	6013      	str	r3, [r2, #0]
 800964a:	b004      	add	sp, #16
 800964c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009650:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009654:	eb00 0904 	add.w	r9, r0, r4
 8009658:	d1e5      	bne.n	8009626 <__cvt+0x6a>
 800965a:	7803      	ldrb	r3, [r0, #0]
 800965c:	2b30      	cmp	r3, #48	@ 0x30
 800965e:	d10a      	bne.n	8009676 <__cvt+0xba>
 8009660:	2200      	movs	r2, #0
 8009662:	2300      	movs	r3, #0
 8009664:	4630      	mov	r0, r6
 8009666:	4639      	mov	r1, r7
 8009668:	f7f7 fa4e 	bl	8000b08 <__aeabi_dcmpeq>
 800966c:	b918      	cbnz	r0, 8009676 <__cvt+0xba>
 800966e:	f1c4 0401 	rsb	r4, r4, #1
 8009672:	f8ca 4000 	str.w	r4, [sl]
 8009676:	f8da 3000 	ldr.w	r3, [sl]
 800967a:	4499      	add	r9, r3
 800967c:	e7d3      	b.n	8009626 <__cvt+0x6a>
 800967e:	1c59      	adds	r1, r3, #1
 8009680:	9103      	str	r1, [sp, #12]
 8009682:	701a      	strb	r2, [r3, #0]
 8009684:	e7d9      	b.n	800963a <__cvt+0x7e>

08009686 <__exponent>:
 8009686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009688:	2900      	cmp	r1, #0
 800968a:	bfba      	itte	lt
 800968c:	4249      	neglt	r1, r1
 800968e:	232d      	movlt	r3, #45	@ 0x2d
 8009690:	232b      	movge	r3, #43	@ 0x2b
 8009692:	2909      	cmp	r1, #9
 8009694:	7002      	strb	r2, [r0, #0]
 8009696:	7043      	strb	r3, [r0, #1]
 8009698:	dd29      	ble.n	80096ee <__exponent+0x68>
 800969a:	f10d 0307 	add.w	r3, sp, #7
 800969e:	461d      	mov	r5, r3
 80096a0:	270a      	movs	r7, #10
 80096a2:	461a      	mov	r2, r3
 80096a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80096a8:	fb07 1416 	mls	r4, r7, r6, r1
 80096ac:	3430      	adds	r4, #48	@ 0x30
 80096ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 80096b2:	460c      	mov	r4, r1
 80096b4:	2c63      	cmp	r4, #99	@ 0x63
 80096b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80096ba:	4631      	mov	r1, r6
 80096bc:	dcf1      	bgt.n	80096a2 <__exponent+0x1c>
 80096be:	3130      	adds	r1, #48	@ 0x30
 80096c0:	1e94      	subs	r4, r2, #2
 80096c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80096c6:	1c41      	adds	r1, r0, #1
 80096c8:	4623      	mov	r3, r4
 80096ca:	42ab      	cmp	r3, r5
 80096cc:	d30a      	bcc.n	80096e4 <__exponent+0x5e>
 80096ce:	f10d 0309 	add.w	r3, sp, #9
 80096d2:	1a9b      	subs	r3, r3, r2
 80096d4:	42ac      	cmp	r4, r5
 80096d6:	bf88      	it	hi
 80096d8:	2300      	movhi	r3, #0
 80096da:	3302      	adds	r3, #2
 80096dc:	4403      	add	r3, r0
 80096de:	1a18      	subs	r0, r3, r0
 80096e0:	b003      	add	sp, #12
 80096e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80096e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80096ec:	e7ed      	b.n	80096ca <__exponent+0x44>
 80096ee:	2330      	movs	r3, #48	@ 0x30
 80096f0:	3130      	adds	r1, #48	@ 0x30
 80096f2:	7083      	strb	r3, [r0, #2]
 80096f4:	70c1      	strb	r1, [r0, #3]
 80096f6:	1d03      	adds	r3, r0, #4
 80096f8:	e7f1      	b.n	80096de <__exponent+0x58>
	...

080096fc <_printf_float>:
 80096fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	b08d      	sub	sp, #52	@ 0x34
 8009702:	460c      	mov	r4, r1
 8009704:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009708:	4616      	mov	r6, r2
 800970a:	461f      	mov	r7, r3
 800970c:	4605      	mov	r5, r0
 800970e:	f000 ff5d 	bl	800a5cc <_localeconv_r>
 8009712:	6803      	ldr	r3, [r0, #0]
 8009714:	9304      	str	r3, [sp, #16]
 8009716:	4618      	mov	r0, r3
 8009718:	f7f6 fdca 	bl	80002b0 <strlen>
 800971c:	2300      	movs	r3, #0
 800971e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009720:	f8d8 3000 	ldr.w	r3, [r8]
 8009724:	9005      	str	r0, [sp, #20]
 8009726:	3307      	adds	r3, #7
 8009728:	f023 0307 	bic.w	r3, r3, #7
 800972c:	f103 0208 	add.w	r2, r3, #8
 8009730:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009734:	f8d4 b000 	ldr.w	fp, [r4]
 8009738:	f8c8 2000 	str.w	r2, [r8]
 800973c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009740:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009744:	9307      	str	r3, [sp, #28]
 8009746:	f8cd 8018 	str.w	r8, [sp, #24]
 800974a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800974e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009752:	4b9c      	ldr	r3, [pc, #624]	@ (80099c4 <_printf_float+0x2c8>)
 8009754:	f04f 32ff 	mov.w	r2, #4294967295
 8009758:	f7f7 fa08 	bl	8000b6c <__aeabi_dcmpun>
 800975c:	bb70      	cbnz	r0, 80097bc <_printf_float+0xc0>
 800975e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009762:	4b98      	ldr	r3, [pc, #608]	@ (80099c4 <_printf_float+0x2c8>)
 8009764:	f04f 32ff 	mov.w	r2, #4294967295
 8009768:	f7f7 f9e2 	bl	8000b30 <__aeabi_dcmple>
 800976c:	bb30      	cbnz	r0, 80097bc <_printf_float+0xc0>
 800976e:	2200      	movs	r2, #0
 8009770:	2300      	movs	r3, #0
 8009772:	4640      	mov	r0, r8
 8009774:	4649      	mov	r1, r9
 8009776:	f7f7 f9d1 	bl	8000b1c <__aeabi_dcmplt>
 800977a:	b110      	cbz	r0, 8009782 <_printf_float+0x86>
 800977c:	232d      	movs	r3, #45	@ 0x2d
 800977e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009782:	4a91      	ldr	r2, [pc, #580]	@ (80099c8 <_printf_float+0x2cc>)
 8009784:	4b91      	ldr	r3, [pc, #580]	@ (80099cc <_printf_float+0x2d0>)
 8009786:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800978a:	bf94      	ite	ls
 800978c:	4690      	movls	r8, r2
 800978e:	4698      	movhi	r8, r3
 8009790:	2303      	movs	r3, #3
 8009792:	6123      	str	r3, [r4, #16]
 8009794:	f02b 0304 	bic.w	r3, fp, #4
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	f04f 0900 	mov.w	r9, #0
 800979e:	9700      	str	r7, [sp, #0]
 80097a0:	4633      	mov	r3, r6
 80097a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80097a4:	4621      	mov	r1, r4
 80097a6:	4628      	mov	r0, r5
 80097a8:	f000 f9d2 	bl	8009b50 <_printf_common>
 80097ac:	3001      	adds	r0, #1
 80097ae:	f040 808d 	bne.w	80098cc <_printf_float+0x1d0>
 80097b2:	f04f 30ff 	mov.w	r0, #4294967295
 80097b6:	b00d      	add	sp, #52	@ 0x34
 80097b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097bc:	4642      	mov	r2, r8
 80097be:	464b      	mov	r3, r9
 80097c0:	4640      	mov	r0, r8
 80097c2:	4649      	mov	r1, r9
 80097c4:	f7f7 f9d2 	bl	8000b6c <__aeabi_dcmpun>
 80097c8:	b140      	cbz	r0, 80097dc <_printf_float+0xe0>
 80097ca:	464b      	mov	r3, r9
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	bfbc      	itt	lt
 80097d0:	232d      	movlt	r3, #45	@ 0x2d
 80097d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80097d6:	4a7e      	ldr	r2, [pc, #504]	@ (80099d0 <_printf_float+0x2d4>)
 80097d8:	4b7e      	ldr	r3, [pc, #504]	@ (80099d4 <_printf_float+0x2d8>)
 80097da:	e7d4      	b.n	8009786 <_printf_float+0x8a>
 80097dc:	6863      	ldr	r3, [r4, #4]
 80097de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80097e2:	9206      	str	r2, [sp, #24]
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	d13b      	bne.n	8009860 <_printf_float+0x164>
 80097e8:	2306      	movs	r3, #6
 80097ea:	6063      	str	r3, [r4, #4]
 80097ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80097f0:	2300      	movs	r3, #0
 80097f2:	6022      	str	r2, [r4, #0]
 80097f4:	9303      	str	r3, [sp, #12]
 80097f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80097f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80097fc:	ab09      	add	r3, sp, #36	@ 0x24
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	6861      	ldr	r1, [r4, #4]
 8009802:	ec49 8b10 	vmov	d0, r8, r9
 8009806:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800980a:	4628      	mov	r0, r5
 800980c:	f7ff fed6 	bl	80095bc <__cvt>
 8009810:	9b06      	ldr	r3, [sp, #24]
 8009812:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009814:	2b47      	cmp	r3, #71	@ 0x47
 8009816:	4680      	mov	r8, r0
 8009818:	d129      	bne.n	800986e <_printf_float+0x172>
 800981a:	1cc8      	adds	r0, r1, #3
 800981c:	db02      	blt.n	8009824 <_printf_float+0x128>
 800981e:	6863      	ldr	r3, [r4, #4]
 8009820:	4299      	cmp	r1, r3
 8009822:	dd41      	ble.n	80098a8 <_printf_float+0x1ac>
 8009824:	f1aa 0a02 	sub.w	sl, sl, #2
 8009828:	fa5f fa8a 	uxtb.w	sl, sl
 800982c:	3901      	subs	r1, #1
 800982e:	4652      	mov	r2, sl
 8009830:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009834:	9109      	str	r1, [sp, #36]	@ 0x24
 8009836:	f7ff ff26 	bl	8009686 <__exponent>
 800983a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800983c:	1813      	adds	r3, r2, r0
 800983e:	2a01      	cmp	r2, #1
 8009840:	4681      	mov	r9, r0
 8009842:	6123      	str	r3, [r4, #16]
 8009844:	dc02      	bgt.n	800984c <_printf_float+0x150>
 8009846:	6822      	ldr	r2, [r4, #0]
 8009848:	07d2      	lsls	r2, r2, #31
 800984a:	d501      	bpl.n	8009850 <_printf_float+0x154>
 800984c:	3301      	adds	r3, #1
 800984e:	6123      	str	r3, [r4, #16]
 8009850:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009854:	2b00      	cmp	r3, #0
 8009856:	d0a2      	beq.n	800979e <_printf_float+0xa2>
 8009858:	232d      	movs	r3, #45	@ 0x2d
 800985a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800985e:	e79e      	b.n	800979e <_printf_float+0xa2>
 8009860:	9a06      	ldr	r2, [sp, #24]
 8009862:	2a47      	cmp	r2, #71	@ 0x47
 8009864:	d1c2      	bne.n	80097ec <_printf_float+0xf0>
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1c0      	bne.n	80097ec <_printf_float+0xf0>
 800986a:	2301      	movs	r3, #1
 800986c:	e7bd      	b.n	80097ea <_printf_float+0xee>
 800986e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009872:	d9db      	bls.n	800982c <_printf_float+0x130>
 8009874:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009878:	d118      	bne.n	80098ac <_printf_float+0x1b0>
 800987a:	2900      	cmp	r1, #0
 800987c:	6863      	ldr	r3, [r4, #4]
 800987e:	dd0b      	ble.n	8009898 <_printf_float+0x19c>
 8009880:	6121      	str	r1, [r4, #16]
 8009882:	b913      	cbnz	r3, 800988a <_printf_float+0x18e>
 8009884:	6822      	ldr	r2, [r4, #0]
 8009886:	07d0      	lsls	r0, r2, #31
 8009888:	d502      	bpl.n	8009890 <_printf_float+0x194>
 800988a:	3301      	adds	r3, #1
 800988c:	440b      	add	r3, r1
 800988e:	6123      	str	r3, [r4, #16]
 8009890:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009892:	f04f 0900 	mov.w	r9, #0
 8009896:	e7db      	b.n	8009850 <_printf_float+0x154>
 8009898:	b913      	cbnz	r3, 80098a0 <_printf_float+0x1a4>
 800989a:	6822      	ldr	r2, [r4, #0]
 800989c:	07d2      	lsls	r2, r2, #31
 800989e:	d501      	bpl.n	80098a4 <_printf_float+0x1a8>
 80098a0:	3302      	adds	r3, #2
 80098a2:	e7f4      	b.n	800988e <_printf_float+0x192>
 80098a4:	2301      	movs	r3, #1
 80098a6:	e7f2      	b.n	800988e <_printf_float+0x192>
 80098a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80098ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ae:	4299      	cmp	r1, r3
 80098b0:	db05      	blt.n	80098be <_printf_float+0x1c2>
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	6121      	str	r1, [r4, #16]
 80098b6:	07d8      	lsls	r0, r3, #31
 80098b8:	d5ea      	bpl.n	8009890 <_printf_float+0x194>
 80098ba:	1c4b      	adds	r3, r1, #1
 80098bc:	e7e7      	b.n	800988e <_printf_float+0x192>
 80098be:	2900      	cmp	r1, #0
 80098c0:	bfd4      	ite	le
 80098c2:	f1c1 0202 	rsble	r2, r1, #2
 80098c6:	2201      	movgt	r2, #1
 80098c8:	4413      	add	r3, r2
 80098ca:	e7e0      	b.n	800988e <_printf_float+0x192>
 80098cc:	6823      	ldr	r3, [r4, #0]
 80098ce:	055a      	lsls	r2, r3, #21
 80098d0:	d407      	bmi.n	80098e2 <_printf_float+0x1e6>
 80098d2:	6923      	ldr	r3, [r4, #16]
 80098d4:	4642      	mov	r2, r8
 80098d6:	4631      	mov	r1, r6
 80098d8:	4628      	mov	r0, r5
 80098da:	47b8      	blx	r7
 80098dc:	3001      	adds	r0, #1
 80098de:	d12b      	bne.n	8009938 <_printf_float+0x23c>
 80098e0:	e767      	b.n	80097b2 <_printf_float+0xb6>
 80098e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80098e6:	f240 80dd 	bls.w	8009aa4 <_printf_float+0x3a8>
 80098ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80098ee:	2200      	movs	r2, #0
 80098f0:	2300      	movs	r3, #0
 80098f2:	f7f7 f909 	bl	8000b08 <__aeabi_dcmpeq>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d033      	beq.n	8009962 <_printf_float+0x266>
 80098fa:	4a37      	ldr	r2, [pc, #220]	@ (80099d8 <_printf_float+0x2dc>)
 80098fc:	2301      	movs	r3, #1
 80098fe:	4631      	mov	r1, r6
 8009900:	4628      	mov	r0, r5
 8009902:	47b8      	blx	r7
 8009904:	3001      	adds	r0, #1
 8009906:	f43f af54 	beq.w	80097b2 <_printf_float+0xb6>
 800990a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800990e:	4543      	cmp	r3, r8
 8009910:	db02      	blt.n	8009918 <_printf_float+0x21c>
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	07d8      	lsls	r0, r3, #31
 8009916:	d50f      	bpl.n	8009938 <_printf_float+0x23c>
 8009918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800991c:	4631      	mov	r1, r6
 800991e:	4628      	mov	r0, r5
 8009920:	47b8      	blx	r7
 8009922:	3001      	adds	r0, #1
 8009924:	f43f af45 	beq.w	80097b2 <_printf_float+0xb6>
 8009928:	f04f 0900 	mov.w	r9, #0
 800992c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009930:	f104 0a1a 	add.w	sl, r4, #26
 8009934:	45c8      	cmp	r8, r9
 8009936:	dc09      	bgt.n	800994c <_printf_float+0x250>
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	079b      	lsls	r3, r3, #30
 800993c:	f100 8103 	bmi.w	8009b46 <_printf_float+0x44a>
 8009940:	68e0      	ldr	r0, [r4, #12]
 8009942:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009944:	4298      	cmp	r0, r3
 8009946:	bfb8      	it	lt
 8009948:	4618      	movlt	r0, r3
 800994a:	e734      	b.n	80097b6 <_printf_float+0xba>
 800994c:	2301      	movs	r3, #1
 800994e:	4652      	mov	r2, sl
 8009950:	4631      	mov	r1, r6
 8009952:	4628      	mov	r0, r5
 8009954:	47b8      	blx	r7
 8009956:	3001      	adds	r0, #1
 8009958:	f43f af2b 	beq.w	80097b2 <_printf_float+0xb6>
 800995c:	f109 0901 	add.w	r9, r9, #1
 8009960:	e7e8      	b.n	8009934 <_printf_float+0x238>
 8009962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009964:	2b00      	cmp	r3, #0
 8009966:	dc39      	bgt.n	80099dc <_printf_float+0x2e0>
 8009968:	4a1b      	ldr	r2, [pc, #108]	@ (80099d8 <_printf_float+0x2dc>)
 800996a:	2301      	movs	r3, #1
 800996c:	4631      	mov	r1, r6
 800996e:	4628      	mov	r0, r5
 8009970:	47b8      	blx	r7
 8009972:	3001      	adds	r0, #1
 8009974:	f43f af1d 	beq.w	80097b2 <_printf_float+0xb6>
 8009978:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800997c:	ea59 0303 	orrs.w	r3, r9, r3
 8009980:	d102      	bne.n	8009988 <_printf_float+0x28c>
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	07d9      	lsls	r1, r3, #31
 8009986:	d5d7      	bpl.n	8009938 <_printf_float+0x23c>
 8009988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f af0d 	beq.w	80097b2 <_printf_float+0xb6>
 8009998:	f04f 0a00 	mov.w	sl, #0
 800999c:	f104 0b1a 	add.w	fp, r4, #26
 80099a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a2:	425b      	negs	r3, r3
 80099a4:	4553      	cmp	r3, sl
 80099a6:	dc01      	bgt.n	80099ac <_printf_float+0x2b0>
 80099a8:	464b      	mov	r3, r9
 80099aa:	e793      	b.n	80098d4 <_printf_float+0x1d8>
 80099ac:	2301      	movs	r3, #1
 80099ae:	465a      	mov	r2, fp
 80099b0:	4631      	mov	r1, r6
 80099b2:	4628      	mov	r0, r5
 80099b4:	47b8      	blx	r7
 80099b6:	3001      	adds	r0, #1
 80099b8:	f43f aefb 	beq.w	80097b2 <_printf_float+0xb6>
 80099bc:	f10a 0a01 	add.w	sl, sl, #1
 80099c0:	e7ee      	b.n	80099a0 <_printf_float+0x2a4>
 80099c2:	bf00      	nop
 80099c4:	7fefffff 	.word	0x7fefffff
 80099c8:	0800d688 	.word	0x0800d688
 80099cc:	0800d68c 	.word	0x0800d68c
 80099d0:	0800d690 	.word	0x0800d690
 80099d4:	0800d694 	.word	0x0800d694
 80099d8:	0800d698 	.word	0x0800d698
 80099dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80099e2:	4553      	cmp	r3, sl
 80099e4:	bfa8      	it	ge
 80099e6:	4653      	movge	r3, sl
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	4699      	mov	r9, r3
 80099ec:	dc36      	bgt.n	8009a5c <_printf_float+0x360>
 80099ee:	f04f 0b00 	mov.w	fp, #0
 80099f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099f6:	f104 021a 	add.w	r2, r4, #26
 80099fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099fc:	9306      	str	r3, [sp, #24]
 80099fe:	eba3 0309 	sub.w	r3, r3, r9
 8009a02:	455b      	cmp	r3, fp
 8009a04:	dc31      	bgt.n	8009a6a <_printf_float+0x36e>
 8009a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a08:	459a      	cmp	sl, r3
 8009a0a:	dc3a      	bgt.n	8009a82 <_printf_float+0x386>
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	07da      	lsls	r2, r3, #31
 8009a10:	d437      	bmi.n	8009a82 <_printf_float+0x386>
 8009a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a14:	ebaa 0903 	sub.w	r9, sl, r3
 8009a18:	9b06      	ldr	r3, [sp, #24]
 8009a1a:	ebaa 0303 	sub.w	r3, sl, r3
 8009a1e:	4599      	cmp	r9, r3
 8009a20:	bfa8      	it	ge
 8009a22:	4699      	movge	r9, r3
 8009a24:	f1b9 0f00 	cmp.w	r9, #0
 8009a28:	dc33      	bgt.n	8009a92 <_printf_float+0x396>
 8009a2a:	f04f 0800 	mov.w	r8, #0
 8009a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a32:	f104 0b1a 	add.w	fp, r4, #26
 8009a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a38:	ebaa 0303 	sub.w	r3, sl, r3
 8009a3c:	eba3 0309 	sub.w	r3, r3, r9
 8009a40:	4543      	cmp	r3, r8
 8009a42:	f77f af79 	ble.w	8009938 <_printf_float+0x23c>
 8009a46:	2301      	movs	r3, #1
 8009a48:	465a      	mov	r2, fp
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	47b8      	blx	r7
 8009a50:	3001      	adds	r0, #1
 8009a52:	f43f aeae 	beq.w	80097b2 <_printf_float+0xb6>
 8009a56:	f108 0801 	add.w	r8, r8, #1
 8009a5a:	e7ec      	b.n	8009a36 <_printf_float+0x33a>
 8009a5c:	4642      	mov	r2, r8
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b8      	blx	r7
 8009a64:	3001      	adds	r0, #1
 8009a66:	d1c2      	bne.n	80099ee <_printf_float+0x2f2>
 8009a68:	e6a3      	b.n	80097b2 <_printf_float+0xb6>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	4628      	mov	r0, r5
 8009a70:	9206      	str	r2, [sp, #24]
 8009a72:	47b8      	blx	r7
 8009a74:	3001      	adds	r0, #1
 8009a76:	f43f ae9c 	beq.w	80097b2 <_printf_float+0xb6>
 8009a7a:	9a06      	ldr	r2, [sp, #24]
 8009a7c:	f10b 0b01 	add.w	fp, fp, #1
 8009a80:	e7bb      	b.n	80099fa <_printf_float+0x2fe>
 8009a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a86:	4631      	mov	r1, r6
 8009a88:	4628      	mov	r0, r5
 8009a8a:	47b8      	blx	r7
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d1c0      	bne.n	8009a12 <_printf_float+0x316>
 8009a90:	e68f      	b.n	80097b2 <_printf_float+0xb6>
 8009a92:	9a06      	ldr	r2, [sp, #24]
 8009a94:	464b      	mov	r3, r9
 8009a96:	4442      	add	r2, r8
 8009a98:	4631      	mov	r1, r6
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	47b8      	blx	r7
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	d1c3      	bne.n	8009a2a <_printf_float+0x32e>
 8009aa2:	e686      	b.n	80097b2 <_printf_float+0xb6>
 8009aa4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009aa8:	f1ba 0f01 	cmp.w	sl, #1
 8009aac:	dc01      	bgt.n	8009ab2 <_printf_float+0x3b6>
 8009aae:	07db      	lsls	r3, r3, #31
 8009ab0:	d536      	bpl.n	8009b20 <_printf_float+0x424>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	4642      	mov	r2, r8
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	4628      	mov	r0, r5
 8009aba:	47b8      	blx	r7
 8009abc:	3001      	adds	r0, #1
 8009abe:	f43f ae78 	beq.w	80097b2 <_printf_float+0xb6>
 8009ac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4628      	mov	r0, r5
 8009aca:	47b8      	blx	r7
 8009acc:	3001      	adds	r0, #1
 8009ace:	f43f ae70 	beq.w	80097b2 <_printf_float+0xb6>
 8009ad2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ade:	f7f7 f813 	bl	8000b08 <__aeabi_dcmpeq>
 8009ae2:	b9c0      	cbnz	r0, 8009b16 <_printf_float+0x41a>
 8009ae4:	4653      	mov	r3, sl
 8009ae6:	f108 0201 	add.w	r2, r8, #1
 8009aea:	4631      	mov	r1, r6
 8009aec:	4628      	mov	r0, r5
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	d10c      	bne.n	8009b0e <_printf_float+0x412>
 8009af4:	e65d      	b.n	80097b2 <_printf_float+0xb6>
 8009af6:	2301      	movs	r3, #1
 8009af8:	465a      	mov	r2, fp
 8009afa:	4631      	mov	r1, r6
 8009afc:	4628      	mov	r0, r5
 8009afe:	47b8      	blx	r7
 8009b00:	3001      	adds	r0, #1
 8009b02:	f43f ae56 	beq.w	80097b2 <_printf_float+0xb6>
 8009b06:	f108 0801 	add.w	r8, r8, #1
 8009b0a:	45d0      	cmp	r8, sl
 8009b0c:	dbf3      	blt.n	8009af6 <_printf_float+0x3fa>
 8009b0e:	464b      	mov	r3, r9
 8009b10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009b14:	e6df      	b.n	80098d6 <_printf_float+0x1da>
 8009b16:	f04f 0800 	mov.w	r8, #0
 8009b1a:	f104 0b1a 	add.w	fp, r4, #26
 8009b1e:	e7f4      	b.n	8009b0a <_printf_float+0x40e>
 8009b20:	2301      	movs	r3, #1
 8009b22:	4642      	mov	r2, r8
 8009b24:	e7e1      	b.n	8009aea <_printf_float+0x3ee>
 8009b26:	2301      	movs	r3, #1
 8009b28:	464a      	mov	r2, r9
 8009b2a:	4631      	mov	r1, r6
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	47b8      	blx	r7
 8009b30:	3001      	adds	r0, #1
 8009b32:	f43f ae3e 	beq.w	80097b2 <_printf_float+0xb6>
 8009b36:	f108 0801 	add.w	r8, r8, #1
 8009b3a:	68e3      	ldr	r3, [r4, #12]
 8009b3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b3e:	1a5b      	subs	r3, r3, r1
 8009b40:	4543      	cmp	r3, r8
 8009b42:	dcf0      	bgt.n	8009b26 <_printf_float+0x42a>
 8009b44:	e6fc      	b.n	8009940 <_printf_float+0x244>
 8009b46:	f04f 0800 	mov.w	r8, #0
 8009b4a:	f104 0919 	add.w	r9, r4, #25
 8009b4e:	e7f4      	b.n	8009b3a <_printf_float+0x43e>

08009b50 <_printf_common>:
 8009b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	4616      	mov	r6, r2
 8009b56:	4698      	mov	r8, r3
 8009b58:	688a      	ldr	r2, [r1, #8]
 8009b5a:	690b      	ldr	r3, [r1, #16]
 8009b5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b60:	4293      	cmp	r3, r2
 8009b62:	bfb8      	it	lt
 8009b64:	4613      	movlt	r3, r2
 8009b66:	6033      	str	r3, [r6, #0]
 8009b68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	460c      	mov	r4, r1
 8009b70:	b10a      	cbz	r2, 8009b76 <_printf_common+0x26>
 8009b72:	3301      	adds	r3, #1
 8009b74:	6033      	str	r3, [r6, #0]
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	0699      	lsls	r1, r3, #26
 8009b7a:	bf42      	ittt	mi
 8009b7c:	6833      	ldrmi	r3, [r6, #0]
 8009b7e:	3302      	addmi	r3, #2
 8009b80:	6033      	strmi	r3, [r6, #0]
 8009b82:	6825      	ldr	r5, [r4, #0]
 8009b84:	f015 0506 	ands.w	r5, r5, #6
 8009b88:	d106      	bne.n	8009b98 <_printf_common+0x48>
 8009b8a:	f104 0a19 	add.w	sl, r4, #25
 8009b8e:	68e3      	ldr	r3, [r4, #12]
 8009b90:	6832      	ldr	r2, [r6, #0]
 8009b92:	1a9b      	subs	r3, r3, r2
 8009b94:	42ab      	cmp	r3, r5
 8009b96:	dc26      	bgt.n	8009be6 <_printf_common+0x96>
 8009b98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b9c:	6822      	ldr	r2, [r4, #0]
 8009b9e:	3b00      	subs	r3, #0
 8009ba0:	bf18      	it	ne
 8009ba2:	2301      	movne	r3, #1
 8009ba4:	0692      	lsls	r2, r2, #26
 8009ba6:	d42b      	bmi.n	8009c00 <_printf_common+0xb0>
 8009ba8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009bac:	4641      	mov	r1, r8
 8009bae:	4638      	mov	r0, r7
 8009bb0:	47c8      	blx	r9
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	d01e      	beq.n	8009bf4 <_printf_common+0xa4>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	6922      	ldr	r2, [r4, #16]
 8009bba:	f003 0306 	and.w	r3, r3, #6
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	bf02      	ittt	eq
 8009bc2:	68e5      	ldreq	r5, [r4, #12]
 8009bc4:	6833      	ldreq	r3, [r6, #0]
 8009bc6:	1aed      	subeq	r5, r5, r3
 8009bc8:	68a3      	ldr	r3, [r4, #8]
 8009bca:	bf0c      	ite	eq
 8009bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bd0:	2500      	movne	r5, #0
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	bfc4      	itt	gt
 8009bd6:	1a9b      	subgt	r3, r3, r2
 8009bd8:	18ed      	addgt	r5, r5, r3
 8009bda:	2600      	movs	r6, #0
 8009bdc:	341a      	adds	r4, #26
 8009bde:	42b5      	cmp	r5, r6
 8009be0:	d11a      	bne.n	8009c18 <_printf_common+0xc8>
 8009be2:	2000      	movs	r0, #0
 8009be4:	e008      	b.n	8009bf8 <_printf_common+0xa8>
 8009be6:	2301      	movs	r3, #1
 8009be8:	4652      	mov	r2, sl
 8009bea:	4641      	mov	r1, r8
 8009bec:	4638      	mov	r0, r7
 8009bee:	47c8      	blx	r9
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d103      	bne.n	8009bfc <_printf_common+0xac>
 8009bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bfc:	3501      	adds	r5, #1
 8009bfe:	e7c6      	b.n	8009b8e <_printf_common+0x3e>
 8009c00:	18e1      	adds	r1, r4, r3
 8009c02:	1c5a      	adds	r2, r3, #1
 8009c04:	2030      	movs	r0, #48	@ 0x30
 8009c06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c0a:	4422      	add	r2, r4
 8009c0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c14:	3302      	adds	r3, #2
 8009c16:	e7c7      	b.n	8009ba8 <_printf_common+0x58>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	4641      	mov	r1, r8
 8009c1e:	4638      	mov	r0, r7
 8009c20:	47c8      	blx	r9
 8009c22:	3001      	adds	r0, #1
 8009c24:	d0e6      	beq.n	8009bf4 <_printf_common+0xa4>
 8009c26:	3601      	adds	r6, #1
 8009c28:	e7d9      	b.n	8009bde <_printf_common+0x8e>
	...

08009c2c <_printf_i>:
 8009c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c30:	7e0f      	ldrb	r7, [r1, #24]
 8009c32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c34:	2f78      	cmp	r7, #120	@ 0x78
 8009c36:	4691      	mov	r9, r2
 8009c38:	4680      	mov	r8, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	469a      	mov	sl, r3
 8009c3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c42:	d807      	bhi.n	8009c54 <_printf_i+0x28>
 8009c44:	2f62      	cmp	r7, #98	@ 0x62
 8009c46:	d80a      	bhi.n	8009c5e <_printf_i+0x32>
 8009c48:	2f00      	cmp	r7, #0
 8009c4a:	f000 80d2 	beq.w	8009df2 <_printf_i+0x1c6>
 8009c4e:	2f58      	cmp	r7, #88	@ 0x58
 8009c50:	f000 80b9 	beq.w	8009dc6 <_printf_i+0x19a>
 8009c54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c5c:	e03a      	b.n	8009cd4 <_printf_i+0xa8>
 8009c5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c62:	2b15      	cmp	r3, #21
 8009c64:	d8f6      	bhi.n	8009c54 <_printf_i+0x28>
 8009c66:	a101      	add	r1, pc, #4	@ (adr r1, 8009c6c <_printf_i+0x40>)
 8009c68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c6c:	08009cc5 	.word	0x08009cc5
 8009c70:	08009cd9 	.word	0x08009cd9
 8009c74:	08009c55 	.word	0x08009c55
 8009c78:	08009c55 	.word	0x08009c55
 8009c7c:	08009c55 	.word	0x08009c55
 8009c80:	08009c55 	.word	0x08009c55
 8009c84:	08009cd9 	.word	0x08009cd9
 8009c88:	08009c55 	.word	0x08009c55
 8009c8c:	08009c55 	.word	0x08009c55
 8009c90:	08009c55 	.word	0x08009c55
 8009c94:	08009c55 	.word	0x08009c55
 8009c98:	08009dd9 	.word	0x08009dd9
 8009c9c:	08009d03 	.word	0x08009d03
 8009ca0:	08009d93 	.word	0x08009d93
 8009ca4:	08009c55 	.word	0x08009c55
 8009ca8:	08009c55 	.word	0x08009c55
 8009cac:	08009dfb 	.word	0x08009dfb
 8009cb0:	08009c55 	.word	0x08009c55
 8009cb4:	08009d03 	.word	0x08009d03
 8009cb8:	08009c55 	.word	0x08009c55
 8009cbc:	08009c55 	.word	0x08009c55
 8009cc0:	08009d9b 	.word	0x08009d9b
 8009cc4:	6833      	ldr	r3, [r6, #0]
 8009cc6:	1d1a      	adds	r2, r3, #4
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6032      	str	r2, [r6, #0]
 8009ccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e09d      	b.n	8009e14 <_printf_i+0x1e8>
 8009cd8:	6833      	ldr	r3, [r6, #0]
 8009cda:	6820      	ldr	r0, [r4, #0]
 8009cdc:	1d19      	adds	r1, r3, #4
 8009cde:	6031      	str	r1, [r6, #0]
 8009ce0:	0606      	lsls	r6, r0, #24
 8009ce2:	d501      	bpl.n	8009ce8 <_printf_i+0xbc>
 8009ce4:	681d      	ldr	r5, [r3, #0]
 8009ce6:	e003      	b.n	8009cf0 <_printf_i+0xc4>
 8009ce8:	0645      	lsls	r5, r0, #25
 8009cea:	d5fb      	bpl.n	8009ce4 <_printf_i+0xb8>
 8009cec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009cf0:	2d00      	cmp	r5, #0
 8009cf2:	da03      	bge.n	8009cfc <_printf_i+0xd0>
 8009cf4:	232d      	movs	r3, #45	@ 0x2d
 8009cf6:	426d      	negs	r5, r5
 8009cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cfc:	4859      	ldr	r0, [pc, #356]	@ (8009e64 <_printf_i+0x238>)
 8009cfe:	230a      	movs	r3, #10
 8009d00:	e011      	b.n	8009d26 <_printf_i+0xfa>
 8009d02:	6821      	ldr	r1, [r4, #0]
 8009d04:	6833      	ldr	r3, [r6, #0]
 8009d06:	0608      	lsls	r0, r1, #24
 8009d08:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d0c:	d402      	bmi.n	8009d14 <_printf_i+0xe8>
 8009d0e:	0649      	lsls	r1, r1, #25
 8009d10:	bf48      	it	mi
 8009d12:	b2ad      	uxthmi	r5, r5
 8009d14:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d16:	4853      	ldr	r0, [pc, #332]	@ (8009e64 <_printf_i+0x238>)
 8009d18:	6033      	str	r3, [r6, #0]
 8009d1a:	bf14      	ite	ne
 8009d1c:	230a      	movne	r3, #10
 8009d1e:	2308      	moveq	r3, #8
 8009d20:	2100      	movs	r1, #0
 8009d22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d26:	6866      	ldr	r6, [r4, #4]
 8009d28:	60a6      	str	r6, [r4, #8]
 8009d2a:	2e00      	cmp	r6, #0
 8009d2c:	bfa2      	ittt	ge
 8009d2e:	6821      	ldrge	r1, [r4, #0]
 8009d30:	f021 0104 	bicge.w	r1, r1, #4
 8009d34:	6021      	strge	r1, [r4, #0]
 8009d36:	b90d      	cbnz	r5, 8009d3c <_printf_i+0x110>
 8009d38:	2e00      	cmp	r6, #0
 8009d3a:	d04b      	beq.n	8009dd4 <_printf_i+0x1a8>
 8009d3c:	4616      	mov	r6, r2
 8009d3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d42:	fb03 5711 	mls	r7, r3, r1, r5
 8009d46:	5dc7      	ldrb	r7, [r0, r7]
 8009d48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d4c:	462f      	mov	r7, r5
 8009d4e:	42bb      	cmp	r3, r7
 8009d50:	460d      	mov	r5, r1
 8009d52:	d9f4      	bls.n	8009d3e <_printf_i+0x112>
 8009d54:	2b08      	cmp	r3, #8
 8009d56:	d10b      	bne.n	8009d70 <_printf_i+0x144>
 8009d58:	6823      	ldr	r3, [r4, #0]
 8009d5a:	07df      	lsls	r7, r3, #31
 8009d5c:	d508      	bpl.n	8009d70 <_printf_i+0x144>
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	6861      	ldr	r1, [r4, #4]
 8009d62:	4299      	cmp	r1, r3
 8009d64:	bfde      	ittt	le
 8009d66:	2330      	movle	r3, #48	@ 0x30
 8009d68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d70:	1b92      	subs	r2, r2, r6
 8009d72:	6122      	str	r2, [r4, #16]
 8009d74:	f8cd a000 	str.w	sl, [sp]
 8009d78:	464b      	mov	r3, r9
 8009d7a:	aa03      	add	r2, sp, #12
 8009d7c:	4621      	mov	r1, r4
 8009d7e:	4640      	mov	r0, r8
 8009d80:	f7ff fee6 	bl	8009b50 <_printf_common>
 8009d84:	3001      	adds	r0, #1
 8009d86:	d14a      	bne.n	8009e1e <_printf_i+0x1f2>
 8009d88:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8c:	b004      	add	sp, #16
 8009d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	f043 0320 	orr.w	r3, r3, #32
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	4833      	ldr	r0, [pc, #204]	@ (8009e68 <_printf_i+0x23c>)
 8009d9c:	2778      	movs	r7, #120	@ 0x78
 8009d9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	6831      	ldr	r1, [r6, #0]
 8009da6:	061f      	lsls	r7, r3, #24
 8009da8:	f851 5b04 	ldr.w	r5, [r1], #4
 8009dac:	d402      	bmi.n	8009db4 <_printf_i+0x188>
 8009dae:	065f      	lsls	r7, r3, #25
 8009db0:	bf48      	it	mi
 8009db2:	b2ad      	uxthmi	r5, r5
 8009db4:	6031      	str	r1, [r6, #0]
 8009db6:	07d9      	lsls	r1, r3, #31
 8009db8:	bf44      	itt	mi
 8009dba:	f043 0320 	orrmi.w	r3, r3, #32
 8009dbe:	6023      	strmi	r3, [r4, #0]
 8009dc0:	b11d      	cbz	r5, 8009dca <_printf_i+0x19e>
 8009dc2:	2310      	movs	r3, #16
 8009dc4:	e7ac      	b.n	8009d20 <_printf_i+0xf4>
 8009dc6:	4827      	ldr	r0, [pc, #156]	@ (8009e64 <_printf_i+0x238>)
 8009dc8:	e7e9      	b.n	8009d9e <_printf_i+0x172>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	f023 0320 	bic.w	r3, r3, #32
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	e7f6      	b.n	8009dc2 <_printf_i+0x196>
 8009dd4:	4616      	mov	r6, r2
 8009dd6:	e7bd      	b.n	8009d54 <_printf_i+0x128>
 8009dd8:	6833      	ldr	r3, [r6, #0]
 8009dda:	6825      	ldr	r5, [r4, #0]
 8009ddc:	6961      	ldr	r1, [r4, #20]
 8009dde:	1d18      	adds	r0, r3, #4
 8009de0:	6030      	str	r0, [r6, #0]
 8009de2:	062e      	lsls	r6, r5, #24
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	d501      	bpl.n	8009dec <_printf_i+0x1c0>
 8009de8:	6019      	str	r1, [r3, #0]
 8009dea:	e002      	b.n	8009df2 <_printf_i+0x1c6>
 8009dec:	0668      	lsls	r0, r5, #25
 8009dee:	d5fb      	bpl.n	8009de8 <_printf_i+0x1bc>
 8009df0:	8019      	strh	r1, [r3, #0]
 8009df2:	2300      	movs	r3, #0
 8009df4:	6123      	str	r3, [r4, #16]
 8009df6:	4616      	mov	r6, r2
 8009df8:	e7bc      	b.n	8009d74 <_printf_i+0x148>
 8009dfa:	6833      	ldr	r3, [r6, #0]
 8009dfc:	1d1a      	adds	r2, r3, #4
 8009dfe:	6032      	str	r2, [r6, #0]
 8009e00:	681e      	ldr	r6, [r3, #0]
 8009e02:	6862      	ldr	r2, [r4, #4]
 8009e04:	2100      	movs	r1, #0
 8009e06:	4630      	mov	r0, r6
 8009e08:	f7f6 fa02 	bl	8000210 <memchr>
 8009e0c:	b108      	cbz	r0, 8009e12 <_printf_i+0x1e6>
 8009e0e:	1b80      	subs	r0, r0, r6
 8009e10:	6060      	str	r0, [r4, #4]
 8009e12:	6863      	ldr	r3, [r4, #4]
 8009e14:	6123      	str	r3, [r4, #16]
 8009e16:	2300      	movs	r3, #0
 8009e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e1c:	e7aa      	b.n	8009d74 <_printf_i+0x148>
 8009e1e:	6923      	ldr	r3, [r4, #16]
 8009e20:	4632      	mov	r2, r6
 8009e22:	4649      	mov	r1, r9
 8009e24:	4640      	mov	r0, r8
 8009e26:	47d0      	blx	sl
 8009e28:	3001      	adds	r0, #1
 8009e2a:	d0ad      	beq.n	8009d88 <_printf_i+0x15c>
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	079b      	lsls	r3, r3, #30
 8009e30:	d413      	bmi.n	8009e5a <_printf_i+0x22e>
 8009e32:	68e0      	ldr	r0, [r4, #12]
 8009e34:	9b03      	ldr	r3, [sp, #12]
 8009e36:	4298      	cmp	r0, r3
 8009e38:	bfb8      	it	lt
 8009e3a:	4618      	movlt	r0, r3
 8009e3c:	e7a6      	b.n	8009d8c <_printf_i+0x160>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	4632      	mov	r2, r6
 8009e42:	4649      	mov	r1, r9
 8009e44:	4640      	mov	r0, r8
 8009e46:	47d0      	blx	sl
 8009e48:	3001      	adds	r0, #1
 8009e4a:	d09d      	beq.n	8009d88 <_printf_i+0x15c>
 8009e4c:	3501      	adds	r5, #1
 8009e4e:	68e3      	ldr	r3, [r4, #12]
 8009e50:	9903      	ldr	r1, [sp, #12]
 8009e52:	1a5b      	subs	r3, r3, r1
 8009e54:	42ab      	cmp	r3, r5
 8009e56:	dcf2      	bgt.n	8009e3e <_printf_i+0x212>
 8009e58:	e7eb      	b.n	8009e32 <_printf_i+0x206>
 8009e5a:	2500      	movs	r5, #0
 8009e5c:	f104 0619 	add.w	r6, r4, #25
 8009e60:	e7f5      	b.n	8009e4e <_printf_i+0x222>
 8009e62:	bf00      	nop
 8009e64:	0800d69a 	.word	0x0800d69a
 8009e68:	0800d6ab 	.word	0x0800d6ab

08009e6c <_scanf_float>:
 8009e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e70:	b087      	sub	sp, #28
 8009e72:	4617      	mov	r7, r2
 8009e74:	9303      	str	r3, [sp, #12]
 8009e76:	688b      	ldr	r3, [r1, #8]
 8009e78:	1e5a      	subs	r2, r3, #1
 8009e7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009e7e:	bf81      	itttt	hi
 8009e80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009e84:	eb03 0b05 	addhi.w	fp, r3, r5
 8009e88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009e8c:	608b      	strhi	r3, [r1, #8]
 8009e8e:	680b      	ldr	r3, [r1, #0]
 8009e90:	460a      	mov	r2, r1
 8009e92:	f04f 0500 	mov.w	r5, #0
 8009e96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009e9a:	f842 3b1c 	str.w	r3, [r2], #28
 8009e9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	bf98      	it	ls
 8009ea8:	f04f 0b00 	movls.w	fp, #0
 8009eac:	9201      	str	r2, [sp, #4]
 8009eae:	4616      	mov	r6, r2
 8009eb0:	46aa      	mov	sl, r5
 8009eb2:	46a9      	mov	r9, r5
 8009eb4:	9502      	str	r5, [sp, #8]
 8009eb6:	68a2      	ldr	r2, [r4, #8]
 8009eb8:	b152      	cbz	r2, 8009ed0 <_scanf_float+0x64>
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	2b4e      	cmp	r3, #78	@ 0x4e
 8009ec0:	d864      	bhi.n	8009f8c <_scanf_float+0x120>
 8009ec2:	2b40      	cmp	r3, #64	@ 0x40
 8009ec4:	d83c      	bhi.n	8009f40 <_scanf_float+0xd4>
 8009ec6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009eca:	b2c8      	uxtb	r0, r1
 8009ecc:	280e      	cmp	r0, #14
 8009ece:	d93a      	bls.n	8009f46 <_scanf_float+0xda>
 8009ed0:	f1b9 0f00 	cmp.w	r9, #0
 8009ed4:	d003      	beq.n	8009ede <_scanf_float+0x72>
 8009ed6:	6823      	ldr	r3, [r4, #0]
 8009ed8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009edc:	6023      	str	r3, [r4, #0]
 8009ede:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ee2:	f1ba 0f01 	cmp.w	sl, #1
 8009ee6:	f200 8117 	bhi.w	800a118 <_scanf_float+0x2ac>
 8009eea:	9b01      	ldr	r3, [sp, #4]
 8009eec:	429e      	cmp	r6, r3
 8009eee:	f200 8108 	bhi.w	800a102 <_scanf_float+0x296>
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	b007      	add	sp, #28
 8009ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009efa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009efe:	2a0d      	cmp	r2, #13
 8009f00:	d8e6      	bhi.n	8009ed0 <_scanf_float+0x64>
 8009f02:	a101      	add	r1, pc, #4	@ (adr r1, 8009f08 <_scanf_float+0x9c>)
 8009f04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f08:	0800a04f 	.word	0x0800a04f
 8009f0c:	08009ed1 	.word	0x08009ed1
 8009f10:	08009ed1 	.word	0x08009ed1
 8009f14:	08009ed1 	.word	0x08009ed1
 8009f18:	0800a0af 	.word	0x0800a0af
 8009f1c:	0800a087 	.word	0x0800a087
 8009f20:	08009ed1 	.word	0x08009ed1
 8009f24:	08009ed1 	.word	0x08009ed1
 8009f28:	0800a05d 	.word	0x0800a05d
 8009f2c:	08009ed1 	.word	0x08009ed1
 8009f30:	08009ed1 	.word	0x08009ed1
 8009f34:	08009ed1 	.word	0x08009ed1
 8009f38:	08009ed1 	.word	0x08009ed1
 8009f3c:	0800a015 	.word	0x0800a015
 8009f40:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009f44:	e7db      	b.n	8009efe <_scanf_float+0x92>
 8009f46:	290e      	cmp	r1, #14
 8009f48:	d8c2      	bhi.n	8009ed0 <_scanf_float+0x64>
 8009f4a:	a001      	add	r0, pc, #4	@ (adr r0, 8009f50 <_scanf_float+0xe4>)
 8009f4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009f50:	0800a005 	.word	0x0800a005
 8009f54:	08009ed1 	.word	0x08009ed1
 8009f58:	0800a005 	.word	0x0800a005
 8009f5c:	0800a09b 	.word	0x0800a09b
 8009f60:	08009ed1 	.word	0x08009ed1
 8009f64:	08009fad 	.word	0x08009fad
 8009f68:	08009feb 	.word	0x08009feb
 8009f6c:	08009feb 	.word	0x08009feb
 8009f70:	08009feb 	.word	0x08009feb
 8009f74:	08009feb 	.word	0x08009feb
 8009f78:	08009feb 	.word	0x08009feb
 8009f7c:	08009feb 	.word	0x08009feb
 8009f80:	08009feb 	.word	0x08009feb
 8009f84:	08009feb 	.word	0x08009feb
 8009f88:	08009feb 	.word	0x08009feb
 8009f8c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009f8e:	d809      	bhi.n	8009fa4 <_scanf_float+0x138>
 8009f90:	2b60      	cmp	r3, #96	@ 0x60
 8009f92:	d8b2      	bhi.n	8009efa <_scanf_float+0x8e>
 8009f94:	2b54      	cmp	r3, #84	@ 0x54
 8009f96:	d07b      	beq.n	800a090 <_scanf_float+0x224>
 8009f98:	2b59      	cmp	r3, #89	@ 0x59
 8009f9a:	d199      	bne.n	8009ed0 <_scanf_float+0x64>
 8009f9c:	2d07      	cmp	r5, #7
 8009f9e:	d197      	bne.n	8009ed0 <_scanf_float+0x64>
 8009fa0:	2508      	movs	r5, #8
 8009fa2:	e02c      	b.n	8009ffe <_scanf_float+0x192>
 8009fa4:	2b74      	cmp	r3, #116	@ 0x74
 8009fa6:	d073      	beq.n	800a090 <_scanf_float+0x224>
 8009fa8:	2b79      	cmp	r3, #121	@ 0x79
 8009faa:	e7f6      	b.n	8009f9a <_scanf_float+0x12e>
 8009fac:	6821      	ldr	r1, [r4, #0]
 8009fae:	05c8      	lsls	r0, r1, #23
 8009fb0:	d51b      	bpl.n	8009fea <_scanf_float+0x17e>
 8009fb2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009fb6:	6021      	str	r1, [r4, #0]
 8009fb8:	f109 0901 	add.w	r9, r9, #1
 8009fbc:	f1bb 0f00 	cmp.w	fp, #0
 8009fc0:	d003      	beq.n	8009fca <_scanf_float+0x15e>
 8009fc2:	3201      	adds	r2, #1
 8009fc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fc8:	60a2      	str	r2, [r4, #8]
 8009fca:	68a3      	ldr	r3, [r4, #8]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	60a3      	str	r3, [r4, #8]
 8009fd0:	6923      	ldr	r3, [r4, #16]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	6123      	str	r3, [r4, #16]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	607b      	str	r3, [r7, #4]
 8009fde:	f340 8087 	ble.w	800a0f0 <_scanf_float+0x284>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	603b      	str	r3, [r7, #0]
 8009fe8:	e765      	b.n	8009eb6 <_scanf_float+0x4a>
 8009fea:	eb1a 0105 	adds.w	r1, sl, r5
 8009fee:	f47f af6f 	bne.w	8009ed0 <_scanf_float+0x64>
 8009ff2:	6822      	ldr	r2, [r4, #0]
 8009ff4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009ff8:	6022      	str	r2, [r4, #0]
 8009ffa:	460d      	mov	r5, r1
 8009ffc:	468a      	mov	sl, r1
 8009ffe:	f806 3b01 	strb.w	r3, [r6], #1
 800a002:	e7e2      	b.n	8009fca <_scanf_float+0x15e>
 800a004:	6822      	ldr	r2, [r4, #0]
 800a006:	0610      	lsls	r0, r2, #24
 800a008:	f57f af62 	bpl.w	8009ed0 <_scanf_float+0x64>
 800a00c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a010:	6022      	str	r2, [r4, #0]
 800a012:	e7f4      	b.n	8009ffe <_scanf_float+0x192>
 800a014:	f1ba 0f00 	cmp.w	sl, #0
 800a018:	d10e      	bne.n	800a038 <_scanf_float+0x1cc>
 800a01a:	f1b9 0f00 	cmp.w	r9, #0
 800a01e:	d10e      	bne.n	800a03e <_scanf_float+0x1d2>
 800a020:	6822      	ldr	r2, [r4, #0]
 800a022:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a026:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a02a:	d108      	bne.n	800a03e <_scanf_float+0x1d2>
 800a02c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a030:	6022      	str	r2, [r4, #0]
 800a032:	f04f 0a01 	mov.w	sl, #1
 800a036:	e7e2      	b.n	8009ffe <_scanf_float+0x192>
 800a038:	f1ba 0f02 	cmp.w	sl, #2
 800a03c:	d055      	beq.n	800a0ea <_scanf_float+0x27e>
 800a03e:	2d01      	cmp	r5, #1
 800a040:	d002      	beq.n	800a048 <_scanf_float+0x1dc>
 800a042:	2d04      	cmp	r5, #4
 800a044:	f47f af44 	bne.w	8009ed0 <_scanf_float+0x64>
 800a048:	3501      	adds	r5, #1
 800a04a:	b2ed      	uxtb	r5, r5
 800a04c:	e7d7      	b.n	8009ffe <_scanf_float+0x192>
 800a04e:	f1ba 0f01 	cmp.w	sl, #1
 800a052:	f47f af3d 	bne.w	8009ed0 <_scanf_float+0x64>
 800a056:	f04f 0a02 	mov.w	sl, #2
 800a05a:	e7d0      	b.n	8009ffe <_scanf_float+0x192>
 800a05c:	b97d      	cbnz	r5, 800a07e <_scanf_float+0x212>
 800a05e:	f1b9 0f00 	cmp.w	r9, #0
 800a062:	f47f af38 	bne.w	8009ed6 <_scanf_float+0x6a>
 800a066:	6822      	ldr	r2, [r4, #0]
 800a068:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a06c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a070:	f040 8108 	bne.w	800a284 <_scanf_float+0x418>
 800a074:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a078:	6022      	str	r2, [r4, #0]
 800a07a:	2501      	movs	r5, #1
 800a07c:	e7bf      	b.n	8009ffe <_scanf_float+0x192>
 800a07e:	2d03      	cmp	r5, #3
 800a080:	d0e2      	beq.n	800a048 <_scanf_float+0x1dc>
 800a082:	2d05      	cmp	r5, #5
 800a084:	e7de      	b.n	800a044 <_scanf_float+0x1d8>
 800a086:	2d02      	cmp	r5, #2
 800a088:	f47f af22 	bne.w	8009ed0 <_scanf_float+0x64>
 800a08c:	2503      	movs	r5, #3
 800a08e:	e7b6      	b.n	8009ffe <_scanf_float+0x192>
 800a090:	2d06      	cmp	r5, #6
 800a092:	f47f af1d 	bne.w	8009ed0 <_scanf_float+0x64>
 800a096:	2507      	movs	r5, #7
 800a098:	e7b1      	b.n	8009ffe <_scanf_float+0x192>
 800a09a:	6822      	ldr	r2, [r4, #0]
 800a09c:	0591      	lsls	r1, r2, #22
 800a09e:	f57f af17 	bpl.w	8009ed0 <_scanf_float+0x64>
 800a0a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a0a6:	6022      	str	r2, [r4, #0]
 800a0a8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0ac:	e7a7      	b.n	8009ffe <_scanf_float+0x192>
 800a0ae:	6822      	ldr	r2, [r4, #0]
 800a0b0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a0b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a0b8:	d006      	beq.n	800a0c8 <_scanf_float+0x25c>
 800a0ba:	0550      	lsls	r0, r2, #21
 800a0bc:	f57f af08 	bpl.w	8009ed0 <_scanf_float+0x64>
 800a0c0:	f1b9 0f00 	cmp.w	r9, #0
 800a0c4:	f000 80de 	beq.w	800a284 <_scanf_float+0x418>
 800a0c8:	0591      	lsls	r1, r2, #22
 800a0ca:	bf58      	it	pl
 800a0cc:	9902      	ldrpl	r1, [sp, #8]
 800a0ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a0d2:	bf58      	it	pl
 800a0d4:	eba9 0101 	subpl.w	r1, r9, r1
 800a0d8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a0dc:	bf58      	it	pl
 800a0de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a0e2:	6022      	str	r2, [r4, #0]
 800a0e4:	f04f 0900 	mov.w	r9, #0
 800a0e8:	e789      	b.n	8009ffe <_scanf_float+0x192>
 800a0ea:	f04f 0a03 	mov.w	sl, #3
 800a0ee:	e786      	b.n	8009ffe <_scanf_float+0x192>
 800a0f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	4798      	blx	r3
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	f43f aedb 	beq.w	8009eb6 <_scanf_float+0x4a>
 800a100:	e6e6      	b.n	8009ed0 <_scanf_float+0x64>
 800a102:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a106:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a10a:	463a      	mov	r2, r7
 800a10c:	4640      	mov	r0, r8
 800a10e:	4798      	blx	r3
 800a110:	6923      	ldr	r3, [r4, #16]
 800a112:	3b01      	subs	r3, #1
 800a114:	6123      	str	r3, [r4, #16]
 800a116:	e6e8      	b.n	8009eea <_scanf_float+0x7e>
 800a118:	1e6b      	subs	r3, r5, #1
 800a11a:	2b06      	cmp	r3, #6
 800a11c:	d824      	bhi.n	800a168 <_scanf_float+0x2fc>
 800a11e:	2d02      	cmp	r5, #2
 800a120:	d836      	bhi.n	800a190 <_scanf_float+0x324>
 800a122:	9b01      	ldr	r3, [sp, #4]
 800a124:	429e      	cmp	r6, r3
 800a126:	f67f aee4 	bls.w	8009ef2 <_scanf_float+0x86>
 800a12a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a12e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a132:	463a      	mov	r2, r7
 800a134:	4640      	mov	r0, r8
 800a136:	4798      	blx	r3
 800a138:	6923      	ldr	r3, [r4, #16]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	6123      	str	r3, [r4, #16]
 800a13e:	e7f0      	b.n	800a122 <_scanf_float+0x2b6>
 800a140:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a144:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a148:	463a      	mov	r2, r7
 800a14a:	4640      	mov	r0, r8
 800a14c:	4798      	blx	r3
 800a14e:	6923      	ldr	r3, [r4, #16]
 800a150:	3b01      	subs	r3, #1
 800a152:	6123      	str	r3, [r4, #16]
 800a154:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a158:	fa5f fa8a 	uxtb.w	sl, sl
 800a15c:	f1ba 0f02 	cmp.w	sl, #2
 800a160:	d1ee      	bne.n	800a140 <_scanf_float+0x2d4>
 800a162:	3d03      	subs	r5, #3
 800a164:	b2ed      	uxtb	r5, r5
 800a166:	1b76      	subs	r6, r6, r5
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	05da      	lsls	r2, r3, #23
 800a16c:	d530      	bpl.n	800a1d0 <_scanf_float+0x364>
 800a16e:	055b      	lsls	r3, r3, #21
 800a170:	d511      	bpl.n	800a196 <_scanf_float+0x32a>
 800a172:	9b01      	ldr	r3, [sp, #4]
 800a174:	429e      	cmp	r6, r3
 800a176:	f67f aebc 	bls.w	8009ef2 <_scanf_float+0x86>
 800a17a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a17e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a182:	463a      	mov	r2, r7
 800a184:	4640      	mov	r0, r8
 800a186:	4798      	blx	r3
 800a188:	6923      	ldr	r3, [r4, #16]
 800a18a:	3b01      	subs	r3, #1
 800a18c:	6123      	str	r3, [r4, #16]
 800a18e:	e7f0      	b.n	800a172 <_scanf_float+0x306>
 800a190:	46aa      	mov	sl, r5
 800a192:	46b3      	mov	fp, r6
 800a194:	e7de      	b.n	800a154 <_scanf_float+0x2e8>
 800a196:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a19a:	6923      	ldr	r3, [r4, #16]
 800a19c:	2965      	cmp	r1, #101	@ 0x65
 800a19e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1a2:	f106 35ff 	add.w	r5, r6, #4294967295
 800a1a6:	6123      	str	r3, [r4, #16]
 800a1a8:	d00c      	beq.n	800a1c4 <_scanf_float+0x358>
 800a1aa:	2945      	cmp	r1, #69	@ 0x45
 800a1ac:	d00a      	beq.n	800a1c4 <_scanf_float+0x358>
 800a1ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1b2:	463a      	mov	r2, r7
 800a1b4:	4640      	mov	r0, r8
 800a1b6:	4798      	blx	r3
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	1eb5      	subs	r5, r6, #2
 800a1c2:	6123      	str	r3, [r4, #16]
 800a1c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a1c8:	463a      	mov	r2, r7
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	4798      	blx	r3
 800a1ce:	462e      	mov	r6, r5
 800a1d0:	6822      	ldr	r2, [r4, #0]
 800a1d2:	f012 0210 	ands.w	r2, r2, #16
 800a1d6:	d001      	beq.n	800a1dc <_scanf_float+0x370>
 800a1d8:	2000      	movs	r0, #0
 800a1da:	e68b      	b.n	8009ef4 <_scanf_float+0x88>
 800a1dc:	7032      	strb	r2, [r6, #0]
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a1e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1e8:	d11c      	bne.n	800a224 <_scanf_float+0x3b8>
 800a1ea:	9b02      	ldr	r3, [sp, #8]
 800a1ec:	454b      	cmp	r3, r9
 800a1ee:	eba3 0209 	sub.w	r2, r3, r9
 800a1f2:	d123      	bne.n	800a23c <_scanf_float+0x3d0>
 800a1f4:	9901      	ldr	r1, [sp, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	f7ff f975 	bl	80094e8 <_strtod_r>
 800a1fe:	9b03      	ldr	r3, [sp, #12]
 800a200:	6821      	ldr	r1, [r4, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f011 0f02 	tst.w	r1, #2
 800a208:	ec57 6b10 	vmov	r6, r7, d0
 800a20c:	f103 0204 	add.w	r2, r3, #4
 800a210:	d01f      	beq.n	800a252 <_scanf_float+0x3e6>
 800a212:	9903      	ldr	r1, [sp, #12]
 800a214:	600a      	str	r2, [r1, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	e9c3 6700 	strd	r6, r7, [r3]
 800a21c:	68e3      	ldr	r3, [r4, #12]
 800a21e:	3301      	adds	r3, #1
 800a220:	60e3      	str	r3, [r4, #12]
 800a222:	e7d9      	b.n	800a1d8 <_scanf_float+0x36c>
 800a224:	9b04      	ldr	r3, [sp, #16]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0e4      	beq.n	800a1f4 <_scanf_float+0x388>
 800a22a:	9905      	ldr	r1, [sp, #20]
 800a22c:	230a      	movs	r3, #10
 800a22e:	3101      	adds	r1, #1
 800a230:	4640      	mov	r0, r8
 800a232:	f002 fa41 	bl	800c6b8 <_strtol_r>
 800a236:	9b04      	ldr	r3, [sp, #16]
 800a238:	9e05      	ldr	r6, [sp, #20]
 800a23a:	1ac2      	subs	r2, r0, r3
 800a23c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a240:	429e      	cmp	r6, r3
 800a242:	bf28      	it	cs
 800a244:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a248:	4910      	ldr	r1, [pc, #64]	@ (800a28c <_scanf_float+0x420>)
 800a24a:	4630      	mov	r0, r6
 800a24c:	f000 f8e4 	bl	800a418 <siprintf>
 800a250:	e7d0      	b.n	800a1f4 <_scanf_float+0x388>
 800a252:	f011 0f04 	tst.w	r1, #4
 800a256:	9903      	ldr	r1, [sp, #12]
 800a258:	600a      	str	r2, [r1, #0]
 800a25a:	d1dc      	bne.n	800a216 <_scanf_float+0x3aa>
 800a25c:	681d      	ldr	r5, [r3, #0]
 800a25e:	4632      	mov	r2, r6
 800a260:	463b      	mov	r3, r7
 800a262:	4630      	mov	r0, r6
 800a264:	4639      	mov	r1, r7
 800a266:	f7f6 fc81 	bl	8000b6c <__aeabi_dcmpun>
 800a26a:	b128      	cbz	r0, 800a278 <_scanf_float+0x40c>
 800a26c:	4808      	ldr	r0, [pc, #32]	@ (800a290 <_scanf_float+0x424>)
 800a26e:	f000 fa3b 	bl	800a6e8 <nanf>
 800a272:	ed85 0a00 	vstr	s0, [r5]
 800a276:	e7d1      	b.n	800a21c <_scanf_float+0x3b0>
 800a278:	4630      	mov	r0, r6
 800a27a:	4639      	mov	r1, r7
 800a27c:	f7f6 fcd4 	bl	8000c28 <__aeabi_d2f>
 800a280:	6028      	str	r0, [r5, #0]
 800a282:	e7cb      	b.n	800a21c <_scanf_float+0x3b0>
 800a284:	f04f 0900 	mov.w	r9, #0
 800a288:	e629      	b.n	8009ede <_scanf_float+0x72>
 800a28a:	bf00      	nop
 800a28c:	0800d6bc 	.word	0x0800d6bc
 800a290:	0800d775 	.word	0x0800d775

0800a294 <std>:
 800a294:	2300      	movs	r3, #0
 800a296:	b510      	push	{r4, lr}
 800a298:	4604      	mov	r4, r0
 800a29a:	e9c0 3300 	strd	r3, r3, [r0]
 800a29e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2a2:	6083      	str	r3, [r0, #8]
 800a2a4:	8181      	strh	r1, [r0, #12]
 800a2a6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a2a8:	81c2      	strh	r2, [r0, #14]
 800a2aa:	6183      	str	r3, [r0, #24]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	2208      	movs	r2, #8
 800a2b0:	305c      	adds	r0, #92	@ 0x5c
 800a2b2:	f000 f914 	bl	800a4de <memset>
 800a2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2ec <std+0x58>)
 800a2b8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f0 <std+0x5c>)
 800a2bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a2be:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f4 <std+0x60>)
 800a2c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a2f8 <std+0x64>)
 800a2c4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2fc <std+0x68>)
 800a2c8:	6224      	str	r4, [r4, #32]
 800a2ca:	429c      	cmp	r4, r3
 800a2cc:	d006      	beq.n	800a2dc <std+0x48>
 800a2ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a2d2:	4294      	cmp	r4, r2
 800a2d4:	d002      	beq.n	800a2dc <std+0x48>
 800a2d6:	33d0      	adds	r3, #208	@ 0xd0
 800a2d8:	429c      	cmp	r4, r3
 800a2da:	d105      	bne.n	800a2e8 <std+0x54>
 800a2dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e4:	f000 b9e6 	b.w	800a6b4 <__retarget_lock_init_recursive>
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	bf00      	nop
 800a2ec:	0800a459 	.word	0x0800a459
 800a2f0:	0800a47b 	.word	0x0800a47b
 800a2f4:	0800a4b3 	.word	0x0800a4b3
 800a2f8:	0800a4d7 	.word	0x0800a4d7
 800a2fc:	20006fa4 	.word	0x20006fa4

0800a300 <stdio_exit_handler>:
 800a300:	4a02      	ldr	r2, [pc, #8]	@ (800a30c <stdio_exit_handler+0xc>)
 800a302:	4903      	ldr	r1, [pc, #12]	@ (800a310 <stdio_exit_handler+0x10>)
 800a304:	4803      	ldr	r0, [pc, #12]	@ (800a314 <stdio_exit_handler+0x14>)
 800a306:	f000 b869 	b.w	800a3dc <_fwalk_sglue>
 800a30a:	bf00      	nop
 800a30c:	20000020 	.word	0x20000020
 800a310:	0800ca8d 	.word	0x0800ca8d
 800a314:	2000019c 	.word	0x2000019c

0800a318 <cleanup_stdio>:
 800a318:	6841      	ldr	r1, [r0, #4]
 800a31a:	4b0c      	ldr	r3, [pc, #48]	@ (800a34c <cleanup_stdio+0x34>)
 800a31c:	4299      	cmp	r1, r3
 800a31e:	b510      	push	{r4, lr}
 800a320:	4604      	mov	r4, r0
 800a322:	d001      	beq.n	800a328 <cleanup_stdio+0x10>
 800a324:	f002 fbb2 	bl	800ca8c <_fflush_r>
 800a328:	68a1      	ldr	r1, [r4, #8]
 800a32a:	4b09      	ldr	r3, [pc, #36]	@ (800a350 <cleanup_stdio+0x38>)
 800a32c:	4299      	cmp	r1, r3
 800a32e:	d002      	beq.n	800a336 <cleanup_stdio+0x1e>
 800a330:	4620      	mov	r0, r4
 800a332:	f002 fbab 	bl	800ca8c <_fflush_r>
 800a336:	68e1      	ldr	r1, [r4, #12]
 800a338:	4b06      	ldr	r3, [pc, #24]	@ (800a354 <cleanup_stdio+0x3c>)
 800a33a:	4299      	cmp	r1, r3
 800a33c:	d004      	beq.n	800a348 <cleanup_stdio+0x30>
 800a33e:	4620      	mov	r0, r4
 800a340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a344:	f002 bba2 	b.w	800ca8c <_fflush_r>
 800a348:	bd10      	pop	{r4, pc}
 800a34a:	bf00      	nop
 800a34c:	20006fa4 	.word	0x20006fa4
 800a350:	2000700c 	.word	0x2000700c
 800a354:	20007074 	.word	0x20007074

0800a358 <global_stdio_init.part.0>:
 800a358:	b510      	push	{r4, lr}
 800a35a:	4b0b      	ldr	r3, [pc, #44]	@ (800a388 <global_stdio_init.part.0+0x30>)
 800a35c:	4c0b      	ldr	r4, [pc, #44]	@ (800a38c <global_stdio_init.part.0+0x34>)
 800a35e:	4a0c      	ldr	r2, [pc, #48]	@ (800a390 <global_stdio_init.part.0+0x38>)
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	4620      	mov	r0, r4
 800a364:	2200      	movs	r2, #0
 800a366:	2104      	movs	r1, #4
 800a368:	f7ff ff94 	bl	800a294 <std>
 800a36c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a370:	2201      	movs	r2, #1
 800a372:	2109      	movs	r1, #9
 800a374:	f7ff ff8e 	bl	800a294 <std>
 800a378:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a37c:	2202      	movs	r2, #2
 800a37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a382:	2112      	movs	r1, #18
 800a384:	f7ff bf86 	b.w	800a294 <std>
 800a388:	200070dc 	.word	0x200070dc
 800a38c:	20006fa4 	.word	0x20006fa4
 800a390:	0800a301 	.word	0x0800a301

0800a394 <__sfp_lock_acquire>:
 800a394:	4801      	ldr	r0, [pc, #4]	@ (800a39c <__sfp_lock_acquire+0x8>)
 800a396:	f000 b98e 	b.w	800a6b6 <__retarget_lock_acquire_recursive>
 800a39a:	bf00      	nop
 800a39c:	200070e5 	.word	0x200070e5

0800a3a0 <__sfp_lock_release>:
 800a3a0:	4801      	ldr	r0, [pc, #4]	@ (800a3a8 <__sfp_lock_release+0x8>)
 800a3a2:	f000 b989 	b.w	800a6b8 <__retarget_lock_release_recursive>
 800a3a6:	bf00      	nop
 800a3a8:	200070e5 	.word	0x200070e5

0800a3ac <__sinit>:
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	f7ff fff0 	bl	800a394 <__sfp_lock_acquire>
 800a3b4:	6a23      	ldr	r3, [r4, #32]
 800a3b6:	b11b      	cbz	r3, 800a3c0 <__sinit+0x14>
 800a3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3bc:	f7ff bff0 	b.w	800a3a0 <__sfp_lock_release>
 800a3c0:	4b04      	ldr	r3, [pc, #16]	@ (800a3d4 <__sinit+0x28>)
 800a3c2:	6223      	str	r3, [r4, #32]
 800a3c4:	4b04      	ldr	r3, [pc, #16]	@ (800a3d8 <__sinit+0x2c>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1f5      	bne.n	800a3b8 <__sinit+0xc>
 800a3cc:	f7ff ffc4 	bl	800a358 <global_stdio_init.part.0>
 800a3d0:	e7f2      	b.n	800a3b8 <__sinit+0xc>
 800a3d2:	bf00      	nop
 800a3d4:	0800a319 	.word	0x0800a319
 800a3d8:	200070dc 	.word	0x200070dc

0800a3dc <_fwalk_sglue>:
 800a3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e0:	4607      	mov	r7, r0
 800a3e2:	4688      	mov	r8, r1
 800a3e4:	4614      	mov	r4, r2
 800a3e6:	2600      	movs	r6, #0
 800a3e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3ec:	f1b9 0901 	subs.w	r9, r9, #1
 800a3f0:	d505      	bpl.n	800a3fe <_fwalk_sglue+0x22>
 800a3f2:	6824      	ldr	r4, [r4, #0]
 800a3f4:	2c00      	cmp	r4, #0
 800a3f6:	d1f7      	bne.n	800a3e8 <_fwalk_sglue+0xc>
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3fe:	89ab      	ldrh	r3, [r5, #12]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d907      	bls.n	800a414 <_fwalk_sglue+0x38>
 800a404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a408:	3301      	adds	r3, #1
 800a40a:	d003      	beq.n	800a414 <_fwalk_sglue+0x38>
 800a40c:	4629      	mov	r1, r5
 800a40e:	4638      	mov	r0, r7
 800a410:	47c0      	blx	r8
 800a412:	4306      	orrs	r6, r0
 800a414:	3568      	adds	r5, #104	@ 0x68
 800a416:	e7e9      	b.n	800a3ec <_fwalk_sglue+0x10>

0800a418 <siprintf>:
 800a418:	b40e      	push	{r1, r2, r3}
 800a41a:	b500      	push	{lr}
 800a41c:	b09c      	sub	sp, #112	@ 0x70
 800a41e:	ab1d      	add	r3, sp, #116	@ 0x74
 800a420:	9002      	str	r0, [sp, #8]
 800a422:	9006      	str	r0, [sp, #24]
 800a424:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a428:	4809      	ldr	r0, [pc, #36]	@ (800a450 <siprintf+0x38>)
 800a42a:	9107      	str	r1, [sp, #28]
 800a42c:	9104      	str	r1, [sp, #16]
 800a42e:	4909      	ldr	r1, [pc, #36]	@ (800a454 <siprintf+0x3c>)
 800a430:	f853 2b04 	ldr.w	r2, [r3], #4
 800a434:	9105      	str	r1, [sp, #20]
 800a436:	6800      	ldr	r0, [r0, #0]
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	a902      	add	r1, sp, #8
 800a43c:	f002 f9a6 	bl	800c78c <_svfiprintf_r>
 800a440:	9b02      	ldr	r3, [sp, #8]
 800a442:	2200      	movs	r2, #0
 800a444:	701a      	strb	r2, [r3, #0]
 800a446:	b01c      	add	sp, #112	@ 0x70
 800a448:	f85d eb04 	ldr.w	lr, [sp], #4
 800a44c:	b003      	add	sp, #12
 800a44e:	4770      	bx	lr
 800a450:	20000198 	.word	0x20000198
 800a454:	ffff0208 	.word	0xffff0208

0800a458 <__sread>:
 800a458:	b510      	push	{r4, lr}
 800a45a:	460c      	mov	r4, r1
 800a45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a460:	f000 f8da 	bl	800a618 <_read_r>
 800a464:	2800      	cmp	r0, #0
 800a466:	bfab      	itete	ge
 800a468:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a46a:	89a3      	ldrhlt	r3, [r4, #12]
 800a46c:	181b      	addge	r3, r3, r0
 800a46e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a472:	bfac      	ite	ge
 800a474:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a476:	81a3      	strhlt	r3, [r4, #12]
 800a478:	bd10      	pop	{r4, pc}

0800a47a <__swrite>:
 800a47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a47e:	461f      	mov	r7, r3
 800a480:	898b      	ldrh	r3, [r1, #12]
 800a482:	05db      	lsls	r3, r3, #23
 800a484:	4605      	mov	r5, r0
 800a486:	460c      	mov	r4, r1
 800a488:	4616      	mov	r6, r2
 800a48a:	d505      	bpl.n	800a498 <__swrite+0x1e>
 800a48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a490:	2302      	movs	r3, #2
 800a492:	2200      	movs	r2, #0
 800a494:	f000 f8ae 	bl	800a5f4 <_lseek_r>
 800a498:	89a3      	ldrh	r3, [r4, #12]
 800a49a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a49e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4a2:	81a3      	strh	r3, [r4, #12]
 800a4a4:	4632      	mov	r2, r6
 800a4a6:	463b      	mov	r3, r7
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ae:	f000 b8c5 	b.w	800a63c <_write_r>

0800a4b2 <__sseek>:
 800a4b2:	b510      	push	{r4, lr}
 800a4b4:	460c      	mov	r4, r1
 800a4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ba:	f000 f89b 	bl	800a5f4 <_lseek_r>
 800a4be:	1c43      	adds	r3, r0, #1
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	bf15      	itete	ne
 800a4c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a4c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a4ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a4ce:	81a3      	strheq	r3, [r4, #12]
 800a4d0:	bf18      	it	ne
 800a4d2:	81a3      	strhne	r3, [r4, #12]
 800a4d4:	bd10      	pop	{r4, pc}

0800a4d6 <__sclose>:
 800a4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4da:	f000 b87b 	b.w	800a5d4 <_close_r>

0800a4de <memset>:
 800a4de:	4402      	add	r2, r0
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d100      	bne.n	800a4e8 <memset+0xa>
 800a4e6:	4770      	bx	lr
 800a4e8:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ec:	e7f9      	b.n	800a4e2 <memset+0x4>

0800a4ee <strncmp>:
 800a4ee:	b510      	push	{r4, lr}
 800a4f0:	b16a      	cbz	r2, 800a50e <strncmp+0x20>
 800a4f2:	3901      	subs	r1, #1
 800a4f4:	1884      	adds	r4, r0, r2
 800a4f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d103      	bne.n	800a50a <strncmp+0x1c>
 800a502:	42a0      	cmp	r0, r4
 800a504:	d001      	beq.n	800a50a <strncmp+0x1c>
 800a506:	2a00      	cmp	r2, #0
 800a508:	d1f5      	bne.n	800a4f6 <strncmp+0x8>
 800a50a:	1ad0      	subs	r0, r2, r3
 800a50c:	bd10      	pop	{r4, pc}
 800a50e:	4610      	mov	r0, r2
 800a510:	e7fc      	b.n	800a50c <strncmp+0x1e>
	...

0800a514 <strtok>:
 800a514:	4b16      	ldr	r3, [pc, #88]	@ (800a570 <strtok+0x5c>)
 800a516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a51a:	681f      	ldr	r7, [r3, #0]
 800a51c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a51e:	4605      	mov	r5, r0
 800a520:	460e      	mov	r6, r1
 800a522:	b9ec      	cbnz	r4, 800a560 <strtok+0x4c>
 800a524:	2050      	movs	r0, #80	@ 0x50
 800a526:	f001 fad3 	bl	800bad0 <malloc>
 800a52a:	4602      	mov	r2, r0
 800a52c:	6478      	str	r0, [r7, #68]	@ 0x44
 800a52e:	b920      	cbnz	r0, 800a53a <strtok+0x26>
 800a530:	4b10      	ldr	r3, [pc, #64]	@ (800a574 <strtok+0x60>)
 800a532:	4811      	ldr	r0, [pc, #68]	@ (800a578 <strtok+0x64>)
 800a534:	215b      	movs	r1, #91	@ 0x5b
 800a536:	f000 f8dd 	bl	800a6f4 <__assert_func>
 800a53a:	e9c0 4400 	strd	r4, r4, [r0]
 800a53e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a542:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a546:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a54a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a54e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a552:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a556:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a55a:	6184      	str	r4, [r0, #24]
 800a55c:	7704      	strb	r4, [r0, #28]
 800a55e:	6244      	str	r4, [r0, #36]	@ 0x24
 800a560:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a562:	4631      	mov	r1, r6
 800a564:	4628      	mov	r0, r5
 800a566:	2301      	movs	r3, #1
 800a568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a56c:	f000 b806 	b.w	800a57c <__strtok_r>
 800a570:	20000198 	.word	0x20000198
 800a574:	0800d6c1 	.word	0x0800d6c1
 800a578:	0800d6d8 	.word	0x0800d6d8

0800a57c <__strtok_r>:
 800a57c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a57e:	4604      	mov	r4, r0
 800a580:	b908      	cbnz	r0, 800a586 <__strtok_r+0xa>
 800a582:	6814      	ldr	r4, [r2, #0]
 800a584:	b144      	cbz	r4, 800a598 <__strtok_r+0x1c>
 800a586:	4620      	mov	r0, r4
 800a588:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a58c:	460f      	mov	r7, r1
 800a58e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a592:	b91e      	cbnz	r6, 800a59c <__strtok_r+0x20>
 800a594:	b965      	cbnz	r5, 800a5b0 <__strtok_r+0x34>
 800a596:	6015      	str	r5, [r2, #0]
 800a598:	2000      	movs	r0, #0
 800a59a:	e005      	b.n	800a5a8 <__strtok_r+0x2c>
 800a59c:	42b5      	cmp	r5, r6
 800a59e:	d1f6      	bne.n	800a58e <__strtok_r+0x12>
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1f0      	bne.n	800a586 <__strtok_r+0xa>
 800a5a4:	6014      	str	r4, [r2, #0]
 800a5a6:	7003      	strb	r3, [r0, #0]
 800a5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5aa:	461c      	mov	r4, r3
 800a5ac:	e00c      	b.n	800a5c8 <__strtok_r+0x4c>
 800a5ae:	b915      	cbnz	r5, 800a5b6 <__strtok_r+0x3a>
 800a5b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5b4:	460e      	mov	r6, r1
 800a5b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a5ba:	42ab      	cmp	r3, r5
 800a5bc:	d1f7      	bne.n	800a5ae <__strtok_r+0x32>
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0f3      	beq.n	800a5aa <__strtok_r+0x2e>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a5c8:	6014      	str	r4, [r2, #0]
 800a5ca:	e7ed      	b.n	800a5a8 <__strtok_r+0x2c>

0800a5cc <_localeconv_r>:
 800a5cc:	4800      	ldr	r0, [pc, #0]	@ (800a5d0 <_localeconv_r+0x4>)
 800a5ce:	4770      	bx	lr
 800a5d0:	2000011c 	.word	0x2000011c

0800a5d4 <_close_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4d06      	ldr	r5, [pc, #24]	@ (800a5f0 <_close_r+0x1c>)
 800a5d8:	2300      	movs	r3, #0
 800a5da:	4604      	mov	r4, r0
 800a5dc:	4608      	mov	r0, r1
 800a5de:	602b      	str	r3, [r5, #0]
 800a5e0:	f7f7 fdad 	bl	800213e <_close>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_close_r+0x1a>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_close_r+0x1a>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	200070e0 	.word	0x200070e0

0800a5f4 <_lseek_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4d07      	ldr	r5, [pc, #28]	@ (800a614 <_lseek_r+0x20>)
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	4608      	mov	r0, r1
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	2200      	movs	r2, #0
 800a600:	602a      	str	r2, [r5, #0]
 800a602:	461a      	mov	r2, r3
 800a604:	f7f7 fdc2 	bl	800218c <_lseek>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_lseek_r+0x1e>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_lseek_r+0x1e>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	200070e0 	.word	0x200070e0

0800a618 <_read_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d07      	ldr	r5, [pc, #28]	@ (800a638 <_read_r+0x20>)
 800a61c:	4604      	mov	r4, r0
 800a61e:	4608      	mov	r0, r1
 800a620:	4611      	mov	r1, r2
 800a622:	2200      	movs	r2, #0
 800a624:	602a      	str	r2, [r5, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	f7f7 fd50 	bl	80020cc <_read>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_read_r+0x1e>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	b103      	cbz	r3, 800a636 <_read_r+0x1e>
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	200070e0 	.word	0x200070e0

0800a63c <_write_r>:
 800a63c:	b538      	push	{r3, r4, r5, lr}
 800a63e:	4d07      	ldr	r5, [pc, #28]	@ (800a65c <_write_r+0x20>)
 800a640:	4604      	mov	r4, r0
 800a642:	4608      	mov	r0, r1
 800a644:	4611      	mov	r1, r2
 800a646:	2200      	movs	r2, #0
 800a648:	602a      	str	r2, [r5, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	f7f7 fd5b 	bl	8002106 <_write>
 800a650:	1c43      	adds	r3, r0, #1
 800a652:	d102      	bne.n	800a65a <_write_r+0x1e>
 800a654:	682b      	ldr	r3, [r5, #0]
 800a656:	b103      	cbz	r3, 800a65a <_write_r+0x1e>
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	bd38      	pop	{r3, r4, r5, pc}
 800a65c:	200070e0 	.word	0x200070e0

0800a660 <__errno>:
 800a660:	4b01      	ldr	r3, [pc, #4]	@ (800a668 <__errno+0x8>)
 800a662:	6818      	ldr	r0, [r3, #0]
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	20000198 	.word	0x20000198

0800a66c <__libc_init_array>:
 800a66c:	b570      	push	{r4, r5, r6, lr}
 800a66e:	4d0d      	ldr	r5, [pc, #52]	@ (800a6a4 <__libc_init_array+0x38>)
 800a670:	4c0d      	ldr	r4, [pc, #52]	@ (800a6a8 <__libc_init_array+0x3c>)
 800a672:	1b64      	subs	r4, r4, r5
 800a674:	10a4      	asrs	r4, r4, #2
 800a676:	2600      	movs	r6, #0
 800a678:	42a6      	cmp	r6, r4
 800a67a:	d109      	bne.n	800a690 <__libc_init_array+0x24>
 800a67c:	4d0b      	ldr	r5, [pc, #44]	@ (800a6ac <__libc_init_array+0x40>)
 800a67e:	4c0c      	ldr	r4, [pc, #48]	@ (800a6b0 <__libc_init_array+0x44>)
 800a680:	f002 fd56 	bl	800d130 <_init>
 800a684:	1b64      	subs	r4, r4, r5
 800a686:	10a4      	asrs	r4, r4, #2
 800a688:	2600      	movs	r6, #0
 800a68a:	42a6      	cmp	r6, r4
 800a68c:	d105      	bne.n	800a69a <__libc_init_array+0x2e>
 800a68e:	bd70      	pop	{r4, r5, r6, pc}
 800a690:	f855 3b04 	ldr.w	r3, [r5], #4
 800a694:	4798      	blx	r3
 800a696:	3601      	adds	r6, #1
 800a698:	e7ee      	b.n	800a678 <__libc_init_array+0xc>
 800a69a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a69e:	4798      	blx	r3
 800a6a0:	3601      	adds	r6, #1
 800a6a2:	e7f2      	b.n	800a68a <__libc_init_array+0x1e>
 800a6a4:	0800dac4 	.word	0x0800dac4
 800a6a8:	0800dac4 	.word	0x0800dac4
 800a6ac:	0800dac4 	.word	0x0800dac4
 800a6b0:	0800dac8 	.word	0x0800dac8

0800a6b4 <__retarget_lock_init_recursive>:
 800a6b4:	4770      	bx	lr

0800a6b6 <__retarget_lock_acquire_recursive>:
 800a6b6:	4770      	bx	lr

0800a6b8 <__retarget_lock_release_recursive>:
 800a6b8:	4770      	bx	lr

0800a6ba <memcpy>:
 800a6ba:	440a      	add	r2, r1
 800a6bc:	4291      	cmp	r1, r2
 800a6be:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6c2:	d100      	bne.n	800a6c6 <memcpy+0xc>
 800a6c4:	4770      	bx	lr
 800a6c6:	b510      	push	{r4, lr}
 800a6c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6d0:	4291      	cmp	r1, r2
 800a6d2:	d1f9      	bne.n	800a6c8 <memcpy+0xe>
 800a6d4:	bd10      	pop	{r4, pc}
	...

0800a6d8 <nan>:
 800a6d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a6e0 <nan+0x8>
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	00000000 	.word	0x00000000
 800a6e4:	7ff80000 	.word	0x7ff80000

0800a6e8 <nanf>:
 800a6e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a6f0 <nanf+0x8>
 800a6ec:	4770      	bx	lr
 800a6ee:	bf00      	nop
 800a6f0:	7fc00000 	.word	0x7fc00000

0800a6f4 <__assert_func>:
 800a6f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6f6:	4614      	mov	r4, r2
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	4b09      	ldr	r3, [pc, #36]	@ (800a720 <__assert_func+0x2c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4605      	mov	r5, r0
 800a700:	68d8      	ldr	r0, [r3, #12]
 800a702:	b954      	cbnz	r4, 800a71a <__assert_func+0x26>
 800a704:	4b07      	ldr	r3, [pc, #28]	@ (800a724 <__assert_func+0x30>)
 800a706:	461c      	mov	r4, r3
 800a708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a70c:	9100      	str	r1, [sp, #0]
 800a70e:	462b      	mov	r3, r5
 800a710:	4905      	ldr	r1, [pc, #20]	@ (800a728 <__assert_func+0x34>)
 800a712:	f002 f9e3 	bl	800cadc <fiprintf>
 800a716:	f002 fa1d 	bl	800cb54 <abort>
 800a71a:	4b04      	ldr	r3, [pc, #16]	@ (800a72c <__assert_func+0x38>)
 800a71c:	e7f4      	b.n	800a708 <__assert_func+0x14>
 800a71e:	bf00      	nop
 800a720:	20000198 	.word	0x20000198
 800a724:	0800d775 	.word	0x0800d775
 800a728:	0800d747 	.word	0x0800d747
 800a72c:	0800d73a 	.word	0x0800d73a

0800a730 <quorem>:
 800a730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	6903      	ldr	r3, [r0, #16]
 800a736:	690c      	ldr	r4, [r1, #16]
 800a738:	42a3      	cmp	r3, r4
 800a73a:	4607      	mov	r7, r0
 800a73c:	db7e      	blt.n	800a83c <quorem+0x10c>
 800a73e:	3c01      	subs	r4, #1
 800a740:	f101 0814 	add.w	r8, r1, #20
 800a744:	00a3      	lsls	r3, r4, #2
 800a746:	f100 0514 	add.w	r5, r0, #20
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a750:	9301      	str	r3, [sp, #4]
 800a752:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a756:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a75a:	3301      	adds	r3, #1
 800a75c:	429a      	cmp	r2, r3
 800a75e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a762:	fbb2 f6f3 	udiv	r6, r2, r3
 800a766:	d32e      	bcc.n	800a7c6 <quorem+0x96>
 800a768:	f04f 0a00 	mov.w	sl, #0
 800a76c:	46c4      	mov	ip, r8
 800a76e:	46ae      	mov	lr, r5
 800a770:	46d3      	mov	fp, sl
 800a772:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a776:	b298      	uxth	r0, r3
 800a778:	fb06 a000 	mla	r0, r6, r0, sl
 800a77c:	0c02      	lsrs	r2, r0, #16
 800a77e:	0c1b      	lsrs	r3, r3, #16
 800a780:	fb06 2303 	mla	r3, r6, r3, r2
 800a784:	f8de 2000 	ldr.w	r2, [lr]
 800a788:	b280      	uxth	r0, r0
 800a78a:	b292      	uxth	r2, r2
 800a78c:	1a12      	subs	r2, r2, r0
 800a78e:	445a      	add	r2, fp
 800a790:	f8de 0000 	ldr.w	r0, [lr]
 800a794:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a798:	b29b      	uxth	r3, r3
 800a79a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a79e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a7a2:	b292      	uxth	r2, r2
 800a7a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a7a8:	45e1      	cmp	r9, ip
 800a7aa:	f84e 2b04 	str.w	r2, [lr], #4
 800a7ae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a7b2:	d2de      	bcs.n	800a772 <quorem+0x42>
 800a7b4:	9b00      	ldr	r3, [sp, #0]
 800a7b6:	58eb      	ldr	r3, [r5, r3]
 800a7b8:	b92b      	cbnz	r3, 800a7c6 <quorem+0x96>
 800a7ba:	9b01      	ldr	r3, [sp, #4]
 800a7bc:	3b04      	subs	r3, #4
 800a7be:	429d      	cmp	r5, r3
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	d32f      	bcc.n	800a824 <quorem+0xf4>
 800a7c4:	613c      	str	r4, [r7, #16]
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	f001 fd0e 	bl	800c1e8 <__mcmp>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	db25      	blt.n	800a81c <quorem+0xec>
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7d8:	f8d1 c000 	ldr.w	ip, [r1]
 800a7dc:	fa1f fe82 	uxth.w	lr, r2
 800a7e0:	fa1f f38c 	uxth.w	r3, ip
 800a7e4:	eba3 030e 	sub.w	r3, r3, lr
 800a7e8:	4403      	add	r3, r0
 800a7ea:	0c12      	lsrs	r2, r2, #16
 800a7ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a7f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7fa:	45c1      	cmp	r9, r8
 800a7fc:	f841 3b04 	str.w	r3, [r1], #4
 800a800:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a804:	d2e6      	bcs.n	800a7d4 <quorem+0xa4>
 800a806:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a80a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a80e:	b922      	cbnz	r2, 800a81a <quorem+0xea>
 800a810:	3b04      	subs	r3, #4
 800a812:	429d      	cmp	r5, r3
 800a814:	461a      	mov	r2, r3
 800a816:	d30b      	bcc.n	800a830 <quorem+0x100>
 800a818:	613c      	str	r4, [r7, #16]
 800a81a:	3601      	adds	r6, #1
 800a81c:	4630      	mov	r0, r6
 800a81e:	b003      	add	sp, #12
 800a820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a824:	6812      	ldr	r2, [r2, #0]
 800a826:	3b04      	subs	r3, #4
 800a828:	2a00      	cmp	r2, #0
 800a82a:	d1cb      	bne.n	800a7c4 <quorem+0x94>
 800a82c:	3c01      	subs	r4, #1
 800a82e:	e7c6      	b.n	800a7be <quorem+0x8e>
 800a830:	6812      	ldr	r2, [r2, #0]
 800a832:	3b04      	subs	r3, #4
 800a834:	2a00      	cmp	r2, #0
 800a836:	d1ef      	bne.n	800a818 <quorem+0xe8>
 800a838:	3c01      	subs	r4, #1
 800a83a:	e7ea      	b.n	800a812 <quorem+0xe2>
 800a83c:	2000      	movs	r0, #0
 800a83e:	e7ee      	b.n	800a81e <quorem+0xee>

0800a840 <_dtoa_r>:
 800a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	69c7      	ldr	r7, [r0, #28]
 800a846:	b099      	sub	sp, #100	@ 0x64
 800a848:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a84c:	ec55 4b10 	vmov	r4, r5, d0
 800a850:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a852:	9109      	str	r1, [sp, #36]	@ 0x24
 800a854:	4683      	mov	fp, r0
 800a856:	920e      	str	r2, [sp, #56]	@ 0x38
 800a858:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a85a:	b97f      	cbnz	r7, 800a87c <_dtoa_r+0x3c>
 800a85c:	2010      	movs	r0, #16
 800a85e:	f001 f937 	bl	800bad0 <malloc>
 800a862:	4602      	mov	r2, r0
 800a864:	f8cb 001c 	str.w	r0, [fp, #28]
 800a868:	b920      	cbnz	r0, 800a874 <_dtoa_r+0x34>
 800a86a:	4ba7      	ldr	r3, [pc, #668]	@ (800ab08 <_dtoa_r+0x2c8>)
 800a86c:	21ef      	movs	r1, #239	@ 0xef
 800a86e:	48a7      	ldr	r0, [pc, #668]	@ (800ab0c <_dtoa_r+0x2cc>)
 800a870:	f7ff ff40 	bl	800a6f4 <__assert_func>
 800a874:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a878:	6007      	str	r7, [r0, #0]
 800a87a:	60c7      	str	r7, [r0, #12]
 800a87c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a880:	6819      	ldr	r1, [r3, #0]
 800a882:	b159      	cbz	r1, 800a89c <_dtoa_r+0x5c>
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	604a      	str	r2, [r1, #4]
 800a888:	2301      	movs	r3, #1
 800a88a:	4093      	lsls	r3, r2
 800a88c:	608b      	str	r3, [r1, #8]
 800a88e:	4658      	mov	r0, fp
 800a890:	f001 fa26 	bl	800bce0 <_Bfree>
 800a894:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a898:	2200      	movs	r2, #0
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	1e2b      	subs	r3, r5, #0
 800a89e:	bfb9      	ittee	lt
 800a8a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a8a4:	9303      	strlt	r3, [sp, #12]
 800a8a6:	2300      	movge	r3, #0
 800a8a8:	6033      	strge	r3, [r6, #0]
 800a8aa:	9f03      	ldr	r7, [sp, #12]
 800a8ac:	4b98      	ldr	r3, [pc, #608]	@ (800ab10 <_dtoa_r+0x2d0>)
 800a8ae:	bfbc      	itt	lt
 800a8b0:	2201      	movlt	r2, #1
 800a8b2:	6032      	strlt	r2, [r6, #0]
 800a8b4:	43bb      	bics	r3, r7
 800a8b6:	d112      	bne.n	800a8de <_dtoa_r+0x9e>
 800a8b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a8ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8c4:	4323      	orrs	r3, r4
 800a8c6:	f000 854d 	beq.w	800b364 <_dtoa_r+0xb24>
 800a8ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a8cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ab24 <_dtoa_r+0x2e4>
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 854f 	beq.w	800b374 <_dtoa_r+0xb34>
 800a8d6:	f10a 0303 	add.w	r3, sl, #3
 800a8da:	f000 bd49 	b.w	800b370 <_dtoa_r+0xb30>
 800a8de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	ec51 0b17 	vmov	r0, r1, d7
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a8ee:	f7f6 f90b 	bl	8000b08 <__aeabi_dcmpeq>
 800a8f2:	4680      	mov	r8, r0
 800a8f4:	b158      	cbz	r0, 800a90e <_dtoa_r+0xce>
 800a8f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a8fe:	b113      	cbz	r3, 800a906 <_dtoa_r+0xc6>
 800a900:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a902:	4b84      	ldr	r3, [pc, #528]	@ (800ab14 <_dtoa_r+0x2d4>)
 800a904:	6013      	str	r3, [r2, #0]
 800a906:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ab28 <_dtoa_r+0x2e8>
 800a90a:	f000 bd33 	b.w	800b374 <_dtoa_r+0xb34>
 800a90e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a912:	aa16      	add	r2, sp, #88	@ 0x58
 800a914:	a917      	add	r1, sp, #92	@ 0x5c
 800a916:	4658      	mov	r0, fp
 800a918:	f001 fd86 	bl	800c428 <__d2b>
 800a91c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a920:	4681      	mov	r9, r0
 800a922:	2e00      	cmp	r6, #0
 800a924:	d077      	beq.n	800aa16 <_dtoa_r+0x1d6>
 800a926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a928:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a92c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a934:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a938:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a93c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a940:	4619      	mov	r1, r3
 800a942:	2200      	movs	r2, #0
 800a944:	4b74      	ldr	r3, [pc, #464]	@ (800ab18 <_dtoa_r+0x2d8>)
 800a946:	f7f5 fcbf 	bl	80002c8 <__aeabi_dsub>
 800a94a:	a369      	add	r3, pc, #420	@ (adr r3, 800aaf0 <_dtoa_r+0x2b0>)
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	f7f5 fe72 	bl	8000638 <__aeabi_dmul>
 800a954:	a368      	add	r3, pc, #416	@ (adr r3, 800aaf8 <_dtoa_r+0x2b8>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7f5 fcb7 	bl	80002cc <__adddf3>
 800a95e:	4604      	mov	r4, r0
 800a960:	4630      	mov	r0, r6
 800a962:	460d      	mov	r5, r1
 800a964:	f7f5 fdfe 	bl	8000564 <__aeabi_i2d>
 800a968:	a365      	add	r3, pc, #404	@ (adr r3, 800ab00 <_dtoa_r+0x2c0>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	f7f5 fe63 	bl	8000638 <__aeabi_dmul>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4620      	mov	r0, r4
 800a978:	4629      	mov	r1, r5
 800a97a:	f7f5 fca7 	bl	80002cc <__adddf3>
 800a97e:	4604      	mov	r4, r0
 800a980:	460d      	mov	r5, r1
 800a982:	f7f6 f909 	bl	8000b98 <__aeabi_d2iz>
 800a986:	2200      	movs	r2, #0
 800a988:	4607      	mov	r7, r0
 800a98a:	2300      	movs	r3, #0
 800a98c:	4620      	mov	r0, r4
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f6 f8c4 	bl	8000b1c <__aeabi_dcmplt>
 800a994:	b140      	cbz	r0, 800a9a8 <_dtoa_r+0x168>
 800a996:	4638      	mov	r0, r7
 800a998:	f7f5 fde4 	bl	8000564 <__aeabi_i2d>
 800a99c:	4622      	mov	r2, r4
 800a99e:	462b      	mov	r3, r5
 800a9a0:	f7f6 f8b2 	bl	8000b08 <__aeabi_dcmpeq>
 800a9a4:	b900      	cbnz	r0, 800a9a8 <_dtoa_r+0x168>
 800a9a6:	3f01      	subs	r7, #1
 800a9a8:	2f16      	cmp	r7, #22
 800a9aa:	d851      	bhi.n	800aa50 <_dtoa_r+0x210>
 800a9ac:	4b5b      	ldr	r3, [pc, #364]	@ (800ab1c <_dtoa_r+0x2dc>)
 800a9ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9ba:	f7f6 f8af 	bl	8000b1c <__aeabi_dcmplt>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d048      	beq.n	800aa54 <_dtoa_r+0x214>
 800a9c2:	3f01      	subs	r7, #1
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	9312      	str	r3, [sp, #72]	@ 0x48
 800a9c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a9ca:	1b9b      	subs	r3, r3, r6
 800a9cc:	1e5a      	subs	r2, r3, #1
 800a9ce:	bf44      	itt	mi
 800a9d0:	f1c3 0801 	rsbmi	r8, r3, #1
 800a9d4:	2300      	movmi	r3, #0
 800a9d6:	9208      	str	r2, [sp, #32]
 800a9d8:	bf54      	ite	pl
 800a9da:	f04f 0800 	movpl.w	r8, #0
 800a9de:	9308      	strmi	r3, [sp, #32]
 800a9e0:	2f00      	cmp	r7, #0
 800a9e2:	db39      	blt.n	800aa58 <_dtoa_r+0x218>
 800a9e4:	9b08      	ldr	r3, [sp, #32]
 800a9e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a9e8:	443b      	add	r3, r7
 800a9ea:	9308      	str	r3, [sp, #32]
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f2:	2b09      	cmp	r3, #9
 800a9f4:	d864      	bhi.n	800aac0 <_dtoa_r+0x280>
 800a9f6:	2b05      	cmp	r3, #5
 800a9f8:	bfc4      	itt	gt
 800a9fa:	3b04      	subgt	r3, #4
 800a9fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa00:	f1a3 0302 	sub.w	r3, r3, #2
 800aa04:	bfcc      	ite	gt
 800aa06:	2400      	movgt	r4, #0
 800aa08:	2401      	movle	r4, #1
 800aa0a:	2b03      	cmp	r3, #3
 800aa0c:	d863      	bhi.n	800aad6 <_dtoa_r+0x296>
 800aa0e:	e8df f003 	tbb	[pc, r3]
 800aa12:	372a      	.short	0x372a
 800aa14:	5535      	.short	0x5535
 800aa16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800aa1a:	441e      	add	r6, r3
 800aa1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aa20:	2b20      	cmp	r3, #32
 800aa22:	bfc1      	itttt	gt
 800aa24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aa28:	409f      	lslgt	r7, r3
 800aa2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aa2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aa32:	bfd6      	itet	le
 800aa34:	f1c3 0320 	rsble	r3, r3, #32
 800aa38:	ea47 0003 	orrgt.w	r0, r7, r3
 800aa3c:	fa04 f003 	lslle.w	r0, r4, r3
 800aa40:	f7f5 fd80 	bl	8000544 <__aeabi_ui2d>
 800aa44:	2201      	movs	r2, #1
 800aa46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa4a:	3e01      	subs	r6, #1
 800aa4c:	9214      	str	r2, [sp, #80]	@ 0x50
 800aa4e:	e777      	b.n	800a940 <_dtoa_r+0x100>
 800aa50:	2301      	movs	r3, #1
 800aa52:	e7b8      	b.n	800a9c6 <_dtoa_r+0x186>
 800aa54:	9012      	str	r0, [sp, #72]	@ 0x48
 800aa56:	e7b7      	b.n	800a9c8 <_dtoa_r+0x188>
 800aa58:	427b      	negs	r3, r7
 800aa5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	eba8 0807 	sub.w	r8, r8, r7
 800aa62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa64:	e7c4      	b.n	800a9f0 <_dtoa_r+0x1b0>
 800aa66:	2300      	movs	r3, #0
 800aa68:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	dc35      	bgt.n	800aadc <_dtoa_r+0x29c>
 800aa70:	2301      	movs	r3, #1
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	9307      	str	r3, [sp, #28]
 800aa76:	461a      	mov	r2, r3
 800aa78:	920e      	str	r2, [sp, #56]	@ 0x38
 800aa7a:	e00b      	b.n	800aa94 <_dtoa_r+0x254>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e7f3      	b.n	800aa68 <_dtoa_r+0x228>
 800aa80:	2300      	movs	r3, #0
 800aa82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa86:	18fb      	adds	r3, r7, r3
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	9307      	str	r3, [sp, #28]
 800aa90:	bfb8      	it	lt
 800aa92:	2301      	movlt	r3, #1
 800aa94:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aa98:	2100      	movs	r1, #0
 800aa9a:	2204      	movs	r2, #4
 800aa9c:	f102 0514 	add.w	r5, r2, #20
 800aaa0:	429d      	cmp	r5, r3
 800aaa2:	d91f      	bls.n	800aae4 <_dtoa_r+0x2a4>
 800aaa4:	6041      	str	r1, [r0, #4]
 800aaa6:	4658      	mov	r0, fp
 800aaa8:	f001 f8da 	bl	800bc60 <_Balloc>
 800aaac:	4682      	mov	sl, r0
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d13c      	bne.n	800ab2c <_dtoa_r+0x2ec>
 800aab2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab20 <_dtoa_r+0x2e0>)
 800aab4:	4602      	mov	r2, r0
 800aab6:	f240 11af 	movw	r1, #431	@ 0x1af
 800aaba:	e6d8      	b.n	800a86e <_dtoa_r+0x2e>
 800aabc:	2301      	movs	r3, #1
 800aabe:	e7e0      	b.n	800aa82 <_dtoa_r+0x242>
 800aac0:	2401      	movs	r4, #1
 800aac2:	2300      	movs	r3, #0
 800aac4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aac6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aac8:	f04f 33ff 	mov.w	r3, #4294967295
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	9307      	str	r3, [sp, #28]
 800aad0:	2200      	movs	r2, #0
 800aad2:	2312      	movs	r3, #18
 800aad4:	e7d0      	b.n	800aa78 <_dtoa_r+0x238>
 800aad6:	2301      	movs	r3, #1
 800aad8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aada:	e7f5      	b.n	800aac8 <_dtoa_r+0x288>
 800aadc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	9307      	str	r3, [sp, #28]
 800aae2:	e7d7      	b.n	800aa94 <_dtoa_r+0x254>
 800aae4:	3101      	adds	r1, #1
 800aae6:	0052      	lsls	r2, r2, #1
 800aae8:	e7d8      	b.n	800aa9c <_dtoa_r+0x25c>
 800aaea:	bf00      	nop
 800aaec:	f3af 8000 	nop.w
 800aaf0:	636f4361 	.word	0x636f4361
 800aaf4:	3fd287a7 	.word	0x3fd287a7
 800aaf8:	8b60c8b3 	.word	0x8b60c8b3
 800aafc:	3fc68a28 	.word	0x3fc68a28
 800ab00:	509f79fb 	.word	0x509f79fb
 800ab04:	3fd34413 	.word	0x3fd34413
 800ab08:	0800d6c1 	.word	0x0800d6c1
 800ab0c:	0800d783 	.word	0x0800d783
 800ab10:	7ff00000 	.word	0x7ff00000
 800ab14:	0800d699 	.word	0x0800d699
 800ab18:	3ff80000 	.word	0x3ff80000
 800ab1c:	0800d8e0 	.word	0x0800d8e0
 800ab20:	0800d7db 	.word	0x0800d7db
 800ab24:	0800d77f 	.word	0x0800d77f
 800ab28:	0800d698 	.word	0x0800d698
 800ab2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ab30:	6018      	str	r0, [r3, #0]
 800ab32:	9b07      	ldr	r3, [sp, #28]
 800ab34:	2b0e      	cmp	r3, #14
 800ab36:	f200 80a4 	bhi.w	800ac82 <_dtoa_r+0x442>
 800ab3a:	2c00      	cmp	r4, #0
 800ab3c:	f000 80a1 	beq.w	800ac82 <_dtoa_r+0x442>
 800ab40:	2f00      	cmp	r7, #0
 800ab42:	dd33      	ble.n	800abac <_dtoa_r+0x36c>
 800ab44:	4bad      	ldr	r3, [pc, #692]	@ (800adfc <_dtoa_r+0x5bc>)
 800ab46:	f007 020f 	and.w	r2, r7, #15
 800ab4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab4e:	ed93 7b00 	vldr	d7, [r3]
 800ab52:	05f8      	lsls	r0, r7, #23
 800ab54:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ab58:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab5c:	d516      	bpl.n	800ab8c <_dtoa_r+0x34c>
 800ab5e:	4ba8      	ldr	r3, [pc, #672]	@ (800ae00 <_dtoa_r+0x5c0>)
 800ab60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab68:	f7f5 fe90 	bl	800088c <__aeabi_ddiv>
 800ab6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab70:	f004 040f 	and.w	r4, r4, #15
 800ab74:	2603      	movs	r6, #3
 800ab76:	4da2      	ldr	r5, [pc, #648]	@ (800ae00 <_dtoa_r+0x5c0>)
 800ab78:	b954      	cbnz	r4, 800ab90 <_dtoa_r+0x350>
 800ab7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab82:	f7f5 fe83 	bl	800088c <__aeabi_ddiv>
 800ab86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab8a:	e028      	b.n	800abde <_dtoa_r+0x39e>
 800ab8c:	2602      	movs	r6, #2
 800ab8e:	e7f2      	b.n	800ab76 <_dtoa_r+0x336>
 800ab90:	07e1      	lsls	r1, r4, #31
 800ab92:	d508      	bpl.n	800aba6 <_dtoa_r+0x366>
 800ab94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab98:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab9c:	f7f5 fd4c 	bl	8000638 <__aeabi_dmul>
 800aba0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aba4:	3601      	adds	r6, #1
 800aba6:	1064      	asrs	r4, r4, #1
 800aba8:	3508      	adds	r5, #8
 800abaa:	e7e5      	b.n	800ab78 <_dtoa_r+0x338>
 800abac:	f000 80d2 	beq.w	800ad54 <_dtoa_r+0x514>
 800abb0:	427c      	negs	r4, r7
 800abb2:	4b92      	ldr	r3, [pc, #584]	@ (800adfc <_dtoa_r+0x5bc>)
 800abb4:	4d92      	ldr	r5, [pc, #584]	@ (800ae00 <_dtoa_r+0x5c0>)
 800abb6:	f004 020f 	and.w	r2, r4, #15
 800abba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abc6:	f7f5 fd37 	bl	8000638 <__aeabi_dmul>
 800abca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abce:	1124      	asrs	r4, r4, #4
 800abd0:	2300      	movs	r3, #0
 800abd2:	2602      	movs	r6, #2
 800abd4:	2c00      	cmp	r4, #0
 800abd6:	f040 80b2 	bne.w	800ad3e <_dtoa_r+0x4fe>
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1d3      	bne.n	800ab86 <_dtoa_r+0x346>
 800abde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800abe0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 80b7 	beq.w	800ad58 <_dtoa_r+0x518>
 800abea:	4b86      	ldr	r3, [pc, #536]	@ (800ae04 <_dtoa_r+0x5c4>)
 800abec:	2200      	movs	r2, #0
 800abee:	4620      	mov	r0, r4
 800abf0:	4629      	mov	r1, r5
 800abf2:	f7f5 ff93 	bl	8000b1c <__aeabi_dcmplt>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	f000 80ae 	beq.w	800ad58 <_dtoa_r+0x518>
 800abfc:	9b07      	ldr	r3, [sp, #28]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f000 80aa 	beq.w	800ad58 <_dtoa_r+0x518>
 800ac04:	9b00      	ldr	r3, [sp, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	dd37      	ble.n	800ac7a <_dtoa_r+0x43a>
 800ac0a:	1e7b      	subs	r3, r7, #1
 800ac0c:	9304      	str	r3, [sp, #16]
 800ac0e:	4620      	mov	r0, r4
 800ac10:	4b7d      	ldr	r3, [pc, #500]	@ (800ae08 <_dtoa_r+0x5c8>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	4629      	mov	r1, r5
 800ac16:	f7f5 fd0f 	bl	8000638 <__aeabi_dmul>
 800ac1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac1e:	9c00      	ldr	r4, [sp, #0]
 800ac20:	3601      	adds	r6, #1
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7f5 fc9e 	bl	8000564 <__aeabi_i2d>
 800ac28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac2c:	f7f5 fd04 	bl	8000638 <__aeabi_dmul>
 800ac30:	4b76      	ldr	r3, [pc, #472]	@ (800ae0c <_dtoa_r+0x5cc>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	f7f5 fb4a 	bl	80002cc <__adddf3>
 800ac38:	4605      	mov	r5, r0
 800ac3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac3e:	2c00      	cmp	r4, #0
 800ac40:	f040 808d 	bne.w	800ad5e <_dtoa_r+0x51e>
 800ac44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac48:	4b71      	ldr	r3, [pc, #452]	@ (800ae10 <_dtoa_r+0x5d0>)
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f7f5 fb3c 	bl	80002c8 <__aeabi_dsub>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac58:	462a      	mov	r2, r5
 800ac5a:	4633      	mov	r3, r6
 800ac5c:	f7f5 ff7c 	bl	8000b58 <__aeabi_dcmpgt>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	f040 828b 	bne.w	800b17c <_dtoa_r+0x93c>
 800ac66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac6a:	462a      	mov	r2, r5
 800ac6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac70:	f7f5 ff54 	bl	8000b1c <__aeabi_dcmplt>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	f040 8128 	bne.w	800aeca <_dtoa_r+0x68a>
 800ac7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ac7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ac82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f2c0 815a 	blt.w	800af3e <_dtoa_r+0x6fe>
 800ac8a:	2f0e      	cmp	r7, #14
 800ac8c:	f300 8157 	bgt.w	800af3e <_dtoa_r+0x6fe>
 800ac90:	4b5a      	ldr	r3, [pc, #360]	@ (800adfc <_dtoa_r+0x5bc>)
 800ac92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac96:	ed93 7b00 	vldr	d7, [r3]
 800ac9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	ed8d 7b00 	vstr	d7, [sp]
 800aca2:	da03      	bge.n	800acac <_dtoa_r+0x46c>
 800aca4:	9b07      	ldr	r3, [sp, #28]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f340 8101 	ble.w	800aeae <_dtoa_r+0x66e>
 800acac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800acb0:	4656      	mov	r6, sl
 800acb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acb6:	4620      	mov	r0, r4
 800acb8:	4629      	mov	r1, r5
 800acba:	f7f5 fde7 	bl	800088c <__aeabi_ddiv>
 800acbe:	f7f5 ff6b 	bl	8000b98 <__aeabi_d2iz>
 800acc2:	4680      	mov	r8, r0
 800acc4:	f7f5 fc4e 	bl	8000564 <__aeabi_i2d>
 800acc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800accc:	f7f5 fcb4 	bl	8000638 <__aeabi_dmul>
 800acd0:	4602      	mov	r2, r0
 800acd2:	460b      	mov	r3, r1
 800acd4:	4620      	mov	r0, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800acdc:	f7f5 faf4 	bl	80002c8 <__aeabi_dsub>
 800ace0:	f806 4b01 	strb.w	r4, [r6], #1
 800ace4:	9d07      	ldr	r5, [sp, #28]
 800ace6:	eba6 040a 	sub.w	r4, r6, sl
 800acea:	42a5      	cmp	r5, r4
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	f040 8117 	bne.w	800af22 <_dtoa_r+0x6e2>
 800acf4:	f7f5 faea 	bl	80002cc <__adddf3>
 800acf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acfc:	4604      	mov	r4, r0
 800acfe:	460d      	mov	r5, r1
 800ad00:	f7f5 ff2a 	bl	8000b58 <__aeabi_dcmpgt>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	f040 80f9 	bne.w	800aefc <_dtoa_r+0x6bc>
 800ad0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad0e:	4620      	mov	r0, r4
 800ad10:	4629      	mov	r1, r5
 800ad12:	f7f5 fef9 	bl	8000b08 <__aeabi_dcmpeq>
 800ad16:	b118      	cbz	r0, 800ad20 <_dtoa_r+0x4e0>
 800ad18:	f018 0f01 	tst.w	r8, #1
 800ad1c:	f040 80ee 	bne.w	800aefc <_dtoa_r+0x6bc>
 800ad20:	4649      	mov	r1, r9
 800ad22:	4658      	mov	r0, fp
 800ad24:	f000 ffdc 	bl	800bce0 <_Bfree>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	7033      	strb	r3, [r6, #0]
 800ad2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad2e:	3701      	adds	r7, #1
 800ad30:	601f      	str	r7, [r3, #0]
 800ad32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 831d 	beq.w	800b374 <_dtoa_r+0xb34>
 800ad3a:	601e      	str	r6, [r3, #0]
 800ad3c:	e31a      	b.n	800b374 <_dtoa_r+0xb34>
 800ad3e:	07e2      	lsls	r2, r4, #31
 800ad40:	d505      	bpl.n	800ad4e <_dtoa_r+0x50e>
 800ad42:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad46:	f7f5 fc77 	bl	8000638 <__aeabi_dmul>
 800ad4a:	3601      	adds	r6, #1
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	1064      	asrs	r4, r4, #1
 800ad50:	3508      	adds	r5, #8
 800ad52:	e73f      	b.n	800abd4 <_dtoa_r+0x394>
 800ad54:	2602      	movs	r6, #2
 800ad56:	e742      	b.n	800abde <_dtoa_r+0x39e>
 800ad58:	9c07      	ldr	r4, [sp, #28]
 800ad5a:	9704      	str	r7, [sp, #16]
 800ad5c:	e761      	b.n	800ac22 <_dtoa_r+0x3e2>
 800ad5e:	4b27      	ldr	r3, [pc, #156]	@ (800adfc <_dtoa_r+0x5bc>)
 800ad60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad6a:	4454      	add	r4, sl
 800ad6c:	2900      	cmp	r1, #0
 800ad6e:	d053      	beq.n	800ae18 <_dtoa_r+0x5d8>
 800ad70:	4928      	ldr	r1, [pc, #160]	@ (800ae14 <_dtoa_r+0x5d4>)
 800ad72:	2000      	movs	r0, #0
 800ad74:	f7f5 fd8a 	bl	800088c <__aeabi_ddiv>
 800ad78:	4633      	mov	r3, r6
 800ad7a:	462a      	mov	r2, r5
 800ad7c:	f7f5 faa4 	bl	80002c8 <__aeabi_dsub>
 800ad80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad84:	4656      	mov	r6, sl
 800ad86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad8a:	f7f5 ff05 	bl	8000b98 <__aeabi_d2iz>
 800ad8e:	4605      	mov	r5, r0
 800ad90:	f7f5 fbe8 	bl	8000564 <__aeabi_i2d>
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad9c:	f7f5 fa94 	bl	80002c8 <__aeabi_dsub>
 800ada0:	3530      	adds	r5, #48	@ 0x30
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adaa:	f806 5b01 	strb.w	r5, [r6], #1
 800adae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800adb2:	f7f5 feb3 	bl	8000b1c <__aeabi_dcmplt>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d171      	bne.n	800ae9e <_dtoa_r+0x65e>
 800adba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adbe:	4911      	ldr	r1, [pc, #68]	@ (800ae04 <_dtoa_r+0x5c4>)
 800adc0:	2000      	movs	r0, #0
 800adc2:	f7f5 fa81 	bl	80002c8 <__aeabi_dsub>
 800adc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800adca:	f7f5 fea7 	bl	8000b1c <__aeabi_dcmplt>
 800adce:	2800      	cmp	r0, #0
 800add0:	f040 8095 	bne.w	800aefe <_dtoa_r+0x6be>
 800add4:	42a6      	cmp	r6, r4
 800add6:	f43f af50 	beq.w	800ac7a <_dtoa_r+0x43a>
 800adda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800adde:	4b0a      	ldr	r3, [pc, #40]	@ (800ae08 <_dtoa_r+0x5c8>)
 800ade0:	2200      	movs	r2, #0
 800ade2:	f7f5 fc29 	bl	8000638 <__aeabi_dmul>
 800ade6:	4b08      	ldr	r3, [pc, #32]	@ (800ae08 <_dtoa_r+0x5c8>)
 800ade8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800adec:	2200      	movs	r2, #0
 800adee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adf2:	f7f5 fc21 	bl	8000638 <__aeabi_dmul>
 800adf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adfa:	e7c4      	b.n	800ad86 <_dtoa_r+0x546>
 800adfc:	0800d8e0 	.word	0x0800d8e0
 800ae00:	0800d8b8 	.word	0x0800d8b8
 800ae04:	3ff00000 	.word	0x3ff00000
 800ae08:	40240000 	.word	0x40240000
 800ae0c:	401c0000 	.word	0x401c0000
 800ae10:	40140000 	.word	0x40140000
 800ae14:	3fe00000 	.word	0x3fe00000
 800ae18:	4631      	mov	r1, r6
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	f7f5 fc0c 	bl	8000638 <__aeabi_dmul>
 800ae20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ae24:	9415      	str	r4, [sp, #84]	@ 0x54
 800ae26:	4656      	mov	r6, sl
 800ae28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae2c:	f7f5 feb4 	bl	8000b98 <__aeabi_d2iz>
 800ae30:	4605      	mov	r5, r0
 800ae32:	f7f5 fb97 	bl	8000564 <__aeabi_i2d>
 800ae36:	4602      	mov	r2, r0
 800ae38:	460b      	mov	r3, r1
 800ae3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae3e:	f7f5 fa43 	bl	80002c8 <__aeabi_dsub>
 800ae42:	3530      	adds	r5, #48	@ 0x30
 800ae44:	f806 5b01 	strb.w	r5, [r6], #1
 800ae48:	4602      	mov	r2, r0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	42a6      	cmp	r6, r4
 800ae4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae52:	f04f 0200 	mov.w	r2, #0
 800ae56:	d124      	bne.n	800aea2 <_dtoa_r+0x662>
 800ae58:	4bac      	ldr	r3, [pc, #688]	@ (800b10c <_dtoa_r+0x8cc>)
 800ae5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ae5e:	f7f5 fa35 	bl	80002cc <__adddf3>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae6a:	f7f5 fe75 	bl	8000b58 <__aeabi_dcmpgt>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	d145      	bne.n	800aefe <_dtoa_r+0x6be>
 800ae72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ae76:	49a5      	ldr	r1, [pc, #660]	@ (800b10c <_dtoa_r+0x8cc>)
 800ae78:	2000      	movs	r0, #0
 800ae7a:	f7f5 fa25 	bl	80002c8 <__aeabi_dsub>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae86:	f7f5 fe49 	bl	8000b1c <__aeabi_dcmplt>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	f43f aef5 	beq.w	800ac7a <_dtoa_r+0x43a>
 800ae90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ae92:	1e73      	subs	r3, r6, #1
 800ae94:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae9a:	2b30      	cmp	r3, #48	@ 0x30
 800ae9c:	d0f8      	beq.n	800ae90 <_dtoa_r+0x650>
 800ae9e:	9f04      	ldr	r7, [sp, #16]
 800aea0:	e73e      	b.n	800ad20 <_dtoa_r+0x4e0>
 800aea2:	4b9b      	ldr	r3, [pc, #620]	@ (800b110 <_dtoa_r+0x8d0>)
 800aea4:	f7f5 fbc8 	bl	8000638 <__aeabi_dmul>
 800aea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aeac:	e7bc      	b.n	800ae28 <_dtoa_r+0x5e8>
 800aeae:	d10c      	bne.n	800aeca <_dtoa_r+0x68a>
 800aeb0:	4b98      	ldr	r3, [pc, #608]	@ (800b114 <_dtoa_r+0x8d4>)
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aeb8:	f7f5 fbbe 	bl	8000638 <__aeabi_dmul>
 800aebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aec0:	f7f5 fe40 	bl	8000b44 <__aeabi_dcmpge>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	f000 8157 	beq.w	800b178 <_dtoa_r+0x938>
 800aeca:	2400      	movs	r4, #0
 800aecc:	4625      	mov	r5, r4
 800aece:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aed0:	43db      	mvns	r3, r3
 800aed2:	9304      	str	r3, [sp, #16]
 800aed4:	4656      	mov	r6, sl
 800aed6:	2700      	movs	r7, #0
 800aed8:	4621      	mov	r1, r4
 800aeda:	4658      	mov	r0, fp
 800aedc:	f000 ff00 	bl	800bce0 <_Bfree>
 800aee0:	2d00      	cmp	r5, #0
 800aee2:	d0dc      	beq.n	800ae9e <_dtoa_r+0x65e>
 800aee4:	b12f      	cbz	r7, 800aef2 <_dtoa_r+0x6b2>
 800aee6:	42af      	cmp	r7, r5
 800aee8:	d003      	beq.n	800aef2 <_dtoa_r+0x6b2>
 800aeea:	4639      	mov	r1, r7
 800aeec:	4658      	mov	r0, fp
 800aeee:	f000 fef7 	bl	800bce0 <_Bfree>
 800aef2:	4629      	mov	r1, r5
 800aef4:	4658      	mov	r0, fp
 800aef6:	f000 fef3 	bl	800bce0 <_Bfree>
 800aefa:	e7d0      	b.n	800ae9e <_dtoa_r+0x65e>
 800aefc:	9704      	str	r7, [sp, #16]
 800aefe:	4633      	mov	r3, r6
 800af00:	461e      	mov	r6, r3
 800af02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af06:	2a39      	cmp	r2, #57	@ 0x39
 800af08:	d107      	bne.n	800af1a <_dtoa_r+0x6da>
 800af0a:	459a      	cmp	sl, r3
 800af0c:	d1f8      	bne.n	800af00 <_dtoa_r+0x6c0>
 800af0e:	9a04      	ldr	r2, [sp, #16]
 800af10:	3201      	adds	r2, #1
 800af12:	9204      	str	r2, [sp, #16]
 800af14:	2230      	movs	r2, #48	@ 0x30
 800af16:	f88a 2000 	strb.w	r2, [sl]
 800af1a:	781a      	ldrb	r2, [r3, #0]
 800af1c:	3201      	adds	r2, #1
 800af1e:	701a      	strb	r2, [r3, #0]
 800af20:	e7bd      	b.n	800ae9e <_dtoa_r+0x65e>
 800af22:	4b7b      	ldr	r3, [pc, #492]	@ (800b110 <_dtoa_r+0x8d0>)
 800af24:	2200      	movs	r2, #0
 800af26:	f7f5 fb87 	bl	8000638 <__aeabi_dmul>
 800af2a:	2200      	movs	r2, #0
 800af2c:	2300      	movs	r3, #0
 800af2e:	4604      	mov	r4, r0
 800af30:	460d      	mov	r5, r1
 800af32:	f7f5 fde9 	bl	8000b08 <__aeabi_dcmpeq>
 800af36:	2800      	cmp	r0, #0
 800af38:	f43f aebb 	beq.w	800acb2 <_dtoa_r+0x472>
 800af3c:	e6f0      	b.n	800ad20 <_dtoa_r+0x4e0>
 800af3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af40:	2a00      	cmp	r2, #0
 800af42:	f000 80db 	beq.w	800b0fc <_dtoa_r+0x8bc>
 800af46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af48:	2a01      	cmp	r2, #1
 800af4a:	f300 80bf 	bgt.w	800b0cc <_dtoa_r+0x88c>
 800af4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800af50:	2a00      	cmp	r2, #0
 800af52:	f000 80b7 	beq.w	800b0c4 <_dtoa_r+0x884>
 800af56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800af5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800af5c:	4646      	mov	r6, r8
 800af5e:	9a08      	ldr	r2, [sp, #32]
 800af60:	2101      	movs	r1, #1
 800af62:	441a      	add	r2, r3
 800af64:	4658      	mov	r0, fp
 800af66:	4498      	add	r8, r3
 800af68:	9208      	str	r2, [sp, #32]
 800af6a:	f000 ffb7 	bl	800bedc <__i2b>
 800af6e:	4605      	mov	r5, r0
 800af70:	b15e      	cbz	r6, 800af8a <_dtoa_r+0x74a>
 800af72:	9b08      	ldr	r3, [sp, #32]
 800af74:	2b00      	cmp	r3, #0
 800af76:	dd08      	ble.n	800af8a <_dtoa_r+0x74a>
 800af78:	42b3      	cmp	r3, r6
 800af7a:	9a08      	ldr	r2, [sp, #32]
 800af7c:	bfa8      	it	ge
 800af7e:	4633      	movge	r3, r6
 800af80:	eba8 0803 	sub.w	r8, r8, r3
 800af84:	1af6      	subs	r6, r6, r3
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	9308      	str	r3, [sp, #32]
 800af8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af8c:	b1f3      	cbz	r3, 800afcc <_dtoa_r+0x78c>
 800af8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 80b7 	beq.w	800b104 <_dtoa_r+0x8c4>
 800af96:	b18c      	cbz	r4, 800afbc <_dtoa_r+0x77c>
 800af98:	4629      	mov	r1, r5
 800af9a:	4622      	mov	r2, r4
 800af9c:	4658      	mov	r0, fp
 800af9e:	f001 f85d 	bl	800c05c <__pow5mult>
 800afa2:	464a      	mov	r2, r9
 800afa4:	4601      	mov	r1, r0
 800afa6:	4605      	mov	r5, r0
 800afa8:	4658      	mov	r0, fp
 800afaa:	f000 ffad 	bl	800bf08 <__multiply>
 800afae:	4649      	mov	r1, r9
 800afb0:	9004      	str	r0, [sp, #16]
 800afb2:	4658      	mov	r0, fp
 800afb4:	f000 fe94 	bl	800bce0 <_Bfree>
 800afb8:	9b04      	ldr	r3, [sp, #16]
 800afba:	4699      	mov	r9, r3
 800afbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afbe:	1b1a      	subs	r2, r3, r4
 800afc0:	d004      	beq.n	800afcc <_dtoa_r+0x78c>
 800afc2:	4649      	mov	r1, r9
 800afc4:	4658      	mov	r0, fp
 800afc6:	f001 f849 	bl	800c05c <__pow5mult>
 800afca:	4681      	mov	r9, r0
 800afcc:	2101      	movs	r1, #1
 800afce:	4658      	mov	r0, fp
 800afd0:	f000 ff84 	bl	800bedc <__i2b>
 800afd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afd6:	4604      	mov	r4, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f000 81cf 	beq.w	800b37c <_dtoa_r+0xb3c>
 800afde:	461a      	mov	r2, r3
 800afe0:	4601      	mov	r1, r0
 800afe2:	4658      	mov	r0, fp
 800afe4:	f001 f83a 	bl	800c05c <__pow5mult>
 800afe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afea:	2b01      	cmp	r3, #1
 800afec:	4604      	mov	r4, r0
 800afee:	f300 8095 	bgt.w	800b11c <_dtoa_r+0x8dc>
 800aff2:	9b02      	ldr	r3, [sp, #8]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f040 8087 	bne.w	800b108 <_dtoa_r+0x8c8>
 800affa:	9b03      	ldr	r3, [sp, #12]
 800affc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b000:	2b00      	cmp	r3, #0
 800b002:	f040 8089 	bne.w	800b118 <_dtoa_r+0x8d8>
 800b006:	9b03      	ldr	r3, [sp, #12]
 800b008:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b00c:	0d1b      	lsrs	r3, r3, #20
 800b00e:	051b      	lsls	r3, r3, #20
 800b010:	b12b      	cbz	r3, 800b01e <_dtoa_r+0x7de>
 800b012:	9b08      	ldr	r3, [sp, #32]
 800b014:	3301      	adds	r3, #1
 800b016:	9308      	str	r3, [sp, #32]
 800b018:	f108 0801 	add.w	r8, r8, #1
 800b01c:	2301      	movs	r3, #1
 800b01e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b020:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b022:	2b00      	cmp	r3, #0
 800b024:	f000 81b0 	beq.w	800b388 <_dtoa_r+0xb48>
 800b028:	6923      	ldr	r3, [r4, #16]
 800b02a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b02e:	6918      	ldr	r0, [r3, #16]
 800b030:	f000 ff08 	bl	800be44 <__hi0bits>
 800b034:	f1c0 0020 	rsb	r0, r0, #32
 800b038:	9b08      	ldr	r3, [sp, #32]
 800b03a:	4418      	add	r0, r3
 800b03c:	f010 001f 	ands.w	r0, r0, #31
 800b040:	d077      	beq.n	800b132 <_dtoa_r+0x8f2>
 800b042:	f1c0 0320 	rsb	r3, r0, #32
 800b046:	2b04      	cmp	r3, #4
 800b048:	dd6b      	ble.n	800b122 <_dtoa_r+0x8e2>
 800b04a:	9b08      	ldr	r3, [sp, #32]
 800b04c:	f1c0 001c 	rsb	r0, r0, #28
 800b050:	4403      	add	r3, r0
 800b052:	4480      	add	r8, r0
 800b054:	4406      	add	r6, r0
 800b056:	9308      	str	r3, [sp, #32]
 800b058:	f1b8 0f00 	cmp.w	r8, #0
 800b05c:	dd05      	ble.n	800b06a <_dtoa_r+0x82a>
 800b05e:	4649      	mov	r1, r9
 800b060:	4642      	mov	r2, r8
 800b062:	4658      	mov	r0, fp
 800b064:	f001 f854 	bl	800c110 <__lshift>
 800b068:	4681      	mov	r9, r0
 800b06a:	9b08      	ldr	r3, [sp, #32]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dd05      	ble.n	800b07c <_dtoa_r+0x83c>
 800b070:	4621      	mov	r1, r4
 800b072:	461a      	mov	r2, r3
 800b074:	4658      	mov	r0, fp
 800b076:	f001 f84b 	bl	800c110 <__lshift>
 800b07a:	4604      	mov	r4, r0
 800b07c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d059      	beq.n	800b136 <_dtoa_r+0x8f6>
 800b082:	4621      	mov	r1, r4
 800b084:	4648      	mov	r0, r9
 800b086:	f001 f8af 	bl	800c1e8 <__mcmp>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	da53      	bge.n	800b136 <_dtoa_r+0x8f6>
 800b08e:	1e7b      	subs	r3, r7, #1
 800b090:	9304      	str	r3, [sp, #16]
 800b092:	4649      	mov	r1, r9
 800b094:	2300      	movs	r3, #0
 800b096:	220a      	movs	r2, #10
 800b098:	4658      	mov	r0, fp
 800b09a:	f000 fe43 	bl	800bd24 <__multadd>
 800b09e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0a0:	4681      	mov	r9, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 8172 	beq.w	800b38c <_dtoa_r+0xb4c>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	220a      	movs	r2, #10
 800b0ae:	4658      	mov	r0, fp
 800b0b0:	f000 fe38 	bl	800bd24 <__multadd>
 800b0b4:	9b00      	ldr	r3, [sp, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	dc67      	bgt.n	800b18c <_dtoa_r+0x94c>
 800b0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	dc41      	bgt.n	800b146 <_dtoa_r+0x906>
 800b0c2:	e063      	b.n	800b18c <_dtoa_r+0x94c>
 800b0c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b0c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b0ca:	e746      	b.n	800af5a <_dtoa_r+0x71a>
 800b0cc:	9b07      	ldr	r3, [sp, #28]
 800b0ce:	1e5c      	subs	r4, r3, #1
 800b0d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0d2:	42a3      	cmp	r3, r4
 800b0d4:	bfbf      	itttt	lt
 800b0d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b0d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b0da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b0dc:	1ae3      	sublt	r3, r4, r3
 800b0de:	bfb4      	ite	lt
 800b0e0:	18d2      	addlt	r2, r2, r3
 800b0e2:	1b1c      	subge	r4, r3, r4
 800b0e4:	9b07      	ldr	r3, [sp, #28]
 800b0e6:	bfbc      	itt	lt
 800b0e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b0ea:	2400      	movlt	r4, #0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	bfb5      	itete	lt
 800b0f0:	eba8 0603 	sublt.w	r6, r8, r3
 800b0f4:	9b07      	ldrge	r3, [sp, #28]
 800b0f6:	2300      	movlt	r3, #0
 800b0f8:	4646      	movge	r6, r8
 800b0fa:	e730      	b.n	800af5e <_dtoa_r+0x71e>
 800b0fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b0fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b100:	4646      	mov	r6, r8
 800b102:	e735      	b.n	800af70 <_dtoa_r+0x730>
 800b104:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b106:	e75c      	b.n	800afc2 <_dtoa_r+0x782>
 800b108:	2300      	movs	r3, #0
 800b10a:	e788      	b.n	800b01e <_dtoa_r+0x7de>
 800b10c:	3fe00000 	.word	0x3fe00000
 800b110:	40240000 	.word	0x40240000
 800b114:	40140000 	.word	0x40140000
 800b118:	9b02      	ldr	r3, [sp, #8]
 800b11a:	e780      	b.n	800b01e <_dtoa_r+0x7de>
 800b11c:	2300      	movs	r3, #0
 800b11e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b120:	e782      	b.n	800b028 <_dtoa_r+0x7e8>
 800b122:	d099      	beq.n	800b058 <_dtoa_r+0x818>
 800b124:	9a08      	ldr	r2, [sp, #32]
 800b126:	331c      	adds	r3, #28
 800b128:	441a      	add	r2, r3
 800b12a:	4498      	add	r8, r3
 800b12c:	441e      	add	r6, r3
 800b12e:	9208      	str	r2, [sp, #32]
 800b130:	e792      	b.n	800b058 <_dtoa_r+0x818>
 800b132:	4603      	mov	r3, r0
 800b134:	e7f6      	b.n	800b124 <_dtoa_r+0x8e4>
 800b136:	9b07      	ldr	r3, [sp, #28]
 800b138:	9704      	str	r7, [sp, #16]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dc20      	bgt.n	800b180 <_dtoa_r+0x940>
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b142:	2b02      	cmp	r3, #2
 800b144:	dd1e      	ble.n	800b184 <_dtoa_r+0x944>
 800b146:	9b00      	ldr	r3, [sp, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f47f aec0 	bne.w	800aece <_dtoa_r+0x68e>
 800b14e:	4621      	mov	r1, r4
 800b150:	2205      	movs	r2, #5
 800b152:	4658      	mov	r0, fp
 800b154:	f000 fde6 	bl	800bd24 <__multadd>
 800b158:	4601      	mov	r1, r0
 800b15a:	4604      	mov	r4, r0
 800b15c:	4648      	mov	r0, r9
 800b15e:	f001 f843 	bl	800c1e8 <__mcmp>
 800b162:	2800      	cmp	r0, #0
 800b164:	f77f aeb3 	ble.w	800aece <_dtoa_r+0x68e>
 800b168:	4656      	mov	r6, sl
 800b16a:	2331      	movs	r3, #49	@ 0x31
 800b16c:	f806 3b01 	strb.w	r3, [r6], #1
 800b170:	9b04      	ldr	r3, [sp, #16]
 800b172:	3301      	adds	r3, #1
 800b174:	9304      	str	r3, [sp, #16]
 800b176:	e6ae      	b.n	800aed6 <_dtoa_r+0x696>
 800b178:	9c07      	ldr	r4, [sp, #28]
 800b17a:	9704      	str	r7, [sp, #16]
 800b17c:	4625      	mov	r5, r4
 800b17e:	e7f3      	b.n	800b168 <_dtoa_r+0x928>
 800b180:	9b07      	ldr	r3, [sp, #28]
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 8104 	beq.w	800b394 <_dtoa_r+0xb54>
 800b18c:	2e00      	cmp	r6, #0
 800b18e:	dd05      	ble.n	800b19c <_dtoa_r+0x95c>
 800b190:	4629      	mov	r1, r5
 800b192:	4632      	mov	r2, r6
 800b194:	4658      	mov	r0, fp
 800b196:	f000 ffbb 	bl	800c110 <__lshift>
 800b19a:	4605      	mov	r5, r0
 800b19c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d05a      	beq.n	800b258 <_dtoa_r+0xa18>
 800b1a2:	6869      	ldr	r1, [r5, #4]
 800b1a4:	4658      	mov	r0, fp
 800b1a6:	f000 fd5b 	bl	800bc60 <_Balloc>
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	b928      	cbnz	r0, 800b1ba <_dtoa_r+0x97a>
 800b1ae:	4b84      	ldr	r3, [pc, #528]	@ (800b3c0 <_dtoa_r+0xb80>)
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b1b6:	f7ff bb5a 	b.w	800a86e <_dtoa_r+0x2e>
 800b1ba:	692a      	ldr	r2, [r5, #16]
 800b1bc:	3202      	adds	r2, #2
 800b1be:	0092      	lsls	r2, r2, #2
 800b1c0:	f105 010c 	add.w	r1, r5, #12
 800b1c4:	300c      	adds	r0, #12
 800b1c6:	f7ff fa78 	bl	800a6ba <memcpy>
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	4631      	mov	r1, r6
 800b1ce:	4658      	mov	r0, fp
 800b1d0:	f000 ff9e 	bl	800c110 <__lshift>
 800b1d4:	f10a 0301 	add.w	r3, sl, #1
 800b1d8:	9307      	str	r3, [sp, #28]
 800b1da:	9b00      	ldr	r3, [sp, #0]
 800b1dc:	4453      	add	r3, sl
 800b1de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1e0:	9b02      	ldr	r3, [sp, #8]
 800b1e2:	f003 0301 	and.w	r3, r3, #1
 800b1e6:	462f      	mov	r7, r5
 800b1e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1ea:	4605      	mov	r5, r0
 800b1ec:	9b07      	ldr	r3, [sp, #28]
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	4648      	mov	r0, r9
 800b1f4:	9300      	str	r3, [sp, #0]
 800b1f6:	f7ff fa9b 	bl	800a730 <quorem>
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	9002      	str	r0, [sp, #8]
 800b1fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b202:	4648      	mov	r0, r9
 800b204:	f000 fff0 	bl	800c1e8 <__mcmp>
 800b208:	462a      	mov	r2, r5
 800b20a:	9008      	str	r0, [sp, #32]
 800b20c:	4621      	mov	r1, r4
 800b20e:	4658      	mov	r0, fp
 800b210:	f001 f806 	bl	800c220 <__mdiff>
 800b214:	68c2      	ldr	r2, [r0, #12]
 800b216:	4606      	mov	r6, r0
 800b218:	bb02      	cbnz	r2, 800b25c <_dtoa_r+0xa1c>
 800b21a:	4601      	mov	r1, r0
 800b21c:	4648      	mov	r0, r9
 800b21e:	f000 ffe3 	bl	800c1e8 <__mcmp>
 800b222:	4602      	mov	r2, r0
 800b224:	4631      	mov	r1, r6
 800b226:	4658      	mov	r0, fp
 800b228:	920e      	str	r2, [sp, #56]	@ 0x38
 800b22a:	f000 fd59 	bl	800bce0 <_Bfree>
 800b22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b230:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b232:	9e07      	ldr	r6, [sp, #28]
 800b234:	ea43 0102 	orr.w	r1, r3, r2
 800b238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b23a:	4319      	orrs	r1, r3
 800b23c:	d110      	bne.n	800b260 <_dtoa_r+0xa20>
 800b23e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b242:	d029      	beq.n	800b298 <_dtoa_r+0xa58>
 800b244:	9b08      	ldr	r3, [sp, #32]
 800b246:	2b00      	cmp	r3, #0
 800b248:	dd02      	ble.n	800b250 <_dtoa_r+0xa10>
 800b24a:	9b02      	ldr	r3, [sp, #8]
 800b24c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b250:	9b00      	ldr	r3, [sp, #0]
 800b252:	f883 8000 	strb.w	r8, [r3]
 800b256:	e63f      	b.n	800aed8 <_dtoa_r+0x698>
 800b258:	4628      	mov	r0, r5
 800b25a:	e7bb      	b.n	800b1d4 <_dtoa_r+0x994>
 800b25c:	2201      	movs	r2, #1
 800b25e:	e7e1      	b.n	800b224 <_dtoa_r+0x9e4>
 800b260:	9b08      	ldr	r3, [sp, #32]
 800b262:	2b00      	cmp	r3, #0
 800b264:	db04      	blt.n	800b270 <_dtoa_r+0xa30>
 800b266:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b268:	430b      	orrs	r3, r1
 800b26a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b26c:	430b      	orrs	r3, r1
 800b26e:	d120      	bne.n	800b2b2 <_dtoa_r+0xa72>
 800b270:	2a00      	cmp	r2, #0
 800b272:	dded      	ble.n	800b250 <_dtoa_r+0xa10>
 800b274:	4649      	mov	r1, r9
 800b276:	2201      	movs	r2, #1
 800b278:	4658      	mov	r0, fp
 800b27a:	f000 ff49 	bl	800c110 <__lshift>
 800b27e:	4621      	mov	r1, r4
 800b280:	4681      	mov	r9, r0
 800b282:	f000 ffb1 	bl	800c1e8 <__mcmp>
 800b286:	2800      	cmp	r0, #0
 800b288:	dc03      	bgt.n	800b292 <_dtoa_r+0xa52>
 800b28a:	d1e1      	bne.n	800b250 <_dtoa_r+0xa10>
 800b28c:	f018 0f01 	tst.w	r8, #1
 800b290:	d0de      	beq.n	800b250 <_dtoa_r+0xa10>
 800b292:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b296:	d1d8      	bne.n	800b24a <_dtoa_r+0xa0a>
 800b298:	9a00      	ldr	r2, [sp, #0]
 800b29a:	2339      	movs	r3, #57	@ 0x39
 800b29c:	7013      	strb	r3, [r2, #0]
 800b29e:	4633      	mov	r3, r6
 800b2a0:	461e      	mov	r6, r3
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b2a8:	2a39      	cmp	r2, #57	@ 0x39
 800b2aa:	d052      	beq.n	800b352 <_dtoa_r+0xb12>
 800b2ac:	3201      	adds	r2, #1
 800b2ae:	701a      	strb	r2, [r3, #0]
 800b2b0:	e612      	b.n	800aed8 <_dtoa_r+0x698>
 800b2b2:	2a00      	cmp	r2, #0
 800b2b4:	dd07      	ble.n	800b2c6 <_dtoa_r+0xa86>
 800b2b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b2ba:	d0ed      	beq.n	800b298 <_dtoa_r+0xa58>
 800b2bc:	9a00      	ldr	r2, [sp, #0]
 800b2be:	f108 0301 	add.w	r3, r8, #1
 800b2c2:	7013      	strb	r3, [r2, #0]
 800b2c4:	e608      	b.n	800aed8 <_dtoa_r+0x698>
 800b2c6:	9b07      	ldr	r3, [sp, #28]
 800b2c8:	9a07      	ldr	r2, [sp, #28]
 800b2ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b2ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d028      	beq.n	800b326 <_dtoa_r+0xae6>
 800b2d4:	4649      	mov	r1, r9
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	220a      	movs	r2, #10
 800b2da:	4658      	mov	r0, fp
 800b2dc:	f000 fd22 	bl	800bd24 <__multadd>
 800b2e0:	42af      	cmp	r7, r5
 800b2e2:	4681      	mov	r9, r0
 800b2e4:	f04f 0300 	mov.w	r3, #0
 800b2e8:	f04f 020a 	mov.w	r2, #10
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	4658      	mov	r0, fp
 800b2f0:	d107      	bne.n	800b302 <_dtoa_r+0xac2>
 800b2f2:	f000 fd17 	bl	800bd24 <__multadd>
 800b2f6:	4607      	mov	r7, r0
 800b2f8:	4605      	mov	r5, r0
 800b2fa:	9b07      	ldr	r3, [sp, #28]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	9307      	str	r3, [sp, #28]
 800b300:	e774      	b.n	800b1ec <_dtoa_r+0x9ac>
 800b302:	f000 fd0f 	bl	800bd24 <__multadd>
 800b306:	4629      	mov	r1, r5
 800b308:	4607      	mov	r7, r0
 800b30a:	2300      	movs	r3, #0
 800b30c:	220a      	movs	r2, #10
 800b30e:	4658      	mov	r0, fp
 800b310:	f000 fd08 	bl	800bd24 <__multadd>
 800b314:	4605      	mov	r5, r0
 800b316:	e7f0      	b.n	800b2fa <_dtoa_r+0xaba>
 800b318:	9b00      	ldr	r3, [sp, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	bfcc      	ite	gt
 800b31e:	461e      	movgt	r6, r3
 800b320:	2601      	movle	r6, #1
 800b322:	4456      	add	r6, sl
 800b324:	2700      	movs	r7, #0
 800b326:	4649      	mov	r1, r9
 800b328:	2201      	movs	r2, #1
 800b32a:	4658      	mov	r0, fp
 800b32c:	f000 fef0 	bl	800c110 <__lshift>
 800b330:	4621      	mov	r1, r4
 800b332:	4681      	mov	r9, r0
 800b334:	f000 ff58 	bl	800c1e8 <__mcmp>
 800b338:	2800      	cmp	r0, #0
 800b33a:	dcb0      	bgt.n	800b29e <_dtoa_r+0xa5e>
 800b33c:	d102      	bne.n	800b344 <_dtoa_r+0xb04>
 800b33e:	f018 0f01 	tst.w	r8, #1
 800b342:	d1ac      	bne.n	800b29e <_dtoa_r+0xa5e>
 800b344:	4633      	mov	r3, r6
 800b346:	461e      	mov	r6, r3
 800b348:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b34c:	2a30      	cmp	r2, #48	@ 0x30
 800b34e:	d0fa      	beq.n	800b346 <_dtoa_r+0xb06>
 800b350:	e5c2      	b.n	800aed8 <_dtoa_r+0x698>
 800b352:	459a      	cmp	sl, r3
 800b354:	d1a4      	bne.n	800b2a0 <_dtoa_r+0xa60>
 800b356:	9b04      	ldr	r3, [sp, #16]
 800b358:	3301      	adds	r3, #1
 800b35a:	9304      	str	r3, [sp, #16]
 800b35c:	2331      	movs	r3, #49	@ 0x31
 800b35e:	f88a 3000 	strb.w	r3, [sl]
 800b362:	e5b9      	b.n	800aed8 <_dtoa_r+0x698>
 800b364:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b366:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b3c4 <_dtoa_r+0xb84>
 800b36a:	b11b      	cbz	r3, 800b374 <_dtoa_r+0xb34>
 800b36c:	f10a 0308 	add.w	r3, sl, #8
 800b370:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b372:	6013      	str	r3, [r2, #0]
 800b374:	4650      	mov	r0, sl
 800b376:	b019      	add	sp, #100	@ 0x64
 800b378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b37e:	2b01      	cmp	r3, #1
 800b380:	f77f ae37 	ble.w	800aff2 <_dtoa_r+0x7b2>
 800b384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b386:	930a      	str	r3, [sp, #40]	@ 0x28
 800b388:	2001      	movs	r0, #1
 800b38a:	e655      	b.n	800b038 <_dtoa_r+0x7f8>
 800b38c:	9b00      	ldr	r3, [sp, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f77f aed6 	ble.w	800b140 <_dtoa_r+0x900>
 800b394:	4656      	mov	r6, sl
 800b396:	4621      	mov	r1, r4
 800b398:	4648      	mov	r0, r9
 800b39a:	f7ff f9c9 	bl	800a730 <quorem>
 800b39e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b3a2:	f806 8b01 	strb.w	r8, [r6], #1
 800b3a6:	9b00      	ldr	r3, [sp, #0]
 800b3a8:	eba6 020a 	sub.w	r2, r6, sl
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	ddb3      	ble.n	800b318 <_dtoa_r+0xad8>
 800b3b0:	4649      	mov	r1, r9
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	220a      	movs	r2, #10
 800b3b6:	4658      	mov	r0, fp
 800b3b8:	f000 fcb4 	bl	800bd24 <__multadd>
 800b3bc:	4681      	mov	r9, r0
 800b3be:	e7ea      	b.n	800b396 <_dtoa_r+0xb56>
 800b3c0:	0800d7db 	.word	0x0800d7db
 800b3c4:	0800d776 	.word	0x0800d776

0800b3c8 <_free_r>:
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	2900      	cmp	r1, #0
 800b3ce:	d041      	beq.n	800b454 <_free_r+0x8c>
 800b3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3d4:	1f0c      	subs	r4, r1, #4
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	bfb8      	it	lt
 800b3da:	18e4      	addlt	r4, r4, r3
 800b3dc:	f000 fc34 	bl	800bc48 <__malloc_lock>
 800b3e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b458 <_free_r+0x90>)
 800b3e2:	6813      	ldr	r3, [r2, #0]
 800b3e4:	b933      	cbnz	r3, 800b3f4 <_free_r+0x2c>
 800b3e6:	6063      	str	r3, [r4, #4]
 800b3e8:	6014      	str	r4, [r2, #0]
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3f0:	f000 bc30 	b.w	800bc54 <__malloc_unlock>
 800b3f4:	42a3      	cmp	r3, r4
 800b3f6:	d908      	bls.n	800b40a <_free_r+0x42>
 800b3f8:	6820      	ldr	r0, [r4, #0]
 800b3fa:	1821      	adds	r1, r4, r0
 800b3fc:	428b      	cmp	r3, r1
 800b3fe:	bf01      	itttt	eq
 800b400:	6819      	ldreq	r1, [r3, #0]
 800b402:	685b      	ldreq	r3, [r3, #4]
 800b404:	1809      	addeq	r1, r1, r0
 800b406:	6021      	streq	r1, [r4, #0]
 800b408:	e7ed      	b.n	800b3e6 <_free_r+0x1e>
 800b40a:	461a      	mov	r2, r3
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	b10b      	cbz	r3, 800b414 <_free_r+0x4c>
 800b410:	42a3      	cmp	r3, r4
 800b412:	d9fa      	bls.n	800b40a <_free_r+0x42>
 800b414:	6811      	ldr	r1, [r2, #0]
 800b416:	1850      	adds	r0, r2, r1
 800b418:	42a0      	cmp	r0, r4
 800b41a:	d10b      	bne.n	800b434 <_free_r+0x6c>
 800b41c:	6820      	ldr	r0, [r4, #0]
 800b41e:	4401      	add	r1, r0
 800b420:	1850      	adds	r0, r2, r1
 800b422:	4283      	cmp	r3, r0
 800b424:	6011      	str	r1, [r2, #0]
 800b426:	d1e0      	bne.n	800b3ea <_free_r+0x22>
 800b428:	6818      	ldr	r0, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	6053      	str	r3, [r2, #4]
 800b42e:	4408      	add	r0, r1
 800b430:	6010      	str	r0, [r2, #0]
 800b432:	e7da      	b.n	800b3ea <_free_r+0x22>
 800b434:	d902      	bls.n	800b43c <_free_r+0x74>
 800b436:	230c      	movs	r3, #12
 800b438:	602b      	str	r3, [r5, #0]
 800b43a:	e7d6      	b.n	800b3ea <_free_r+0x22>
 800b43c:	6820      	ldr	r0, [r4, #0]
 800b43e:	1821      	adds	r1, r4, r0
 800b440:	428b      	cmp	r3, r1
 800b442:	bf04      	itt	eq
 800b444:	6819      	ldreq	r1, [r3, #0]
 800b446:	685b      	ldreq	r3, [r3, #4]
 800b448:	6063      	str	r3, [r4, #4]
 800b44a:	bf04      	itt	eq
 800b44c:	1809      	addeq	r1, r1, r0
 800b44e:	6021      	streq	r1, [r4, #0]
 800b450:	6054      	str	r4, [r2, #4]
 800b452:	e7ca      	b.n	800b3ea <_free_r+0x22>
 800b454:	bd38      	pop	{r3, r4, r5, pc}
 800b456:	bf00      	nop
 800b458:	200070ec 	.word	0x200070ec

0800b45c <rshift>:
 800b45c:	6903      	ldr	r3, [r0, #16]
 800b45e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b466:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b46a:	f100 0414 	add.w	r4, r0, #20
 800b46e:	dd45      	ble.n	800b4fc <rshift+0xa0>
 800b470:	f011 011f 	ands.w	r1, r1, #31
 800b474:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b478:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b47c:	d10c      	bne.n	800b498 <rshift+0x3c>
 800b47e:	f100 0710 	add.w	r7, r0, #16
 800b482:	4629      	mov	r1, r5
 800b484:	42b1      	cmp	r1, r6
 800b486:	d334      	bcc.n	800b4f2 <rshift+0x96>
 800b488:	1a9b      	subs	r3, r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	1eea      	subs	r2, r5, #3
 800b48e:	4296      	cmp	r6, r2
 800b490:	bf38      	it	cc
 800b492:	2300      	movcc	r3, #0
 800b494:	4423      	add	r3, r4
 800b496:	e015      	b.n	800b4c4 <rshift+0x68>
 800b498:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b49c:	f1c1 0820 	rsb	r8, r1, #32
 800b4a0:	40cf      	lsrs	r7, r1
 800b4a2:	f105 0e04 	add.w	lr, r5, #4
 800b4a6:	46a1      	mov	r9, r4
 800b4a8:	4576      	cmp	r6, lr
 800b4aa:	46f4      	mov	ip, lr
 800b4ac:	d815      	bhi.n	800b4da <rshift+0x7e>
 800b4ae:	1a9a      	subs	r2, r3, r2
 800b4b0:	0092      	lsls	r2, r2, #2
 800b4b2:	3a04      	subs	r2, #4
 800b4b4:	3501      	adds	r5, #1
 800b4b6:	42ae      	cmp	r6, r5
 800b4b8:	bf38      	it	cc
 800b4ba:	2200      	movcc	r2, #0
 800b4bc:	18a3      	adds	r3, r4, r2
 800b4be:	50a7      	str	r7, [r4, r2]
 800b4c0:	b107      	cbz	r7, 800b4c4 <rshift+0x68>
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	1b1a      	subs	r2, r3, r4
 800b4c6:	42a3      	cmp	r3, r4
 800b4c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b4cc:	bf08      	it	eq
 800b4ce:	2300      	moveq	r3, #0
 800b4d0:	6102      	str	r2, [r0, #16]
 800b4d2:	bf08      	it	eq
 800b4d4:	6143      	streq	r3, [r0, #20]
 800b4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4da:	f8dc c000 	ldr.w	ip, [ip]
 800b4de:	fa0c fc08 	lsl.w	ip, ip, r8
 800b4e2:	ea4c 0707 	orr.w	r7, ip, r7
 800b4e6:	f849 7b04 	str.w	r7, [r9], #4
 800b4ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b4ee:	40cf      	lsrs	r7, r1
 800b4f0:	e7da      	b.n	800b4a8 <rshift+0x4c>
 800b4f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b4f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b4fa:	e7c3      	b.n	800b484 <rshift+0x28>
 800b4fc:	4623      	mov	r3, r4
 800b4fe:	e7e1      	b.n	800b4c4 <rshift+0x68>

0800b500 <__hexdig_fun>:
 800b500:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b504:	2b09      	cmp	r3, #9
 800b506:	d802      	bhi.n	800b50e <__hexdig_fun+0xe>
 800b508:	3820      	subs	r0, #32
 800b50a:	b2c0      	uxtb	r0, r0
 800b50c:	4770      	bx	lr
 800b50e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b512:	2b05      	cmp	r3, #5
 800b514:	d801      	bhi.n	800b51a <__hexdig_fun+0x1a>
 800b516:	3847      	subs	r0, #71	@ 0x47
 800b518:	e7f7      	b.n	800b50a <__hexdig_fun+0xa>
 800b51a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b51e:	2b05      	cmp	r3, #5
 800b520:	d801      	bhi.n	800b526 <__hexdig_fun+0x26>
 800b522:	3827      	subs	r0, #39	@ 0x27
 800b524:	e7f1      	b.n	800b50a <__hexdig_fun+0xa>
 800b526:	2000      	movs	r0, #0
 800b528:	4770      	bx	lr
	...

0800b52c <__gethex>:
 800b52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b530:	b085      	sub	sp, #20
 800b532:	468a      	mov	sl, r1
 800b534:	9302      	str	r3, [sp, #8]
 800b536:	680b      	ldr	r3, [r1, #0]
 800b538:	9001      	str	r0, [sp, #4]
 800b53a:	4690      	mov	r8, r2
 800b53c:	1c9c      	adds	r4, r3, #2
 800b53e:	46a1      	mov	r9, r4
 800b540:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b544:	2830      	cmp	r0, #48	@ 0x30
 800b546:	d0fa      	beq.n	800b53e <__gethex+0x12>
 800b548:	eba9 0303 	sub.w	r3, r9, r3
 800b54c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b550:	f7ff ffd6 	bl	800b500 <__hexdig_fun>
 800b554:	4605      	mov	r5, r0
 800b556:	2800      	cmp	r0, #0
 800b558:	d168      	bne.n	800b62c <__gethex+0x100>
 800b55a:	49a0      	ldr	r1, [pc, #640]	@ (800b7dc <__gethex+0x2b0>)
 800b55c:	2201      	movs	r2, #1
 800b55e:	4648      	mov	r0, r9
 800b560:	f7fe ffc5 	bl	800a4ee <strncmp>
 800b564:	4607      	mov	r7, r0
 800b566:	2800      	cmp	r0, #0
 800b568:	d167      	bne.n	800b63a <__gethex+0x10e>
 800b56a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b56e:	4626      	mov	r6, r4
 800b570:	f7ff ffc6 	bl	800b500 <__hexdig_fun>
 800b574:	2800      	cmp	r0, #0
 800b576:	d062      	beq.n	800b63e <__gethex+0x112>
 800b578:	4623      	mov	r3, r4
 800b57a:	7818      	ldrb	r0, [r3, #0]
 800b57c:	2830      	cmp	r0, #48	@ 0x30
 800b57e:	4699      	mov	r9, r3
 800b580:	f103 0301 	add.w	r3, r3, #1
 800b584:	d0f9      	beq.n	800b57a <__gethex+0x4e>
 800b586:	f7ff ffbb 	bl	800b500 <__hexdig_fun>
 800b58a:	fab0 f580 	clz	r5, r0
 800b58e:	096d      	lsrs	r5, r5, #5
 800b590:	f04f 0b01 	mov.w	fp, #1
 800b594:	464a      	mov	r2, r9
 800b596:	4616      	mov	r6, r2
 800b598:	3201      	adds	r2, #1
 800b59a:	7830      	ldrb	r0, [r6, #0]
 800b59c:	f7ff ffb0 	bl	800b500 <__hexdig_fun>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d1f8      	bne.n	800b596 <__gethex+0x6a>
 800b5a4:	498d      	ldr	r1, [pc, #564]	@ (800b7dc <__gethex+0x2b0>)
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7fe ffa0 	bl	800a4ee <strncmp>
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	d13f      	bne.n	800b632 <__gethex+0x106>
 800b5b2:	b944      	cbnz	r4, 800b5c6 <__gethex+0x9a>
 800b5b4:	1c74      	adds	r4, r6, #1
 800b5b6:	4622      	mov	r2, r4
 800b5b8:	4616      	mov	r6, r2
 800b5ba:	3201      	adds	r2, #1
 800b5bc:	7830      	ldrb	r0, [r6, #0]
 800b5be:	f7ff ff9f 	bl	800b500 <__hexdig_fun>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d1f8      	bne.n	800b5b8 <__gethex+0x8c>
 800b5c6:	1ba4      	subs	r4, r4, r6
 800b5c8:	00a7      	lsls	r7, r4, #2
 800b5ca:	7833      	ldrb	r3, [r6, #0]
 800b5cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b5d0:	2b50      	cmp	r3, #80	@ 0x50
 800b5d2:	d13e      	bne.n	800b652 <__gethex+0x126>
 800b5d4:	7873      	ldrb	r3, [r6, #1]
 800b5d6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b5d8:	d033      	beq.n	800b642 <__gethex+0x116>
 800b5da:	2b2d      	cmp	r3, #45	@ 0x2d
 800b5dc:	d034      	beq.n	800b648 <__gethex+0x11c>
 800b5de:	1c71      	adds	r1, r6, #1
 800b5e0:	2400      	movs	r4, #0
 800b5e2:	7808      	ldrb	r0, [r1, #0]
 800b5e4:	f7ff ff8c 	bl	800b500 <__hexdig_fun>
 800b5e8:	1e43      	subs	r3, r0, #1
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	2b18      	cmp	r3, #24
 800b5ee:	d830      	bhi.n	800b652 <__gethex+0x126>
 800b5f0:	f1a0 0210 	sub.w	r2, r0, #16
 800b5f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b5f8:	f7ff ff82 	bl	800b500 <__hexdig_fun>
 800b5fc:	f100 3cff 	add.w	ip, r0, #4294967295
 800b600:	fa5f fc8c 	uxtb.w	ip, ip
 800b604:	f1bc 0f18 	cmp.w	ip, #24
 800b608:	f04f 030a 	mov.w	r3, #10
 800b60c:	d91e      	bls.n	800b64c <__gethex+0x120>
 800b60e:	b104      	cbz	r4, 800b612 <__gethex+0xe6>
 800b610:	4252      	negs	r2, r2
 800b612:	4417      	add	r7, r2
 800b614:	f8ca 1000 	str.w	r1, [sl]
 800b618:	b1ed      	cbz	r5, 800b656 <__gethex+0x12a>
 800b61a:	f1bb 0f00 	cmp.w	fp, #0
 800b61e:	bf0c      	ite	eq
 800b620:	2506      	moveq	r5, #6
 800b622:	2500      	movne	r5, #0
 800b624:	4628      	mov	r0, r5
 800b626:	b005      	add	sp, #20
 800b628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62c:	2500      	movs	r5, #0
 800b62e:	462c      	mov	r4, r5
 800b630:	e7b0      	b.n	800b594 <__gethex+0x68>
 800b632:	2c00      	cmp	r4, #0
 800b634:	d1c7      	bne.n	800b5c6 <__gethex+0x9a>
 800b636:	4627      	mov	r7, r4
 800b638:	e7c7      	b.n	800b5ca <__gethex+0x9e>
 800b63a:	464e      	mov	r6, r9
 800b63c:	462f      	mov	r7, r5
 800b63e:	2501      	movs	r5, #1
 800b640:	e7c3      	b.n	800b5ca <__gethex+0x9e>
 800b642:	2400      	movs	r4, #0
 800b644:	1cb1      	adds	r1, r6, #2
 800b646:	e7cc      	b.n	800b5e2 <__gethex+0xb6>
 800b648:	2401      	movs	r4, #1
 800b64a:	e7fb      	b.n	800b644 <__gethex+0x118>
 800b64c:	fb03 0002 	mla	r0, r3, r2, r0
 800b650:	e7ce      	b.n	800b5f0 <__gethex+0xc4>
 800b652:	4631      	mov	r1, r6
 800b654:	e7de      	b.n	800b614 <__gethex+0xe8>
 800b656:	eba6 0309 	sub.w	r3, r6, r9
 800b65a:	3b01      	subs	r3, #1
 800b65c:	4629      	mov	r1, r5
 800b65e:	2b07      	cmp	r3, #7
 800b660:	dc0a      	bgt.n	800b678 <__gethex+0x14c>
 800b662:	9801      	ldr	r0, [sp, #4]
 800b664:	f000 fafc 	bl	800bc60 <_Balloc>
 800b668:	4604      	mov	r4, r0
 800b66a:	b940      	cbnz	r0, 800b67e <__gethex+0x152>
 800b66c:	4b5c      	ldr	r3, [pc, #368]	@ (800b7e0 <__gethex+0x2b4>)
 800b66e:	4602      	mov	r2, r0
 800b670:	21e4      	movs	r1, #228	@ 0xe4
 800b672:	485c      	ldr	r0, [pc, #368]	@ (800b7e4 <__gethex+0x2b8>)
 800b674:	f7ff f83e 	bl	800a6f4 <__assert_func>
 800b678:	3101      	adds	r1, #1
 800b67a:	105b      	asrs	r3, r3, #1
 800b67c:	e7ef      	b.n	800b65e <__gethex+0x132>
 800b67e:	f100 0a14 	add.w	sl, r0, #20
 800b682:	2300      	movs	r3, #0
 800b684:	4655      	mov	r5, sl
 800b686:	469b      	mov	fp, r3
 800b688:	45b1      	cmp	r9, r6
 800b68a:	d337      	bcc.n	800b6fc <__gethex+0x1d0>
 800b68c:	f845 bb04 	str.w	fp, [r5], #4
 800b690:	eba5 050a 	sub.w	r5, r5, sl
 800b694:	10ad      	asrs	r5, r5, #2
 800b696:	6125      	str	r5, [r4, #16]
 800b698:	4658      	mov	r0, fp
 800b69a:	f000 fbd3 	bl	800be44 <__hi0bits>
 800b69e:	016d      	lsls	r5, r5, #5
 800b6a0:	f8d8 6000 	ldr.w	r6, [r8]
 800b6a4:	1a2d      	subs	r5, r5, r0
 800b6a6:	42b5      	cmp	r5, r6
 800b6a8:	dd54      	ble.n	800b754 <__gethex+0x228>
 800b6aa:	1bad      	subs	r5, r5, r6
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f000 ff67 	bl	800c582 <__any_on>
 800b6b4:	4681      	mov	r9, r0
 800b6b6:	b178      	cbz	r0, 800b6d8 <__gethex+0x1ac>
 800b6b8:	1e6b      	subs	r3, r5, #1
 800b6ba:	1159      	asrs	r1, r3, #5
 800b6bc:	f003 021f 	and.w	r2, r3, #31
 800b6c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b6c4:	f04f 0901 	mov.w	r9, #1
 800b6c8:	fa09 f202 	lsl.w	r2, r9, r2
 800b6cc:	420a      	tst	r2, r1
 800b6ce:	d003      	beq.n	800b6d8 <__gethex+0x1ac>
 800b6d0:	454b      	cmp	r3, r9
 800b6d2:	dc36      	bgt.n	800b742 <__gethex+0x216>
 800b6d4:	f04f 0902 	mov.w	r9, #2
 800b6d8:	4629      	mov	r1, r5
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f7ff febe 	bl	800b45c <rshift>
 800b6e0:	442f      	add	r7, r5
 800b6e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6e6:	42bb      	cmp	r3, r7
 800b6e8:	da42      	bge.n	800b770 <__gethex+0x244>
 800b6ea:	9801      	ldr	r0, [sp, #4]
 800b6ec:	4621      	mov	r1, r4
 800b6ee:	f000 faf7 	bl	800bce0 <_Bfree>
 800b6f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	6013      	str	r3, [r2, #0]
 800b6f8:	25a3      	movs	r5, #163	@ 0xa3
 800b6fa:	e793      	b.n	800b624 <__gethex+0xf8>
 800b6fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b700:	2a2e      	cmp	r2, #46	@ 0x2e
 800b702:	d012      	beq.n	800b72a <__gethex+0x1fe>
 800b704:	2b20      	cmp	r3, #32
 800b706:	d104      	bne.n	800b712 <__gethex+0x1e6>
 800b708:	f845 bb04 	str.w	fp, [r5], #4
 800b70c:	f04f 0b00 	mov.w	fp, #0
 800b710:	465b      	mov	r3, fp
 800b712:	7830      	ldrb	r0, [r6, #0]
 800b714:	9303      	str	r3, [sp, #12]
 800b716:	f7ff fef3 	bl	800b500 <__hexdig_fun>
 800b71a:	9b03      	ldr	r3, [sp, #12]
 800b71c:	f000 000f 	and.w	r0, r0, #15
 800b720:	4098      	lsls	r0, r3
 800b722:	ea4b 0b00 	orr.w	fp, fp, r0
 800b726:	3304      	adds	r3, #4
 800b728:	e7ae      	b.n	800b688 <__gethex+0x15c>
 800b72a:	45b1      	cmp	r9, r6
 800b72c:	d8ea      	bhi.n	800b704 <__gethex+0x1d8>
 800b72e:	492b      	ldr	r1, [pc, #172]	@ (800b7dc <__gethex+0x2b0>)
 800b730:	9303      	str	r3, [sp, #12]
 800b732:	2201      	movs	r2, #1
 800b734:	4630      	mov	r0, r6
 800b736:	f7fe feda 	bl	800a4ee <strncmp>
 800b73a:	9b03      	ldr	r3, [sp, #12]
 800b73c:	2800      	cmp	r0, #0
 800b73e:	d1e1      	bne.n	800b704 <__gethex+0x1d8>
 800b740:	e7a2      	b.n	800b688 <__gethex+0x15c>
 800b742:	1ea9      	subs	r1, r5, #2
 800b744:	4620      	mov	r0, r4
 800b746:	f000 ff1c 	bl	800c582 <__any_on>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	d0c2      	beq.n	800b6d4 <__gethex+0x1a8>
 800b74e:	f04f 0903 	mov.w	r9, #3
 800b752:	e7c1      	b.n	800b6d8 <__gethex+0x1ac>
 800b754:	da09      	bge.n	800b76a <__gethex+0x23e>
 800b756:	1b75      	subs	r5, r6, r5
 800b758:	4621      	mov	r1, r4
 800b75a:	9801      	ldr	r0, [sp, #4]
 800b75c:	462a      	mov	r2, r5
 800b75e:	f000 fcd7 	bl	800c110 <__lshift>
 800b762:	1b7f      	subs	r7, r7, r5
 800b764:	4604      	mov	r4, r0
 800b766:	f100 0a14 	add.w	sl, r0, #20
 800b76a:	f04f 0900 	mov.w	r9, #0
 800b76e:	e7b8      	b.n	800b6e2 <__gethex+0x1b6>
 800b770:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b774:	42bd      	cmp	r5, r7
 800b776:	dd6f      	ble.n	800b858 <__gethex+0x32c>
 800b778:	1bed      	subs	r5, r5, r7
 800b77a:	42ae      	cmp	r6, r5
 800b77c:	dc34      	bgt.n	800b7e8 <__gethex+0x2bc>
 800b77e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b782:	2b02      	cmp	r3, #2
 800b784:	d022      	beq.n	800b7cc <__gethex+0x2a0>
 800b786:	2b03      	cmp	r3, #3
 800b788:	d024      	beq.n	800b7d4 <__gethex+0x2a8>
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d115      	bne.n	800b7ba <__gethex+0x28e>
 800b78e:	42ae      	cmp	r6, r5
 800b790:	d113      	bne.n	800b7ba <__gethex+0x28e>
 800b792:	2e01      	cmp	r6, #1
 800b794:	d10b      	bne.n	800b7ae <__gethex+0x282>
 800b796:	9a02      	ldr	r2, [sp, #8]
 800b798:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	2301      	movs	r3, #1
 800b7a0:	6123      	str	r3, [r4, #16]
 800b7a2:	f8ca 3000 	str.w	r3, [sl]
 800b7a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7a8:	2562      	movs	r5, #98	@ 0x62
 800b7aa:	601c      	str	r4, [r3, #0]
 800b7ac:	e73a      	b.n	800b624 <__gethex+0xf8>
 800b7ae:	1e71      	subs	r1, r6, #1
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f000 fee6 	bl	800c582 <__any_on>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d1ed      	bne.n	800b796 <__gethex+0x26a>
 800b7ba:	9801      	ldr	r0, [sp, #4]
 800b7bc:	4621      	mov	r1, r4
 800b7be:	f000 fa8f 	bl	800bce0 <_Bfree>
 800b7c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	2550      	movs	r5, #80	@ 0x50
 800b7ca:	e72b      	b.n	800b624 <__gethex+0xf8>
 800b7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1f3      	bne.n	800b7ba <__gethex+0x28e>
 800b7d2:	e7e0      	b.n	800b796 <__gethex+0x26a>
 800b7d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1dd      	bne.n	800b796 <__gethex+0x26a>
 800b7da:	e7ee      	b.n	800b7ba <__gethex+0x28e>
 800b7dc:	0800d630 	.word	0x0800d630
 800b7e0:	0800d7db 	.word	0x0800d7db
 800b7e4:	0800d7ec 	.word	0x0800d7ec
 800b7e8:	1e6f      	subs	r7, r5, #1
 800b7ea:	f1b9 0f00 	cmp.w	r9, #0
 800b7ee:	d130      	bne.n	800b852 <__gethex+0x326>
 800b7f0:	b127      	cbz	r7, 800b7fc <__gethex+0x2d0>
 800b7f2:	4639      	mov	r1, r7
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f000 fec4 	bl	800c582 <__any_on>
 800b7fa:	4681      	mov	r9, r0
 800b7fc:	117a      	asrs	r2, r7, #5
 800b7fe:	2301      	movs	r3, #1
 800b800:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b804:	f007 071f 	and.w	r7, r7, #31
 800b808:	40bb      	lsls	r3, r7
 800b80a:	4213      	tst	r3, r2
 800b80c:	4629      	mov	r1, r5
 800b80e:	4620      	mov	r0, r4
 800b810:	bf18      	it	ne
 800b812:	f049 0902 	orrne.w	r9, r9, #2
 800b816:	f7ff fe21 	bl	800b45c <rshift>
 800b81a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b81e:	1b76      	subs	r6, r6, r5
 800b820:	2502      	movs	r5, #2
 800b822:	f1b9 0f00 	cmp.w	r9, #0
 800b826:	d047      	beq.n	800b8b8 <__gethex+0x38c>
 800b828:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d015      	beq.n	800b85c <__gethex+0x330>
 800b830:	2b03      	cmp	r3, #3
 800b832:	d017      	beq.n	800b864 <__gethex+0x338>
 800b834:	2b01      	cmp	r3, #1
 800b836:	d109      	bne.n	800b84c <__gethex+0x320>
 800b838:	f019 0f02 	tst.w	r9, #2
 800b83c:	d006      	beq.n	800b84c <__gethex+0x320>
 800b83e:	f8da 3000 	ldr.w	r3, [sl]
 800b842:	ea49 0903 	orr.w	r9, r9, r3
 800b846:	f019 0f01 	tst.w	r9, #1
 800b84a:	d10e      	bne.n	800b86a <__gethex+0x33e>
 800b84c:	f045 0510 	orr.w	r5, r5, #16
 800b850:	e032      	b.n	800b8b8 <__gethex+0x38c>
 800b852:	f04f 0901 	mov.w	r9, #1
 800b856:	e7d1      	b.n	800b7fc <__gethex+0x2d0>
 800b858:	2501      	movs	r5, #1
 800b85a:	e7e2      	b.n	800b822 <__gethex+0x2f6>
 800b85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b85e:	f1c3 0301 	rsb	r3, r3, #1
 800b862:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0f0      	beq.n	800b84c <__gethex+0x320>
 800b86a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b86e:	f104 0314 	add.w	r3, r4, #20
 800b872:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b876:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b87a:	f04f 0c00 	mov.w	ip, #0
 800b87e:	4618      	mov	r0, r3
 800b880:	f853 2b04 	ldr.w	r2, [r3], #4
 800b884:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b888:	d01b      	beq.n	800b8c2 <__gethex+0x396>
 800b88a:	3201      	adds	r2, #1
 800b88c:	6002      	str	r2, [r0, #0]
 800b88e:	2d02      	cmp	r5, #2
 800b890:	f104 0314 	add.w	r3, r4, #20
 800b894:	d13c      	bne.n	800b910 <__gethex+0x3e4>
 800b896:	f8d8 2000 	ldr.w	r2, [r8]
 800b89a:	3a01      	subs	r2, #1
 800b89c:	42b2      	cmp	r2, r6
 800b89e:	d109      	bne.n	800b8b4 <__gethex+0x388>
 800b8a0:	1171      	asrs	r1, r6, #5
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b8a8:	f006 061f 	and.w	r6, r6, #31
 800b8ac:	fa02 f606 	lsl.w	r6, r2, r6
 800b8b0:	421e      	tst	r6, r3
 800b8b2:	d13a      	bne.n	800b92a <__gethex+0x3fe>
 800b8b4:	f045 0520 	orr.w	r5, r5, #32
 800b8b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8ba:	601c      	str	r4, [r3, #0]
 800b8bc:	9b02      	ldr	r3, [sp, #8]
 800b8be:	601f      	str	r7, [r3, #0]
 800b8c0:	e6b0      	b.n	800b624 <__gethex+0xf8>
 800b8c2:	4299      	cmp	r1, r3
 800b8c4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b8c8:	d8d9      	bhi.n	800b87e <__gethex+0x352>
 800b8ca:	68a3      	ldr	r3, [r4, #8]
 800b8cc:	459b      	cmp	fp, r3
 800b8ce:	db17      	blt.n	800b900 <__gethex+0x3d4>
 800b8d0:	6861      	ldr	r1, [r4, #4]
 800b8d2:	9801      	ldr	r0, [sp, #4]
 800b8d4:	3101      	adds	r1, #1
 800b8d6:	f000 f9c3 	bl	800bc60 <_Balloc>
 800b8da:	4681      	mov	r9, r0
 800b8dc:	b918      	cbnz	r0, 800b8e6 <__gethex+0x3ba>
 800b8de:	4b1a      	ldr	r3, [pc, #104]	@ (800b948 <__gethex+0x41c>)
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	2184      	movs	r1, #132	@ 0x84
 800b8e4:	e6c5      	b.n	800b672 <__gethex+0x146>
 800b8e6:	6922      	ldr	r2, [r4, #16]
 800b8e8:	3202      	adds	r2, #2
 800b8ea:	f104 010c 	add.w	r1, r4, #12
 800b8ee:	0092      	lsls	r2, r2, #2
 800b8f0:	300c      	adds	r0, #12
 800b8f2:	f7fe fee2 	bl	800a6ba <memcpy>
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	9801      	ldr	r0, [sp, #4]
 800b8fa:	f000 f9f1 	bl	800bce0 <_Bfree>
 800b8fe:	464c      	mov	r4, r9
 800b900:	6923      	ldr	r3, [r4, #16]
 800b902:	1c5a      	adds	r2, r3, #1
 800b904:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b908:	6122      	str	r2, [r4, #16]
 800b90a:	2201      	movs	r2, #1
 800b90c:	615a      	str	r2, [r3, #20]
 800b90e:	e7be      	b.n	800b88e <__gethex+0x362>
 800b910:	6922      	ldr	r2, [r4, #16]
 800b912:	455a      	cmp	r2, fp
 800b914:	dd0b      	ble.n	800b92e <__gethex+0x402>
 800b916:	2101      	movs	r1, #1
 800b918:	4620      	mov	r0, r4
 800b91a:	f7ff fd9f 	bl	800b45c <rshift>
 800b91e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b922:	3701      	adds	r7, #1
 800b924:	42bb      	cmp	r3, r7
 800b926:	f6ff aee0 	blt.w	800b6ea <__gethex+0x1be>
 800b92a:	2501      	movs	r5, #1
 800b92c:	e7c2      	b.n	800b8b4 <__gethex+0x388>
 800b92e:	f016 061f 	ands.w	r6, r6, #31
 800b932:	d0fa      	beq.n	800b92a <__gethex+0x3fe>
 800b934:	4453      	add	r3, sl
 800b936:	f1c6 0620 	rsb	r6, r6, #32
 800b93a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b93e:	f000 fa81 	bl	800be44 <__hi0bits>
 800b942:	42b0      	cmp	r0, r6
 800b944:	dbe7      	blt.n	800b916 <__gethex+0x3ea>
 800b946:	e7f0      	b.n	800b92a <__gethex+0x3fe>
 800b948:	0800d7db 	.word	0x0800d7db

0800b94c <L_shift>:
 800b94c:	f1c2 0208 	rsb	r2, r2, #8
 800b950:	0092      	lsls	r2, r2, #2
 800b952:	b570      	push	{r4, r5, r6, lr}
 800b954:	f1c2 0620 	rsb	r6, r2, #32
 800b958:	6843      	ldr	r3, [r0, #4]
 800b95a:	6804      	ldr	r4, [r0, #0]
 800b95c:	fa03 f506 	lsl.w	r5, r3, r6
 800b960:	432c      	orrs	r4, r5
 800b962:	40d3      	lsrs	r3, r2
 800b964:	6004      	str	r4, [r0, #0]
 800b966:	f840 3f04 	str.w	r3, [r0, #4]!
 800b96a:	4288      	cmp	r0, r1
 800b96c:	d3f4      	bcc.n	800b958 <L_shift+0xc>
 800b96e:	bd70      	pop	{r4, r5, r6, pc}

0800b970 <__match>:
 800b970:	b530      	push	{r4, r5, lr}
 800b972:	6803      	ldr	r3, [r0, #0]
 800b974:	3301      	adds	r3, #1
 800b976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b97a:	b914      	cbnz	r4, 800b982 <__match+0x12>
 800b97c:	6003      	str	r3, [r0, #0]
 800b97e:	2001      	movs	r0, #1
 800b980:	bd30      	pop	{r4, r5, pc}
 800b982:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b986:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b98a:	2d19      	cmp	r5, #25
 800b98c:	bf98      	it	ls
 800b98e:	3220      	addls	r2, #32
 800b990:	42a2      	cmp	r2, r4
 800b992:	d0f0      	beq.n	800b976 <__match+0x6>
 800b994:	2000      	movs	r0, #0
 800b996:	e7f3      	b.n	800b980 <__match+0x10>

0800b998 <__hexnan>:
 800b998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99c:	680b      	ldr	r3, [r1, #0]
 800b99e:	6801      	ldr	r1, [r0, #0]
 800b9a0:	115e      	asrs	r6, r3, #5
 800b9a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b9a6:	f013 031f 	ands.w	r3, r3, #31
 800b9aa:	b087      	sub	sp, #28
 800b9ac:	bf18      	it	ne
 800b9ae:	3604      	addne	r6, #4
 800b9b0:	2500      	movs	r5, #0
 800b9b2:	1f37      	subs	r7, r6, #4
 800b9b4:	4682      	mov	sl, r0
 800b9b6:	4690      	mov	r8, r2
 800b9b8:	9301      	str	r3, [sp, #4]
 800b9ba:	f846 5c04 	str.w	r5, [r6, #-4]
 800b9be:	46b9      	mov	r9, r7
 800b9c0:	463c      	mov	r4, r7
 800b9c2:	9502      	str	r5, [sp, #8]
 800b9c4:	46ab      	mov	fp, r5
 800b9c6:	784a      	ldrb	r2, [r1, #1]
 800b9c8:	1c4b      	adds	r3, r1, #1
 800b9ca:	9303      	str	r3, [sp, #12]
 800b9cc:	b342      	cbz	r2, 800ba20 <__hexnan+0x88>
 800b9ce:	4610      	mov	r0, r2
 800b9d0:	9105      	str	r1, [sp, #20]
 800b9d2:	9204      	str	r2, [sp, #16]
 800b9d4:	f7ff fd94 	bl	800b500 <__hexdig_fun>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d151      	bne.n	800ba80 <__hexnan+0xe8>
 800b9dc:	9a04      	ldr	r2, [sp, #16]
 800b9de:	9905      	ldr	r1, [sp, #20]
 800b9e0:	2a20      	cmp	r2, #32
 800b9e2:	d818      	bhi.n	800ba16 <__hexnan+0x7e>
 800b9e4:	9b02      	ldr	r3, [sp, #8]
 800b9e6:	459b      	cmp	fp, r3
 800b9e8:	dd13      	ble.n	800ba12 <__hexnan+0x7a>
 800b9ea:	454c      	cmp	r4, r9
 800b9ec:	d206      	bcs.n	800b9fc <__hexnan+0x64>
 800b9ee:	2d07      	cmp	r5, #7
 800b9f0:	dc04      	bgt.n	800b9fc <__hexnan+0x64>
 800b9f2:	462a      	mov	r2, r5
 800b9f4:	4649      	mov	r1, r9
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f7ff ffa8 	bl	800b94c <L_shift>
 800b9fc:	4544      	cmp	r4, r8
 800b9fe:	d952      	bls.n	800baa6 <__hexnan+0x10e>
 800ba00:	2300      	movs	r3, #0
 800ba02:	f1a4 0904 	sub.w	r9, r4, #4
 800ba06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba0a:	f8cd b008 	str.w	fp, [sp, #8]
 800ba0e:	464c      	mov	r4, r9
 800ba10:	461d      	mov	r5, r3
 800ba12:	9903      	ldr	r1, [sp, #12]
 800ba14:	e7d7      	b.n	800b9c6 <__hexnan+0x2e>
 800ba16:	2a29      	cmp	r2, #41	@ 0x29
 800ba18:	d157      	bne.n	800baca <__hexnan+0x132>
 800ba1a:	3102      	adds	r1, #2
 800ba1c:	f8ca 1000 	str.w	r1, [sl]
 800ba20:	f1bb 0f00 	cmp.w	fp, #0
 800ba24:	d051      	beq.n	800baca <__hexnan+0x132>
 800ba26:	454c      	cmp	r4, r9
 800ba28:	d206      	bcs.n	800ba38 <__hexnan+0xa0>
 800ba2a:	2d07      	cmp	r5, #7
 800ba2c:	dc04      	bgt.n	800ba38 <__hexnan+0xa0>
 800ba2e:	462a      	mov	r2, r5
 800ba30:	4649      	mov	r1, r9
 800ba32:	4620      	mov	r0, r4
 800ba34:	f7ff ff8a 	bl	800b94c <L_shift>
 800ba38:	4544      	cmp	r4, r8
 800ba3a:	d936      	bls.n	800baaa <__hexnan+0x112>
 800ba3c:	f1a8 0204 	sub.w	r2, r8, #4
 800ba40:	4623      	mov	r3, r4
 800ba42:	f853 1b04 	ldr.w	r1, [r3], #4
 800ba46:	f842 1f04 	str.w	r1, [r2, #4]!
 800ba4a:	429f      	cmp	r7, r3
 800ba4c:	d2f9      	bcs.n	800ba42 <__hexnan+0xaa>
 800ba4e:	1b3b      	subs	r3, r7, r4
 800ba50:	f023 0303 	bic.w	r3, r3, #3
 800ba54:	3304      	adds	r3, #4
 800ba56:	3401      	adds	r4, #1
 800ba58:	3e03      	subs	r6, #3
 800ba5a:	42b4      	cmp	r4, r6
 800ba5c:	bf88      	it	hi
 800ba5e:	2304      	movhi	r3, #4
 800ba60:	4443      	add	r3, r8
 800ba62:	2200      	movs	r2, #0
 800ba64:	f843 2b04 	str.w	r2, [r3], #4
 800ba68:	429f      	cmp	r7, r3
 800ba6a:	d2fb      	bcs.n	800ba64 <__hexnan+0xcc>
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	b91b      	cbnz	r3, 800ba78 <__hexnan+0xe0>
 800ba70:	4547      	cmp	r7, r8
 800ba72:	d128      	bne.n	800bac6 <__hexnan+0x12e>
 800ba74:	2301      	movs	r3, #1
 800ba76:	603b      	str	r3, [r7, #0]
 800ba78:	2005      	movs	r0, #5
 800ba7a:	b007      	add	sp, #28
 800ba7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba80:	3501      	adds	r5, #1
 800ba82:	2d08      	cmp	r5, #8
 800ba84:	f10b 0b01 	add.w	fp, fp, #1
 800ba88:	dd06      	ble.n	800ba98 <__hexnan+0x100>
 800ba8a:	4544      	cmp	r4, r8
 800ba8c:	d9c1      	bls.n	800ba12 <__hexnan+0x7a>
 800ba8e:	2300      	movs	r3, #0
 800ba90:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba94:	2501      	movs	r5, #1
 800ba96:	3c04      	subs	r4, #4
 800ba98:	6822      	ldr	r2, [r4, #0]
 800ba9a:	f000 000f 	and.w	r0, r0, #15
 800ba9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800baa2:	6020      	str	r0, [r4, #0]
 800baa4:	e7b5      	b.n	800ba12 <__hexnan+0x7a>
 800baa6:	2508      	movs	r5, #8
 800baa8:	e7b3      	b.n	800ba12 <__hexnan+0x7a>
 800baaa:	9b01      	ldr	r3, [sp, #4]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d0dd      	beq.n	800ba6c <__hexnan+0xd4>
 800bab0:	f1c3 0320 	rsb	r3, r3, #32
 800bab4:	f04f 32ff 	mov.w	r2, #4294967295
 800bab8:	40da      	lsrs	r2, r3
 800baba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800babe:	4013      	ands	r3, r2
 800bac0:	f846 3c04 	str.w	r3, [r6, #-4]
 800bac4:	e7d2      	b.n	800ba6c <__hexnan+0xd4>
 800bac6:	3f04      	subs	r7, #4
 800bac8:	e7d0      	b.n	800ba6c <__hexnan+0xd4>
 800baca:	2004      	movs	r0, #4
 800bacc:	e7d5      	b.n	800ba7a <__hexnan+0xe2>
	...

0800bad0 <malloc>:
 800bad0:	4b02      	ldr	r3, [pc, #8]	@ (800badc <malloc+0xc>)
 800bad2:	4601      	mov	r1, r0
 800bad4:	6818      	ldr	r0, [r3, #0]
 800bad6:	f000 b825 	b.w	800bb24 <_malloc_r>
 800bada:	bf00      	nop
 800badc:	20000198 	.word	0x20000198

0800bae0 <sbrk_aligned>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	4e0f      	ldr	r6, [pc, #60]	@ (800bb20 <sbrk_aligned+0x40>)
 800bae4:	460c      	mov	r4, r1
 800bae6:	6831      	ldr	r1, [r6, #0]
 800bae8:	4605      	mov	r5, r0
 800baea:	b911      	cbnz	r1, 800baf2 <sbrk_aligned+0x12>
 800baec:	f001 f822 	bl	800cb34 <_sbrk_r>
 800baf0:	6030      	str	r0, [r6, #0]
 800baf2:	4621      	mov	r1, r4
 800baf4:	4628      	mov	r0, r5
 800baf6:	f001 f81d 	bl	800cb34 <_sbrk_r>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	d103      	bne.n	800bb06 <sbrk_aligned+0x26>
 800bafe:	f04f 34ff 	mov.w	r4, #4294967295
 800bb02:	4620      	mov	r0, r4
 800bb04:	bd70      	pop	{r4, r5, r6, pc}
 800bb06:	1cc4      	adds	r4, r0, #3
 800bb08:	f024 0403 	bic.w	r4, r4, #3
 800bb0c:	42a0      	cmp	r0, r4
 800bb0e:	d0f8      	beq.n	800bb02 <sbrk_aligned+0x22>
 800bb10:	1a21      	subs	r1, r4, r0
 800bb12:	4628      	mov	r0, r5
 800bb14:	f001 f80e 	bl	800cb34 <_sbrk_r>
 800bb18:	3001      	adds	r0, #1
 800bb1a:	d1f2      	bne.n	800bb02 <sbrk_aligned+0x22>
 800bb1c:	e7ef      	b.n	800bafe <sbrk_aligned+0x1e>
 800bb1e:	bf00      	nop
 800bb20:	200070e8 	.word	0x200070e8

0800bb24 <_malloc_r>:
 800bb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb28:	1ccd      	adds	r5, r1, #3
 800bb2a:	f025 0503 	bic.w	r5, r5, #3
 800bb2e:	3508      	adds	r5, #8
 800bb30:	2d0c      	cmp	r5, #12
 800bb32:	bf38      	it	cc
 800bb34:	250c      	movcc	r5, #12
 800bb36:	2d00      	cmp	r5, #0
 800bb38:	4606      	mov	r6, r0
 800bb3a:	db01      	blt.n	800bb40 <_malloc_r+0x1c>
 800bb3c:	42a9      	cmp	r1, r5
 800bb3e:	d904      	bls.n	800bb4a <_malloc_r+0x26>
 800bb40:	230c      	movs	r3, #12
 800bb42:	6033      	str	r3, [r6, #0]
 800bb44:	2000      	movs	r0, #0
 800bb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc20 <_malloc_r+0xfc>
 800bb4e:	f000 f87b 	bl	800bc48 <__malloc_lock>
 800bb52:	f8d8 3000 	ldr.w	r3, [r8]
 800bb56:	461c      	mov	r4, r3
 800bb58:	bb44      	cbnz	r4, 800bbac <_malloc_r+0x88>
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	f7ff ffbf 	bl	800bae0 <sbrk_aligned>
 800bb62:	1c43      	adds	r3, r0, #1
 800bb64:	4604      	mov	r4, r0
 800bb66:	d158      	bne.n	800bc1a <_malloc_r+0xf6>
 800bb68:	f8d8 4000 	ldr.w	r4, [r8]
 800bb6c:	4627      	mov	r7, r4
 800bb6e:	2f00      	cmp	r7, #0
 800bb70:	d143      	bne.n	800bbfa <_malloc_r+0xd6>
 800bb72:	2c00      	cmp	r4, #0
 800bb74:	d04b      	beq.n	800bc0e <_malloc_r+0xea>
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	4639      	mov	r1, r7
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	eb04 0903 	add.w	r9, r4, r3
 800bb80:	f000 ffd8 	bl	800cb34 <_sbrk_r>
 800bb84:	4581      	cmp	r9, r0
 800bb86:	d142      	bne.n	800bc0e <_malloc_r+0xea>
 800bb88:	6821      	ldr	r1, [r4, #0]
 800bb8a:	1a6d      	subs	r5, r5, r1
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	4630      	mov	r0, r6
 800bb90:	f7ff ffa6 	bl	800bae0 <sbrk_aligned>
 800bb94:	3001      	adds	r0, #1
 800bb96:	d03a      	beq.n	800bc0e <_malloc_r+0xea>
 800bb98:	6823      	ldr	r3, [r4, #0]
 800bb9a:	442b      	add	r3, r5
 800bb9c:	6023      	str	r3, [r4, #0]
 800bb9e:	f8d8 3000 	ldr.w	r3, [r8]
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	bb62      	cbnz	r2, 800bc00 <_malloc_r+0xdc>
 800bba6:	f8c8 7000 	str.w	r7, [r8]
 800bbaa:	e00f      	b.n	800bbcc <_malloc_r+0xa8>
 800bbac:	6822      	ldr	r2, [r4, #0]
 800bbae:	1b52      	subs	r2, r2, r5
 800bbb0:	d420      	bmi.n	800bbf4 <_malloc_r+0xd0>
 800bbb2:	2a0b      	cmp	r2, #11
 800bbb4:	d917      	bls.n	800bbe6 <_malloc_r+0xc2>
 800bbb6:	1961      	adds	r1, r4, r5
 800bbb8:	42a3      	cmp	r3, r4
 800bbba:	6025      	str	r5, [r4, #0]
 800bbbc:	bf18      	it	ne
 800bbbe:	6059      	strne	r1, [r3, #4]
 800bbc0:	6863      	ldr	r3, [r4, #4]
 800bbc2:	bf08      	it	eq
 800bbc4:	f8c8 1000 	streq.w	r1, [r8]
 800bbc8:	5162      	str	r2, [r4, r5]
 800bbca:	604b      	str	r3, [r1, #4]
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f000 f841 	bl	800bc54 <__malloc_unlock>
 800bbd2:	f104 000b 	add.w	r0, r4, #11
 800bbd6:	1d23      	adds	r3, r4, #4
 800bbd8:	f020 0007 	bic.w	r0, r0, #7
 800bbdc:	1ac2      	subs	r2, r0, r3
 800bbde:	bf1c      	itt	ne
 800bbe0:	1a1b      	subne	r3, r3, r0
 800bbe2:	50a3      	strne	r3, [r4, r2]
 800bbe4:	e7af      	b.n	800bb46 <_malloc_r+0x22>
 800bbe6:	6862      	ldr	r2, [r4, #4]
 800bbe8:	42a3      	cmp	r3, r4
 800bbea:	bf0c      	ite	eq
 800bbec:	f8c8 2000 	streq.w	r2, [r8]
 800bbf0:	605a      	strne	r2, [r3, #4]
 800bbf2:	e7eb      	b.n	800bbcc <_malloc_r+0xa8>
 800bbf4:	4623      	mov	r3, r4
 800bbf6:	6864      	ldr	r4, [r4, #4]
 800bbf8:	e7ae      	b.n	800bb58 <_malloc_r+0x34>
 800bbfa:	463c      	mov	r4, r7
 800bbfc:	687f      	ldr	r7, [r7, #4]
 800bbfe:	e7b6      	b.n	800bb6e <_malloc_r+0x4a>
 800bc00:	461a      	mov	r2, r3
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	d1fb      	bne.n	800bc00 <_malloc_r+0xdc>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	6053      	str	r3, [r2, #4]
 800bc0c:	e7de      	b.n	800bbcc <_malloc_r+0xa8>
 800bc0e:	230c      	movs	r3, #12
 800bc10:	6033      	str	r3, [r6, #0]
 800bc12:	4630      	mov	r0, r6
 800bc14:	f000 f81e 	bl	800bc54 <__malloc_unlock>
 800bc18:	e794      	b.n	800bb44 <_malloc_r+0x20>
 800bc1a:	6005      	str	r5, [r0, #0]
 800bc1c:	e7d6      	b.n	800bbcc <_malloc_r+0xa8>
 800bc1e:	bf00      	nop
 800bc20:	200070ec 	.word	0x200070ec

0800bc24 <__ascii_mbtowc>:
 800bc24:	b082      	sub	sp, #8
 800bc26:	b901      	cbnz	r1, 800bc2a <__ascii_mbtowc+0x6>
 800bc28:	a901      	add	r1, sp, #4
 800bc2a:	b142      	cbz	r2, 800bc3e <__ascii_mbtowc+0x1a>
 800bc2c:	b14b      	cbz	r3, 800bc42 <__ascii_mbtowc+0x1e>
 800bc2e:	7813      	ldrb	r3, [r2, #0]
 800bc30:	600b      	str	r3, [r1, #0]
 800bc32:	7812      	ldrb	r2, [r2, #0]
 800bc34:	1e10      	subs	r0, r2, #0
 800bc36:	bf18      	it	ne
 800bc38:	2001      	movne	r0, #1
 800bc3a:	b002      	add	sp, #8
 800bc3c:	4770      	bx	lr
 800bc3e:	4610      	mov	r0, r2
 800bc40:	e7fb      	b.n	800bc3a <__ascii_mbtowc+0x16>
 800bc42:	f06f 0001 	mvn.w	r0, #1
 800bc46:	e7f8      	b.n	800bc3a <__ascii_mbtowc+0x16>

0800bc48 <__malloc_lock>:
 800bc48:	4801      	ldr	r0, [pc, #4]	@ (800bc50 <__malloc_lock+0x8>)
 800bc4a:	f7fe bd34 	b.w	800a6b6 <__retarget_lock_acquire_recursive>
 800bc4e:	bf00      	nop
 800bc50:	200070e4 	.word	0x200070e4

0800bc54 <__malloc_unlock>:
 800bc54:	4801      	ldr	r0, [pc, #4]	@ (800bc5c <__malloc_unlock+0x8>)
 800bc56:	f7fe bd2f 	b.w	800a6b8 <__retarget_lock_release_recursive>
 800bc5a:	bf00      	nop
 800bc5c:	200070e4 	.word	0x200070e4

0800bc60 <_Balloc>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	69c6      	ldr	r6, [r0, #28]
 800bc64:	4604      	mov	r4, r0
 800bc66:	460d      	mov	r5, r1
 800bc68:	b976      	cbnz	r6, 800bc88 <_Balloc+0x28>
 800bc6a:	2010      	movs	r0, #16
 800bc6c:	f7ff ff30 	bl	800bad0 <malloc>
 800bc70:	4602      	mov	r2, r0
 800bc72:	61e0      	str	r0, [r4, #28]
 800bc74:	b920      	cbnz	r0, 800bc80 <_Balloc+0x20>
 800bc76:	4b18      	ldr	r3, [pc, #96]	@ (800bcd8 <_Balloc+0x78>)
 800bc78:	4818      	ldr	r0, [pc, #96]	@ (800bcdc <_Balloc+0x7c>)
 800bc7a:	216b      	movs	r1, #107	@ 0x6b
 800bc7c:	f7fe fd3a 	bl	800a6f4 <__assert_func>
 800bc80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc84:	6006      	str	r6, [r0, #0]
 800bc86:	60c6      	str	r6, [r0, #12]
 800bc88:	69e6      	ldr	r6, [r4, #28]
 800bc8a:	68f3      	ldr	r3, [r6, #12]
 800bc8c:	b183      	cbz	r3, 800bcb0 <_Balloc+0x50>
 800bc8e:	69e3      	ldr	r3, [r4, #28]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc96:	b9b8      	cbnz	r0, 800bcc8 <_Balloc+0x68>
 800bc98:	2101      	movs	r1, #1
 800bc9a:	fa01 f605 	lsl.w	r6, r1, r5
 800bc9e:	1d72      	adds	r2, r6, #5
 800bca0:	0092      	lsls	r2, r2, #2
 800bca2:	4620      	mov	r0, r4
 800bca4:	f000 ff5d 	bl	800cb62 <_calloc_r>
 800bca8:	b160      	cbz	r0, 800bcc4 <_Balloc+0x64>
 800bcaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bcae:	e00e      	b.n	800bcce <_Balloc+0x6e>
 800bcb0:	2221      	movs	r2, #33	@ 0x21
 800bcb2:	2104      	movs	r1, #4
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	f000 ff54 	bl	800cb62 <_calloc_r>
 800bcba:	69e3      	ldr	r3, [r4, #28]
 800bcbc:	60f0      	str	r0, [r6, #12]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d1e4      	bne.n	800bc8e <_Balloc+0x2e>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	6802      	ldr	r2, [r0, #0]
 800bcca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcd4:	e7f7      	b.n	800bcc6 <_Balloc+0x66>
 800bcd6:	bf00      	nop
 800bcd8:	0800d6c1 	.word	0x0800d6c1
 800bcdc:	0800d84c 	.word	0x0800d84c

0800bce0 <_Bfree>:
 800bce0:	b570      	push	{r4, r5, r6, lr}
 800bce2:	69c6      	ldr	r6, [r0, #28]
 800bce4:	4605      	mov	r5, r0
 800bce6:	460c      	mov	r4, r1
 800bce8:	b976      	cbnz	r6, 800bd08 <_Bfree+0x28>
 800bcea:	2010      	movs	r0, #16
 800bcec:	f7ff fef0 	bl	800bad0 <malloc>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	61e8      	str	r0, [r5, #28]
 800bcf4:	b920      	cbnz	r0, 800bd00 <_Bfree+0x20>
 800bcf6:	4b09      	ldr	r3, [pc, #36]	@ (800bd1c <_Bfree+0x3c>)
 800bcf8:	4809      	ldr	r0, [pc, #36]	@ (800bd20 <_Bfree+0x40>)
 800bcfa:	218f      	movs	r1, #143	@ 0x8f
 800bcfc:	f7fe fcfa 	bl	800a6f4 <__assert_func>
 800bd00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd04:	6006      	str	r6, [r0, #0]
 800bd06:	60c6      	str	r6, [r0, #12]
 800bd08:	b13c      	cbz	r4, 800bd1a <_Bfree+0x3a>
 800bd0a:	69eb      	ldr	r3, [r5, #28]
 800bd0c:	6862      	ldr	r2, [r4, #4]
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd14:	6021      	str	r1, [r4, #0]
 800bd16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd1a:	bd70      	pop	{r4, r5, r6, pc}
 800bd1c:	0800d6c1 	.word	0x0800d6c1
 800bd20:	0800d84c 	.word	0x0800d84c

0800bd24 <__multadd>:
 800bd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd28:	690d      	ldr	r5, [r1, #16]
 800bd2a:	4607      	mov	r7, r0
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	461e      	mov	r6, r3
 800bd30:	f101 0c14 	add.w	ip, r1, #20
 800bd34:	2000      	movs	r0, #0
 800bd36:	f8dc 3000 	ldr.w	r3, [ip]
 800bd3a:	b299      	uxth	r1, r3
 800bd3c:	fb02 6101 	mla	r1, r2, r1, r6
 800bd40:	0c1e      	lsrs	r6, r3, #16
 800bd42:	0c0b      	lsrs	r3, r1, #16
 800bd44:	fb02 3306 	mla	r3, r2, r6, r3
 800bd48:	b289      	uxth	r1, r1
 800bd4a:	3001      	adds	r0, #1
 800bd4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd50:	4285      	cmp	r5, r0
 800bd52:	f84c 1b04 	str.w	r1, [ip], #4
 800bd56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd5a:	dcec      	bgt.n	800bd36 <__multadd+0x12>
 800bd5c:	b30e      	cbz	r6, 800bda2 <__multadd+0x7e>
 800bd5e:	68a3      	ldr	r3, [r4, #8]
 800bd60:	42ab      	cmp	r3, r5
 800bd62:	dc19      	bgt.n	800bd98 <__multadd+0x74>
 800bd64:	6861      	ldr	r1, [r4, #4]
 800bd66:	4638      	mov	r0, r7
 800bd68:	3101      	adds	r1, #1
 800bd6a:	f7ff ff79 	bl	800bc60 <_Balloc>
 800bd6e:	4680      	mov	r8, r0
 800bd70:	b928      	cbnz	r0, 800bd7e <__multadd+0x5a>
 800bd72:	4602      	mov	r2, r0
 800bd74:	4b0c      	ldr	r3, [pc, #48]	@ (800bda8 <__multadd+0x84>)
 800bd76:	480d      	ldr	r0, [pc, #52]	@ (800bdac <__multadd+0x88>)
 800bd78:	21ba      	movs	r1, #186	@ 0xba
 800bd7a:	f7fe fcbb 	bl	800a6f4 <__assert_func>
 800bd7e:	6922      	ldr	r2, [r4, #16]
 800bd80:	3202      	adds	r2, #2
 800bd82:	f104 010c 	add.w	r1, r4, #12
 800bd86:	0092      	lsls	r2, r2, #2
 800bd88:	300c      	adds	r0, #12
 800bd8a:	f7fe fc96 	bl	800a6ba <memcpy>
 800bd8e:	4621      	mov	r1, r4
 800bd90:	4638      	mov	r0, r7
 800bd92:	f7ff ffa5 	bl	800bce0 <_Bfree>
 800bd96:	4644      	mov	r4, r8
 800bd98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bd9c:	3501      	adds	r5, #1
 800bd9e:	615e      	str	r6, [r3, #20]
 800bda0:	6125      	str	r5, [r4, #16]
 800bda2:	4620      	mov	r0, r4
 800bda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda8:	0800d7db 	.word	0x0800d7db
 800bdac:	0800d84c 	.word	0x0800d84c

0800bdb0 <__s2b>:
 800bdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdb4:	460c      	mov	r4, r1
 800bdb6:	4615      	mov	r5, r2
 800bdb8:	461f      	mov	r7, r3
 800bdba:	2209      	movs	r2, #9
 800bdbc:	3308      	adds	r3, #8
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	db09      	blt.n	800bde0 <__s2b+0x30>
 800bdcc:	4630      	mov	r0, r6
 800bdce:	f7ff ff47 	bl	800bc60 <_Balloc>
 800bdd2:	b940      	cbnz	r0, 800bde6 <__s2b+0x36>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	4b19      	ldr	r3, [pc, #100]	@ (800be3c <__s2b+0x8c>)
 800bdd8:	4819      	ldr	r0, [pc, #100]	@ (800be40 <__s2b+0x90>)
 800bdda:	21d3      	movs	r1, #211	@ 0xd3
 800bddc:	f7fe fc8a 	bl	800a6f4 <__assert_func>
 800bde0:	0052      	lsls	r2, r2, #1
 800bde2:	3101      	adds	r1, #1
 800bde4:	e7f0      	b.n	800bdc8 <__s2b+0x18>
 800bde6:	9b08      	ldr	r3, [sp, #32]
 800bde8:	6143      	str	r3, [r0, #20]
 800bdea:	2d09      	cmp	r5, #9
 800bdec:	f04f 0301 	mov.w	r3, #1
 800bdf0:	6103      	str	r3, [r0, #16]
 800bdf2:	dd16      	ble.n	800be22 <__s2b+0x72>
 800bdf4:	f104 0909 	add.w	r9, r4, #9
 800bdf8:	46c8      	mov	r8, r9
 800bdfa:	442c      	add	r4, r5
 800bdfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800be00:	4601      	mov	r1, r0
 800be02:	3b30      	subs	r3, #48	@ 0x30
 800be04:	220a      	movs	r2, #10
 800be06:	4630      	mov	r0, r6
 800be08:	f7ff ff8c 	bl	800bd24 <__multadd>
 800be0c:	45a0      	cmp	r8, r4
 800be0e:	d1f5      	bne.n	800bdfc <__s2b+0x4c>
 800be10:	f1a5 0408 	sub.w	r4, r5, #8
 800be14:	444c      	add	r4, r9
 800be16:	1b2d      	subs	r5, r5, r4
 800be18:	1963      	adds	r3, r4, r5
 800be1a:	42bb      	cmp	r3, r7
 800be1c:	db04      	blt.n	800be28 <__s2b+0x78>
 800be1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be22:	340a      	adds	r4, #10
 800be24:	2509      	movs	r5, #9
 800be26:	e7f6      	b.n	800be16 <__s2b+0x66>
 800be28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be2c:	4601      	mov	r1, r0
 800be2e:	3b30      	subs	r3, #48	@ 0x30
 800be30:	220a      	movs	r2, #10
 800be32:	4630      	mov	r0, r6
 800be34:	f7ff ff76 	bl	800bd24 <__multadd>
 800be38:	e7ee      	b.n	800be18 <__s2b+0x68>
 800be3a:	bf00      	nop
 800be3c:	0800d7db 	.word	0x0800d7db
 800be40:	0800d84c 	.word	0x0800d84c

0800be44 <__hi0bits>:
 800be44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800be48:	4603      	mov	r3, r0
 800be4a:	bf36      	itet	cc
 800be4c:	0403      	lslcc	r3, r0, #16
 800be4e:	2000      	movcs	r0, #0
 800be50:	2010      	movcc	r0, #16
 800be52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be56:	bf3c      	itt	cc
 800be58:	021b      	lslcc	r3, r3, #8
 800be5a:	3008      	addcc	r0, #8
 800be5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be60:	bf3c      	itt	cc
 800be62:	011b      	lslcc	r3, r3, #4
 800be64:	3004      	addcc	r0, #4
 800be66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be6a:	bf3c      	itt	cc
 800be6c:	009b      	lslcc	r3, r3, #2
 800be6e:	3002      	addcc	r0, #2
 800be70:	2b00      	cmp	r3, #0
 800be72:	db05      	blt.n	800be80 <__hi0bits+0x3c>
 800be74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800be78:	f100 0001 	add.w	r0, r0, #1
 800be7c:	bf08      	it	eq
 800be7e:	2020      	moveq	r0, #32
 800be80:	4770      	bx	lr

0800be82 <__lo0bits>:
 800be82:	6803      	ldr	r3, [r0, #0]
 800be84:	4602      	mov	r2, r0
 800be86:	f013 0007 	ands.w	r0, r3, #7
 800be8a:	d00b      	beq.n	800bea4 <__lo0bits+0x22>
 800be8c:	07d9      	lsls	r1, r3, #31
 800be8e:	d421      	bmi.n	800bed4 <__lo0bits+0x52>
 800be90:	0798      	lsls	r0, r3, #30
 800be92:	bf49      	itett	mi
 800be94:	085b      	lsrmi	r3, r3, #1
 800be96:	089b      	lsrpl	r3, r3, #2
 800be98:	2001      	movmi	r0, #1
 800be9a:	6013      	strmi	r3, [r2, #0]
 800be9c:	bf5c      	itt	pl
 800be9e:	6013      	strpl	r3, [r2, #0]
 800bea0:	2002      	movpl	r0, #2
 800bea2:	4770      	bx	lr
 800bea4:	b299      	uxth	r1, r3
 800bea6:	b909      	cbnz	r1, 800beac <__lo0bits+0x2a>
 800bea8:	0c1b      	lsrs	r3, r3, #16
 800beaa:	2010      	movs	r0, #16
 800beac:	b2d9      	uxtb	r1, r3
 800beae:	b909      	cbnz	r1, 800beb4 <__lo0bits+0x32>
 800beb0:	3008      	adds	r0, #8
 800beb2:	0a1b      	lsrs	r3, r3, #8
 800beb4:	0719      	lsls	r1, r3, #28
 800beb6:	bf04      	itt	eq
 800beb8:	091b      	lsreq	r3, r3, #4
 800beba:	3004      	addeq	r0, #4
 800bebc:	0799      	lsls	r1, r3, #30
 800bebe:	bf04      	itt	eq
 800bec0:	089b      	lsreq	r3, r3, #2
 800bec2:	3002      	addeq	r0, #2
 800bec4:	07d9      	lsls	r1, r3, #31
 800bec6:	d403      	bmi.n	800bed0 <__lo0bits+0x4e>
 800bec8:	085b      	lsrs	r3, r3, #1
 800beca:	f100 0001 	add.w	r0, r0, #1
 800bece:	d003      	beq.n	800bed8 <__lo0bits+0x56>
 800bed0:	6013      	str	r3, [r2, #0]
 800bed2:	4770      	bx	lr
 800bed4:	2000      	movs	r0, #0
 800bed6:	4770      	bx	lr
 800bed8:	2020      	movs	r0, #32
 800beda:	4770      	bx	lr

0800bedc <__i2b>:
 800bedc:	b510      	push	{r4, lr}
 800bede:	460c      	mov	r4, r1
 800bee0:	2101      	movs	r1, #1
 800bee2:	f7ff febd 	bl	800bc60 <_Balloc>
 800bee6:	4602      	mov	r2, r0
 800bee8:	b928      	cbnz	r0, 800bef6 <__i2b+0x1a>
 800beea:	4b05      	ldr	r3, [pc, #20]	@ (800bf00 <__i2b+0x24>)
 800beec:	4805      	ldr	r0, [pc, #20]	@ (800bf04 <__i2b+0x28>)
 800beee:	f240 1145 	movw	r1, #325	@ 0x145
 800bef2:	f7fe fbff 	bl	800a6f4 <__assert_func>
 800bef6:	2301      	movs	r3, #1
 800bef8:	6144      	str	r4, [r0, #20]
 800befa:	6103      	str	r3, [r0, #16]
 800befc:	bd10      	pop	{r4, pc}
 800befe:	bf00      	nop
 800bf00:	0800d7db 	.word	0x0800d7db
 800bf04:	0800d84c 	.word	0x0800d84c

0800bf08 <__multiply>:
 800bf08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf0c:	4614      	mov	r4, r2
 800bf0e:	690a      	ldr	r2, [r1, #16]
 800bf10:	6923      	ldr	r3, [r4, #16]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	bfa8      	it	ge
 800bf16:	4623      	movge	r3, r4
 800bf18:	460f      	mov	r7, r1
 800bf1a:	bfa4      	itt	ge
 800bf1c:	460c      	movge	r4, r1
 800bf1e:	461f      	movge	r7, r3
 800bf20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bf24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bf28:	68a3      	ldr	r3, [r4, #8]
 800bf2a:	6861      	ldr	r1, [r4, #4]
 800bf2c:	eb0a 0609 	add.w	r6, sl, r9
 800bf30:	42b3      	cmp	r3, r6
 800bf32:	b085      	sub	sp, #20
 800bf34:	bfb8      	it	lt
 800bf36:	3101      	addlt	r1, #1
 800bf38:	f7ff fe92 	bl	800bc60 <_Balloc>
 800bf3c:	b930      	cbnz	r0, 800bf4c <__multiply+0x44>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	4b44      	ldr	r3, [pc, #272]	@ (800c054 <__multiply+0x14c>)
 800bf42:	4845      	ldr	r0, [pc, #276]	@ (800c058 <__multiply+0x150>)
 800bf44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bf48:	f7fe fbd4 	bl	800a6f4 <__assert_func>
 800bf4c:	f100 0514 	add.w	r5, r0, #20
 800bf50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf54:	462b      	mov	r3, r5
 800bf56:	2200      	movs	r2, #0
 800bf58:	4543      	cmp	r3, r8
 800bf5a:	d321      	bcc.n	800bfa0 <__multiply+0x98>
 800bf5c:	f107 0114 	add.w	r1, r7, #20
 800bf60:	f104 0214 	add.w	r2, r4, #20
 800bf64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bf68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bf6c:	9302      	str	r3, [sp, #8]
 800bf6e:	1b13      	subs	r3, r2, r4
 800bf70:	3b15      	subs	r3, #21
 800bf72:	f023 0303 	bic.w	r3, r3, #3
 800bf76:	3304      	adds	r3, #4
 800bf78:	f104 0715 	add.w	r7, r4, #21
 800bf7c:	42ba      	cmp	r2, r7
 800bf7e:	bf38      	it	cc
 800bf80:	2304      	movcc	r3, #4
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	9b02      	ldr	r3, [sp, #8]
 800bf86:	9103      	str	r1, [sp, #12]
 800bf88:	428b      	cmp	r3, r1
 800bf8a:	d80c      	bhi.n	800bfa6 <__multiply+0x9e>
 800bf8c:	2e00      	cmp	r6, #0
 800bf8e:	dd03      	ble.n	800bf98 <__multiply+0x90>
 800bf90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d05b      	beq.n	800c050 <__multiply+0x148>
 800bf98:	6106      	str	r6, [r0, #16]
 800bf9a:	b005      	add	sp, #20
 800bf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa0:	f843 2b04 	str.w	r2, [r3], #4
 800bfa4:	e7d8      	b.n	800bf58 <__multiply+0x50>
 800bfa6:	f8b1 a000 	ldrh.w	sl, [r1]
 800bfaa:	f1ba 0f00 	cmp.w	sl, #0
 800bfae:	d024      	beq.n	800bffa <__multiply+0xf2>
 800bfb0:	f104 0e14 	add.w	lr, r4, #20
 800bfb4:	46a9      	mov	r9, r5
 800bfb6:	f04f 0c00 	mov.w	ip, #0
 800bfba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bfbe:	f8d9 3000 	ldr.w	r3, [r9]
 800bfc2:	fa1f fb87 	uxth.w	fp, r7
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	fb0a 330b 	mla	r3, sl, fp, r3
 800bfcc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bfd0:	f8d9 7000 	ldr.w	r7, [r9]
 800bfd4:	4463      	add	r3, ip
 800bfd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bfda:	fb0a c70b 	mla	r7, sl, fp, ip
 800bfde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bfe8:	4572      	cmp	r2, lr
 800bfea:	f849 3b04 	str.w	r3, [r9], #4
 800bfee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bff2:	d8e2      	bhi.n	800bfba <__multiply+0xb2>
 800bff4:	9b01      	ldr	r3, [sp, #4]
 800bff6:	f845 c003 	str.w	ip, [r5, r3]
 800bffa:	9b03      	ldr	r3, [sp, #12]
 800bffc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c000:	3104      	adds	r1, #4
 800c002:	f1b9 0f00 	cmp.w	r9, #0
 800c006:	d021      	beq.n	800c04c <__multiply+0x144>
 800c008:	682b      	ldr	r3, [r5, #0]
 800c00a:	f104 0c14 	add.w	ip, r4, #20
 800c00e:	46ae      	mov	lr, r5
 800c010:	f04f 0a00 	mov.w	sl, #0
 800c014:	f8bc b000 	ldrh.w	fp, [ip]
 800c018:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c01c:	fb09 770b 	mla	r7, r9, fp, r7
 800c020:	4457      	add	r7, sl
 800c022:	b29b      	uxth	r3, r3
 800c024:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c028:	f84e 3b04 	str.w	r3, [lr], #4
 800c02c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c030:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c034:	f8be 3000 	ldrh.w	r3, [lr]
 800c038:	fb09 330a 	mla	r3, r9, sl, r3
 800c03c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c040:	4562      	cmp	r2, ip
 800c042:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c046:	d8e5      	bhi.n	800c014 <__multiply+0x10c>
 800c048:	9f01      	ldr	r7, [sp, #4]
 800c04a:	51eb      	str	r3, [r5, r7]
 800c04c:	3504      	adds	r5, #4
 800c04e:	e799      	b.n	800bf84 <__multiply+0x7c>
 800c050:	3e01      	subs	r6, #1
 800c052:	e79b      	b.n	800bf8c <__multiply+0x84>
 800c054:	0800d7db 	.word	0x0800d7db
 800c058:	0800d84c 	.word	0x0800d84c

0800c05c <__pow5mult>:
 800c05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c060:	4615      	mov	r5, r2
 800c062:	f012 0203 	ands.w	r2, r2, #3
 800c066:	4607      	mov	r7, r0
 800c068:	460e      	mov	r6, r1
 800c06a:	d007      	beq.n	800c07c <__pow5mult+0x20>
 800c06c:	4c25      	ldr	r4, [pc, #148]	@ (800c104 <__pow5mult+0xa8>)
 800c06e:	3a01      	subs	r2, #1
 800c070:	2300      	movs	r3, #0
 800c072:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c076:	f7ff fe55 	bl	800bd24 <__multadd>
 800c07a:	4606      	mov	r6, r0
 800c07c:	10ad      	asrs	r5, r5, #2
 800c07e:	d03d      	beq.n	800c0fc <__pow5mult+0xa0>
 800c080:	69fc      	ldr	r4, [r7, #28]
 800c082:	b97c      	cbnz	r4, 800c0a4 <__pow5mult+0x48>
 800c084:	2010      	movs	r0, #16
 800c086:	f7ff fd23 	bl	800bad0 <malloc>
 800c08a:	4602      	mov	r2, r0
 800c08c:	61f8      	str	r0, [r7, #28]
 800c08e:	b928      	cbnz	r0, 800c09c <__pow5mult+0x40>
 800c090:	4b1d      	ldr	r3, [pc, #116]	@ (800c108 <__pow5mult+0xac>)
 800c092:	481e      	ldr	r0, [pc, #120]	@ (800c10c <__pow5mult+0xb0>)
 800c094:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c098:	f7fe fb2c 	bl	800a6f4 <__assert_func>
 800c09c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0a0:	6004      	str	r4, [r0, #0]
 800c0a2:	60c4      	str	r4, [r0, #12]
 800c0a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c0a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0ac:	b94c      	cbnz	r4, 800c0c2 <__pow5mult+0x66>
 800c0ae:	f240 2171 	movw	r1, #625	@ 0x271
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	f7ff ff12 	bl	800bedc <__i2b>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0be:	4604      	mov	r4, r0
 800c0c0:	6003      	str	r3, [r0, #0]
 800c0c2:	f04f 0900 	mov.w	r9, #0
 800c0c6:	07eb      	lsls	r3, r5, #31
 800c0c8:	d50a      	bpl.n	800c0e0 <__pow5mult+0x84>
 800c0ca:	4631      	mov	r1, r6
 800c0cc:	4622      	mov	r2, r4
 800c0ce:	4638      	mov	r0, r7
 800c0d0:	f7ff ff1a 	bl	800bf08 <__multiply>
 800c0d4:	4631      	mov	r1, r6
 800c0d6:	4680      	mov	r8, r0
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f7ff fe01 	bl	800bce0 <_Bfree>
 800c0de:	4646      	mov	r6, r8
 800c0e0:	106d      	asrs	r5, r5, #1
 800c0e2:	d00b      	beq.n	800c0fc <__pow5mult+0xa0>
 800c0e4:	6820      	ldr	r0, [r4, #0]
 800c0e6:	b938      	cbnz	r0, 800c0f8 <__pow5mult+0x9c>
 800c0e8:	4622      	mov	r2, r4
 800c0ea:	4621      	mov	r1, r4
 800c0ec:	4638      	mov	r0, r7
 800c0ee:	f7ff ff0b 	bl	800bf08 <__multiply>
 800c0f2:	6020      	str	r0, [r4, #0]
 800c0f4:	f8c0 9000 	str.w	r9, [r0]
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	e7e4      	b.n	800c0c6 <__pow5mult+0x6a>
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c102:	bf00      	nop
 800c104:	0800d8a8 	.word	0x0800d8a8
 800c108:	0800d6c1 	.word	0x0800d6c1
 800c10c:	0800d84c 	.word	0x0800d84c

0800c110 <__lshift>:
 800c110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c114:	460c      	mov	r4, r1
 800c116:	6849      	ldr	r1, [r1, #4]
 800c118:	6923      	ldr	r3, [r4, #16]
 800c11a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c11e:	68a3      	ldr	r3, [r4, #8]
 800c120:	4607      	mov	r7, r0
 800c122:	4691      	mov	r9, r2
 800c124:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c128:	f108 0601 	add.w	r6, r8, #1
 800c12c:	42b3      	cmp	r3, r6
 800c12e:	db0b      	blt.n	800c148 <__lshift+0x38>
 800c130:	4638      	mov	r0, r7
 800c132:	f7ff fd95 	bl	800bc60 <_Balloc>
 800c136:	4605      	mov	r5, r0
 800c138:	b948      	cbnz	r0, 800c14e <__lshift+0x3e>
 800c13a:	4602      	mov	r2, r0
 800c13c:	4b28      	ldr	r3, [pc, #160]	@ (800c1e0 <__lshift+0xd0>)
 800c13e:	4829      	ldr	r0, [pc, #164]	@ (800c1e4 <__lshift+0xd4>)
 800c140:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c144:	f7fe fad6 	bl	800a6f4 <__assert_func>
 800c148:	3101      	adds	r1, #1
 800c14a:	005b      	lsls	r3, r3, #1
 800c14c:	e7ee      	b.n	800c12c <__lshift+0x1c>
 800c14e:	2300      	movs	r3, #0
 800c150:	f100 0114 	add.w	r1, r0, #20
 800c154:	f100 0210 	add.w	r2, r0, #16
 800c158:	4618      	mov	r0, r3
 800c15a:	4553      	cmp	r3, sl
 800c15c:	db33      	blt.n	800c1c6 <__lshift+0xb6>
 800c15e:	6920      	ldr	r0, [r4, #16]
 800c160:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c164:	f104 0314 	add.w	r3, r4, #20
 800c168:	f019 091f 	ands.w	r9, r9, #31
 800c16c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c170:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c174:	d02b      	beq.n	800c1ce <__lshift+0xbe>
 800c176:	f1c9 0e20 	rsb	lr, r9, #32
 800c17a:	468a      	mov	sl, r1
 800c17c:	2200      	movs	r2, #0
 800c17e:	6818      	ldr	r0, [r3, #0]
 800c180:	fa00 f009 	lsl.w	r0, r0, r9
 800c184:	4310      	orrs	r0, r2
 800c186:	f84a 0b04 	str.w	r0, [sl], #4
 800c18a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c18e:	459c      	cmp	ip, r3
 800c190:	fa22 f20e 	lsr.w	r2, r2, lr
 800c194:	d8f3      	bhi.n	800c17e <__lshift+0x6e>
 800c196:	ebac 0304 	sub.w	r3, ip, r4
 800c19a:	3b15      	subs	r3, #21
 800c19c:	f023 0303 	bic.w	r3, r3, #3
 800c1a0:	3304      	adds	r3, #4
 800c1a2:	f104 0015 	add.w	r0, r4, #21
 800c1a6:	4584      	cmp	ip, r0
 800c1a8:	bf38      	it	cc
 800c1aa:	2304      	movcc	r3, #4
 800c1ac:	50ca      	str	r2, [r1, r3]
 800c1ae:	b10a      	cbz	r2, 800c1b4 <__lshift+0xa4>
 800c1b0:	f108 0602 	add.w	r6, r8, #2
 800c1b4:	3e01      	subs	r6, #1
 800c1b6:	4638      	mov	r0, r7
 800c1b8:	612e      	str	r6, [r5, #16]
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	f7ff fd90 	bl	800bce0 <_Bfree>
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	e7c5      	b.n	800c15a <__lshift+0x4a>
 800c1ce:	3904      	subs	r1, #4
 800c1d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1d8:	459c      	cmp	ip, r3
 800c1da:	d8f9      	bhi.n	800c1d0 <__lshift+0xc0>
 800c1dc:	e7ea      	b.n	800c1b4 <__lshift+0xa4>
 800c1de:	bf00      	nop
 800c1e0:	0800d7db 	.word	0x0800d7db
 800c1e4:	0800d84c 	.word	0x0800d84c

0800c1e8 <__mcmp>:
 800c1e8:	690a      	ldr	r2, [r1, #16]
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	6900      	ldr	r0, [r0, #16]
 800c1ee:	1a80      	subs	r0, r0, r2
 800c1f0:	b530      	push	{r4, r5, lr}
 800c1f2:	d10e      	bne.n	800c212 <__mcmp+0x2a>
 800c1f4:	3314      	adds	r3, #20
 800c1f6:	3114      	adds	r1, #20
 800c1f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c1fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c200:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c204:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c208:	4295      	cmp	r5, r2
 800c20a:	d003      	beq.n	800c214 <__mcmp+0x2c>
 800c20c:	d205      	bcs.n	800c21a <__mcmp+0x32>
 800c20e:	f04f 30ff 	mov.w	r0, #4294967295
 800c212:	bd30      	pop	{r4, r5, pc}
 800c214:	42a3      	cmp	r3, r4
 800c216:	d3f3      	bcc.n	800c200 <__mcmp+0x18>
 800c218:	e7fb      	b.n	800c212 <__mcmp+0x2a>
 800c21a:	2001      	movs	r0, #1
 800c21c:	e7f9      	b.n	800c212 <__mcmp+0x2a>
	...

0800c220 <__mdiff>:
 800c220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c224:	4689      	mov	r9, r1
 800c226:	4606      	mov	r6, r0
 800c228:	4611      	mov	r1, r2
 800c22a:	4648      	mov	r0, r9
 800c22c:	4614      	mov	r4, r2
 800c22e:	f7ff ffdb 	bl	800c1e8 <__mcmp>
 800c232:	1e05      	subs	r5, r0, #0
 800c234:	d112      	bne.n	800c25c <__mdiff+0x3c>
 800c236:	4629      	mov	r1, r5
 800c238:	4630      	mov	r0, r6
 800c23a:	f7ff fd11 	bl	800bc60 <_Balloc>
 800c23e:	4602      	mov	r2, r0
 800c240:	b928      	cbnz	r0, 800c24e <__mdiff+0x2e>
 800c242:	4b3f      	ldr	r3, [pc, #252]	@ (800c340 <__mdiff+0x120>)
 800c244:	f240 2137 	movw	r1, #567	@ 0x237
 800c248:	483e      	ldr	r0, [pc, #248]	@ (800c344 <__mdiff+0x124>)
 800c24a:	f7fe fa53 	bl	800a6f4 <__assert_func>
 800c24e:	2301      	movs	r3, #1
 800c250:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c254:	4610      	mov	r0, r2
 800c256:	b003      	add	sp, #12
 800c258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25c:	bfbc      	itt	lt
 800c25e:	464b      	movlt	r3, r9
 800c260:	46a1      	movlt	r9, r4
 800c262:	4630      	mov	r0, r6
 800c264:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c268:	bfba      	itte	lt
 800c26a:	461c      	movlt	r4, r3
 800c26c:	2501      	movlt	r5, #1
 800c26e:	2500      	movge	r5, #0
 800c270:	f7ff fcf6 	bl	800bc60 <_Balloc>
 800c274:	4602      	mov	r2, r0
 800c276:	b918      	cbnz	r0, 800c280 <__mdiff+0x60>
 800c278:	4b31      	ldr	r3, [pc, #196]	@ (800c340 <__mdiff+0x120>)
 800c27a:	f240 2145 	movw	r1, #581	@ 0x245
 800c27e:	e7e3      	b.n	800c248 <__mdiff+0x28>
 800c280:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c284:	6926      	ldr	r6, [r4, #16]
 800c286:	60c5      	str	r5, [r0, #12]
 800c288:	f109 0310 	add.w	r3, r9, #16
 800c28c:	f109 0514 	add.w	r5, r9, #20
 800c290:	f104 0e14 	add.w	lr, r4, #20
 800c294:	f100 0b14 	add.w	fp, r0, #20
 800c298:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c29c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	46d9      	mov	r9, fp
 800c2a4:	f04f 0c00 	mov.w	ip, #0
 800c2a8:	9b01      	ldr	r3, [sp, #4]
 800c2aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c2ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	fa1f f38a 	uxth.w	r3, sl
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	b283      	uxth	r3, r0
 800c2bc:	1acb      	subs	r3, r1, r3
 800c2be:	0c00      	lsrs	r0, r0, #16
 800c2c0:	4463      	add	r3, ip
 800c2c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c2c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c2d0:	4576      	cmp	r6, lr
 800c2d2:	f849 3b04 	str.w	r3, [r9], #4
 800c2d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2da:	d8e5      	bhi.n	800c2a8 <__mdiff+0x88>
 800c2dc:	1b33      	subs	r3, r6, r4
 800c2de:	3b15      	subs	r3, #21
 800c2e0:	f023 0303 	bic.w	r3, r3, #3
 800c2e4:	3415      	adds	r4, #21
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	42a6      	cmp	r6, r4
 800c2ea:	bf38      	it	cc
 800c2ec:	2304      	movcc	r3, #4
 800c2ee:	441d      	add	r5, r3
 800c2f0:	445b      	add	r3, fp
 800c2f2:	461e      	mov	r6, r3
 800c2f4:	462c      	mov	r4, r5
 800c2f6:	4544      	cmp	r4, r8
 800c2f8:	d30e      	bcc.n	800c318 <__mdiff+0xf8>
 800c2fa:	f108 0103 	add.w	r1, r8, #3
 800c2fe:	1b49      	subs	r1, r1, r5
 800c300:	f021 0103 	bic.w	r1, r1, #3
 800c304:	3d03      	subs	r5, #3
 800c306:	45a8      	cmp	r8, r5
 800c308:	bf38      	it	cc
 800c30a:	2100      	movcc	r1, #0
 800c30c:	440b      	add	r3, r1
 800c30e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c312:	b191      	cbz	r1, 800c33a <__mdiff+0x11a>
 800c314:	6117      	str	r7, [r2, #16]
 800c316:	e79d      	b.n	800c254 <__mdiff+0x34>
 800c318:	f854 1b04 	ldr.w	r1, [r4], #4
 800c31c:	46e6      	mov	lr, ip
 800c31e:	0c08      	lsrs	r0, r1, #16
 800c320:	fa1c fc81 	uxtah	ip, ip, r1
 800c324:	4471      	add	r1, lr
 800c326:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c32a:	b289      	uxth	r1, r1
 800c32c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c330:	f846 1b04 	str.w	r1, [r6], #4
 800c334:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c338:	e7dd      	b.n	800c2f6 <__mdiff+0xd6>
 800c33a:	3f01      	subs	r7, #1
 800c33c:	e7e7      	b.n	800c30e <__mdiff+0xee>
 800c33e:	bf00      	nop
 800c340:	0800d7db 	.word	0x0800d7db
 800c344:	0800d84c 	.word	0x0800d84c

0800c348 <__ulp>:
 800c348:	b082      	sub	sp, #8
 800c34a:	ed8d 0b00 	vstr	d0, [sp]
 800c34e:	9a01      	ldr	r2, [sp, #4]
 800c350:	4b0f      	ldr	r3, [pc, #60]	@ (800c390 <__ulp+0x48>)
 800c352:	4013      	ands	r3, r2
 800c354:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	dc08      	bgt.n	800c36e <__ulp+0x26>
 800c35c:	425b      	negs	r3, r3
 800c35e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c362:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c366:	da04      	bge.n	800c372 <__ulp+0x2a>
 800c368:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c36c:	4113      	asrs	r3, r2
 800c36e:	2200      	movs	r2, #0
 800c370:	e008      	b.n	800c384 <__ulp+0x3c>
 800c372:	f1a2 0314 	sub.w	r3, r2, #20
 800c376:	2b1e      	cmp	r3, #30
 800c378:	bfda      	itte	le
 800c37a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c37e:	40da      	lsrle	r2, r3
 800c380:	2201      	movgt	r2, #1
 800c382:	2300      	movs	r3, #0
 800c384:	4619      	mov	r1, r3
 800c386:	4610      	mov	r0, r2
 800c388:	ec41 0b10 	vmov	d0, r0, r1
 800c38c:	b002      	add	sp, #8
 800c38e:	4770      	bx	lr
 800c390:	7ff00000 	.word	0x7ff00000

0800c394 <__b2d>:
 800c394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c398:	6906      	ldr	r6, [r0, #16]
 800c39a:	f100 0814 	add.w	r8, r0, #20
 800c39e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c3a2:	1f37      	subs	r7, r6, #4
 800c3a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	f7ff fd4b 	bl	800be44 <__hi0bits>
 800c3ae:	f1c0 0320 	rsb	r3, r0, #32
 800c3b2:	280a      	cmp	r0, #10
 800c3b4:	600b      	str	r3, [r1, #0]
 800c3b6:	491b      	ldr	r1, [pc, #108]	@ (800c424 <__b2d+0x90>)
 800c3b8:	dc15      	bgt.n	800c3e6 <__b2d+0x52>
 800c3ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800c3be:	fa22 f30c 	lsr.w	r3, r2, ip
 800c3c2:	45b8      	cmp	r8, r7
 800c3c4:	ea43 0501 	orr.w	r5, r3, r1
 800c3c8:	bf34      	ite	cc
 800c3ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c3ce:	2300      	movcs	r3, #0
 800c3d0:	3015      	adds	r0, #21
 800c3d2:	fa02 f000 	lsl.w	r0, r2, r0
 800c3d6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c3da:	4303      	orrs	r3, r0
 800c3dc:	461c      	mov	r4, r3
 800c3de:	ec45 4b10 	vmov	d0, r4, r5
 800c3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e6:	45b8      	cmp	r8, r7
 800c3e8:	bf3a      	itte	cc
 800c3ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c3ee:	f1a6 0708 	subcc.w	r7, r6, #8
 800c3f2:	2300      	movcs	r3, #0
 800c3f4:	380b      	subs	r0, #11
 800c3f6:	d012      	beq.n	800c41e <__b2d+0x8a>
 800c3f8:	f1c0 0120 	rsb	r1, r0, #32
 800c3fc:	fa23 f401 	lsr.w	r4, r3, r1
 800c400:	4082      	lsls	r2, r0
 800c402:	4322      	orrs	r2, r4
 800c404:	4547      	cmp	r7, r8
 800c406:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c40a:	bf8c      	ite	hi
 800c40c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c410:	2200      	movls	r2, #0
 800c412:	4083      	lsls	r3, r0
 800c414:	40ca      	lsrs	r2, r1
 800c416:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c41a:	4313      	orrs	r3, r2
 800c41c:	e7de      	b.n	800c3dc <__b2d+0x48>
 800c41e:	ea42 0501 	orr.w	r5, r2, r1
 800c422:	e7db      	b.n	800c3dc <__b2d+0x48>
 800c424:	3ff00000 	.word	0x3ff00000

0800c428 <__d2b>:
 800c428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c42c:	460f      	mov	r7, r1
 800c42e:	2101      	movs	r1, #1
 800c430:	ec59 8b10 	vmov	r8, r9, d0
 800c434:	4616      	mov	r6, r2
 800c436:	f7ff fc13 	bl	800bc60 <_Balloc>
 800c43a:	4604      	mov	r4, r0
 800c43c:	b930      	cbnz	r0, 800c44c <__d2b+0x24>
 800c43e:	4602      	mov	r2, r0
 800c440:	4b23      	ldr	r3, [pc, #140]	@ (800c4d0 <__d2b+0xa8>)
 800c442:	4824      	ldr	r0, [pc, #144]	@ (800c4d4 <__d2b+0xac>)
 800c444:	f240 310f 	movw	r1, #783	@ 0x30f
 800c448:	f7fe f954 	bl	800a6f4 <__assert_func>
 800c44c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c454:	b10d      	cbz	r5, 800c45a <__d2b+0x32>
 800c456:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c45a:	9301      	str	r3, [sp, #4]
 800c45c:	f1b8 0300 	subs.w	r3, r8, #0
 800c460:	d023      	beq.n	800c4aa <__d2b+0x82>
 800c462:	4668      	mov	r0, sp
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	f7ff fd0c 	bl	800be82 <__lo0bits>
 800c46a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c46e:	b1d0      	cbz	r0, 800c4a6 <__d2b+0x7e>
 800c470:	f1c0 0320 	rsb	r3, r0, #32
 800c474:	fa02 f303 	lsl.w	r3, r2, r3
 800c478:	430b      	orrs	r3, r1
 800c47a:	40c2      	lsrs	r2, r0
 800c47c:	6163      	str	r3, [r4, #20]
 800c47e:	9201      	str	r2, [sp, #4]
 800c480:	9b01      	ldr	r3, [sp, #4]
 800c482:	61a3      	str	r3, [r4, #24]
 800c484:	2b00      	cmp	r3, #0
 800c486:	bf0c      	ite	eq
 800c488:	2201      	moveq	r2, #1
 800c48a:	2202      	movne	r2, #2
 800c48c:	6122      	str	r2, [r4, #16]
 800c48e:	b1a5      	cbz	r5, 800c4ba <__d2b+0x92>
 800c490:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c494:	4405      	add	r5, r0
 800c496:	603d      	str	r5, [r7, #0]
 800c498:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c49c:	6030      	str	r0, [r6, #0]
 800c49e:	4620      	mov	r0, r4
 800c4a0:	b003      	add	sp, #12
 800c4a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4a6:	6161      	str	r1, [r4, #20]
 800c4a8:	e7ea      	b.n	800c480 <__d2b+0x58>
 800c4aa:	a801      	add	r0, sp, #4
 800c4ac:	f7ff fce9 	bl	800be82 <__lo0bits>
 800c4b0:	9b01      	ldr	r3, [sp, #4]
 800c4b2:	6163      	str	r3, [r4, #20]
 800c4b4:	3020      	adds	r0, #32
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	e7e8      	b.n	800c48c <__d2b+0x64>
 800c4ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c4be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c4c2:	6038      	str	r0, [r7, #0]
 800c4c4:	6918      	ldr	r0, [r3, #16]
 800c4c6:	f7ff fcbd 	bl	800be44 <__hi0bits>
 800c4ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c4ce:	e7e5      	b.n	800c49c <__d2b+0x74>
 800c4d0:	0800d7db 	.word	0x0800d7db
 800c4d4:	0800d84c 	.word	0x0800d84c

0800c4d8 <__ratio>:
 800c4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4dc:	b085      	sub	sp, #20
 800c4de:	e9cd 1000 	strd	r1, r0, [sp]
 800c4e2:	a902      	add	r1, sp, #8
 800c4e4:	f7ff ff56 	bl	800c394 <__b2d>
 800c4e8:	9800      	ldr	r0, [sp, #0]
 800c4ea:	a903      	add	r1, sp, #12
 800c4ec:	ec55 4b10 	vmov	r4, r5, d0
 800c4f0:	f7ff ff50 	bl	800c394 <__b2d>
 800c4f4:	9b01      	ldr	r3, [sp, #4]
 800c4f6:	6919      	ldr	r1, [r3, #16]
 800c4f8:	9b00      	ldr	r3, [sp, #0]
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	1ac9      	subs	r1, r1, r3
 800c4fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c502:	1a9b      	subs	r3, r3, r2
 800c504:	ec5b ab10 	vmov	sl, fp, d0
 800c508:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	bfce      	itee	gt
 800c510:	462a      	movgt	r2, r5
 800c512:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c516:	465a      	movle	r2, fp
 800c518:	462f      	mov	r7, r5
 800c51a:	46d9      	mov	r9, fp
 800c51c:	bfcc      	ite	gt
 800c51e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c522:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c526:	464b      	mov	r3, r9
 800c528:	4652      	mov	r2, sl
 800c52a:	4620      	mov	r0, r4
 800c52c:	4639      	mov	r1, r7
 800c52e:	f7f4 f9ad 	bl	800088c <__aeabi_ddiv>
 800c532:	ec41 0b10 	vmov	d0, r0, r1
 800c536:	b005      	add	sp, #20
 800c538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c53c <__copybits>:
 800c53c:	3901      	subs	r1, #1
 800c53e:	b570      	push	{r4, r5, r6, lr}
 800c540:	1149      	asrs	r1, r1, #5
 800c542:	6914      	ldr	r4, [r2, #16]
 800c544:	3101      	adds	r1, #1
 800c546:	f102 0314 	add.w	r3, r2, #20
 800c54a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c54e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c552:	1f05      	subs	r5, r0, #4
 800c554:	42a3      	cmp	r3, r4
 800c556:	d30c      	bcc.n	800c572 <__copybits+0x36>
 800c558:	1aa3      	subs	r3, r4, r2
 800c55a:	3b11      	subs	r3, #17
 800c55c:	f023 0303 	bic.w	r3, r3, #3
 800c560:	3211      	adds	r2, #17
 800c562:	42a2      	cmp	r2, r4
 800c564:	bf88      	it	hi
 800c566:	2300      	movhi	r3, #0
 800c568:	4418      	add	r0, r3
 800c56a:	2300      	movs	r3, #0
 800c56c:	4288      	cmp	r0, r1
 800c56e:	d305      	bcc.n	800c57c <__copybits+0x40>
 800c570:	bd70      	pop	{r4, r5, r6, pc}
 800c572:	f853 6b04 	ldr.w	r6, [r3], #4
 800c576:	f845 6f04 	str.w	r6, [r5, #4]!
 800c57a:	e7eb      	b.n	800c554 <__copybits+0x18>
 800c57c:	f840 3b04 	str.w	r3, [r0], #4
 800c580:	e7f4      	b.n	800c56c <__copybits+0x30>

0800c582 <__any_on>:
 800c582:	f100 0214 	add.w	r2, r0, #20
 800c586:	6900      	ldr	r0, [r0, #16]
 800c588:	114b      	asrs	r3, r1, #5
 800c58a:	4298      	cmp	r0, r3
 800c58c:	b510      	push	{r4, lr}
 800c58e:	db11      	blt.n	800c5b4 <__any_on+0x32>
 800c590:	dd0a      	ble.n	800c5a8 <__any_on+0x26>
 800c592:	f011 011f 	ands.w	r1, r1, #31
 800c596:	d007      	beq.n	800c5a8 <__any_on+0x26>
 800c598:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c59c:	fa24 f001 	lsr.w	r0, r4, r1
 800c5a0:	fa00 f101 	lsl.w	r1, r0, r1
 800c5a4:	428c      	cmp	r4, r1
 800c5a6:	d10b      	bne.n	800c5c0 <__any_on+0x3e>
 800c5a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d803      	bhi.n	800c5b8 <__any_on+0x36>
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	bd10      	pop	{r4, pc}
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	e7f7      	b.n	800c5a8 <__any_on+0x26>
 800c5b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5bc:	2900      	cmp	r1, #0
 800c5be:	d0f5      	beq.n	800c5ac <__any_on+0x2a>
 800c5c0:	2001      	movs	r0, #1
 800c5c2:	e7f6      	b.n	800c5b2 <__any_on+0x30>

0800c5c4 <_strtol_l.constprop.0>:
 800c5c4:	2b24      	cmp	r3, #36	@ 0x24
 800c5c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ca:	4686      	mov	lr, r0
 800c5cc:	4690      	mov	r8, r2
 800c5ce:	d801      	bhi.n	800c5d4 <_strtol_l.constprop.0+0x10>
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d106      	bne.n	800c5e2 <_strtol_l.constprop.0+0x1e>
 800c5d4:	f7fe f844 	bl	800a660 <__errno>
 800c5d8:	2316      	movs	r3, #22
 800c5da:	6003      	str	r3, [r0, #0]
 800c5dc:	2000      	movs	r0, #0
 800c5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e2:	4834      	ldr	r0, [pc, #208]	@ (800c6b4 <_strtol_l.constprop.0+0xf0>)
 800c5e4:	460d      	mov	r5, r1
 800c5e6:	462a      	mov	r2, r5
 800c5e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c5ec:	5d06      	ldrb	r6, [r0, r4]
 800c5ee:	f016 0608 	ands.w	r6, r6, #8
 800c5f2:	d1f8      	bne.n	800c5e6 <_strtol_l.constprop.0+0x22>
 800c5f4:	2c2d      	cmp	r4, #45	@ 0x2d
 800c5f6:	d12d      	bne.n	800c654 <_strtol_l.constprop.0+0x90>
 800c5f8:	782c      	ldrb	r4, [r5, #0]
 800c5fa:	2601      	movs	r6, #1
 800c5fc:	1c95      	adds	r5, r2, #2
 800c5fe:	f033 0210 	bics.w	r2, r3, #16
 800c602:	d109      	bne.n	800c618 <_strtol_l.constprop.0+0x54>
 800c604:	2c30      	cmp	r4, #48	@ 0x30
 800c606:	d12a      	bne.n	800c65e <_strtol_l.constprop.0+0x9a>
 800c608:	782a      	ldrb	r2, [r5, #0]
 800c60a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c60e:	2a58      	cmp	r2, #88	@ 0x58
 800c610:	d125      	bne.n	800c65e <_strtol_l.constprop.0+0x9a>
 800c612:	786c      	ldrb	r4, [r5, #1]
 800c614:	2310      	movs	r3, #16
 800c616:	3502      	adds	r5, #2
 800c618:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c61c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c620:	2200      	movs	r2, #0
 800c622:	fbbc f9f3 	udiv	r9, ip, r3
 800c626:	4610      	mov	r0, r2
 800c628:	fb03 ca19 	mls	sl, r3, r9, ip
 800c62c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c630:	2f09      	cmp	r7, #9
 800c632:	d81b      	bhi.n	800c66c <_strtol_l.constprop.0+0xa8>
 800c634:	463c      	mov	r4, r7
 800c636:	42a3      	cmp	r3, r4
 800c638:	dd27      	ble.n	800c68a <_strtol_l.constprop.0+0xc6>
 800c63a:	1c57      	adds	r7, r2, #1
 800c63c:	d007      	beq.n	800c64e <_strtol_l.constprop.0+0x8a>
 800c63e:	4581      	cmp	r9, r0
 800c640:	d320      	bcc.n	800c684 <_strtol_l.constprop.0+0xc0>
 800c642:	d101      	bne.n	800c648 <_strtol_l.constprop.0+0x84>
 800c644:	45a2      	cmp	sl, r4
 800c646:	db1d      	blt.n	800c684 <_strtol_l.constprop.0+0xc0>
 800c648:	fb00 4003 	mla	r0, r0, r3, r4
 800c64c:	2201      	movs	r2, #1
 800c64e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c652:	e7eb      	b.n	800c62c <_strtol_l.constprop.0+0x68>
 800c654:	2c2b      	cmp	r4, #43	@ 0x2b
 800c656:	bf04      	itt	eq
 800c658:	782c      	ldrbeq	r4, [r5, #0]
 800c65a:	1c95      	addeq	r5, r2, #2
 800c65c:	e7cf      	b.n	800c5fe <_strtol_l.constprop.0+0x3a>
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1da      	bne.n	800c618 <_strtol_l.constprop.0+0x54>
 800c662:	2c30      	cmp	r4, #48	@ 0x30
 800c664:	bf0c      	ite	eq
 800c666:	2308      	moveq	r3, #8
 800c668:	230a      	movne	r3, #10
 800c66a:	e7d5      	b.n	800c618 <_strtol_l.constprop.0+0x54>
 800c66c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c670:	2f19      	cmp	r7, #25
 800c672:	d801      	bhi.n	800c678 <_strtol_l.constprop.0+0xb4>
 800c674:	3c37      	subs	r4, #55	@ 0x37
 800c676:	e7de      	b.n	800c636 <_strtol_l.constprop.0+0x72>
 800c678:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c67c:	2f19      	cmp	r7, #25
 800c67e:	d804      	bhi.n	800c68a <_strtol_l.constprop.0+0xc6>
 800c680:	3c57      	subs	r4, #87	@ 0x57
 800c682:	e7d8      	b.n	800c636 <_strtol_l.constprop.0+0x72>
 800c684:	f04f 32ff 	mov.w	r2, #4294967295
 800c688:	e7e1      	b.n	800c64e <_strtol_l.constprop.0+0x8a>
 800c68a:	1c53      	adds	r3, r2, #1
 800c68c:	d108      	bne.n	800c6a0 <_strtol_l.constprop.0+0xdc>
 800c68e:	2322      	movs	r3, #34	@ 0x22
 800c690:	f8ce 3000 	str.w	r3, [lr]
 800c694:	4660      	mov	r0, ip
 800c696:	f1b8 0f00 	cmp.w	r8, #0
 800c69a:	d0a0      	beq.n	800c5de <_strtol_l.constprop.0+0x1a>
 800c69c:	1e69      	subs	r1, r5, #1
 800c69e:	e006      	b.n	800c6ae <_strtol_l.constprop.0+0xea>
 800c6a0:	b106      	cbz	r6, 800c6a4 <_strtol_l.constprop.0+0xe0>
 800c6a2:	4240      	negs	r0, r0
 800c6a4:	f1b8 0f00 	cmp.w	r8, #0
 800c6a8:	d099      	beq.n	800c5de <_strtol_l.constprop.0+0x1a>
 800c6aa:	2a00      	cmp	r2, #0
 800c6ac:	d1f6      	bne.n	800c69c <_strtol_l.constprop.0+0xd8>
 800c6ae:	f8c8 1000 	str.w	r1, [r8]
 800c6b2:	e794      	b.n	800c5de <_strtol_l.constprop.0+0x1a>
 800c6b4:	0800d9a9 	.word	0x0800d9a9

0800c6b8 <_strtol_r>:
 800c6b8:	f7ff bf84 	b.w	800c5c4 <_strtol_l.constprop.0>

0800c6bc <__ascii_wctomb>:
 800c6bc:	4603      	mov	r3, r0
 800c6be:	4608      	mov	r0, r1
 800c6c0:	b141      	cbz	r1, 800c6d4 <__ascii_wctomb+0x18>
 800c6c2:	2aff      	cmp	r2, #255	@ 0xff
 800c6c4:	d904      	bls.n	800c6d0 <__ascii_wctomb+0x14>
 800c6c6:	228a      	movs	r2, #138	@ 0x8a
 800c6c8:	601a      	str	r2, [r3, #0]
 800c6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ce:	4770      	bx	lr
 800c6d0:	700a      	strb	r2, [r1, #0]
 800c6d2:	2001      	movs	r0, #1
 800c6d4:	4770      	bx	lr

0800c6d6 <__ssputs_r>:
 800c6d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6da:	688e      	ldr	r6, [r1, #8]
 800c6dc:	461f      	mov	r7, r3
 800c6de:	42be      	cmp	r6, r7
 800c6e0:	680b      	ldr	r3, [r1, #0]
 800c6e2:	4682      	mov	sl, r0
 800c6e4:	460c      	mov	r4, r1
 800c6e6:	4690      	mov	r8, r2
 800c6e8:	d82d      	bhi.n	800c746 <__ssputs_r+0x70>
 800c6ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6ee:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c6f2:	d026      	beq.n	800c742 <__ssputs_r+0x6c>
 800c6f4:	6965      	ldr	r5, [r4, #20]
 800c6f6:	6909      	ldr	r1, [r1, #16]
 800c6f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6fc:	eba3 0901 	sub.w	r9, r3, r1
 800c700:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c704:	1c7b      	adds	r3, r7, #1
 800c706:	444b      	add	r3, r9
 800c708:	106d      	asrs	r5, r5, #1
 800c70a:	429d      	cmp	r5, r3
 800c70c:	bf38      	it	cc
 800c70e:	461d      	movcc	r5, r3
 800c710:	0553      	lsls	r3, r2, #21
 800c712:	d527      	bpl.n	800c764 <__ssputs_r+0x8e>
 800c714:	4629      	mov	r1, r5
 800c716:	f7ff fa05 	bl	800bb24 <_malloc_r>
 800c71a:	4606      	mov	r6, r0
 800c71c:	b360      	cbz	r0, 800c778 <__ssputs_r+0xa2>
 800c71e:	6921      	ldr	r1, [r4, #16]
 800c720:	464a      	mov	r2, r9
 800c722:	f7fd ffca 	bl	800a6ba <memcpy>
 800c726:	89a3      	ldrh	r3, [r4, #12]
 800c728:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c72c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c730:	81a3      	strh	r3, [r4, #12]
 800c732:	6126      	str	r6, [r4, #16]
 800c734:	6165      	str	r5, [r4, #20]
 800c736:	444e      	add	r6, r9
 800c738:	eba5 0509 	sub.w	r5, r5, r9
 800c73c:	6026      	str	r6, [r4, #0]
 800c73e:	60a5      	str	r5, [r4, #8]
 800c740:	463e      	mov	r6, r7
 800c742:	42be      	cmp	r6, r7
 800c744:	d900      	bls.n	800c748 <__ssputs_r+0x72>
 800c746:	463e      	mov	r6, r7
 800c748:	6820      	ldr	r0, [r4, #0]
 800c74a:	4632      	mov	r2, r6
 800c74c:	4641      	mov	r1, r8
 800c74e:	f000 f9d7 	bl	800cb00 <memmove>
 800c752:	68a3      	ldr	r3, [r4, #8]
 800c754:	1b9b      	subs	r3, r3, r6
 800c756:	60a3      	str	r3, [r4, #8]
 800c758:	6823      	ldr	r3, [r4, #0]
 800c75a:	4433      	add	r3, r6
 800c75c:	6023      	str	r3, [r4, #0]
 800c75e:	2000      	movs	r0, #0
 800c760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c764:	462a      	mov	r2, r5
 800c766:	f000 fa10 	bl	800cb8a <_realloc_r>
 800c76a:	4606      	mov	r6, r0
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d1e0      	bne.n	800c732 <__ssputs_r+0x5c>
 800c770:	6921      	ldr	r1, [r4, #16]
 800c772:	4650      	mov	r0, sl
 800c774:	f7fe fe28 	bl	800b3c8 <_free_r>
 800c778:	230c      	movs	r3, #12
 800c77a:	f8ca 3000 	str.w	r3, [sl]
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c784:	81a3      	strh	r3, [r4, #12]
 800c786:	f04f 30ff 	mov.w	r0, #4294967295
 800c78a:	e7e9      	b.n	800c760 <__ssputs_r+0x8a>

0800c78c <_svfiprintf_r>:
 800c78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c790:	4698      	mov	r8, r3
 800c792:	898b      	ldrh	r3, [r1, #12]
 800c794:	061b      	lsls	r3, r3, #24
 800c796:	b09d      	sub	sp, #116	@ 0x74
 800c798:	4607      	mov	r7, r0
 800c79a:	460d      	mov	r5, r1
 800c79c:	4614      	mov	r4, r2
 800c79e:	d510      	bpl.n	800c7c2 <_svfiprintf_r+0x36>
 800c7a0:	690b      	ldr	r3, [r1, #16]
 800c7a2:	b973      	cbnz	r3, 800c7c2 <_svfiprintf_r+0x36>
 800c7a4:	2140      	movs	r1, #64	@ 0x40
 800c7a6:	f7ff f9bd 	bl	800bb24 <_malloc_r>
 800c7aa:	6028      	str	r0, [r5, #0]
 800c7ac:	6128      	str	r0, [r5, #16]
 800c7ae:	b930      	cbnz	r0, 800c7be <_svfiprintf_r+0x32>
 800c7b0:	230c      	movs	r3, #12
 800c7b2:	603b      	str	r3, [r7, #0]
 800c7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b8:	b01d      	add	sp, #116	@ 0x74
 800c7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7be:	2340      	movs	r3, #64	@ 0x40
 800c7c0:	616b      	str	r3, [r5, #20]
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7c6:	2320      	movs	r3, #32
 800c7c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7d0:	2330      	movs	r3, #48	@ 0x30
 800c7d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c970 <_svfiprintf_r+0x1e4>
 800c7d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c7da:	f04f 0901 	mov.w	r9, #1
 800c7de:	4623      	mov	r3, r4
 800c7e0:	469a      	mov	sl, r3
 800c7e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7e6:	b10a      	cbz	r2, 800c7ec <_svfiprintf_r+0x60>
 800c7e8:	2a25      	cmp	r2, #37	@ 0x25
 800c7ea:	d1f9      	bne.n	800c7e0 <_svfiprintf_r+0x54>
 800c7ec:	ebba 0b04 	subs.w	fp, sl, r4
 800c7f0:	d00b      	beq.n	800c80a <_svfiprintf_r+0x7e>
 800c7f2:	465b      	mov	r3, fp
 800c7f4:	4622      	mov	r2, r4
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	f7ff ff6c 	bl	800c6d6 <__ssputs_r>
 800c7fe:	3001      	adds	r0, #1
 800c800:	f000 80a7 	beq.w	800c952 <_svfiprintf_r+0x1c6>
 800c804:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c806:	445a      	add	r2, fp
 800c808:	9209      	str	r2, [sp, #36]	@ 0x24
 800c80a:	f89a 3000 	ldrb.w	r3, [sl]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f000 809f 	beq.w	800c952 <_svfiprintf_r+0x1c6>
 800c814:	2300      	movs	r3, #0
 800c816:	f04f 32ff 	mov.w	r2, #4294967295
 800c81a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c81e:	f10a 0a01 	add.w	sl, sl, #1
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	9307      	str	r3, [sp, #28]
 800c826:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c82a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c82c:	4654      	mov	r4, sl
 800c82e:	2205      	movs	r2, #5
 800c830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c834:	484e      	ldr	r0, [pc, #312]	@ (800c970 <_svfiprintf_r+0x1e4>)
 800c836:	f7f3 fceb 	bl	8000210 <memchr>
 800c83a:	9a04      	ldr	r2, [sp, #16]
 800c83c:	b9d8      	cbnz	r0, 800c876 <_svfiprintf_r+0xea>
 800c83e:	06d0      	lsls	r0, r2, #27
 800c840:	bf44      	itt	mi
 800c842:	2320      	movmi	r3, #32
 800c844:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c848:	0711      	lsls	r1, r2, #28
 800c84a:	bf44      	itt	mi
 800c84c:	232b      	movmi	r3, #43	@ 0x2b
 800c84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c852:	f89a 3000 	ldrb.w	r3, [sl]
 800c856:	2b2a      	cmp	r3, #42	@ 0x2a
 800c858:	d015      	beq.n	800c886 <_svfiprintf_r+0xfa>
 800c85a:	9a07      	ldr	r2, [sp, #28]
 800c85c:	4654      	mov	r4, sl
 800c85e:	2000      	movs	r0, #0
 800c860:	f04f 0c0a 	mov.w	ip, #10
 800c864:	4621      	mov	r1, r4
 800c866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c86a:	3b30      	subs	r3, #48	@ 0x30
 800c86c:	2b09      	cmp	r3, #9
 800c86e:	d94b      	bls.n	800c908 <_svfiprintf_r+0x17c>
 800c870:	b1b0      	cbz	r0, 800c8a0 <_svfiprintf_r+0x114>
 800c872:	9207      	str	r2, [sp, #28]
 800c874:	e014      	b.n	800c8a0 <_svfiprintf_r+0x114>
 800c876:	eba0 0308 	sub.w	r3, r0, r8
 800c87a:	fa09 f303 	lsl.w	r3, r9, r3
 800c87e:	4313      	orrs	r3, r2
 800c880:	9304      	str	r3, [sp, #16]
 800c882:	46a2      	mov	sl, r4
 800c884:	e7d2      	b.n	800c82c <_svfiprintf_r+0xa0>
 800c886:	9b03      	ldr	r3, [sp, #12]
 800c888:	1d19      	adds	r1, r3, #4
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	9103      	str	r1, [sp, #12]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	bfbb      	ittet	lt
 800c892:	425b      	neglt	r3, r3
 800c894:	f042 0202 	orrlt.w	r2, r2, #2
 800c898:	9307      	strge	r3, [sp, #28]
 800c89a:	9307      	strlt	r3, [sp, #28]
 800c89c:	bfb8      	it	lt
 800c89e:	9204      	strlt	r2, [sp, #16]
 800c8a0:	7823      	ldrb	r3, [r4, #0]
 800c8a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8a4:	d10a      	bne.n	800c8bc <_svfiprintf_r+0x130>
 800c8a6:	7863      	ldrb	r3, [r4, #1]
 800c8a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8aa:	d132      	bne.n	800c912 <_svfiprintf_r+0x186>
 800c8ac:	9b03      	ldr	r3, [sp, #12]
 800c8ae:	1d1a      	adds	r2, r3, #4
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	9203      	str	r2, [sp, #12]
 800c8b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8b8:	3402      	adds	r4, #2
 800c8ba:	9305      	str	r3, [sp, #20]
 800c8bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c980 <_svfiprintf_r+0x1f4>
 800c8c0:	7821      	ldrb	r1, [r4, #0]
 800c8c2:	2203      	movs	r2, #3
 800c8c4:	4650      	mov	r0, sl
 800c8c6:	f7f3 fca3 	bl	8000210 <memchr>
 800c8ca:	b138      	cbz	r0, 800c8dc <_svfiprintf_r+0x150>
 800c8cc:	9b04      	ldr	r3, [sp, #16]
 800c8ce:	eba0 000a 	sub.w	r0, r0, sl
 800c8d2:	2240      	movs	r2, #64	@ 0x40
 800c8d4:	4082      	lsls	r2, r0
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	3401      	adds	r4, #1
 800c8da:	9304      	str	r3, [sp, #16]
 800c8dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e0:	4824      	ldr	r0, [pc, #144]	@ (800c974 <_svfiprintf_r+0x1e8>)
 800c8e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8e6:	2206      	movs	r2, #6
 800c8e8:	f7f3 fc92 	bl	8000210 <memchr>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	d036      	beq.n	800c95e <_svfiprintf_r+0x1d2>
 800c8f0:	4b21      	ldr	r3, [pc, #132]	@ (800c978 <_svfiprintf_r+0x1ec>)
 800c8f2:	bb1b      	cbnz	r3, 800c93c <_svfiprintf_r+0x1b0>
 800c8f4:	9b03      	ldr	r3, [sp, #12]
 800c8f6:	3307      	adds	r3, #7
 800c8f8:	f023 0307 	bic.w	r3, r3, #7
 800c8fc:	3308      	adds	r3, #8
 800c8fe:	9303      	str	r3, [sp, #12]
 800c900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c902:	4433      	add	r3, r6
 800c904:	9309      	str	r3, [sp, #36]	@ 0x24
 800c906:	e76a      	b.n	800c7de <_svfiprintf_r+0x52>
 800c908:	fb0c 3202 	mla	r2, ip, r2, r3
 800c90c:	460c      	mov	r4, r1
 800c90e:	2001      	movs	r0, #1
 800c910:	e7a8      	b.n	800c864 <_svfiprintf_r+0xd8>
 800c912:	2300      	movs	r3, #0
 800c914:	3401      	adds	r4, #1
 800c916:	9305      	str	r3, [sp, #20]
 800c918:	4619      	mov	r1, r3
 800c91a:	f04f 0c0a 	mov.w	ip, #10
 800c91e:	4620      	mov	r0, r4
 800c920:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c924:	3a30      	subs	r2, #48	@ 0x30
 800c926:	2a09      	cmp	r2, #9
 800c928:	d903      	bls.n	800c932 <_svfiprintf_r+0x1a6>
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d0c6      	beq.n	800c8bc <_svfiprintf_r+0x130>
 800c92e:	9105      	str	r1, [sp, #20]
 800c930:	e7c4      	b.n	800c8bc <_svfiprintf_r+0x130>
 800c932:	fb0c 2101 	mla	r1, ip, r1, r2
 800c936:	4604      	mov	r4, r0
 800c938:	2301      	movs	r3, #1
 800c93a:	e7f0      	b.n	800c91e <_svfiprintf_r+0x192>
 800c93c:	ab03      	add	r3, sp, #12
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	462a      	mov	r2, r5
 800c942:	4b0e      	ldr	r3, [pc, #56]	@ (800c97c <_svfiprintf_r+0x1f0>)
 800c944:	a904      	add	r1, sp, #16
 800c946:	4638      	mov	r0, r7
 800c948:	f7fc fed8 	bl	80096fc <_printf_float>
 800c94c:	1c42      	adds	r2, r0, #1
 800c94e:	4606      	mov	r6, r0
 800c950:	d1d6      	bne.n	800c900 <_svfiprintf_r+0x174>
 800c952:	89ab      	ldrh	r3, [r5, #12]
 800c954:	065b      	lsls	r3, r3, #25
 800c956:	f53f af2d 	bmi.w	800c7b4 <_svfiprintf_r+0x28>
 800c95a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c95c:	e72c      	b.n	800c7b8 <_svfiprintf_r+0x2c>
 800c95e:	ab03      	add	r3, sp, #12
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	462a      	mov	r2, r5
 800c964:	4b05      	ldr	r3, [pc, #20]	@ (800c97c <_svfiprintf_r+0x1f0>)
 800c966:	a904      	add	r1, sp, #16
 800c968:	4638      	mov	r0, r7
 800c96a:	f7fd f95f 	bl	8009c2c <_printf_i>
 800c96e:	e7ed      	b.n	800c94c <_svfiprintf_r+0x1c0>
 800c970:	0800daa9 	.word	0x0800daa9
 800c974:	0800dab3 	.word	0x0800dab3
 800c978:	080096fd 	.word	0x080096fd
 800c97c:	0800c6d7 	.word	0x0800c6d7
 800c980:	0800daaf 	.word	0x0800daaf

0800c984 <__sflush_r>:
 800c984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c98c:	0716      	lsls	r6, r2, #28
 800c98e:	4605      	mov	r5, r0
 800c990:	460c      	mov	r4, r1
 800c992:	d454      	bmi.n	800ca3e <__sflush_r+0xba>
 800c994:	684b      	ldr	r3, [r1, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	dc02      	bgt.n	800c9a0 <__sflush_r+0x1c>
 800c99a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	dd48      	ble.n	800ca32 <__sflush_r+0xae>
 800c9a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9a2:	2e00      	cmp	r6, #0
 800c9a4:	d045      	beq.n	800ca32 <__sflush_r+0xae>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c9ac:	682f      	ldr	r7, [r5, #0]
 800c9ae:	6a21      	ldr	r1, [r4, #32]
 800c9b0:	602b      	str	r3, [r5, #0]
 800c9b2:	d030      	beq.n	800ca16 <__sflush_r+0x92>
 800c9b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c9b6:	89a3      	ldrh	r3, [r4, #12]
 800c9b8:	0759      	lsls	r1, r3, #29
 800c9ba:	d505      	bpl.n	800c9c8 <__sflush_r+0x44>
 800c9bc:	6863      	ldr	r3, [r4, #4]
 800c9be:	1ad2      	subs	r2, r2, r3
 800c9c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c9c2:	b10b      	cbz	r3, 800c9c8 <__sflush_r+0x44>
 800c9c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c9c6:	1ad2      	subs	r2, r2, r3
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9cc:	6a21      	ldr	r1, [r4, #32]
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	47b0      	blx	r6
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	d106      	bne.n	800c9e6 <__sflush_r+0x62>
 800c9d8:	6829      	ldr	r1, [r5, #0]
 800c9da:	291d      	cmp	r1, #29
 800c9dc:	d82b      	bhi.n	800ca36 <__sflush_r+0xb2>
 800c9de:	4a2a      	ldr	r2, [pc, #168]	@ (800ca88 <__sflush_r+0x104>)
 800c9e0:	410a      	asrs	r2, r1
 800c9e2:	07d6      	lsls	r6, r2, #31
 800c9e4:	d427      	bmi.n	800ca36 <__sflush_r+0xb2>
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	6062      	str	r2, [r4, #4]
 800c9ea:	04d9      	lsls	r1, r3, #19
 800c9ec:	6922      	ldr	r2, [r4, #16]
 800c9ee:	6022      	str	r2, [r4, #0]
 800c9f0:	d504      	bpl.n	800c9fc <__sflush_r+0x78>
 800c9f2:	1c42      	adds	r2, r0, #1
 800c9f4:	d101      	bne.n	800c9fa <__sflush_r+0x76>
 800c9f6:	682b      	ldr	r3, [r5, #0]
 800c9f8:	b903      	cbnz	r3, 800c9fc <__sflush_r+0x78>
 800c9fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800c9fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9fe:	602f      	str	r7, [r5, #0]
 800ca00:	b1b9      	cbz	r1, 800ca32 <__sflush_r+0xae>
 800ca02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca06:	4299      	cmp	r1, r3
 800ca08:	d002      	beq.n	800ca10 <__sflush_r+0x8c>
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	f7fe fcdc 	bl	800b3c8 <_free_r>
 800ca10:	2300      	movs	r3, #0
 800ca12:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca14:	e00d      	b.n	800ca32 <__sflush_r+0xae>
 800ca16:	2301      	movs	r3, #1
 800ca18:	4628      	mov	r0, r5
 800ca1a:	47b0      	blx	r6
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	1c50      	adds	r0, r2, #1
 800ca20:	d1c9      	bne.n	800c9b6 <__sflush_r+0x32>
 800ca22:	682b      	ldr	r3, [r5, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d0c6      	beq.n	800c9b6 <__sflush_r+0x32>
 800ca28:	2b1d      	cmp	r3, #29
 800ca2a:	d001      	beq.n	800ca30 <__sflush_r+0xac>
 800ca2c:	2b16      	cmp	r3, #22
 800ca2e:	d11e      	bne.n	800ca6e <__sflush_r+0xea>
 800ca30:	602f      	str	r7, [r5, #0]
 800ca32:	2000      	movs	r0, #0
 800ca34:	e022      	b.n	800ca7c <__sflush_r+0xf8>
 800ca36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca3a:	b21b      	sxth	r3, r3
 800ca3c:	e01b      	b.n	800ca76 <__sflush_r+0xf2>
 800ca3e:	690f      	ldr	r7, [r1, #16]
 800ca40:	2f00      	cmp	r7, #0
 800ca42:	d0f6      	beq.n	800ca32 <__sflush_r+0xae>
 800ca44:	0793      	lsls	r3, r2, #30
 800ca46:	680e      	ldr	r6, [r1, #0]
 800ca48:	bf08      	it	eq
 800ca4a:	694b      	ldreq	r3, [r1, #20]
 800ca4c:	600f      	str	r7, [r1, #0]
 800ca4e:	bf18      	it	ne
 800ca50:	2300      	movne	r3, #0
 800ca52:	eba6 0807 	sub.w	r8, r6, r7
 800ca56:	608b      	str	r3, [r1, #8]
 800ca58:	f1b8 0f00 	cmp.w	r8, #0
 800ca5c:	dde9      	ble.n	800ca32 <__sflush_r+0xae>
 800ca5e:	6a21      	ldr	r1, [r4, #32]
 800ca60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ca62:	4643      	mov	r3, r8
 800ca64:	463a      	mov	r2, r7
 800ca66:	4628      	mov	r0, r5
 800ca68:	47b0      	blx	r6
 800ca6a:	2800      	cmp	r0, #0
 800ca6c:	dc08      	bgt.n	800ca80 <__sflush_r+0xfc>
 800ca6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca76:	81a3      	strh	r3, [r4, #12]
 800ca78:	f04f 30ff 	mov.w	r0, #4294967295
 800ca7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca80:	4407      	add	r7, r0
 800ca82:	eba8 0800 	sub.w	r8, r8, r0
 800ca86:	e7e7      	b.n	800ca58 <__sflush_r+0xd4>
 800ca88:	dfbffffe 	.word	0xdfbffffe

0800ca8c <_fflush_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	690b      	ldr	r3, [r1, #16]
 800ca90:	4605      	mov	r5, r0
 800ca92:	460c      	mov	r4, r1
 800ca94:	b913      	cbnz	r3, 800ca9c <_fflush_r+0x10>
 800ca96:	2500      	movs	r5, #0
 800ca98:	4628      	mov	r0, r5
 800ca9a:	bd38      	pop	{r3, r4, r5, pc}
 800ca9c:	b118      	cbz	r0, 800caa6 <_fflush_r+0x1a>
 800ca9e:	6a03      	ldr	r3, [r0, #32]
 800caa0:	b90b      	cbnz	r3, 800caa6 <_fflush_r+0x1a>
 800caa2:	f7fd fc83 	bl	800a3ac <__sinit>
 800caa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d0f3      	beq.n	800ca96 <_fflush_r+0xa>
 800caae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cab0:	07d0      	lsls	r0, r2, #31
 800cab2:	d404      	bmi.n	800cabe <_fflush_r+0x32>
 800cab4:	0599      	lsls	r1, r3, #22
 800cab6:	d402      	bmi.n	800cabe <_fflush_r+0x32>
 800cab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800caba:	f7fd fdfc 	bl	800a6b6 <__retarget_lock_acquire_recursive>
 800cabe:	4628      	mov	r0, r5
 800cac0:	4621      	mov	r1, r4
 800cac2:	f7ff ff5f 	bl	800c984 <__sflush_r>
 800cac6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cac8:	07da      	lsls	r2, r3, #31
 800caca:	4605      	mov	r5, r0
 800cacc:	d4e4      	bmi.n	800ca98 <_fflush_r+0xc>
 800cace:	89a3      	ldrh	r3, [r4, #12]
 800cad0:	059b      	lsls	r3, r3, #22
 800cad2:	d4e1      	bmi.n	800ca98 <_fflush_r+0xc>
 800cad4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cad6:	f7fd fdef 	bl	800a6b8 <__retarget_lock_release_recursive>
 800cada:	e7dd      	b.n	800ca98 <_fflush_r+0xc>

0800cadc <fiprintf>:
 800cadc:	b40e      	push	{r1, r2, r3}
 800cade:	b503      	push	{r0, r1, lr}
 800cae0:	4601      	mov	r1, r0
 800cae2:	ab03      	add	r3, sp, #12
 800cae4:	4805      	ldr	r0, [pc, #20]	@ (800cafc <fiprintf+0x20>)
 800cae6:	f853 2b04 	ldr.w	r2, [r3], #4
 800caea:	6800      	ldr	r0, [r0, #0]
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	f000 f8a3 	bl	800cc38 <_vfiprintf_r>
 800caf2:	b002      	add	sp, #8
 800caf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800caf8:	b003      	add	sp, #12
 800cafa:	4770      	bx	lr
 800cafc:	20000198 	.word	0x20000198

0800cb00 <memmove>:
 800cb00:	4288      	cmp	r0, r1
 800cb02:	b510      	push	{r4, lr}
 800cb04:	eb01 0402 	add.w	r4, r1, r2
 800cb08:	d902      	bls.n	800cb10 <memmove+0x10>
 800cb0a:	4284      	cmp	r4, r0
 800cb0c:	4623      	mov	r3, r4
 800cb0e:	d807      	bhi.n	800cb20 <memmove+0x20>
 800cb10:	1e43      	subs	r3, r0, #1
 800cb12:	42a1      	cmp	r1, r4
 800cb14:	d008      	beq.n	800cb28 <memmove+0x28>
 800cb16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb1e:	e7f8      	b.n	800cb12 <memmove+0x12>
 800cb20:	4402      	add	r2, r0
 800cb22:	4601      	mov	r1, r0
 800cb24:	428a      	cmp	r2, r1
 800cb26:	d100      	bne.n	800cb2a <memmove+0x2a>
 800cb28:	bd10      	pop	{r4, pc}
 800cb2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb32:	e7f7      	b.n	800cb24 <memmove+0x24>

0800cb34 <_sbrk_r>:
 800cb34:	b538      	push	{r3, r4, r5, lr}
 800cb36:	4d06      	ldr	r5, [pc, #24]	@ (800cb50 <_sbrk_r+0x1c>)
 800cb38:	2300      	movs	r3, #0
 800cb3a:	4604      	mov	r4, r0
 800cb3c:	4608      	mov	r0, r1
 800cb3e:	602b      	str	r3, [r5, #0]
 800cb40:	f7f5 fb32 	bl	80021a8 <_sbrk>
 800cb44:	1c43      	adds	r3, r0, #1
 800cb46:	d102      	bne.n	800cb4e <_sbrk_r+0x1a>
 800cb48:	682b      	ldr	r3, [r5, #0]
 800cb4a:	b103      	cbz	r3, 800cb4e <_sbrk_r+0x1a>
 800cb4c:	6023      	str	r3, [r4, #0]
 800cb4e:	bd38      	pop	{r3, r4, r5, pc}
 800cb50:	200070e0 	.word	0x200070e0

0800cb54 <abort>:
 800cb54:	b508      	push	{r3, lr}
 800cb56:	2006      	movs	r0, #6
 800cb58:	f000 fa42 	bl	800cfe0 <raise>
 800cb5c:	2001      	movs	r0, #1
 800cb5e:	f7f5 faaa 	bl	80020b6 <_exit>

0800cb62 <_calloc_r>:
 800cb62:	b570      	push	{r4, r5, r6, lr}
 800cb64:	fba1 5402 	umull	r5, r4, r1, r2
 800cb68:	b93c      	cbnz	r4, 800cb7a <_calloc_r+0x18>
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	f7fe ffda 	bl	800bb24 <_malloc_r>
 800cb70:	4606      	mov	r6, r0
 800cb72:	b928      	cbnz	r0, 800cb80 <_calloc_r+0x1e>
 800cb74:	2600      	movs	r6, #0
 800cb76:	4630      	mov	r0, r6
 800cb78:	bd70      	pop	{r4, r5, r6, pc}
 800cb7a:	220c      	movs	r2, #12
 800cb7c:	6002      	str	r2, [r0, #0]
 800cb7e:	e7f9      	b.n	800cb74 <_calloc_r+0x12>
 800cb80:	462a      	mov	r2, r5
 800cb82:	4621      	mov	r1, r4
 800cb84:	f7fd fcab 	bl	800a4de <memset>
 800cb88:	e7f5      	b.n	800cb76 <_calloc_r+0x14>

0800cb8a <_realloc_r>:
 800cb8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8e:	4680      	mov	r8, r0
 800cb90:	4615      	mov	r5, r2
 800cb92:	460c      	mov	r4, r1
 800cb94:	b921      	cbnz	r1, 800cba0 <_realloc_r+0x16>
 800cb96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	f7fe bfc2 	b.w	800bb24 <_malloc_r>
 800cba0:	b92a      	cbnz	r2, 800cbae <_realloc_r+0x24>
 800cba2:	f7fe fc11 	bl	800b3c8 <_free_r>
 800cba6:	2400      	movs	r4, #0
 800cba8:	4620      	mov	r0, r4
 800cbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbae:	f000 fa33 	bl	800d018 <_malloc_usable_size_r>
 800cbb2:	4285      	cmp	r5, r0
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	d802      	bhi.n	800cbbe <_realloc_r+0x34>
 800cbb8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cbbc:	d8f4      	bhi.n	800cba8 <_realloc_r+0x1e>
 800cbbe:	4629      	mov	r1, r5
 800cbc0:	4640      	mov	r0, r8
 800cbc2:	f7fe ffaf 	bl	800bb24 <_malloc_r>
 800cbc6:	4607      	mov	r7, r0
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d0ec      	beq.n	800cba6 <_realloc_r+0x1c>
 800cbcc:	42b5      	cmp	r5, r6
 800cbce:	462a      	mov	r2, r5
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	bf28      	it	cs
 800cbd4:	4632      	movcs	r2, r6
 800cbd6:	f7fd fd70 	bl	800a6ba <memcpy>
 800cbda:	4621      	mov	r1, r4
 800cbdc:	4640      	mov	r0, r8
 800cbde:	f7fe fbf3 	bl	800b3c8 <_free_r>
 800cbe2:	463c      	mov	r4, r7
 800cbe4:	e7e0      	b.n	800cba8 <_realloc_r+0x1e>

0800cbe6 <__sfputc_r>:
 800cbe6:	6893      	ldr	r3, [r2, #8]
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	b410      	push	{r4}
 800cbee:	6093      	str	r3, [r2, #8]
 800cbf0:	da08      	bge.n	800cc04 <__sfputc_r+0x1e>
 800cbf2:	6994      	ldr	r4, [r2, #24]
 800cbf4:	42a3      	cmp	r3, r4
 800cbf6:	db01      	blt.n	800cbfc <__sfputc_r+0x16>
 800cbf8:	290a      	cmp	r1, #10
 800cbfa:	d103      	bne.n	800cc04 <__sfputc_r+0x1e>
 800cbfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc00:	f000 b932 	b.w	800ce68 <__swbuf_r>
 800cc04:	6813      	ldr	r3, [r2, #0]
 800cc06:	1c58      	adds	r0, r3, #1
 800cc08:	6010      	str	r0, [r2, #0]
 800cc0a:	7019      	strb	r1, [r3, #0]
 800cc0c:	4608      	mov	r0, r1
 800cc0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <__sfputs_r>:
 800cc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc16:	4606      	mov	r6, r0
 800cc18:	460f      	mov	r7, r1
 800cc1a:	4614      	mov	r4, r2
 800cc1c:	18d5      	adds	r5, r2, r3
 800cc1e:	42ac      	cmp	r4, r5
 800cc20:	d101      	bne.n	800cc26 <__sfputs_r+0x12>
 800cc22:	2000      	movs	r0, #0
 800cc24:	e007      	b.n	800cc36 <__sfputs_r+0x22>
 800cc26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc2a:	463a      	mov	r2, r7
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	f7ff ffda 	bl	800cbe6 <__sfputc_r>
 800cc32:	1c43      	adds	r3, r0, #1
 800cc34:	d1f3      	bne.n	800cc1e <__sfputs_r+0xa>
 800cc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc38 <_vfiprintf_r>:
 800cc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc3c:	460d      	mov	r5, r1
 800cc3e:	b09d      	sub	sp, #116	@ 0x74
 800cc40:	4614      	mov	r4, r2
 800cc42:	4698      	mov	r8, r3
 800cc44:	4606      	mov	r6, r0
 800cc46:	b118      	cbz	r0, 800cc50 <_vfiprintf_r+0x18>
 800cc48:	6a03      	ldr	r3, [r0, #32]
 800cc4a:	b90b      	cbnz	r3, 800cc50 <_vfiprintf_r+0x18>
 800cc4c:	f7fd fbae 	bl	800a3ac <__sinit>
 800cc50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc52:	07d9      	lsls	r1, r3, #31
 800cc54:	d405      	bmi.n	800cc62 <_vfiprintf_r+0x2a>
 800cc56:	89ab      	ldrh	r3, [r5, #12]
 800cc58:	059a      	lsls	r2, r3, #22
 800cc5a:	d402      	bmi.n	800cc62 <_vfiprintf_r+0x2a>
 800cc5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc5e:	f7fd fd2a 	bl	800a6b6 <__retarget_lock_acquire_recursive>
 800cc62:	89ab      	ldrh	r3, [r5, #12]
 800cc64:	071b      	lsls	r3, r3, #28
 800cc66:	d501      	bpl.n	800cc6c <_vfiprintf_r+0x34>
 800cc68:	692b      	ldr	r3, [r5, #16]
 800cc6a:	b99b      	cbnz	r3, 800cc94 <_vfiprintf_r+0x5c>
 800cc6c:	4629      	mov	r1, r5
 800cc6e:	4630      	mov	r0, r6
 800cc70:	f000 f938 	bl	800cee4 <__swsetup_r>
 800cc74:	b170      	cbz	r0, 800cc94 <_vfiprintf_r+0x5c>
 800cc76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc78:	07dc      	lsls	r4, r3, #31
 800cc7a:	d504      	bpl.n	800cc86 <_vfiprintf_r+0x4e>
 800cc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc80:	b01d      	add	sp, #116	@ 0x74
 800cc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc86:	89ab      	ldrh	r3, [r5, #12]
 800cc88:	0598      	lsls	r0, r3, #22
 800cc8a:	d4f7      	bmi.n	800cc7c <_vfiprintf_r+0x44>
 800cc8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc8e:	f7fd fd13 	bl	800a6b8 <__retarget_lock_release_recursive>
 800cc92:	e7f3      	b.n	800cc7c <_vfiprintf_r+0x44>
 800cc94:	2300      	movs	r3, #0
 800cc96:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc98:	2320      	movs	r3, #32
 800cc9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cca2:	2330      	movs	r3, #48	@ 0x30
 800cca4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ce54 <_vfiprintf_r+0x21c>
 800cca8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccac:	f04f 0901 	mov.w	r9, #1
 800ccb0:	4623      	mov	r3, r4
 800ccb2:	469a      	mov	sl, r3
 800ccb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccb8:	b10a      	cbz	r2, 800ccbe <_vfiprintf_r+0x86>
 800ccba:	2a25      	cmp	r2, #37	@ 0x25
 800ccbc:	d1f9      	bne.n	800ccb2 <_vfiprintf_r+0x7a>
 800ccbe:	ebba 0b04 	subs.w	fp, sl, r4
 800ccc2:	d00b      	beq.n	800ccdc <_vfiprintf_r+0xa4>
 800ccc4:	465b      	mov	r3, fp
 800ccc6:	4622      	mov	r2, r4
 800ccc8:	4629      	mov	r1, r5
 800ccca:	4630      	mov	r0, r6
 800cccc:	f7ff ffa2 	bl	800cc14 <__sfputs_r>
 800ccd0:	3001      	adds	r0, #1
 800ccd2:	f000 80a7 	beq.w	800ce24 <_vfiprintf_r+0x1ec>
 800ccd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccd8:	445a      	add	r2, fp
 800ccda:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccdc:	f89a 3000 	ldrb.w	r3, [sl]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f000 809f 	beq.w	800ce24 <_vfiprintf_r+0x1ec>
 800cce6:	2300      	movs	r3, #0
 800cce8:	f04f 32ff 	mov.w	r2, #4294967295
 800ccec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccf0:	f10a 0a01 	add.w	sl, sl, #1
 800ccf4:	9304      	str	r3, [sp, #16]
 800ccf6:	9307      	str	r3, [sp, #28]
 800ccf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccfc:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccfe:	4654      	mov	r4, sl
 800cd00:	2205      	movs	r2, #5
 800cd02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd06:	4853      	ldr	r0, [pc, #332]	@ (800ce54 <_vfiprintf_r+0x21c>)
 800cd08:	f7f3 fa82 	bl	8000210 <memchr>
 800cd0c:	9a04      	ldr	r2, [sp, #16]
 800cd0e:	b9d8      	cbnz	r0, 800cd48 <_vfiprintf_r+0x110>
 800cd10:	06d1      	lsls	r1, r2, #27
 800cd12:	bf44      	itt	mi
 800cd14:	2320      	movmi	r3, #32
 800cd16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd1a:	0713      	lsls	r3, r2, #28
 800cd1c:	bf44      	itt	mi
 800cd1e:	232b      	movmi	r3, #43	@ 0x2b
 800cd20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd24:	f89a 3000 	ldrb.w	r3, [sl]
 800cd28:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd2a:	d015      	beq.n	800cd58 <_vfiprintf_r+0x120>
 800cd2c:	9a07      	ldr	r2, [sp, #28]
 800cd2e:	4654      	mov	r4, sl
 800cd30:	2000      	movs	r0, #0
 800cd32:	f04f 0c0a 	mov.w	ip, #10
 800cd36:	4621      	mov	r1, r4
 800cd38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd3c:	3b30      	subs	r3, #48	@ 0x30
 800cd3e:	2b09      	cmp	r3, #9
 800cd40:	d94b      	bls.n	800cdda <_vfiprintf_r+0x1a2>
 800cd42:	b1b0      	cbz	r0, 800cd72 <_vfiprintf_r+0x13a>
 800cd44:	9207      	str	r2, [sp, #28]
 800cd46:	e014      	b.n	800cd72 <_vfiprintf_r+0x13a>
 800cd48:	eba0 0308 	sub.w	r3, r0, r8
 800cd4c:	fa09 f303 	lsl.w	r3, r9, r3
 800cd50:	4313      	orrs	r3, r2
 800cd52:	9304      	str	r3, [sp, #16]
 800cd54:	46a2      	mov	sl, r4
 800cd56:	e7d2      	b.n	800ccfe <_vfiprintf_r+0xc6>
 800cd58:	9b03      	ldr	r3, [sp, #12]
 800cd5a:	1d19      	adds	r1, r3, #4
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	9103      	str	r1, [sp, #12]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	bfbb      	ittet	lt
 800cd64:	425b      	neglt	r3, r3
 800cd66:	f042 0202 	orrlt.w	r2, r2, #2
 800cd6a:	9307      	strge	r3, [sp, #28]
 800cd6c:	9307      	strlt	r3, [sp, #28]
 800cd6e:	bfb8      	it	lt
 800cd70:	9204      	strlt	r2, [sp, #16]
 800cd72:	7823      	ldrb	r3, [r4, #0]
 800cd74:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd76:	d10a      	bne.n	800cd8e <_vfiprintf_r+0x156>
 800cd78:	7863      	ldrb	r3, [r4, #1]
 800cd7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd7c:	d132      	bne.n	800cde4 <_vfiprintf_r+0x1ac>
 800cd7e:	9b03      	ldr	r3, [sp, #12]
 800cd80:	1d1a      	adds	r2, r3, #4
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	9203      	str	r2, [sp, #12]
 800cd86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd8a:	3402      	adds	r4, #2
 800cd8c:	9305      	str	r3, [sp, #20]
 800cd8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ce64 <_vfiprintf_r+0x22c>
 800cd92:	7821      	ldrb	r1, [r4, #0]
 800cd94:	2203      	movs	r2, #3
 800cd96:	4650      	mov	r0, sl
 800cd98:	f7f3 fa3a 	bl	8000210 <memchr>
 800cd9c:	b138      	cbz	r0, 800cdae <_vfiprintf_r+0x176>
 800cd9e:	9b04      	ldr	r3, [sp, #16]
 800cda0:	eba0 000a 	sub.w	r0, r0, sl
 800cda4:	2240      	movs	r2, #64	@ 0x40
 800cda6:	4082      	lsls	r2, r0
 800cda8:	4313      	orrs	r3, r2
 800cdaa:	3401      	adds	r4, #1
 800cdac:	9304      	str	r3, [sp, #16]
 800cdae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdb2:	4829      	ldr	r0, [pc, #164]	@ (800ce58 <_vfiprintf_r+0x220>)
 800cdb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cdb8:	2206      	movs	r2, #6
 800cdba:	f7f3 fa29 	bl	8000210 <memchr>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	d03f      	beq.n	800ce42 <_vfiprintf_r+0x20a>
 800cdc2:	4b26      	ldr	r3, [pc, #152]	@ (800ce5c <_vfiprintf_r+0x224>)
 800cdc4:	bb1b      	cbnz	r3, 800ce0e <_vfiprintf_r+0x1d6>
 800cdc6:	9b03      	ldr	r3, [sp, #12]
 800cdc8:	3307      	adds	r3, #7
 800cdca:	f023 0307 	bic.w	r3, r3, #7
 800cdce:	3308      	adds	r3, #8
 800cdd0:	9303      	str	r3, [sp, #12]
 800cdd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd4:	443b      	add	r3, r7
 800cdd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdd8:	e76a      	b.n	800ccb0 <_vfiprintf_r+0x78>
 800cdda:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdde:	460c      	mov	r4, r1
 800cde0:	2001      	movs	r0, #1
 800cde2:	e7a8      	b.n	800cd36 <_vfiprintf_r+0xfe>
 800cde4:	2300      	movs	r3, #0
 800cde6:	3401      	adds	r4, #1
 800cde8:	9305      	str	r3, [sp, #20]
 800cdea:	4619      	mov	r1, r3
 800cdec:	f04f 0c0a 	mov.w	ip, #10
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdf6:	3a30      	subs	r2, #48	@ 0x30
 800cdf8:	2a09      	cmp	r2, #9
 800cdfa:	d903      	bls.n	800ce04 <_vfiprintf_r+0x1cc>
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d0c6      	beq.n	800cd8e <_vfiprintf_r+0x156>
 800ce00:	9105      	str	r1, [sp, #20]
 800ce02:	e7c4      	b.n	800cd8e <_vfiprintf_r+0x156>
 800ce04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce08:	4604      	mov	r4, r0
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e7f0      	b.n	800cdf0 <_vfiprintf_r+0x1b8>
 800ce0e:	ab03      	add	r3, sp, #12
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	462a      	mov	r2, r5
 800ce14:	4b12      	ldr	r3, [pc, #72]	@ (800ce60 <_vfiprintf_r+0x228>)
 800ce16:	a904      	add	r1, sp, #16
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f7fc fc6f 	bl	80096fc <_printf_float>
 800ce1e:	4607      	mov	r7, r0
 800ce20:	1c78      	adds	r0, r7, #1
 800ce22:	d1d6      	bne.n	800cdd2 <_vfiprintf_r+0x19a>
 800ce24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce26:	07d9      	lsls	r1, r3, #31
 800ce28:	d405      	bmi.n	800ce36 <_vfiprintf_r+0x1fe>
 800ce2a:	89ab      	ldrh	r3, [r5, #12]
 800ce2c:	059a      	lsls	r2, r3, #22
 800ce2e:	d402      	bmi.n	800ce36 <_vfiprintf_r+0x1fe>
 800ce30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce32:	f7fd fc41 	bl	800a6b8 <__retarget_lock_release_recursive>
 800ce36:	89ab      	ldrh	r3, [r5, #12]
 800ce38:	065b      	lsls	r3, r3, #25
 800ce3a:	f53f af1f 	bmi.w	800cc7c <_vfiprintf_r+0x44>
 800ce3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce40:	e71e      	b.n	800cc80 <_vfiprintf_r+0x48>
 800ce42:	ab03      	add	r3, sp, #12
 800ce44:	9300      	str	r3, [sp, #0]
 800ce46:	462a      	mov	r2, r5
 800ce48:	4b05      	ldr	r3, [pc, #20]	@ (800ce60 <_vfiprintf_r+0x228>)
 800ce4a:	a904      	add	r1, sp, #16
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	f7fc feed 	bl	8009c2c <_printf_i>
 800ce52:	e7e4      	b.n	800ce1e <_vfiprintf_r+0x1e6>
 800ce54:	0800daa9 	.word	0x0800daa9
 800ce58:	0800dab3 	.word	0x0800dab3
 800ce5c:	080096fd 	.word	0x080096fd
 800ce60:	0800cc15 	.word	0x0800cc15
 800ce64:	0800daaf 	.word	0x0800daaf

0800ce68 <__swbuf_r>:
 800ce68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6a:	460e      	mov	r6, r1
 800ce6c:	4614      	mov	r4, r2
 800ce6e:	4605      	mov	r5, r0
 800ce70:	b118      	cbz	r0, 800ce7a <__swbuf_r+0x12>
 800ce72:	6a03      	ldr	r3, [r0, #32]
 800ce74:	b90b      	cbnz	r3, 800ce7a <__swbuf_r+0x12>
 800ce76:	f7fd fa99 	bl	800a3ac <__sinit>
 800ce7a:	69a3      	ldr	r3, [r4, #24]
 800ce7c:	60a3      	str	r3, [r4, #8]
 800ce7e:	89a3      	ldrh	r3, [r4, #12]
 800ce80:	071a      	lsls	r2, r3, #28
 800ce82:	d501      	bpl.n	800ce88 <__swbuf_r+0x20>
 800ce84:	6923      	ldr	r3, [r4, #16]
 800ce86:	b943      	cbnz	r3, 800ce9a <__swbuf_r+0x32>
 800ce88:	4621      	mov	r1, r4
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	f000 f82a 	bl	800cee4 <__swsetup_r>
 800ce90:	b118      	cbz	r0, 800ce9a <__swbuf_r+0x32>
 800ce92:	f04f 37ff 	mov.w	r7, #4294967295
 800ce96:	4638      	mov	r0, r7
 800ce98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	6922      	ldr	r2, [r4, #16]
 800ce9e:	1a98      	subs	r0, r3, r2
 800cea0:	6963      	ldr	r3, [r4, #20]
 800cea2:	b2f6      	uxtb	r6, r6
 800cea4:	4283      	cmp	r3, r0
 800cea6:	4637      	mov	r7, r6
 800cea8:	dc05      	bgt.n	800ceb6 <__swbuf_r+0x4e>
 800ceaa:	4621      	mov	r1, r4
 800ceac:	4628      	mov	r0, r5
 800ceae:	f7ff fded 	bl	800ca8c <_fflush_r>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d1ed      	bne.n	800ce92 <__swbuf_r+0x2a>
 800ceb6:	68a3      	ldr	r3, [r4, #8]
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	60a3      	str	r3, [r4, #8]
 800cebc:	6823      	ldr	r3, [r4, #0]
 800cebe:	1c5a      	adds	r2, r3, #1
 800cec0:	6022      	str	r2, [r4, #0]
 800cec2:	701e      	strb	r6, [r3, #0]
 800cec4:	6962      	ldr	r2, [r4, #20]
 800cec6:	1c43      	adds	r3, r0, #1
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d004      	beq.n	800ced6 <__swbuf_r+0x6e>
 800cecc:	89a3      	ldrh	r3, [r4, #12]
 800cece:	07db      	lsls	r3, r3, #31
 800ced0:	d5e1      	bpl.n	800ce96 <__swbuf_r+0x2e>
 800ced2:	2e0a      	cmp	r6, #10
 800ced4:	d1df      	bne.n	800ce96 <__swbuf_r+0x2e>
 800ced6:	4621      	mov	r1, r4
 800ced8:	4628      	mov	r0, r5
 800ceda:	f7ff fdd7 	bl	800ca8c <_fflush_r>
 800cede:	2800      	cmp	r0, #0
 800cee0:	d0d9      	beq.n	800ce96 <__swbuf_r+0x2e>
 800cee2:	e7d6      	b.n	800ce92 <__swbuf_r+0x2a>

0800cee4 <__swsetup_r>:
 800cee4:	b538      	push	{r3, r4, r5, lr}
 800cee6:	4b29      	ldr	r3, [pc, #164]	@ (800cf8c <__swsetup_r+0xa8>)
 800cee8:	4605      	mov	r5, r0
 800ceea:	6818      	ldr	r0, [r3, #0]
 800ceec:	460c      	mov	r4, r1
 800ceee:	b118      	cbz	r0, 800cef8 <__swsetup_r+0x14>
 800cef0:	6a03      	ldr	r3, [r0, #32]
 800cef2:	b90b      	cbnz	r3, 800cef8 <__swsetup_r+0x14>
 800cef4:	f7fd fa5a 	bl	800a3ac <__sinit>
 800cef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cefc:	0719      	lsls	r1, r3, #28
 800cefe:	d422      	bmi.n	800cf46 <__swsetup_r+0x62>
 800cf00:	06da      	lsls	r2, r3, #27
 800cf02:	d407      	bmi.n	800cf14 <__swsetup_r+0x30>
 800cf04:	2209      	movs	r2, #9
 800cf06:	602a      	str	r2, [r5, #0]
 800cf08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf0c:	81a3      	strh	r3, [r4, #12]
 800cf0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf12:	e033      	b.n	800cf7c <__swsetup_r+0x98>
 800cf14:	0758      	lsls	r0, r3, #29
 800cf16:	d512      	bpl.n	800cf3e <__swsetup_r+0x5a>
 800cf18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf1a:	b141      	cbz	r1, 800cf2e <__swsetup_r+0x4a>
 800cf1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf20:	4299      	cmp	r1, r3
 800cf22:	d002      	beq.n	800cf2a <__swsetup_r+0x46>
 800cf24:	4628      	mov	r0, r5
 800cf26:	f7fe fa4f 	bl	800b3c8 <_free_r>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf2e:	89a3      	ldrh	r3, [r4, #12]
 800cf30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf34:	81a3      	strh	r3, [r4, #12]
 800cf36:	2300      	movs	r3, #0
 800cf38:	6063      	str	r3, [r4, #4]
 800cf3a:	6923      	ldr	r3, [r4, #16]
 800cf3c:	6023      	str	r3, [r4, #0]
 800cf3e:	89a3      	ldrh	r3, [r4, #12]
 800cf40:	f043 0308 	orr.w	r3, r3, #8
 800cf44:	81a3      	strh	r3, [r4, #12]
 800cf46:	6923      	ldr	r3, [r4, #16]
 800cf48:	b94b      	cbnz	r3, 800cf5e <__swsetup_r+0x7a>
 800cf4a:	89a3      	ldrh	r3, [r4, #12]
 800cf4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf54:	d003      	beq.n	800cf5e <__swsetup_r+0x7a>
 800cf56:	4621      	mov	r1, r4
 800cf58:	4628      	mov	r0, r5
 800cf5a:	f000 f88b 	bl	800d074 <__smakebuf_r>
 800cf5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf62:	f013 0201 	ands.w	r2, r3, #1
 800cf66:	d00a      	beq.n	800cf7e <__swsetup_r+0x9a>
 800cf68:	2200      	movs	r2, #0
 800cf6a:	60a2      	str	r2, [r4, #8]
 800cf6c:	6962      	ldr	r2, [r4, #20]
 800cf6e:	4252      	negs	r2, r2
 800cf70:	61a2      	str	r2, [r4, #24]
 800cf72:	6922      	ldr	r2, [r4, #16]
 800cf74:	b942      	cbnz	r2, 800cf88 <__swsetup_r+0xa4>
 800cf76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cf7a:	d1c5      	bne.n	800cf08 <__swsetup_r+0x24>
 800cf7c:	bd38      	pop	{r3, r4, r5, pc}
 800cf7e:	0799      	lsls	r1, r3, #30
 800cf80:	bf58      	it	pl
 800cf82:	6962      	ldrpl	r2, [r4, #20]
 800cf84:	60a2      	str	r2, [r4, #8]
 800cf86:	e7f4      	b.n	800cf72 <__swsetup_r+0x8e>
 800cf88:	2000      	movs	r0, #0
 800cf8a:	e7f7      	b.n	800cf7c <__swsetup_r+0x98>
 800cf8c:	20000198 	.word	0x20000198

0800cf90 <_raise_r>:
 800cf90:	291f      	cmp	r1, #31
 800cf92:	b538      	push	{r3, r4, r5, lr}
 800cf94:	4605      	mov	r5, r0
 800cf96:	460c      	mov	r4, r1
 800cf98:	d904      	bls.n	800cfa4 <_raise_r+0x14>
 800cf9a:	2316      	movs	r3, #22
 800cf9c:	6003      	str	r3, [r0, #0]
 800cf9e:	f04f 30ff 	mov.w	r0, #4294967295
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
 800cfa4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cfa6:	b112      	cbz	r2, 800cfae <_raise_r+0x1e>
 800cfa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfac:	b94b      	cbnz	r3, 800cfc2 <_raise_r+0x32>
 800cfae:	4628      	mov	r0, r5
 800cfb0:	f000 f830 	bl	800d014 <_getpid_r>
 800cfb4:	4622      	mov	r2, r4
 800cfb6:	4601      	mov	r1, r0
 800cfb8:	4628      	mov	r0, r5
 800cfba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfbe:	f000 b817 	b.w	800cff0 <_kill_r>
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d00a      	beq.n	800cfdc <_raise_r+0x4c>
 800cfc6:	1c59      	adds	r1, r3, #1
 800cfc8:	d103      	bne.n	800cfd2 <_raise_r+0x42>
 800cfca:	2316      	movs	r3, #22
 800cfcc:	6003      	str	r3, [r0, #0]
 800cfce:	2001      	movs	r0, #1
 800cfd0:	e7e7      	b.n	800cfa2 <_raise_r+0x12>
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cfd8:	4620      	mov	r0, r4
 800cfda:	4798      	blx	r3
 800cfdc:	2000      	movs	r0, #0
 800cfde:	e7e0      	b.n	800cfa2 <_raise_r+0x12>

0800cfe0 <raise>:
 800cfe0:	4b02      	ldr	r3, [pc, #8]	@ (800cfec <raise+0xc>)
 800cfe2:	4601      	mov	r1, r0
 800cfe4:	6818      	ldr	r0, [r3, #0]
 800cfe6:	f7ff bfd3 	b.w	800cf90 <_raise_r>
 800cfea:	bf00      	nop
 800cfec:	20000198 	.word	0x20000198

0800cff0 <_kill_r>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	4d07      	ldr	r5, [pc, #28]	@ (800d010 <_kill_r+0x20>)
 800cff4:	2300      	movs	r3, #0
 800cff6:	4604      	mov	r4, r0
 800cff8:	4608      	mov	r0, r1
 800cffa:	4611      	mov	r1, r2
 800cffc:	602b      	str	r3, [r5, #0]
 800cffe:	f7f5 f84a 	bl	8002096 <_kill>
 800d002:	1c43      	adds	r3, r0, #1
 800d004:	d102      	bne.n	800d00c <_kill_r+0x1c>
 800d006:	682b      	ldr	r3, [r5, #0]
 800d008:	b103      	cbz	r3, 800d00c <_kill_r+0x1c>
 800d00a:	6023      	str	r3, [r4, #0]
 800d00c:	bd38      	pop	{r3, r4, r5, pc}
 800d00e:	bf00      	nop
 800d010:	200070e0 	.word	0x200070e0

0800d014 <_getpid_r>:
 800d014:	f7f5 b837 	b.w	8002086 <_getpid>

0800d018 <_malloc_usable_size_r>:
 800d018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d01c:	1f18      	subs	r0, r3, #4
 800d01e:	2b00      	cmp	r3, #0
 800d020:	bfbc      	itt	lt
 800d022:	580b      	ldrlt	r3, [r1, r0]
 800d024:	18c0      	addlt	r0, r0, r3
 800d026:	4770      	bx	lr

0800d028 <__swhatbuf_r>:
 800d028:	b570      	push	{r4, r5, r6, lr}
 800d02a:	460c      	mov	r4, r1
 800d02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d030:	2900      	cmp	r1, #0
 800d032:	b096      	sub	sp, #88	@ 0x58
 800d034:	4615      	mov	r5, r2
 800d036:	461e      	mov	r6, r3
 800d038:	da0d      	bge.n	800d056 <__swhatbuf_r+0x2e>
 800d03a:	89a3      	ldrh	r3, [r4, #12]
 800d03c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d040:	f04f 0100 	mov.w	r1, #0
 800d044:	bf14      	ite	ne
 800d046:	2340      	movne	r3, #64	@ 0x40
 800d048:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d04c:	2000      	movs	r0, #0
 800d04e:	6031      	str	r1, [r6, #0]
 800d050:	602b      	str	r3, [r5, #0]
 800d052:	b016      	add	sp, #88	@ 0x58
 800d054:	bd70      	pop	{r4, r5, r6, pc}
 800d056:	466a      	mov	r2, sp
 800d058:	f000 f848 	bl	800d0ec <_fstat_r>
 800d05c:	2800      	cmp	r0, #0
 800d05e:	dbec      	blt.n	800d03a <__swhatbuf_r+0x12>
 800d060:	9901      	ldr	r1, [sp, #4]
 800d062:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d066:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d06a:	4259      	negs	r1, r3
 800d06c:	4159      	adcs	r1, r3
 800d06e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d072:	e7eb      	b.n	800d04c <__swhatbuf_r+0x24>

0800d074 <__smakebuf_r>:
 800d074:	898b      	ldrh	r3, [r1, #12]
 800d076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d078:	079d      	lsls	r5, r3, #30
 800d07a:	4606      	mov	r6, r0
 800d07c:	460c      	mov	r4, r1
 800d07e:	d507      	bpl.n	800d090 <__smakebuf_r+0x1c>
 800d080:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d084:	6023      	str	r3, [r4, #0]
 800d086:	6123      	str	r3, [r4, #16]
 800d088:	2301      	movs	r3, #1
 800d08a:	6163      	str	r3, [r4, #20]
 800d08c:	b003      	add	sp, #12
 800d08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d090:	ab01      	add	r3, sp, #4
 800d092:	466a      	mov	r2, sp
 800d094:	f7ff ffc8 	bl	800d028 <__swhatbuf_r>
 800d098:	9f00      	ldr	r7, [sp, #0]
 800d09a:	4605      	mov	r5, r0
 800d09c:	4639      	mov	r1, r7
 800d09e:	4630      	mov	r0, r6
 800d0a0:	f7fe fd40 	bl	800bb24 <_malloc_r>
 800d0a4:	b948      	cbnz	r0, 800d0ba <__smakebuf_r+0x46>
 800d0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0aa:	059a      	lsls	r2, r3, #22
 800d0ac:	d4ee      	bmi.n	800d08c <__smakebuf_r+0x18>
 800d0ae:	f023 0303 	bic.w	r3, r3, #3
 800d0b2:	f043 0302 	orr.w	r3, r3, #2
 800d0b6:	81a3      	strh	r3, [r4, #12]
 800d0b8:	e7e2      	b.n	800d080 <__smakebuf_r+0xc>
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	6020      	str	r0, [r4, #0]
 800d0be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0c2:	81a3      	strh	r3, [r4, #12]
 800d0c4:	9b01      	ldr	r3, [sp, #4]
 800d0c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d0ca:	b15b      	cbz	r3, 800d0e4 <__smakebuf_r+0x70>
 800d0cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f000 f81d 	bl	800d110 <_isatty_r>
 800d0d6:	b128      	cbz	r0, 800d0e4 <__smakebuf_r+0x70>
 800d0d8:	89a3      	ldrh	r3, [r4, #12]
 800d0da:	f023 0303 	bic.w	r3, r3, #3
 800d0de:	f043 0301 	orr.w	r3, r3, #1
 800d0e2:	81a3      	strh	r3, [r4, #12]
 800d0e4:	89a3      	ldrh	r3, [r4, #12]
 800d0e6:	431d      	orrs	r5, r3
 800d0e8:	81a5      	strh	r5, [r4, #12]
 800d0ea:	e7cf      	b.n	800d08c <__smakebuf_r+0x18>

0800d0ec <_fstat_r>:
 800d0ec:	b538      	push	{r3, r4, r5, lr}
 800d0ee:	4d07      	ldr	r5, [pc, #28]	@ (800d10c <_fstat_r+0x20>)
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	4608      	mov	r0, r1
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	602b      	str	r3, [r5, #0]
 800d0fa:	f7f5 f82c 	bl	8002156 <_fstat>
 800d0fe:	1c43      	adds	r3, r0, #1
 800d100:	d102      	bne.n	800d108 <_fstat_r+0x1c>
 800d102:	682b      	ldr	r3, [r5, #0]
 800d104:	b103      	cbz	r3, 800d108 <_fstat_r+0x1c>
 800d106:	6023      	str	r3, [r4, #0]
 800d108:	bd38      	pop	{r3, r4, r5, pc}
 800d10a:	bf00      	nop
 800d10c:	200070e0 	.word	0x200070e0

0800d110 <_isatty_r>:
 800d110:	b538      	push	{r3, r4, r5, lr}
 800d112:	4d06      	ldr	r5, [pc, #24]	@ (800d12c <_isatty_r+0x1c>)
 800d114:	2300      	movs	r3, #0
 800d116:	4604      	mov	r4, r0
 800d118:	4608      	mov	r0, r1
 800d11a:	602b      	str	r3, [r5, #0]
 800d11c:	f7f5 f82b 	bl	8002176 <_isatty>
 800d120:	1c43      	adds	r3, r0, #1
 800d122:	d102      	bne.n	800d12a <_isatty_r+0x1a>
 800d124:	682b      	ldr	r3, [r5, #0]
 800d126:	b103      	cbz	r3, 800d12a <_isatty_r+0x1a>
 800d128:	6023      	str	r3, [r4, #0]
 800d12a:	bd38      	pop	{r3, r4, r5, pc}
 800d12c:	200070e0 	.word	0x200070e0

0800d130 <_init>:
 800d130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d132:	bf00      	nop
 800d134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d136:	bc08      	pop	{r3}
 800d138:	469e      	mov	lr, r3
 800d13a:	4770      	bx	lr

0800d13c <_fini>:
 800d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13e:	bf00      	nop
 800d140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d142:	bc08      	pop	{r3}
 800d144:	469e      	mov	lr, r3
 800d146:	4770      	bx	lr
