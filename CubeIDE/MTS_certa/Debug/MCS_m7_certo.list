
MCS_m7_certo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  08010680  08010680  00011680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011014  08011014  000131e8  2**0
                  CONTENTS
  4 .ARM          00000008  08011014  08011014  00012014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801101c  0801101c  000131e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801101c  0801101c  0001201c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011020  08011020  00012020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08011024  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f4  200001e8  0801120c  000131e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  0801120c  000135dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4c2  00000000  00000000  00013218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024da  00000000  00000000  0001f6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00021bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bc  00000000  00000000  00022740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ecf  00000000  00000000  00022ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f1f  00000000  00000000  0004aecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e741a  00000000  00000000  0005fdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f0  00000000  00000000  00147248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0014b538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010668 	.word	0x08010668

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08010668 	.word	0x08010668

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <inverter_matriz>:
#include <stdlib.h>
#include <math.h>
#include "calib.h"

void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 8001024:	b480      	push	{r7}
 8001026:	b08b      	sub	sp, #44	@ 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
 8001032:	e02c      	b.n	800108e <inverter_matriz+0x6a>
        for (int j = 0; j < N; j++) {
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
 8001038:	e023      	b.n	8001082 <inverter_matriz+0x5e>
            if (i == j) {
 800103a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	429a      	cmp	r2, r3
 8001040:	d10e      	bne.n	8001060 <inverter_matriz+0x3c>
                inversa[i][j] = 1;
 8001042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	461a      	mov	r2, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	441a      	add	r2, r3
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e00d      	b.n	800107c <inverter_matriz+0x58>
            } else {
                inversa[i][j] = 0;
 8001060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	461a      	mov	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	441a      	add	r2, r3
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < N; j++) {
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	3301      	adds	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	2b08      	cmp	r3, #8
 8001086:	ddd8      	ble.n	800103a <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	3301      	adds	r3, #1
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	2b08      	cmp	r3, #8
 8001092:	ddcf      	ble.n	8001034 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	e0d1      	b.n	800123e <inverter_matriz+0x21a>
    {
        float pivot = matriz[i][i];
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	441a      	add	r2, r3
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	e03e      	b.n	8001138 <inverter_matriz+0x114>
        {
            matriz[i][j] /= pivot;
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	461a      	mov	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	441a      	add	r2, r3
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	edd3 6a00 	vldr	s13, [r3]
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	461a      	mov	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	441a      	add	r2, r3
 80010e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	edc3 7a00 	vstr	s15, [r3]
            inversa[i][j] /= pivot;
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	461a      	mov	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	441a      	add	r2, r3
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	edd3 6a00 	vldr	s13, [r3]
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	4613      	mov	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	461a      	mov	r2, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	441a      	add	r2, r3
 8001120:	ed97 7a03 	vldr	s14, [r7, #12]
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < N; j++)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	3301      	adds	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2b08      	cmp	r3, #8
 800113c:	ddbd      	ble.n	80010ba <inverter_matriz+0x96>
        }

        for (int k = 0; k < N; k++)
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	e076      	b.n	8001232 <inverter_matriz+0x20e>
        {
            if (k != i)
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	429a      	cmp	r2, r3
 800114a:	d06f      	beq.n	800122c <inverter_matriz+0x208>
            {
                float fator = matriz[k][i];
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	441a      	add	r2, r3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	e05c      	b.n	8001226 <inverter_matriz+0x202>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	441a      	add	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	ed93 7a00 	vldr	s14, [r3]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	441a      	add	r2, r3
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	edd3 6a00 	vldr	s13, [r3]
 80011a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	461a      	mov	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	441a      	add	r2, r3
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	edc3 7a00 	vstr	s15, [r3]
                    inversa[k][j] -= fator * inversa[i][j];
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	461a      	mov	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	441a      	add	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	ed93 7a00 	vldr	s14, [r3]
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	461a      	mov	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	441a      	add	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	edd3 6a00 	vldr	s13, [r3]
 80011fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	461a      	mov	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	441a      	add	r2, r3
 8001212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	edc3 7a00 	vstr	s15, [r3]
                for (int j = 0; j < N; j++)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	3301      	adds	r3, #1
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b08      	cmp	r3, #8
 800122a:	dd9f      	ble.n	800116c <inverter_matriz+0x148>
        for (int k = 0; k < N; k++)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b08      	cmp	r3, #8
 8001236:	dd85      	ble.n	8001144 <inverter_matriz+0x120>
    for (int i = 0; i < N; i++)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	3301      	adds	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	2b08      	cmp	r3, #8
 8001242:	f77f af2a 	ble.w	800109a <inverter_matriz+0x76>
                }
            }
        }
    }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	372c      	adds	r7, #44	@ 0x2c
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	0000      	movs	r0, r0
	...

08001258 <NLLS>:


uint8_t NLLS(float *mx, float *my, float *mz, float *p)
{
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	f5ad 4dbd 	sub.w	sp, sp, #24192	@ 0x5e80
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	f607 6498 	addw	r4, r7, #3736	@ 0xe98
 8001266:	f6a4 648c 	subw	r4, r4, #3724	@ 0xe8c
 800126a:	6020      	str	r0, [r4, #0]
 800126c:	f607 6098 	addw	r0, r7, #3736	@ 0xe98
 8001270:	f5a0 6069 	sub.w	r0, r0, #3728	@ 0xe90
 8001274:	6001      	str	r1, [r0, #0]
 8001276:	f607 6198 	addw	r1, r7, #3736	@ 0xe98
 800127a:	f6a1 6194 	subw	r1, r1, #3732	@ 0xe94
 800127e:	600a      	str	r2, [r1, #0]
 8001280:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001284:	f6a2 6298 	subw	r2, r2, #3736	@ 0xe98
 8001288:	6013      	str	r3, [r2, #0]
	uint8_t passo = 0, loop = 1;
 800128a:	2300      	movs	r3, #0
 800128c:	f645 6297 	movw	r2, #24215	@ 0x5e97
 8001290:	443a      	add	r2, r7
 8001292:	7013      	strb	r3, [r2, #0]
 8001294:	2301      	movs	r3, #1
 8001296:	f645 6296 	movw	r2, #24214	@ 0x5e96
 800129a:	443a      	add	r2, r7
 800129c:	7013      	strb	r3, [r2, #0]
	float sf = 1;
 800129e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012a2:	f645 6234 	movw	r2, #24116	@ 0x5e34
 80012a6:	443a      	add	r2, r7
 80012a8:	6013      	str	r3, [r2, #0]
	float p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J, mat_H[N][tam];
 80012aa:	4b8b      	ldr	r3, [pc, #556]	@ (80014d8 <NLLS+0x280>)
 80012ac:	f645 54f4 	movw	r4, #24052	@ 0x5df4
 80012b0:	443c      	add	r4, r7
 80012b2:	461d      	mov	r5, r3
 80012b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012bc:	682b      	ldr	r3, [r5, #0]
 80012be:	6023      	str	r3, [r4, #0]
	float sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
	float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

	for (int i=0; i < tam; i++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	f645 6264 	movw	r2, #24164	@ 0x5e64
 80012c6:	443a      	add	r2, r7
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e018      	b.n	80012fe <NLLS+0xa6>
	{
		Be[i] = 1*sf;
 80012cc:	f645 6398 	movw	r3, #24216	@ 0x5e98
 80012d0:	443b      	add	r3, r7
 80012d2:	f2a3 42fc 	subw	r2, r3, #1276	@ 0x4fc
 80012d6:	f645 6364 	movw	r3, #24164	@ 0x5e64
 80012da:	443b      	add	r3, r7
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	f645 6234 	movw	r2, #24116	@ 0x5e34
 80012e6:	443a      	add	r2, r7
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	601a      	str	r2, [r3, #0]
	for (int i=0; i < tam; i++)
 80012ec:	f645 6364 	movw	r3, #24164	@ 0x5e64
 80012f0:	443b      	add	r3, r7
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	f645 6264 	movw	r2, #24164	@ 0x5e64
 80012fa:	443a      	add	r2, r7
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	f645 6364 	movw	r3, #24164	@ 0x5e64
 8001302:	443b      	add	r3, r7
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 800130a:	dbdf      	blt.n	80012cc <NLLS+0x74>
	}

	while(loop == 1)
 800130c:	f003 bb3b 	b.w	8004986 <NLLS+0x372e>
	{
		sx = p0[0];
 8001310:	f645 53f4 	movw	r3, #24052	@ 0x5df4
 8001314:	443b      	add	r3, r7
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f645 6290 	movw	r2, #24208	@ 0x5e90
 800131c:	443a      	add	r2, r7
 800131e:	6013      	str	r3, [r2, #0]
		sy = p0[1];
 8001320:	f645 53f8 	movw	r3, #24056	@ 0x5df8
 8001324:	443b      	add	r3, r7
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f645 628c 	movw	r2, #24204	@ 0x5e8c
 800132c:	443a      	add	r2, r7
 800132e:	6013      	str	r3, [r2, #0]
		sz = p0[2];
 8001330:	f645 53fc 	movw	r3, #24060	@ 0x5dfc
 8001334:	443b      	add	r3, r7
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f645 6288 	movw	r2, #24200	@ 0x5e88
 800133c:	443a      	add	r2, r7
 800133e:	6013      	str	r3, [r2, #0]
		bx = p0[3];
 8001340:	f507 43bc 	add.w	r3, r7, #24064	@ 0x5e00
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f645 6284 	movw	r2, #24196	@ 0x5e84
 800134a:	443a      	add	r2, r7
 800134c:	6013      	str	r3, [r2, #0]
		by = p0[4];
 800134e:	f645 6304 	movw	r3, #24068	@ 0x5e04
 8001352:	443b      	add	r3, r7
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f507 42bd 	add.w	r2, r7, #24192	@ 0x5e80
 800135a:	6013      	str	r3, [r2, #0]
		bz = p0[5];
 800135c:	f645 6308 	movw	r3, #24072	@ 0x5e08
 8001360:	443b      	add	r3, r7
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f645 627c 	movw	r2, #24188	@ 0x5e7c
 8001368:	443a      	add	r2, r7
 800136a:	6013      	str	r3, [r2, #0]
		rho = p0[6];
 800136c:	f645 630c 	movw	r3, #24076	@ 0x5e0c
 8001370:	443b      	add	r3, r7
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f645 6278 	movw	r2, #24184	@ 0x5e78
 8001378:	443a      	add	r2, r7
 800137a:	6013      	str	r3, [r2, #0]
		phi = p0[7];
 800137c:	f645 6310 	movw	r3, #24080	@ 0x5e10
 8001380:	443b      	add	r3, r7
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f645 6274 	movw	r2, #24180	@ 0x5e74
 8001388:	443a      	add	r2, r7
 800138a:	6013      	str	r3, [r2, #0]
		lambida = p0[8];
 800138c:	f645 6314 	movw	r3, #24084	@ 0x5e14
 8001390:	443b      	add	r3, r7
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f645 6270 	movw	r2, #24176	@ 0x5e70
 8001398:	443a      	add	r2, r7
 800139a:	6013      	str	r3, [r2, #0]

		sin_phi = phi - (phi*phi*phi)/6;// + (phi*phi*phi*phi*phi)/120;
 800139c:	f645 6374 	movw	r3, #24180	@ 0x5e74
 80013a0:	443b      	add	r3, r7
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013aa:	f645 6374 	movw	r3, #24180	@ 0x5e74
 80013ae:	443b      	add	r3, r7
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b8:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80013bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c0:	f645 6374 	movw	r3, #24180	@ 0x5e74
 80013c4:	443b      	add	r3, r7
 80013c6:	ed93 7a00 	vldr	s14, [r3]
 80013ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ce:	f645 6330 	movw	r3, #24112	@ 0x5e30
 80013d2:	443b      	add	r3, r7
 80013d4:	edc3 7a00 	vstr	s15, [r3]
		sin_rho = rho - (rho*rho*rho)/6;// + (rho*rho*rho*rho*rho)/120;
 80013d8:	f645 6378 	movw	r3, #24184	@ 0x5e78
 80013dc:	443b      	add	r3, r7
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013e6:	f645 6378 	movw	r3, #24184	@ 0x5e78
 80013ea:	443b      	add	r3, r7
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f4:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80013f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fc:	f645 6378 	movw	r3, #24184	@ 0x5e78
 8001400:	443b      	add	r3, r7
 8001402:	ed93 7a00 	vldr	s14, [r3]
 8001406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140a:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 800140e:	443b      	add	r3, r7
 8001410:	edc3 7a00 	vstr	s15, [r3]
		sin_lambda = lambida - (lambida*lambida*lambida)/6;// + (lambida*lambida*lambida*lambida*lambida)/120;
 8001414:	f645 6370 	movw	r3, #24176	@ 0x5e70
 8001418:	443b      	add	r3, r7
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001422:	f645 6370 	movw	r3, #24176	@ 0x5e70
 8001426:	443b      	add	r3, r7
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001430:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8001434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001438:	f645 6370 	movw	r3, #24176	@ 0x5e70
 800143c:	443b      	add	r3, r7
 800143e:	ed93 7a00 	vldr	s14, [r3]
 8001442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001446:	f645 6328 	movw	r3, #24104	@ 0x5e28
 800144a:	443b      	add	r3, r7
 800144c:	edc3 7a00 	vstr	s15, [r3]
		cos_phi = 1 - (phi*phi)/2;// + (phi*phi*phi*phi)/24;
 8001450:	f645 6374 	movw	r3, #24180	@ 0x5e74
 8001454:	443b      	add	r3, r7
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800145e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001462:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001466:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800146a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146e:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8001472:	443b      	add	r3, r7
 8001474:	edc3 7a00 	vstr	s15, [r3]
		cos_rho = 1 - (rho*rho)/2;// + (rho*rho*rho*rho)/24;
 8001478:	f645 6378 	movw	r3, #24184	@ 0x5e78
 800147c:	443b      	add	r3, r7
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001486:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800148a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001496:	f645 6320 	movw	r3, #24096	@ 0x5e20
 800149a:	443b      	add	r3, r7
 800149c:	edc3 7a00 	vstr	s15, [r3]
		cos_lambda = 1 - (lambida*lambida)/2;// + (lambida*lambida*lambida*lambida)/24;
 80014a0:	f645 6370 	movw	r3, #24176	@ 0x5e70
 80014a4:	443b      	add	r3, r7
 80014a6:	edd3 7a00 	vldr	s15, [r3]
 80014aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014ae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80014b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014be:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80014c2:	443b      	add	r3, r7
 80014c4:	edc3 7a00 	vstr	s15, [r3]

		for(int i=0; i < tam; i++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	f645 6260 	movw	r2, #24160	@ 0x5e60
 80014ce:	443a      	add	r2, r7
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	f002 bf82 	b.w	80043da <NLLS+0x3182>
 80014d6:	bf00      	nop
 80014d8:	08010680 	.word	0x08010680
		{
			f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 80014dc:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80014e0:	443b      	add	r3, r7
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80014ea:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	ed93 7a00 	vldr	s14, [r3]
 80014f6:	f645 6384 	movw	r3, #24196	@ 0x5e84
 80014fa:	443b      	add	r3, r7
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001504:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001508:	443b      	add	r3, r7
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001512:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	4413      	add	r3, r2
 800151a:	edd3 6a00 	vldr	s13, [r3]
 800151e:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8001522:	443b      	add	r3, r7
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800152c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001530:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001534:	443b      	add	r3, r7
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800153e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001542:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001546:	443b      	add	r3, r7
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001550:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	4413      	add	r3, r2
 8001558:	edd3 6a00 	vldr	s13, [r3]
 800155c:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001568:	f645 6390 	movw	r3, #24208	@ 0x5e90
 800156c:	443b      	add	r3, r7
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001576:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800157a:	443b      	add	r3, r7
 800157c:	ed93 6a00 	vldr	s12, [r3]
 8001580:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8001584:	443b      	add	r3, r7
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800158e:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001592:	443b      	add	r3, r7
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800159c:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	edd3 5a00 	vldr	s11, [r3]
 80015a8:	f645 6384 	movw	r3, #24196	@ 0x5e84
 80015ac:	443b      	add	r3, r7
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80015b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015be:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80015c2:	443b      	add	r3, r7
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80015cc:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	ed93 6a00 	vldr	s12, [r3]
 80015d8:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80015e4:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80015e8:	443b      	add	r3, r7
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015f2:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80015f6:	443b      	add	r3, r7
 80015f8:	edd3 5a00 	vldr	s11, [r3]
 80015fc:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8001600:	443b      	add	r3, r7
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800160a:	f645 6360 	movw	r3, #24160	@ 0x5e60
 800160e:	443b      	add	r3, r7
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001618:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	4413      	add	r3, r2
 8001620:	ed93 5a00 	vldr	s10, [r3]
 8001624:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8001628:	443b      	add	r3, r7
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001632:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001636:	ee76 7a67 	vsub.f32	s15, s12, s15
 800163a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800163e:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001642:	443b      	add	r3, r7
 8001644:	edd3 6a00 	vldr	s13, [r3]
 8001648:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800164c:	443b      	add	r3, r7
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001656:	f645 6320 	movw	r3, #24096	@ 0x5e20
 800165a:	443b      	add	r3, r7
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001664:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001668:	443b      	add	r3, r7
 800166a:	edd3 5a00 	vldr	s11, [r3]
 800166e:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001672:	443b      	add	r3, r7
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800167c:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8001680:	443b      	add	r3, r7
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800168a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800168e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001696:	f645 6390 	movw	r3, #24208	@ 0x5e90
 800169a:	443b      	add	r3, r7
 800169c:	edd3 6a00 	vldr	s13, [r3]
 80016a0:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80016a4:	443b      	add	r3, r7
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016ae:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80016b2:	443b      	add	r3, r7
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016bc:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80016c0:	443b      	add	r3, r7
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80016ca:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	ed93 6a00 	vldr	s12, [r3]
 80016d6:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 80016da:	443b      	add	r3, r7
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016e8:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80016ec:	443b      	add	r3, r7
 80016ee:	ed93 6a00 	vldr	s12, [r3]
 80016f2:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80016f6:	443b      	add	r3, r7
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001700:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8001704:	443b      	add	r3, r7
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800170e:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001712:	443b      	add	r3, r7
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800171c:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	4413      	add	r3, r2
 8001724:	edd3 5a00 	vldr	s11, [r3]
 8001728:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001734:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001738:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800173c:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001740:	443b      	add	r3, r7
 8001742:	ed93 6a00 	vldr	s12, [r3]
 8001746:	f645 6388 	movw	r3, #24200	@ 0x5e88
 800174a:	443b      	add	r3, r7
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001754:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8001758:	443b      	add	r3, r7
 800175a:	edd3 5a00 	vldr	s11, [r3]
 800175e:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8001762:	443b      	add	r3, r7
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800176c:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8001770:	443b      	add	r3, r7
 8001772:	ed93 5a00 	vldr	s10, [r3]
 8001776:	f645 6330 	movw	r3, #24112	@ 0x5e30
 800177a:	443b      	add	r3, r7
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001784:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8001788:	443b      	add	r3, r7
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001792:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001796:	ee26 6a27 	vmul.f32	s12, s12, s15
 800179a:	f645 6360 	movw	r3, #24160	@ 0x5e60
 800179e:	443b      	add	r3, r7
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80017a8:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	edd3 5a00 	vldr	s11, [r3]
 80017b4:	f645 6384 	movw	r3, #24196	@ 0x5e84
 80017b8:	443b      	add	r3, r7
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80017c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017ca:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80017ce:	443b      	add	r3, r7
 80017d0:	ed93 6a00 	vldr	s12, [r3]
 80017d4:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80017d8:	443b      	add	r3, r7
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017e2:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80017e6:	443b      	add	r3, r7
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017f0:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80017f4:	443b      	add	r3, r7
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80017fe:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	4413      	add	r3, r2
 8001806:	edd3 5a00 	vldr	s11, [r3]
 800180a:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 800180e:	443b      	add	r3, r7
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001818:	ee26 6a27 	vmul.f32	s12, s12, s15
 800181c:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001820:	443b      	add	r3, r7
 8001822:	edd3 5a00 	vldr	s11, [r3]
 8001826:	f645 6388 	movw	r3, #24200	@ 0x5e88
 800182a:	443b      	add	r3, r7
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001834:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8001838:	443b      	add	r3, r7
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001842:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001846:	443b      	add	r3, r7
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001850:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	4413      	add	r3, r2
 8001858:	ed93 5a00 	vldr	s10, [r3]
 800185c:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001868:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800186c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001870:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001874:	443b      	add	r3, r7
 8001876:	edd3 5a00 	vldr	s11, [r3]
 800187a:	f645 6388 	movw	r3, #24200	@ 0x5e88
 800187e:	443b      	add	r3, r7
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001888:	f645 6328 	movw	r3, #24104	@ 0x5e28
 800188c:	443b      	add	r3, r7
 800188e:	ed93 5a00 	vldr	s10, [r3]
 8001892:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8001896:	443b      	add	r3, r7
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ee25 5a27 	vmul.f32	s10, s10, s15
 80018a0:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80018a4:	443b      	add	r3, r7
 80018a6:	edd3 4a00 	vldr	s9, [r3]
 80018aa:	f645 6330 	movw	r3, #24112	@ 0x5e30
 80018ae:	443b      	add	r3, r7
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80018b8:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80018bc:	443b      	add	r3, r7
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	ee64 7aa7 	vmul.f32	s15, s9, s15
 80018c6:	ee75 7a67 	vsub.f32	s15, s10, s15
 80018ca:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80018ce:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80018d2:	443b      	add	r3, r7
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80018dc:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	ed93 5a00 	vldr	s10, [r3]
 80018e8:	f645 6384 	movw	r3, #24196	@ 0x5e84
 80018ec:	443b      	add	r3, r7
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ee75 7a67 	vsub.f32	s15, s10, s15
 80018f6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018fa:	ee76 7a27 	vadd.f32	s15, s12, s15
 80018fe:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001902:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001906:	443b      	add	r3, r7
 8001908:	edd3 6a00 	vldr	s13, [r3]
 800190c:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001910:	443b      	add	r3, r7
 8001912:	edd3 7a00 	vldr	s15, [r3]
 8001916:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800191a:	f645 6388 	movw	r3, #24200	@ 0x5e88
 800191e:	443b      	add	r3, r7
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001928:	f645 6320 	movw	r3, #24096	@ 0x5e20
 800192c:	443b      	add	r3, r7
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001936:	f645 6324 	movw	r3, #24100	@ 0x5e24
 800193a:	443b      	add	r3, r7
 800193c:	edd3 7a00 	vldr	s15, [r3]
 8001940:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001944:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8001948:	443b      	add	r3, r7
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001952:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001956:	443b      	add	r3, r7
 8001958:	edd3 5a00 	vldr	s11, [r3]
 800195c:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001960:	443b      	add	r3, r7
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800196a:	f645 6388 	movw	r3, #24200	@ 0x5e88
 800196e:	443b      	add	r3, r7
 8001970:	edd3 7a00 	vldr	s15, [r3]
 8001974:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001978:	f645 6320 	movw	r3, #24096	@ 0x5e20
 800197c:	443b      	add	r3, r7
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001986:	f645 6324 	movw	r3, #24100	@ 0x5e24
 800198a:	443b      	add	r3, r7
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001994:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8001998:	443b      	add	r3, r7
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	f645 6398 	movw	r3, #24216	@ 0x5e98
 80019b2:	443b      	add	r3, r7
 80019b4:	f6a3 52ac 	subw	r2, r3, #3500	@ 0xdac
 80019b8:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80019bc:	443b      	add	r3, r7
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	edc3 7a00 	vstr	s15, [r3]

			e[i] = (Be[i] * Be[i]) - f[i];
 80019c8:	f645 6398 	movw	r3, #24216	@ 0x5e98
 80019cc:	443b      	add	r3, r7
 80019ce:	f2a3 42fc 	subw	r2, r3, #1276	@ 0x4fc
 80019d2:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80019d6:	443b      	add	r3, r7
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	ed93 7a00 	vldr	s14, [r3]
 80019e2:	f645 6398 	movw	r3, #24216	@ 0x5e98
 80019e6:	443b      	add	r3, r7
 80019e8:	f2a3 42fc 	subw	r2, r3, #1276	@ 0x4fc
 80019ec:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80019f0:	443b      	add	r3, r7
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a00:	f645 6398 	movw	r3, #24216	@ 0x5e98
 8001a04:	443b      	add	r3, r7
 8001a06:	f6a3 52ac 	subw	r2, r3, #3500	@ 0xdac
 8001a0a:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001a0e:	443b      	add	r3, r7
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1e:	f645 6398 	movw	r3, #24216	@ 0x5e98
 8001a22:	443b      	add	r3, r7
 8001a24:	f6a3 1254 	subw	r2, r3, #2388	@ 0x954
 8001a28:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001a2c:	443b      	add	r3, r7
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	edc3 7a00 	vstr	s15, [r3]

			mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8001a38:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001a3c:	443b      	add	r3, r7
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001a46:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8001a56:	ed93 7a00 	vldr	s14, [r3]
 8001a5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a5e:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001a62:	443b      	add	r3, r7
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a6c:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001a70:	443b      	add	r3, r7
 8001a72:	edd3 6a00 	vldr	s13, [r3]
 8001a76:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8001a7a:	443b      	add	r3, r7
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a84:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001a88:	443b      	add	r3, r7
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001a92:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	edd3 7a00 	vldr	s15, [r3]
 8001a9e:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8001aa2:	443b      	add	r3, r7
 8001aa4:	ed93 6a00 	vldr	s12, [r3]
 8001aa8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ab8:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001abc:	443b      	add	r3, r7
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001ac6:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8001ad6:	edd3 6a00 	vldr	s13, [r3]
 8001ada:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ade:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ae2:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001ae6:	443b      	add	r3, r7
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001af0:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001af4:	443b      	add	r3, r7
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001afe:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001b02:	443b      	add	r3, r7
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0c:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8001b10:	443b      	add	r3, r7
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1a:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8001b1e:	443b      	add	r3, r7
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b2c:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001b30:	443b      	add	r3, r7
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001b3a:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	4413      	add	r3, r2
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8001b4a:	edd3 6a00 	vldr	s13, [r3]
 8001b4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b52:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001b56:	443b      	add	r3, r7
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b60:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001b64:	443b      	add	r3, r7
 8001b66:	ed93 6a00 	vldr	s12, [r3]
 8001b6a:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8001b6e:	443b      	add	r3, r7
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b78:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001b7c:	443b      	add	r3, r7
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001b86:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8001b96:	443b      	add	r3, r7
 8001b98:	edd3 5a00 	vldr	s11, [r3]
 8001b9c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001ba0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ba4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ba8:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001bac:	443b      	add	r3, r7
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001bb6:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8001bc6:	ed93 6a00 	vldr	s12, [r3]
 8001bca:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bce:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001bd2:	443b      	add	r3, r7
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bdc:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001be0:	443b      	add	r3, r7
 8001be2:	edd3 5a00 	vldr	s11, [r3]
 8001be6:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8001bea:	443b      	add	r3, r7
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001bf4:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001bf8:	443b      	add	r3, r7
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001c02:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	edd3 7a00 	vldr	s15, [r3]
 8001c0e:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8001c12:	443b      	add	r3, r7
 8001c14:	ed93 5a00 	vldr	s10, [r3]
 8001c18:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001c1c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c28:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001c2c:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001c30:	443b      	add	r3, r7
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001c3a:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001c3e:	443b      	add	r3, r7
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c48:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001c4c:	443b      	add	r3, r7
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c56:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001c5a:	443b      	add	r3, r7
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c64:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8001c68:	443b      	add	r3, r7
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c72:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8001c76:	443b      	add	r3, r7
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c80:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c88:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001c8c:	443b      	add	r3, r7
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001c96:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8001ca6:	443b      	add	r3, r7
 8001ca8:	edd3 6a00 	vldr	s13, [r3]
 8001cac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cb0:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001cb4:	443b      	add	r3, r7
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001cbe:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8001cce:	443b      	add	r3, r7
 8001cd0:	ed93 6a00 	vldr	s12, [r3]
 8001cd4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cdc:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001ce0:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001ce4:	443b      	add	r3, r7
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001cee:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001cf2:	443b      	add	r3, r7
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cfc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d04:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001d08:	443b      	add	r3, r7
 8001d0a:	edd3 6a00 	vldr	s13, [r3]
 8001d0e:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8001d12:	443b      	add	r3, r7
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d1c:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8001d20:	443b      	add	r3, r7
 8001d22:	ed93 6a00 	vldr	s12, [r3]
 8001d26:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8001d2a:	443b      	add	r3, r7
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d34:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8001d38:	443b      	add	r3, r7
 8001d3a:	edd3 5a00 	vldr	s11, [r3]
 8001d3e:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8001d42:	443b      	add	r3, r7
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001d4c:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8001d50:	443b      	add	r3, r7
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d5a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d62:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001d66:	443b      	add	r3, r7
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001d70:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8001d80:	443b      	add	r3, r7
 8001d82:	ed93 6a00 	vldr	s12, [r3]
 8001d86:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d8e:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001d92:	443b      	add	r3, r7
 8001d94:	ed93 6a00 	vldr	s12, [r3]
 8001d98:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001d9c:	443b      	add	r3, r7
 8001d9e:	edd3 7a00 	vldr	s15, [r3]
 8001da2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001da6:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8001daa:	443b      	add	r3, r7
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001db4:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001db8:	443b      	add	r3, r7
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001dc2:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	4413      	add	r3, r2
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 8001dd2:	443b      	add	r3, r7
 8001dd4:	edd3 5a00 	vldr	s11, [r3]
 8001dd8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001ddc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001de0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001de4:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001de8:	443b      	add	r3, r7
 8001dea:	ed93 6a00 	vldr	s12, [r3]
 8001dee:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8001df2:	443b      	add	r3, r7
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dfc:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8001e00:	443b      	add	r3, r7
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e0a:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001e0e:	443b      	add	r3, r7
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001e18:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8001e28:	edd3 5a00 	vldr	s11, [r3]
 8001e2c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001e30:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e34:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e38:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001e3c:	443b      	add	r3, r7
 8001e3e:	ed93 6a00 	vldr	s12, [r3]
 8001e42:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8001e46:	443b      	add	r3, r7
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e50:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8001e54:	443b      	add	r3, r7
 8001e56:	edd3 5a00 	vldr	s11, [r3]
 8001e5a:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8001e5e:	443b      	add	r3, r7
 8001e60:	edd3 7a00 	vldr	s15, [r3]
 8001e64:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001e68:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8001e6c:	443b      	add	r3, r7
 8001e6e:	ed93 5a00 	vldr	s10, [r3]
 8001e72:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8001e76:	443b      	add	r3, r7
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001e80:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8001e84:	443b      	add	r3, r7
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001e8e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001e92:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e96:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001e9a:	443b      	add	r3, r7
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001ea4:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	edd3 7a00 	vldr	s15, [r3]
 8001eb0:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8001eb4:	443b      	add	r3, r7
 8001eb6:	edd3 5a00 	vldr	s11, [r3]
 8001eba:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001ebe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ec2:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001ec6:	443b      	add	r3, r7
 8001ec8:	edd3 5a00 	vldr	s11, [r3]
 8001ecc:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001ed0:	443b      	add	r3, r7
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001eda:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8001ede:	443b      	add	r3, r7
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001ee8:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001eec:	443b      	add	r3, r7
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001ef6:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 8001f06:	443b      	add	r3, r7
 8001f08:	ed93 5a00 	vldr	s10, [r3]
 8001f0c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001f10:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f14:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001f18:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001f1c:	443b      	add	r3, r7
 8001f1e:	edd3 5a00 	vldr	s11, [r3]
 8001f22:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8001f26:	443b      	add	r3, r7
 8001f28:	edd3 7a00 	vldr	s15, [r3]
 8001f2c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001f30:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8001f34:	443b      	add	r3, r7
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001f3e:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8001f42:	443b      	add	r3, r7
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8001f4c:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	edd3 7a00 	vldr	s15, [r3]
 8001f58:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8001f5c:	ed93 5a00 	vldr	s10, [r3]
 8001f60:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001f64:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f68:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f70:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001f74:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001f78:	443b      	add	r3, r7
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001f82:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8001f86:	443b      	add	r3, r7
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f90:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001f94:	443b      	add	r3, r7
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f9e:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8001fa2:	443b      	add	r3, r7
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fac:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8001fb0:	443b      	add	r3, r7
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fba:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8001fbe:	443b      	add	r3, r7
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fc8:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8001fcc:	443b      	add	r3, r7
 8001fce:	edd3 7a00 	vldr	s15, [r3]
 8001fd2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fd6:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8001fda:	443b      	add	r3, r7
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fe4:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8001fe8:	443b      	add	r3, r7
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ff2:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8001ff6:	443b      	add	r3, r7
 8001ff8:	edd3 7a00 	vldr	s15, [r3]
 8001ffc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002000:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002004:	443b      	add	r3, r7
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800200e:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002012:	443b      	add	r3, r7
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800201c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002020:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002024:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002028:	443b      	add	r3, r7
 800202a:	edd3 6a00 	vldr	s13, [r3]
 800202e:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002032:	443b      	add	r3, r7
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800203c:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002040:	443b      	add	r3, r7
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800204a:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	4413      	add	r3, r2
 8002052:	edd3 7a00 	vldr	s15, [r3]
 8002056:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 800205a:	443b      	add	r3, r7
 800205c:	ed93 6a00 	vldr	s12, [r3]
 8002060:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002064:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002068:	f645 6388 	movw	r3, #24200	@ 0x5e88
 800206c:	443b      	add	r3, r7
 800206e:	ed93 6a00 	vldr	s12, [r3]
 8002072:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002076:	443b      	add	r3, r7
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002080:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002084:	443b      	add	r3, r7
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800208e:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8002092:	6812      	ldr	r2, [r2, #0]
 8002094:	4413      	add	r3, r2
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 800209e:	edd3 5a00 	vldr	s11, [r3]
 80020a2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80020a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020ae:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80020b2:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80020b6:	443b      	add	r3, r7
 80020b8:	ed93 6a00 	vldr	s12, [r3]
 80020bc:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80020c0:	443b      	add	r3, r7
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020ca:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80020ce:	443b      	add	r3, r7
 80020d0:	edd3 5a00 	vldr	s11, [r3]
 80020d4:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 80020d8:	443b      	add	r3, r7
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80020e2:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80020e6:	443b      	add	r3, r7
 80020e8:	ed93 5a00 	vldr	s10, [r3]
 80020ec:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80020f0:	443b      	add	r3, r7
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	ee25 5a27 	vmul.f32	s10, s10, s15
 80020fa:	f645 6330 	movw	r3, #24112	@ 0x5e30
 80020fe:	443b      	add	r3, r7
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002108:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800210c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002110:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002114:	443b      	add	r3, r7
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800211e:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	4413      	add	r3, r2
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	f645 6384 	movw	r3, #24196	@ 0x5e84
 800212e:	443b      	add	r3, r7
 8002130:	edd3 5a00 	vldr	s11, [r3]
 8002134:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002138:	ee26 6a27 	vmul.f32	s12, s12, s15
 800213c:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002140:	443b      	add	r3, r7
 8002142:	edd3 5a00 	vldr	s11, [r3]
 8002146:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800214a:	443b      	add	r3, r7
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002154:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002158:	443b      	add	r3, r7
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002162:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002166:	443b      	add	r3, r7
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002170:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	4413      	add	r3, r2
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 8002180:	443b      	add	r3, r7
 8002182:	ed93 5a00 	vldr	s10, [r3]
 8002186:	ee75 7a67 	vsub.f32	s15, s10, s15
 800218a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800218e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002192:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002196:	443b      	add	r3, r7
 8002198:	edd3 5a00 	vldr	s11, [r3]
 800219c:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80021a0:	443b      	add	r3, r7
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80021aa:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80021ae:	443b      	add	r3, r7
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80021b8:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80021bc:	443b      	add	r3, r7
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80021c6:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	4413      	add	r3, r2
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 80021d6:	ed93 5a00 	vldr	s10, [r3]
 80021da:	ee75 7a67 	vsub.f32	s15, s10, s15
 80021de:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80021e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80021e6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80021ea:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80021ee:	443b      	add	r3, r7
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80021f8:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80021fc:	443b      	add	r3, r7
 80021fe:	edd3 7a00 	vldr	s15, [r3]
 8002202:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002206:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800220a:	443b      	add	r3, r7
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002214:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002218:	443b      	add	r3, r7
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002222:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002226:	443b      	add	r3, r7
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002230:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002234:	443b      	add	r3, r7
 8002236:	edd3 7a00 	vldr	s15, [r3]
 800223a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800223e:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002242:	443b      	add	r3, r7
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800224c:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8002250:	443b      	add	r3, r7
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800225a:	f645 6324 	movw	r3, #24100	@ 0x5e24
 800225e:	443b      	add	r3, r7
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002268:	f645 6320 	movw	r3, #24096	@ 0x5e20
 800226c:	443b      	add	r3, r7
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002276:	f645 6320 	movw	r3, #24096	@ 0x5e20
 800227a:	443b      	add	r3, r7
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002284:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228c:	f642 6398 	movw	r3, #11928	@ 0x2e98
 8002290:	443b      	add	r3, r7
 8002292:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 8002296:	f645 6360 	movw	r3, #24160	@ 0x5e60
 800229a:	443b      	add	r3, r7
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	edc3 7a00 	vstr	s15, [r3]

			mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 80022a6:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80022aa:	443b      	add	r3, r7
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80022b4:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 80022c4:	ed93 7a00 	vldr	s14, [r3]
 80022c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80022d0:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 80022d4:	edd3 6a00 	vldr	s13, [r3]
 80022d8:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80022dc:	443b      	add	r3, r7
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022e6:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80022ea:	443b      	add	r3, r7
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022f4:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80022f8:	443b      	add	r3, r7
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002302:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002306:	443b      	add	r3, r7
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002310:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002314:	443b      	add	r3, r7
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800231e:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	4413      	add	r3, r2
 8002326:	ed93 6a00 	vldr	s12, [r3]
 800232a:	f645 6390 	movw	r3, #24208	@ 0x5e90
 800232e:	443b      	add	r3, r7
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002338:	f645 6388 	movw	r3, #24200	@ 0x5e88
 800233c:	443b      	add	r3, r7
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002346:	f645 6328 	movw	r3, #24104	@ 0x5e28
 800234a:	443b      	add	r3, r7
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002354:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002358:	443b      	add	r3, r7
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002362:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002366:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 800236a:	ed93 6a00 	vldr	s12, [r3]
 800236e:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002372:	443b      	add	r3, r7
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ee26 6a27 	vmul.f32	s12, s12, s15
 800237c:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002380:	443b      	add	r3, r7
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee26 6a27 	vmul.f32	s12, s12, s15
 800238a:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 800238e:	443b      	add	r3, r7
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002398:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 800239c:	443b      	add	r3, r7
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023a6:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80023aa:	443b      	add	r3, r7
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023b4:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80023b8:	443b      	add	r3, r7
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023c6:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80023ca:	443b      	add	r3, r7
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80023d4:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	ed93 6a00 	vldr	s12, [r3]
 80023e0:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80023e4:	443b      	add	r3, r7
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023ee:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80023f2:	443b      	add	r3, r7
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023fc:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002400:	443b      	add	r3, r7
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	ee26 6a27 	vmul.f32	s12, s12, s15
 800240a:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 800240e:	443b      	add	r3, r7
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002418:	f645 6324 	movw	r3, #24100	@ 0x5e24
 800241c:	443b      	add	r3, r7
 800241e:	edd3 7a00 	vldr	s15, [r3]
 8002422:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002426:	f645 6324 	movw	r3, #24100	@ 0x5e24
 800242a:	443b      	add	r3, r7
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002434:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002438:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 800243c:	443b      	add	r3, r7
 800243e:	ed93 6a00 	vldr	s12, [r3]
 8002442:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002446:	443b      	add	r3, r7
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002450:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002454:	443b      	add	r3, r7
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800245e:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002462:	443b      	add	r3, r7
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ee26 6a27 	vmul.f32	s12, s12, s15
 800246c:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002470:	443b      	add	r3, r7
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	ee66 7a27 	vmul.f32	s15, s12, s15
 800247a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800247e:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002482:	443b      	add	r3, r7
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800248c:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	4413      	add	r3, r2
 8002494:	ed93 6a00 	vldr	s12, [r3]
 8002498:	f645 6390 	movw	r3, #24208	@ 0x5e90
 800249c:	443b      	add	r3, r7
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024a6:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80024aa:	443b      	add	r3, r7
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024b4:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80024b8:	443b      	add	r3, r7
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024c2:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80024c6:	443b      	add	r3, r7
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024d4:	f645 6384 	movw	r3, #24196	@ 0x5e84
 80024d8:	443b      	add	r3, r7
 80024da:	ed93 6a00 	vldr	s12, [r3]
 80024de:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80024e2:	443b      	add	r3, r7
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024ec:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80024f0:	443b      	add	r3, r7
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024fa:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80024fe:	443b      	add	r3, r7
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002508:	f645 6328 	movw	r3, #24104	@ 0x5e28
 800250c:	443b      	add	r3, r7
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002516:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 800251a:	443b      	add	r3, r7
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002524:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002528:	f645 6360 	movw	r3, #24160	@ 0x5e60
 800252c:	443b      	add	r3, r7
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002536:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	4413      	add	r3, r2
 800253e:	ed93 6a00 	vldr	s12, [r3]
 8002542:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002546:	443b      	add	r3, r7
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002550:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002554:	443b      	add	r3, r7
 8002556:	edd3 7a00 	vldr	s15, [r3]
 800255a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800255e:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002562:	443b      	add	r3, r7
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	ee26 6a27 	vmul.f32	s12, s12, s15
 800256c:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002570:	443b      	add	r3, r7
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	ee26 6a27 	vmul.f32	s12, s12, s15
 800257a:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 800257e:	443b      	add	r3, r7
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002588:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800258c:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8002590:	443b      	add	r3, r7
 8002592:	ed93 6a00 	vldr	s12, [r3]
 8002596:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800259a:	443b      	add	r3, r7
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025a4:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80025a8:	443b      	add	r3, r7
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025b2:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80025b6:	443b      	add	r3, r7
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025c0:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80025c4:	443b      	add	r3, r7
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025ce:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80025d2:	443b      	add	r3, r7
 80025d4:	edd3 7a00 	vldr	s15, [r3]
 80025d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025dc:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80025e0:	443b      	add	r3, r7
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025ea:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 80025ee:	443b      	add	r3, r7
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80025fc:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002600:	443b      	add	r3, r7
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800260a:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	4413      	add	r3, r2
 8002612:	ed93 6a00 	vldr	s12, [r3]
 8002616:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800261a:	443b      	add	r3, r7
 800261c:	edd3 7a00 	vldr	s15, [r3]
 8002620:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002624:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002628:	443b      	add	r3, r7
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002632:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002636:	443b      	add	r3, r7
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002640:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002644:	443b      	add	r3, r7
 8002646:	edd3 7a00 	vldr	s15, [r3]
 800264a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800264e:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8002652:	443b      	add	r3, r7
 8002654:	edd3 7a00 	vldr	s15, [r3]
 8002658:	ee26 6a27 	vmul.f32	s12, s12, s15
 800265c:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8002660:	443b      	add	r3, r7
 8002662:	edd3 7a00 	vldr	s15, [r3]
 8002666:	ee26 6a27 	vmul.f32	s12, s12, s15
 800266a:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 800266e:	443b      	add	r3, r7
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002678:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800267c:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8002680:	443b      	add	r3, r7
 8002682:	ed93 6a00 	vldr	s12, [r3]
 8002686:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800268a:	443b      	add	r3, r7
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002694:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002698:	443b      	add	r3, r7
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026a2:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80026a6:	443b      	add	r3, r7
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026b0:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80026b4:	443b      	add	r3, r7
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026be:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80026c2:	443b      	add	r3, r7
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026cc:	f645 6330 	movw	r3, #24112	@ 0x5e30
 80026d0:	443b      	add	r3, r7
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026de:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80026e2:	443b      	add	r3, r7
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80026ec:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	ed93 6a00 	vldr	s12, [r3]
 80026f8:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80026fc:	443b      	add	r3, r7
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002706:	f645 6388 	movw	r3, #24200	@ 0x5e88
 800270a:	443b      	add	r3, r7
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002714:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002718:	443b      	add	r3, r7
 800271a:	edd3 7a00 	vldr	s15, [r3]
 800271e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002722:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002726:	443b      	add	r3, r7
 8002728:	edd3 7a00 	vldr	s15, [r3]
 800272c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002730:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002734:	443b      	add	r3, r7
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800273e:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8002742:	443b      	add	r3, r7
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	ee66 7a27 	vmul.f32	s15, s12, s15
 800274c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002754:	eef1 6a67 	vneg.f32	s13, s15
 8002758:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800275c:	443b      	add	r3, r7
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002766:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800276a:	443b      	add	r3, r7
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002774:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002778:	443b      	add	r3, r7
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002782:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002786:	443b      	add	r3, r7
 8002788:	edd3 7a00 	vldr	s15, [r3]
 800278c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002790:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002794:	443b      	add	r3, r7
 8002796:	edd3 7a00 	vldr	s15, [r3]
 800279a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800279e:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80027a2:	443b      	add	r3, r7
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ac:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80027b0:	443b      	add	r3, r7
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ba:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80027be:	443b      	add	r3, r7
 80027c0:	edd3 7a00 	vldr	s15, [r3]
 80027c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c8:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80027cc:	443b      	add	r3, r7
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d6:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80027da:	443b      	add	r3, r7
 80027dc:	edd3 7a00 	vldr	s15, [r3]
 80027e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027e8:	f642 6398 	movw	r3, #11928	@ 0x2e98
 80027ec:	443b      	add	r3, r7
 80027ee:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 80027f2:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80027f6:	443b      	add	r3, r7
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	edc3 7a00 	vstr	s15, [r3]

			mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002806:	f645 6360 	movw	r3, #24160	@ 0x5e60
 800280a:	443b      	add	r3, r7
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002814:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	4413      	add	r3, r2
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 8002824:	443b      	add	r3, r7
 8002826:	ed93 7a00 	vldr	s14, [r3]
 800282a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002832:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 8002836:	443b      	add	r3, r7
 8002838:	edd3 6a00 	vldr	s13, [r3]
 800283c:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002840:	443b      	add	r3, r7
 8002842:	edd3 7a00 	vldr	s15, [r3]
 8002846:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800284a:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800284e:	443b      	add	r3, r7
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002858:	f645 6320 	movw	r3, #24096	@ 0x5e20
 800285c:	443b      	add	r3, r7
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002866:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 800286a:	ed93 6a00 	vldr	s12, [r3]
 800286e:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002872:	443b      	add	r3, r7
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	ee26 6a27 	vmul.f32	s12, s12, s15
 800287c:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002880:	443b      	add	r3, r7
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee26 6a27 	vmul.f32	s12, s12, s15
 800288a:	f645 6328 	movw	r3, #24104	@ 0x5e28
 800288e:	443b      	add	r3, r7
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002898:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800289c:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80028a0:	443b      	add	r3, r7
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80028aa:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	ed93 6a00 	vldr	s12, [r3]
 80028b6:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80028ba:	443b      	add	r3, r7
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028c4:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80028c8:	443b      	add	r3, r7
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028d2:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80028d6:	443b      	add	r3, r7
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80028e4:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80028e8:	443b      	add	r3, r7
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80028f2:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	ed93 6a00 	vldr	s12, [r3]
 80028fe:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002902:	443b      	add	r3, r7
 8002904:	edd3 7a00 	vldr	s15, [r3]
 8002908:	ee26 6a27 	vmul.f32	s12, s12, s15
 800290c:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002910:	443b      	add	r3, r7
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	ee26 6a27 	vmul.f32	s12, s12, s15
 800291a:	f645 6328 	movw	r3, #24104	@ 0x5e28
 800291e:	443b      	add	r3, r7
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002928:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800292c:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8002930:	443b      	add	r3, r7
 8002932:	ed93 6a00 	vldr	s12, [r3]
 8002936:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800293a:	443b      	add	r3, r7
 800293c:	edd3 7a00 	vldr	s15, [r3]
 8002940:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002944:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002948:	443b      	add	r3, r7
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002952:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002956:	443b      	add	r3, r7
 8002958:	edd3 7a00 	vldr	s15, [r3]
 800295c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002960:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8002964:	443b      	add	r3, r7
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800296e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002972:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002976:	443b      	add	r3, r7
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002980:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	4413      	add	r3, r2
 8002988:	ed93 6a00 	vldr	s12, [r3]
 800298c:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002990:	443b      	add	r3, r7
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	ee26 6a27 	vmul.f32	s12, s12, s15
 800299a:	f645 6388 	movw	r3, #24200	@ 0x5e88
 800299e:	443b      	add	r3, r7
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029a8:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80029ac:	443b      	add	r3, r7
 80029ae:	edd3 7a00 	vldr	s15, [r3]
 80029b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029b6:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 80029ba:	443b      	add	r3, r7
 80029bc:	edd3 7a00 	vldr	s15, [r3]
 80029c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80029c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029c8:	f645 6384 	movw	r3, #24196	@ 0x5e84
 80029cc:	443b      	add	r3, r7
 80029ce:	ed93 6a00 	vldr	s12, [r3]
 80029d2:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80029d6:	443b      	add	r3, r7
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029e0:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80029e4:	443b      	add	r3, r7
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029ee:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80029f2:	443b      	add	r3, r7
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029fc:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002a00:	443b      	add	r3, r7
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a0a:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8002a0e:	443b      	add	r3, r7
 8002a10:	edd3 7a00 	vldr	s15, [r3]
 8002a14:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a1c:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002a20:	443b      	add	r3, r7
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002a2a:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	4413      	add	r3, r2
 8002a32:	ed93 6a00 	vldr	s12, [r3]
 8002a36:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002a3a:	443b      	add	r3, r7
 8002a3c:	edd3 7a00 	vldr	s15, [r3]
 8002a40:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a44:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002a48:	443b      	add	r3, r7
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a52:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002a56:	443b      	add	r3, r7
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a60:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002a64:	443b      	add	r3, r7
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a6e:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8002a72:	443b      	add	r3, r7
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a84:	eef1 6a67 	vneg.f32	s13, s15
 8002a88:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002a8c:	443b      	add	r3, r7
 8002a8e:	ed93 7a00 	vldr	s14, [r3]
 8002a92:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002a96:	443b      	add	r3, r7
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa0:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002aa4:	443b      	add	r3, r7
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002aae:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002ab2:	443b      	add	r3, r7
 8002ab4:	edd3 7a00 	vldr	s15, [r3]
 8002ab8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac0:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002ac4:	443b      	add	r3, r7
 8002ac6:	edd3 7a00 	vldr	s15, [r3]
 8002aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ace:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002ad2:	443b      	add	r3, r7
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002adc:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8002ae0:	443b      	add	r3, r7
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aea:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8002aee:	443b      	add	r3, r7
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af8:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002afc:	443b      	add	r3, r7
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b0a:	f642 6398 	movw	r3, #11928	@ 0x2e98
 8002b0e:	443b      	add	r3, r7
 8002b10:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 8002b14:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002b18:	443b      	add	r3, r7
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	edc3 7a00 	vstr	s15, [r3]

			mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 8002b28:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8002b2c:	443b      	add	r3, r7
 8002b2e:	edd3 7a00 	vldr	s15, [r3]
 8002b32:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b36:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002b3a:	443b      	add	r3, r7
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002b44:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b54:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b58:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002b5c:	443b      	add	r3, r7
 8002b5e:	edd3 7a00 	vldr	s15, [r3]
 8002b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b66:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002b6a:	443b      	add	r3, r7
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b74:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8002b78:	443b      	add	r3, r7
 8002b7a:	edd3 7a00 	vldr	s15, [r3]
 8002b7e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b82:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002b86:	443b      	add	r3, r7
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002b90:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	4413      	add	r3, r2
 8002b98:	edd3 7a00 	vldr	s15, [r3]
 8002b9c:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8002ba0:	ed93 6a00 	vldr	s12, [r3]
 8002ba4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002ba8:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002bac:	443b      	add	r3, r7
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002bb6:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002bba:	443b      	add	r3, r7
 8002bbc:	edd3 5a00 	vldr	s11, [r3]
 8002bc0:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8002bc4:	443b      	add	r3, r7
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002bce:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002bd2:	443b      	add	r3, r7
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002bdc:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	edd3 7a00 	vldr	s15, [r3]
 8002be8:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8002bec:	443b      	add	r3, r7
 8002bee:	ed93 5a00 	vldr	s10, [r3]
 8002bf2:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002bf6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002bfa:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002bfe:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002c02:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002c06:	443b      	add	r3, r7
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002c10:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002c14:	443b      	add	r3, r7
 8002c16:	edd3 7a00 	vldr	s15, [r3]
 8002c1a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c1e:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002c22:	443b      	add	r3, r7
 8002c24:	edd3 7a00 	vldr	s15, [r3]
 8002c28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c2c:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002c30:	443b      	add	r3, r7
 8002c32:	edd3 7a00 	vldr	s15, [r3]
 8002c36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c3a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002c3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c42:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002c46:	443b      	add	r3, r7
 8002c48:	edd3 6a00 	vldr	s13, [r3]
 8002c4c:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8002c50:	443b      	add	r3, r7
 8002c52:	edd3 7a00 	vldr	s15, [r3]
 8002c56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c5a:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002c5e:	443b      	add	r3, r7
 8002c60:	ed93 6a00 	vldr	s12, [r3]
 8002c64:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002c68:	443b      	add	r3, r7
 8002c6a:	edd3 7a00 	vldr	s15, [r3]
 8002c6e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002c72:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8002c76:	443b      	add	r3, r7
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c84:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c88:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002c8c:	443b      	add	r3, r7
 8002c8e:	ed93 6a00 	vldr	s12, [r3]
 8002c92:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002c96:	443b      	add	r3, r7
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ca0:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002ca4:	443b      	add	r3, r7
 8002ca6:	edd3 5a00 	vldr	s11, [r3]
 8002caa:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8002cae:	443b      	add	r3, r7
 8002cb0:	edd3 7a00 	vldr	s15, [r3]
 8002cb4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002cb8:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002cbc:	443b      	add	r3, r7
 8002cbe:	ed93 5a00 	vldr	s10, [r3]
 8002cc2:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002cc6:	443b      	add	r3, r7
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ee25 5a27 	vmul.f32	s10, s10, s15
 8002cd0:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8002cd4:	443b      	add	r3, r7
 8002cd6:	edd3 7a00 	vldr	s15, [r3]
 8002cda:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002cde:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002ce2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ce6:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002cea:	443b      	add	r3, r7
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002cf4:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	edd3 7a00 	vldr	s15, [r3]
 8002d00:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8002d04:	443b      	add	r3, r7
 8002d06:	edd3 5a00 	vldr	s11, [r3]
 8002d0a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002d0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d12:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002d16:	443b      	add	r3, r7
 8002d18:	edd3 5a00 	vldr	s11, [r3]
 8002d1c:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002d20:	443b      	add	r3, r7
 8002d22:	edd3 7a00 	vldr	s15, [r3]
 8002d26:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d2a:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002d2e:	443b      	add	r3, r7
 8002d30:	edd3 7a00 	vldr	s15, [r3]
 8002d34:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d38:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002d3c:	443b      	add	r3, r7
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002d46:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8002d4a:	6812      	ldr	r2, [r2, #0]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 8002d56:	443b      	add	r3, r7
 8002d58:	ed93 5a00 	vldr	s10, [r3]
 8002d5c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002d60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002d64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002d68:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002d6c:	443b      	add	r3, r7
 8002d6e:	edd3 5a00 	vldr	s11, [r3]
 8002d72:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002d76:	443b      	add	r3, r7
 8002d78:	edd3 7a00 	vldr	s15, [r3]
 8002d7c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d80:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002d84:	443b      	add	r3, r7
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d8e:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002d92:	443b      	add	r3, r7
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002d9c:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8002da0:	6812      	ldr	r2, [r2, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	edd3 7a00 	vldr	s15, [r3]
 8002da8:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8002dac:	ed93 5a00 	vldr	s10, [r3]
 8002db0:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002db4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002db8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002dbc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002dc0:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002dc4:	443b      	add	r3, r7
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002dce:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002dd2:	443b      	add	r3, r7
 8002dd4:	edd3 7a00 	vldr	s15, [r3]
 8002dd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ddc:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002de0:	443b      	add	r3, r7
 8002de2:	edd3 7a00 	vldr	s15, [r3]
 8002de6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002dea:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002dee:	443b      	add	r3, r7
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002df8:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002dfc:	443b      	add	r3, r7
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e06:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002e0a:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8002e0e:	443b      	add	r3, r7
 8002e10:	edd3 7a00 	vldr	s15, [r3]
 8002e14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e18:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8002e1c:	443b      	add	r3, r7
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e26:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002e2a:	443b      	add	r3, r7
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e34:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002e38:	443b      	add	r3, r7
 8002e3a:	edd3 7a00 	vldr	s15, [r3]
 8002e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e42:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4a:	f642 6398 	movw	r3, #11928	@ 0x2e98
 8002e4e:	443b      	add	r3, r7
 8002e50:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 8002e54:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002e58:	443b      	add	r3, r7
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f203 3342 	addw	r3, r3, #834	@ 0x342
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	edc3 7a00 	vstr	s15, [r3]

			mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8002e68:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002e6c:	443b      	add	r3, r7
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002e76:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8002e86:	ed93 7a00 	vldr	s14, [r3]
 8002e8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e8e:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002e92:	443b      	add	r3, r7
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e9c:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002ea0:	443b      	add	r3, r7
 8002ea2:	edd3 6a00 	vldr	s13, [r3]
 8002ea6:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8002eaa:	443b      	add	r3, r7
 8002eac:	edd3 7a00 	vldr	s15, [r3]
 8002eb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eb4:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002eb8:	443b      	add	r3, r7
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002ec2:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8002ed2:	443b      	add	r3, r7
 8002ed4:	ed93 6a00 	vldr	s12, [r3]
 8002ed8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ee8:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002eec:	443b      	add	r3, r7
 8002eee:	ed93 7a00 	vldr	s14, [r3]
 8002ef2:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002ef6:	443b      	add	r3, r7
 8002ef8:	edd3 7a00 	vldr	s15, [r3]
 8002efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f00:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002f04:	443b      	add	r3, r7
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f0e:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002f12:	443b      	add	r3, r7
 8002f14:	edd3 7a00 	vldr	s15, [r3]
 8002f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f1c:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002f20:	443b      	add	r3, r7
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f2e:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002f32:	443b      	add	r3, r7
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f3c:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002f40:	443b      	add	r3, r7
 8002f42:	ed93 6a00 	vldr	s12, [r3]
 8002f46:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8002f4a:	443b      	add	r3, r7
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f54:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8002f58:	443b      	add	r3, r7
 8002f5a:	edd3 5a00 	vldr	s11, [r3]
 8002f5e:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8002f62:	443b      	add	r3, r7
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002f6c:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8002f70:	443b      	add	r3, r7
 8002f72:	ed93 5a00 	vldr	s10, [r3]
 8002f76:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002f7a:	443b      	add	r3, r7
 8002f7c:	edd3 7a00 	vldr	s15, [r3]
 8002f80:	ee25 5a27 	vmul.f32	s10, s10, s15
 8002f84:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8002f88:	443b      	add	r3, r7
 8002f8a:	edd3 7a00 	vldr	s15, [r3]
 8002f8e:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002f92:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002f96:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f9a:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002f9e:	443b      	add	r3, r7
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002fa8:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	edd3 7a00 	vldr	s15, [r3]
 8002fb4:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8002fb8:	443b      	add	r3, r7
 8002fba:	edd3 5a00 	vldr	s11, [r3]
 8002fbe:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002fc2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002fc6:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8002fca:	443b      	add	r3, r7
 8002fcc:	edd3 5a00 	vldr	s11, [r3]
 8002fd0:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8002fd4:	443b      	add	r3, r7
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002fde:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8002fe2:	443b      	add	r3, r7
 8002fe4:	edd3 7a00 	vldr	s15, [r3]
 8002fe8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002fec:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8002ff0:	443b      	add	r3, r7
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8002ffa:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	4413      	add	r3, r2
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 800300a:	443b      	add	r3, r7
 800300c:	ed93 5a00 	vldr	s10, [r3]
 8003010:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003014:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003018:	ee36 6a27 	vadd.f32	s12, s12, s15
 800301c:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003020:	443b      	add	r3, r7
 8003022:	edd3 5a00 	vldr	s11, [r3]
 8003026:	f645 6388 	movw	r3, #24200	@ 0x5e88
 800302a:	443b      	add	r3, r7
 800302c:	edd3 7a00 	vldr	s15, [r3]
 8003030:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003034:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003038:	443b      	add	r3, r7
 800303a:	edd3 7a00 	vldr	s15, [r3]
 800303e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003042:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003046:	443b      	add	r3, r7
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003050:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	4413      	add	r3, r2
 8003058:	edd3 7a00 	vldr	s15, [r3]
 800305c:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8003060:	ed93 5a00 	vldr	s10, [r3]
 8003064:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003068:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800306c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003070:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003074:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003078:	443b      	add	r3, r7
 800307a:	edd3 6a00 	vldr	s13, [r3]
 800307e:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003082:	443b      	add	r3, r7
 8003084:	edd3 7a00 	vldr	s15, [r3]
 8003088:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800308c:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003090:	443b      	add	r3, r7
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800309a:	f645 6388 	movw	r3, #24200	@ 0x5e88
 800309e:	443b      	add	r3, r7
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030a8:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80030ac:	443b      	add	r3, r7
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030b6:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80030ba:	443b      	add	r3, r7
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030c4:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80030c8:	443b      	add	r3, r7
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030d2:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80030d6:	443b      	add	r3, r7
 80030d8:	edd3 7a00 	vldr	s15, [r3]
 80030dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030e0:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80030e4:	443b      	add	r3, r7
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030ee:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80030f2:	443b      	add	r3, r7
 80030f4:	edd3 7a00 	vldr	s15, [r3]
 80030f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030fc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003104:	f642 6398 	movw	r3, #11928	@ 0x2e98
 8003108:	443b      	add	r3, r7
 800310a:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 800310e:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003112:	443b      	add	r3, r7
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	edc3 7a00 	vstr	s15, [r3]

			mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8003122:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003126:	443b      	add	r3, r7
 8003128:	ed93 7a00 	vldr	s14, [r3]
 800312c:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003130:	443b      	add	r3, r7
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800313a:	f645 6328 	movw	r3, #24104	@ 0x5e28
 800313e:	443b      	add	r3, r7
 8003140:	edd3 6a00 	vldr	s13, [r3]
 8003144:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8003148:	443b      	add	r3, r7
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003152:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003156:	443b      	add	r3, r7
 8003158:	ed93 6a00 	vldr	s12, [r3]
 800315c:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003160:	443b      	add	r3, r7
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	ee26 6a27 	vmul.f32	s12, s12, s15
 800316a:	f645 6330 	movw	r3, #24112	@ 0x5e30
 800316e:	443b      	add	r3, r7
 8003170:	edd3 7a00 	vldr	s15, [r3]
 8003174:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003178:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800317c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003180:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003184:	443b      	add	r3, r7
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800318e:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	4413      	add	r3, r2
 8003196:	edd3 7a00 	vldr	s15, [r3]
 800319a:	f645 6384 	movw	r3, #24196	@ 0x5e84
 800319e:	443b      	add	r3, r7
 80031a0:	edd3 6a00 	vldr	s13, [r3]
 80031a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80031a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ac:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80031b0:	443b      	add	r3, r7
 80031b2:	edd3 6a00 	vldr	s13, [r3]
 80031b6:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80031ba:	443b      	add	r3, r7
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031c4:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80031c8:	443b      	add	r3, r7
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031d2:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80031d6:	443b      	add	r3, r7
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80031e0:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 80031f0:	443b      	add	r3, r7
 80031f2:	ed93 6a00 	vldr	s12, [r3]
 80031f6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003202:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003206:	443b      	add	r3, r7
 8003208:	edd3 6a00 	vldr	s13, [r3]
 800320c:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003210:	443b      	add	r3, r7
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800321a:	f645 6328 	movw	r3, #24104	@ 0x5e28
 800321e:	443b      	add	r3, r7
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003228:	f645 6360 	movw	r3, #24160	@ 0x5e60
 800322c:	443b      	add	r3, r7
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003236:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	4413      	add	r3, r2
 800323e:	edd3 7a00 	vldr	s15, [r3]
 8003242:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8003246:	ed93 6a00 	vldr	s12, [r3]
 800324a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800324e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003256:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800325a:	f645 6390 	movw	r3, #24208	@ 0x5e90
 800325e:	443b      	add	r3, r7
 8003260:	ed93 7a00 	vldr	s14, [r3]
 8003264:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003268:	443b      	add	r3, r7
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003272:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003276:	443b      	add	r3, r7
 8003278:	edd3 7a00 	vldr	s15, [r3]
 800327c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003280:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003284:	443b      	add	r3, r7
 8003286:	edd3 7a00 	vldr	s15, [r3]
 800328a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800328e:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003292:	443b      	add	r3, r7
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800329c:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80032a0:	443b      	add	r3, r7
 80032a2:	edd3 7a00 	vldr	s15, [r3]
 80032a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032aa:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80032ae:	443b      	add	r3, r7
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b8:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80032bc:	443b      	add	r3, r7
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032c6:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80032ca:	443b      	add	r3, r7
 80032cc:	edd3 7a00 	vldr	s15, [r3]
 80032d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d8:	f642 6398 	movw	r3, #11928	@ 0x2e98
 80032dc:	443b      	add	r3, r7
 80032de:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 80032e2:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80032e6:	443b      	add	r3, r7
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f203 536e 	addw	r3, r3, #1390	@ 0x56e
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	edc3 7a00 	vstr	s15, [r3]

			mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 80032f6:	f645 6384 	movw	r3, #24196	@ 0x5e84
 80032fa:	443b      	add	r3, r7
 80032fc:	ed93 7a00 	vldr	s14, [r3]
 8003300:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003304:	443b      	add	r3, r7
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800330e:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003312:	443b      	add	r3, r7
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800331c:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8003320:	6812      	ldr	r2, [r2, #0]
 8003322:	4413      	add	r3, r2
 8003324:	edd3 6a00 	vldr	s13, [r3]
 8003328:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800332c:	443b      	add	r3, r7
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800333a:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 800333e:	edd3 6a00 	vldr	s13, [r3]
 8003342:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003346:	443b      	add	r3, r7
 8003348:	edd3 7a00 	vldr	s15, [r3]
 800334c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003350:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8003354:	443b      	add	r3, r7
 8003356:	edd3 7a00 	vldr	s15, [r3]
 800335a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800335e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003362:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003366:	443b      	add	r3, r7
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003370:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	4413      	add	r3, r2
 8003378:	edd3 6a00 	vldr	s13, [r3]
 800337c:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003380:	443b      	add	r3, r7
 8003382:	edd3 7a00 	vldr	s15, [r3]
 8003386:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800338a:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 800338e:	443b      	add	r3, r7
 8003390:	edd3 7a00 	vldr	s15, [r3]
 8003394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80033a0:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 80033a4:	edd3 6a00 	vldr	s13, [r3]
 80033a8:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80033ac:	443b      	add	r3, r7
 80033ae:	edd3 7a00 	vldr	s15, [r3]
 80033b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033b6:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80033ba:	443b      	add	r3, r7
 80033bc:	edd3 7a00 	vldr	s15, [r3]
 80033c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033c4:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80033c8:	443b      	add	r3, r7
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033d2:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80033d6:	443b      	add	r3, r7
 80033d8:	edd3 7a00 	vldr	s15, [r3]
 80033dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033e0:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80033e4:	443b      	add	r3, r7
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80033ee:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	ed93 6a00 	vldr	s12, [r3]
 80033fa:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80033fe:	443b      	add	r3, r7
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003408:	f645 6388 	movw	r3, #24200	@ 0x5e88
 800340c:	443b      	add	r3, r7
 800340e:	edd3 7a00 	vldr	s15, [r3]
 8003412:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003416:	f645 6328 	movw	r3, #24104	@ 0x5e28
 800341a:	443b      	add	r3, r7
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003424:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003428:	443b      	add	r3, r7
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003432:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003436:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 800343a:	ed93 6a00 	vldr	s12, [r3]
 800343e:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003442:	443b      	add	r3, r7
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	ee26 6a27 	vmul.f32	s12, s12, s15
 800344c:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003450:	443b      	add	r3, r7
 8003452:	edd3 7a00 	vldr	s15, [r3]
 8003456:	ee26 6a27 	vmul.f32	s12, s12, s15
 800345a:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 800345e:	443b      	add	r3, r7
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003468:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 800346c:	443b      	add	r3, r7
 800346e:	edd3 7a00 	vldr	s15, [r3]
 8003472:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003476:	f645 6324 	movw	r3, #24100	@ 0x5e24
 800347a:	443b      	add	r3, r7
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003484:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8003488:	443b      	add	r3, r7
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003492:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003496:	f645 6360 	movw	r3, #24160	@ 0x5e60
 800349a:	443b      	add	r3, r7
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80034a4:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	4413      	add	r3, r2
 80034ac:	ed93 6a00 	vldr	s12, [r3]
 80034b0:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80034b4:	443b      	add	r3, r7
 80034b6:	edd3 7a00 	vldr	s15, [r3]
 80034ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034be:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80034c2:	443b      	add	r3, r7
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034cc:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80034d0:	443b      	add	r3, r7
 80034d2:	edd3 7a00 	vldr	s15, [r3]
 80034d6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034da:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80034de:	443b      	add	r3, r7
 80034e0:	edd3 7a00 	vldr	s15, [r3]
 80034e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034e8:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80034ec:	443b      	add	r3, r7
 80034ee:	edd3 7a00 	vldr	s15, [r3]
 80034f2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034f6:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80034fa:	443b      	add	r3, r7
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003504:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003508:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 800350c:	443b      	add	r3, r7
 800350e:	ed93 6a00 	vldr	s12, [r3]
 8003512:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003516:	443b      	add	r3, r7
 8003518:	edd3 7a00 	vldr	s15, [r3]
 800351c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003520:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003524:	443b      	add	r3, r7
 8003526:	edd3 7a00 	vldr	s15, [r3]
 800352a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800352e:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003532:	443b      	add	r3, r7
 8003534:	edd3 7a00 	vldr	s15, [r3]
 8003538:	ee26 6a27 	vmul.f32	s12, s12, s15
 800353c:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003540:	443b      	add	r3, r7
 8003542:	edd3 7a00 	vldr	s15, [r3]
 8003546:	ee66 7a27 	vmul.f32	s15, s12, s15
 800354a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800354e:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003552:	443b      	add	r3, r7
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800355c:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	4413      	add	r3, r2
 8003564:	ed93 6a00 	vldr	s12, [r3]
 8003568:	f645 6390 	movw	r3, #24208	@ 0x5e90
 800356c:	443b      	add	r3, r7
 800356e:	edd3 7a00 	vldr	s15, [r3]
 8003572:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003576:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800357a:	443b      	add	r3, r7
 800357c:	edd3 7a00 	vldr	s15, [r3]
 8003580:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003584:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003588:	443b      	add	r3, r7
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003592:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003596:	443b      	add	r3, r7
 8003598:	edd3 7a00 	vldr	s15, [r3]
 800359c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80035a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80035a4:	f645 6384 	movw	r3, #24196	@ 0x5e84
 80035a8:	443b      	add	r3, r7
 80035aa:	ed93 6a00 	vldr	s12, [r3]
 80035ae:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80035b2:	443b      	add	r3, r7
 80035b4:	edd3 7a00 	vldr	s15, [r3]
 80035b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035bc:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80035c0:	443b      	add	r3, r7
 80035c2:	edd3 7a00 	vldr	s15, [r3]
 80035c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035ca:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80035ce:	443b      	add	r3, r7
 80035d0:	edd3 7a00 	vldr	s15, [r3]
 80035d4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035d8:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80035dc:	443b      	add	r3, r7
 80035de:	edd3 7a00 	vldr	s15, [r3]
 80035e2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80035e6:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 80035ea:	443b      	add	r3, r7
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80035f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80035f8:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80035fc:	443b      	add	r3, r7
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003606:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	4413      	add	r3, r2
 800360e:	ed93 6a00 	vldr	s12, [r3]
 8003612:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003616:	443b      	add	r3, r7
 8003618:	edd3 7a00 	vldr	s15, [r3]
 800361c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003620:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003624:	443b      	add	r3, r7
 8003626:	edd3 7a00 	vldr	s15, [r3]
 800362a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800362e:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003632:	443b      	add	r3, r7
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	ee26 6a27 	vmul.f32	s12, s12, s15
 800363c:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003640:	443b      	add	r3, r7
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	ee26 6a27 	vmul.f32	s12, s12, s15
 800364a:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 800364e:	443b      	add	r3, r7
 8003650:	edd3 7a00 	vldr	s15, [r3]
 8003654:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003658:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800365c:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8003660:	443b      	add	r3, r7
 8003662:	ed93 6a00 	vldr	s12, [r3]
 8003666:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800366a:	443b      	add	r3, r7
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003674:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003678:	443b      	add	r3, r7
 800367a:	edd3 7a00 	vldr	s15, [r3]
 800367e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003682:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003686:	443b      	add	r3, r7
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003690:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003694:	443b      	add	r3, r7
 8003696:	edd3 7a00 	vldr	s15, [r3]
 800369a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800369e:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80036a2:	443b      	add	r3, r7
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036ac:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80036b0:	443b      	add	r3, r7
 80036b2:	edd3 7a00 	vldr	s15, [r3]
 80036b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036ba:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 80036be:	443b      	add	r3, r7
 80036c0:	edd3 7a00 	vldr	s15, [r3]
 80036c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80036c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80036cc:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80036d0:	443b      	add	r3, r7
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80036da:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 80036de:	6812      	ldr	r2, [r2, #0]
 80036e0:	4413      	add	r3, r2
 80036e2:	ed93 6a00 	vldr	s12, [r3]
 80036e6:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80036ea:	443b      	add	r3, r7
 80036ec:	edd3 7a00 	vldr	s15, [r3]
 80036f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036f4:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80036f8:	443b      	add	r3, r7
 80036fa:	edd3 7a00 	vldr	s15, [r3]
 80036fe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003702:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003706:	443b      	add	r3, r7
 8003708:	edd3 7a00 	vldr	s15, [r3]
 800370c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003710:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003714:	443b      	add	r3, r7
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800371e:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8003722:	443b      	add	r3, r7
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	ee26 6a27 	vmul.f32	s12, s12, s15
 800372c:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8003730:	443b      	add	r3, r7
 8003732:	edd3 7a00 	vldr	s15, [r3]
 8003736:	ee26 6a27 	vmul.f32	s12, s12, s15
 800373a:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 800373e:	443b      	add	r3, r7
 8003740:	edd3 7a00 	vldr	s15, [r3]
 8003744:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003748:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800374c:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8003750:	443b      	add	r3, r7
 8003752:	ed93 6a00 	vldr	s12, [r3]
 8003756:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800375a:	443b      	add	r3, r7
 800375c:	edd3 7a00 	vldr	s15, [r3]
 8003760:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003764:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003768:	443b      	add	r3, r7
 800376a:	edd3 7a00 	vldr	s15, [r3]
 800376e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003772:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003776:	443b      	add	r3, r7
 8003778:	edd3 7a00 	vldr	s15, [r3]
 800377c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003780:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003784:	443b      	add	r3, r7
 8003786:	edd3 7a00 	vldr	s15, [r3]
 800378a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800378e:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003792:	443b      	add	r3, r7
 8003794:	edd3 7a00 	vldr	s15, [r3]
 8003798:	ee26 6a27 	vmul.f32	s12, s12, s15
 800379c:	f645 6330 	movw	r3, #24112	@ 0x5e30
 80037a0:	443b      	add	r3, r7
 80037a2:	edd3 7a00 	vldr	s15, [r3]
 80037a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80037aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80037ae:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80037b2:	443b      	add	r3, r7
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80037bc:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	4413      	add	r3, r2
 80037c4:	ed93 6a00 	vldr	s12, [r3]
 80037c8:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80037cc:	443b      	add	r3, r7
 80037ce:	edd3 7a00 	vldr	s15, [r3]
 80037d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037d6:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80037da:	443b      	add	r3, r7
 80037dc:	edd3 7a00 	vldr	s15, [r3]
 80037e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037e4:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80037e8:	443b      	add	r3, r7
 80037ea:	edd3 7a00 	vldr	s15, [r3]
 80037ee:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037f2:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80037f6:	443b      	add	r3, r7
 80037f8:	edd3 7a00 	vldr	s15, [r3]
 80037fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003800:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003804:	443b      	add	r3, r7
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800380e:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8003812:	443b      	add	r3, r7
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	ee66 7a27 	vmul.f32	s15, s12, s15
 800381c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003824:	eef1 6a67 	vneg.f32	s13, s15
 8003828:	f645 6390 	movw	r3, #24208	@ 0x5e90
 800382c:	443b      	add	r3, r7
 800382e:	edd3 7a00 	vldr	s15, [r3]
 8003832:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003836:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800383a:	443b      	add	r3, r7
 800383c:	edd3 7a00 	vldr	s15, [r3]
 8003840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003844:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003848:	443b      	add	r3, r7
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003852:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003856:	443b      	add	r3, r7
 8003858:	edd3 7a00 	vldr	s15, [r3]
 800385c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003860:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003864:	443b      	add	r3, r7
 8003866:	edd3 7a00 	vldr	s15, [r3]
 800386a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800386e:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003872:	443b      	add	r3, r7
 8003874:	edd3 7a00 	vldr	s15, [r3]
 8003878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800387c:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8003880:	443b      	add	r3, r7
 8003882:	edd3 7a00 	vldr	s15, [r3]
 8003886:	ee27 7a27 	vmul.f32	s14, s14, s15
 800388a:	f645 6324 	movw	r3, #24100	@ 0x5e24
 800388e:	443b      	add	r3, r7
 8003890:	edd3 7a00 	vldr	s15, [r3]
 8003894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003898:	f645 6320 	movw	r3, #24096	@ 0x5e20
 800389c:	443b      	add	r3, r7
 800389e:	edd3 7a00 	vldr	s15, [r3]
 80038a2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80038a6:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80038aa:	443b      	add	r3, r7
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80038b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038bc:	f642 6398 	movw	r3, #11928	@ 0x2e98
 80038c0:	443b      	add	r3, r7
 80038c2:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 80038c6:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80038ca:	443b      	add	r3, r7
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f203 6384 	addw	r3, r3, #1668	@ 0x684
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	edc3 7a00 	vstr	s15, [r3]

			mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 80038da:	f645 6330 	movw	r3, #24112	@ 0x5e30
 80038de:	443b      	add	r3, r7
 80038e0:	edd3 7a00 	vldr	s15, [r3]
 80038e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80038e8:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80038ec:	443b      	add	r3, r7
 80038ee:	edd3 6a00 	vldr	s13, [r3]
 80038f2:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80038f6:	443b      	add	r3, r7
 80038f8:	edd3 7a00 	vldr	s15, [r3]
 80038fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003900:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003904:	443b      	add	r3, r7
 8003906:	ed93 6a00 	vldr	s12, [r3]
 800390a:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 800390e:	443b      	add	r3, r7
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003918:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 800391c:	443b      	add	r3, r7
 800391e:	edd3 5a00 	vldr	s11, [r3]
 8003922:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003926:	443b      	add	r3, r7
 8003928:	edd3 7a00 	vldr	s15, [r3]
 800392c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003930:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8003934:	443b      	add	r3, r7
 8003936:	edd3 7a00 	vldr	s15, [r3]
 800393a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800393e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003942:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003946:	f645 6360 	movw	r3, #24160	@ 0x5e60
 800394a:	443b      	add	r3, r7
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003954:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	4413      	add	r3, r2
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8003964:	443b      	add	r3, r7
 8003966:	ed93 6a00 	vldr	s12, [r3]
 800396a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800396e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003972:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003976:	443b      	add	r3, r7
 8003978:	ed93 6a00 	vldr	s12, [r3]
 800397c:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003980:	443b      	add	r3, r7
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	ee26 6a27 	vmul.f32	s12, s12, s15
 800398a:	f645 6320 	movw	r3, #24096	@ 0x5e20
 800398e:	443b      	add	r3, r7
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003998:	f645 6360 	movw	r3, #24160	@ 0x5e60
 800399c:	443b      	add	r3, r7
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80039a6:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 80039b6:	443b      	add	r3, r7
 80039b8:	edd3 5a00 	vldr	s11, [r3]
 80039bc:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80039c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039c8:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80039cc:	443b      	add	r3, r7
 80039ce:	ed93 6a00 	vldr	s12, [r3]
 80039d2:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80039d6:	443b      	add	r3, r7
 80039d8:	edd3 7a00 	vldr	s15, [r3]
 80039dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039e0:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80039e4:	443b      	add	r3, r7
 80039e6:	edd3 7a00 	vldr	s15, [r3]
 80039ea:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039ee:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80039f2:	443b      	add	r3, r7
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80039fc:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	4413      	add	r3, r2
 8003a04:	edd3 7a00 	vldr	s15, [r3]
 8003a08:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8003a0c:	edd3 5a00 	vldr	s11, [r3]
 8003a10:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003a14:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a1c:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003a20:	443b      	add	r3, r7
 8003a22:	ed93 6a00 	vldr	s12, [r3]
 8003a26:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003a2a:	443b      	add	r3, r7
 8003a2c:	edd3 7a00 	vldr	s15, [r3]
 8003a30:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a34:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003a38:	443b      	add	r3, r7
 8003a3a:	edd3 5a00 	vldr	s11, [r3]
 8003a3e:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8003a42:	443b      	add	r3, r7
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003a4c:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003a50:	443b      	add	r3, r7
 8003a52:	ed93 5a00 	vldr	s10, [r3]
 8003a56:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003a5a:	443b      	add	r3, r7
 8003a5c:	edd3 7a00 	vldr	s15, [r3]
 8003a60:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003a64:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8003a68:	443b      	add	r3, r7
 8003a6a:	edd3 7a00 	vldr	s15, [r3]
 8003a6e:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003a72:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003a76:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a7a:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003a7e:	443b      	add	r3, r7
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003a88:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	4413      	add	r3, r2
 8003a90:	edd3 7a00 	vldr	s15, [r3]
 8003a94:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8003a98:	443b      	add	r3, r7
 8003a9a:	edd3 5a00 	vldr	s11, [r3]
 8003a9e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003aa2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003aa6:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003aaa:	443b      	add	r3, r7
 8003aac:	edd3 5a00 	vldr	s11, [r3]
 8003ab0:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003ab4:	443b      	add	r3, r7
 8003ab6:	edd3 7a00 	vldr	s15, [r3]
 8003aba:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003abe:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003ac2:	443b      	add	r3, r7
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003acc:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003ad0:	443b      	add	r3, r7
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003ada:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 8003aea:	443b      	add	r3, r7
 8003aec:	ed93 5a00 	vldr	s10, [r3]
 8003af0:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003af4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003af8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003afc:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003b00:	443b      	add	r3, r7
 8003b02:	edd3 5a00 	vldr	s11, [r3]
 8003b06:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003b0a:	443b      	add	r3, r7
 8003b0c:	edd3 7a00 	vldr	s15, [r3]
 8003b10:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003b14:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003b18:	443b      	add	r3, r7
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003b22:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003b26:	443b      	add	r3, r7
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003b30:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	4413      	add	r3, r2
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8003b40:	ed93 5a00 	vldr	s10, [r3]
 8003b44:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003b48:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003b4c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b54:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b58:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003b5c:	443b      	add	r3, r7
 8003b5e:	edd3 7a00 	vldr	s15, [r3]
 8003b62:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003b66:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003b6a:	443b      	add	r3, r7
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b74:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003b78:	443b      	add	r3, r7
 8003b7a:	edd3 7a00 	vldr	s15, [r3]
 8003b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b82:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003b86:	443b      	add	r3, r7
 8003b88:	edd3 7a00 	vldr	s15, [r3]
 8003b8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b90:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003b94:	443b      	add	r3, r7
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b9e:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003ba2:	443b      	add	r3, r7
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bac:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003bb0:	443b      	add	r3, r7
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bba:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8003bbe:	443b      	add	r3, r7
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003bc8:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8003bcc:	443b      	add	r3, r7
 8003bce:	edd3 7a00 	vldr	s15, [r3]
 8003bd2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bda:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003bde:	443b      	add	r3, r7
 8003be0:	edd3 7a00 	vldr	s15, [r3]
 8003be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003be8:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003bec:	443b      	add	r3, r7
 8003bee:	edd3 7a00 	vldr	s15, [r3]
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bfa:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003bfe:	443b      	add	r3, r7
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003c08:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8003c0c:	6812      	ldr	r2, [r2, #0]
 8003c0e:	4413      	add	r3, r2
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8003c18:	443b      	add	r3, r7
 8003c1a:	edd3 6a00 	vldr	s13, [r3]
 8003c1e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003c22:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003c26:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003c2a:	443b      	add	r3, r7
 8003c2c:	ed93 6a00 	vldr	s12, [r3]
 8003c30:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003c34:	443b      	add	r3, r7
 8003c36:	edd3 7a00 	vldr	s15, [r3]
 8003c3a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c3e:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003c42:	443b      	add	r3, r7
 8003c44:	edd3 5a00 	vldr	s11, [r3]
 8003c48:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8003c4c:	443b      	add	r3, r7
 8003c4e:	edd3 7a00 	vldr	s15, [r3]
 8003c52:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003c56:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003c5a:	443b      	add	r3, r7
 8003c5c:	ed93 5a00 	vldr	s10, [r3]
 8003c60:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003c64:	443b      	add	r3, r7
 8003c66:	edd3 7a00 	vldr	s15, [r3]
 8003c6a:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003c6e:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8003c72:	443b      	add	r3, r7
 8003c74:	edd3 7a00 	vldr	s15, [r3]
 8003c78:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003c7c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003c80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c84:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003c88:	443b      	add	r3, r7
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003c92:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	4413      	add	r3, r2
 8003c9a:	edd3 7a00 	vldr	s15, [r3]
 8003c9e:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8003ca2:	443b      	add	r3, r7
 8003ca4:	edd3 5a00 	vldr	s11, [r3]
 8003ca8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003cac:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003cb0:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003cb4:	443b      	add	r3, r7
 8003cb6:	edd3 5a00 	vldr	s11, [r3]
 8003cba:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003cbe:	443b      	add	r3, r7
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003cc8:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003ccc:	443b      	add	r3, r7
 8003cce:	edd3 7a00 	vldr	s15, [r3]
 8003cd2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003cd6:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003cda:	443b      	add	r3, r7
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003ce4:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	4413      	add	r3, r2
 8003cec:	edd3 7a00 	vldr	s15, [r3]
 8003cf0:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 8003cf4:	443b      	add	r3, r7
 8003cf6:	ed93 5a00 	vldr	s10, [r3]
 8003cfa:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003cfe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003d02:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003d06:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003d0a:	443b      	add	r3, r7
 8003d0c:	edd3 5a00 	vldr	s11, [r3]
 8003d10:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003d14:	443b      	add	r3, r7
 8003d16:	edd3 7a00 	vldr	s15, [r3]
 8003d1a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003d1e:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003d22:	443b      	add	r3, r7
 8003d24:	edd3 7a00 	vldr	s15, [r3]
 8003d28:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003d2c:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003d30:	443b      	add	r3, r7
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003d3a:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	4413      	add	r3, r2
 8003d42:	edd3 7a00 	vldr	s15, [r3]
 8003d46:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8003d4a:	ed93 5a00 	vldr	s10, [r3]
 8003d4e:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003d52:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003d56:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d5a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003d5e:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003d62:	443b      	add	r3, r7
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003d6c:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003d70:	443b      	add	r3, r7
 8003d72:	edd3 7a00 	vldr	s15, [r3]
 8003d76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d7a:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003d7e:	443b      	add	r3, r7
 8003d80:	edd3 7a00 	vldr	s15, [r3]
 8003d84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d88:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003d8c:	443b      	add	r3, r7
 8003d8e:	edd3 7a00 	vldr	s15, [r3]
 8003d92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003d96:	f645 6324 	movw	r3, #24100	@ 0x5e24
 8003d9a:	443b      	add	r3, r7
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003da4:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003da8:	443b      	add	r3, r7
 8003daa:	edd3 7a00 	vldr	s15, [r3]
 8003dae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003db2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dba:	f642 6398 	movw	r3, #11928	@ 0x2e98
 8003dbe:	443b      	add	r3, r7
 8003dc0:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 8003dc4:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003dc8:	443b      	add	r3, r7
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f203 739a 	addw	r3, r3, #1946	@ 0x79a
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	edc3 7a00 	vstr	s15, [r3]

			mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8003dd8:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003ddc:	443b      	add	r3, r7
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003de6:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003dea:	443b      	add	r3, r7
 8003dec:	edd3 6a00 	vldr	s13, [r3]
 8003df0:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003df4:	443b      	add	r3, r7
 8003df6:	edd3 7a00 	vldr	s15, [r3]
 8003dfa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003dfe:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003e02:	443b      	add	r3, r7
 8003e04:	ed93 6a00 	vldr	s12, [r3]
 8003e08:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8003e0c:	443b      	add	r3, r7
 8003e0e:	edd3 7a00 	vldr	s15, [r3]
 8003e12:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e16:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003e1a:	443b      	add	r3, r7
 8003e1c:	edd3 5a00 	vldr	s11, [r3]
 8003e20:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003e24:	443b      	add	r3, r7
 8003e26:	edd3 7a00 	vldr	s15, [r3]
 8003e2a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003e2e:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8003e32:	443b      	add	r3, r7
 8003e34:	edd3 7a00 	vldr	s15, [r3]
 8003e38:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003e3c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e44:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003e48:	443b      	add	r3, r7
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003e52:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	4413      	add	r3, r2
 8003e5a:	edd3 7a00 	vldr	s15, [r3]
 8003e5e:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8003e62:	443b      	add	r3, r7
 8003e64:	ed93 6a00 	vldr	s12, [r3]
 8003e68:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e70:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003e74:	443b      	add	r3, r7
 8003e76:	ed93 6a00 	vldr	s12, [r3]
 8003e7a:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003e7e:	443b      	add	r3, r7
 8003e80:	edd3 7a00 	vldr	s15, [r3]
 8003e84:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e88:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003e8c:	443b      	add	r3, r7
 8003e8e:	edd3 7a00 	vldr	s15, [r3]
 8003e92:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e96:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003e9a:	443b      	add	r3, r7
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003ea4:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8003ea8:	6812      	ldr	r2, [r2, #0]
 8003eaa:	4413      	add	r3, r2
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 8003eb4:	443b      	add	r3, r7
 8003eb6:	edd3 5a00 	vldr	s11, [r3]
 8003eba:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003ebe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ec2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003ec6:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003eca:	443b      	add	r3, r7
 8003ecc:	ed93 6a00 	vldr	s12, [r3]
 8003ed0:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003ed4:	443b      	add	r3, r7
 8003ed6:	edd3 7a00 	vldr	s15, [r3]
 8003eda:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003ede:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003ee2:	443b      	add	r3, r7
 8003ee4:	edd3 7a00 	vldr	s15, [r3]
 8003ee8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003eec:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003ef0:	443b      	add	r3, r7
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003efa:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	4413      	add	r3, r2
 8003f02:	edd3 7a00 	vldr	s15, [r3]
 8003f06:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 8003f0a:	edd3 5a00 	vldr	s11, [r3]
 8003f0e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003f12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003f16:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f1a:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003f1e:	443b      	add	r3, r7
 8003f20:	ed93 6a00 	vldr	s12, [r3]
 8003f24:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8003f28:	443b      	add	r3, r7
 8003f2a:	edd3 7a00 	vldr	s15, [r3]
 8003f2e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f32:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8003f36:	443b      	add	r3, r7
 8003f38:	edd3 5a00 	vldr	s11, [r3]
 8003f3c:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8003f40:	443b      	add	r3, r7
 8003f42:	edd3 7a00 	vldr	s15, [r3]
 8003f46:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003f4a:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8003f4e:	443b      	add	r3, r7
 8003f50:	ed93 5a00 	vldr	s10, [r3]
 8003f54:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003f58:	443b      	add	r3, r7
 8003f5a:	edd3 7a00 	vldr	s15, [r3]
 8003f5e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003f62:	f645 6330 	movw	r3, #24112	@ 0x5e30
 8003f66:	443b      	add	r3, r7
 8003f68:	edd3 7a00 	vldr	s15, [r3]
 8003f6c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003f70:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003f74:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f78:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003f7c:	443b      	add	r3, r7
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003f86:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	edd3 7a00 	vldr	s15, [r3]
 8003f92:	f645 6384 	movw	r3, #24196	@ 0x5e84
 8003f96:	443b      	add	r3, r7
 8003f98:	edd3 5a00 	vldr	s11, [r3]
 8003f9c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003fa0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003fa4:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003fa8:	443b      	add	r3, r7
 8003faa:	edd3 5a00 	vldr	s11, [r3]
 8003fae:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8003fb2:	443b      	add	r3, r7
 8003fb4:	edd3 7a00 	vldr	s15, [r3]
 8003fb8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003fbc:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8003fc0:	443b      	add	r3, r7
 8003fc2:	edd3 7a00 	vldr	s15, [r3]
 8003fc6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003fca:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8003fce:	443b      	add	r3, r7
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 8003fd8:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	4413      	add	r3, r2
 8003fe0:	edd3 7a00 	vldr	s15, [r3]
 8003fe4:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 8003fe8:	443b      	add	r3, r7
 8003fea:	ed93 5a00 	vldr	s10, [r3]
 8003fee:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003ff2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003ff6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003ffa:	f645 6390 	movw	r3, #24208	@ 0x5e90
 8003ffe:	443b      	add	r3, r7
 8004000:	edd3 5a00 	vldr	s11, [r3]
 8004004:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8004008:	443b      	add	r3, r7
 800400a:	edd3 7a00 	vldr	s15, [r3]
 800400e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004012:	f645 6328 	movw	r3, #24104	@ 0x5e28
 8004016:	443b      	add	r3, r7
 8004018:	edd3 7a00 	vldr	s15, [r3]
 800401c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004020:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8004024:	443b      	add	r3, r7
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800402e:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	4413      	add	r3, r2
 8004036:	edd3 7a00 	vldr	s15, [r3]
 800403a:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 800403e:	ed93 5a00 	vldr	s10, [r3]
 8004042:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004046:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800404a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800404e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004052:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004056:	f645 6390 	movw	r3, #24208	@ 0x5e90
 800405a:	443b      	add	r3, r7
 800405c:	edd3 7a00 	vldr	s15, [r3]
 8004060:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004064:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8004068:	443b      	add	r3, r7
 800406a:	edd3 7a00 	vldr	s15, [r3]
 800406e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004072:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8004076:	443b      	add	r3, r7
 8004078:	edd3 7a00 	vldr	s15, [r3]
 800407c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004080:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8004084:	443b      	add	r3, r7
 8004086:	edd3 7a00 	vldr	s15, [r3]
 800408a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800408e:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8004092:	443b      	add	r3, r7
 8004094:	edd3 7a00 	vldr	s15, [r3]
 8004098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800409c:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80040a0:	443b      	add	r3, r7
 80040a2:	edd3 7a00 	vldr	s15, [r3]
 80040a6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80040aa:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 80040ae:	443b      	add	r3, r7
 80040b0:	edd3 7a00 	vldr	s15, [r3]
 80040b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80040b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040bc:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80040c0:	443b      	add	r3, r7
 80040c2:	edd3 7a00 	vldr	s15, [r3]
 80040c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ca:	f645 6324 	movw	r3, #24100	@ 0x5e24
 80040ce:	443b      	add	r3, r7
 80040d0:	edd3 7a00 	vldr	s15, [r3]
 80040d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d8:	f645 6320 	movw	r3, #24096	@ 0x5e20
 80040dc:	443b      	add	r3, r7
 80040de:	edd3 7a00 	vldr	s15, [r3]
 80040e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80040e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ee:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80040f2:	443b      	add	r3, r7
 80040f4:	edd3 6a00 	vldr	s13, [r3]
 80040f8:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80040fc:	443b      	add	r3, r7
 80040fe:	edd3 7a00 	vldr	s15, [r3]
 8004102:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004106:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 800410a:	443b      	add	r3, r7
 800410c:	ed93 6a00 	vldr	s12, [r3]
 8004110:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 8004114:	443b      	add	r3, r7
 8004116:	edd3 7a00 	vldr	s15, [r3]
 800411a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800411e:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8004122:	443b      	add	r3, r7
 8004124:	edd3 5a00 	vldr	s11, [r3]
 8004128:	f645 6328 	movw	r3, #24104	@ 0x5e28
 800412c:	443b      	add	r3, r7
 800412e:	edd3 7a00 	vldr	s15, [r3]
 8004132:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004136:	f645 6330 	movw	r3, #24112	@ 0x5e30
 800413a:	443b      	add	r3, r7
 800413c:	edd3 7a00 	vldr	s15, [r3]
 8004140:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004144:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004148:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800414c:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8004150:	443b      	add	r3, r7
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800415a:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	4413      	add	r3, r2
 8004162:	edd3 7a00 	vldr	s15, [r3]
 8004166:	f645 6384 	movw	r3, #24196	@ 0x5e84
 800416a:	443b      	add	r3, r7
 800416c:	ed93 6a00 	vldr	s12, [r3]
 8004170:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004174:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004178:	f645 6390 	movw	r3, #24208	@ 0x5e90
 800417c:	443b      	add	r3, r7
 800417e:	ed93 6a00 	vldr	s12, [r3]
 8004182:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8004186:	443b      	add	r3, r7
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004190:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8004194:	443b      	add	r3, r7
 8004196:	edd3 7a00 	vldr	s15, [r3]
 800419a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800419e:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80041a2:	443b      	add	r3, r7
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80041ac:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	4413      	add	r3, r2
 80041b4:	edd3 7a00 	vldr	s15, [r3]
 80041b8:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 80041bc:	edd3 5a00 	vldr	s11, [r3]
 80041c0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80041c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80041c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80041cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80041d0:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 80041d4:	443b      	add	r3, r7
 80041d6:	ed93 6a00 	vldr	s12, [r3]
 80041da:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80041de:	443b      	add	r3, r7
 80041e0:	edd3 7a00 	vldr	s15, [r3]
 80041e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80041e8:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80041ec:	443b      	add	r3, r7
 80041ee:	edd3 5a00 	vldr	s11, [r3]
 80041f2:	f645 632c 	movw	r3, #24108	@ 0x5e2c
 80041f6:	443b      	add	r3, r7
 80041f8:	edd3 7a00 	vldr	s15, [r3]
 80041fc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004200:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8004204:	443b      	add	r3, r7
 8004206:	ed93 5a00 	vldr	s10, [r3]
 800420a:	f645 6320 	movw	r3, #24096	@ 0x5e20
 800420e:	443b      	add	r3, r7
 8004210:	edd3 7a00 	vldr	s15, [r3]
 8004214:	ee25 5a27 	vmul.f32	s10, s10, s15
 8004218:	f645 6330 	movw	r3, #24112	@ 0x5e30
 800421c:	443b      	add	r3, r7
 800421e:	edd3 7a00 	vldr	s15, [r3]
 8004222:	ee65 7a27 	vmul.f32	s15, s10, s15
 8004226:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800422a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800422e:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8004232:	443b      	add	r3, r7
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800423c:	f6a2 628c 	subw	r2, r2, #3724	@ 0xe8c
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	4413      	add	r3, r2
 8004244:	edd3 7a00 	vldr	s15, [r3]
 8004248:	f645 6384 	movw	r3, #24196	@ 0x5e84
 800424c:	443b      	add	r3, r7
 800424e:	edd3 5a00 	vldr	s11, [r3]
 8004252:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8004256:	ee26 6a27 	vmul.f32	s12, s12, s15
 800425a:	f645 6390 	movw	r3, #24208	@ 0x5e90
 800425e:	443b      	add	r3, r7
 8004260:	edd3 5a00 	vldr	s11, [r3]
 8004264:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8004268:	443b      	add	r3, r7
 800426a:	edd3 7a00 	vldr	s15, [r3]
 800426e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004272:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8004276:	443b      	add	r3, r7
 8004278:	edd3 7a00 	vldr	s15, [r3]
 800427c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004280:	f645 6360 	movw	r3, #24160	@ 0x5e60
 8004284:	443b      	add	r3, r7
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 800428e:	f6a2 6294 	subw	r2, r2, #3732	@ 0xe94
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	4413      	add	r3, r2
 8004296:	edd3 7a00 	vldr	s15, [r3]
 800429a:	f645 637c 	movw	r3, #24188	@ 0x5e7c
 800429e:	443b      	add	r3, r7
 80042a0:	ed93 5a00 	vldr	s10, [r3]
 80042a4:	ee75 7a67 	vsub.f32	s15, s10, s15
 80042a8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80042ac:	ee36 6a27 	vadd.f32	s12, s12, s15
 80042b0:	f645 6390 	movw	r3, #24208	@ 0x5e90
 80042b4:	443b      	add	r3, r7
 80042b6:	edd3 5a00 	vldr	s11, [r3]
 80042ba:	f645 6388 	movw	r3, #24200	@ 0x5e88
 80042be:	443b      	add	r3, r7
 80042c0:	edd3 7a00 	vldr	s15, [r3]
 80042c4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80042c8:	f645 6328 	movw	r3, #24104	@ 0x5e28
 80042cc:	443b      	add	r3, r7
 80042ce:	edd3 7a00 	vldr	s15, [r3]
 80042d2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80042d6:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80042da:	443b      	add	r3, r7
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	f607 6298 	addw	r2, r7, #3736	@ 0xe98
 80042e4:	f5a2 6269 	sub.w	r2, r2, #3728	@ 0xe90
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	4413      	add	r3, r2
 80042ec:	edd3 7a00 	vldr	s15, [r3]
 80042f0:	f507 43bd 	add.w	r3, r7, #24192	@ 0x5e80
 80042f4:	ed93 5a00 	vldr	s10, [r3]
 80042f8:	ee75 7a67 	vsub.f32	s15, s10, s15
 80042fc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004300:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004304:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004308:	f645 6390 	movw	r3, #24208	@ 0x5e90
 800430c:	443b      	add	r3, r7
 800430e:	edd3 7a00 	vldr	s15, [r3]
 8004312:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8004316:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 800431a:	443b      	add	r3, r7
 800431c:	edd3 7a00 	vldr	s15, [r3]
 8004320:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004324:	f645 638c 	movw	r3, #24204	@ 0x5e8c
 8004328:	443b      	add	r3, r7
 800432a:	edd3 7a00 	vldr	s15, [r3]
 800432e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004332:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8004336:	443b      	add	r3, r7
 8004338:	edd3 7a00 	vldr	s15, [r3]
 800433c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004340:	f645 6388 	movw	r3, #24200	@ 0x5e88
 8004344:	443b      	add	r3, r7
 8004346:	edd3 7a00 	vldr	s15, [r3]
 800434a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800434e:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8004352:	443b      	add	r3, r7
 8004354:	edd3 7a00 	vldr	s15, [r3]
 8004358:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800435c:	f645 631c 	movw	r3, #24092	@ 0x5e1c
 8004360:	443b      	add	r3, r7
 8004362:	edd3 7a00 	vldr	s15, [r3]
 8004366:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800436a:	f645 6324 	movw	r3, #24100	@ 0x5e24
 800436e:	443b      	add	r3, r7
 8004370:	edd3 7a00 	vldr	s15, [r3]
 8004374:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004378:	f645 6324 	movw	r3, #24100	@ 0x5e24
 800437c:	443b      	add	r3, r7
 800437e:	edd3 7a00 	vldr	s15, [r3]
 8004382:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004386:	f645 6320 	movw	r3, #24096	@ 0x5e20
 800438a:	443b      	add	r3, r7
 800438c:	edd3 7a00 	vldr	s15, [r3]
 8004390:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004394:	f645 6320 	movw	r3, #24096	@ 0x5e20
 8004398:	443b      	add	r3, r7
 800439a:	edd3 7a00 	vldr	s15, [r3]
 800439e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80043a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80043a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043aa:	f642 6398 	movw	r3, #11928	@ 0x2e98
 80043ae:	443b      	add	r3, r7
 80043b0:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 80043b4:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80043b8:	443b      	add	r3, r7
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i < tam; i++)
 80043c8:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80043cc:	443b      	add	r3, r7
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3301      	adds	r3, #1
 80043d2:	f645 6260 	movw	r2, #24160	@ 0x5e60
 80043d6:	443a      	add	r2, r7
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	f645 6360 	movw	r3, #24160	@ 0x5e60
 80043de:	443b      	add	r3, r7
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 80043e6:	f6fd a879 	blt.w	80014dc <NLLS+0x284>
		}

		J = 0;
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	f645 6268 	movw	r2, #24168	@ 0x5e68
 80043f2:	443a      	add	r2, r7
 80043f4:	6013      	str	r3, [r2, #0]

		for(int i=0; i < tam; i++)
 80043f6:	2300      	movs	r3, #0
 80043f8:	f645 625c 	movw	r2, #24156	@ 0x5e5c
 80043fc:	443a      	add	r2, r7
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	e034      	b.n	800446c <NLLS+0x3214>
		{
			J += (e[i] * e[i])/2;
 8004402:	f645 6398 	movw	r3, #24216	@ 0x5e98
 8004406:	443b      	add	r3, r7
 8004408:	f6a3 1254 	subw	r2, r3, #2388	@ 0x954
 800440c:	f645 635c 	movw	r3, #24156	@ 0x5e5c
 8004410:	443b      	add	r3, r7
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	ed93 7a00 	vldr	s14, [r3]
 800441c:	f645 6398 	movw	r3, #24216	@ 0x5e98
 8004420:	443b      	add	r3, r7
 8004422:	f6a3 1254 	subw	r2, r3, #2388	@ 0x954
 8004426:	f645 635c 	movw	r3, #24156	@ 0x5e5c
 800442a:	443b      	add	r3, r7
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	edd3 7a00 	vldr	s15, [r3]
 8004436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800443a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800443e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004442:	f645 6368 	movw	r3, #24168	@ 0x5e68
 8004446:	443b      	add	r3, r7
 8004448:	ed93 7a00 	vldr	s14, [r3]
 800444c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004450:	f645 6368 	movw	r3, #24168	@ 0x5e68
 8004454:	443b      	add	r3, r7
 8004456:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i < tam; i++)
 800445a:	f645 635c 	movw	r3, #24156	@ 0x5e5c
 800445e:	443b      	add	r3, r7
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	f645 625c 	movw	r2, #24156	@ 0x5e5c
 8004468:	443a      	add	r2, r7
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	f645 635c 	movw	r3, #24156	@ 0x5e5c
 8004470:	443b      	add	r3, r7
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8004478:	dbc3      	blt.n	8004402 <NLLS+0x31aa>
		}

		if(passo < 2)
 800447a:	f645 6397 	movw	r3, #24215	@ 0x5e97
 800447e:	443b      	add	r3, r7
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d808      	bhi.n	8004498 <NLLS+0x3240>
		{
			error_ant = J;
 8004486:	f645 6368 	movw	r3, #24168	@ 0x5e68
 800448a:	443b      	add	r3, r7
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f645 626c 	movw	r2, #24172	@ 0x5e6c
 8004492:	443a      	add	r2, r7
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	e038      	b.n	800450a <NLLS+0x32b2>
		}
		else
		{
			delta_J = 100*fabsf(J-error_ant)/J;
 8004498:	f645 6368 	movw	r3, #24168	@ 0x5e68
 800449c:	443b      	add	r3, r7
 800449e:	ed93 7a00 	vldr	s14, [r3]
 80044a2:	f645 636c 	movw	r3, #24172	@ 0x5e6c
 80044a6:	443b      	add	r3, r7
 80044a8:	edd3 7a00 	vldr	s15, [r3]
 80044ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044b0:	eef0 7ae7 	vabs.f32	s15, s15
 80044b4:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80046e8 <NLLS+0x3490>
 80044b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80044bc:	f645 6368 	movw	r3, #24168	@ 0x5e68
 80044c0:	443b      	add	r3, r7
 80044c2:	ed93 7a00 	vldr	s14, [r3]
 80044c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ca:	f645 6318 	movw	r3, #24088	@ 0x5e18
 80044ce:	443b      	add	r3, r7
 80044d0:	edc3 7a00 	vstr	s15, [r3]
			if(delta_J < 0.05)
 80044d4:	f645 6318 	movw	r3, #24088	@ 0x5e18
 80044d8:	443b      	add	r3, r7
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	f7fc f854 	bl	8000588 <__aeabi_f2d>
 80044e0:	a37f      	add	r3, pc, #508	@ (adr r3, 80046e0 <NLLS+0x3488>)
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f7fc fb19 	bl	8000b1c <__aeabi_dcmplt>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d004      	beq.n	80044fa <NLLS+0x32a2>
			{
				loop = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f645 6296 	movw	r2, #24214	@ 0x5e96
 80044f6:	443a      	add	r2, r7
 80044f8:	7013      	strb	r3, [r2, #0]
			}
			error_ant = J;
 80044fa:	f645 6368 	movw	r3, #24168	@ 0x5e68
 80044fe:	443b      	add	r3, r7
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f645 626c 	movw	r2, #24172	@ 0x5e6c
 8004506:	443a      	add	r2, r7
 8004508:	6013      	str	r3, [r2, #0]
		}

		for(int i = 0; i < N; i++)
 800450a:	2300      	movs	r3, #0
 800450c:	f645 6258 	movw	r2, #24152	@ 0x5e58
 8004510:	443a      	add	r2, r7
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	e0a4      	b.n	8004660 <NLLS+0x3408>
		{
			for(int j = 0; j < N; j++)
 8004516:	2300      	movs	r3, #0
 8004518:	f645 6254 	movw	r2, #24148	@ 0x5e54
 800451c:	443a      	add	r2, r7
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	e08e      	b.n	8004640 <NLLS+0x33e8>
			{
				Ht_H[i][j] = 0;
 8004522:	f642 6398 	movw	r3, #11928	@ 0x2e98
 8004526:	443b      	add	r3, r7
 8004528:	f5a3 61c1 	sub.w	r1, r3, #1544	@ 0x608
 800452c:	f645 6358 	movw	r3, #24152	@ 0x5e58
 8004530:	443b      	add	r3, r7
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4413      	add	r3, r2
 800453a:	f645 6254 	movw	r2, #24148	@ 0x5e54
 800453e:	443a      	add	r2, r7
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < tam; k++)
 800454e:	2300      	movs	r3, #0
 8004550:	f645 6250 	movw	r2, #24144	@ 0x5e50
 8004554:	443a      	add	r2, r7
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	e062      	b.n	8004620 <NLLS+0x33c8>
				{
					Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 800455a:	f642 6398 	movw	r3, #11928	@ 0x2e98
 800455e:	443b      	add	r3, r7
 8004560:	f5a3 61c1 	sub.w	r1, r3, #1544	@ 0x608
 8004564:	f645 6358 	movw	r3, #24152	@ 0x5e58
 8004568:	443b      	add	r3, r7
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4413      	add	r3, r2
 8004572:	f645 6254 	movw	r2, #24148	@ 0x5e54
 8004576:	443a      	add	r2, r7
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	ed93 7a00 	vldr	s14, [r3]
 8004584:	f642 6398 	movw	r3, #11928	@ 0x2e98
 8004588:	443b      	add	r3, r7
 800458a:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 800458e:	f645 6358 	movw	r3, #24152	@ 0x5e58
 8004592:	443b      	add	r3, r7
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800459a:	fb03 f101 	mul.w	r1, r3, r1
 800459e:	f645 6350 	movw	r3, #24144	@ 0x5e50
 80045a2:	443b      	add	r3, r7
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	440b      	add	r3, r1
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	edd3 6a00 	vldr	s13, [r3]
 80045b0:	f642 6398 	movw	r3, #11928	@ 0x2e98
 80045b4:	443b      	add	r3, r7
 80045b6:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 80045ba:	f645 6354 	movw	r3, #24148	@ 0x5e54
 80045be:	443b      	add	r3, r7
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80045c6:	fb03 f101 	mul.w	r1, r3, r1
 80045ca:	f645 6350 	movw	r3, #24144	@ 0x5e50
 80045ce:	443b      	add	r3, r7
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	440b      	add	r3, r1
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	edd3 7a00 	vldr	s15, [r3]
 80045dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e4:	f642 6398 	movw	r3, #11928	@ 0x2e98
 80045e8:	443b      	add	r3, r7
 80045ea:	f5a3 61c1 	sub.w	r1, r3, #1544	@ 0x608
 80045ee:	f645 6358 	movw	r3, #24152	@ 0x5e58
 80045f2:	443b      	add	r3, r7
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4613      	mov	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4413      	add	r3, r2
 80045fc:	f645 6254 	movw	r2, #24148	@ 0x5e54
 8004600:	443a      	add	r2, r7
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < tam; k++)
 800460e:	f645 6350 	movw	r3, #24144	@ 0x5e50
 8004612:	443b      	add	r3, r7
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3301      	adds	r3, #1
 8004618:	f645 6250 	movw	r2, #24144	@ 0x5e50
 800461c:	443a      	add	r2, r7
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	f645 6350 	movw	r3, #24144	@ 0x5e50
 8004624:	443b      	add	r3, r7
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 800462c:	db95      	blt.n	800455a <NLLS+0x3302>
			for(int j = 0; j < N; j++)
 800462e:	f645 6354 	movw	r3, #24148	@ 0x5e54
 8004632:	443b      	add	r3, r7
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3301      	adds	r3, #1
 8004638:	f645 6254 	movw	r2, #24148	@ 0x5e54
 800463c:	443a      	add	r2, r7
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	f645 6354 	movw	r3, #24148	@ 0x5e54
 8004644:	443b      	add	r3, r7
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b08      	cmp	r3, #8
 800464a:	f77f af6a 	ble.w	8004522 <NLLS+0x32ca>
		for(int i = 0; i < N; i++)
 800464e:	f645 6358 	movw	r3, #24152	@ 0x5e58
 8004652:	443b      	add	r3, r7
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	f645 6258 	movw	r2, #24152	@ 0x5e58
 800465c:	443a      	add	r2, r7
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	f645 6358 	movw	r3, #24152	@ 0x5e58
 8004664:	443b      	add	r3, r7
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b08      	cmp	r3, #8
 800466a:	f77f af54 	ble.w	8004516 <NLLS+0x32be>
				}
			}
		}

		inverter_matriz(Ht_H, inv);
 800466e:	4a1f      	ldr	r2, [pc, #124]	@ (80046ec <NLLS+0x3494>)
 8004670:	f645 6398 	movw	r3, #24216	@ 0x5e98
 8004674:	4413      	add	r3, r2
 8004676:	19da      	adds	r2, r3, r7
 8004678:	4b1d      	ldr	r3, [pc, #116]	@ (80046f0 <NLLS+0x3498>)
 800467a:	f503 43bd 	add.w	r3, r3, #24192	@ 0x5e80
 800467e:	f103 0318 	add.w	r3, r3, #24
 8004682:	443b      	add	r3, r7
 8004684:	4611      	mov	r1, r2
 8004686:	4618      	mov	r0, r3
 8004688:	f7fc fccc 	bl	8001024 <inverter_matriz>

		for(int i = 0; i < N; i++)
 800468c:	2300      	movs	r3, #0
 800468e:	f645 624c 	movw	r2, #24140	@ 0x5e4c
 8004692:	443a      	add	r2, r7
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	e0af      	b.n	80047f8 <NLLS+0x35a0>
		{
			for(int j = 0; j < tam; j++)
 8004698:	2300      	movs	r3, #0
 800469a:	f645 6248 	movw	r2, #24136	@ 0x5e48
 800469e:	443a      	add	r2, r7
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e098      	b.n	80047d6 <NLLS+0x357e>
			{
				mul_mat[i][j] = 0;
 80046a4:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 80046a8:	f6a3 6288 	subw	r2, r3, #3720	@ 0xe88
 80046ac:	f645 634c 	movw	r3, #24140	@ 0x5e4c
 80046b0:	443b      	add	r3, r7
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80046b8:	fb03 f101 	mul.w	r1, r3, r1
 80046bc:	f645 6348 	movw	r3, #24136	@ 0x5e48
 80046c0:	443b      	add	r3, r7
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	440b      	add	r3, r1
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < N; k++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	f645 6244 	movw	r2, #24132	@ 0x5e44
 80046d6:	443a      	add	r2, r7
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e06d      	b.n	80047b8 <NLLS+0x3560>
 80046dc:	f3af 8000 	nop.w
 80046e0:	9999999a 	.word	0x9999999a
 80046e4:	3fa99999 	.word	0x3fa99999
 80046e8:	42c80000 	.word	0x42c80000
 80046ec:	ffffc890 	.word	0xffffc890
 80046f0:	ffffc9f8 	.word	0xffffc9f8
				{
					mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 80046f4:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 80046f8:	f6a3 6288 	subw	r2, r3, #3720	@ 0xe88
 80046fc:	f645 634c 	movw	r3, #24140	@ 0x5e4c
 8004700:	443b      	add	r3, r7
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8004708:	fb03 f101 	mul.w	r1, r3, r1
 800470c:	f645 6348 	movw	r3, #24136	@ 0x5e48
 8004710:	443b      	add	r3, r7
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	440b      	add	r3, r1
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	ed93 7a00 	vldr	s14, [r3]
 800471e:	f642 6398 	movw	r3, #11928	@ 0x2e98
 8004722:	443b      	add	r3, r7
 8004724:	f5a3 61ee 	sub.w	r1, r3, #1904	@ 0x770
 8004728:	f645 634c 	movw	r3, #24140	@ 0x5e4c
 800472c:	443b      	add	r3, r7
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	f645 6244 	movw	r2, #24132	@ 0x5e44
 800473a:	443a      	add	r2, r7
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	edd3 6a00 	vldr	s13, [r3]
 8004748:	f642 6398 	movw	r3, #11928	@ 0x2e98
 800474c:	443b      	add	r3, r7
 800474e:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 8004752:	f645 6344 	movw	r3, #24132	@ 0x5e44
 8004756:	443b      	add	r3, r7
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800475e:	fb03 f101 	mul.w	r1, r3, r1
 8004762:	f645 6348 	movw	r3, #24136	@ 0x5e48
 8004766:	443b      	add	r3, r7
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	440b      	add	r3, r1
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	edd3 7a00 	vldr	s15, [r3]
 8004774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800477c:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 8004780:	f6a3 6288 	subw	r2, r3, #3720	@ 0xe88
 8004784:	f645 634c 	movw	r3, #24140	@ 0x5e4c
 8004788:	443b      	add	r3, r7
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8004790:	fb03 f101 	mul.w	r1, r3, r1
 8004794:	f645 6348 	movw	r3, #24136	@ 0x5e48
 8004798:	443b      	add	r3, r7
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	440b      	add	r3, r1
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < N; k++)
 80047a6:	f645 6344 	movw	r3, #24132	@ 0x5e44
 80047aa:	443b      	add	r3, r7
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3301      	adds	r3, #1
 80047b0:	f645 6244 	movw	r2, #24132	@ 0x5e44
 80047b4:	443a      	add	r2, r7
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	f645 6344 	movw	r3, #24132	@ 0x5e44
 80047bc:	443b      	add	r3, r7
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	dd97      	ble.n	80046f4 <NLLS+0x349c>
			for(int j = 0; j < tam; j++)
 80047c4:	f645 6348 	movw	r3, #24136	@ 0x5e48
 80047c8:	443b      	add	r3, r7
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	f645 6248 	movw	r2, #24136	@ 0x5e48
 80047d2:	443a      	add	r2, r7
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	f645 6348 	movw	r3, #24136	@ 0x5e48
 80047da:	443b      	add	r3, r7
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 80047e2:	f6ff af5f 	blt.w	80046a4 <NLLS+0x344c>
		for(int i = 0; i < N; i++)
 80047e6:	f645 634c 	movw	r3, #24140	@ 0x5e4c
 80047ea:	443b      	add	r3, r7
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3301      	adds	r3, #1
 80047f0:	f645 624c 	movw	r2, #24140	@ 0x5e4c
 80047f4:	443a      	add	r2, r7
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	f645 634c 	movw	r3, #24140	@ 0x5e4c
 80047fc:	443b      	add	r3, r7
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b08      	cmp	r3, #8
 8004802:	f77f af49 	ble.w	8004698 <NLLS+0x3440>
				}
			}
		}

		for(int i = 0; i < N; i++)
 8004806:	2300      	movs	r3, #0
 8004808:	f645 6240 	movw	r2, #24128	@ 0x5e40
 800480c:	443a      	add	r2, r7
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	e06c      	b.n	80048ec <NLLS+0x3694>
		{
			Ht_e[i] = 0;
 8004812:	f642 6398 	movw	r3, #11928	@ 0x2e98
 8004816:	443b      	add	r3, r7
 8004818:	f2a3 622c 	subw	r2, r3, #1580	@ 0x62c
 800481c:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8004820:	443b      	add	r3, r7
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < tam; j++)
 800482e:	2300      	movs	r3, #0
 8004830:	f645 623c 	movw	r2, #24124	@ 0x5e3c
 8004834:	443a      	add	r2, r7
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	e048      	b.n	80048cc <NLLS+0x3674>
			{
				Ht_e[i] += mul_mat[i][j]*e[j];
 800483a:	f642 6398 	movw	r3, #11928	@ 0x2e98
 800483e:	443b      	add	r3, r7
 8004840:	f2a3 622c 	subw	r2, r3, #1580	@ 0x62c
 8004844:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8004848:	443b      	add	r3, r7
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	ed93 7a00 	vldr	s14, [r3]
 8004854:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 8004858:	f6a3 6288 	subw	r2, r3, #3720	@ 0xe88
 800485c:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8004860:	443b      	add	r3, r7
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8004868:	fb03 f101 	mul.w	r1, r3, r1
 800486c:	f645 633c 	movw	r3, #24124	@ 0x5e3c
 8004870:	443b      	add	r3, r7
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	440b      	add	r3, r1
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	edd3 6a00 	vldr	s13, [r3]
 800487e:	f645 6398 	movw	r3, #24216	@ 0x5e98
 8004882:	443b      	add	r3, r7
 8004884:	f6a3 1254 	subw	r2, r3, #2388	@ 0x954
 8004888:	f645 633c 	movw	r3, #24124	@ 0x5e3c
 800488c:	443b      	add	r3, r7
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4413      	add	r3, r2
 8004894:	edd3 7a00 	vldr	s15, [r3]
 8004898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800489c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048a0:	f642 6398 	movw	r3, #11928	@ 0x2e98
 80048a4:	443b      	add	r3, r7
 80048a6:	f2a3 622c 	subw	r2, r3, #1580	@ 0x62c
 80048aa:	f645 6340 	movw	r3, #24128	@ 0x5e40
 80048ae:	443b      	add	r3, r7
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	edc3 7a00 	vstr	s15, [r3]
			for(int j = 0; j < tam; j++)
 80048ba:	f645 633c 	movw	r3, #24124	@ 0x5e3c
 80048be:	443b      	add	r3, r7
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3301      	adds	r3, #1
 80048c4:	f645 623c 	movw	r2, #24124	@ 0x5e3c
 80048c8:	443a      	add	r2, r7
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	f645 633c 	movw	r3, #24124	@ 0x5e3c
 80048d0:	443b      	add	r3, r7
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 80048d8:	dbaf      	blt.n	800483a <NLLS+0x35e2>
		for(int i = 0; i < N; i++)
 80048da:	f645 6340 	movw	r3, #24128	@ 0x5e40
 80048de:	443b      	add	r3, r7
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3301      	adds	r3, #1
 80048e4:	f645 6240 	movw	r2, #24128	@ 0x5e40
 80048e8:	443a      	add	r2, r7
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	f645 6340 	movw	r3, #24128	@ 0x5e40
 80048f0:	443b      	add	r3, r7
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	dd8c      	ble.n	8004812 <NLLS+0x35ba>
			}
		}

		for(int i = 0; i < N; i++)
 80048f8:	2300      	movs	r3, #0
 80048fa:	f645 6238 	movw	r2, #24120	@ 0x5e38
 80048fe:	443a      	add	r2, r7
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e031      	b.n	8004968 <NLLS+0x3710>
		{
			p0[i] += Ht_e[i];
 8004904:	f645 6338 	movw	r3, #24120	@ 0x5e38
 8004908:	443b      	add	r3, r7
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	f503 43bd 	add.w	r3, r3, #24192	@ 0x5e80
 8004912:	f103 0318 	add.w	r3, r3, #24
 8004916:	443b      	add	r3, r7
 8004918:	3ba4      	subs	r3, #164	@ 0xa4
 800491a:	ed93 7a00 	vldr	s14, [r3]
 800491e:	f642 6398 	movw	r3, #11928	@ 0x2e98
 8004922:	443b      	add	r3, r7
 8004924:	f2a3 622c 	subw	r2, r3, #1580	@ 0x62c
 8004928:	f645 6338 	movw	r3, #24120	@ 0x5e38
 800492c:	443b      	add	r3, r7
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	edd3 7a00 	vldr	s15, [r3]
 8004938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800493c:	f645 6338 	movw	r3, #24120	@ 0x5e38
 8004940:	443b      	add	r3, r7
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	f503 43bd 	add.w	r3, r3, #24192	@ 0x5e80
 800494a:	f103 0318 	add.w	r3, r3, #24
 800494e:	443b      	add	r3, r7
 8004950:	3ba4      	subs	r3, #164	@ 0xa4
 8004952:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < N; i++)
 8004956:	f645 6338 	movw	r3, #24120	@ 0x5e38
 800495a:	443b      	add	r3, r7
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	f645 6238 	movw	r2, #24120	@ 0x5e38
 8004964:	443a      	add	r2, r7
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	f645 6338 	movw	r3, #24120	@ 0x5e38
 800496c:	443b      	add	r3, r7
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b08      	cmp	r3, #8
 8004972:	ddc7      	ble.n	8004904 <NLLS+0x36ac>
		}

		passo++;
 8004974:	f645 6397 	movw	r3, #24215	@ 0x5e97
 8004978:	443b      	add	r3, r7
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	f645 6297 	movw	r2, #24215	@ 0x5e97
 8004982:	443a      	add	r2, r7
 8004984:	7013      	strb	r3, [r2, #0]
	while(loop == 1)
 8004986:	f645 6396 	movw	r3, #24214	@ 0x5e96
 800498a:	443b      	add	r3, r7
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b01      	cmp	r3, #1
 8004990:	f43c acbe 	beq.w	8001310 <NLLS+0xb8>
	}
    p[0] = sx;
 8004994:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 8004998:	f6a3 6398 	subw	r3, r3, #3736	@ 0xe98
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f645 6290 	movw	r2, #24208	@ 0x5e90
 80049a2:	443a      	add	r2, r7
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 80049a8:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 80049ac:	f6a3 6398 	subw	r3, r3, #3736	@ 0xe98
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3304      	adds	r3, #4
 80049b4:	f645 628c 	movw	r2, #24204	@ 0x5e8c
 80049b8:	443a      	add	r2, r7
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 80049be:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 80049c2:	f6a3 6398 	subw	r3, r3, #3736	@ 0xe98
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3308      	adds	r3, #8
 80049ca:	f645 6288 	movw	r2, #24200	@ 0x5e88
 80049ce:	443a      	add	r2, r7
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 80049d4:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 80049d8:	f6a3 6398 	subw	r3, r3, #3736	@ 0xe98
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	f645 6284 	movw	r2, #24196	@ 0x5e84
 80049e4:	443a      	add	r2, r7
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	601a      	str	r2, [r3, #0]
    p[4] = by;
 80049ea:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 80049ee:	f6a3 6398 	subw	r3, r3, #3736	@ 0xe98
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3310      	adds	r3, #16
 80049f6:	f507 42bd 	add.w	r2, r7, #24192	@ 0x5e80
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 80049fe:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 8004a02:	f6a3 6398 	subw	r3, r3, #3736	@ 0xe98
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3314      	adds	r3, #20
 8004a0a:	f645 627c 	movw	r2, #24188	@ 0x5e7c
 8004a0e:	443a      	add	r2, r7
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 8004a14:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 8004a18:	f6a3 6398 	subw	r3, r3, #3736	@ 0xe98
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3318      	adds	r3, #24
 8004a20:	f645 6278 	movw	r2, #24184	@ 0x5e78
 8004a24:	443a      	add	r2, r7
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 8004a2a:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 8004a2e:	f6a3 6398 	subw	r3, r3, #3736	@ 0xe98
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	331c      	adds	r3, #28
 8004a36:	f645 6274 	movw	r2, #24180	@ 0x5e74
 8004a3a:	443a      	add	r2, r7
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 8004a40:	f607 6398 	addw	r3, r7, #3736	@ 0xe98
 8004a44:	f6a3 6398 	subw	r3, r3, #3736	@ 0xe98
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3320      	adds	r3, #32
 8004a4c:	f645 6270 	movw	r2, #24176	@ 0x5e70
 8004a50:	443a      	add	r2, r7
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	601a      	str	r2, [r3, #0]

    return passo;
 8004a56:	f645 6397 	movw	r3, #24215	@ 0x5e97
 8004a5a:	443b      	add	r3, r7
 8004a5c:	781b      	ldrb	r3, [r3, #0]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f507 47bd 	add.w	r7, r7, #24192	@ 0x5e80
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bdb0      	pop	{r4, r5, r7, pc}
 8004a6a:	bf00      	nop

08004a6c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08c      	sub	sp, #48	@ 0x30
 8004a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a72:	f107 031c 	add.w	r3, r7, #28
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	605a      	str	r2, [r3, #4]
 8004a7c:	609a      	str	r2, [r3, #8]
 8004a7e:	60da      	str	r2, [r3, #12]
 8004a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a82:	4b8f      	ldr	r3, [pc, #572]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	4a8e      	ldr	r2, [pc, #568]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a8e:	4b8c      	ldr	r3, [pc, #560]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004a9a:	4b89      	ldr	r3, [pc, #548]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	4a88      	ldr	r2, [pc, #544]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aa6:	4b86      	ldr	r3, [pc, #536]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab2:	4b83      	ldr	r3, [pc, #524]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab6:	4a82      	ldr	r2, [pc, #520]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004abe:	4b80      	ldr	r3, [pc, #512]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aca:	4b7d      	ldr	r3, [pc, #500]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ace:	4a7c      	ldr	r2, [pc, #496]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004ad0:	f043 0302 	orr.w	r3, r3, #2
 8004ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ad6:	4b7a      	ldr	r3, [pc, #488]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ae2:	4b77      	ldr	r3, [pc, #476]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae6:	4a76      	ldr	r2, [pc, #472]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004ae8:	f043 0308 	orr.w	r3, r3, #8
 8004aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aee:	4b74      	ldr	r3, [pc, #464]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	60bb      	str	r3, [r7, #8]
 8004af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004afa:	4b71      	ldr	r3, [pc, #452]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afe:	4a70      	ldr	r2, [pc, #448]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004b00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b06:	4b6e      	ldr	r3, [pc, #440]	@ (8004cc0 <MX_GPIO_Init+0x254>)
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0e:	607b      	str	r3, [r7, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SINC_master_GPIO_Port, SINC_master_Pin, GPIO_PIN_RESET);
 8004b12:	2200      	movs	r2, #0
 8004b14:	2108      	movs	r1, #8
 8004b16:	486b      	ldr	r0, [pc, #428]	@ (8004cc4 <MX_GPIO_Init+0x258>)
 8004b18:	f001 fae2 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8004b22:	4869      	ldr	r0, [pc, #420]	@ (8004cc8 <MX_GPIO_Init+0x25c>)
 8004b24:	f001 fadc 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004b28:	2200      	movs	r2, #0
 8004b2a:	2140      	movs	r1, #64	@ 0x40
 8004b2c:	4867      	ldr	r0, [pc, #412]	@ (8004ccc <MX_GPIO_Init+0x260>)
 8004b2e:	f001 fad7 	bl	80060e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004b32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b38:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004b42:	f107 031c 	add.w	r3, r7, #28
 8004b46:	4619      	mov	r1, r3
 8004b48:	4861      	ldr	r0, [pc, #388]	@ (8004cd0 <MX_GPIO_Init+0x264>)
 8004b4a:	f001 f91d 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_slave_Pin;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b52:	2300      	movs	r3, #0
 8004b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SINC_slave_GPIO_Port, &GPIO_InitStruct);
 8004b5a:	f107 031c 	add.w	r3, r7, #28
 8004b5e:	4619      	mov	r1, r3
 8004b60:	485b      	ldr	r0, [pc, #364]	@ (8004cd0 <MX_GPIO_Init+0x264>)
 8004b62:	f001 f911 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8004b66:	2302      	movs	r3, #2
 8004b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b72:	2303      	movs	r3, #3
 8004b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b76:	230b      	movs	r3, #11
 8004b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8004b7a:	f107 031c 	add.w	r3, r7, #28
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4853      	ldr	r0, [pc, #332]	@ (8004cd0 <MX_GPIO_Init+0x264>)
 8004b82:	f001 f901 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8004b86:	2306      	movs	r3, #6
 8004b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b92:	2303      	movs	r3, #3
 8004b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b96:	230b      	movs	r3, #11
 8004b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b9a:	f107 031c 	add.w	r3, r7, #28
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4848      	ldr	r0, [pc, #288]	@ (8004cc4 <MX_GPIO_Init+0x258>)
 8004ba2:	f001 f8f1 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_master_Pin;
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004baa:	2301      	movs	r3, #1
 8004bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SINC_master_GPIO_Port, &GPIO_InitStruct);
 8004bb6:	f107 031c 	add.w	r3, r7, #28
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4841      	ldr	r0, [pc, #260]	@ (8004cc4 <MX_GPIO_Init+0x258>)
 8004bbe:	f001 f8e3 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8004bc2:	f244 0381 	movw	r3, #16513	@ 0x4081
 8004bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bd4:	f107 031c 	add.w	r3, r7, #28
 8004bd8:	4619      	mov	r1, r3
 8004bda:	483b      	ldr	r0, [pc, #236]	@ (8004cc8 <MX_GPIO_Init+0x25c>)
 8004bdc:	f001 f8d4 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004be0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be6:	2302      	movs	r3, #2
 8004be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004bf2:	230b      	movs	r3, #11
 8004bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004bf6:	f107 031c 	add.w	r3, r7, #28
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4832      	ldr	r0, [pc, #200]	@ (8004cc8 <MX_GPIO_Init+0x25c>)
 8004bfe:	f001 f8c3 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004c02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c10:	2303      	movs	r3, #3
 8004c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c14:	2307      	movs	r3, #7
 8004c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c18:	f107 031c 	add.w	r3, r7, #28
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	482d      	ldr	r0, [pc, #180]	@ (8004cd4 <MX_GPIO_Init+0x268>)
 8004c20:	f001 f8b2 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004c24:	2340      	movs	r3, #64	@ 0x40
 8004c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c30:	2300      	movs	r3, #0
 8004c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004c34:	f107 031c 	add.w	r3, r7, #28
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4824      	ldr	r0, [pc, #144]	@ (8004ccc <MX_GPIO_Init+0x260>)
 8004c3c:	f001 f8a4 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004c40:	2380      	movs	r3, #128	@ 0x80
 8004c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c44:	2300      	movs	r3, #0
 8004c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004c4c:	f107 031c 	add.w	r3, r7, #28
 8004c50:	4619      	mov	r1, r3
 8004c52:	481e      	ldr	r0, [pc, #120]	@ (8004ccc <MX_GPIO_Init+0x260>)
 8004c54:	f001 f898 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004c58:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8004c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c66:	2303      	movs	r3, #3
 8004c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004c6a:	230a      	movs	r3, #10
 8004c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c6e:	f107 031c 	add.w	r3, r7, #28
 8004c72:	4619      	mov	r1, r3
 8004c74:	4813      	ldr	r0, [pc, #76]	@ (8004cc4 <MX_GPIO_Init+0x258>)
 8004c76:	f001 f887 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004c7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c80:	2300      	movs	r3, #0
 8004c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004c88:	f107 031c 	add.w	r3, r7, #28
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	480d      	ldr	r0, [pc, #52]	@ (8004cc4 <MX_GPIO_Init+0x258>)
 8004c90:	f001 f87a 	bl	8005d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004c94:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ca6:	230b      	movs	r3, #11
 8004ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004caa:	f107 031c 	add.w	r3, r7, #28
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4806      	ldr	r0, [pc, #24]	@ (8004ccc <MX_GPIO_Init+0x260>)
 8004cb2:	f001 f869 	bl	8005d88 <HAL_GPIO_Init>

}
 8004cb6:	bf00      	nop
 8004cb8:	3730      	adds	r7, #48	@ 0x30
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	40020000 	.word	0x40020000
 8004cc8:	40020400 	.word	0x40020400
 8004ccc:	40021800 	.word	0x40021800
 8004cd0:	40020800 	.word	0x40020800
 8004cd4:	40020c00 	.word	0x40020c00

08004cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004cd8:	b590      	push	{r4, r7, lr}
 8004cda:	f5ad 4dfa 	sub.w	sp, sp, #32000	@ 0x7d00
 8004cde:	b08d      	sub	sp, #52	@ 0x34
 8004ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  char file_read[25] = {0};
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f647 42f4 	movw	r2, #31988	@ 0x7cf4
 8004ce8:	443a      	add	r2, r7
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	f647 43f8 	movw	r3, #31992	@ 0x7cf8
 8004cf0:	443b      	add	r3, r7
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	605a      	str	r2, [r3, #4]
 8004cf8:	609a      	str	r2, [r3, #8]
 8004cfa:	60da      	str	r2, [r3, #12]
 8004cfc:	611a      	str	r2, [r3, #16]
 8004cfe:	751a      	strb	r2, [r3, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d00:	f000 fedb 	bl	8005aba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d04:	f000 fa5a 	bl	80051bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d08:	f7ff feb0 	bl	8004a6c <MX_GPIO_Init>
  MX_SPI3_Init();
 8004d0c:	f000 fca4 	bl	8005658 <MX_SPI3_Init>
  MX_FATFS_Init();
 8004d10:	f002 fcc8 	bl	80076a4 <MX_FATFS_Init>
  MX_SPI1_Init();
 8004d14:	f000 fc62 	bl	80055dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t start_time = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f647 5214 	movw	r2, #32020	@ 0x7d14
 8004d1e:	443a      	add	r2, r7
 8004d20:	6013      	str	r3, [r2, #0]
  uint16_t file_cont = 1;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f647 522e 	movw	r2, #32046	@ 0x7d2e
 8004d28:	443a      	add	r2, r7
 8004d2a:	8013      	strh	r3, [r2, #0]
  //union calib_t param1[9], param2[9];
  //float p1[9];
  //uint8_t time1[4], time2[4];
  float NLLS_time = 0;//, ETS_time = 0;
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	f647 5210 	movw	r2, #32016	@ 0x7d10
 8004d34:	443a      	add	r2, r7
 8004d36:	6013      	str	r3, [r2, #0]

  FATFS fs;
  FRESULT res;

  // Monta o sistema de arquivos na unidade lógica "0:"
  res = f_mount(&fs, "0:", 1);
 8004d38:	f647 23bc 	movw	r3, #31420	@ 0x7abc
 8004d3c:	443b      	add	r3, r7
 8004d3e:	2201      	movs	r2, #1
 8004d40:	49b0      	ldr	r1, [pc, #704]	@ (8005004 <main+0x32c>)
 8004d42:	4618      	mov	r0, r3
 8004d44:	f005 ffce 	bl	800ace4 <f_mount>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	f647 520f 	movw	r2, #32015	@ 0x7d0f
 8004d4e:	443a      	add	r2, r7
 8004d50:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) {
 8004d52:	f647 530f 	movw	r3, #32015	@ 0x7d0f
 8004d56:	443b      	add	r3, r7
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <main+0x8a>
      //printf("Falha ao montar o sistema de arquivos: %d\n", res);
      Error_Handler(); // ou retorne um erro
 8004d5e:	f000 fa99 	bl	8005294 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(file_cont >= 3001)
 8004d62:	f647 532e 	movw	r3, #32046	@ 0x7d2e
 8004d66:	443b      	add	r3, r7
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <main+0x9e>
	{
		return 1;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e20e      	b.n	8005194 <main+0x4bc>
	}

	sprintf(file_read, "0:/DATA1/run%d.txt", file_cont);  // Prefixo de volume (0:) é comum no FatFs
 8004d76:	f647 532e 	movw	r3, #32046	@ 0x7d2e
 8004d7a:	443b      	add	r3, r7
 8004d7c:	881a      	ldrh	r2, [r3, #0]
 8004d7e:	f647 43f4 	movw	r3, #31988	@ 0x7cf4
 8004d82:	443b      	add	r3, r7
 8004d84:	49a0      	ldr	r1, [pc, #640]	@ (8005008 <main+0x330>)
 8004d86:	4618      	mov	r0, r3
 8004d88:	f008 fde2 	bl	800d950 <siprintf>

	FIL fil;
	FRESULT res;

	res = f_open(&fil, file_read, FA_READ);
 8004d8c:	f647 41f4 	movw	r1, #31988	@ 0x7cf4
 8004d90:	4439      	add	r1, r7
 8004d92:	4b9e      	ldr	r3, [pc, #632]	@ (800500c <main+0x334>)
 8004d94:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8004d98:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004d9c:	443b      	add	r3, r7
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4618      	mov	r0, r3
 8004da2:	f005 ffe5 	bl	800ad70 <f_open>
 8004da6:	4603      	mov	r3, r0
 8004da8:	f647 520e 	movw	r2, #32014	@ 0x7d0e
 8004dac:	443a      	add	r2, r7
 8004dae:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 8004db0:	f647 530e 	movw	r3, #32014	@ 0x7d0e
 8004db4:	443b      	add	r3, r7
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <main+0xe8>
	{
		return 1;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e1e9      	b.n	8005194 <main+0x4bc>
	}

	char line[30670];
	UINT br; // Bytes lidos

	float *linhas[] = {mx, my, mz};  // Vetor de ponteiros para facilitar o acesso
 8004dc0:	f647 5330 	movw	r3, #32048	@ 0x7d30
 8004dc4:	443b      	add	r3, r7
 8004dc6:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8004dca:	4a91      	ldr	r2, [pc, #580]	@ (8005010 <main+0x338>)
 8004dcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8004dce:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 3; i++)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f647 5228 	movw	r2, #32040	@ 0x7d28
 8004dd8:	443a      	add	r2, r7
 8004dda:	6013      	str	r3, [r2, #0]
 8004ddc:	e0b6      	b.n	8004f4c <main+0x274>
	{
		// lê uma linha completa (até '\n' ou fim do buffer)
		int line_pos = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	f647 5224 	movw	r2, #32036	@ 0x7d24
 8004de4:	443a      	add	r2, r7
 8004de6:	6013      	str	r3, [r2, #0]
		char ch;
		do {
			res = f_read(&fil, &ch, 1, &br);
 8004de8:	f647 23b8 	movw	r3, #31416	@ 0x7ab8
 8004dec:	443b      	add	r3, r7
 8004dee:	f647 21a7 	movw	r1, #31399	@ 0x7aa7
 8004df2:	4439      	add	r1, r7
 8004df4:	4885      	ldr	r0, [pc, #532]	@ (800500c <main+0x334>)
 8004df6:	f647 5230 	movw	r2, #32048	@ 0x7d30
 8004dfa:	4402      	add	r2, r0
 8004dfc:	19d0      	adds	r0, r2, r7
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f006 fa73 	bl	800b2ea <f_read>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f647 520e 	movw	r2, #32014	@ 0x7d0e
 8004e0a:	443a      	add	r2, r7
 8004e0c:	7013      	strb	r3, [r2, #0]
			if (res != FR_OK || br == 0) {
 8004e0e:	f647 530e 	movw	r3, #32014	@ 0x7d0e
 8004e12:	443b      	add	r3, r7
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d107      	bne.n	8004e2a <main+0x152>
 8004e1a:	f647 5330 	movw	r3, #32048	@ 0x7d30
 8004e1e:	443b      	add	r3, r7
 8004e20:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <main+0x156>
				return 1;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e1b2      	b.n	8005194 <main+0x4bc>
			}
			line[line_pos++] = ch;
 8004e2e:	f647 5324 	movw	r3, #32036	@ 0x7d24
 8004e32:	443b      	add	r3, r7
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	f647 5124 	movw	r1, #32036	@ 0x7d24
 8004e3c:	4439      	add	r1, r7
 8004e3e:	600a      	str	r2, [r1, #0]
 8004e40:	f647 5230 	movw	r2, #32048	@ 0x7d30
 8004e44:	443a      	add	r2, r7
 8004e46:	f2a2 2289 	subw	r2, r2, #649	@ 0x289
 8004e4a:	7811      	ldrb	r1, [r2, #0]
 8004e4c:	f507 6253 	add.w	r2, r7, #3376	@ 0xd30
 8004e50:	f6a2 2258 	subw	r2, r2, #2648	@ 0xa58
 8004e54:	54d1      	strb	r1, [r2, r3]
		} while (ch != '\n' && line_pos < sizeof(line)-1);
 8004e56:	f647 5330 	movw	r3, #32048	@ 0x7d30
 8004e5a:	443b      	add	r3, r7
 8004e5c:	f2a3 2389 	subw	r3, r3, #649	@ 0x289
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b0a      	cmp	r3, #10
 8004e64:	d007      	beq.n	8004e76 <main+0x19e>
 8004e66:	f647 5324 	movw	r3, #32036	@ 0x7d24
 8004e6a:	443b      	add	r3, r7
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f247 72cc 	movw	r2, #30668	@ 0x77cc
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d9b8      	bls.n	8004de8 <main+0x110>
		line[line_pos] = '\0';
 8004e76:	f507 6353 	add.w	r3, r7, #3376	@ 0xd30
 8004e7a:	f6a3 2258 	subw	r2, r3, #2648	@ 0xa58
 8004e7e:	f647 5324 	movw	r3, #32036	@ 0x7d24
 8004e82:	443b      	add	r3, r7
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4413      	add	r3, r2
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]

		char *token = strtok(line, ",");
 8004e8c:	4b61      	ldr	r3, [pc, #388]	@ (8005014 <main+0x33c>)
 8004e8e:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8004e92:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004e96:	443b      	add	r3, r7
 8004e98:	495f      	ldr	r1, [pc, #380]	@ (8005018 <main+0x340>)
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f008 fdd6 	bl	800da4c <strtok>
 8004ea0:	f647 5320 	movw	r3, #32032	@ 0x7d20
 8004ea4:	443b      	add	r3, r7
 8004ea6:	6018      	str	r0, [r3, #0]
		int j = 0;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f647 521c 	movw	r2, #32028	@ 0x7d1c
 8004eae:	443a      	add	r2, r7
 8004eb0:	6013      	str	r3, [r2, #0]

		while (token != NULL && j < tam)
 8004eb2:	e02c      	b.n	8004f0e <main+0x236>
		{
			linhas[i][j] = strtof(token, NULL);
 8004eb4:	f647 5330 	movw	r3, #32048	@ 0x7d30
 8004eb8:	443b      	add	r3, r7
 8004eba:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 8004ebe:	f647 5228 	movw	r2, #32040	@ 0x7d28
 8004ec2:	443a      	add	r2, r7
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004eca:	f647 531c 	movw	r3, #32028	@ 0x7d1c
 8004ece:	443b      	add	r3, r7
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	18d4      	adds	r4, r2, r3
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	f647 5320 	movw	r3, #32032	@ 0x7d20
 8004edc:	443b      	add	r3, r7
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	f007 fda4 	bl	800ca2c <strtof>
 8004ee4:	eef0 7a40 	vmov.f32	s15, s0
 8004ee8:	edc4 7a00 	vstr	s15, [r4]
			token = strtok(NULL, ",");
 8004eec:	494a      	ldr	r1, [pc, #296]	@ (8005018 <main+0x340>)
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f008 fdac 	bl	800da4c <strtok>
 8004ef4:	f647 5320 	movw	r3, #32032	@ 0x7d20
 8004ef8:	443b      	add	r3, r7
 8004efa:	6018      	str	r0, [r3, #0]
			j++;
 8004efc:	f647 531c 	movw	r3, #32028	@ 0x7d1c
 8004f00:	443b      	add	r3, r7
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3301      	adds	r3, #1
 8004f06:	f647 521c 	movw	r2, #32028	@ 0x7d1c
 8004f0a:	443a      	add	r2, r7
 8004f0c:	6013      	str	r3, [r2, #0]
		while (token != NULL && j < tam)
 8004f0e:	f647 5320 	movw	r3, #32032	@ 0x7d20
 8004f12:	443b      	add	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d006      	beq.n	8004f28 <main+0x250>
 8004f1a:	f647 531c 	movw	r3, #32028	@ 0x7d1c
 8004f1e:	443b      	add	r3, r7
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8004f26:	dbc5      	blt.n	8004eb4 <main+0x1dc>
		}

		if (j != tam)
 8004f28:	f647 531c 	movw	r3, #32028	@ 0x7d1c
 8004f2c:	443b      	add	r3, r7
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8004f34:	d001      	beq.n	8004f3a <main+0x262>
		{
			return 1;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e12c      	b.n	8005194 <main+0x4bc>
	for (int i = 0; i < 3; i++)
 8004f3a:	f647 5328 	movw	r3, #32040	@ 0x7d28
 8004f3e:	443b      	add	r3, r7
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	f647 5228 	movw	r2, #32040	@ 0x7d28
 8004f48:	443a      	add	r2, r7
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	f647 5328 	movw	r3, #32040	@ 0x7d28
 8004f50:	443b      	add	r3, r7
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	f77f af42 	ble.w	8004dde <main+0x106>
		}
	}

	f_close(&fil);
 8004f5a:	4b2c      	ldr	r3, [pc, #176]	@ (800500c <main+0x334>)
 8004f5c:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8004f60:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004f64:	443b      	add	r3, r7
 8004f66:	4618      	mov	r0, r3
 8004f68:	f006 fe09 	bl	800bb7e <f_close>

	/*start_time = HAL_GetTick();
	ETS(mx, my, mz, p0);
	ETS_time = HAL_GetTick() - start_time;*/

	start_time = HAL_GetTick();
 8004f6c:	f000 fdf6 	bl	8005b5c <HAL_GetTick>
 8004f70:	f647 5314 	movw	r3, #32020	@ 0x7d14
 8004f74:	443b      	add	r3, r7
 8004f76:	6018      	str	r0, [r3, #0]
	passos_NLLS = NLLS(mx, my, mz, p1);
 8004f78:	4b28      	ldr	r3, [pc, #160]	@ (800501c <main+0x344>)
 8004f7a:	4a29      	ldr	r2, [pc, #164]	@ (8005020 <main+0x348>)
 8004f7c:	4929      	ldr	r1, [pc, #164]	@ (8005024 <main+0x34c>)
 8004f7e:	482a      	ldr	r0, [pc, #168]	@ (8005028 <main+0x350>)
 8004f80:	f7fc f96a 	bl	8001258 <NLLS>
 8004f84:	4603      	mov	r3, r0
 8004f86:	461a      	mov	r2, r3
 8004f88:	4b28      	ldr	r3, [pc, #160]	@ (800502c <main+0x354>)
 8004f8a:	701a      	strb	r2, [r3, #0]
	NLLS_time = HAL_GetTick() - start_time;
 8004f8c:	f000 fde6 	bl	8005b5c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	f647 5314 	movw	r3, #32020	@ 0x7d14
 8004f96:	443b      	add	r3, r7
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	ee07 3a90 	vmov	s15, r3
 8004fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa4:	f647 5310 	movw	r3, #32016	@ 0x7d10
 8004fa8:	443b      	add	r3, r7
 8004faa:	edc3 7a00 	vstr	s15, [r3]





	sprintf(file_read, "0:/RES/run%d.txt", file_cont);
 8004fae:	f647 532e 	movw	r3, #32046	@ 0x7d2e
 8004fb2:	443b      	add	r3, r7
 8004fb4:	881a      	ldrh	r2, [r3, #0]
 8004fb6:	f647 43f4 	movw	r3, #31988	@ 0x7cf4
 8004fba:	443b      	add	r3, r7
 8004fbc:	491c      	ldr	r1, [pc, #112]	@ (8005030 <main+0x358>)
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f008 fcc6 	bl	800d950 <siprintf>
	res = f_open(&fil, file_read, FA_WRITE | FA_CREATE_ALWAYS);
 8004fc4:	f647 41f4 	movw	r1, #31988	@ 0x7cf4
 8004fc8:	4439      	add	r1, r7
 8004fca:	4b10      	ldr	r3, [pc, #64]	@ (800500c <main+0x334>)
 8004fcc:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8004fd0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004fd4:	443b      	add	r3, r7
 8004fd6:	220a      	movs	r2, #10
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f005 fec9 	bl	800ad70 <f_open>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f647 520e 	movw	r2, #32014	@ 0x7d0e
 8004fe4:	443a      	add	r2, r7
 8004fe6:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 8004fe8:	f647 530e 	movw	r3, #32014	@ 0x7d0e
 8004fec:	443b      	add	r3, r7
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <main+0x320>
	{
		return 1;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0cd      	b.n	8005194 <main+0x4bc>
	}

	char out_line[128];
	UINT bw;

	for (int i = 0; i < 9; i++) {
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f647 5218 	movw	r2, #32024	@ 0x7d18
 8004ffe:	443a      	add	r2, r7
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	e050      	b.n	80050a6 <main+0x3ce>
 8005004:	080106a4 	.word	0x080106a4
 8005008:	080106a8 	.word	0x080106a8
 800500c:	ffff8350 	.word	0xffff8350
 8005010:	080106dc 	.word	0x080106dc
 8005014:	ffff85a8 	.word	0xffff85a8
 8005018:	080106bc 	.word	0x080106bc
 800501c:	20000f0c 	.word	0x20000f0c
 8005020:	20000ab4 	.word	0x20000ab4
 8005024:	2000065c 	.word	0x2000065c
 8005028:	20000204 	.word	0x20000204
 800502c:	20000f30 	.word	0x20000f30
 8005030:	080106c0 	.word	0x080106c0
		sprintf(out_line, "%f\n", p1[i]);
 8005034:	4a5a      	ldr	r2, [pc, #360]	@ (80051a0 <main+0x4c8>)
 8005036:	f647 5318 	movw	r3, #32024	@ 0x7d18
 800503a:	443b      	add	r3, r7
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f7fb fa9f 	bl	8000588 <__aeabi_f2d>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	4855      	ldr	r0, [pc, #340]	@ (80051a4 <main+0x4cc>)
 8005050:	f647 5130 	movw	r1, #32048	@ 0x7d30
 8005054:	4401      	add	r1, r0
 8005056:	19c8      	adds	r0, r1, r7
 8005058:	4953      	ldr	r1, [pc, #332]	@ (80051a8 <main+0x4d0>)
 800505a:	f008 fc79 	bl	800d950 <siprintf>
		f_write(&fil, out_line, strlen(out_line), &bw);
 800505e:	4b51      	ldr	r3, [pc, #324]	@ (80051a4 <main+0x4cc>)
 8005060:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8005064:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8005068:	443b      	add	r3, r7
 800506a:	4618      	mov	r0, r3
 800506c:	f7fb f920 	bl	80002b0 <strlen>
 8005070:	4602      	mov	r2, r0
 8005072:	f647 23a8 	movw	r3, #31400	@ 0x7aa8
 8005076:	443b      	add	r3, r7
 8005078:	494a      	ldr	r1, [pc, #296]	@ (80051a4 <main+0x4cc>)
 800507a:	f501 41fa 	add.w	r1, r1, #32000	@ 0x7d00
 800507e:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 8005082:	4439      	add	r1, r7
 8005084:	4849      	ldr	r0, [pc, #292]	@ (80051ac <main+0x4d4>)
 8005086:	f500 40fa 	add.w	r0, r0, #32000	@ 0x7d00
 800508a:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 800508e:	4438      	add	r0, r7
 8005090:	f006 faa3 	bl	800b5da <f_write>
	for (int i = 0; i < 9; i++) {
 8005094:	f647 5318 	movw	r3, #32024	@ 0x7d18
 8005098:	443b      	add	r3, r7
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3301      	adds	r3, #1
 800509e:	f647 5218 	movw	r2, #32024	@ 0x7d18
 80050a2:	443a      	add	r2, r7
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	f647 5318 	movw	r3, #32024	@ 0x7d18
 80050aa:	443b      	add	r3, r7
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	ddc0      	ble.n	8005034 <main+0x35c>
	}

	sprintf(out_line, "%f\n", NLLS_time);
 80050b2:	f647 5310 	movw	r3, #32016	@ 0x7d10
 80050b6:	443b      	add	r3, r7
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	f7fb fa65 	bl	8000588 <__aeabi_f2d>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4838      	ldr	r0, [pc, #224]	@ (80051a4 <main+0x4cc>)
 80050c4:	f647 5130 	movw	r1, #32048	@ 0x7d30
 80050c8:	4401      	add	r1, r0
 80050ca:	19c8      	adds	r0, r1, r7
 80050cc:	4936      	ldr	r1, [pc, #216]	@ (80051a8 <main+0x4d0>)
 80050ce:	f008 fc3f 	bl	800d950 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 80050d2:	4b34      	ldr	r3, [pc, #208]	@ (80051a4 <main+0x4cc>)
 80050d4:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 80050d8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80050dc:	443b      	add	r3, r7
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fb f8e6 	bl	80002b0 <strlen>
 80050e4:	4602      	mov	r2, r0
 80050e6:	f647 23a8 	movw	r3, #31400	@ 0x7aa8
 80050ea:	443b      	add	r3, r7
 80050ec:	492d      	ldr	r1, [pc, #180]	@ (80051a4 <main+0x4cc>)
 80050ee:	f501 41fa 	add.w	r1, r1, #32000	@ 0x7d00
 80050f2:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 80050f6:	4439      	add	r1, r7
 80050f8:	482c      	ldr	r0, [pc, #176]	@ (80051ac <main+0x4d4>)
 80050fa:	f500 40fa 	add.w	r0, r0, #32000	@ 0x7d00
 80050fe:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 8005102:	4438      	add	r0, r7
 8005104:	f006 fa69 	bl	800b5da <f_write>

	sprintf(out_line, "%u\n", passos_NLLS);
 8005108:	4b29      	ldr	r3, [pc, #164]	@ (80051b0 <main+0x4d8>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	4b25      	ldr	r3, [pc, #148]	@ (80051a4 <main+0x4cc>)
 8005110:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8005114:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8005118:	443b      	add	r3, r7
 800511a:	4926      	ldr	r1, [pc, #152]	@ (80051b4 <main+0x4dc>)
 800511c:	4618      	mov	r0, r3
 800511e:	f008 fc17 	bl	800d950 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 8005122:	4b20      	ldr	r3, [pc, #128]	@ (80051a4 <main+0x4cc>)
 8005124:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 8005128:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800512c:	443b      	add	r3, r7
 800512e:	4618      	mov	r0, r3
 8005130:	f7fb f8be 	bl	80002b0 <strlen>
 8005134:	4602      	mov	r2, r0
 8005136:	f647 23a8 	movw	r3, #31400	@ 0x7aa8
 800513a:	443b      	add	r3, r7
 800513c:	4919      	ldr	r1, [pc, #100]	@ (80051a4 <main+0x4cc>)
 800513e:	f501 41fa 	add.w	r1, r1, #32000	@ 0x7d00
 8005142:	f101 0130 	add.w	r1, r1, #48	@ 0x30
 8005146:	4439      	add	r1, r7
 8005148:	4818      	ldr	r0, [pc, #96]	@ (80051ac <main+0x4d4>)
 800514a:	f500 40fa 	add.w	r0, r0, #32000	@ 0x7d00
 800514e:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 8005152:	4438      	add	r0, r7
 8005154:	f006 fa41 	bl	800b5da <f_write>

	f_close(&fil);
 8005158:	4b14      	ldr	r3, [pc, #80]	@ (80051ac <main+0x4d4>)
 800515a:	f503 43fa 	add.w	r3, r3, #32000	@ 0x7d00
 800515e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8005162:	443b      	add	r3, r7
 8005164:	4618      	mov	r0, r3
 8005166:	f006 fd0a 	bl	800bb7e <f_close>

	file_cont++;
 800516a:	f647 532e 	movw	r3, #32046	@ 0x7d2e
 800516e:	443b      	add	r3, r7
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	f647 522e 	movw	r2, #32046	@ 0x7d2e
 8005178:	443a      	add	r2, r7
 800517a:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800517c:	2180      	movs	r1, #128	@ 0x80
 800517e:	480e      	ldr	r0, [pc, #56]	@ (80051b8 <main+0x4e0>)
 8005180:	f000 ffc7 	bl	8006112 <HAL_GPIO_TogglePin>
	HAL_Delay(10);
 8005184:	200a      	movs	r0, #10
 8005186:	f000 fcf5 	bl	8005b74 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800518a:	2180      	movs	r1, #128	@ 0x80
 800518c:	480a      	ldr	r0, [pc, #40]	@ (80051b8 <main+0x4e0>)
 800518e:	f000 ffc0 	bl	8006112 <HAL_GPIO_TogglePin>
  {
 8005192:	e5e6      	b.n	8004d62 <main+0x8a>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8005194:	4618      	mov	r0, r3
 8005196:	f507 47fa 	add.w	r7, r7, #32000	@ 0x7d00
 800519a:	3734      	adds	r7, #52	@ 0x34
 800519c:	46bd      	mov	sp, r7
 800519e:	bd90      	pop	{r4, r7, pc}
 80051a0:	20000f0c 	.word	0x20000f0c
 80051a4:	ffff82d0 	.word	0xffff82d0
 80051a8:	080106d4 	.word	0x080106d4
 80051ac:	ffff8350 	.word	0xffff8350
 80051b0:	20000f30 	.word	0x20000f30
 80051b4:	080106d8 	.word	0x080106d8
 80051b8:	40020400 	.word	0x40020400

080051bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b094      	sub	sp, #80	@ 0x50
 80051c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051c2:	f107 0320 	add.w	r3, r7, #32
 80051c6:	2230      	movs	r2, #48	@ 0x30
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f008 fc23 	bl	800da16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051d0:	f107 030c 	add.w	r3, r7, #12
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	605a      	str	r2, [r3, #4]
 80051da:	609a      	str	r2, [r3, #8]
 80051dc:	60da      	str	r2, [r3, #12]
 80051de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80051e0:	4b2a      	ldr	r3, [pc, #168]	@ (800528c <SystemClock_Config+0xd0>)
 80051e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e4:	4a29      	ldr	r2, [pc, #164]	@ (800528c <SystemClock_Config+0xd0>)
 80051e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80051ec:	4b27      	ldr	r3, [pc, #156]	@ (800528c <SystemClock_Config+0xd0>)
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051f8:	4b25      	ldr	r3, [pc, #148]	@ (8005290 <SystemClock_Config+0xd4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a24      	ldr	r2, [pc, #144]	@ (8005290 <SystemClock_Config+0xd4>)
 80051fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	4b22      	ldr	r3, [pc, #136]	@ (8005290 <SystemClock_Config+0xd4>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005210:	2302      	movs	r3, #2
 8005212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005214:	2301      	movs	r3, #1
 8005216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005218:	2310      	movs	r3, #16
 800521a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800521c:	2302      	movs	r3, #2
 800521e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005220:	2300      	movs	r3, #0
 8005222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005224:	2308      	movs	r3, #8
 8005226:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8005228:	23d8      	movs	r3, #216	@ 0xd8
 800522a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800522c:	2302      	movs	r3, #2
 800522e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005230:	2302      	movs	r3, #2
 8005232:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005234:	f107 0320 	add.w	r3, r7, #32
 8005238:	4618      	mov	r0, r3
 800523a:	f000 ffd5 	bl	80061e8 <HAL_RCC_OscConfig>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8005244:	f000 f826 	bl	8005294 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005248:	f000 ff7e 	bl	8006148 <HAL_PWREx_EnableOverDrive>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005252:	f000 f81f 	bl	8005294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005256:	230f      	movs	r3, #15
 8005258:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800525a:	2302      	movs	r3, #2
 800525c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005262:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005266:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800526c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800526e:	f107 030c 	add.w	r3, r7, #12
 8005272:	2107      	movs	r1, #7
 8005274:	4618      	mov	r0, r3
 8005276:	f001 fa5b 	bl	8006730 <HAL_RCC_ClockConfig>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8005280:	f000 f808 	bl	8005294 <Error_Handler>
  }
}
 8005284:	bf00      	nop
 8005286:	3750      	adds	r7, #80	@ 0x50
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40023800 	.word	0x40023800
 8005290:	40007000 	.word	0x40007000

08005294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005298:	b672      	cpsid	i
}
 800529a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800529c:	2201      	movs	r2, #1
 800529e:	2101      	movs	r1, #1
 80052a0:	4802      	ldr	r0, [pc, #8]	@ (80052ac <Error_Handler+0x18>)
 80052a2:	f000 ff1d 	bl	80060e0 <HAL_GPIO_WritePin>
  while (1)
 80052a6:	bf00      	nop
 80052a8:	e7fd      	b.n	80052a6 <Error_Handler+0x12>
 80052aa:	bf00      	nop
 80052ac:	40020400 	.word	0x40020400

080052b0 <SD_SendDummyClock>:
#define SD_CS_LOW()   HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET)
#define SD_CS_HIGH()  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET)

extern SPI_HandleTypeDef hspi3; // Use a instância correta do SPI

static void SD_SendDummyClock(void) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
    uint8_t dummy = 0xFF;
 80052b6:	23ff      	movs	r3, #255	@ 0xff
 80052b8:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 10; i++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	607b      	str	r3, [r7, #4]
 80052be:	e009      	b.n	80052d4 <SD_SendDummyClock+0x24>
        HAL_SPI_Transmit(&hspi3, &dummy, 1, HAL_MAX_DELAY);
 80052c0:	1cf9      	adds	r1, r7, #3
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	2201      	movs	r2, #1
 80052c8:	4806      	ldr	r0, [pc, #24]	@ (80052e4 <SD_SendDummyClock+0x34>)
 80052ca:	f001 fcce 	bl	8006c6a <HAL_SPI_Transmit>
    for (int i = 0; i < 10; i++)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3301      	adds	r3, #1
 80052d2:	607b      	str	r3, [r7, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b09      	cmp	r3, #9
 80052d8:	ddf2      	ble.n	80052c0 <SD_SendDummyClock+0x10>
}
 80052da:	bf00      	nop
 80052dc:	bf00      	nop
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20000f98 	.word	0x20000f98

080052e8 <SD_TransmitByte>:

static uint8_t SD_TransmitByte(uint8_t data) {
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
    uint8_t received;
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 80052f2:	f107 020f 	add.w	r2, r7, #15
 80052f6:	1df9      	adds	r1, r7, #7
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	2301      	movs	r3, #1
 8005300:	4803      	ldr	r0, [pc, #12]	@ (8005310 <SD_TransmitByte+0x28>)
 8005302:	f001 fe28 	bl	8006f56 <HAL_SPI_TransmitReceive>
    return received;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	20000f98 	.word	0x20000f98

08005314 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
    return SD_TransmitByte(0xFF);
 8005318:	20ff      	movs	r0, #255	@ 0xff
 800531a:	f7ff ffe5 	bl	80052e8 <SD_TransmitByte>
 800531e:	4603      	mov	r3, r0
}
 8005320:	4618      	mov	r0, r3
 8005322:	bd80      	pop	{r7, pc}

08005324 <SD_WaitReady>:

static uint8_t SD_WaitReady(void) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
    uint8_t res;
    uint32_t timeout = HAL_GetTick();
 800532a:	f000 fc17 	bl	8005b5c <HAL_GetTick>
 800532e:	6078      	str	r0, [r7, #4]
    do {
        res = SD_ReceiveByte();
 8005330:	f7ff fff0 	bl	8005314 <SD_ReceiveByte>
 8005334:	4603      	mov	r3, r0
 8005336:	70fb      	strb	r3, [r7, #3]
        if (res == 0xFF) return 1;
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	2bff      	cmp	r3, #255	@ 0xff
 800533c:	d101      	bne.n	8005342 <SD_WaitReady+0x1e>
 800533e:	2301      	movs	r3, #1
 8005340:	e008      	b.n	8005354 <SD_WaitReady+0x30>
    } while ((HAL_GetTick() - timeout) < 500);
 8005342:	f000 fc0b 	bl	8005b5c <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005350:	d3ee      	bcc.n	8005330 <SD_WaitReady+0xc>
    return 0;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <SD_Select>:

static void SD_Select(void) {
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
    SD_CS_LOW();
 8005360:	2200      	movs	r2, #0
 8005362:	2110      	movs	r1, #16
 8005364:	4803      	ldr	r0, [pc, #12]	@ (8005374 <SD_Select+0x18>)
 8005366:	f000 febb 	bl	80060e0 <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 800536a:	f7ff ffd3 	bl	8005314 <SD_ReceiveByte>
}
 800536e:	bf00      	nop
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40020000 	.word	0x40020000

08005378 <SD_Deselect>:

static void SD_Deselect(void) {
 8005378:	b580      	push	{r7, lr}
 800537a:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 800537c:	2201      	movs	r2, #1
 800537e:	2110      	movs	r1, #16
 8005380:	4803      	ldr	r0, [pc, #12]	@ (8005390 <SD_Deselect+0x18>)
 8005382:	f000 fead 	bl	80060e0 <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 8005386:	f7ff ffc5 	bl	8005314 <SD_ReceiveByte>
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40020000 	.word	0x40020000

08005394 <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	6039      	str	r1, [r7, #0]
 800539e:	71fb      	strb	r3, [r7, #7]
 80053a0:	4613      	mov	r3, r2
 80053a2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[6];
    buf[0] = 0x40 | cmd;
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	723b      	strb	r3, [r7, #8]
    buf[1] = (arg >> 24) & 0xFF;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	0e1b      	lsrs	r3, r3, #24
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	727b      	strb	r3, [r7, #9]
    buf[2] = (arg >> 16) & 0xFF;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	0c1b      	lsrs	r3, r3, #16
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	72bb      	strb	r3, [r7, #10]
    buf[3] = (arg >> 8) & 0xFF;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	0a1b      	lsrs	r3, r3, #8
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	72fb      	strb	r3, [r7, #11]
    buf[4] = arg & 0xFF;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	733b      	strb	r3, [r7, #12]
    buf[5] = crc;
 80053cc:	79bb      	ldrb	r3, [r7, #6]
 80053ce:	737b      	strb	r3, [r7, #13]

    SD_Deselect();
 80053d0:	f7ff ffd2 	bl	8005378 <SD_Deselect>
    SD_Select();
 80053d4:	f7ff ffc2 	bl	800535c <SD_Select>

    if (!SD_WaitReady()) {
 80053d8:	f7ff ffa4 	bl	8005324 <SD_WaitReady>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d103      	bne.n	80053ea <SD_SendCommand+0x56>
        SD_Deselect();
 80053e2:	f7ff ffc9 	bl	8005378 <SD_Deselect>
        return 0xFF;
 80053e6:	23ff      	movs	r3, #255	@ 0xff
 80053e8:	e024      	b.n	8005434 <SD_SendCommand+0xa0>
    }

    for (int i = 0; i < 6; i++)
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e00a      	b.n	8005406 <SD_SendCommand+0x72>
        SD_TransmitByte(buf[i]);
 80053f0:	f107 0208 	add.w	r2, r7, #8
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff ff74 	bl	80052e8 <SD_TransmitByte>
    for (int i = 0; i < 6; i++)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	3301      	adds	r3, #1
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b05      	cmp	r3, #5
 800540a:	ddf1      	ble.n	80053f0 <SD_SendCommand+0x5c>

    // Aguarda resposta (bit 7 == 0)
    for (int i = 0; i < 10; i++) {
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	e00c      	b.n	800542c <SD_SendCommand+0x98>
        uint8_t res = SD_ReceiveByte();
 8005412:	f7ff ff7f 	bl	8005314 <SD_ReceiveByte>
 8005416:	4603      	mov	r3, r0
 8005418:	73fb      	strb	r3, [r7, #15]
        if ((res & 0x80) == 0)
 800541a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	db01      	blt.n	8005426 <SD_SendCommand+0x92>
            return res;
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	e006      	b.n	8005434 <SD_SendCommand+0xa0>
    for (int i = 0; i < 10; i++) {
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	3301      	adds	r3, #1
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b09      	cmp	r3, #9
 8005430:	ddef      	ble.n	8005412 <SD_SendCommand+0x7e>
    }

    return 0xFF;
 8005432:	23ff      	movs	r3, #255	@ 0xff
}
 8005434:	4618      	mov	r0, r3
 8005436:	3718      	adds	r7, #24
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <SD_Init>:

uint8_t SD_Init(void) {
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8005442:	2201      	movs	r2, #1
 8005444:	2110      	movs	r1, #16
 8005446:	4820      	ldr	r0, [pc, #128]	@ (80054c8 <SD_Init+0x8c>)
 8005448:	f000 fe4a 	bl	80060e0 <HAL_GPIO_WritePin>
    SD_SendDummyClock(); // 80 clocks
 800544c:	f7ff ff30 	bl	80052b0 <SD_SendDummyClock>

    uint8_t res = SD_SendCommand(CMD0, 0, 0x95);
 8005450:	2295      	movs	r2, #149	@ 0x95
 8005452:	2100      	movs	r1, #0
 8005454:	2000      	movs	r0, #0
 8005456:	f7ff ff9d 	bl	8005394 <SD_SendCommand>
 800545a:	4603      	mov	r3, r0
 800545c:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d001      	beq.n	8005468 <SD_Init+0x2c>
 8005464:	2301      	movs	r3, #1
 8005466:	e02b      	b.n	80054c0 <SD_Init+0x84>

    res = SD_SendCommand(CMD8, 0x1AA, 0x87);
 8005468:	2287      	movs	r2, #135	@ 0x87
 800546a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800546e:	2008      	movs	r0, #8
 8005470:	f7ff ff90 	bl	8005394 <SD_SendCommand>
 8005474:	4603      	mov	r3, r0
 8005476:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d001      	beq.n	8005482 <SD_Init+0x46>
 800547e:	2301      	movs	r3, #1
 8005480:	e01e      	b.n	80054c0 <SD_Init+0x84>

    // Espera inicialização
    do {
        SD_SendCommand(CMD55, 0, 0x01);
 8005482:	2201      	movs	r2, #1
 8005484:	2100      	movs	r1, #0
 8005486:	2037      	movs	r0, #55	@ 0x37
 8005488:	f7ff ff84 	bl	8005394 <SD_SendCommand>
        res = SD_SendCommand(ACMD41, 0x40000000, 0x01);
 800548c:	2201      	movs	r2, #1
 800548e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005492:	2029      	movs	r0, #41	@ 0x29
 8005494:	f7ff ff7e 	bl	8005394 <SD_SendCommand>
 8005498:	4603      	mov	r3, r0
 800549a:	71fb      	strb	r3, [r7, #7]
    } while (res != 0x00);
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1ef      	bne.n	8005482 <SD_Init+0x46>

    res = SD_SendCommand(CMD58, 0, 0x01);
 80054a2:	2201      	movs	r2, #1
 80054a4:	2100      	movs	r1, #0
 80054a6:	203a      	movs	r0, #58	@ 0x3a
 80054a8:	f7ff ff74 	bl	8005394 <SD_SendCommand>
 80054ac:	4603      	mov	r3, r0
 80054ae:	71fb      	strb	r3, [r7, #7]
    SD_Deselect();
 80054b0:	f7ff ff62 	bl	8005378 <SD_Deselect>
    return (res == 0x00) ? SD_OK : SD_ERROR;
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf14      	ite	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	2300      	moveq	r3, #0
 80054be:	b2db      	uxtb	r3, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40020000 	.word	0x40020000

080054cc <SD_ReadBlock>:

uint8_t SD_ReadBlock(uint32_t blockAddr, uint8_t* buff) {
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
    uint8_t token;

    if (SD_SendCommand(CMD17, blockAddr, 0x01) != 0x00)
 80054d6:	2201      	movs	r2, #1
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	2011      	movs	r0, #17
 80054dc:	f7ff ff5a 	bl	8005394 <SD_SendCommand>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <SD_ReadBlock+0x1e>
        return SD_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e030      	b.n	800554c <SD_ReadBlock+0x80>

    // Espera token 0xFE (início do bloco)
    for (int i = 0; i < 10000; i++) {
 80054ea:	2300      	movs	r3, #0
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	e009      	b.n	8005504 <SD_ReadBlock+0x38>
        token = SD_ReceiveByte();
 80054f0:	f7ff ff10 	bl	8005314 <SD_ReceiveByte>
 80054f4:	4603      	mov	r3, r0
 80054f6:	75fb      	strb	r3, [r7, #23]
        if (token == 0xFE) break;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	2bfe      	cmp	r3, #254	@ 0xfe
 80054fc:	d008      	beq.n	8005510 <SD_ReadBlock+0x44>
    for (int i = 0; i < 10000; i++) {
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	3301      	adds	r3, #1
 8005502:	613b      	str	r3, [r7, #16]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f242 720f 	movw	r2, #9999	@ 0x270f
 800550a:	4293      	cmp	r3, r2
 800550c:	ddf0      	ble.n	80054f0 <SD_ReadBlock+0x24>
 800550e:	e000      	b.n	8005512 <SD_ReadBlock+0x46>
        if (token == 0xFE) break;
 8005510:	bf00      	nop
    }
    if (token != 0xFE) return SD_ERROR;
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	2bfe      	cmp	r3, #254	@ 0xfe
 8005516:	d001      	beq.n	800551c <SD_ReadBlock+0x50>
 8005518:	2301      	movs	r3, #1
 800551a:	e017      	b.n	800554c <SD_ReadBlock+0x80>

    for (int i = 0; i < 512; i++)
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e009      	b.n	8005536 <SD_ReadBlock+0x6a>
        buff[i] = SD_ReceiveByte();
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	18d4      	adds	r4, r2, r3
 8005528:	f7ff fef4 	bl	8005314 <SD_ReceiveByte>
 800552c:	4603      	mov	r3, r0
 800552e:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 512; i++)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3301      	adds	r3, #1
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800553c:	dbf1      	blt.n	8005522 <SD_ReadBlock+0x56>

    SD_ReceiveByte(); // Discard CRC
 800553e:	f7ff fee9 	bl	8005314 <SD_ReceiveByte>
    SD_ReceiveByte();
 8005542:	f7ff fee7 	bl	8005314 <SD_ReceiveByte>

    SD_Deselect();
 8005546:	f7ff ff17 	bl	8005378 <SD_Deselect>
    return SD_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	bd90      	pop	{r4, r7, pc}

08005554 <SD_WriteBlock>:

uint8_t SD_WriteBlock(uint32_t blockAddr, const uint8_t* buff) {
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
    if (SD_SendCommand(CMD24, blockAddr, 0x01) != 0x00)
 800555e:	2201      	movs	r2, #1
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	2018      	movs	r0, #24
 8005564:	f7ff ff16 	bl	8005394 <SD_SendCommand>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <SD_WriteBlock+0x1e>
        return SD_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e02f      	b.n	80055d2 <SD_WriteBlock+0x7e>

    SD_TransmitByte(0xFE); // Start token
 8005572:	20fe      	movs	r0, #254	@ 0xfe
 8005574:	f7ff feb8 	bl	80052e8 <SD_TransmitByte>

    for (int i = 0; i < 512; i++)
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	e009      	b.n	8005592 <SD_WriteBlock+0x3e>
        SD_TransmitByte(buff[i]);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	4413      	add	r3, r2
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff feae 	bl	80052e8 <SD_TransmitByte>
    for (int i = 0; i < 512; i++)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3301      	adds	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005598:	dbf1      	blt.n	800557e <SD_WriteBlock+0x2a>

    SD_TransmitByte(0xFF); // Dummy CRC
 800559a:	20ff      	movs	r0, #255	@ 0xff
 800559c:	f7ff fea4 	bl	80052e8 <SD_TransmitByte>
    SD_TransmitByte(0xFF);
 80055a0:	20ff      	movs	r0, #255	@ 0xff
 80055a2:	f7ff fea1 	bl	80052e8 <SD_TransmitByte>

    uint8_t resp = SD_ReceiveByte();
 80055a6:	f7ff feb5 	bl	8005314 <SD_ReceiveByte>
 80055aa:	4603      	mov	r3, r0
 80055ac:	72fb      	strb	r3, [r7, #11]
    if ((resp & 0x1F) != 0x05) {
 80055ae:	7afb      	ldrb	r3, [r7, #11]
 80055b0:	f003 031f 	and.w	r3, r3, #31
 80055b4:	2b05      	cmp	r3, #5
 80055b6:	d003      	beq.n	80055c0 <SD_WriteBlock+0x6c>
        SD_Deselect();
 80055b8:	f7ff fede 	bl	8005378 <SD_Deselect>
        return SD_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e008      	b.n	80055d2 <SD_WriteBlock+0x7e>
    }

    while (!SD_ReceiveByte()); // Espera escrever
 80055c0:	bf00      	nop
 80055c2:	f7ff fea7 	bl	8005314 <SD_ReceiveByte>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d0fa      	beq.n	80055c2 <SD_WriteBlock+0x6e>

    SD_Deselect();
 80055cc:	f7ff fed4 	bl	8005378 <SD_Deselect>
    return SD_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
	...

080055dc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80055e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005650 <MX_SPI1_Init+0x74>)
 80055e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005654 <MX_SPI1_Init+0x78>)
 80055e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80055e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005650 <MX_SPI1_Init+0x74>)
 80055e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80055ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80055ee:	4b18      	ldr	r3, [pc, #96]	@ (8005650 <MX_SPI1_Init+0x74>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80055f4:	4b16      	ldr	r3, [pc, #88]	@ (8005650 <MX_SPI1_Init+0x74>)
 80055f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80055fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80055fc:	4b14      	ldr	r3, [pc, #80]	@ (8005650 <MX_SPI1_Init+0x74>)
 80055fe:	2200      	movs	r2, #0
 8005600:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005602:	4b13      	ldr	r3, [pc, #76]	@ (8005650 <MX_SPI1_Init+0x74>)
 8005604:	2200      	movs	r2, #0
 8005606:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005608:	4b11      	ldr	r3, [pc, #68]	@ (8005650 <MX_SPI1_Init+0x74>)
 800560a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800560e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005610:	4b0f      	ldr	r3, [pc, #60]	@ (8005650 <MX_SPI1_Init+0x74>)
 8005612:	2210      	movs	r2, #16
 8005614:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005616:	4b0e      	ldr	r3, [pc, #56]	@ (8005650 <MX_SPI1_Init+0x74>)
 8005618:	2200      	movs	r2, #0
 800561a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800561c:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <MX_SPI1_Init+0x74>)
 800561e:	2200      	movs	r2, #0
 8005620:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005622:	4b0b      	ldr	r3, [pc, #44]	@ (8005650 <MX_SPI1_Init+0x74>)
 8005624:	2200      	movs	r2, #0
 8005626:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005628:	4b09      	ldr	r3, [pc, #36]	@ (8005650 <MX_SPI1_Init+0x74>)
 800562a:	2207      	movs	r2, #7
 800562c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800562e:	4b08      	ldr	r3, [pc, #32]	@ (8005650 <MX_SPI1_Init+0x74>)
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005634:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <MX_SPI1_Init+0x74>)
 8005636:	2208      	movs	r2, #8
 8005638:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800563a:	4805      	ldr	r0, [pc, #20]	@ (8005650 <MX_SPI1_Init+0x74>)
 800563c:	f001 fa6a 	bl	8006b14 <HAL_SPI_Init>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005646:	f7ff fe25 	bl	8005294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800564a:	bf00      	nop
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000f34 	.word	0x20000f34
 8005654:	40013000 	.word	0x40013000

08005658 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800565c:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <MX_SPI3_Init+0x74>)
 800565e:	4a1c      	ldr	r2, [pc, #112]	@ (80056d0 <MX_SPI3_Init+0x78>)
 8005660:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005662:	4b1a      	ldr	r3, [pc, #104]	@ (80056cc <MX_SPI3_Init+0x74>)
 8005664:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005668:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800566a:	4b18      	ldr	r3, [pc, #96]	@ (80056cc <MX_SPI3_Init+0x74>)
 800566c:	2200      	movs	r2, #0
 800566e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005670:	4b16      	ldr	r3, [pc, #88]	@ (80056cc <MX_SPI3_Init+0x74>)
 8005672:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005676:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005678:	4b14      	ldr	r3, [pc, #80]	@ (80056cc <MX_SPI3_Init+0x74>)
 800567a:	2200      	movs	r2, #0
 800567c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800567e:	4b13      	ldr	r3, [pc, #76]	@ (80056cc <MX_SPI3_Init+0x74>)
 8005680:	2200      	movs	r2, #0
 8005682:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005684:	4b11      	ldr	r3, [pc, #68]	@ (80056cc <MX_SPI3_Init+0x74>)
 8005686:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800568a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800568c:	4b0f      	ldr	r3, [pc, #60]	@ (80056cc <MX_SPI3_Init+0x74>)
 800568e:	2200      	movs	r2, #0
 8005690:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005692:	4b0e      	ldr	r3, [pc, #56]	@ (80056cc <MX_SPI3_Init+0x74>)
 8005694:	2200      	movs	r2, #0
 8005696:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005698:	4b0c      	ldr	r3, [pc, #48]	@ (80056cc <MX_SPI3_Init+0x74>)
 800569a:	2200      	movs	r2, #0
 800569c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800569e:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <MX_SPI3_Init+0x74>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80056a4:	4b09      	ldr	r3, [pc, #36]	@ (80056cc <MX_SPI3_Init+0x74>)
 80056a6:	2207      	movs	r2, #7
 80056a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80056aa:	4b08      	ldr	r3, [pc, #32]	@ (80056cc <MX_SPI3_Init+0x74>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80056b0:	4b06      	ldr	r3, [pc, #24]	@ (80056cc <MX_SPI3_Init+0x74>)
 80056b2:	2208      	movs	r2, #8
 80056b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80056b6:	4805      	ldr	r0, [pc, #20]	@ (80056cc <MX_SPI3_Init+0x74>)
 80056b8:	f001 fa2c 	bl	8006b14 <HAL_SPI_Init>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80056c2:	f7ff fde7 	bl	8005294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80056c6:	bf00      	nop
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000f98 	.word	0x20000f98
 80056d0:	40003c00 	.word	0x40003c00

080056d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08c      	sub	sp, #48	@ 0x30
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056dc:	f107 031c 	add.w	r3, r7, #28
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	60da      	str	r2, [r3, #12]
 80056ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a3c      	ldr	r2, [pc, #240]	@ (80057e4 <HAL_SPI_MspInit+0x110>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d129      	bne.n	800574a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80056f6:	4b3c      	ldr	r3, [pc, #240]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 80056f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fa:	4a3b      	ldr	r2, [pc, #236]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 80056fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005700:	6453      	str	r3, [r2, #68]	@ 0x44
 8005702:	4b39      	ldr	r3, [pc, #228]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 8005704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005706:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800570e:	4b36      	ldr	r3, [pc, #216]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	4a35      	ldr	r2, [pc, #212]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	6313      	str	r3, [r2, #48]	@ 0x30
 800571a:	4b33      	ldr	r3, [pc, #204]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 800571c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	697b      	ldr	r3, [r7, #20]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8005726:	f248 03e0 	movw	r3, #32992	@ 0x80e0
 800572a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800572c:	2302      	movs	r3, #2
 800572e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005730:	2300      	movs	r3, #0
 8005732:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005734:	2303      	movs	r3, #3
 8005736:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005738:	2305      	movs	r3, #5
 800573a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800573c:	f107 031c 	add.w	r3, r7, #28
 8005740:	4619      	mov	r1, r3
 8005742:	482a      	ldr	r0, [pc, #168]	@ (80057ec <HAL_SPI_MspInit+0x118>)
 8005744:	f000 fb20 	bl	8005d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005748:	e048      	b.n	80057dc <HAL_SPI_MspInit+0x108>
  else if(spiHandle->Instance==SPI3)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a28      	ldr	r2, [pc, #160]	@ (80057f0 <HAL_SPI_MspInit+0x11c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d143      	bne.n	80057dc <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005754:	4b24      	ldr	r3, [pc, #144]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 8005756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005758:	4a23      	ldr	r2, [pc, #140]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 800575a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800575e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005760:	4b21      	ldr	r3, [pc, #132]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 8005762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800576c:	4b1e      	ldr	r3, [pc, #120]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 800576e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005770:	4a1d      	ldr	r2, [pc, #116]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	6313      	str	r3, [r2, #48]	@ 0x30
 8005778:	4b1b      	ldr	r3, [pc, #108]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 800577a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005784:	4b18      	ldr	r3, [pc, #96]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 8005786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005788:	4a17      	ldr	r2, [pc, #92]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 800578a:	f043 0302 	orr.w	r3, r3, #2
 800578e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005790:	4b15      	ldr	r3, [pc, #84]	@ (80057e8 <HAL_SPI_MspInit+0x114>)
 8005792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005794:	f003 0302 	and.w	r3, r3, #2
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800579c:	2310      	movs	r3, #16
 800579e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057a0:	2302      	movs	r3, #2
 80057a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057a8:	2303      	movs	r3, #3
 80057aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80057ac:	2306      	movs	r3, #6
 80057ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b0:	f107 031c 	add.w	r3, r7, #28
 80057b4:	4619      	mov	r1, r3
 80057b6:	480d      	ldr	r0, [pc, #52]	@ (80057ec <HAL_SPI_MspInit+0x118>)
 80057b8:	f000 fae6 	bl	8005d88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80057bc:	2338      	movs	r3, #56	@ 0x38
 80057be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c0:	2302      	movs	r3, #2
 80057c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c4:	2300      	movs	r3, #0
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057c8:	2303      	movs	r3, #3
 80057ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80057cc:	2306      	movs	r3, #6
 80057ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057d0:	f107 031c 	add.w	r3, r7, #28
 80057d4:	4619      	mov	r1, r3
 80057d6:	4807      	ldr	r0, [pc, #28]	@ (80057f4 <HAL_SPI_MspInit+0x120>)
 80057d8:	f000 fad6 	bl	8005d88 <HAL_GPIO_Init>
}
 80057dc:	bf00      	nop
 80057de:	3730      	adds	r7, #48	@ 0x30
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40013000 	.word	0x40013000
 80057e8:	40023800 	.word	0x40023800
 80057ec:	40020000 	.word	0x40020000
 80057f0:	40003c00 	.word	0x40003c00
 80057f4:	40020400 	.word	0x40020400

080057f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80057fe:	4b0f      	ldr	r3, [pc, #60]	@ (800583c <HAL_MspInit+0x44>)
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	4a0e      	ldr	r2, [pc, #56]	@ (800583c <HAL_MspInit+0x44>)
 8005804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005808:	6413      	str	r3, [r2, #64]	@ 0x40
 800580a:	4b0c      	ldr	r3, [pc, #48]	@ (800583c <HAL_MspInit+0x44>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005812:	607b      	str	r3, [r7, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005816:	4b09      	ldr	r3, [pc, #36]	@ (800583c <HAL_MspInit+0x44>)
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	4a08      	ldr	r2, [pc, #32]	@ (800583c <HAL_MspInit+0x44>)
 800581c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005820:	6453      	str	r3, [r2, #68]	@ 0x44
 8005822:	4b06      	ldr	r3, [pc, #24]	@ (800583c <HAL_MspInit+0x44>)
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800582a:	603b      	str	r3, [r7, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40023800 	.word	0x40023800

08005840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <NMI_Handler+0x4>

08005848 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800584c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005850:	4804      	ldr	r0, [pc, #16]	@ (8005864 <HardFault_Handler+0x1c>)
 8005852:	f000 fc5e 	bl	8006112 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8005856:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800585a:	f000 f98b 	bl	8005b74 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800585e:	bf00      	nop
 8005860:	e7f4      	b.n	800584c <HardFault_Handler+0x4>
 8005862:	bf00      	nop
 8005864:	40020400 	.word	0x40020400

08005868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800586c:	bf00      	nop
 800586e:	e7fd      	b.n	800586c <MemManage_Handler+0x4>

08005870 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <BusFault_Handler+0x4>

08005878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800587c:	bf00      	nop
 800587e:	e7fd      	b.n	800587c <UsageFault_Handler+0x4>

08005880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005884:	bf00      	nop
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800588e:	b480      	push	{r7}
 8005890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005892:	bf00      	nop
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058a0:	bf00      	nop
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058ae:	f000 f941 	bl	8005b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058b2:	bf00      	nop
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80058b6:	b480      	push	{r7}
 80058b8:	af00      	add	r7, sp, #0
  return 1;
 80058ba:	2301      	movs	r3, #1
}
 80058bc:	4618      	mov	r0, r3
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <_kill>:

int _kill(int pid, int sig)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80058d0:	f008 f962 	bl	800db98 <__errno>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2216      	movs	r2, #22
 80058d8:	601a      	str	r2, [r3, #0]
  return -1;
 80058da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <_exit>:

void _exit (int status)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80058ee:	f04f 31ff 	mov.w	r1, #4294967295
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff ffe7 	bl	80058c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <_exit+0x12>

080058fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	e00a      	b.n	8005924 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800590e:	f3af 8000 	nop.w
 8005912:	4601      	mov	r1, r0
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	60ba      	str	r2, [r7, #8]
 800591a:	b2ca      	uxtb	r2, r1
 800591c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	3301      	adds	r3, #1
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	dbf0      	blt.n	800590e <_read+0x12>
  }

  return len;
 800592c:	687b      	ldr	r3, [r7, #4]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b086      	sub	sp, #24
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005942:	2300      	movs	r3, #0
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e009      	b.n	800595c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	60ba      	str	r2, [r7, #8]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	4618      	mov	r0, r3
 8005952:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	3301      	adds	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	dbf1      	blt.n	8005948 <_write+0x12>
  }
  return len;
 8005964:	687b      	ldr	r3, [r7, #4]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <_close>:

int _close(int file)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005976:	f04f 33ff 	mov.w	r3, #4294967295
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005996:	605a      	str	r2, [r3, #4]
  return 0;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <_isatty>:

int _isatty(int file)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80059ae:	2301      	movs	r3, #1
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
	...

080059d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059e0:	4a14      	ldr	r2, [pc, #80]	@ (8005a34 <_sbrk+0x5c>)
 80059e2:	4b15      	ldr	r3, [pc, #84]	@ (8005a38 <_sbrk+0x60>)
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059ec:	4b13      	ldr	r3, [pc, #76]	@ (8005a3c <_sbrk+0x64>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059f4:	4b11      	ldr	r3, [pc, #68]	@ (8005a3c <_sbrk+0x64>)
 80059f6:	4a12      	ldr	r2, [pc, #72]	@ (8005a40 <_sbrk+0x68>)
 80059f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059fa:	4b10      	ldr	r3, [pc, #64]	@ (8005a3c <_sbrk+0x64>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d207      	bcs.n	8005a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a08:	f008 f8c6 	bl	800db98 <__errno>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	220c      	movs	r2, #12
 8005a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a12:	f04f 33ff 	mov.w	r3, #4294967295
 8005a16:	e009      	b.n	8005a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a18:	4b08      	ldr	r3, [pc, #32]	@ (8005a3c <_sbrk+0x64>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a1e:	4b07      	ldr	r3, [pc, #28]	@ (8005a3c <_sbrk+0x64>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4413      	add	r3, r2
 8005a26:	4a05      	ldr	r2, [pc, #20]	@ (8005a3c <_sbrk+0x64>)
 8005a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20050000 	.word	0x20050000
 8005a38:	00000400 	.word	0x00000400
 8005a3c:	20000ffc 	.word	0x20000ffc
 8005a40:	200015e0 	.word	0x200015e0

08005a44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a48:	4b06      	ldr	r3, [pc, #24]	@ (8005a64 <SystemInit+0x20>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a4e:	4a05      	ldr	r2, [pc, #20]	@ (8005a64 <SystemInit+0x20>)
 8005a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a58:	bf00      	nop
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	e000ed00 	.word	0xe000ed00

08005a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005aa0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a6c:	f7ff ffea 	bl	8005a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a70:	480c      	ldr	r0, [pc, #48]	@ (8005aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005a72:	490d      	ldr	r1, [pc, #52]	@ (8005aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005a74:	4a0d      	ldr	r2, [pc, #52]	@ (8005aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a78:	e002      	b.n	8005a80 <LoopCopyDataInit>

08005a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a7e:	3304      	adds	r3, #4

08005a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a84:	d3f9      	bcc.n	8005a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a86:	4a0a      	ldr	r2, [pc, #40]	@ (8005ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a88:	4c0a      	ldr	r4, [pc, #40]	@ (8005ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a8c:	e001      	b.n	8005a92 <LoopFillZerobss>

08005a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a90:	3204      	adds	r2, #4

08005a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a94:	d3fb      	bcc.n	8005a8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005a96:	f008 f885 	bl	800dba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a9a:	f7ff f91d 	bl	8004cd8 <main>
  bx  lr    
 8005a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005aa0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005aa8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005aac:	08011024 	.word	0x08011024
  ldr r2, =_sbss
 8005ab0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005ab4:	200015dc 	.word	0x200015dc

08005ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ab8:	e7fe      	b.n	8005ab8 <ADC_IRQHandler>

08005aba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005abe:	2003      	movs	r0, #3
 8005ac0:	f000 f92e 	bl	8005d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	f000 f805 	bl	8005ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005aca:	f7ff fe95 	bl	80057f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005adc:	4b12      	ldr	r3, [pc, #72]	@ (8005b28 <HAL_InitTick+0x54>)
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	4b12      	ldr	r3, [pc, #72]	@ (8005b2c <HAL_InitTick+0x58>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 f93b 	bl	8005d6e <HAL_SYSTICK_Config>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e00e      	b.n	8005b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b0f      	cmp	r3, #15
 8005b06:	d80a      	bhi.n	8005b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b08:	2200      	movs	r2, #0
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b10:	f000 f911 	bl	8005d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b14:	4a06      	ldr	r2, [pc, #24]	@ (8005b30 <HAL_InitTick+0x5c>)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	e000      	b.n	8005b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	20000000 	.word	0x20000000
 8005b2c:	20000008 	.word	0x20000008
 8005b30:	20000004 	.word	0x20000004

08005b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b38:	4b06      	ldr	r3, [pc, #24]	@ (8005b54 <HAL_IncTick+0x20>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <HAL_IncTick+0x24>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4413      	add	r3, r2
 8005b44:	4a04      	ldr	r2, [pc, #16]	@ (8005b58 <HAL_IncTick+0x24>)
 8005b46:	6013      	str	r3, [r2, #0]
}
 8005b48:	bf00      	nop
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000008 	.word	0x20000008
 8005b58:	20001000 	.word	0x20001000

08005b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b60:	4b03      	ldr	r3, [pc, #12]	@ (8005b70 <HAL_GetTick+0x14>)
 8005b62:	681b      	ldr	r3, [r3, #0]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	20001000 	.word	0x20001000

08005b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b7c:	f7ff ffee 	bl	8005b5c <HAL_GetTick>
 8005b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8c:	d005      	beq.n	8005b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb8 <HAL_Delay+0x44>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b9a:	bf00      	nop
 8005b9c:	f7ff ffde 	bl	8005b5c <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d8f7      	bhi.n	8005b9c <HAL_Delay+0x28>
  {
  }
}
 8005bac:	bf00      	nop
 8005bae:	bf00      	nop
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000008 	.word	0x20000008

08005bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8005bfc <__NVIC_SetPriorityGrouping+0x40>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005bd8:	4013      	ands	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005be4:	4b06      	ldr	r3, [pc, #24]	@ (8005c00 <__NVIC_SetPriorityGrouping+0x44>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bea:	4a04      	ldr	r2, [pc, #16]	@ (8005bfc <__NVIC_SetPriorityGrouping+0x40>)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	60d3      	str	r3, [r2, #12]
}
 8005bf0:	bf00      	nop
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	e000ed00 	.word	0xe000ed00
 8005c00:	05fa0000 	.word	0x05fa0000

08005c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c08:	4b04      	ldr	r3, [pc, #16]	@ (8005c1c <__NVIC_GetPriorityGrouping+0x18>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	f003 0307 	and.w	r3, r3, #7
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	e000ed00 	.word	0xe000ed00

08005c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	4603      	mov	r3, r0
 8005c28:	6039      	str	r1, [r7, #0]
 8005c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	db0a      	blt.n	8005c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	490c      	ldr	r1, [pc, #48]	@ (8005c6c <__NVIC_SetPriority+0x4c>)
 8005c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c3e:	0112      	lsls	r2, r2, #4
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	440b      	add	r3, r1
 8005c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c48:	e00a      	b.n	8005c60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	4908      	ldr	r1, [pc, #32]	@ (8005c70 <__NVIC_SetPriority+0x50>)
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	3b04      	subs	r3, #4
 8005c58:	0112      	lsls	r2, r2, #4
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	761a      	strb	r2, [r3, #24]
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	e000e100 	.word	0xe000e100
 8005c70:	e000ed00 	.word	0xe000ed00

08005c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b089      	sub	sp, #36	@ 0x24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f1c3 0307 	rsb	r3, r3, #7
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	bf28      	it	cs
 8005c92:	2304      	movcs	r3, #4
 8005c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	2b06      	cmp	r3, #6
 8005c9c:	d902      	bls.n	8005ca4 <NVIC_EncodePriority+0x30>
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3b03      	subs	r3, #3
 8005ca2:	e000      	b.n	8005ca6 <NVIC_EncodePriority+0x32>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	43da      	mvns	r2, r3
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	401a      	ands	r2, r3
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc6:	43d9      	mvns	r1, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ccc:	4313      	orrs	r3, r2
         );
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3724      	adds	r7, #36	@ 0x24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
	...

08005cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cec:	d301      	bcc.n	8005cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e00f      	b.n	8005d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8005d1c <SysTick_Config+0x40>)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cfa:	210f      	movs	r1, #15
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005d00:	f7ff ff8e 	bl	8005c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d04:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <SysTick_Config+0x40>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d0a:	4b04      	ldr	r3, [pc, #16]	@ (8005d1c <SysTick_Config+0x40>)
 8005d0c:	2207      	movs	r2, #7
 8005d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	e000e010 	.word	0xe000e010

08005d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff ff47 	bl	8005bbc <__NVIC_SetPriorityGrouping>
}
 8005d2e:	bf00      	nop
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b086      	sub	sp, #24
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	60b9      	str	r1, [r7, #8]
 8005d40:	607a      	str	r2, [r7, #4]
 8005d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005d44:	2300      	movs	r3, #0
 8005d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d48:	f7ff ff5c 	bl	8005c04 <__NVIC_GetPriorityGrouping>
 8005d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	6978      	ldr	r0, [r7, #20]
 8005d54:	f7ff ff8e 	bl	8005c74 <NVIC_EncodePriority>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d5e:	4611      	mov	r1, r2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff ff5d 	bl	8005c20 <__NVIC_SetPriority>
}
 8005d66:	bf00      	nop
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff ffb0 	bl	8005cdc <SysTick_Config>
 8005d7c:	4603      	mov	r3, r0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b089      	sub	sp, #36	@ 0x24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005da2:	2300      	movs	r3, #0
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	e175      	b.n	8006094 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005da8:	2201      	movs	r2, #1
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4013      	ands	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	f040 8164 	bne.w	800608e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d005      	beq.n	8005dde <HAL_GPIO_Init+0x56>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d130      	bne.n	8005e40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	2203      	movs	r2, #3
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	43db      	mvns	r3, r3
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	4013      	ands	r3, r2
 8005df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e14:	2201      	movs	r2, #1
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1c:	43db      	mvns	r3, r3
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	4013      	ands	r3, r2
 8005e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	091b      	lsrs	r3, r3, #4
 8005e2a:	f003 0201 	and.w	r2, r3, #1
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f003 0303 	and.w	r3, r3, #3
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d017      	beq.n	8005e7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	2203      	movs	r2, #3
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	4013      	ands	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 0303 	and.w	r3, r3, #3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d123      	bne.n	8005ed0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	08da      	lsrs	r2, r3, #3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3208      	adds	r2, #8
 8005e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	220f      	movs	r2, #15
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	691a      	ldr	r2, [r3, #16]
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	08da      	lsrs	r2, r3, #3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3208      	adds	r2, #8
 8005eca:	69b9      	ldr	r1, [r7, #24]
 8005ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	2203      	movs	r2, #3
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	43db      	mvns	r3, r3
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 0203 	and.w	r2, r3, #3
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80be 	beq.w	800608e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f12:	4b66      	ldr	r3, [pc, #408]	@ (80060ac <HAL_GPIO_Init+0x324>)
 8005f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f16:	4a65      	ldr	r2, [pc, #404]	@ (80060ac <HAL_GPIO_Init+0x324>)
 8005f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f1e:	4b63      	ldr	r3, [pc, #396]	@ (80060ac <HAL_GPIO_Init+0x324>)
 8005f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005f2a:	4a61      	ldr	r2, [pc, #388]	@ (80060b0 <HAL_GPIO_Init+0x328>)
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	089b      	lsrs	r3, r3, #2
 8005f30:	3302      	adds	r3, #2
 8005f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	220f      	movs	r2, #15
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43db      	mvns	r3, r3
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a58      	ldr	r2, [pc, #352]	@ (80060b4 <HAL_GPIO_Init+0x32c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d037      	beq.n	8005fc6 <HAL_GPIO_Init+0x23e>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a57      	ldr	r2, [pc, #348]	@ (80060b8 <HAL_GPIO_Init+0x330>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d031      	beq.n	8005fc2 <HAL_GPIO_Init+0x23a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a56      	ldr	r2, [pc, #344]	@ (80060bc <HAL_GPIO_Init+0x334>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d02b      	beq.n	8005fbe <HAL_GPIO_Init+0x236>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a55      	ldr	r2, [pc, #340]	@ (80060c0 <HAL_GPIO_Init+0x338>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d025      	beq.n	8005fba <HAL_GPIO_Init+0x232>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a54      	ldr	r2, [pc, #336]	@ (80060c4 <HAL_GPIO_Init+0x33c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d01f      	beq.n	8005fb6 <HAL_GPIO_Init+0x22e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a53      	ldr	r2, [pc, #332]	@ (80060c8 <HAL_GPIO_Init+0x340>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d019      	beq.n	8005fb2 <HAL_GPIO_Init+0x22a>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a52      	ldr	r2, [pc, #328]	@ (80060cc <HAL_GPIO_Init+0x344>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d013      	beq.n	8005fae <HAL_GPIO_Init+0x226>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a51      	ldr	r2, [pc, #324]	@ (80060d0 <HAL_GPIO_Init+0x348>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d00d      	beq.n	8005faa <HAL_GPIO_Init+0x222>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a50      	ldr	r2, [pc, #320]	@ (80060d4 <HAL_GPIO_Init+0x34c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d007      	beq.n	8005fa6 <HAL_GPIO_Init+0x21e>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a4f      	ldr	r2, [pc, #316]	@ (80060d8 <HAL_GPIO_Init+0x350>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d101      	bne.n	8005fa2 <HAL_GPIO_Init+0x21a>
 8005f9e:	2309      	movs	r3, #9
 8005fa0:	e012      	b.n	8005fc8 <HAL_GPIO_Init+0x240>
 8005fa2:	230a      	movs	r3, #10
 8005fa4:	e010      	b.n	8005fc8 <HAL_GPIO_Init+0x240>
 8005fa6:	2308      	movs	r3, #8
 8005fa8:	e00e      	b.n	8005fc8 <HAL_GPIO_Init+0x240>
 8005faa:	2307      	movs	r3, #7
 8005fac:	e00c      	b.n	8005fc8 <HAL_GPIO_Init+0x240>
 8005fae:	2306      	movs	r3, #6
 8005fb0:	e00a      	b.n	8005fc8 <HAL_GPIO_Init+0x240>
 8005fb2:	2305      	movs	r3, #5
 8005fb4:	e008      	b.n	8005fc8 <HAL_GPIO_Init+0x240>
 8005fb6:	2304      	movs	r3, #4
 8005fb8:	e006      	b.n	8005fc8 <HAL_GPIO_Init+0x240>
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e004      	b.n	8005fc8 <HAL_GPIO_Init+0x240>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e002      	b.n	8005fc8 <HAL_GPIO_Init+0x240>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <HAL_GPIO_Init+0x240>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	69fa      	ldr	r2, [r7, #28]
 8005fca:	f002 0203 	and.w	r2, r2, #3
 8005fce:	0092      	lsls	r2, r2, #2
 8005fd0:	4093      	lsls	r3, r2
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005fd8:	4935      	ldr	r1, [pc, #212]	@ (80060b0 <HAL_GPIO_Init+0x328>)
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	089b      	lsrs	r3, r3, #2
 8005fde:	3302      	adds	r3, #2
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80060dc <HAL_GPIO_Init+0x354>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	43db      	mvns	r3, r3
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800600a:	4a34      	ldr	r2, [pc, #208]	@ (80060dc <HAL_GPIO_Init+0x354>)
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006010:	4b32      	ldr	r3, [pc, #200]	@ (80060dc <HAL_GPIO_Init+0x354>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	43db      	mvns	r3, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d003      	beq.n	8006034 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	4313      	orrs	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006034:	4a29      	ldr	r2, [pc, #164]	@ (80060dc <HAL_GPIO_Init+0x354>)
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800603a:	4b28      	ldr	r3, [pc, #160]	@ (80060dc <HAL_GPIO_Init+0x354>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	43db      	mvns	r3, r3
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	4013      	ands	r3, r2
 8006048:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d003      	beq.n	800605e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4313      	orrs	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800605e:	4a1f      	ldr	r2, [pc, #124]	@ (80060dc <HAL_GPIO_Init+0x354>)
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006064:	4b1d      	ldr	r3, [pc, #116]	@ (80060dc <HAL_GPIO_Init+0x354>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	43db      	mvns	r3, r3
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	4013      	ands	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	4313      	orrs	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006088:	4a14      	ldr	r2, [pc, #80]	@ (80060dc <HAL_GPIO_Init+0x354>)
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	3301      	adds	r3, #1
 8006092:	61fb      	str	r3, [r7, #28]
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	2b0f      	cmp	r3, #15
 8006098:	f67f ae86 	bls.w	8005da8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800609c:	bf00      	nop
 800609e:	bf00      	nop
 80060a0:	3724      	adds	r7, #36	@ 0x24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40023800 	.word	0x40023800
 80060b0:	40013800 	.word	0x40013800
 80060b4:	40020000 	.word	0x40020000
 80060b8:	40020400 	.word	0x40020400
 80060bc:	40020800 	.word	0x40020800
 80060c0:	40020c00 	.word	0x40020c00
 80060c4:	40021000 	.word	0x40021000
 80060c8:	40021400 	.word	0x40021400
 80060cc:	40021800 	.word	0x40021800
 80060d0:	40021c00 	.word	0x40021c00
 80060d4:	40022000 	.word	0x40022000
 80060d8:	40022400 	.word	0x40022400
 80060dc:	40013c00 	.word	0x40013c00

080060e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	807b      	strh	r3, [r7, #2]
 80060ec:	4613      	mov	r3, r2
 80060ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060f0:	787b      	ldrb	r3, [r7, #1]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060f6:	887a      	ldrh	r2, [r7, #2]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80060fc:	e003      	b.n	8006106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80060fe:	887b      	ldrh	r3, [r7, #2]
 8006100:	041a      	lsls	r2, r3, #16
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	619a      	str	r2, [r3, #24]
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006112:	b480      	push	{r7}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	460b      	mov	r3, r1
 800611c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006124:	887a      	ldrh	r2, [r7, #2]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4013      	ands	r3, r2
 800612a:	041a      	lsls	r2, r3, #16
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	43d9      	mvns	r1, r3
 8006130:	887b      	ldrh	r3, [r7, #2]
 8006132:	400b      	ands	r3, r1
 8006134:	431a      	orrs	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	619a      	str	r2, [r3, #24]
}
 800613a:	bf00      	nop
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
	...

08006148 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006152:	4b23      	ldr	r3, [pc, #140]	@ (80061e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	4a22      	ldr	r2, [pc, #136]	@ (80061e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800615c:	6413      	str	r3, [r2, #64]	@ 0x40
 800615e:	4b20      	ldr	r3, [pc, #128]	@ (80061e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006166:	603b      	str	r3, [r7, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800616a:	4b1e      	ldr	r3, [pc, #120]	@ (80061e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1d      	ldr	r2, [pc, #116]	@ (80061e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006174:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006176:	f7ff fcf1 	bl	8005b5c <HAL_GetTick>
 800617a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800617c:	e009      	b.n	8006192 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800617e:	f7ff fced 	bl	8005b5c <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800618c:	d901      	bls.n	8006192 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e022      	b.n	80061d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006192:	4b14      	ldr	r3, [pc, #80]	@ (80061e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800619a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800619e:	d1ee      	bne.n	800617e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80061a0:	4b10      	ldr	r3, [pc, #64]	@ (80061e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a0f      	ldr	r2, [pc, #60]	@ (80061e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80061a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061ac:	f7ff fcd6 	bl	8005b5c <HAL_GetTick>
 80061b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80061b2:	e009      	b.n	80061c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80061b4:	f7ff fcd2 	bl	8005b5c <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061c2:	d901      	bls.n	80061c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e007      	b.n	80061d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80061c8:	4b06      	ldr	r3, [pc, #24]	@ (80061e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061d4:	d1ee      	bne.n	80061b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40023800 	.word	0x40023800
 80061e4:	40007000 	.word	0x40007000

080061e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80061f0:	2300      	movs	r3, #0
 80061f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e291      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8087 	beq.w	800631a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800620c:	4b96      	ldr	r3, [pc, #600]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 030c 	and.w	r3, r3, #12
 8006214:	2b04      	cmp	r3, #4
 8006216:	d00c      	beq.n	8006232 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006218:	4b93      	ldr	r3, [pc, #588]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	2b08      	cmp	r3, #8
 8006222:	d112      	bne.n	800624a <HAL_RCC_OscConfig+0x62>
 8006224:	4b90      	ldr	r3, [pc, #576]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800622c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006230:	d10b      	bne.n	800624a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006232:	4b8d      	ldr	r3, [pc, #564]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d06c      	beq.n	8006318 <HAL_RCC_OscConfig+0x130>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d168      	bne.n	8006318 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e26b      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006252:	d106      	bne.n	8006262 <HAL_RCC_OscConfig+0x7a>
 8006254:	4b84      	ldr	r3, [pc, #528]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a83      	ldr	r2, [pc, #524]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 800625a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	e02e      	b.n	80062c0 <HAL_RCC_OscConfig+0xd8>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10c      	bne.n	8006284 <HAL_RCC_OscConfig+0x9c>
 800626a:	4b7f      	ldr	r3, [pc, #508]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a7e      	ldr	r2, [pc, #504]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	4b7c      	ldr	r3, [pc, #496]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a7b      	ldr	r2, [pc, #492]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 800627c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	e01d      	b.n	80062c0 <HAL_RCC_OscConfig+0xd8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800628c:	d10c      	bne.n	80062a8 <HAL_RCC_OscConfig+0xc0>
 800628e:	4b76      	ldr	r3, [pc, #472]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a75      	ldr	r2, [pc, #468]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	4b73      	ldr	r3, [pc, #460]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a72      	ldr	r2, [pc, #456]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 80062a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062a4:	6013      	str	r3, [r2, #0]
 80062a6:	e00b      	b.n	80062c0 <HAL_RCC_OscConfig+0xd8>
 80062a8:	4b6f      	ldr	r3, [pc, #444]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a6e      	ldr	r2, [pc, #440]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 80062ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062b2:	6013      	str	r3, [r2, #0]
 80062b4:	4b6c      	ldr	r3, [pc, #432]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a6b      	ldr	r2, [pc, #428]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 80062ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d013      	beq.n	80062f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c8:	f7ff fc48 	bl	8005b5c <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ce:	e008      	b.n	80062e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062d0:	f7ff fc44 	bl	8005b5c <HAL_GetTick>
 80062d4:	4602      	mov	r2, r0
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	2b64      	cmp	r3, #100	@ 0x64
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e21f      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062e2:	4b61      	ldr	r3, [pc, #388]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0f0      	beq.n	80062d0 <HAL_RCC_OscConfig+0xe8>
 80062ee:	e014      	b.n	800631a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f0:	f7ff fc34 	bl	8005b5c <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062f8:	f7ff fc30 	bl	8005b5c <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b64      	cmp	r3, #100	@ 0x64
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e20b      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800630a:	4b57      	ldr	r3, [pc, #348]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f0      	bne.n	80062f8 <HAL_RCC_OscConfig+0x110>
 8006316:	e000      	b.n	800631a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0302 	and.w	r3, r3, #2
 8006322:	2b00      	cmp	r3, #0
 8006324:	d069      	beq.n	80063fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006326:	4b50      	ldr	r3, [pc, #320]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 030c 	and.w	r3, r3, #12
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00b      	beq.n	800634a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006332:	4b4d      	ldr	r3, [pc, #308]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 030c 	and.w	r3, r3, #12
 800633a:	2b08      	cmp	r3, #8
 800633c:	d11c      	bne.n	8006378 <HAL_RCC_OscConfig+0x190>
 800633e:	4b4a      	ldr	r3, [pc, #296]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d116      	bne.n	8006378 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800634a:	4b47      	ldr	r3, [pc, #284]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d005      	beq.n	8006362 <HAL_RCC_OscConfig+0x17a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d001      	beq.n	8006362 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e1df      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006362:	4b41      	ldr	r3, [pc, #260]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	493d      	ldr	r1, [pc, #244]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006372:	4313      	orrs	r3, r2
 8006374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006376:	e040      	b.n	80063fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d023      	beq.n	80063c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006380:	4b39      	ldr	r3, [pc, #228]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a38      	ldr	r2, [pc, #224]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006386:	f043 0301 	orr.w	r3, r3, #1
 800638a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7ff fbe6 	bl	8005b5c <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006394:	f7ff fbe2 	bl	8005b5c <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e1bd      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a6:	4b30      	ldr	r3, [pc, #192]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0f0      	beq.n	8006394 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	4929      	ldr	r1, [pc, #164]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	600b      	str	r3, [r1, #0]
 80063c6:	e018      	b.n	80063fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063c8:	4b27      	ldr	r3, [pc, #156]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a26      	ldr	r2, [pc, #152]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 80063ce:	f023 0301 	bic.w	r3, r3, #1
 80063d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7ff fbc2 	bl	8005b5c <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063dc:	f7ff fbbe 	bl	8005b5c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e199      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d038      	beq.n	8006478 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d019      	beq.n	8006442 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800640e:	4b16      	ldr	r3, [pc, #88]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006410:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006412:	4a15      	ldr	r2, [pc, #84]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641a:	f7ff fb9f 	bl	8005b5c <HAL_GetTick>
 800641e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006420:	e008      	b.n	8006434 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006422:	f7ff fb9b 	bl	8005b5c <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e176      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006434:	4b0c      	ldr	r3, [pc, #48]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0f0      	beq.n	8006422 <HAL_RCC_OscConfig+0x23a>
 8006440:	e01a      	b.n	8006478 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006442:	4b09      	ldr	r3, [pc, #36]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006446:	4a08      	ldr	r2, [pc, #32]	@ (8006468 <HAL_RCC_OscConfig+0x280>)
 8006448:	f023 0301 	bic.w	r3, r3, #1
 800644c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800644e:	f7ff fb85 	bl	8005b5c <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006454:	e00a      	b.n	800646c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006456:	f7ff fb81 	bl	8005b5c <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d903      	bls.n	800646c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e15c      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
 8006468:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800646c:	4b91      	ldr	r3, [pc, #580]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 800646e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1ee      	bne.n	8006456 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 80a4 	beq.w	80065ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006486:	4b8b      	ldr	r3, [pc, #556]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10d      	bne.n	80064ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006492:	4b88      	ldr	r3, [pc, #544]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006496:	4a87      	ldr	r2, [pc, #540]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800649c:	6413      	str	r3, [r2, #64]	@ 0x40
 800649e:	4b85      	ldr	r3, [pc, #532]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 80064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a6:	60bb      	str	r3, [r7, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064aa:	2301      	movs	r3, #1
 80064ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064ae:	4b82      	ldr	r3, [pc, #520]	@ (80066b8 <HAL_RCC_OscConfig+0x4d0>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d118      	bne.n	80064ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80064ba:	4b7f      	ldr	r3, [pc, #508]	@ (80066b8 <HAL_RCC_OscConfig+0x4d0>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a7e      	ldr	r2, [pc, #504]	@ (80066b8 <HAL_RCC_OscConfig+0x4d0>)
 80064c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064c6:	f7ff fb49 	bl	8005b5c <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064cc:	e008      	b.n	80064e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ce:	f7ff fb45 	bl	8005b5c <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b64      	cmp	r3, #100	@ 0x64
 80064da:	d901      	bls.n	80064e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e120      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064e0:	4b75      	ldr	r3, [pc, #468]	@ (80066b8 <HAL_RCC_OscConfig+0x4d0>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0f0      	beq.n	80064ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d106      	bne.n	8006502 <HAL_RCC_OscConfig+0x31a>
 80064f4:	4b6f      	ldr	r3, [pc, #444]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f8:	4a6e      	ldr	r2, [pc, #440]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006500:	e02d      	b.n	800655e <HAL_RCC_OscConfig+0x376>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10c      	bne.n	8006524 <HAL_RCC_OscConfig+0x33c>
 800650a:	4b6a      	ldr	r3, [pc, #424]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 800650c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650e:	4a69      	ldr	r2, [pc, #420]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	6713      	str	r3, [r2, #112]	@ 0x70
 8006516:	4b67      	ldr	r3, [pc, #412]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651a:	4a66      	ldr	r2, [pc, #408]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 800651c:	f023 0304 	bic.w	r3, r3, #4
 8006520:	6713      	str	r3, [r2, #112]	@ 0x70
 8006522:	e01c      	b.n	800655e <HAL_RCC_OscConfig+0x376>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b05      	cmp	r3, #5
 800652a:	d10c      	bne.n	8006546 <HAL_RCC_OscConfig+0x35e>
 800652c:	4b61      	ldr	r3, [pc, #388]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 800652e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006530:	4a60      	ldr	r2, [pc, #384]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006532:	f043 0304 	orr.w	r3, r3, #4
 8006536:	6713      	str	r3, [r2, #112]	@ 0x70
 8006538:	4b5e      	ldr	r3, [pc, #376]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 800653a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653c:	4a5d      	ldr	r2, [pc, #372]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 800653e:	f043 0301 	orr.w	r3, r3, #1
 8006542:	6713      	str	r3, [r2, #112]	@ 0x70
 8006544:	e00b      	b.n	800655e <HAL_RCC_OscConfig+0x376>
 8006546:	4b5b      	ldr	r3, [pc, #364]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654a:	4a5a      	ldr	r2, [pc, #360]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 800654c:	f023 0301 	bic.w	r3, r3, #1
 8006550:	6713      	str	r3, [r2, #112]	@ 0x70
 8006552:	4b58      	ldr	r3, [pc, #352]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006556:	4a57      	ldr	r2, [pc, #348]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006558:	f023 0304 	bic.w	r3, r3, #4
 800655c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d015      	beq.n	8006592 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006566:	f7ff faf9 	bl	8005b5c <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800656c:	e00a      	b.n	8006584 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800656e:	f7ff faf5 	bl	8005b5c <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800657c:	4293      	cmp	r3, r2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e0ce      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006584:	4b4b      	ldr	r3, [pc, #300]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d0ee      	beq.n	800656e <HAL_RCC_OscConfig+0x386>
 8006590:	e014      	b.n	80065bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006592:	f7ff fae3 	bl	8005b5c <HAL_GetTick>
 8006596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006598:	e00a      	b.n	80065b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800659a:	f7ff fadf 	bl	8005b5c <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e0b8      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065b0:	4b40      	ldr	r3, [pc, #256]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 80065b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1ee      	bne.n	800659a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d105      	bne.n	80065ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065c2:	4b3c      	ldr	r3, [pc, #240]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	4a3b      	ldr	r2, [pc, #236]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 80065c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 80a4 	beq.w	8006720 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065d8:	4b36      	ldr	r3, [pc, #216]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f003 030c 	and.w	r3, r3, #12
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d06b      	beq.n	80066bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d149      	bne.n	8006680 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ec:	4b31      	ldr	r3, [pc, #196]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a30      	ldr	r2, [pc, #192]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 80065f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f8:	f7ff fab0 	bl	8005b5c <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006600:	f7ff faac 	bl	8005b5c <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b02      	cmp	r3, #2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e087      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006612:	4b28      	ldr	r3, [pc, #160]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69da      	ldr	r2, [r3, #28]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662c:	019b      	lsls	r3, r3, #6
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	085b      	lsrs	r3, r3, #1
 8006636:	3b01      	subs	r3, #1
 8006638:	041b      	lsls	r3, r3, #16
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	061b      	lsls	r3, r3, #24
 8006642:	4313      	orrs	r3, r2
 8006644:	4a1b      	ldr	r2, [pc, #108]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006646:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800664a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800664c:	4b19      	ldr	r3, [pc, #100]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a18      	ldr	r2, [pc, #96]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006658:	f7ff fa80 	bl	8005b5c <HAL_GetTick>
 800665c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800665e:	e008      	b.n	8006672 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006660:	f7ff fa7c 	bl	8005b5c <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	2b02      	cmp	r3, #2
 800666c:	d901      	bls.n	8006672 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e057      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006672:	4b10      	ldr	r3, [pc, #64]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0f0      	beq.n	8006660 <HAL_RCC_OscConfig+0x478>
 800667e:	e04f      	b.n	8006720 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006680:	4b0c      	ldr	r3, [pc, #48]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a0b      	ldr	r2, [pc, #44]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 8006686:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800668a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668c:	f7ff fa66 	bl	8005b5c <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006692:	e008      	b.n	80066a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006694:	f7ff fa62 	bl	8005b5c <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e03d      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066a6:	4b03      	ldr	r3, [pc, #12]	@ (80066b4 <HAL_RCC_OscConfig+0x4cc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f0      	bne.n	8006694 <HAL_RCC_OscConfig+0x4ac>
 80066b2:	e035      	b.n	8006720 <HAL_RCC_OscConfig+0x538>
 80066b4:	40023800 	.word	0x40023800
 80066b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80066bc:	4b1b      	ldr	r3, [pc, #108]	@ (800672c <HAL_RCC_OscConfig+0x544>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d028      	beq.n	800671c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d121      	bne.n	800671c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d11a      	bne.n	800671c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80066ec:	4013      	ands	r3, r2
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d111      	bne.n	800671c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	3b01      	subs	r3, #1
 8006706:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006708:	429a      	cmp	r2, r3
 800670a:	d107      	bne.n	800671c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006716:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006718:	429a      	cmp	r2, r3
 800671a:	d001      	beq.n	8006720 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40023800 	.word	0x40023800

08006730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e0d0      	b.n	80068ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006748:	4b6a      	ldr	r3, [pc, #424]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 030f 	and.w	r3, r3, #15
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d910      	bls.n	8006778 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006756:	4b67      	ldr	r3, [pc, #412]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f023 020f 	bic.w	r2, r3, #15
 800675e:	4965      	ldr	r1, [pc, #404]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	4313      	orrs	r3, r2
 8006764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006766:	4b63      	ldr	r3, [pc, #396]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d001      	beq.n	8006778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e0b8      	b.n	80068ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d020      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006790:	4b59      	ldr	r3, [pc, #356]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	4a58      	ldr	r2, [pc, #352]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006796:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800679a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0308 	and.w	r3, r3, #8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067a8:	4b53      	ldr	r3, [pc, #332]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	4a52      	ldr	r2, [pc, #328]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80067ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80067b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b4:	4b50      	ldr	r3, [pc, #320]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	494d      	ldr	r1, [pc, #308]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d040      	beq.n	8006854 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d107      	bne.n	80067ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067da:	4b47      	ldr	r3, [pc, #284]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d115      	bne.n	8006812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e07f      	b.n	80068ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d107      	bne.n	8006802 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f2:	4b41      	ldr	r3, [pc, #260]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d109      	bne.n	8006812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e073      	b.n	80068ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006802:	4b3d      	ldr	r3, [pc, #244]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e06b      	b.n	80068ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006812:	4b39      	ldr	r3, [pc, #228]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f023 0203 	bic.w	r2, r3, #3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	4936      	ldr	r1, [pc, #216]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006820:	4313      	orrs	r3, r2
 8006822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006824:	f7ff f99a 	bl	8005b5c <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800682a:	e00a      	b.n	8006842 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800682c:	f7ff f996 	bl	8005b5c <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800683a:	4293      	cmp	r3, r2
 800683c:	d901      	bls.n	8006842 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e053      	b.n	80068ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006842:	4b2d      	ldr	r3, [pc, #180]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 020c 	and.w	r2, r3, #12
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	429a      	cmp	r2, r3
 8006852:	d1eb      	bne.n	800682c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006854:	4b27      	ldr	r3, [pc, #156]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d210      	bcs.n	8006884 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006862:	4b24      	ldr	r3, [pc, #144]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f023 020f 	bic.w	r2, r3, #15
 800686a:	4922      	ldr	r1, [pc, #136]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	4313      	orrs	r3, r2
 8006870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006872:	4b20      	ldr	r3, [pc, #128]	@ (80068f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 030f 	and.w	r3, r3, #15
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d001      	beq.n	8006884 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e032      	b.n	80068ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0304 	and.w	r3, r3, #4
 800688c:	2b00      	cmp	r3, #0
 800688e:	d008      	beq.n	80068a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006890:	4b19      	ldr	r3, [pc, #100]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	4916      	ldr	r1, [pc, #88]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d009      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80068ae:	4b12      	ldr	r3, [pc, #72]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	490e      	ldr	r1, [pc, #56]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068c2:	f000 f821 	bl	8006908 <HAL_RCC_GetSysClockFreq>
 80068c6:	4602      	mov	r2, r0
 80068c8:	4b0b      	ldr	r3, [pc, #44]	@ (80068f8 <HAL_RCC_ClockConfig+0x1c8>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	091b      	lsrs	r3, r3, #4
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	490a      	ldr	r1, [pc, #40]	@ (80068fc <HAL_RCC_ClockConfig+0x1cc>)
 80068d4:	5ccb      	ldrb	r3, [r1, r3]
 80068d6:	fa22 f303 	lsr.w	r3, r2, r3
 80068da:	4a09      	ldr	r2, [pc, #36]	@ (8006900 <HAL_RCC_ClockConfig+0x1d0>)
 80068dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80068de:	4b09      	ldr	r3, [pc, #36]	@ (8006904 <HAL_RCC_ClockConfig+0x1d4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff f8f6 	bl	8005ad4 <HAL_InitTick>

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	40023c00 	.word	0x40023c00
 80068f8:	40023800 	.word	0x40023800
 80068fc:	0801073c 	.word	0x0801073c
 8006900:	20000000 	.word	0x20000000
 8006904:	20000004 	.word	0x20000004

08006908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800690c:	b094      	sub	sp, #80	@ 0x50
 800690e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	647b      	str	r3, [r7, #68]	@ 0x44
 8006914:	2300      	movs	r3, #0
 8006916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006918:	2300      	movs	r3, #0
 800691a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800691c:	2300      	movs	r3, #0
 800691e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006920:	4b79      	ldr	r3, [pc, #484]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 030c 	and.w	r3, r3, #12
 8006928:	2b08      	cmp	r3, #8
 800692a:	d00d      	beq.n	8006948 <HAL_RCC_GetSysClockFreq+0x40>
 800692c:	2b08      	cmp	r3, #8
 800692e:	f200 80e1 	bhi.w	8006af4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d002      	beq.n	800693c <HAL_RCC_GetSysClockFreq+0x34>
 8006936:	2b04      	cmp	r3, #4
 8006938:	d003      	beq.n	8006942 <HAL_RCC_GetSysClockFreq+0x3a>
 800693a:	e0db      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800693c:	4b73      	ldr	r3, [pc, #460]	@ (8006b0c <HAL_RCC_GetSysClockFreq+0x204>)
 800693e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006940:	e0db      	b.n	8006afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006942:	4b73      	ldr	r3, [pc, #460]	@ (8006b10 <HAL_RCC_GetSysClockFreq+0x208>)
 8006944:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006946:	e0d8      	b.n	8006afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006948:	4b6f      	ldr	r3, [pc, #444]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x200>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006950:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006952:	4b6d      	ldr	r3, [pc, #436]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d063      	beq.n	8006a26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800695e:	4b6a      	ldr	r3, [pc, #424]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	099b      	lsrs	r3, r3, #6
 8006964:	2200      	movs	r2, #0
 8006966:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006968:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800696a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006970:	633b      	str	r3, [r7, #48]	@ 0x30
 8006972:	2300      	movs	r3, #0
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
 8006976:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800697a:	4622      	mov	r2, r4
 800697c:	462b      	mov	r3, r5
 800697e:	f04f 0000 	mov.w	r0, #0
 8006982:	f04f 0100 	mov.w	r1, #0
 8006986:	0159      	lsls	r1, r3, #5
 8006988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800698c:	0150      	lsls	r0, r2, #5
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	4621      	mov	r1, r4
 8006994:	1a51      	subs	r1, r2, r1
 8006996:	6139      	str	r1, [r7, #16]
 8006998:	4629      	mov	r1, r5
 800699a:	eb63 0301 	sbc.w	r3, r3, r1
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	f04f 0200 	mov.w	r2, #0
 80069a4:	f04f 0300 	mov.w	r3, #0
 80069a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069ac:	4659      	mov	r1, fp
 80069ae:	018b      	lsls	r3, r1, #6
 80069b0:	4651      	mov	r1, sl
 80069b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069b6:	4651      	mov	r1, sl
 80069b8:	018a      	lsls	r2, r1, #6
 80069ba:	4651      	mov	r1, sl
 80069bc:	ebb2 0801 	subs.w	r8, r2, r1
 80069c0:	4659      	mov	r1, fp
 80069c2:	eb63 0901 	sbc.w	r9, r3, r1
 80069c6:	f04f 0200 	mov.w	r2, #0
 80069ca:	f04f 0300 	mov.w	r3, #0
 80069ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069da:	4690      	mov	r8, r2
 80069dc:	4699      	mov	r9, r3
 80069de:	4623      	mov	r3, r4
 80069e0:	eb18 0303 	adds.w	r3, r8, r3
 80069e4:	60bb      	str	r3, [r7, #8]
 80069e6:	462b      	mov	r3, r5
 80069e8:	eb49 0303 	adc.w	r3, r9, r3
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	f04f 0200 	mov.w	r2, #0
 80069f2:	f04f 0300 	mov.w	r3, #0
 80069f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069fa:	4629      	mov	r1, r5
 80069fc:	024b      	lsls	r3, r1, #9
 80069fe:	4621      	mov	r1, r4
 8006a00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a04:	4621      	mov	r1, r4
 8006a06:	024a      	lsls	r2, r1, #9
 8006a08:	4610      	mov	r0, r2
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a0e:	2200      	movs	r2, #0
 8006a10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a18:	f7fa f956 	bl	8000cc8 <__aeabi_uldivmod>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	4613      	mov	r3, r2
 8006a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a24:	e058      	b.n	8006ad8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a26:	4b38      	ldr	r3, [pc, #224]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	099b      	lsrs	r3, r3, #6
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	4611      	mov	r1, r2
 8006a32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a36:	623b      	str	r3, [r7, #32]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a40:	4642      	mov	r2, r8
 8006a42:	464b      	mov	r3, r9
 8006a44:	f04f 0000 	mov.w	r0, #0
 8006a48:	f04f 0100 	mov.w	r1, #0
 8006a4c:	0159      	lsls	r1, r3, #5
 8006a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a52:	0150      	lsls	r0, r2, #5
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4641      	mov	r1, r8
 8006a5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a5e:	4649      	mov	r1, r9
 8006a60:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	f04f 0300 	mov.w	r3, #0
 8006a6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a78:	ebb2 040a 	subs.w	r4, r2, sl
 8006a7c:	eb63 050b 	sbc.w	r5, r3, fp
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	f04f 0300 	mov.w	r3, #0
 8006a88:	00eb      	lsls	r3, r5, #3
 8006a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a8e:	00e2      	lsls	r2, r4, #3
 8006a90:	4614      	mov	r4, r2
 8006a92:	461d      	mov	r5, r3
 8006a94:	4643      	mov	r3, r8
 8006a96:	18e3      	adds	r3, r4, r3
 8006a98:	603b      	str	r3, [r7, #0]
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	eb45 0303 	adc.w	r3, r5, r3
 8006aa0:	607b      	str	r3, [r7, #4]
 8006aa2:	f04f 0200 	mov.w	r2, #0
 8006aa6:	f04f 0300 	mov.w	r3, #0
 8006aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006aae:	4629      	mov	r1, r5
 8006ab0:	028b      	lsls	r3, r1, #10
 8006ab2:	4621      	mov	r1, r4
 8006ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ab8:	4621      	mov	r1, r4
 8006aba:	028a      	lsls	r2, r1, #10
 8006abc:	4610      	mov	r0, r2
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	61bb      	str	r3, [r7, #24]
 8006ac6:	61fa      	str	r2, [r7, #28]
 8006ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006acc:	f7fa f8fc 	bl	8000cc8 <__aeabi_uldivmod>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8006b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	0c1b      	lsrs	r3, r3, #16
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006ae8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006aea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006af2:	e002      	b.n	8006afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006af4:	4b05      	ldr	r3, [pc, #20]	@ (8006b0c <HAL_RCC_GetSysClockFreq+0x204>)
 8006af6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3750      	adds	r7, #80	@ 0x50
 8006b00:	46bd      	mov	sp, r7
 8006b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b06:	bf00      	nop
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	00f42400 	.word	0x00f42400
 8006b10:	007a1200 	.word	0x007a1200

08006b14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e09d      	b.n	8006c62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d108      	bne.n	8006b40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b36:	d009      	beq.n	8006b4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	61da      	str	r2, [r3, #28]
 8006b3e:	e005      	b.n	8006b4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fe fdb4 	bl	80056d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006b8c:	d902      	bls.n	8006b94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	e002      	b.n	8006b9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006b98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006ba2:	d007      	beq.n	8006bb4 <HAL_SPI_Init+0xa0>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006bac:	d002      	beq.n	8006bb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0302 	and.w	r3, r3, #2
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf6:	ea42 0103 	orr.w	r1, r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	0c1b      	lsrs	r3, r3, #16
 8006c10:	f003 0204 	and.w	r2, r3, #4
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c18:	f003 0310 	and.w	r3, r3, #16
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c22:	f003 0308 	and.w	r3, r3, #8
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006c30:	ea42 0103 	orr.w	r1, r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b088      	sub	sp, #32
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	603b      	str	r3, [r7, #0]
 8006c76:	4613      	mov	r3, r2
 8006c78:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c7a:	f7fe ff6f 	bl	8005b5c <HAL_GetTick>
 8006c7e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006c80:	88fb      	ldrh	r3, [r7, #6]
 8006c82:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d001      	beq.n	8006c94 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006c90:	2302      	movs	r3, #2
 8006c92:	e15c      	b.n	8006f4e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_SPI_Transmit+0x36>
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e154      	b.n	8006f4e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_SPI_Transmit+0x48>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e14d      	b.n	8006f4e <HAL_SPI_Transmit+0x2e4>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2203      	movs	r2, #3
 8006cbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	88fa      	ldrh	r2, [r7, #6]
 8006cd2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	88fa      	ldrh	r2, [r7, #6]
 8006cd8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d04:	d10f      	bne.n	8006d26 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d30:	2b40      	cmp	r3, #64	@ 0x40
 8006d32:	d007      	beq.n	8006d44 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d4c:	d952      	bls.n	8006df4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_SPI_Transmit+0xf2>
 8006d56:	8b7b      	ldrh	r3, [r7, #26]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d145      	bne.n	8006de8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d60:	881a      	ldrh	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6c:	1c9a      	adds	r2, r3, #2
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d80:	e032      	b.n	8006de8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d112      	bne.n	8006db6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d94:	881a      	ldrh	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da0:	1c9a      	adds	r2, r3, #2
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	3b01      	subs	r3, #1
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006db4:	e018      	b.n	8006de8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006db6:	f7fe fed1 	bl	8005b5c <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d803      	bhi.n	8006dce <HAL_SPI_Transmit+0x164>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dcc:	d102      	bne.n	8006dd4 <HAL_SPI_Transmit+0x16a>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d109      	bne.n	8006de8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e0b2      	b.n	8006f4e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1c7      	bne.n	8006d82 <HAL_SPI_Transmit+0x118>
 8006df2:	e083      	b.n	8006efc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_SPI_Transmit+0x198>
 8006dfc:	8b7b      	ldrh	r3, [r7, #26]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d177      	bne.n	8006ef2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d912      	bls.n	8006e32 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e10:	881a      	ldrh	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1c:	1c9a      	adds	r2, r3, #2
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b02      	subs	r3, #2
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e30:	e05f      	b.n	8006ef2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	330c      	adds	r3, #12
 8006e3c:	7812      	ldrb	r2, [r2, #0]
 8006e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e58:	e04b      	b.n	8006ef2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d12b      	bne.n	8006ec0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d912      	bls.n	8006e98 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e76:	881a      	ldrh	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	1c9a      	adds	r2, r3, #2
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b02      	subs	r3, #2
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e96:	e02c      	b.n	8006ef2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	7812      	ldrb	r2, [r2, #0]
 8006ea4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ebe:	e018      	b.n	8006ef2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ec0:	f7fe fe4c 	bl	8005b5c <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d803      	bhi.n	8006ed8 <HAL_SPI_Transmit+0x26e>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d102      	bne.n	8006ede <HAL_SPI_Transmit+0x274>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e02d      	b.n	8006f4e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1ae      	bne.n	8006e5a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 fb65 	bl	80075d0 <SPI_EndRxTxTransaction>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3720      	adds	r7, #32
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b08a      	sub	sp, #40	@ 0x28
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f64:	2301      	movs	r3, #1
 8006f66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f68:	f7fe fdf8 	bl	8005b5c <HAL_GetTick>
 8006f6c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006f74:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006f7c:	887b      	ldrh	r3, [r7, #2]
 8006f7e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006f80:	887b      	ldrh	r3, [r7, #2]
 8006f82:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f84:	7ffb      	ldrb	r3, [r7, #31]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d00c      	beq.n	8006fa4 <HAL_SPI_TransmitReceive+0x4e>
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f90:	d106      	bne.n	8006fa0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d102      	bne.n	8006fa0 <HAL_SPI_TransmitReceive+0x4a>
 8006f9a:	7ffb      	ldrb	r3, [r7, #31]
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d001      	beq.n	8006fa4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e1f3      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <HAL_SPI_TransmitReceive+0x60>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <HAL_SPI_TransmitReceive+0x60>
 8006fb0:	887b      	ldrh	r3, [r7, #2]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e1e8      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_SPI_TransmitReceive+0x72>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e1e1      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b04      	cmp	r3, #4
 8006fda:	d003      	beq.n	8006fe4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2205      	movs	r2, #5
 8006fe0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	887a      	ldrh	r2, [r7, #2]
 8006ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	887a      	ldrh	r2, [r7, #2]
 8006ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	887a      	ldrh	r2, [r7, #2]
 800700a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	887a      	ldrh	r2, [r7, #2]
 8007010:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007026:	d802      	bhi.n	800702e <HAL_SPI_TransmitReceive+0xd8>
 8007028:	8abb      	ldrh	r3, [r7, #20]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d908      	bls.n	8007040 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800703c:	605a      	str	r2, [r3, #4]
 800703e:	e007      	b.n	8007050 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800704e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705a:	2b40      	cmp	r3, #64	@ 0x40
 800705c:	d007      	beq.n	800706e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800706c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007076:	f240 8083 	bls.w	8007180 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_SPI_TransmitReceive+0x132>
 8007082:	8afb      	ldrh	r3, [r7, #22]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d16f      	bne.n	8007168 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708c:	881a      	ldrh	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007098:	1c9a      	adds	r2, r3, #2
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ac:	e05c      	b.n	8007168 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d11b      	bne.n	80070f4 <HAL_SPI_TransmitReceive+0x19e>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d016      	beq.n	80070f4 <HAL_SPI_TransmitReceive+0x19e>
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d113      	bne.n	80070f4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d0:	881a      	ldrh	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070dc:	1c9a      	adds	r2, r3, #2
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	3b01      	subs	r3, #1
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d11c      	bne.n	800713c <HAL_SPI_TransmitReceive+0x1e6>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d016      	beq.n	800713c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007118:	b292      	uxth	r2, r2
 800711a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007120:	1c9a      	adds	r2, r3, #2
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007138:	2301      	movs	r3, #1
 800713a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800713c:	f7fe fd0e 	bl	8005b5c <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007148:	429a      	cmp	r2, r3
 800714a:	d80d      	bhi.n	8007168 <HAL_SPI_TransmitReceive+0x212>
 800714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	d009      	beq.n	8007168 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e111      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d19d      	bne.n	80070ae <HAL_SPI_TransmitReceive+0x158>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d197      	bne.n	80070ae <HAL_SPI_TransmitReceive+0x158>
 800717e:	e0e5      	b.n	800734c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <HAL_SPI_TransmitReceive+0x23a>
 8007188:	8afb      	ldrh	r3, [r7, #22]
 800718a:	2b01      	cmp	r3, #1
 800718c:	f040 80d1 	bne.w	8007332 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007194:	b29b      	uxth	r3, r3
 8007196:	2b01      	cmp	r3, #1
 8007198:	d912      	bls.n	80071c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719e:	881a      	ldrh	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071aa:	1c9a      	adds	r2, r3, #2
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	3b02      	subs	r3, #2
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071be:	e0b8      	b.n	8007332 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	7812      	ldrb	r2, [r2, #0]
 80071cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071dc:	b29b      	uxth	r3, r3
 80071de:	3b01      	subs	r3, #1
 80071e0:	b29a      	uxth	r2, r3
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071e6:	e0a4      	b.n	8007332 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d134      	bne.n	8007260 <HAL_SPI_TransmitReceive+0x30a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d02f      	beq.n	8007260 <HAL_SPI_TransmitReceive+0x30a>
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	2b01      	cmp	r3, #1
 8007204:	d12c      	bne.n	8007260 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800720a:	b29b      	uxth	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	d912      	bls.n	8007236 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007214:	881a      	ldrh	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	1c9a      	adds	r2, r3, #2
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b02      	subs	r3, #2
 800722e:	b29a      	uxth	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007234:	e012      	b.n	800725c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	330c      	adds	r3, #12
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	d148      	bne.n	8007300 <HAL_SPI_TransmitReceive+0x3aa>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d042      	beq.n	8007300 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007280:	b29b      	uxth	r3, r3
 8007282:	2b01      	cmp	r3, #1
 8007284:	d923      	bls.n	80072ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007290:	b292      	uxth	r2, r2
 8007292:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007298:	1c9a      	adds	r2, r3, #2
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b02      	subs	r3, #2
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d81f      	bhi.n	80072fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072ca:	605a      	str	r2, [r3, #4]
 80072cc:	e016      	b.n	80072fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f103 020c 	add.w	r2, r3, #12
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072da:	7812      	ldrb	r2, [r2, #0]
 80072dc:	b2d2      	uxtb	r2, r2
 80072de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072e4:	1c5a      	adds	r2, r3, #1
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072fc:	2301      	movs	r3, #1
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007300:	f7fe fc2c 	bl	8005b5c <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800730c:	429a      	cmp	r2, r3
 800730e:	d803      	bhi.n	8007318 <HAL_SPI_TransmitReceive+0x3c2>
 8007310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007316:	d102      	bne.n	800731e <HAL_SPI_TransmitReceive+0x3c8>
 8007318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731a:	2b00      	cmp	r3, #0
 800731c:	d109      	bne.n	8007332 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e02c      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	f47f af55 	bne.w	80071e8 <HAL_SPI_TransmitReceive+0x292>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	f47f af4e 	bne.w	80071e8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800734c:	6a3a      	ldr	r2, [r7, #32]
 800734e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 f93d 	bl	80075d0 <SPI_EndRxTxTransaction>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d008      	beq.n	800736e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e00e      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e000      	b.n	800738c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800738a:	2300      	movs	r3, #0
  }
}
 800738c:	4618      	mov	r0, r3
 800738e:	3728      	adds	r7, #40	@ 0x28
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073a4:	f7fe fbda 	bl	8005b5c <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ac:	1a9b      	subs	r3, r3, r2
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	4413      	add	r3, r2
 80073b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073b4:	f7fe fbd2 	bl	8005b5c <HAL_GetTick>
 80073b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073ba:	4b39      	ldr	r3, [pc, #228]	@ (80074a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	015b      	lsls	r3, r3, #5
 80073c0:	0d1b      	lsrs	r3, r3, #20
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	fb02 f303 	mul.w	r3, r2, r3
 80073c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073ca:	e055      	b.n	8007478 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d2:	d051      	beq.n	8007478 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073d4:	f7fe fbc2 	bl	8005b5c <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d902      	bls.n	80073ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d13d      	bne.n	8007466 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007402:	d111      	bne.n	8007428 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800740c:	d004      	beq.n	8007418 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007416:	d107      	bne.n	8007428 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007426:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800742c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007430:	d10f      	bne.n	8007452 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007450:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e018      	b.n	8007498 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	61fb      	str	r3, [r7, #28]
 8007470:	e002      	b.n	8007478 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	3b01      	subs	r3, #1
 8007476:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4013      	ands	r3, r2
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	429a      	cmp	r2, r3
 8007486:	bf0c      	ite	eq
 8007488:	2301      	moveq	r3, #1
 800748a:	2300      	movne	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	461a      	mov	r2, r3
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	429a      	cmp	r2, r3
 8007494:	d19a      	bne.n	80073cc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3720      	adds	r7, #32
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20000000 	.word	0x20000000

080074a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08a      	sub	sp, #40	@ 0x28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80074b2:	2300      	movs	r3, #0
 80074b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80074b6:	f7fe fb51 	bl	8005b5c <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	1a9b      	subs	r3, r3, r2
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	4413      	add	r3, r2
 80074c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80074c6:	f7fe fb49 	bl	8005b5c <HAL_GetTick>
 80074ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	330c      	adds	r3, #12
 80074d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80074d4:	4b3d      	ldr	r3, [pc, #244]	@ (80075cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	00da      	lsls	r2, r3, #3
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	0d1b      	lsrs	r3, r3, #20
 80074e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e6:	fb02 f303 	mul.w	r3, r2, r3
 80074ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80074ec:	e061      	b.n	80075b2 <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80074f4:	d107      	bne.n	8007506 <SPI_WaitFifoStateUntilTimeout+0x62>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007504:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750c:	d051      	beq.n	80075b2 <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800750e:	f7fe fb25 	bl	8005b5c <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800751a:	429a      	cmp	r2, r3
 800751c:	d902      	bls.n	8007524 <SPI_WaitFifoStateUntilTimeout+0x80>
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	d13d      	bne.n	80075a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007532:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800753c:	d111      	bne.n	8007562 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007546:	d004      	beq.n	8007552 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007550:	d107      	bne.n	8007562 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007560:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800756a:	d10f      	bne.n	800758c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800758a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e011      	b.n	80075c4 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d102      	bne.n	80075ac <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80075aa:	e002      	b.n	80075b2 <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4013      	ands	r3, r2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d195      	bne.n	80074ee <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3728      	adds	r7, #40	@ 0x28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20000000 	.word	0x20000000

080075d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b088      	sub	sp, #32
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f7ff ff5b 	bl	80074a4 <SPI_WaitFifoStateUntilTimeout>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d007      	beq.n	8007604 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075f8:	f043 0220 	orr.w	r2, r3, #32
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e046      	b.n	8007692 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007604:	4b25      	ldr	r3, [pc, #148]	@ (800769c <SPI_EndRxTxTransaction+0xcc>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a25      	ldr	r2, [pc, #148]	@ (80076a0 <SPI_EndRxTxTransaction+0xd0>)
 800760a:	fba2 2303 	umull	r2, r3, r2, r3
 800760e:	0d5b      	lsrs	r3, r3, #21
 8007610:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007614:	fb02 f303 	mul.w	r3, r2, r3
 8007618:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007622:	d112      	bne.n	800764a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2200      	movs	r2, #0
 800762c:	2180      	movs	r1, #128	@ 0x80
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f7ff feb0 	bl	8007394 <SPI_WaitFlagStateUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d016      	beq.n	8007668 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800763e:	f043 0220 	orr.w	r2, r3, #32
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e023      	b.n	8007692 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	3b01      	subs	r3, #1
 8007654:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007660:	2b80      	cmp	r3, #128	@ 0x80
 8007662:	d0f2      	beq.n	800764a <SPI_EndRxTxTransaction+0x7a>
 8007664:	e000      	b.n	8007668 <SPI_EndRxTxTransaction+0x98>
        break;
 8007666:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2200      	movs	r2, #0
 8007670:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff ff15 	bl	80074a4 <SPI_WaitFifoStateUntilTimeout>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d007      	beq.n	8007690 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e000      	b.n	8007692 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20000000 	.word	0x20000000
 80076a0:	165e9f81 	.word	0x165e9f81

080076a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80076a8:	4904      	ldr	r1, [pc, #16]	@ (80076bc <MX_FATFS_Init+0x18>)
 80076aa:	4805      	ldr	r0, [pc, #20]	@ (80076c0 <MX_FATFS_Init+0x1c>)
 80076ac:	f004 fade 	bl	800bc6c <FATFS_LinkDriver>
 80076b0:	4603      	mov	r3, r0
 80076b2:	461a      	mov	r2, r3
 80076b4:	4b03      	ldr	r3, [pc, #12]	@ (80076c4 <MX_FATFS_Init+0x20>)
 80076b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80076b8:	bf00      	nop
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20001008 	.word	0x20001008
 80076c0:	2000000c 	.word	0x2000000c
 80076c4:	20001004 	.word	0x20001004

080076c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80076c8:	b480      	push	{r7}
 80076ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80076cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <disk_status>:
    disk_ioctl
#endif
};


DSTATUS disk_status(BYTE pdrv) {
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <disk_status+0x14>
        return 0;  // OK
 80076e8:	2300      	movs	r3, #0
 80076ea:	e000      	b.n	80076ee <disk_status+0x16>
    }
    return STA_NOINIT;
 80076ec:	2301      	movs	r3, #1
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <disk_initialize>:

DSTATUS disk_initialize(BYTE pdrv) {
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	4603      	mov	r3, r0
 8007702:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d108      	bne.n	800771c <disk_initialize+0x22>
        return (SD_Init() == SD_OK) ? 0 : STA_NOINIT;
 800770a:	f7fd fe97 	bl	800543c <SD_Init>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	bf14      	ite	ne
 8007714:	2301      	movne	r3, #1
 8007716:	2300      	moveq	r3, #0
 8007718:	b2db      	uxtb	r3, r3
 800771a:	e000      	b.n	800771e <disk_initialize+0x24>
    }
    return STA_NOINIT;
 800771c:	2301      	movs	r3, #1
}
 800771e:	4618      	mov	r0, r3
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <disk_read>:

DRESULT disk_read(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count) {
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
 8007732:	4603      	mov	r3, r0
 8007734:	73fb      	strb	r3, [r7, #15]
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d102      	bne.n	8007742 <disk_read+0x1c>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <disk_read+0x20>
 8007742:	2304      	movs	r3, #4
 8007744:	e01a      	b.n	800777c <disk_read+0x56>

    for (UINT i = 0; i < count; i++) {
 8007746:	2300      	movs	r3, #0
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	e012      	b.n	8007772 <disk_read+0x4c>
        if (SD_ReadBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	4413      	add	r3, r2
 8007752:	0258      	lsls	r0, r3, #9
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	025b      	lsls	r3, r3, #9
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	4413      	add	r3, r2
 800775c:	4619      	mov	r1, r3
 800775e:	f7fd feb5 	bl	80054cc <SD_ReadBlock>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <disk_read+0x46>
            return RES_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e007      	b.n	800777c <disk_read+0x56>
    for (UINT i = 0; i < count; i++) {
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	3301      	adds	r3, #1
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d3e8      	bcc.n	800774c <disk_read+0x26>
    }

    return RES_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <disk_write>:

DRESULT disk_write(BYTE pdrv, const BYTE* buff, LBA_t sector, UINT count) {
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	603b      	str	r3, [r7, #0]
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
#if FF_FS_READONLY
    return RES_WRPRT;
#else
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d102      	bne.n	80077a0 <disk_write+0x1c>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <disk_write+0x20>
 80077a0:	2304      	movs	r3, #4
 80077a2:	e01a      	b.n	80077da <disk_write+0x56>

    for (UINT i = 0; i < count; i++) {
 80077a4:	2300      	movs	r3, #0
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e012      	b.n	80077d0 <disk_write+0x4c>
        if (SD_WriteBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	4413      	add	r3, r2
 80077b0:	0258      	lsls	r0, r3, #9
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	025b      	lsls	r3, r3, #9
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	4413      	add	r3, r2
 80077ba:	4619      	mov	r1, r3
 80077bc:	f7fd feca 	bl	8005554 <SD_WriteBlock>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <disk_write+0x46>
            return RES_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e007      	b.n	80077da <disk_write+0x56>
    for (UINT i = 0; i < count; i++) {
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	3301      	adds	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d3e8      	bcc.n	80077aa <disk_write+0x26>
    }

    return RES_OK;
 80077d8:	2300      	movs	r3, #0
#endif
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <disk_ioctl>:

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	603a      	str	r2, [r7, #0]
 80077ee:	71fb      	strb	r3, [r7, #7]
 80077f0:	460b      	mov	r3, r1
 80077f2:	71bb      	strb	r3, [r7, #6]
    if (pdrv != DEV_MMC) return RES_PARERR;
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <disk_ioctl+0x1a>
 80077fa:	2304      	movs	r3, #4
 80077fc:	e022      	b.n	8007844 <disk_ioctl+0x60>

    switch (cmd) {
 80077fe:	79bb      	ldrb	r3, [r7, #6]
 8007800:	2b03      	cmp	r3, #3
 8007802:	d81e      	bhi.n	8007842 <disk_ioctl+0x5e>
 8007804:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <disk_ioctl+0x28>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	0800781d 	.word	0x0800781d
 8007810:	08007821 	.word	0x08007821
 8007814:	0800782d 	.word	0x0800782d
 8007818:	08007839 	.word	0x08007839
        case CTRL_SYNC:
            return RES_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	e011      	b.n	8007844 <disk_ioctl+0x60>
        case GET_SECTOR_COUNT:
            *(DWORD*)buff = 32768;  // Exemplo: 16 MB
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007826:	601a      	str	r2, [r3, #0]
            return RES_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	e00b      	b.n	8007844 <disk_ioctl+0x60>
        case GET_SECTOR_SIZE:
            *(WORD*)buff = 512;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007832:	801a      	strh	r2, [r3, #0]
            return RES_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	e005      	b.n	8007844 <disk_ioctl+0x60>
        case GET_BLOCK_SIZE:
            *(DWORD*)buff = 1;
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2201      	movs	r2, #1
 800783c:	601a      	str	r2, [r3, #0]
            return RES_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	e000      	b.n	8007844 <disk_ioctl+0x60>
    }

    return RES_PARERR;
 8007842:	2304      	movs	r3, #4
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3301      	adds	r3, #1
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007860:	89fb      	ldrh	r3, [r7, #14]
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	b21a      	sxth	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	b21b      	sxth	r3, r3
 800786c:	4313      	orrs	r3, r2
 800786e:	b21b      	sxth	r3, r3
 8007870:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007872:	89fb      	ldrh	r3, [r7, #14]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	3303      	adds	r3, #3
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	021b      	lsls	r3, r3, #8
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	3202      	adds	r2, #2
 8007898:	7812      	ldrb	r2, [r2, #0]
 800789a:	4313      	orrs	r3, r2
 800789c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	3201      	adds	r2, #1
 80078a6:	7812      	ldrb	r2, [r2, #0]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	7812      	ldrb	r2, [r2, #0]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80078b8:	68fb      	ldr	r3, [r7, #12]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80078c6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80078ca:	b09d      	sub	sp, #116	@ 0x74
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 80078d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078d2:	3307      	adds	r3, #7
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2200      	movs	r2, #0
 80078da:	469a      	mov	sl, r3
 80078dc:	4693      	mov	fp, r2
 80078de:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 80078e2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80078e6:	f04f 0000 	mov.w	r0, #0
 80078ea:	f04f 0100 	mov.w	r1, #0
 80078ee:	0219      	lsls	r1, r3, #8
 80078f0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80078f4:	0210      	lsls	r0, r2, #8
 80078f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80078f8:	3306      	adds	r3, #6
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2200      	movs	r2, #0
 8007900:	461c      	mov	r4, r3
 8007902:	4615      	mov	r5, r2
 8007904:	ea40 0804 	orr.w	r8, r0, r4
 8007908:	ea41 0905 	orr.w	r9, r1, r5
 800790c:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8007910:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8007914:	f04f 0000 	mov.w	r0, #0
 8007918:	f04f 0100 	mov.w	r1, #0
 800791c:	0219      	lsls	r1, r3, #8
 800791e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007922:	0210      	lsls	r0, r2, #8
 8007924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007926:	3305      	adds	r3, #5
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2200      	movs	r2, #0
 800792e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007930:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007932:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8007936:	4623      	mov	r3, r4
 8007938:	4303      	orrs	r3, r0
 800793a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800793c:	462b      	mov	r3, r5
 800793e:	430b      	orrs	r3, r1
 8007940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007942:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8007946:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 800794a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800794e:	f04f 0000 	mov.w	r0, #0
 8007952:	f04f 0100 	mov.w	r1, #0
 8007956:	0219      	lsls	r1, r3, #8
 8007958:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800795c:	0210      	lsls	r0, r2, #8
 800795e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007960:	3304      	adds	r3, #4
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2200      	movs	r2, #0
 8007968:	653b      	str	r3, [r7, #80]	@ 0x50
 800796a:	657a      	str	r2, [r7, #84]	@ 0x54
 800796c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8007970:	4623      	mov	r3, r4
 8007972:	4303      	orrs	r3, r0
 8007974:	623b      	str	r3, [r7, #32]
 8007976:	462b      	mov	r3, r5
 8007978:	430b      	orrs	r3, r1
 800797a:	627b      	str	r3, [r7, #36]	@ 0x24
 800797c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007980:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8007984:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8007988:	f04f 0000 	mov.w	r0, #0
 800798c:	f04f 0100 	mov.w	r1, #0
 8007990:	0219      	lsls	r1, r3, #8
 8007992:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8007996:	0210      	lsls	r0, r2, #8
 8007998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800799a:	3303      	adds	r3, #3
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2200      	movs	r2, #0
 80079a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079a4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80079a6:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80079aa:	4623      	mov	r3, r4
 80079ac:	4303      	orrs	r3, r0
 80079ae:	61bb      	str	r3, [r7, #24]
 80079b0:	462b      	mov	r3, r5
 80079b2:	430b      	orrs	r3, r1
 80079b4:	61fb      	str	r3, [r7, #28]
 80079b6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80079ba:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 80079be:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80079c2:	f04f 0000 	mov.w	r0, #0
 80079c6:	f04f 0100 	mov.w	r1, #0
 80079ca:	0219      	lsls	r1, r3, #8
 80079cc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80079d0:	0210      	lsls	r0, r2, #8
 80079d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079d4:	3302      	adds	r3, #2
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2200      	movs	r2, #0
 80079dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80079de:	647a      	str	r2, [r7, #68]	@ 0x44
 80079e0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80079e4:	4623      	mov	r3, r4
 80079e6:	4303      	orrs	r3, r0
 80079e8:	613b      	str	r3, [r7, #16]
 80079ea:	462b      	mov	r3, r5
 80079ec:	430b      	orrs	r3, r1
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80079f4:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 80079f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	f04f 0300 	mov.w	r3, #0
 8007a04:	020b      	lsls	r3, r1, #8
 8007a06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a0a:	0202      	lsls	r2, r0, #8
 8007a0c:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007a0e:	3101      	adds	r1, #1
 8007a10:	7809      	ldrb	r1, [r1, #0]
 8007a12:	b2c9      	uxtb	r1, r1
 8007a14:	2000      	movs	r0, #0
 8007a16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a18:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8007a1a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4311      	orrs	r1, r2
 8007a22:	60b9      	str	r1, [r7, #8]
 8007a24:	4629      	mov	r1, r5
 8007a26:	4319      	orrs	r1, r3
 8007a28:	60f9      	str	r1, [r7, #12]
 8007a2a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007a2e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8007a32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007a36:	f04f 0200 	mov.w	r2, #0
 8007a3a:	f04f 0300 	mov.w	r3, #0
 8007a3e:	020b      	lsls	r3, r1, #8
 8007a40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a44:	0202      	lsls	r2, r0, #8
 8007a46:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007a48:	7809      	ldrb	r1, [r1, #0]
 8007a4a:	b2c9      	uxtb	r1, r1
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a50:	6378      	str	r0, [r7, #52]	@ 0x34
 8007a52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007a56:	4621      	mov	r1, r4
 8007a58:	4311      	orrs	r1, r2
 8007a5a:	6039      	str	r1, [r7, #0]
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	4319      	orrs	r1, r3
 8007a60:	6079      	str	r1, [r7, #4]
 8007a62:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007a66:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8007a6a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8007a6e:	4610      	mov	r0, r2
 8007a70:	4619      	mov	r1, r3
 8007a72:	3774      	adds	r7, #116	@ 0x74
 8007a74:	46bd      	mov	sp, r7
 8007a76:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007a7a:	4770      	bx	lr

08007a7c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	607a      	str	r2, [r7, #4]
 8007a8e:	887a      	ldrh	r2, [r7, #2]
 8007a90:	b2d2      	uxtb	r2, r2
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	887b      	ldrh	r3, [r7, #2]
 8007a96:	0a1b      	lsrs	r3, r3, #8
 8007a98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	887a      	ldrh	r2, [r7, #2]
 8007aa2:	b2d2      	uxtb	r2, r2
 8007aa4:	701a      	strb	r2, [r3, #0]
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	607a      	str	r2, [r7, #4]
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	b2d2      	uxtb	r2, r2
 8007ac6:	701a      	strb	r2, [r3, #0]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	0a1b      	lsrs	r3, r3, #8
 8007acc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	701a      	strb	r2, [r3, #0]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	0a1b      	lsrs	r3, r3, #8
 8007ade:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	607a      	str	r2, [r7, #4]
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	b2d2      	uxtb	r2, r2
 8007aea:	701a      	strb	r2, [r3, #0]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	0a1b      	lsrs	r3, r3, #8
 8007af0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	701a      	strb	r2, [r3, #0]
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	60fa      	str	r2, [r7, #12]
 8007b1c:	783a      	ldrb	r2, [r7, #0]
 8007b1e:	701a      	strb	r2, [r3, #0]
 8007b20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b24:	f04f 0200 	mov.w	r2, #0
 8007b28:	f04f 0300 	mov.w	r3, #0
 8007b2c:	0a02      	lsrs	r2, r0, #8
 8007b2e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007b32:	0a0b      	lsrs	r3, r1, #8
 8007b34:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	60fa      	str	r2, [r7, #12]
 8007b3e:	783a      	ldrb	r2, [r7, #0]
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b46:	f04f 0200 	mov.w	r2, #0
 8007b4a:	f04f 0300 	mov.w	r3, #0
 8007b4e:	0a02      	lsrs	r2, r0, #8
 8007b50:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007b54:	0a0b      	lsrs	r3, r1, #8
 8007b56:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	60fa      	str	r2, [r7, #12]
 8007b60:	783a      	ldrb	r2, [r7, #0]
 8007b62:	701a      	strb	r2, [r3, #0]
 8007b64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	f04f 0300 	mov.w	r3, #0
 8007b70:	0a02      	lsrs	r2, r0, #8
 8007b72:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007b76:	0a0b      	lsrs	r3, r1, #8
 8007b78:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	60fa      	str	r2, [r7, #12]
 8007b82:	783a      	ldrb	r2, [r7, #0]
 8007b84:	701a      	strb	r2, [r3, #0]
 8007b86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	f04f 0300 	mov.w	r3, #0
 8007b92:	0a02      	lsrs	r2, r0, #8
 8007b94:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007b98:	0a0b      	lsrs	r3, r1, #8
 8007b9a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	1c5a      	adds	r2, r3, #1
 8007ba2:	60fa      	str	r2, [r7, #12]
 8007ba4:	783a      	ldrb	r2, [r7, #0]
 8007ba6:	701a      	strb	r2, [r3, #0]
 8007ba8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bac:	f04f 0200 	mov.w	r2, #0
 8007bb0:	f04f 0300 	mov.w	r3, #0
 8007bb4:	0a02      	lsrs	r2, r0, #8
 8007bb6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007bba:	0a0b      	lsrs	r3, r1, #8
 8007bbc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	60fa      	str	r2, [r7, #12]
 8007bc6:	783a      	ldrb	r2, [r7, #0]
 8007bc8:	701a      	strb	r2, [r3, #0]
 8007bca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bce:	f04f 0200 	mov.w	r2, #0
 8007bd2:	f04f 0300 	mov.w	r3, #0
 8007bd6:	0a02      	lsrs	r2, r0, #8
 8007bd8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007bdc:	0a0b      	lsrs	r3, r1, #8
 8007bde:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	60fa      	str	r2, [r7, #12]
 8007be8:	783a      	ldrb	r2, [r7, #0]
 8007bea:	701a      	strb	r2, [r3, #0]
 8007bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bf0:	f04f 0200 	mov.w	r2, #0
 8007bf4:	f04f 0300 	mov.w	r3, #0
 8007bf8:	0a02      	lsrs	r2, r0, #8
 8007bfa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007bfe:	0a0b      	lsrs	r3, r1, #8
 8007c00:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	60fa      	str	r2, [r7, #12]
 8007c0a:	783a      	ldrb	r2, [r7, #0]
 8007c0c:	701a      	strb	r2, [r3, #0]
}
 8007c0e:	bf00      	nop
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007c1a:	b480      	push	{r7}
 8007c1c:	b087      	sub	sp, #28
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00d      	beq.n	8007c50 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	1c53      	adds	r3, r2, #1
 8007c38:	613b      	str	r3, [r7, #16]
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	1c59      	adds	r1, r3, #1
 8007c3e:	6179      	str	r1, [r7, #20]
 8007c40:	7812      	ldrb	r2, [r2, #0]
 8007c42:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	607b      	str	r3, [r7, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1f1      	bne.n	8007c34 <mem_cpy+0x1a>
	}
}
 8007c50:	bf00      	nop
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	617a      	str	r2, [r7, #20]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	607b      	str	r3, [r7, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1f3      	bne.n	8007c6c <mem_set+0x10>
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007c92:	b480      	push	{r7}
 8007c94:	b089      	sub	sp, #36	@ 0x24
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	61fb      	str	r3, [r7, #28]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	61fa      	str	r2, [r7, #28]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	61ba      	str	r2, [r7, #24]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	1acb      	subs	r3, r1, r3
 8007cbe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	607b      	str	r3, [r7, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d002      	beq.n	8007cd2 <mem_cmp+0x40>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0eb      	beq.n	8007caa <mem_cmp+0x18>

	return r;
 8007cd2:	697b      	ldr	r3, [r7, #20]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3724      	adds	r7, #36	@ 0x24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007cea:	e002      	b.n	8007cf2 <chk_chr+0x12>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	607b      	str	r3, [r7, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d005      	beq.n	8007d06 <chk_chr+0x26>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d1f2      	bne.n	8007cec <chk_chr+0xc>
	return *str;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	781b      	ldrb	r3, [r3, #0]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
	...

08007d18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007d22:	2300      	movs	r3, #0
 8007d24:	60bb      	str	r3, [r7, #8]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	e029      	b.n	8007d80 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007d2c:	4a27      	ldr	r2, [pc, #156]	@ (8007dcc <chk_lock+0xb4>)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	4413      	add	r3, r2
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d01d      	beq.n	8007d76 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007d3a:	4a24      	ldr	r2, [pc, #144]	@ (8007dcc <chk_lock+0xb4>)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	011b      	lsls	r3, r3, #4
 8007d40:	4413      	add	r3, r2
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d116      	bne.n	8007d7a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8007dcc <chk_lock+0xb4>)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	011b      	lsls	r3, r3, #4
 8007d52:	4413      	add	r3, r2
 8007d54:	3304      	adds	r3, #4
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d10c      	bne.n	8007d7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007d60:	4a1a      	ldr	r2, [pc, #104]	@ (8007dcc <chk_lock+0xb4>)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	011b      	lsls	r3, r3, #4
 8007d66:	4413      	add	r3, r2
 8007d68:	3308      	adds	r3, #8
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d102      	bne.n	8007d7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007d74:	e007      	b.n	8007d86 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007d76:	2301      	movs	r3, #1
 8007d78:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0d2      	beq.n	8007d2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d109      	bne.n	8007da0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d102      	bne.n	8007d98 <chk_lock+0x80>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d101      	bne.n	8007d9c <chk_lock+0x84>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	e010      	b.n	8007dbe <chk_lock+0xa6>
 8007d9c:	2312      	movs	r3, #18
 8007d9e:	e00e      	b.n	8007dbe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d108      	bne.n	8007db8 <chk_lock+0xa0>
 8007da6:	4a09      	ldr	r2, [pc, #36]	@ (8007dcc <chk_lock+0xb4>)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	011b      	lsls	r3, r3, #4
 8007dac:	4413      	add	r3, r2
 8007dae:	330c      	adds	r3, #12
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007db6:	d101      	bne.n	8007dbc <chk_lock+0xa4>
 8007db8:	2310      	movs	r3, #16
 8007dba:	e000      	b.n	8007dbe <chk_lock+0xa6>
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	20001014 	.word	0x20001014

08007dd0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	607b      	str	r3, [r7, #4]
 8007dda:	e002      	b.n	8007de2 <enq_lock+0x12>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3301      	adds	r3, #1
 8007de0:	607b      	str	r3, [r7, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d106      	bne.n	8007df6 <enq_lock+0x26>
 8007de8:	4a09      	ldr	r2, [pc, #36]	@ (8007e10 <enq_lock+0x40>)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	011b      	lsls	r3, r3, #4
 8007dee:	4413      	add	r3, r2
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f2      	bne.n	8007ddc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	bf14      	ite	ne
 8007dfc:	2301      	movne	r3, #1
 8007dfe:	2300      	moveq	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20001014 	.word	0x20001014

08007e14 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	e01f      	b.n	8007e64 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007e24:	4a41      	ldr	r2, [pc, #260]	@ (8007f2c <inc_lock+0x118>)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	4413      	add	r3, r2
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d113      	bne.n	8007e5e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007e36:	4a3d      	ldr	r2, [pc, #244]	@ (8007f2c <inc_lock+0x118>)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	011b      	lsls	r3, r3, #4
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3304      	adds	r3, #4
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d109      	bne.n	8007e5e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007e4a:	4a38      	ldr	r2, [pc, #224]	@ (8007f2c <inc_lock+0x118>)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	4413      	add	r3, r2
 8007e52:	3308      	adds	r3, #8
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d006      	beq.n	8007e6c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3301      	adds	r3, #1
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0dc      	beq.n	8007e24 <inc_lock+0x10>
 8007e6a:	e000      	b.n	8007e6e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007e6c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d132      	bne.n	8007eda <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007e74:	2300      	movs	r3, #0
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	e002      	b.n	8007e80 <inc_lock+0x6c>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d106      	bne.n	8007e94 <inc_lock+0x80>
 8007e86:	4a29      	ldr	r2, [pc, #164]	@ (8007f2c <inc_lock+0x118>)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	011b      	lsls	r3, r3, #4
 8007e8c:	4413      	add	r3, r2
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1f2      	bne.n	8007e7a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d101      	bne.n	8007e9e <inc_lock+0x8a>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e040      	b.n	8007f20 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4922      	ldr	r1, [pc, #136]	@ (8007f2c <inc_lock+0x118>)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	440b      	add	r3, r1
 8007eaa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	491e      	ldr	r1, [pc, #120]	@ (8007f2c <inc_lock+0x118>)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	440b      	add	r3, r1
 8007eb8:	3304      	adds	r3, #4
 8007eba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ec0:	491a      	ldr	r1, [pc, #104]	@ (8007f2c <inc_lock+0x118>)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	011b      	lsls	r3, r3, #4
 8007ec6:	440b      	add	r3, r1
 8007ec8:	3308      	adds	r3, #8
 8007eca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007ecc:	4a17      	ldr	r2, [pc, #92]	@ (8007f2c <inc_lock+0x118>)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	011b      	lsls	r3, r3, #4
 8007ed2:	4413      	add	r3, r2
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d009      	beq.n	8007ef4 <inc_lock+0xe0>
 8007ee0:	4a12      	ldr	r2, [pc, #72]	@ (8007f2c <inc_lock+0x118>)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	4413      	add	r3, r2
 8007ee8:	330c      	adds	r3, #12
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <inc_lock+0xe0>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	e015      	b.n	8007f20 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d108      	bne.n	8007f0c <inc_lock+0xf8>
 8007efa:	4a0c      	ldr	r2, [pc, #48]	@ (8007f2c <inc_lock+0x118>)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	011b      	lsls	r3, r3, #4
 8007f00:	4413      	add	r3, r2
 8007f02:	330c      	adds	r3, #12
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	3301      	adds	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	e001      	b.n	8007f10 <inc_lock+0xfc>
 8007f0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f10:	4906      	ldr	r1, [pc, #24]	@ (8007f2c <inc_lock+0x118>)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	440b      	add	r3, r1
 8007f18:	330c      	adds	r3, #12
 8007f1a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	3301      	adds	r3, #1
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	20001014 	.word	0x20001014

08007f30 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	607b      	str	r3, [r7, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d125      	bne.n	8007f90 <dec_lock+0x60>
		n = Files[i].ctr;
 8007f44:	4a17      	ldr	r2, [pc, #92]	@ (8007fa4 <dec_lock+0x74>)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	011b      	lsls	r3, r3, #4
 8007f4a:	4413      	add	r3, r2
 8007f4c:	330c      	adds	r3, #12
 8007f4e:	881b      	ldrh	r3, [r3, #0]
 8007f50:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007f52:	89fb      	ldrh	r3, [r7, #14]
 8007f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f58:	d101      	bne.n	8007f5e <dec_lock+0x2e>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007f5e:	89fb      	ldrh	r3, [r7, #14]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <dec_lock+0x3a>
 8007f64:	89fb      	ldrh	r3, [r7, #14]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007f6a:	4a0e      	ldr	r2, [pc, #56]	@ (8007fa4 <dec_lock+0x74>)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	4413      	add	r3, r2
 8007f72:	330c      	adds	r3, #12
 8007f74:	89fa      	ldrh	r2, [r7, #14]
 8007f76:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007f78:	89fb      	ldrh	r3, [r7, #14]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d105      	bne.n	8007f8a <dec_lock+0x5a>
 8007f7e:	4a09      	ldr	r2, [pc, #36]	@ (8007fa4 <dec_lock+0x74>)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	4413      	add	r3, r2
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	737b      	strb	r3, [r7, #13]
 8007f8e:	e001      	b.n	8007f94 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007f90:	2302      	movs	r3, #2
 8007f92:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007f94:	7b7b      	ldrb	r3, [r7, #13]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	20001014 	.word	0x20001014

08007fa8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e010      	b.n	8007fd8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8007fec <clear_lock+0x44>)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	4413      	add	r3, r2
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d105      	bne.n	8007fd2 <clear_lock+0x2a>
 8007fc6:	4a09      	ldr	r2, [pc, #36]	@ (8007fec <clear_lock+0x44>)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	4413      	add	r3, r2
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0eb      	beq.n	8007fb6 <clear_lock+0xe>
	}
}
 8007fde:	bf00      	nop
 8007fe0:	bf00      	nop
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	20001014 	.word	0x20001014

08007ff0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	78db      	ldrb	r3, [r3, #3]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d034      	beq.n	800806e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008008:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	7858      	ldrb	r0, [r3, #1]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008014:	2301      	movs	r3, #1
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	f7ff fbb4 	bl	8007784 <disk_write>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008022:	2301      	movs	r3, #1
 8008024:	73fb      	strb	r3, [r7, #15]
 8008026:	e022      	b.n	800806e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	1ad2      	subs	r2, r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	429a      	cmp	r2, r3
 800803c:	d217      	bcs.n	800806e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	789b      	ldrb	r3, [r3, #2]
 8008042:	613b      	str	r3, [r7, #16]
 8008044:	e010      	b.n	8008068 <sync_window+0x78>
					wsect += fs->fsize;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4413      	add	r3, r2
 800804e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7858      	ldrb	r0, [r3, #1]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800805a:	2301      	movs	r3, #1
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	f7ff fb91 	bl	8007784 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	3b01      	subs	r3, #1
 8008066:	613b      	str	r3, [r7, #16]
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d8eb      	bhi.n	8008046 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d01b      	beq.n	80080c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff ffad 	bl	8007ff0 <sync_window>
 8008096:	4603      	mov	r3, r0
 8008098:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d113      	bne.n	80080c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	7858      	ldrb	r0, [r3, #1]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80080aa:	2301      	movs	r3, #1
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	f7ff fb3a 	bl	8007726 <disk_read>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d004      	beq.n	80080c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80080b8:	f04f 33ff 	mov.w	r3, #4294967295
 80080bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80080be:	2301      	movs	r3, #1
 80080c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
	...

080080d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff ff87 	bl	8007ff0 <sync_window>
 80080e2:	4603      	mov	r3, r0
 80080e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d158      	bne.n	800819e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	d148      	bne.n	8008186 <sync_fs+0xb2>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	791b      	ldrb	r3, [r3, #4]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d144      	bne.n	8008186 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3338      	adds	r3, #56	@ 0x38
 8008100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008104:	2100      	movs	r1, #0
 8008106:	4618      	mov	r0, r3
 8008108:	f7ff fda8 	bl	8007c5c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3338      	adds	r3, #56	@ 0x38
 8008110:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008114:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008118:	4618      	mov	r0, r3
 800811a:	f7ff fcaf 	bl	8007a7c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3338      	adds	r3, #56	@ 0x38
 8008122:	4921      	ldr	r1, [pc, #132]	@ (80081a8 <sync_fs+0xd4>)
 8008124:	4618      	mov	r0, r3
 8008126:	f7ff fcc4 	bl	8007ab2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	3338      	adds	r3, #56	@ 0x38
 800812e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008132:	491e      	ldr	r1, [pc, #120]	@ (80081ac <sync_fs+0xd8>)
 8008134:	4618      	mov	r0, r3
 8008136:	f7ff fcbc 	bl	8007ab2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3338      	adds	r3, #56	@ 0x38
 800813e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	4619      	mov	r1, r3
 8008148:	4610      	mov	r0, r2
 800814a:	f7ff fcb2 	bl	8007ab2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3338      	adds	r3, #56	@ 0x38
 8008152:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	4619      	mov	r1, r3
 800815c:	4610      	mov	r0, r2
 800815e:	f7ff fca8 	bl	8007ab2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	7858      	ldrb	r0, [r3, #1]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800817a:	2301      	movs	r3, #1
 800817c:	f7ff fb02 	bl	8007784 <disk_write>
			fs->fsi_flag = 0;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	785b      	ldrb	r3, [r3, #1]
 800818a:	2200      	movs	r2, #0
 800818c:	2100      	movs	r1, #0
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff fb28 	bl	80077e4 <disk_ioctl>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <sync_fs+0xca>
 800819a:	2301      	movs	r3, #1
 800819c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800819e:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	41615252 	.word	0x41615252
 80081ac:	61417272 	.word	0x61417272

080081b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	3b02      	subs	r3, #2
 80081be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	3b02      	subs	r3, #2
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d301      	bcc.n	80081d0 <clust2sect+0x20>
 80081cc:	2300      	movs	r3, #0
 80081ce:	e008      	b.n	80081e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	895b      	ldrh	r3, [r3, #10]
 80081d4:	461a      	mov	r2, r3
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	fb03 f202 	mul.w	r2, r3, r2
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e0:	4413      	add	r3, r2
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
	...

080081f0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	6809      	ldr	r1, [r1, #0]
 80081fe:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	2901      	cmp	r1, #1
 8008204:	d904      	bls.n	8008210 <get_fat+0x20>
 8008206:	69b9      	ldr	r1, [r7, #24]
 8008208:	69c9      	ldr	r1, [r1, #28]
 800820a:	6838      	ldr	r0, [r7, #0]
 800820c:	4288      	cmp	r0, r1
 800820e:	d302      	bcc.n	8008216 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008210:	2301      	movs	r3, #1
 8008212:	61fb      	str	r3, [r7, #28]
 8008214:	e100      	b.n	8008418 <get_fat+0x228>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008216:	f04f 31ff 	mov.w	r1, #4294967295
 800821a:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800821c:	69b9      	ldr	r1, [r7, #24]
 800821e:	7809      	ldrb	r1, [r1, #0]
 8008220:	3901      	subs	r1, #1
 8008222:	2903      	cmp	r1, #3
 8008224:	f200 80ec 	bhi.w	8008400 <get_fat+0x210>
 8008228:	a001      	add	r0, pc, #4	@ (adr r0, 8008230 <get_fat+0x40>)
 800822a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800822e:	bf00      	nop
 8008230:	08008241 	.word	0x08008241
 8008234:	080082c7 	.word	0x080082c7
 8008238:	080082fd 	.word	0x080082fd
 800823c:	08008335 	.word	0x08008335
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	085b      	lsrs	r3, r3, #1
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	4413      	add	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	0a5b      	lsrs	r3, r3, #9
 8008256:	4413      	add	r3, r2
 8008258:	4619      	mov	r1, r3
 800825a:	69b8      	ldr	r0, [r7, #24]
 800825c:	f7ff ff0c 	bl	8008078 <move_window>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	f040 80cf 	bne.w	8008406 <get_fat+0x216>
			wc = fs->win[bc++ % SS(fs)];
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	60fa      	str	r2, [r7, #12]
 800826e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	4413      	add	r3, r2
 8008276:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800827a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	0a5b      	lsrs	r3, r3, #9
 8008284:	4413      	add	r3, r2
 8008286:	4619      	mov	r1, r3
 8008288:	69b8      	ldr	r0, [r7, #24]
 800828a:	f7ff fef5 	bl	8008078 <move_window>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	f040 80ba 	bne.w	800840a <get_fat+0x21a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	4413      	add	r3, r2
 80082a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80082a4:	021b      	lsls	r3, r3, #8
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <get_fat+0xcc>
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	091b      	lsrs	r3, r3, #4
 80082ba:	e002      	b.n	80082c2 <get_fat+0xd2>
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082c2:	61fb      	str	r3, [r7, #28]
			break;
 80082c4:	e0a8      	b.n	8008418 <get_fat+0x228>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	0a1b      	lsrs	r3, r3, #8
 80082ce:	4413      	add	r3, r2
 80082d0:	4619      	mov	r1, r3
 80082d2:	69b8      	ldr	r0, [r7, #24]
 80082d4:	f7ff fed0 	bl	8008078 <move_window>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f040 8097 	bne.w	800840e <get_fat+0x21e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	005b      	lsls	r3, r3, #1
 80082ea:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80082ee:	4413      	add	r3, r2
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7ff faad 	bl	8007850 <ld_word>
 80082f6:	4603      	mov	r3, r0
 80082f8:	61fb      	str	r3, [r7, #28]
			break;
 80082fa:	e08d      	b.n	8008418 <get_fat+0x228>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	09db      	lsrs	r3, r3, #7
 8008304:	4413      	add	r3, r2
 8008306:	4619      	mov	r1, r3
 8008308:	69b8      	ldr	r0, [r7, #24]
 800830a:	f7ff feb5 	bl	8008078 <move_window>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d17e      	bne.n	8008412 <get_fat+0x222>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008322:	4413      	add	r3, r2
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff faab 	bl	8007880 <ld_dword>
 800832a:	4603      	mov	r3, r0
 800832c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008330:	61fb      	str	r3, [r7, #28]
			break;
 8008332:	e071      	b.n	8008418 <get_fat+0x228>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800833a:	4301      	orrs	r1, r0
 800833c:	d060      	beq.n	8008400 <get_fat+0x210>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	6889      	ldr	r1, [r1, #8]
 8008342:	6838      	ldr	r0, [r7, #0]
 8008344:	1a41      	subs	r1, r0, r1
 8008346:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8008348:	6879      	ldr	r1, [r7, #4]
 800834a:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800834e:	1e42      	subs	r2, r0, #1
 8008350:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008354:	f04f 0000 	mov.w	r0, #0
 8008358:	f04f 0100 	mov.w	r1, #0
 800835c:	0a50      	lsrs	r0, r2, #9
 800835e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8008362:	0a59      	lsrs	r1, r3, #9
 8008364:	4602      	mov	r2, r0
 8008366:	69bb      	ldr	r3, [r7, #24]
 8008368:	895b      	ldrh	r3, [r3, #10]
 800836a:	fbb2 f3f3 	udiv	r3, r2, r3
 800836e:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	79db      	ldrb	r3, [r3, #7]
 8008374:	2b02      	cmp	r3, #2
 8008376:	d10e      	bne.n	8008396 <get_fat+0x1a6>
					if (cofs <= clen) {
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	429a      	cmp	r2, r3
 800837e:	d80a      	bhi.n	8008396 <get_fat+0x1a6>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	429a      	cmp	r2, r3
 8008386:	d002      	beq.n	800838e <get_fat+0x19e>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	3301      	adds	r3, #1
 800838c:	e001      	b.n	8008392 <get_fat+0x1a2>
 800838e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008392:	61fb      	str	r3, [r7, #28]
						break;
 8008394:	e040      	b.n	8008418 <get_fat+0x228>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	79db      	ldrb	r3, [r3, #7]
 800839a:	2b03      	cmp	r3, #3
 800839c:	d108      	bne.n	80083b0 <get_fat+0x1c0>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d203      	bcs.n	80083b0 <get_fat+0x1c0>
					val = clst + 1; 	/* Generate the value */
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	3301      	adds	r3, #1
 80083ac:	61fb      	str	r3, [r7, #28]
					break;
 80083ae:	e033      	b.n	8008418 <get_fat+0x228>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	79db      	ldrb	r3, [r3, #7]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d023      	beq.n	8008400 <get_fat+0x210>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <get_fat+0x1d8>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80083c0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80083c4:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80083c6:	e027      	b.n	8008418 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	09db      	lsrs	r3, r3, #7
 80083d0:	4413      	add	r3, r2
 80083d2:	4619      	mov	r1, r3
 80083d4:	69b8      	ldr	r0, [r7, #24]
 80083d6:	f7ff fe4f 	bl	8008078 <move_window>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d11a      	bne.n	8008416 <get_fat+0x226>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80083ee:	4413      	add	r3, r2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7ff fa45 	bl	8007880 <ld_dword>
 80083f6:	4603      	mov	r3, r0
 80083f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083fc:	61fb      	str	r3, [r7, #28]
					break;
 80083fe:	e00b      	b.n	8008418 <get_fat+0x228>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008400:	2301      	movs	r3, #1
 8008402:	61fb      	str	r3, [r7, #28]
 8008404:	e008      	b.n	8008418 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008406:	bf00      	nop
 8008408:	e006      	b.n	8008418 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800840a:	bf00      	nop
 800840c:	e004      	b.n	8008418 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800840e:	bf00      	nop
 8008410:	e002      	b.n	8008418 <get_fat+0x228>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008412:	bf00      	nop
 8008414:	e000      	b.n	8008418 <get_fat+0x228>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008416:	bf00      	nop
		}
	}

	return val;
 8008418:	69fb      	ldr	r3, [r7, #28]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3720      	adds	r7, #32
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop

08008424 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008424:	b590      	push	{r4, r7, lr}
 8008426:	b089      	sub	sp, #36	@ 0x24
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008430:	2302      	movs	r3, #2
 8008432:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b01      	cmp	r3, #1
 8008438:	f240 80dd 	bls.w	80085f6 <put_fat+0x1d2>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	429a      	cmp	r2, r3
 8008444:	f080 80d7 	bcs.w	80085f6 <put_fat+0x1d2>
		switch (fs->fs_type) {
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	2b04      	cmp	r3, #4
 800844e:	f300 80d2 	bgt.w	80085f6 <put_fat+0x1d2>
 8008452:	2b03      	cmp	r3, #3
 8008454:	f280 8093 	bge.w	800857e <put_fat+0x15a>
 8008458:	2b01      	cmp	r3, #1
 800845a:	d002      	beq.n	8008462 <put_fat+0x3e>
 800845c:	2b02      	cmp	r3, #2
 800845e:	d06e      	beq.n	800853e <put_fat+0x11a>
 8008460:	e0c9      	b.n	80085f6 <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	61bb      	str	r3, [r7, #24]
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	085b      	lsrs	r3, r3, #1
 800846a:	69ba      	ldr	r2, [r7, #24]
 800846c:	4413      	add	r3, r2
 800846e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	0a5b      	lsrs	r3, r3, #9
 8008478:	4413      	add	r3, r2
 800847a:	4619      	mov	r1, r3
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f7ff fdfb 	bl	8008078 <move_window>
 8008482:	4603      	mov	r3, r0
 8008484:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008486:	7ffb      	ldrb	r3, [r7, #31]
 8008488:	2b00      	cmp	r3, #0
 800848a:	f040 80ad 	bne.w	80085e8 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	1c59      	adds	r1, r3, #1
 8008498:	61b9      	str	r1, [r7, #24]
 800849a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849e:	4413      	add	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00d      	beq.n	80084c8 <put_fat+0xa4>
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	b25b      	sxtb	r3, r3
 80084b2:	f003 030f 	and.w	r3, r3, #15
 80084b6:	b25a      	sxtb	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	011b      	lsls	r3, r3, #4
 80084be:	b25b      	sxtb	r3, r3
 80084c0:	4313      	orrs	r3, r2
 80084c2:	b25b      	sxtb	r3, r3
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	e001      	b.n	80084cc <put_fat+0xa8>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	0a5b      	lsrs	r3, r3, #9
 80084de:	4413      	add	r3, r2
 80084e0:	4619      	mov	r1, r3
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f7ff fdc8 	bl	8008078 <move_window>
 80084e8:	4603      	mov	r3, r0
 80084ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084ec:	7ffb      	ldrb	r3, [r7, #31]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d17c      	bne.n	80085ec <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fe:	4413      	add	r3, r2
 8008500:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d003      	beq.n	8008514 <put_fat+0xf0>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	091b      	lsrs	r3, r3, #4
 8008510:	b2db      	uxtb	r3, r3
 8008512:	e00e      	b.n	8008532 <put_fat+0x10e>
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	b25b      	sxtb	r3, r3
 800851a:	f023 030f 	bic.w	r3, r3, #15
 800851e:	b25a      	sxtb	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	0a1b      	lsrs	r3, r3, #8
 8008524:	b25b      	sxtb	r3, r3
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	b25b      	sxtb	r3, r3
 800852c:	4313      	orrs	r3, r2
 800852e:	b25b      	sxtb	r3, r3
 8008530:	b2db      	uxtb	r3, r3
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2201      	movs	r2, #1
 800853a:	70da      	strb	r2, [r3, #3]
			break;
 800853c:	e05b      	b.n	80085f6 <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	0a1b      	lsrs	r3, r3, #8
 8008546:	4413      	add	r3, r2
 8008548:	4619      	mov	r1, r3
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f7ff fd94 	bl	8008078 <move_window>
 8008550:	4603      	mov	r3, r0
 8008552:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008554:	7ffb      	ldrb	r3, [r7, #31]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d14a      	bne.n	80085f0 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008568:	4413      	add	r3, r2
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	b292      	uxth	r2, r2
 800856e:	4611      	mov	r1, r2
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff fa83 	bl	8007a7c <st_word>
			fs->wflag = 1;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2201      	movs	r2, #1
 800857a:	70da      	strb	r2, [r3, #3]
			break;
 800857c:	e03b      	b.n	80085f6 <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	09db      	lsrs	r3, r3, #7
 8008586:	4413      	add	r3, r2
 8008588:	4619      	mov	r1, r3
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7ff fd74 	bl	8008078 <move_window>
 8008590:	4603      	mov	r3, r0
 8008592:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008594:	7ffb      	ldrb	r3, [r7, #31]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d12c      	bne.n	80085f4 <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d012      	beq.n	80085c8 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80085b6:	4413      	add	r3, r2
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7ff f961 	bl	8007880 <ld_dword>
 80085be:	4603      	mov	r3, r0
 80085c0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80085c4:	4323      	orrs	r3, r4
 80085c6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80085d6:	4413      	add	r3, r2
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff fa69 	bl	8007ab2 <st_dword>
			fs->wflag = 1;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2201      	movs	r2, #1
 80085e4:	70da      	strb	r2, [r3, #3]
			break;
 80085e6:	e006      	b.n	80085f6 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80085e8:	bf00      	nop
 80085ea:	e004      	b.n	80085f6 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80085ec:	bf00      	nop
 80085ee:	e002      	b.n	80085f6 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80085f0:	bf00      	nop
 80085f2:	e000      	b.n	80085f6 <put_fat+0x1d2>
			if (res != FR_OK) break;
 80085f4:	bf00      	nop
		}
	}
	return res;
 80085f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3724      	adds	r7, #36	@ 0x24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd90      	pop	{r4, r7, pc}

08008600 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08a      	sub	sp, #40	@ 0x28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	3b02      	subs	r3, #2
 8008610:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	3b02      	subs	r3, #2
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	429a      	cmp	r2, r3
 800861c:	d301      	bcc.n	8008622 <find_bitmap+0x22>
 800861e:	2300      	movs	r3, #0
 8008620:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	61fb      	str	r3, [r7, #28]
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	61bb      	str	r3, [r7, #24]
 800862a:	2300      	movs	r3, #0
 800862c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	0b1b      	lsrs	r3, r3, #12
 8008636:	4413      	add	r3, r2
 8008638:	4619      	mov	r1, r3
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7ff fd1c 	bl	8008078 <move_window>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d002      	beq.n	800864c <find_bitmap+0x4c>
 8008646:	f04f 33ff 	mov.w	r3, #4294967295
 800864a:	e051      	b.n	80086f0 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	08db      	lsrs	r3, r3, #3
 8008650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008654:	623b      	str	r3, [r7, #32]
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	2201      	movs	r2, #1
 800865e:	fa02 f303 	lsl.w	r3, r2, r3
 8008662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	4413      	add	r3, r2
 800866c:	3338      	adds	r3, #56	@ 0x38
 800866e:	781a      	ldrb	r2, [r3, #0]
 8008670:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008674:	4013      	ands	r3, r2
 8008676:	74fb      	strb	r3, [r7, #19]
 8008678:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800867c:	005b      	lsls	r3, r3, #1
 800867e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	3301      	adds	r3, #1
 8008686:	61fb      	str	r3, [r7, #28]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	3b02      	subs	r3, #2
 800868e:	69fa      	ldr	r2, [r7, #28]
 8008690:	429a      	cmp	r2, r3
 8008692:	d307      	bcc.n	80086a4 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8008694:	2300      	movs	r3, #0
 8008696:	61fb      	str	r3, [r7, #28]
 8008698:	2300      	movs	r3, #0
 800869a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800869e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086a2:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 80086a4:	7cfb      	ldrb	r3, [r7, #19]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d109      	bne.n	80086be <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	3301      	adds	r3, #1
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d106      	bne.n	80086c6 <find_bitmap+0xc6>
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	3302      	adds	r3, #2
 80086bc:	e018      	b.n	80086f0 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	61bb      	str	r3, [r7, #24]
 80086c2:	2300      	movs	r3, #0
 80086c4:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 80086c6:	69fa      	ldr	r2, [r7, #28]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d101      	bne.n	80086d2 <find_bitmap+0xd2>
 80086ce:	2300      	movs	r3, #0
 80086d0:	e00e      	b.n	80086f0 <find_bitmap+0xf0>
			} while (bm);
 80086d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1c5      	bne.n	8008666 <find_bitmap+0x66>
			bm = 1;
 80086da:	2301      	movs	r3, #1
 80086dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	3301      	adds	r3, #1
 80086e4:	623b      	str	r3, [r7, #32]
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086ec:	d3bb      	bcc.n	8008666 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80086ee:	e79e      	b.n	800862e <find_bitmap+0x2e>
	}
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3728      	adds	r7, #40	@ 0x28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	3b02      	subs	r3, #2
 800870a:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	0b1b      	lsrs	r3, r3, #12
 8008714:	4413      	add	r3, r2
 8008716:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	08db      	lsrs	r3, r3, #3
 800871c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008720:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f003 0307 	and.w	r3, r3, #7
 8008728:	2201      	movs	r2, #1
 800872a:	fa02 f303 	lsl.w	r3, r2, r3
 800872e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	617a      	str	r2, [r7, #20]
 8008736:	4619      	mov	r1, r3
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7ff fc9d 	bl	8008078 <move_window>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <change_bitmap+0x50>
 8008744:	2301      	movs	r3, #1
 8008746:	e03d      	b.n	80087c4 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	4413      	add	r3, r2
 800874e:	3338      	adds	r3, #56	@ 0x38
 8008750:	781a      	ldrb	r2, [r3, #0]
 8008752:	7ffb      	ldrb	r3, [r7, #31]
 8008754:	4013      	ands	r3, r2
 8008756:	b2db      	uxtb	r3, r3
 8008758:	2b00      	cmp	r3, #0
 800875a:	bf14      	ite	ne
 800875c:	2301      	movne	r3, #1
 800875e:	2300      	moveq	r3, #0
 8008760:	b2db      	uxtb	r3, r3
 8008762:	461a      	mov	r2, r3
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	4293      	cmp	r3, r2
 8008768:	d101      	bne.n	800876e <change_bitmap+0x76>
 800876a:	2302      	movs	r3, #2
 800876c:	e02a      	b.n	80087c4 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	4413      	add	r3, r2
 8008774:	3338      	adds	r3, #56	@ 0x38
 8008776:	781a      	ldrb	r2, [r3, #0]
 8008778:	7ffb      	ldrb	r3, [r7, #31]
 800877a:	4053      	eors	r3, r2
 800877c:	b2d9      	uxtb	r1, r3
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	4413      	add	r3, r2
 8008784:	3338      	adds	r3, #56	@ 0x38
 8008786:	460a      	mov	r2, r1
 8008788:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2201      	movs	r2, #1
 800878e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3b01      	subs	r3, #1
 8008794:	607b      	str	r3, [r7, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <change_bitmap+0xa8>
 800879c:	2300      	movs	r3, #0
 800879e:	e011      	b.n	80087c4 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 80087a0:	7ffb      	ldrb	r3, [r7, #31]
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	77fb      	strb	r3, [r7, #31]
 80087a6:	7ffb      	ldrb	r3, [r7, #31]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1cd      	bne.n	8008748 <change_bitmap+0x50>
			bm = 1;
 80087ac:	2301      	movs	r3, #1
 80087ae:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 80087b0:	69bb      	ldr	r3, [r7, #24]
 80087b2:	3301      	adds	r3, #1
 80087b4:	61bb      	str	r3, [r7, #24]
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087bc:	d3c4      	bcc.n	8008748 <change_bitmap+0x50>
		i = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80087c2:	e7b5      	b.n	8008730 <change_bitmap+0x38>
	}
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	79db      	ldrb	r3, [r3, #7]
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d121      	bne.n	8008820 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	e014      	b.n	8008814 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6818      	ldr	r0, [r3, #0]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	3301      	adds	r3, #1
 80087f2:	461a      	mov	r2, r3
 80087f4:	6979      	ldr	r1, [r7, #20]
 80087f6:	f7ff fe15 	bl	8008424 <put_fat>
 80087fa:	4603      	mov	r3, r0
 80087fc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <fill_first_frag+0x3c>
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	e00c      	b.n	8008822 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	3301      	adds	r3, #1
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	3b01      	subs	r3, #1
 8008812:	613b      	str	r3, [r7, #16]
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1e7      	bne.n	80087ea <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b086      	sub	sp, #24
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8008836:	e020      	b.n	800887a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	1c59      	adds	r1, r3, #1
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	69db      	ldr	r3, [r3, #28]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d905      	bls.n	800885a <fill_last_frag+0x30>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	3302      	adds	r3, #2
 8008858:	e000      	b.n	800885c <fill_last_frag+0x32>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	461a      	mov	r2, r3
 800885e:	f7ff fde1 	bl	8008424 <put_fat>
 8008862:	4603      	mov	r3, r0
 8008864:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <fill_last_frag+0x46>
 800886c:	7dfb      	ldrb	r3, [r7, #23]
 800886e:	e009      	b.n	8008884 <fill_last_frag+0x5a>
		obj->n_frag--;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	1e5a      	subs	r2, r3, #1
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1da      	bne.n	8008838 <fill_last_frag+0xe>
	}
	return FR_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3718      	adds	r7, #24
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b08a      	sub	sp, #40	@ 0x28
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d904      	bls.n	80088ba <remove_chain+0x2e>
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d301      	bcc.n	80088be <remove_chain+0x32>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e096      	b.n	80089ec <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d014      	beq.n	80088ee <remove_chain+0x62>
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b04      	cmp	r3, #4
 80088ca:	d103      	bne.n	80088d4 <remove_chain+0x48>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	79db      	ldrb	r3, [r3, #7]
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d00c      	beq.n	80088ee <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80088d4:	f04f 32ff 	mov.w	r2, #4294967295
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	69b8      	ldr	r0, [r7, #24]
 80088dc:	f7ff fda2 	bl	8008424 <put_fat>
 80088e0:	4603      	mov	r3, r0
 80088e2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80088e4:	7ffb      	ldrb	r3, [r7, #31]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <remove_chain+0x62>
 80088ea:	7ffb      	ldrb	r3, [r7, #31]
 80088ec:	e07e      	b.n	80089ec <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f7ff fc7d 	bl	80081f0 <get_fat>
 80088f6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d055      	beq.n	80089aa <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d101      	bne.n	8008908 <remove_chain+0x7c>
 8008904:	2302      	movs	r3, #2
 8008906:	e071      	b.n	80089ec <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890e:	d101      	bne.n	8008914 <remove_chain+0x88>
 8008910:	2301      	movs	r3, #1
 8008912:	e06b      	b.n	80089ec <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b04      	cmp	r3, #4
 800891a:	d00b      	beq.n	8008934 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800891c:	2200      	movs	r2, #0
 800891e:	68b9      	ldr	r1, [r7, #8]
 8008920:	69b8      	ldr	r0, [r7, #24]
 8008922:	f7ff fd7f 	bl	8008424 <put_fat>
 8008926:	4603      	mov	r3, r0
 8008928:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800892a:	7ffb      	ldrb	r3, [r7, #31]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <remove_chain+0xa8>
 8008930:	7ffb      	ldrb	r3, [r7, #31]
 8008932:	e05b      	b.n	80089ec <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	699a      	ldr	r2, [r3, #24]
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	3b02      	subs	r3, #2
 800893e:	429a      	cmp	r2, r3
 8008940:	d20b      	bcs.n	800895a <remove_chain+0xce>
			fs->free_clst++;
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	791b      	ldrb	r3, [r3, #4]
 8008950:	f043 0301 	orr.w	r3, r3, #1
 8008954:	b2da      	uxtb	r2, r3
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	3301      	adds	r3, #1
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	429a      	cmp	r2, r3
 8008962:	d102      	bne.n	800896a <remove_chain+0xde>
			ecl = nxt;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	623b      	str	r3, [r7, #32]
 8008968:	e017      	b.n	800899a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	2b04      	cmp	r3, #4
 8008970:	d10f      	bne.n	8008992 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8008972:	6a3a      	ldr	r2, [r7, #32]
 8008974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	1c5a      	adds	r2, r3, #1
 800897a:	2300      	movs	r3, #0
 800897c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800897e:	69b8      	ldr	r0, [r7, #24]
 8008980:	f7ff feba 	bl	80086f8 <change_bitmap>
 8008984:	4603      	mov	r3, r0
 8008986:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8008988:	7ffb      	ldrb	r3, [r7, #31]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <remove_chain+0x106>
 800898e:	7ffb      	ldrb	r3, [r7, #31]
 8008990:	e02c      	b.n	80089ec <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	623b      	str	r3, [r7, #32]
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d3a2      	bcc.n	80088ee <remove_chain+0x62>
 80089a8:	e000      	b.n	80089ac <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80089aa:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	2b04      	cmp	r3, #4
 80089b2:	d11a      	bne.n	80089ea <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d103      	bne.n	80089c2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	71da      	strb	r2, [r3, #7]
 80089c0:	e013      	b.n	80089ea <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	79db      	ldrb	r3, [r3, #7]
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d10f      	bne.n	80089ea <remove_chain+0x15e>
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d30a      	bcc.n	80089ea <remove_chain+0x15e>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	4413      	add	r3, r2
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d802      	bhi.n	80089ea <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2202      	movs	r2, #2
 80089e8:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3728      	adds	r7, #40	@ 0x28
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10d      	bne.n	8008a26 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d004      	beq.n	8008a20 <create_chain+0x2c>
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	69db      	ldr	r3, [r3, #28]
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d31b      	bcc.n	8008a58 <create_chain+0x64>
 8008a20:	2301      	movs	r3, #1
 8008a22:	61bb      	str	r3, [r7, #24]
 8008a24:	e018      	b.n	8008a58 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008a26:	6839      	ldr	r1, [r7, #0]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff fbe1 	bl	80081f0 <get_fat>
 8008a2e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d801      	bhi.n	8008a3a <create_chain+0x46>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e0d9      	b.n	8008bee <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a40:	d101      	bne.n	8008a46 <create_chain+0x52>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	e0d3      	b.n	8008bee <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d201      	bcs.n	8008a54 <create_chain+0x60>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	e0cc      	b.n	8008bee <create_chain+0x1fa>
		scl = clst;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d164      	bne.n	8008b2a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8008a60:	2201      	movs	r2, #1
 8008a62:	69b9      	ldr	r1, [r7, #24]
 8008a64:	6938      	ldr	r0, [r7, #16]
 8008a66:	f7ff fdcb 	bl	8008600 <find_bitmap>
 8008a6a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <create_chain+0x86>
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a78:	d101      	bne.n	8008a7e <create_chain+0x8a>
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	e0b7      	b.n	8008bee <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8008a7e:	2301      	movs	r3, #1
 8008a80:	2201      	movs	r2, #1
 8008a82:	69f9      	ldr	r1, [r7, #28]
 8008a84:	6938      	ldr	r0, [r7, #16]
 8008a86:	f7ff fe37 	bl	80086f8 <change_bitmap>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8008a8e:	7dfb      	ldrb	r3, [r7, #23]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d101      	bne.n	8008a98 <create_chain+0xa4>
 8008a94:	2301      	movs	r3, #1
 8008a96:	e0aa      	b.n	8008bee <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d102      	bne.n	8008aa4 <create_chain+0xb0>
 8008a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa2:	e0a4      	b.n	8008bee <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d103      	bne.n	8008ab2 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2202      	movs	r2, #2
 8008aae:	71da      	strb	r2, [r3, #7]
 8008ab0:	e011      	b.n	8008ad6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	79db      	ldrb	r3, [r3, #7]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d10d      	bne.n	8008ad6 <create_chain+0xe2>
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	3301      	adds	r3, #1
 8008abe:	69fa      	ldr	r2, [r7, #28]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d008      	beq.n	8008ad6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	1ad2      	subs	r2, r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2203      	movs	r2, #3
 8008ad4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	79db      	ldrb	r3, [r3, #7]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d064      	beq.n	8008ba8 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	69fa      	ldr	r2, [r7, #28]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d10b      	bne.n	8008b00 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	69db      	ldr	r3, [r3, #28]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d003      	beq.n	8008af8 <create_chain+0x104>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	3301      	adds	r3, #1
 8008af6:	e000      	b.n	8008afa <create_chain+0x106>
 8008af8:	2302      	movs	r3, #2
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	61d3      	str	r3, [r2, #28]
 8008afe:	e053      	b.n	8008ba8 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	69db      	ldr	r3, [r3, #28]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d102      	bne.n	8008b0e <create_chain+0x11a>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8008b0e:	69fa      	ldr	r2, [r7, #28]
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7ff fe89 	bl	800882a <fill_last_frag>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d142      	bne.n	8008ba8 <create_chain+0x1b4>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	61da      	str	r2, [r3, #28]
 8008b28:	e03e      	b.n	8008ba8 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	3301      	adds	r3, #1
 8008b32:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	69db      	ldr	r3, [r3, #28]
 8008b38:	69fa      	ldr	r2, [r7, #28]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d307      	bcc.n	8008b4e <create_chain+0x15a>
				ncl = 2;
 8008b3e:	2302      	movs	r3, #2
 8008b40:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008b42:	69fa      	ldr	r2, [r7, #28]
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d901      	bls.n	8008b4e <create_chain+0x15a>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	e04f      	b.n	8008bee <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008b4e:	69f9      	ldr	r1, [r7, #28]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff fb4d 	bl	80081f0 <get_fat>
 8008b56:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00e      	beq.n	8008b7c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d003      	beq.n	8008b6c <create_chain+0x178>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6a:	d101      	bne.n	8008b70 <create_chain+0x17c>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	e03e      	b.n	8008bee <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8008b70:	69fa      	ldr	r2, [r7, #28]
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d1da      	bne.n	8008b2e <create_chain+0x13a>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e038      	b.n	8008bee <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8008b7c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b82:	69f9      	ldr	r1, [r7, #28]
 8008b84:	6938      	ldr	r0, [r7, #16]
 8008b86:	f7ff fc4d 	bl	8008424 <put_fat>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d109      	bne.n	8008ba8 <create_chain+0x1b4>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d006      	beq.n	8008ba8 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008b9a:	69fa      	ldr	r2, [r7, #28]
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6938      	ldr	r0, [r7, #16]
 8008ba0:	f7ff fc40 	bl	8008424 <put_fat>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008ba8:	7dfb      	ldrb	r3, [r7, #23]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d116      	bne.n	8008bdc <create_chain+0x1e8>
		fs->last_clst = ncl;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	69fa      	ldr	r2, [r7, #28]
 8008bb2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	699a      	ldr	r2, [r3, #24]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	3b02      	subs	r3, #2
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d804      	bhi.n	8008bcc <create_chain+0x1d8>
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	1e5a      	subs	r2, r3, #1
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	791b      	ldrb	r3, [r3, #4]
 8008bd0:	f043 0301 	orr.w	r3, r3, #1
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	711a      	strb	r2, [r3, #4]
 8008bda:	e007      	b.n	8008bec <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d102      	bne.n	8008be8 <create_chain+0x1f4>
 8008be2:	f04f 33ff 	mov.w	r3, #4294967295
 8008be6:	e000      	b.n	8008bea <create_chain+0x1f6>
 8008be8:	2301      	movs	r3, #1
 8008bea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008bec:	69fb      	ldr	r3, [r7, #28]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3720      	adds	r7, #32
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008bf6:	b5b0      	push	{r4, r5, r7, lr}
 8008bf8:	b088      	sub	sp, #32
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c14:	f04f 0000 	mov.w	r0, #0
 8008c18:	f04f 0100 	mov.w	r1, #0
 8008c1c:	0a50      	lsrs	r0, r2, #9
 8008c1e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8008c22:	0a59      	lsrs	r1, r3, #9
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	895b      	ldrh	r3, [r3, #10]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	461c      	mov	r4, r3
 8008c2e:	4615      	mov	r5, r2
 8008c30:	4622      	mov	r2, r4
 8008c32:	462b      	mov	r3, r5
 8008c34:	f7f8 f848 	bl	8000cc8 <__aeabi_uldivmod>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	1d1a      	adds	r2, r3, #4
 8008c44:	61ba      	str	r2, [r7, #24]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <clmt_clust+0x5e>
 8008c50:	2300      	movs	r3, #0
 8008c52:	e010      	b.n	8008c76 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8008c54:	69fa      	ldr	r2, [r7, #28]
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d307      	bcc.n	8008c6c <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8008c5c:	69fa      	ldr	r2, [r7, #28]
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	61fb      	str	r3, [r7, #28]
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	3304      	adds	r3, #4
 8008c68:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008c6a:	e7e9      	b.n	8008c40 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8008c6c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	4413      	add	r3, r2
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bdb0      	pop	{r4, r5, r7, pc}

08008c7e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d102      	bne.n	8008c9c <dir_sdi+0x1e>
 8008c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c9a:	e001      	b.n	8008ca0 <dir_sdi+0x22>
 8008c9c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d904      	bls.n	8008cb0 <dir_sdi+0x32>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	f003 031f 	and.w	r3, r3, #31
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <dir_sdi+0x36>
		return FR_INT_ERR;
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e066      	b.n	8008d82 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d109      	bne.n	8008cda <dir_sdi+0x5c>
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d905      	bls.n	8008cda <dir_sdi+0x5c>
		clst = fs->dirbase;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10c      	bne.n	8008cfa <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	095b      	lsrs	r3, r3, #5
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	8912      	ldrh	r2, [r2, #8]
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d301      	bcc.n	8008cf0 <dir_sdi+0x72>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e048      	b.n	8008d82 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008cf8:	e029      	b.n	8008d4e <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	895b      	ldrh	r3, [r3, #10]
 8008cfe:	025b      	lsls	r3, r3, #9
 8008d00:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d02:	e019      	b.n	8008d38 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6979      	ldr	r1, [r7, #20]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7ff fa71 	bl	80081f0 <get_fat>
 8008d0e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d101      	bne.n	8008d1c <dir_sdi+0x9e>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e032      	b.n	8008d82 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d904      	bls.n	8008d2c <dir_sdi+0xae>
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d301      	bcc.n	8008d30 <dir_sdi+0xb2>
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	e028      	b.n	8008d82 <dir_sdi+0x104>
			ofs -= csz;
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d2e1      	bcs.n	8008d04 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8008d40:	6979      	ldr	r1, [r7, #20]
 8008d42:	6938      	ldr	r0, [r7, #16]
 8008d44:	f7ff fa34 	bl	80081b0 <clust2sect>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d101      	bne.n	8008d60 <dir_sdi+0xe2>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e010      	b.n	8008d82 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	0a5b      	lsrs	r3, r3, #9
 8008d68:	441a      	add	r2, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d7a:	441a      	add	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3718      	adds	r7, #24
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b086      	sub	sp, #24
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9e:	3320      	adds	r3, #32
 8008da0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00b      	beq.n	8008dc2 <dir_next+0x38>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	2b04      	cmp	r3, #4
 8008db0:	d102      	bne.n	8008db8 <dir_next+0x2e>
 8008db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008db6:	e001      	b.n	8008dbc <dir_next+0x32>
 8008db8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d801      	bhi.n	8008dc6 <dir_next+0x3c>
 8008dc2:	2304      	movs	r3, #4
 8008dc4:	e0b2      	b.n	8008f2c <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f040 80a0 	bne.w	8008f12 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10b      	bne.n	8008dfc <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	095b      	lsrs	r3, r3, #5
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	8912      	ldrh	r2, [r2, #8]
 8008dec:	4293      	cmp	r3, r2
 8008dee:	f0c0 8090 	bcc.w	8008f12 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008df8:	2304      	movs	r3, #4
 8008dfa:	e097      	b.n	8008f2c <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	0a5b      	lsrs	r3, r3, #9
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	8952      	ldrh	r2, [r2, #10]
 8008e04:	3a01      	subs	r2, #1
 8008e06:	4013      	ands	r3, r2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f040 8082 	bne.w	8008f12 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e14:	4619      	mov	r1, r3
 8008e16:	4610      	mov	r0, r2
 8008e18:	f7ff f9ea 	bl	80081f0 <get_fat>
 8008e1c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d801      	bhi.n	8008e28 <dir_next+0x9e>
 8008e24:	2302      	movs	r3, #2
 8008e26:	e081      	b.n	8008f2c <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2e:	d101      	bne.n	8008e34 <dir_next+0xaa>
 8008e30:	2301      	movs	r3, #1
 8008e32:	e07b      	b.n	8008f2c <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	69db      	ldr	r3, [r3, #28]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d35f      	bcc.n	8008efe <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e4a:	2304      	movs	r3, #4
 8008e4c:	e06e      	b.n	8008f2c <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e54:	4619      	mov	r1, r3
 8008e56:	4610      	mov	r0, r2
 8008e58:	f7ff fdcc 	bl	80089f4 <create_chain>
 8008e5c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d101      	bne.n	8008e68 <dir_next+0xde>
 8008e64:	2307      	movs	r3, #7
 8008e66:	e061      	b.n	8008f2c <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d101      	bne.n	8008e72 <dir_next+0xe8>
 8008e6e:	2302      	movs	r3, #2
 8008e70:	e05c      	b.n	8008f2c <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e78:	d101      	bne.n	8008e7e <dir_next+0xf4>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e056      	b.n	8008f2c <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	79db      	ldrb	r3, [r3, #7]
 8008e82:	f043 0304 	orr.w	r3, r3, #4
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f7ff f8af 	bl	8007ff0 <sync_window>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <dir_next+0x112>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e047      	b.n	8008f2c <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	3338      	adds	r3, #56	@ 0x38
 8008ea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe fed8 	bl	8007c5c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008eac:	2300      	movs	r3, #0
 8008eae:	613b      	str	r3, [r7, #16]
 8008eb0:	6979      	ldr	r1, [r7, #20]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff f97c 	bl	80081b0 <clust2sect>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ebe:	e012      	b.n	8008ee6 <dir_next+0x15c>
						fs->wflag = 1;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	f7ff f892 	bl	8007ff0 <sync_window>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <dir_next+0x14c>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e02a      	b.n	8008f2c <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	613b      	str	r3, [r7, #16]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	635a      	str	r2, [r3, #52]	@ 0x34
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	895b      	ldrh	r3, [r3, #10]
 8008eea:	461a      	mov	r2, r3
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d3e6      	bcc.n	8008ec0 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	1ad2      	subs	r2, r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 8008f04:	6979      	ldr	r1, [r7, #20]
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f7ff f952 	bl	80081b0 <clust2sect>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f24:	441a      	add	r2, r3
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008f44:	2100      	movs	r1, #0
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7ff fe99 	bl	8008c7e <dir_sdi>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f50:	7dfb      	ldrb	r3, [r7, #23]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d140      	bne.n	8008fd8 <dir_alloc+0xa4>
		n = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f5e:	4619      	mov	r1, r3
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7ff f889 	bl	8008078 <move_window>
 8008f66:	4603      	mov	r3, r0
 8008f68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d132      	bne.n	8008fd6 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b04      	cmp	r3, #4
 8008f76:	d108      	bne.n	8008f8a <dir_alloc+0x56>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b25b      	sxtb	r3, r3
 8008f80:	43db      	mvns	r3, r3
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	09db      	lsrs	r3, r3, #7
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	e00f      	b.n	8008faa <dir_alloc+0x76>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2be5      	cmp	r3, #229	@ 0xe5
 8008f92:	d004      	beq.n	8008f9e <dir_alloc+0x6a>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <dir_alloc+0x6e>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e000      	b.n	8008fa4 <dir_alloc+0x70>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d007      	beq.n	8008fbe <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	613b      	str	r3, [r7, #16]
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d102      	bne.n	8008fc2 <dir_alloc+0x8e>
 8008fbc:	e00c      	b.n	8008fd8 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f7ff fee0 	bl	8008d8a <dir_next>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0c2      	beq.n	8008f5a <dir_alloc+0x26>
 8008fd4:	e000      	b.n	8008fd8 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8008fd6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	d101      	bne.n	8008fe2 <dir_alloc+0xae>
 8008fde:	2307      	movs	r3, #7
 8008fe0:	75fb      	strb	r3, [r7, #23]
	return res;
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3718      	adds	r7, #24
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	331a      	adds	r3, #26
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe fc28 	bl	8007850 <ld_word>
 8009000:	4603      	mov	r3, r0
 8009002:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b03      	cmp	r3, #3
 800900a:	d109      	bne.n	8009020 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	3314      	adds	r3, #20
 8009010:	4618      	mov	r0, r3
 8009012:	f7fe fc1d 	bl	8007850 <ld_word>
 8009016:	4603      	mov	r3, r0
 8009018:	041b      	lsls	r3, r3, #16
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	4313      	orrs	r3, r2
 800901e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009020:	68fb      	ldr	r3, [r7, #12]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	331a      	adds	r3, #26
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	b292      	uxth	r2, r2
 800903e:	4611      	mov	r1, r2
 8009040:	4618      	mov	r0, r3
 8009042:	f7fe fd1b 	bl	8007a7c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2b03      	cmp	r3, #3
 800904c:	d109      	bne.n	8009062 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f103 0214 	add.w	r2, r3, #20
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	0c1b      	lsrs	r3, r3, #16
 8009058:	b29b      	uxth	r3, r3
 800905a:	4619      	mov	r1, r3
 800905c:	4610      	mov	r0, r2
 800905e:	f7fe fd0d 	bl	8007a7c <st_word>
	}
}
 8009062:	bf00      	nop
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b087      	sub	sp, #28
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	331a      	adds	r3, #26
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe fbe8 	bl	8007850 <ld_word>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <cmp_lfn+0x1e>
 8009086:	2300      	movs	r3, #0
 8009088:	e059      	b.n	800913e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009092:	1e5a      	subs	r2, r3, #1
 8009094:	4613      	mov	r3, r2
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	4413      	add	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80090a0:	2301      	movs	r3, #1
 80090a2:	81fb      	strh	r3, [r7, #14]
 80090a4:	2300      	movs	r3, #0
 80090a6:	613b      	str	r3, [r7, #16]
 80090a8:	e033      	b.n	8009112 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80090aa:	4a27      	ldr	r2, [pc, #156]	@ (8009148 <cmp_lfn+0xdc>)
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	4413      	add	r3, r2
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	4413      	add	r3, r2
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe fbc9 	bl	8007850 <ld_word>
 80090be:	4603      	mov	r3, r0
 80090c0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80090c2:	89fb      	ldrh	r3, [r7, #14]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d01a      	beq.n	80090fe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80090cc:	d812      	bhi.n	80090f4 <cmp_lfn+0x88>
 80090ce:	89bb      	ldrh	r3, [r7, #12]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f002 fe17 	bl	800bd04 <ff_wtoupper>
 80090d6:	4603      	mov	r3, r0
 80090d8:	461c      	mov	r4, r3
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	617a      	str	r2, [r7, #20]
 80090e0:	005b      	lsls	r3, r3, #1
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	4413      	add	r3, r2
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f002 fe0b 	bl	800bd04 <ff_wtoupper>
 80090ee:	4603      	mov	r3, r0
 80090f0:	429c      	cmp	r4, r3
 80090f2:	d001      	beq.n	80090f8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80090f4:	2300      	movs	r3, #0
 80090f6:	e022      	b.n	800913e <cmp_lfn+0xd2>
			}
			wc = uc;
 80090f8:	89bb      	ldrh	r3, [r7, #12]
 80090fa:	81fb      	strh	r3, [r7, #14]
 80090fc:	e006      	b.n	800910c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80090fe:	89bb      	ldrh	r3, [r7, #12]
 8009100:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009104:	4293      	cmp	r3, r2
 8009106:	d001      	beq.n	800910c <cmp_lfn+0xa0>
 8009108:	2300      	movs	r3, #0
 800910a:	e018      	b.n	800913e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	3301      	adds	r3, #1
 8009110:	613b      	str	r3, [r7, #16]
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	2b0c      	cmp	r3, #12
 8009116:	d9c8      	bls.n	80090aa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00b      	beq.n	800913c <cmp_lfn+0xd0>
 8009124:	89fb      	ldrh	r3, [r7, #14]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d008      	beq.n	800913c <cmp_lfn+0xd0>
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	005b      	lsls	r3, r3, #1
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	4413      	add	r3, r2
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <cmp_lfn+0xd0>
 8009138:	2300      	movs	r3, #0
 800913a:	e000      	b.n	800913e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800913c:	2301      	movs	r3, #1
}
 800913e:	4618      	mov	r0, r3
 8009140:	371c      	adds	r7, #28
 8009142:	46bd      	mov	sp, r7
 8009144:	bd90      	pop	{r4, r7, pc}
 8009146:	bf00      	nop
 8009148:	080107cc 	.word	0x080107cc

0800914c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	331a      	adds	r3, #26
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fb78 	bl	8007850 <ld_word>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <pick_lfn+0x1e>
 8009166:	2300      	movs	r3, #0
 8009168:	e04d      	b.n	8009206 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009172:	1e5a      	subs	r2, r3, #1
 8009174:	4613      	mov	r3, r2
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009180:	2301      	movs	r3, #1
 8009182:	81fb      	strh	r3, [r7, #14]
 8009184:	2300      	movs	r3, #0
 8009186:	613b      	str	r3, [r7, #16]
 8009188:	e028      	b.n	80091dc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800918a:	4a21      	ldr	r2, [pc, #132]	@ (8009210 <pick_lfn+0xc4>)
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	4413      	add	r3, r2
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	461a      	mov	r2, r3
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	4413      	add	r3, r2
 8009198:	4618      	mov	r0, r3
 800919a:	f7fe fb59 	bl	8007850 <ld_word>
 800919e:	4603      	mov	r3, r0
 80091a0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80091a2:	89fb      	ldrh	r3, [r7, #14]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00f      	beq.n	80091c8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80091ac:	d901      	bls.n	80091b2 <pick_lfn+0x66>
 80091ae:	2300      	movs	r3, #0
 80091b0:	e029      	b.n	8009206 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80091b2:	89bb      	ldrh	r3, [r7, #12]
 80091b4:	81fb      	strh	r3, [r7, #14]
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	1c5a      	adds	r2, r3, #1
 80091ba:	617a      	str	r2, [r7, #20]
 80091bc:	005b      	lsls	r3, r3, #1
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	4413      	add	r3, r2
 80091c2:	89fa      	ldrh	r2, [r7, #14]
 80091c4:	801a      	strh	r2, [r3, #0]
 80091c6:	e006      	b.n	80091d6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80091c8:	89bb      	ldrh	r3, [r7, #12]
 80091ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d001      	beq.n	80091d6 <pick_lfn+0x8a>
 80091d2:	2300      	movs	r3, #0
 80091d4:	e017      	b.n	8009206 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	3301      	adds	r3, #1
 80091da:	613b      	str	r3, [r7, #16]
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	2b0c      	cmp	r3, #12
 80091e0:	d9d3      	bls.n	800918a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00a      	beq.n	8009204 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80091f2:	d901      	bls.n	80091f8 <pick_lfn+0xac>
 80091f4:	2300      	movs	r3, #0
 80091f6:	e006      	b.n	8009206 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	005b      	lsls	r3, r3, #1
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	4413      	add	r3, r2
 8009200:	2200      	movs	r2, #0
 8009202:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8009204:	2301      	movs	r3, #1
}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	080107cc 	.word	0x080107cc

08009214 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4611      	mov	r1, r2
 8009220:	461a      	mov	r2, r3
 8009222:	460b      	mov	r3, r1
 8009224:	71fb      	strb	r3, [r7, #7]
 8009226:	4613      	mov	r3, r2
 8009228:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	330d      	adds	r3, #13
 800922e:	79ba      	ldrb	r2, [r7, #6]
 8009230:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	330b      	adds	r3, #11
 8009236:	220f      	movs	r2, #15
 8009238:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	330c      	adds	r3, #12
 800923e:	2200      	movs	r2, #0
 8009240:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	331a      	adds	r3, #26
 8009246:	2100      	movs	r1, #0
 8009248:	4618      	mov	r0, r3
 800924a:	f7fe fc17 	bl	8007a7c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800924e:	79fb      	ldrb	r3, [r7, #7]
 8009250:	1e5a      	subs	r2, r3, #1
 8009252:	4613      	mov	r3, r2
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	4413      	add	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	4413      	add	r3, r2
 800925c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	82fb      	strh	r3, [r7, #22]
 8009262:	2300      	movs	r3, #0
 8009264:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009266:	8afb      	ldrh	r3, [r7, #22]
 8009268:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800926c:	4293      	cmp	r3, r2
 800926e:	d007      	beq.n	8009280 <put_lfn+0x6c>
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	61fa      	str	r2, [r7, #28]
 8009276:	005b      	lsls	r3, r3, #1
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	4413      	add	r3, r2
 800927c:	881b      	ldrh	r3, [r3, #0]
 800927e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009280:	4a17      	ldr	r2, [pc, #92]	@ (80092e0 <put_lfn+0xcc>)
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	4413      	add	r3, r2
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	461a      	mov	r2, r3
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	4413      	add	r3, r2
 800928e:	8afa      	ldrh	r2, [r7, #22]
 8009290:	4611      	mov	r1, r2
 8009292:	4618      	mov	r0, r3
 8009294:	f7fe fbf2 	bl	8007a7c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009298:	8afb      	ldrh	r3, [r7, #22]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d102      	bne.n	80092a4 <put_lfn+0x90>
 800929e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80092a2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	3301      	adds	r3, #1
 80092a8:	61bb      	str	r3, [r7, #24]
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	2b0c      	cmp	r3, #12
 80092ae:	d9da      	bls.n	8009266 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80092b0:	8afb      	ldrh	r3, [r7, #22]
 80092b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d006      	beq.n	80092c8 <put_lfn+0xb4>
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	4413      	add	r3, r2
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d103      	bne.n	80092d0 <put_lfn+0xbc>
 80092c8:	79fb      	ldrb	r3, [r7, #7]
 80092ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ce:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	79fa      	ldrb	r2, [r7, #7]
 80092d4:	701a      	strb	r2, [r3, #0]
}
 80092d6:	bf00      	nop
 80092d8:	3720      	adds	r7, #32
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	080107cc 	.word	0x080107cc

080092e4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b08c      	sub	sp, #48	@ 0x30
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
 80092f0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80092f2:	220b      	movs	r2, #11
 80092f4:	68b9      	ldr	r1, [r7, #8]
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f7fe fc8f 	bl	8007c1a <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2b05      	cmp	r3, #5
 8009300:	d929      	bls.n	8009356 <gen_numname+0x72>
		sr = seq;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009306:	e020      	b.n	800934a <gen_numname+0x66>
			wc = *lfn++;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	1c9a      	adds	r2, r3, #2
 800930c:	607a      	str	r2, [r7, #4]
 800930e:	881b      	ldrh	r3, [r3, #0]
 8009310:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8009312:	2300      	movs	r3, #0
 8009314:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009316:	e015      	b.n	8009344 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	005a      	lsls	r2, r3, #1
 800931c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	4413      	add	r3, r2
 8009324:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009326:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009328:	085b      	lsrs	r3, r3, #1
 800932a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d003      	beq.n	800933e <gen_numname+0x5a>
 8009336:	69fa      	ldr	r2, [r7, #28]
 8009338:	4b30      	ldr	r3, [pc, #192]	@ (80093fc <gen_numname+0x118>)
 800933a:	4053      	eors	r3, r2
 800933c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800933e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009340:	3301      	adds	r3, #1
 8009342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009346:	2b0f      	cmp	r3, #15
 8009348:	d9e6      	bls.n	8009318 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	881b      	ldrh	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1da      	bne.n	8009308 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009352:	69fb      	ldr	r3, [r7, #28]
 8009354:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009356:	2307      	movs	r3, #7
 8009358:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	b2db      	uxtb	r3, r3
 800935e:	f003 030f 	and.w	r3, r3, #15
 8009362:	b2db      	uxtb	r3, r3
 8009364:	3330      	adds	r3, #48	@ 0x30
 8009366:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800936a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800936e:	2b39      	cmp	r3, #57	@ 0x39
 8009370:	d904      	bls.n	800937c <gen_numname+0x98>
 8009372:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009376:	3307      	adds	r3, #7
 8009378:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800937c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937e:	1e5a      	subs	r2, r3, #1
 8009380:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009382:	3330      	adds	r3, #48	@ 0x30
 8009384:	443b      	add	r3, r7
 8009386:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800938a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	091b      	lsrs	r3, r3, #4
 8009392:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1df      	bne.n	800935a <gen_numname+0x76>
	ns[i] = '~';
 800939a:	f107 0214 	add.w	r2, r7, #20
 800939e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a0:	4413      	add	r3, r2
 80093a2:	227e      	movs	r2, #126	@ 0x7e
 80093a4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80093a6:	2300      	movs	r3, #0
 80093a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80093aa:	e002      	b.n	80093b2 <gen_numname+0xce>
 80093ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ae:	3301      	adds	r3, #1
 80093b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80093b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d205      	bcs.n	80093c6 <gen_numname+0xe2>
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093be:	4413      	add	r3, r2
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b20      	cmp	r3, #32
 80093c4:	d1f2      	bne.n	80093ac <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80093c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c8:	2b07      	cmp	r3, #7
 80093ca:	d807      	bhi.n	80093dc <gen_numname+0xf8>
 80093cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80093d2:	3330      	adds	r3, #48	@ 0x30
 80093d4:	443b      	add	r3, r7
 80093d6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80093da:	e000      	b.n	80093de <gen_numname+0xfa>
 80093dc:	2120      	movs	r1, #32
 80093de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e0:	1c5a      	adds	r2, r3, #1
 80093e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	4413      	add	r3, r2
 80093e8:	460a      	mov	r2, r1
 80093ea:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80093ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ee:	2b07      	cmp	r3, #7
 80093f0:	d9e9      	bls.n	80093c6 <gen_numname+0xe2>
}
 80093f2:	bf00      	nop
 80093f4:	bf00      	nop
 80093f6:	3730      	adds	r7, #48	@ 0x30
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	00011021 	.word	0x00011021

08009400 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800940c:	230b      	movs	r3, #11
 800940e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009410:	7bfb      	ldrb	r3, [r7, #15]
 8009412:	b2da      	uxtb	r2, r3
 8009414:	0852      	lsrs	r2, r2, #1
 8009416:	01db      	lsls	r3, r3, #7
 8009418:	4313      	orrs	r3, r2
 800941a:	b2da      	uxtb	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	1c59      	adds	r1, r3, #1
 8009420:	6079      	str	r1, [r7, #4]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	4413      	add	r3, r2
 8009426:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	3b01      	subs	r3, #1
 800942c:	60bb      	str	r3, [r7, #8]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1ed      	bne.n	8009410 <sum_sfn+0x10>
	return sum;
 8009434:	7bfb      	ldrb	r3, [r7, #15]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr

08009442 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8009442:	b480      	push	{r7}
 8009444:	b087      	sub	sp, #28
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3301      	adds	r3, #1
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	3301      	adds	r3, #1
 8009452:	015b      	lsls	r3, r3, #5
 8009454:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8009456:	2300      	movs	r3, #0
 8009458:	827b      	strh	r3, [r7, #18]
 800945a:	2300      	movs	r3, #0
 800945c:	617b      	str	r3, [r7, #20]
 800945e:	e017      	b.n	8009490 <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	2b02      	cmp	r3, #2
 8009464:	d103      	bne.n	800946e <xdir_sum+0x2c>
			i++;
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	3301      	adds	r3, #1
 800946a:	617b      	str	r3, [r7, #20]
 800946c:	e00d      	b.n	800948a <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800946e:	8a7b      	ldrh	r3, [r7, #18]
 8009470:	03db      	lsls	r3, r3, #15
 8009472:	b29a      	uxth	r2, r3
 8009474:	8a7b      	ldrh	r3, [r7, #18]
 8009476:	085b      	lsrs	r3, r3, #1
 8009478:	b29b      	uxth	r3, r3
 800947a:	4413      	add	r3, r2
 800947c:	b29b      	uxth	r3, r3
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	440a      	add	r2, r1
 8009484:	7812      	ldrb	r2, [r2, #0]
 8009486:	4413      	add	r3, r2
 8009488:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	3301      	adds	r3, #1
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	429a      	cmp	r2, r3
 8009496:	d3e3      	bcc.n	8009460 <xdir_sum+0x1e>
		}
	}
	return sum;
 8009498:	8a7b      	ldrh	r3, [r7, #18]
}
 800949a:	4618      	mov	r0, r3
 800949c:	371c      	adds	r7, #28
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 80094b2:	e01f      	b.n	80094f4 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 80094b4:	89bb      	ldrh	r3, [r7, #12]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f002 fc24 	bl	800bd04 <ff_wtoupper>
 80094bc:	4603      	mov	r3, r0
 80094be:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 80094c0:	89fb      	ldrh	r3, [r7, #14]
 80094c2:	03db      	lsls	r3, r3, #15
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	89fb      	ldrh	r3, [r7, #14]
 80094c8:	085b      	lsrs	r3, r3, #1
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	4413      	add	r3, r2
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	89bb      	ldrh	r3, [r7, #12]
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	4413      	add	r3, r2
 80094d8:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 80094da:	89fb      	ldrh	r3, [r7, #14]
 80094dc:	03db      	lsls	r3, r3, #15
 80094de:	b29a      	uxth	r2, r3
 80094e0:	89fb      	ldrh	r3, [r7, #14]
 80094e2:	085b      	lsrs	r3, r3, #1
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	4413      	add	r3, r2
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	89bb      	ldrh	r3, [r7, #12]
 80094ec:	0a1b      	lsrs	r3, r3, #8
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	4413      	add	r3, r2
 80094f2:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	1c9a      	adds	r2, r3, #2
 80094f8:	607a      	str	r2, [r7, #4]
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	81bb      	strh	r3, [r7, #12]
 80094fe:	89bb      	ldrh	r3, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1d7      	bne.n	80094b4 <xname_sum+0xe>
	}
	return sum;
 8009504:	89fb      	ldrh	r3, [r7, #14]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
	...

08009510 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8009510:	b590      	push	{r4, r7, lr}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009528:	4619      	mov	r1, r3
 800952a:	4610      	mov	r0, r2
 800952c:	f7fe fda4 	bl	8008078 <move_window>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d001      	beq.n	800953e <load_xdir+0x2e>
 800953a:	7bfb      	ldrb	r3, [r7, #15]
 800953c:	e09f      	b.n	800967e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b85      	cmp	r3, #133	@ 0x85
 8009546:	d001      	beq.n	800954c <load_xdir+0x3c>
 8009548:	2302      	movs	r3, #2
 800954a:	e098      	b.n	800967e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009550:	2220      	movs	r2, #32
 8009552:	4619      	mov	r1, r3
 8009554:	6938      	ldr	r0, [r7, #16]
 8009556:	f7fe fb60 	bl	8007c1a <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	3301      	adds	r3, #1
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	3301      	adds	r3, #1
 8009562:	015b      	lsls	r3, r3, #5
 8009564:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b5f      	cmp	r3, #95	@ 0x5f
 800956a:	d903      	bls.n	8009574 <load_xdir+0x64>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8009572:	d901      	bls.n	8009578 <load_xdir+0x68>
 8009574:	2302      	movs	r3, #2
 8009576:	e082      	b.n	800967e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8009578:	2100      	movs	r1, #0
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7ff fc05 	bl	8008d8a <dir_next>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <load_xdir+0x7e>
 800958a:	7bfb      	ldrb	r3, [r7, #15]
 800958c:	e077      	b.n	800967e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009596:	4619      	mov	r1, r3
 8009598:	4610      	mov	r0, r2
 800959a:	f7fe fd6d 	bl	8008078 <move_window>
 800959e:	4603      	mov	r3, r0
 80095a0:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80095a2:	7bfb      	ldrb	r3, [r7, #15]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <load_xdir+0x9c>
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	e068      	b.n	800967e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80095b4:	d001      	beq.n	80095ba <load_xdir+0xaa>
 80095b6:	2302      	movs	r3, #2
 80095b8:	e061      	b.n	800967e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	f103 0020 	add.w	r0, r3, #32
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095c4:	2220      	movs	r2, #32
 80095c6:	4619      	mov	r1, r3
 80095c8:	f7fe fb27 	bl	8007c1a <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	3323      	adds	r3, #35	@ 0x23
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	332c      	adds	r3, #44	@ 0x2c
 80095d4:	4a2c      	ldr	r2, [pc, #176]	@ (8009688 <load_xdir+0x178>)
 80095d6:	fba2 2303 	umull	r2, r3, r2, r3
 80095da:	08db      	lsrs	r3, r3, #3
 80095dc:	015b      	lsls	r3, r3, #5
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d201      	bcs.n	80095e8 <load_xdir+0xd8>
 80095e4:	2302      	movs	r3, #2
 80095e6:	e04a      	b.n	800967e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 80095e8:	2340      	movs	r3, #64	@ 0x40
 80095ea:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 80095ec:	2100      	movs	r1, #0
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff fbcb 	bl	8008d8a <dir_next>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d001      	beq.n	8009602 <load_xdir+0xf2>
 80095fe:	7bfb      	ldrb	r3, [r7, #15]
 8009600:	e03d      	b.n	800967e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960a:	4619      	mov	r1, r3
 800960c:	4610      	mov	r0, r2
 800960e:	f7fe fd33 	bl	8008078 <move_window>
 8009612:	4603      	mov	r3, r0
 8009614:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <load_xdir+0x110>
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	e02e      	b.n	800967e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	2bc1      	cmp	r3, #193	@ 0xc1
 8009628:	d001      	beq.n	800962e <load_xdir+0x11e>
 800962a:	2302      	movs	r3, #2
 800962c:	e027      	b.n	800967e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8009634:	d208      	bcs.n	8009648 <load_xdir+0x138>
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	18d0      	adds	r0, r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009640:	2220      	movs	r2, #32
 8009642:	4619      	mov	r1, r3
 8009644:	f7fe fae9 	bl	8007c1a <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	3320      	adds	r3, #32
 800964c:	617b      	str	r3, [r7, #20]
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	429a      	cmp	r2, r3
 8009654:	d3ca      	bcc.n	80095ec <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800965c:	d80e      	bhi.n	800967c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800965e:	6938      	ldr	r0, [r7, #16]
 8009660:	f7ff feef 	bl	8009442 <xdir_sum>
 8009664:	4603      	mov	r3, r0
 8009666:	461c      	mov	r4, r3
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	3302      	adds	r3, #2
 800966c:	4618      	mov	r0, r3
 800966e:	f7fe f8ef 	bl	8007850 <ld_word>
 8009672:	4603      	mov	r3, r0
 8009674:	429c      	cmp	r4, r3
 8009676:	d001      	beq.n	800967c <load_xdir+0x16c>
 8009678:	2302      	movs	r3, #2
 800967a:	e000      	b.n	800967e <load_xdir+0x16e>
	}
	return FR_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	bd90      	pop	{r4, r7, pc}
 8009686:	bf00      	nop
 8009688:	88888889 	.word	0x88888889

0800968c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800968c:	b5b0      	push	{r4, r5, r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	6808      	ldr	r0, [r1, #0]
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6a08      	ldr	r0, [r1, #32]
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80096aa:	b2c8      	uxtb	r0, r1
 80096ac:	6879      	ldr	r1, [r7, #4]
 80096ae:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80096b4:	2000      	movs	r0, #0
 80096b6:	460c      	mov	r4, r1
 80096b8:	4605      	mov	r5, r0
 80096ba:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 80096be:	2300      	movs	r3, #0
 80096c0:	6879      	ldr	r1, [r7, #4]
 80096c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff fad2 	bl	8008c7e <dir_sdi>
 80096da:	4603      	mov	r3, r0
 80096dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d104      	bne.n	80096ee <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff ff13 	bl	8009510 <load_xdir>
 80096ea:	4603      	mov	r3, r0
 80096ec:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bdb0      	pop	{r4, r5, r7, pc}

080096f8 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 80096f8:	b590      	push	{r4, r7, lr}
 80096fa:	b087      	sub	sp, #28
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	1c9c      	adds	r4, r3, #2
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f7ff fe98 	bl	8009442 <xdir_sum>
 8009712:	4603      	mov	r3, r0
 8009714:	4619      	mov	r1, r3
 8009716:	4620      	mov	r0, r4
 8009718:	f7fe f9b0 	bl	8007a7c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	3301      	adds	r3, #1
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	3301      	adds	r3, #1
 8009724:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff faa6 	bl	8008c7e <dir_sdi>
 8009732:	4603      	mov	r3, r0
 8009734:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8009736:	e026      	b.n	8009786 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009740:	4619      	mov	r1, r3
 8009742:	4610      	mov	r0, r2
 8009744:	f7fe fc98 	bl	8008078 <move_window>
 8009748:	4603      	mov	r3, r0
 800974a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800974c:	7dfb      	ldrb	r3, [r7, #23]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d11d      	bne.n	800978e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009756:	2220      	movs	r2, #32
 8009758:	68f9      	ldr	r1, [r7, #12]
 800975a:	4618      	mov	r0, r3
 800975c:	f7fe fa5d 	bl	8007c1a <mem_cpy>
		dp->obj.fs->wflag = 1;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2201      	movs	r2, #1
 8009766:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	3b01      	subs	r3, #1
 800976c:	613b      	str	r3, [r7, #16]
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00e      	beq.n	8009792 <store_xdir+0x9a>
		dirb += SZDIRE;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3320      	adds	r3, #32
 8009778:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800977a:	2100      	movs	r1, #0
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f7ff fb04 	bl	8008d8a <dir_next>
 8009782:	4603      	mov	r3, r0
 8009784:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8009786:	7dfb      	ldrb	r3, [r7, #23]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d0d5      	beq.n	8009738 <store_xdir+0x40>
 800978c:	e002      	b.n	8009794 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800978e:	bf00      	nop
 8009790:	e000      	b.n	8009794 <store_xdir+0x9c>
		if (--nent == 0) break;
 8009792:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8009794:	7dfb      	ldrb	r3, [r7, #23]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d002      	beq.n	80097a0 <store_xdir+0xa8>
 800979a:	7dfb      	ldrb	r3, [r7, #23]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d101      	bne.n	80097a4 <store_xdir+0xac>
 80097a0:	7dfb      	ldrb	r3, [r7, #23]
 80097a2:	e000      	b.n	80097a6 <store_xdir+0xae>
 80097a4:	2302      	movs	r3, #2
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	371c      	adds	r7, #28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd90      	pop	{r4, r7, pc}

080097ae <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 80097ae:	b590      	push	{r4, r7, lr}
 80097b0:	b085      	sub	sp, #20
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 80097b8:	2240      	movs	r2, #64	@ 0x40
 80097ba:	2100      	movs	r1, #0
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7fe fa4d 	bl	8007c5c <mem_set>
	dirb[XDIR_Type] = 0x85;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2285      	movs	r2, #133	@ 0x85
 80097c6:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3320      	adds	r3, #32
 80097cc:	22c0      	movs	r2, #192	@ 0xc0
 80097ce:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 80097d0:	2300      	movs	r3, #0
 80097d2:	72bb      	strb	r3, [r7, #10]
 80097d4:	2301      	movs	r3, #1
 80097d6:	72fb      	strb	r3, [r7, #11]
 80097d8:	2301      	movs	r3, #1
 80097da:	813b      	strh	r3, [r7, #8]
 80097dc:	2340      	movs	r3, #64	@ 0x40
 80097de:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	60fa      	str	r2, [r7, #12]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	4413      	add	r3, r2
 80097ea:	22c1      	movs	r2, #193	@ 0xc1
 80097ec:	701a      	strb	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	60fa      	str	r2, [r7, #12]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	4413      	add	r3, r2
 80097f8:	2200      	movs	r2, #0
 80097fa:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 80097fc:	893b      	ldrh	r3, [r7, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00b      	beq.n	800981a <create_xdir+0x6c>
 8009802:	7abb      	ldrb	r3, [r7, #10]
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	4413      	add	r3, r2
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	813b      	strh	r3, [r7, #8]
 800980e:	893b      	ldrh	r3, [r7, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <create_xdir+0x6c>
 8009814:	7abb      	ldrb	r3, [r7, #10]
 8009816:	3301      	adds	r3, #1
 8009818:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	4413      	add	r3, r2
 8009820:	893a      	ldrh	r2, [r7, #8]
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f7fe f929 	bl	8007a7c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3302      	adds	r3, #2
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f003 031f 	and.w	r3, r3, #31
 8009836:	2b00      	cmp	r3, #0
 8009838:	d1e0      	bne.n	80097fc <create_xdir+0x4e>
		nb++;
 800983a:	7afb      	ldrb	r3, [r7, #11]
 800983c:	3301      	adds	r3, #1
 800983e:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8009840:	7abb      	ldrb	r3, [r7, #10]
 8009842:	005b      	lsls	r3, r3, #1
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	4413      	add	r3, r2
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1c8      	bne.n	80097e0 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	3323      	adds	r3, #35	@ 0x23
 8009852:	7aba      	ldrb	r2, [r7, #10]
 8009854:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	3301      	adds	r3, #1
 800985a:	7afa      	ldrb	r2, [r7, #11]
 800985c:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8009864:	6838      	ldr	r0, [r7, #0]
 8009866:	f7ff fe1e 	bl	80094a6 <xname_sum>
 800986a:	4603      	mov	r3, r0
 800986c:	4619      	mov	r1, r3
 800986e:	4620      	mov	r0, r4
 8009870:	f7fe f904 	bl	8007a7c <st_word>
}
 8009874:	bf00      	nop
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	bd90      	pop	{r4, r7, pc}

0800987c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009886:	2304      	movs	r3, #4
 8009888:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8009890:	23ff      	movs	r3, #255	@ 0xff
 8009892:	757b      	strb	r3, [r7, #21]
 8009894:	23ff      	movs	r3, #255	@ 0xff
 8009896:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8009898:	e09f      	b.n	80099da <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800989e:	4619      	mov	r1, r3
 80098a0:	6938      	ldr	r0, [r7, #16]
 80098a2:	f7fe fbe9 	bl	8008078 <move_window>
 80098a6:	4603      	mov	r3, r0
 80098a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f040 809a 	bne.w	80099e6 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80098ba:	7dbb      	ldrb	r3, [r7, #22]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d102      	bne.n	80098c6 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80098c0:	2304      	movs	r3, #4
 80098c2:	75fb      	strb	r3, [r7, #23]
 80098c4:	e096      	b.n	80099f4 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	2b04      	cmp	r3, #4
 80098cc:	d118      	bne.n	8009900 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 80098ce:	7dbb      	ldrb	r3, [r7, #22]
 80098d0:	2b85      	cmp	r3, #133	@ 0x85
 80098d2:	d179      	bne.n	80099c8 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f7ff fe17 	bl	8009510 <load_xdir>
 80098e2:	4603      	mov	r3, r0
 80098e4:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d17e      	bne.n	80099ea <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	3304      	adds	r3, #4
 80098f2:	781b      	ldrb	r3, [r3, #0]
 80098f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	719a      	strb	r2, [r3, #6]
					}
					break;
 80098fe:	e074      	b.n	80099ea <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009904:	330b      	adds	r3, #11
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800990c:	73fb      	strb	r3, [r7, #15]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	7bfa      	ldrb	r2, [r7, #15]
 8009912:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8009914:	7dbb      	ldrb	r3, [r7, #22]
 8009916:	2be5      	cmp	r3, #229	@ 0xe5
 8009918:	d00e      	beq.n	8009938 <dir_read+0xbc>
 800991a:	7dbb      	ldrb	r3, [r7, #22]
 800991c:	2b2e      	cmp	r3, #46	@ 0x2e
 800991e:	d00b      	beq.n	8009938 <dir_read+0xbc>
 8009920:	7bfb      	ldrb	r3, [r7, #15]
 8009922:	f023 0320 	bic.w	r3, r3, #32
 8009926:	2b08      	cmp	r3, #8
 8009928:	bf0c      	ite	eq
 800992a:	2301      	moveq	r3, #1
 800992c:	2300      	movne	r3, #0
 800992e:	b2db      	uxtb	r3, r3
 8009930:	461a      	mov	r2, r3
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	4293      	cmp	r3, r2
 8009936:	d002      	beq.n	800993e <dir_read+0xc2>
				ord = 0xFF;
 8009938:	23ff      	movs	r3, #255	@ 0xff
 800993a:	757b      	strb	r3, [r7, #21]
 800993c:	e044      	b.n	80099c8 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800993e:	7bfb      	ldrb	r3, [r7, #15]
 8009940:	2b0f      	cmp	r3, #15
 8009942:	d12f      	bne.n	80099a4 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8009944:	7dbb      	ldrb	r3, [r7, #22]
 8009946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00d      	beq.n	800996a <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009952:	7b5b      	ldrb	r3, [r3, #13]
 8009954:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8009956:	7dbb      	ldrb	r3, [r7, #22]
 8009958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800995c:	75bb      	strb	r3, [r7, #22]
 800995e:	7dbb      	ldrb	r3, [r7, #22]
 8009960:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800996a:	7dba      	ldrb	r2, [r7, #22]
 800996c:	7d7b      	ldrb	r3, [r7, #21]
 800996e:	429a      	cmp	r2, r3
 8009970:	d115      	bne.n	800999e <dir_read+0x122>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009976:	330d      	adds	r3, #13
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	7d3a      	ldrb	r2, [r7, #20]
 800997c:	429a      	cmp	r2, r3
 800997e:	d10e      	bne.n	800999e <dir_read+0x122>
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f7ff fbde 	bl	800914c <pick_lfn>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d003      	beq.n	800999e <dir_read+0x122>
 8009996:	7d7b      	ldrb	r3, [r7, #21]
 8009998:	3b01      	subs	r3, #1
 800999a:	b2db      	uxtb	r3, r3
 800999c:	e000      	b.n	80099a0 <dir_read+0x124>
 800999e:	23ff      	movs	r3, #255	@ 0xff
 80099a0:	757b      	strb	r3, [r7, #21]
 80099a2:	e011      	b.n	80099c8 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80099a4:	7d7b      	ldrb	r3, [r7, #21]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d109      	bne.n	80099be <dir_read+0x142>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff fd26 	bl	8009400 <sum_sfn>
 80099b4:	4603      	mov	r3, r0
 80099b6:	461a      	mov	r2, r3
 80099b8:	7d3b      	ldrb	r3, [r7, #20]
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d017      	beq.n	80099ee <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f04f 32ff 	mov.w	r2, #4294967295
 80099c4:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 80099c6:	e012      	b.n	80099ee <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80099c8:	2100      	movs	r1, #0
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff f9dd 	bl	8008d8a <dir_next>
 80099d0:	4603      	mov	r3, r0
 80099d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10b      	bne.n	80099f2 <dir_read+0x176>
	while (dp->sect) {
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f47f af5b 	bne.w	800989a <dir_read+0x1e>
 80099e4:	e006      	b.n	80099f4 <dir_read+0x178>
		if (res != FR_OK) break;
 80099e6:	bf00      	nop
 80099e8:	e004      	b.n	80099f4 <dir_read+0x178>
					break;
 80099ea:	bf00      	nop
 80099ec:	e002      	b.n	80099f4 <dir_read+0x178>
					break;
 80099ee:	bf00      	nop
 80099f0:	e000      	b.n	80099f4 <dir_read+0x178>
		if (res != FR_OK) break;
 80099f2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d002      	beq.n	8009a00 <dir_read+0x184>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009a0a:	b590      	push	{r4, r7, lr}
 8009a0c:	b089      	sub	sp, #36	@ 0x24
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009a18:	2100      	movs	r1, #0
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7ff f92f 	bl	8008c7e <dir_sdi>
 8009a20:	4603      	mov	r3, r0
 8009a22:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8009a24:	7ffb      	ldrb	r3, [r7, #31]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <dir_find+0x24>
 8009a2a:	7ffb      	ldrb	r3, [r7, #31]
 8009a2c:	e113      	b.n	8009c56 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2b04      	cmp	r3, #4
 8009a34:	d165      	bne.n	8009b02 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff fd33 	bl	80094a6 <xname_sum>
 8009a40:	4603      	mov	r3, r0
 8009a42:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009a44:	e050      	b.n	8009ae8 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	3324      	adds	r3, #36	@ 0x24
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fd feff 	bl	8007850 <ld_word>
 8009a52:	4603      	mov	r3, r0
 8009a54:	461a      	mov	r2, r3
 8009a56:	893b      	ldrh	r3, [r7, #8]
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d144      	bne.n	8009ae6 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009a64:	76fb      	strb	r3, [r7, #27]
 8009a66:	2340      	movs	r3, #64	@ 0x40
 8009a68:	617b      	str	r3, [r7, #20]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	613b      	str	r3, [r7, #16]
 8009a6e:	e029      	b.n	8009ac4 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	f003 031f 	and.w	r3, r3, #31
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d102      	bne.n	8009a80 <dir_find+0x76>
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	3302      	adds	r3, #2
 8009a7e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	4413      	add	r3, r2
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fd fee1 	bl	8007850 <ld_word>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	4618      	mov	r0, r3
 8009a92:	f002 f937 	bl	800bd04 <ff_wtoupper>
 8009a96:	4603      	mov	r3, r0
 8009a98:	461c      	mov	r4, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	68da      	ldr	r2, [r3, #12]
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	005b      	lsls	r3, r3, #1
 8009aa2:	4413      	add	r3, r2
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f002 f92c 	bl	800bd04 <ff_wtoupper>
 8009aac:	4603      	mov	r3, r0
 8009aae:	429c      	cmp	r4, r3
 8009ab0:	d10c      	bne.n	8009acc <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8009ab2:	7efb      	ldrb	r3, [r7, #27]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	76fb      	strb	r3, [r7, #27]
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	3302      	adds	r3, #2
 8009abc:	617b      	str	r3, [r7, #20]
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	613b      	str	r3, [r7, #16]
 8009ac4:	7efb      	ldrb	r3, [r7, #27]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1d2      	bne.n	8009a70 <dir_find+0x66>
 8009aca:	e000      	b.n	8009ace <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8009acc:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8009ace:	7efb      	ldrb	r3, [r7, #27]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d109      	bne.n	8009ae8 <dir_find+0xde>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	4413      	add	r3, r2
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00b      	beq.n	8009afc <dir_find+0xf2>
 8009ae4:	e000      	b.n	8009ae8 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8009ae6:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8009ae8:	2100      	movs	r1, #0
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff fec6 	bl	800987c <dir_read>
 8009af0:	4603      	mov	r3, r0
 8009af2:	77fb      	strb	r3, [r7, #31]
 8009af4:	7ffb      	ldrb	r3, [r7, #31]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0a5      	beq.n	8009a46 <dir_find+0x3c>
 8009afa:	e000      	b.n	8009afe <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8009afc:	bf00      	nop
		}
		return res;
 8009afe:	7ffb      	ldrb	r3, [r7, #31]
 8009b00:	e0a9      	b.n	8009c56 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009b02:	23ff      	movs	r3, #255	@ 0xff
 8009b04:	773b      	strb	r3, [r7, #28]
 8009b06:	7f3b      	ldrb	r3, [r7, #28]
 8009b08:	777b      	strb	r3, [r7, #29]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b10:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b16:	4619      	mov	r1, r3
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f7fe faad 	bl	8008078 <move_window>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8009b22:	7ffb      	ldrb	r3, [r7, #31]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f040 8090 	bne.w	8009c4a <dir_find+0x240>
		c = dp->dir[DIR_Name];
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009b32:	7fbb      	ldrb	r3, [r7, #30]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d102      	bne.n	8009b3e <dir_find+0x134>
 8009b38:	2304      	movs	r3, #4
 8009b3a:	77fb      	strb	r3, [r7, #31]
 8009b3c:	e08a      	b.n	8009c54 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b42:	330b      	adds	r3, #11
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b4a:	72fb      	strb	r3, [r7, #11]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	7afa      	ldrb	r2, [r7, #11]
 8009b50:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009b52:	7fbb      	ldrb	r3, [r7, #30]
 8009b54:	2be5      	cmp	r3, #229	@ 0xe5
 8009b56:	d007      	beq.n	8009b68 <dir_find+0x15e>
 8009b58:	7afb      	ldrb	r3, [r7, #11]
 8009b5a:	f003 0308 	and.w	r3, r3, #8
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d009      	beq.n	8009b76 <dir_find+0x16c>
 8009b62:	7afb      	ldrb	r3, [r7, #11]
 8009b64:	2b0f      	cmp	r3, #15
 8009b66:	d006      	beq.n	8009b76 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009b68:	23ff      	movs	r3, #255	@ 0xff
 8009b6a:	777b      	strb	r3, [r7, #29]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b72:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009b74:	e05e      	b.n	8009c34 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009b76:	7afb      	ldrb	r3, [r7, #11]
 8009b78:	2b0f      	cmp	r3, #15
 8009b7a:	d136      	bne.n	8009bea <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8009b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d154      	bne.n	8009c34 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009b8a:	7fbb      	ldrb	r3, [r7, #30]
 8009b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00d      	beq.n	8009bb0 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b98:	7b5b      	ldrb	r3, [r3, #13]
 8009b9a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009b9c:	7fbb      	ldrb	r3, [r7, #30]
 8009b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ba2:	77bb      	strb	r3, [r7, #30]
 8009ba4:	7fbb      	ldrb	r3, [r7, #30]
 8009ba6:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009bb0:	7fba      	ldrb	r2, [r7, #30]
 8009bb2:	7f7b      	ldrb	r3, [r7, #29]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d115      	bne.n	8009be4 <dir_find+0x1da>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bbc:	330d      	adds	r3, #13
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	7f3a      	ldrb	r2, [r7, #28]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d10e      	bne.n	8009be4 <dir_find+0x1da>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	68da      	ldr	r2, [r3, #12]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bce:	4619      	mov	r1, r3
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	f7ff fa4b 	bl	800906c <cmp_lfn>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <dir_find+0x1da>
 8009bdc:	7f7b      	ldrb	r3, [r7, #29]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	e000      	b.n	8009be6 <dir_find+0x1dc>
 8009be4:	23ff      	movs	r3, #255	@ 0xff
 8009be6:	777b      	strb	r3, [r7, #29]
 8009be8:	e024      	b.n	8009c34 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009bea:	7f7b      	ldrb	r3, [r7, #29]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d109      	bne.n	8009c04 <dir_find+0x1fa>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7ff fc03 	bl	8009400 <sum_sfn>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	7f3b      	ldrb	r3, [r7, #28]
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d024      	beq.n	8009c4e <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8009c0a:	f003 0301 	and.w	r3, r3, #1
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10a      	bne.n	8009c28 <dir_find+0x21e>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	3340      	adds	r3, #64	@ 0x40
 8009c1a:	220b      	movs	r2, #11
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	f7fe f838 	bl	8007c92 <mem_cmp>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d014      	beq.n	8009c52 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009c28:	23ff      	movs	r3, #255	@ 0xff
 8009c2a:	777b      	strb	r3, [r7, #29]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c32:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009c34:	2100      	movs	r1, #0
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff f8a7 	bl	8008d8a <dir_next>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8009c40:	7ffb      	ldrb	r3, [r7, #31]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f43f af65 	beq.w	8009b12 <dir_find+0x108>
 8009c48:	e004      	b.n	8009c54 <dir_find+0x24a>
		if (res != FR_OK) break;
 8009c4a:	bf00      	nop
 8009c4c:	e002      	b.n	8009c54 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009c4e:	bf00      	nop
 8009c50:	e000      	b.n	8009c54 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009c52:	bf00      	nop

	return res;
 8009c54:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3724      	adds	r7, #36	@ 0x24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd90      	pop	{r4, r7, pc}
	...

08009c60 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009c60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009c64:	b0a0      	sub	sp, #128	@ 0x80
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8009c76:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <dir_register+0x22>
 8009c7e:	2306      	movs	r3, #6
 8009c80:	e18e      	b.n	8009fa0 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009c82:	2300      	movs	r3, #0
 8009c84:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c86:	e002      	b.n	8009c8e <dir_register+0x2e>
 8009c88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c94:	005b      	lsls	r3, r3, #1
 8009c96:	4413      	add	r3, r2
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1f4      	bne.n	8009c88 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009c9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	f040 809f 	bne.w	8009de6 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8009ca8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009caa:	330e      	adds	r3, #14
 8009cac:	4aa2      	ldr	r2, [pc, #648]	@ (8009f38 <dir_register+0x2d8>)
 8009cae:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb2:	08db      	lsrs	r3, r3, #3
 8009cb4:	3302      	adds	r3, #2
 8009cb6:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8009cb8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7ff f93a 	bl	8008f34 <dir_alloc>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 8009cc6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d002      	beq.n	8009cd4 <dir_register+0x74>
 8009cce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009cd2:	e165      	b.n	8009fa0 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	015b      	lsls	r3, r3, #5
 8009cde:	1ad2      	subs	r2, r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d072      	beq.n	8009dd2 <dir_register+0x172>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	79db      	ldrb	r3, [r3, #7]
 8009cf0:	f003 0304 	and.w	r3, r3, #4
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d06c      	beq.n	8009dd2 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009cfe:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009d00:	8949      	ldrh	r1, [r1, #10]
 8009d02:	0249      	lsls	r1, r1, #9
 8009d04:	2000      	movs	r0, #0
 8009d06:	460c      	mov	r4, r1
 8009d08:	4605      	mov	r5, r0
 8009d0a:	eb12 0804 	adds.w	r8, r2, r4
 8009d0e:	eb43 0905 	adc.w	r9, r3, r5
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fe fd56 	bl	80087cc <fill_first_frag>
 8009d20:	4603      	mov	r3, r0
 8009d22:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8009d26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d002      	beq.n	8009d34 <dir_register+0xd4>
 8009d2e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009d32:	e135      	b.n	8009fa0 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3e:	4619      	mov	r1, r3
 8009d40:	f7fe fd73 	bl	800882a <fill_last_frag>
 8009d44:	4603      	mov	r3, r0
 8009d46:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8009d4a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d002      	beq.n	8009d58 <dir_register+0xf8>
 8009d52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009d56:	e123      	b.n	8009fa0 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	f107 0308 	add.w	r3, r7, #8
 8009d5e:	4611      	mov	r1, r2
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7ff fc93 	bl	800968c <load_obj_dir>
 8009d66:	4603      	mov	r3, r0
 8009d68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8009d6c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <dir_register+0x11a>
 8009d74:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009d78:	e112      	b.n	8009fa0 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8009d7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009d88:	4608      	mov	r0, r1
 8009d8a:	f7fd febe 	bl	8007b0a <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8009d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009d9c:	4608      	mov	r0, r1
 8009d9e:	f7fd feb4 	bl	8007b0a <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	79da      	ldrb	r2, [r3, #7]
 8009da6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	3321      	adds	r3, #33	@ 0x21
 8009dac:	f042 0201 	orr.w	r2, r2, #1
 8009db0:	b2d2      	uxtb	r2, r2
 8009db2:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8009db4:	f107 0308 	add.w	r3, r7, #8
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7ff fc9d 	bl	80096f8 <store_xdir>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8009dc4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <dir_register+0x172>
 8009dcc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009dd0:	e0e6      	b.n	8009fa0 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8009dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd4:	691a      	ldr	r2, [r3, #16]
 8009dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4610      	mov	r0, r2
 8009dde:	f7ff fce6 	bl	80097ae <create_xdir>
		return FR_OK;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e0dc      	b.n	8009fa0 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8009dec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8009df0:	220c      	movs	r2, #12
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7fd ff11 	bl	8007c1a <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009df8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d033      	beq.n	8009e6c <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2240      	movs	r2, #64	@ 0x40
 8009e08:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e10:	e016      	b.n	8009e40 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8009e18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e1a:	68da      	ldr	r2, [r3, #12]
 8009e1c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8009e20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e22:	f7ff fa5f 	bl	80092e4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f7ff fdef 	bl	8009a0a <dir_find>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 8009e32:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d106      	bne.n	8009e48 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 8009e3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e42:	2b63      	cmp	r3, #99	@ 0x63
 8009e44:	d9e5      	bls.n	8009e12 <dir_register+0x1b2>
 8009e46:	e000      	b.n	8009e4a <dir_register+0x1ea>
			if (res != FR_OK) break;
 8009e48:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009e4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e4c:	2b64      	cmp	r3, #100	@ 0x64
 8009e4e:	d101      	bne.n	8009e54 <dir_register+0x1f4>
 8009e50:	2307      	movs	r3, #7
 8009e52:	e0a5      	b.n	8009fa0 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009e54:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009e58:	2b04      	cmp	r3, #4
 8009e5a:	d002      	beq.n	8009e62 <dir_register+0x202>
 8009e5c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009e60:	e09e      	b.n	8009fa0 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009e62:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009e6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009e70:	f003 0302 	and.w	r3, r3, #2
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d007      	beq.n	8009e88 <dir_register+0x228>
 8009e78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e7a:	330c      	adds	r3, #12
 8009e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8009f3c <dir_register+0x2dc>)
 8009e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e82:	089b      	lsrs	r3, r3, #2
 8009e84:	3301      	adds	r3, #1
 8009e86:	e000      	b.n	8009e8a <dir_register+0x22a>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009e8c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7ff f850 	bl	8008f34 <dir_alloc>
 8009e94:	4603      	mov	r3, r0
 8009e96:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009e9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d14f      	bne.n	8009f42 <dir_register+0x2e2>
 8009ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ea8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d049      	beq.n	8009f42 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009eb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009eb4:	015b      	lsls	r3, r3, #5
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	4619      	mov	r1, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7fe fedf 	bl	8008c7e <dir_sdi>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8009ec6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d139      	bne.n	8009f42 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3340      	adds	r3, #64	@ 0x40
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7ff fa94 	bl	8009400 <sum_sfn>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ee6:	f7fe f8c7 	bl	8008078 <move_window>
 8009eea:	4603      	mov	r3, r0
 8009eec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 8009ef0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d123      	bne.n	8009f40 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8009ef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009efa:	68d8      	ldr	r0, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009f00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8009f08:	f7ff f984 	bl	8009214 <put_lfn>
				fs->wflag = 1;
 8009f0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f0e:	2201      	movs	r2, #1
 8009f10:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8009f12:	2100      	movs	r1, #0
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7fe ff38 	bl	8008d8a <dir_next>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 8009f20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10c      	bne.n	8009f42 <dir_register+0x2e2>
 8009f28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1d4      	bne.n	8009ede <dir_register+0x27e>
 8009f34:	e005      	b.n	8009f42 <dir_register+0x2e2>
 8009f36:	bf00      	nop
 8009f38:	88888889 	.word	0x88888889
 8009f3c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8009f40:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009f42:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d128      	bne.n	8009f9c <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f52:	f7fe f891 	bl	8008078 <move_window>
 8009f56:	4603      	mov	r3, r0
 8009f58:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 8009f5c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d11b      	bne.n	8009f9c <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f68:	2220      	movs	r2, #32
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7fd fe75 	bl	8007c5c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	3340      	adds	r3, #64	@ 0x40
 8009f7a:	220b      	movs	r2, #11
 8009f7c:	4619      	mov	r1, r3
 8009f7e:	f7fd fe4c 	bl	8007c1a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f8c:	330c      	adds	r3, #12
 8009f8e:	f002 0218 	and.w	r2, r2, #24
 8009f92:	b2d2      	uxtb	r2, r2
 8009f94:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8009f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f98:	2201      	movs	r2, #1
 8009f9a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009f9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3780      	adds	r7, #128	@ 0x80
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009faa:	bf00      	nop

08009fac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08a      	sub	sp, #40	@ 0x28
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	613b      	str	r3, [r7, #16]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	60fb      	str	r3, [r7, #12]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	61ba      	str	r2, [r7, #24]
 8009fd2:	693a      	ldr	r2, [r7, #16]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8009fda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fdc:	2b1f      	cmp	r3, #31
 8009fde:	d940      	bls.n	800a062 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8009fe0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fe2:	2b2f      	cmp	r3, #47	@ 0x2f
 8009fe4:	d006      	beq.n	8009ff4 <create_name+0x48>
 8009fe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009fe8:	2b5c      	cmp	r3, #92	@ 0x5c
 8009fea:	d110      	bne.n	800a00e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009fec:	e002      	b.n	8009ff4 <create_name+0x48>
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	61bb      	str	r3, [r7, #24]
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	2b2f      	cmp	r3, #47	@ 0x2f
 8009ffe:	d0f6      	beq.n	8009fee <create_name+0x42>
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	4413      	add	r3, r2
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b5c      	cmp	r3, #92	@ 0x5c
 800a00a:	d0f0      	beq.n	8009fee <create_name+0x42>
			break;
 800a00c:	e02a      	b.n	800a064 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2bfe      	cmp	r3, #254	@ 0xfe
 800a012:	d901      	bls.n	800a018 <create_name+0x6c>
 800a014:	2306      	movs	r3, #6
 800a016:	e17d      	b.n	800a314 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a018:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a01e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a020:	2101      	movs	r1, #1
 800a022:	4618      	mov	r0, r3
 800a024:	f001 fe32 	bl	800bc8c <ff_convert>
 800a028:	4603      	mov	r3, r0
 800a02a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a02c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <create_name+0x8a>
 800a032:	2306      	movs	r3, #6
 800a034:	e16e      	b.n	800a314 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a036:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a038:	2b7f      	cmp	r3, #127	@ 0x7f
 800a03a:	d809      	bhi.n	800a050 <create_name+0xa4>
 800a03c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a03e:	4619      	mov	r1, r3
 800a040:	488d      	ldr	r0, [pc, #564]	@ (800a278 <create_name+0x2cc>)
 800a042:	f7fd fe4d 	bl	8007ce0 <chk_chr>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d001      	beq.n	800a050 <create_name+0xa4>
 800a04c:	2306      	movs	r3, #6
 800a04e:	e161      	b.n	800a314 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	617a      	str	r2, [r7, #20]
 800a056:	005b      	lsls	r3, r3, #1
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4413      	add	r3, r2
 800a05c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a05e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a060:	e7b4      	b.n	8009fcc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a062:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	441a      	add	r2, r3
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a06e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a070:	2b1f      	cmp	r3, #31
 800a072:	d801      	bhi.n	800a078 <create_name+0xcc>
 800a074:	2304      	movs	r3, #4
 800a076:	e000      	b.n	800a07a <create_name+0xce>
 800a078:	2300      	movs	r3, #0
 800a07a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a07e:	e011      	b.n	800a0a4 <create_name+0xf8>
		w = lfn[di - 1];
 800a080:	697a      	ldr	r2, [r7, #20]
 800a082:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a086:	4413      	add	r3, r2
 800a088:	005b      	lsls	r3, r3, #1
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	4413      	add	r3, r2
 800a08e:	881b      	ldrh	r3, [r3, #0]
 800a090:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800a092:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a094:	2b20      	cmp	r3, #32
 800a096:	d002      	beq.n	800a09e <create_name+0xf2>
 800a098:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a09a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a09c:	d106      	bne.n	800a0ac <create_name+0x100>
		di--;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1ea      	bne.n	800a080 <create_name+0xd4>
 800a0aa:	e000      	b.n	800a0ae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a0ac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <create_name+0x118>
 800a0c0:	2306      	movs	r3, #6
 800a0c2:	e127      	b.n	800a314 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	3340      	adds	r3, #64	@ 0x40
 800a0c8:	220b      	movs	r2, #11
 800a0ca:	2120      	movs	r1, #32
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7fd fdc5 	bl	8007c5c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	61bb      	str	r3, [r7, #24]
 800a0d6:	e002      	b.n	800a0de <create_name+0x132>
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	61bb      	str	r3, [r7, #24]
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	005b      	lsls	r3, r3, #1
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	2b20      	cmp	r3, #32
 800a0ea:	d0f5      	beq.n	800a0d8 <create_name+0x12c>
 800a0ec:	69bb      	ldr	r3, [r7, #24]
 800a0ee:	005b      	lsls	r3, r3, #1
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0f8:	d0ee      	beq.n	800a0d8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d009      	beq.n	800a114 <create_name+0x168>
 800a100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a104:	f043 0303 	orr.w	r3, r3, #3
 800a108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a10c:	e002      	b.n	800a114 <create_name+0x168>
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	3b01      	subs	r3, #1
 800a112:	617b      	str	r3, [r7, #20]
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d009      	beq.n	800a12e <create_name+0x182>
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a120:	4413      	add	r3, r2
 800a122:	005b      	lsls	r3, r3, #1
 800a124:	68fa      	ldr	r2, [r7, #12]
 800a126:	4413      	add	r3, r2
 800a128:	881b      	ldrh	r3, [r3, #0]
 800a12a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a12c:	d1ef      	bne.n	800a10e <create_name+0x162>

	i = b = 0; ni = 8;
 800a12e:	2300      	movs	r3, #0
 800a130:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a134:	2300      	movs	r3, #0
 800a136:	623b      	str	r3, [r7, #32]
 800a138:	2308      	movs	r3, #8
 800a13a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	1c5a      	adds	r2, r3, #1
 800a140:	61ba      	str	r2, [r7, #24]
 800a142:	005b      	lsls	r3, r3, #1
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	4413      	add	r3, r2
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a14c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 8090 	beq.w	800a274 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a154:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a156:	2b20      	cmp	r3, #32
 800a158:	d006      	beq.n	800a168 <create_name+0x1bc>
 800a15a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a15c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a15e:	d10a      	bne.n	800a176 <create_name+0x1ca>
 800a160:	69ba      	ldr	r2, [r7, #24]
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	429a      	cmp	r2, r3
 800a166:	d006      	beq.n	800a176 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a16c:	f043 0303 	orr.w	r3, r3, #3
 800a170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a174:	e07d      	b.n	800a272 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a176:	6a3a      	ldr	r2, [r7, #32]
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d203      	bcs.n	800a186 <create_name+0x1da>
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	429a      	cmp	r2, r3
 800a184:	d123      	bne.n	800a1ce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	2b0b      	cmp	r3, #11
 800a18a:	d106      	bne.n	800a19a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a18c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a190:	f043 0303 	orr.w	r3, r3, #3
 800a194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a198:	e075      	b.n	800a286 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d005      	beq.n	800a1ae <create_name+0x202>
 800a1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1a6:	f043 0303 	orr.w	r3, r3, #3
 800a1aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800a1ae:	69ba      	ldr	r2, [r7, #24]
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d866      	bhi.n	800a284 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	61bb      	str	r3, [r7, #24]
 800a1ba:	2308      	movs	r3, #8
 800a1bc:	623b      	str	r3, [r7, #32]
 800a1be:	230b      	movs	r3, #11
 800a1c0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a1c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a1cc:	e051      	b.n	800a272 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a1ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1d0:	2b7f      	cmp	r3, #127	@ 0x7f
 800a1d2:	d914      	bls.n	800a1fe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a1d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f001 fd57 	bl	800bc8c <ff_convert>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a1e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d004      	beq.n	800a1f2 <create_name+0x246>
 800a1e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1ea:	3b80      	subs	r3, #128	@ 0x80
 800a1ec:	4a23      	ldr	r2, [pc, #140]	@ (800a27c <create_name+0x2d0>)
 800a1ee:	5cd3      	ldrb	r3, [r2, r3]
 800a1f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a1f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1f6:	f043 0302 	orr.w	r3, r3, #2
 800a1fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a1fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a200:	2b00      	cmp	r3, #0
 800a202:	d007      	beq.n	800a214 <create_name+0x268>
 800a204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a206:	4619      	mov	r1, r3
 800a208:	481d      	ldr	r0, [pc, #116]	@ (800a280 <create_name+0x2d4>)
 800a20a:	f7fd fd69 	bl	8007ce0 <chk_chr>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d008      	beq.n	800a226 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a214:	235f      	movs	r3, #95	@ 0x5f
 800a216:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a21c:	f043 0303 	orr.w	r3, r3, #3
 800a220:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a224:	e01b      	b.n	800a25e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a226:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a228:	2b40      	cmp	r3, #64	@ 0x40
 800a22a:	d909      	bls.n	800a240 <create_name+0x294>
 800a22c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a22e:	2b5a      	cmp	r3, #90	@ 0x5a
 800a230:	d806      	bhi.n	800a240 <create_name+0x294>
					b |= 2;
 800a232:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a236:	f043 0302 	orr.w	r3, r3, #2
 800a23a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a23e:	e00e      	b.n	800a25e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a240:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a242:	2b60      	cmp	r3, #96	@ 0x60
 800a244:	d90b      	bls.n	800a25e <create_name+0x2b2>
 800a246:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a248:	2b7a      	cmp	r3, #122	@ 0x7a
 800a24a:	d808      	bhi.n	800a25e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a24c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a250:	f043 0301 	orr.w	r3, r3, #1
 800a254:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a258:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a25a:	3b20      	subs	r3, #32
 800a25c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	623a      	str	r2, [r7, #32]
 800a264:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a266:	b2d1      	uxtb	r1, r2
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	4413      	add	r3, r2
 800a26c:	460a      	mov	r2, r1
 800a26e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800a272:	e763      	b.n	800a13c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a274:	bf00      	nop
 800a276:	e006      	b.n	800a286 <create_name+0x2da>
 800a278:	080106e8 	.word	0x080106e8
 800a27c:	0801074c 	.word	0x0801074c
 800a280:	080106f4 	.word	0x080106f4
			if (si > di) break;			/* No extension */
 800a284:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a28c:	2be5      	cmp	r3, #229	@ 0xe5
 800a28e:	d103      	bne.n	800a298 <create_name+0x2ec>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2205      	movs	r2, #5
 800a294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	2b08      	cmp	r3, #8
 800a29c:	d104      	bne.n	800a2a8 <create_name+0x2fc>
 800a29e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a2a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2ac:	f003 030c 	and.w	r3, r3, #12
 800a2b0:	2b0c      	cmp	r3, #12
 800a2b2:	d005      	beq.n	800a2c0 <create_name+0x314>
 800a2b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d105      	bne.n	800a2cc <create_name+0x320>
 800a2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2c4:	f043 0302 	orr.w	r3, r3, #2
 800a2c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a2cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2d0:	f003 0302 	and.w	r3, r3, #2
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d117      	bne.n	800a308 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a2d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2dc:	f003 0303 	and.w	r3, r3, #3
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d105      	bne.n	800a2f0 <create_name+0x344>
 800a2e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2e8:	f043 0310 	orr.w	r3, r3, #16
 800a2ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a2f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2f4:	f003 030c 	and.w	r3, r3, #12
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d105      	bne.n	800a308 <create_name+0x35c>
 800a2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a300:	f043 0308 	orr.w	r3, r3, #8
 800a304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a30e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800a312:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a314:	4618      	mov	r0, r3
 800a316:	3728      	adds	r7, #40	@ 0x28
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a330:	e002      	b.n	800a338 <follow_path+0x1c>
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	3301      	adds	r3, #1
 800a336:	603b      	str	r3, [r7, #0]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a33e:	d0f8      	beq.n	800a332 <follow_path+0x16>
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	2b5c      	cmp	r3, #92	@ 0x5c
 800a346:	d0f4      	beq.n	800a332 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	2200      	movs	r2, #0
 800a34c:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	2200      	movs	r2, #0
 800a352:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	2b1f      	cmp	r3, #31
 800a35a:	d80a      	bhi.n	800a372 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2280      	movs	r2, #128	@ 0x80
 800a360:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800a364:	2100      	movs	r1, #0
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f7fe fc89 	bl	8008c7e <dir_sdi>
 800a36c:	4603      	mov	r3, r0
 800a36e:	75fb      	strb	r3, [r7, #23]
 800a370:	e078      	b.n	800a464 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a372:	463b      	mov	r3, r7
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7ff fe18 	bl	8009fac <create_name>
 800a37c:	4603      	mov	r3, r0
 800a37e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a380:	7dfb      	ldrb	r3, [r7, #23]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d169      	bne.n	800a45a <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f7ff fb3f 	bl	8009a0a <dir_find>
 800a38c:	4603      	mov	r3, r0
 800a38e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800a396:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a398:	7dfb      	ldrb	r3, [r7, #23]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00a      	beq.n	800a3b4 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
 800a3a0:	2b04      	cmp	r3, #4
 800a3a2:	d15c      	bne.n	800a45e <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a3a4:	7afb      	ldrb	r3, [r7, #11]
 800a3a6:	f003 0304 	and.w	r3, r3, #4
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d157      	bne.n	800a45e <follow_path+0x142>
 800a3ae:	2305      	movs	r3, #5
 800a3b0:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a3b2:	e054      	b.n	800a45e <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a3b4:	7afb      	ldrb	r3, [r7, #11]
 800a3b6:	f003 0304 	and.w	r3, r3, #4
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d151      	bne.n	800a462 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	799b      	ldrb	r3, [r3, #6]
 800a3c2:	f003 0310 	and.w	r3, r3, #16
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d102      	bne.n	800a3d0 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800a3ca:	2305      	movs	r3, #5
 800a3cc:	75fb      	strb	r3, [r7, #23]
 800a3ce:	e049      	b.n	800a464 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	d130      	bne.n	800a43a <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	689a      	ldr	r2, [r3, #8]
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a3ec:	693a      	ldr	r2, [r7, #16]
 800a3ee:	79d2      	ldrb	r2, [r2, #7]
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	3334      	adds	r3, #52	@ 0x34
 800a404:	4618      	mov	r0, r3
 800a406:	f7fd fa3b 	bl	8007880 <ld_dword>
 800a40a:	4602      	mov	r2, r0
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	3321      	adds	r3, #33	@ 0x21
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	f003 0302 	and.w	r3, r3, #2
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	3338      	adds	r3, #56	@ 0x38
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fd fa4c 	bl	80078c6 <ld_qword>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	6939      	ldr	r1, [r7, #16]
 800a434:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800a438:	e79b      	b.n	800a372 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a448:	4413      	add	r3, r2
 800a44a:	4619      	mov	r1, r3
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f7fe fdcd 	bl	8008fec <ld_clust>
 800a452:	4602      	mov	r2, r0
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a458:	e78b      	b.n	800a372 <follow_path+0x56>
			if (res != FR_OK) break;
 800a45a:	bf00      	nop
 800a45c:	e002      	b.n	800a464 <follow_path+0x148>
				break;
 800a45e:	bf00      	nop
 800a460:	e000      	b.n	800a464 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a462:	bf00      	nop
			}
		}
	}

	return res;
 800a464:	7dfb      	ldrb	r3, [r7, #23]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a46e:	b480      	push	{r7}
 800a470:	b087      	sub	sp, #28
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a476:	f04f 33ff 	mov.w	r3, #4294967295
 800a47a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d031      	beq.n	800a4e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	617b      	str	r3, [r7, #20]
 800a48a:	e002      	b.n	800a492 <get_ldnumber+0x24>
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	3301      	adds	r3, #1
 800a490:	617b      	str	r3, [r7, #20]
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2b1f      	cmp	r3, #31
 800a498:	d903      	bls.n	800a4a2 <get_ldnumber+0x34>
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b3a      	cmp	r3, #58	@ 0x3a
 800a4a0:	d1f4      	bne.n	800a48c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	2b3a      	cmp	r3, #58	@ 0x3a
 800a4a8:	d11c      	bne.n	800a4e4 <get_ldnumber+0x76>
			tp = *path;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	1c5a      	adds	r2, r3, #1
 800a4b4:	60fa      	str	r2, [r7, #12]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	3b30      	subs	r3, #48	@ 0x30
 800a4ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2b09      	cmp	r3, #9
 800a4c0:	d80e      	bhi.n	800a4e0 <get_ldnumber+0x72>
 800a4c2:	68fa      	ldr	r2, [r7, #12]
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d10a      	bne.n	800a4e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d107      	bne.n	800a4e0 <get_ldnumber+0x72>
					vol = (int)i;
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	617b      	str	r3, [r7, #20]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	e002      	b.n	800a4ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a4e8:	693b      	ldr	r3, [r7, #16]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	371c      	adds	r7, #28
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
	...

0800a4f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	70da      	strb	r2, [r3, #3]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f04f 32ff 	mov.w	r2, #4294967295
 800a50e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a510:	6839      	ldr	r1, [r7, #0]
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7fd fdb0 	bl	8008078 <move_window>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <check_fs+0x2a>
 800a51e:	2304      	movs	r3, #4
 800a520:	e044      	b.n	800a5ac <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	3338      	adds	r3, #56	@ 0x38
 800a526:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fd f990 	bl	8007850 <ld_word>
 800a530:	4603      	mov	r3, r0
 800a532:	461a      	mov	r2, r3
 800a534:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a538:	429a      	cmp	r2, r3
 800a53a:	d001      	beq.n	800a540 <check_fs+0x48>
 800a53c:	2303      	movs	r3, #3
 800a53e:	e035      	b.n	800a5ac <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a546:	2be9      	cmp	r3, #233	@ 0xe9
 800a548:	d009      	beq.n	800a55e <check_fs+0x66>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a550:	2beb      	cmp	r3, #235	@ 0xeb
 800a552:	d11e      	bne.n	800a592 <check_fs+0x9a>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a55a:	2b90      	cmp	r3, #144	@ 0x90
 800a55c:	d119      	bne.n	800a592 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	3338      	adds	r3, #56	@ 0x38
 800a562:	3336      	adds	r3, #54	@ 0x36
 800a564:	4618      	mov	r0, r3
 800a566:	f7fd f98b 	bl	8007880 <ld_dword>
 800a56a:	4603      	mov	r3, r0
 800a56c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a570:	4a10      	ldr	r2, [pc, #64]	@ (800a5b4 <check_fs+0xbc>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d101      	bne.n	800a57a <check_fs+0x82>
 800a576:	2300      	movs	r3, #0
 800a578:	e018      	b.n	800a5ac <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3338      	adds	r3, #56	@ 0x38
 800a57e:	3352      	adds	r3, #82	@ 0x52
 800a580:	4618      	mov	r0, r3
 800a582:	f7fd f97d 	bl	8007880 <ld_dword>
 800a586:	4603      	mov	r3, r0
 800a588:	4a0b      	ldr	r2, [pc, #44]	@ (800a5b8 <check_fs+0xc0>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d101      	bne.n	800a592 <check_fs+0x9a>
 800a58e:	2300      	movs	r3, #0
 800a590:	e00c      	b.n	800a5ac <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	3338      	adds	r3, #56	@ 0x38
 800a596:	220b      	movs	r2, #11
 800a598:	4908      	ldr	r1, [pc, #32]	@ (800a5bc <check_fs+0xc4>)
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fd fb79 	bl	8007c92 <mem_cmp>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <check_fs+0xb2>
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e000      	b.n	800a5ac <check_fs+0xb4>
#endif
	return 2;
 800a5aa:	2302      	movs	r3, #2
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	00544146 	.word	0x00544146
 800a5b8:	33544146 	.word	0x33544146
 800a5bc:	080106fc 	.word	0x080106fc

0800a5c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a5c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5c4:	b09c      	sub	sp, #112	@ 0x70
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	61f8      	str	r0, [r7, #28]
 800a5ca:	61b9      	str	r1, [r7, #24]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a5d6:	69f8      	ldr	r0, [r7, #28]
 800a5d8:	f7ff ff49 	bl	800a46e <get_ldnumber>
 800a5dc:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	da01      	bge.n	800a5e8 <find_volume+0x28>
 800a5e4:	230b      	movs	r3, #11
 800a5e6:	e337      	b.n	800ac58 <find_volume+0x698>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a5e8:	4a99      	ldr	r2, [pc, #612]	@ (800a850 <find_volume+0x290>)
 800a5ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5f0:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a5f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <find_volume+0x3c>
 800a5f8:	230c      	movs	r3, #12
 800a5fa:	e32d      	b.n	800ac58 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a600:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a602:	7dfb      	ldrb	r3, [r7, #23]
 800a604:	f023 0301 	bic.w	r3, r3, #1
 800a608:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a60a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d01a      	beq.n	800a648 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800a612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a614:	785b      	ldrb	r3, [r3, #1]
 800a616:	4618      	mov	r0, r3
 800a618:	f7fd f85e 	bl	80076d8 <disk_status>
 800a61c:	4603      	mov	r3, r0
 800a61e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a622:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a626:	f003 0301 	and.w	r3, r3, #1
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10c      	bne.n	800a648 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a62e:	7dfb      	ldrb	r3, [r7, #23]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d007      	beq.n	800a644 <find_volume+0x84>
 800a634:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a638:	f003 0304 	and.w	r3, r3, #4
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d001      	beq.n	800a644 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800a640:	230a      	movs	r3, #10
 800a642:	e309      	b.n	800ac58 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 800a644:	2300      	movs	r3, #0
 800a646:	e307      	b.n	800ac58 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a64a:	2200      	movs	r2, #0
 800a64c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a64e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a650:	b2da      	uxtb	r2, r3
 800a652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a654:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a658:	785b      	ldrb	r3, [r3, #1]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fd f84d 	bl	80076fa <disk_initialize>
 800a660:	4603      	mov	r3, r0
 800a662:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a666:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a672:	2303      	movs	r3, #3
 800a674:	e2f0      	b.n	800ac58 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a676:	7dfb      	ldrb	r3, [r7, #23]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d007      	beq.n	800a68c <find_volume+0xcc>
 800a67c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a680:	f003 0304 	and.w	r3, r3, #4
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800a688:	230a      	movs	r3, #10
 800a68a:	e2e5      	b.n	800ac58 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a68c:	2300      	movs	r3, #0
 800a68e:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a690:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a692:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a694:	f7ff ff30 	bl	800a4f8 <check_fs>
 800a698:	4603      	mov	r3, r0
 800a69a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a69e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d14d      	bne.n	800a742 <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a6aa:	e020      	b.n	800a6ee <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a6ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6ae:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a6b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6b4:	011b      	lsls	r3, r3, #4
 800a6b6:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a6ba:	4413      	add	r3, r2
 800a6bc:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a6be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6c0:	3304      	adds	r3, #4
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d006      	beq.n	800a6d6 <find_volume+0x116>
 800a6c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6ca:	3308      	adds	r3, #8
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fd f8d7 	bl	8007880 <ld_dword>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	e000      	b.n	800a6d8 <find_volume+0x118>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	3360      	adds	r3, #96	@ 0x60
 800a6de:	f107 0110 	add.w	r1, r7, #16
 800a6e2:	440b      	add	r3, r1
 800a6e4:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a6e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a6ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	d9db      	bls.n	800a6ac <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800a6f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d002      	beq.n	800a704 <find_volume+0x144>
 800a6fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a700:	3b01      	subs	r3, #1
 800a702:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a704:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	3360      	adds	r3, #96	@ 0x60
 800a70a:	f107 0210 	add.w	r2, r7, #16
 800a70e:	4413      	add	r3, r2
 800a710:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a714:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a716:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d005      	beq.n	800a728 <find_volume+0x168>
 800a71c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a71e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a720:	f7ff feea 	bl	800a4f8 <check_fs>
 800a724:	4603      	mov	r3, r0
 800a726:	e000      	b.n	800a72a <find_volume+0x16a>
 800a728:	2303      	movs	r3, #3
 800a72a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a72e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a732:	2b01      	cmp	r3, #1
 800a734:	d905      	bls.n	800a742 <find_volume+0x182>
 800a736:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a738:	3301      	adds	r3, #1
 800a73a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a73c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a73e:	2b03      	cmp	r3, #3
 800a740:	d9e0      	bls.n	800a704 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a742:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a746:	2b04      	cmp	r3, #4
 800a748:	d101      	bne.n	800a74e <find_volume+0x18e>
 800a74a:	2301      	movs	r3, #1
 800a74c:	e284      	b.n	800ac58 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a74e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a752:	2b01      	cmp	r3, #1
 800a754:	d901      	bls.n	800a75a <find_volume+0x19a>
 800a756:	230d      	movs	r3, #13
 800a758:	e27e      	b.n	800ac58 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800a75a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a75e:	2b01      	cmp	r3, #1
 800a760:	f040 80fa 	bne.w	800a958 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800a764:	230b      	movs	r3, #11
 800a766:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a768:	e002      	b.n	800a770 <find_volume+0x1b0>
 800a76a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a76c:	3301      	adds	r3, #1
 800a76e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a770:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a772:	2b3f      	cmp	r3, #63	@ 0x3f
 800a774:	d806      	bhi.n	800a784 <find_volume+0x1c4>
 800a776:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a778:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a77a:	4413      	add	r3, r2
 800a77c:	3338      	adds	r3, #56	@ 0x38
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d0f2      	beq.n	800a76a <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800a784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a786:	2b3f      	cmp	r3, #63	@ 0x3f
 800a788:	d801      	bhi.n	800a78e <find_volume+0x1ce>
 800a78a:	230d      	movs	r3, #13
 800a78c:	e264      	b.n	800ac58 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800a78e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a790:	3338      	adds	r3, #56	@ 0x38
 800a792:	3368      	adds	r3, #104	@ 0x68
 800a794:	4618      	mov	r0, r3
 800a796:	f7fd f85b 	bl	8007850 <ld_word>
 800a79a:	4603      	mov	r3, r0
 800a79c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7a0:	d001      	beq.n	800a7a6 <find_volume+0x1e6>
 800a7a2:	230d      	movs	r3, #13
 800a7a4:	e258      	b.n	800ac58 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800a7a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7a8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800a7ac:	2b09      	cmp	r3, #9
 800a7ae:	d001      	beq.n	800a7b4 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800a7b0:	230d      	movs	r3, #13
 800a7b2:	e251      	b.n	800ac58 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800a7b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7b6:	3338      	adds	r3, #56	@ 0x38
 800a7b8:	3348      	adds	r3, #72	@ 0x48
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fd f883 	bl	80078c6 <ld_qword>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	68b9      	ldr	r1, [r7, #8]
 800a7ce:	1851      	adds	r1, r2, r1
 800a7d0:	6039      	str	r1, [r7, #0]
 800a7d2:	68f9      	ldr	r1, [r7, #12]
 800a7d4:	eb43 0101 	adc.w	r1, r3, r1
 800a7d8:	6079      	str	r1, [r7, #4]
 800a7da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7de:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800a7e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d301      	bcc.n	800a7ee <find_volume+0x22e>
 800a7ea:	230d      	movs	r3, #13
 800a7ec:	e234      	b.n	800ac58 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800a7ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7f0:	3338      	adds	r3, #56	@ 0x38
 800a7f2:	3354      	adds	r3, #84	@ 0x54
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f7fd f843 	bl	8007880 <ld_dword>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7fe:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800a800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a802:	f893 20a6 	ldrb.w	r2, [r3, #166]	@ 0xa6
 800a806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a808:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800a80a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a80c:	789b      	ldrb	r3, [r3, #2]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d001      	beq.n	800a816 <find_volume+0x256>
 800a812:	230d      	movs	r3, #13
 800a814:	e220      	b.n	800ac58 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800a816:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a818:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a81c:	461a      	mov	r2, r3
 800a81e:	2301      	movs	r3, #1
 800a820:	4093      	lsls	r3, r2
 800a822:	b29a      	uxth	r2, r3
 800a824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a826:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800a828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a82a:	895b      	ldrh	r3, [r3, #10]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <find_volume+0x274>
 800a830:	230d      	movs	r3, #13
 800a832:	e211      	b.n	800ac58 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800a834:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a836:	3338      	adds	r3, #56	@ 0x38
 800a838:	335c      	adds	r3, #92	@ 0x5c
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fd f820 	bl	8007880 <ld_dword>
 800a840:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800a842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a844:	4a03      	ldr	r2, [pc, #12]	@ (800a854 <find_volume+0x294>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d906      	bls.n	800a858 <find_volume+0x298>
 800a84a:	230d      	movs	r3, #13
 800a84c:	e204      	b.n	800ac58 <find_volume+0x698>
 800a84e:	bf00      	nop
 800a850:	2000100c 	.word	0x2000100c
 800a854:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800a858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a85a:	1c9a      	adds	r2, r3, #2
 800a85c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a85e:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800a860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a862:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a864:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800a866:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a868:	3338      	adds	r3, #56	@ 0x38
 800a86a:	3358      	adds	r3, #88	@ 0x58
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7fd f807 	bl	8007880 <ld_dword>
 800a872:	4602      	mov	r2, r0
 800a874:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a876:	441a      	add	r2, r3
 800a878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a87a:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800a87c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a87e:	3338      	adds	r3, #56	@ 0x38
 800a880:	3350      	adds	r3, #80	@ 0x50
 800a882:	4618      	mov	r0, r3
 800a884:	f7fc fffc 	bl	8007880 <ld_dword>
 800a888:	4602      	mov	r2, r0
 800a88a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a88c:	441a      	add	r2, r3
 800a88e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a890:	629a      	str	r2, [r3, #40]	@ 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800a892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a896:	2200      	movs	r2, #0
 800a898:	469a      	mov	sl, r3
 800a89a:	4693      	mov	fp, r2
 800a89c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a89e:	895b      	ldrh	r3, [r3, #10]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8a4:	fb02 f303 	mul.w	r3, r2, r3
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	4698      	mov	r8, r3
 800a8ac:	4691      	mov	r9, r2
 800a8ae:	eb1a 0408 	adds.w	r4, sl, r8
 800a8b2:	eb4b 0509 	adc.w	r5, fp, r9
 800a8b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a8ba:	42a2      	cmp	r2, r4
 800a8bc:	41ab      	sbcs	r3, r5
 800a8be:	d201      	bcs.n	800a8c4 <find_volume+0x304>
 800a8c0:	230d      	movs	r3, #13
 800a8c2:	e1c9      	b.n	800ac58 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800a8c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8c6:	3338      	adds	r3, #56	@ 0x38
 800a8c8:	3360      	adds	r3, #96	@ 0x60
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fc ffd8 	bl	8007880 <ld_dword>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8d4:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800a8d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a8de:	f7fd fc67 	bl	80081b0 <clust2sect>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800a8e8:	f7fd fbc6 	bl	8008078 <move_window>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d001      	beq.n	800a8f6 <find_volume+0x336>
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e1b0      	b.n	800ac58 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8fa:	e015      	b.n	800a928 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a8fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a900:	4413      	add	r3, r2
 800a902:	3338      	adds	r3, #56	@ 0x38
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b81      	cmp	r3, #129	@ 0x81
 800a908:	d10b      	bne.n	800a922 <find_volume+0x362>
 800a90a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a90c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a910:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a912:	3314      	adds	r3, #20
 800a914:	4413      	add	r3, r2
 800a916:	4618      	mov	r0, r3
 800a918:	f7fc ffb2 	bl	8007880 <ld_dword>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d007      	beq.n	800a932 <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800a922:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a924:	3320      	adds	r3, #32
 800a926:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a928:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a92a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a92e:	d3e5      	bcc.n	800a8fc <find_volume+0x33c>
 800a930:	e000      	b.n	800a934 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800a932:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800a934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a93a:	d101      	bne.n	800a940 <find_volume+0x380>
 800a93c:	230d      	movs	r3, #13
 800a93e:	e18b      	b.n	800ac58 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a942:	f04f 32ff 	mov.w	r2, #4294967295
 800a946:	619a      	str	r2, [r3, #24]
 800a948:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a94a:	699a      	ldr	r2, [r3, #24]
 800a94c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a94e:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800a950:	2304      	movs	r3, #4
 800a952:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800a956:	e167      	b.n	800ac28 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a958:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a95a:	3338      	adds	r3, #56	@ 0x38
 800a95c:	330b      	adds	r3, #11
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fc ff76 	bl	8007850 <ld_word>
 800a964:	4603      	mov	r3, r0
 800a966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a96a:	d001      	beq.n	800a970 <find_volume+0x3b0>
 800a96c:	230d      	movs	r3, #13
 800a96e:	e173      	b.n	800ac58 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a970:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a972:	3338      	adds	r3, #56	@ 0x38
 800a974:	3316      	adds	r3, #22
 800a976:	4618      	mov	r0, r3
 800a978:	f7fc ff6a 	bl	8007850 <ld_word>
 800a97c:	4603      	mov	r3, r0
 800a97e:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a982:	2b00      	cmp	r3, #0
 800a984:	d106      	bne.n	800a994 <find_volume+0x3d4>
 800a986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a988:	3338      	adds	r3, #56	@ 0x38
 800a98a:	3324      	adds	r3, #36	@ 0x24
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fc ff77 	bl	8007880 <ld_dword>
 800a992:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800a994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a996:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a998:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a99a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a99c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800a9a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a9a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9a6:	789b      	ldrb	r3, [r3, #2]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d005      	beq.n	800a9b8 <find_volume+0x3f8>
 800a9ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9ae:	789b      	ldrb	r3, [r3, #2]
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d001      	beq.n	800a9b8 <find_volume+0x3f8>
 800a9b4:	230d      	movs	r3, #13
 800a9b6:	e14f      	b.n	800ac58 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a9b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9ba:	789b      	ldrb	r3, [r3, #2]
 800a9bc:	461a      	mov	r2, r3
 800a9be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9c0:	fb02 f303 	mul.w	r3, r2, r3
 800a9c4:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a9c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a9d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9d4:	895b      	ldrh	r3, [r3, #10]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d008      	beq.n	800a9ec <find_volume+0x42c>
 800a9da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9dc:	895b      	ldrh	r3, [r3, #10]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9e2:	895b      	ldrh	r3, [r3, #10]
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <find_volume+0x430>
 800a9ec:	230d      	movs	r3, #13
 800a9ee:	e133      	b.n	800ac58 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a9f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9f2:	3338      	adds	r3, #56	@ 0x38
 800a9f4:	3311      	adds	r3, #17
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fc ff2a 	bl	8007850 <ld_word>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	461a      	mov	r2, r3
 800aa00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800aa04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa06:	891b      	ldrh	r3, [r3, #8]
 800aa08:	f003 030f 	and.w	r3, r3, #15
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <find_volume+0x456>
 800aa12:	230d      	movs	r3, #13
 800aa14:	e120      	b.n	800ac58 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800aa16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa18:	3338      	adds	r3, #56	@ 0x38
 800aa1a:	3313      	adds	r3, #19
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f7fc ff17 	bl	8007850 <ld_word>
 800aa22:	4603      	mov	r3, r0
 800aa24:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800aa26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d106      	bne.n	800aa3a <find_volume+0x47a>
 800aa2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa2e:	3338      	adds	r3, #56	@ 0x38
 800aa30:	3320      	adds	r3, #32
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fc ff24 	bl	8007880 <ld_dword>
 800aa38:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800aa3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa3c:	3338      	adds	r3, #56	@ 0x38
 800aa3e:	330e      	adds	r3, #14
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fc ff05 	bl	8007850 <ld_word>
 800aa46:	4603      	mov	r3, r0
 800aa48:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800aa4c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d101      	bne.n	800aa58 <find_volume+0x498>
 800aa54:	230d      	movs	r3, #13
 800aa56:	e0ff      	b.n	800ac58 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800aa58:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800aa5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa5e:	4413      	add	r3, r2
 800aa60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa62:	8912      	ldrh	r2, [r2, #8]
 800aa64:	0912      	lsrs	r2, r2, #4
 800aa66:	b292      	uxth	r2, r2
 800aa68:	4413      	add	r3, r2
 800aa6a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800aa6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d201      	bcs.n	800aa78 <find_volume+0x4b8>
 800aa74:	230d      	movs	r3, #13
 800aa76:	e0ef      	b.n	800ac58 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800aa78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa80:	8952      	ldrh	r2, [r2, #10]
 800aa82:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa86:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800aa88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <find_volume+0x4d2>
 800aa8e:	230d      	movs	r3, #13
 800aa90:	e0e2      	b.n	800ac58 <find_volume+0x698>
		fmt = FS_FAT32;
 800aa92:	2303      	movs	r3, #3
 800aa94:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800aa98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa9a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d802      	bhi.n	800aaa8 <find_volume+0x4e8>
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800aaa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaaa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d802      	bhi.n	800aab8 <find_volume+0x4f8>
 800aab2:	2301      	movs	r3, #1
 800aab4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800aab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaba:	1c9a      	adds	r2, r3, #2
 800aabc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aabe:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800aac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aac2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aac4:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800aac6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800aaca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aacc:	441a      	add	r2, r3
 800aace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aad0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800aad2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aad6:	441a      	add	r2, r3
 800aad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aada:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800aadc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800aae0:	2b03      	cmp	r3, #3
 800aae2:	d11e      	bne.n	800ab22 <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800aae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aae6:	3338      	adds	r3, #56	@ 0x38
 800aae8:	332a      	adds	r3, #42	@ 0x2a
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fc feb0 	bl	8007850 <ld_word>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <find_volume+0x53a>
 800aaf6:	230d      	movs	r3, #13
 800aaf8:	e0ae      	b.n	800ac58 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800aafa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aafc:	891b      	ldrh	r3, [r3, #8]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d001      	beq.n	800ab06 <find_volume+0x546>
 800ab02:	230d      	movs	r3, #13
 800ab04:	e0a8      	b.n	800ac58 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ab06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab08:	3338      	adds	r3, #56	@ 0x38
 800ab0a:	332c      	adds	r3, #44	@ 0x2c
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fc feb7 	bl	8007880 <ld_dword>
 800ab12:	4602      	mov	r2, r0
 800ab14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab16:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ab18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab20:	e01f      	b.n	800ab62 <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ab22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab24:	891b      	ldrh	r3, [r3, #8]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d101      	bne.n	800ab2e <find_volume+0x56e>
 800ab2a:	230d      	movs	r3, #13
 800ab2c:	e094      	b.n	800ac58 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ab2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab34:	441a      	add	r2, r3
 800ab36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab38:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ab3a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d103      	bne.n	800ab4a <find_volume+0x58a>
 800ab42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	e00a      	b.n	800ab60 <find_volume+0x5a0>
 800ab4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab4c:	69da      	ldr	r2, [r3, #28]
 800ab4e:	4613      	mov	r3, r2
 800ab50:	005b      	lsls	r3, r3, #1
 800ab52:	4413      	add	r3, r2
 800ab54:	085a      	lsrs	r2, r3, #1
 800ab56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab58:	69db      	ldr	r3, [r3, #28]
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ab60:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ab62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab64:	6a1a      	ldr	r2, [r3, #32]
 800ab66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab68:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800ab6c:	0a5b      	lsrs	r3, r3, #9
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d201      	bcs.n	800ab76 <find_volume+0x5b6>
 800ab72:	230d      	movs	r3, #13
 800ab74:	e070      	b.n	800ac58 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ab76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab78:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7c:	619a      	str	r2, [r3, #24]
 800ab7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab80:	699a      	ldr	r2, [r3, #24]
 800ab82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab84:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ab86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab88:	2280      	movs	r2, #128	@ 0x80
 800ab8a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ab8c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d149      	bne.n	800ac28 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ab94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab96:	3338      	adds	r3, #56	@ 0x38
 800ab98:	3330      	adds	r3, #48	@ 0x30
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fc fe58 	bl	8007850 <ld_word>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d140      	bne.n	800ac28 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800aba6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aba8:	3301      	adds	r3, #1
 800abaa:	4619      	mov	r1, r3
 800abac:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800abae:	f7fd fa63 	bl	8008078 <move_window>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d137      	bne.n	800ac28 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800abb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abba:	2200      	movs	r2, #0
 800abbc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800abbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abc0:	3338      	adds	r3, #56	@ 0x38
 800abc2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fc fe42 	bl	8007850 <ld_word>
 800abcc:	4603      	mov	r3, r0
 800abce:	461a      	mov	r2, r3
 800abd0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d127      	bne.n	800ac28 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800abd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abda:	3338      	adds	r3, #56	@ 0x38
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fc fe4f 	bl	8007880 <ld_dword>
 800abe2:	4603      	mov	r3, r0
 800abe4:	4a1f      	ldr	r2, [pc, #124]	@ (800ac64 <find_volume+0x6a4>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d11e      	bne.n	800ac28 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800abea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abec:	3338      	adds	r3, #56	@ 0x38
 800abee:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fc fe44 	bl	8007880 <ld_dword>
 800abf8:	4603      	mov	r3, r0
 800abfa:	4a1b      	ldr	r2, [pc, #108]	@ (800ac68 <find_volume+0x6a8>)
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d113      	bne.n	800ac28 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ac00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac02:	3338      	adds	r3, #56	@ 0x38
 800ac04:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fc fe39 	bl	8007880 <ld_dword>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac12:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ac14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac16:	3338      	adds	r3, #56	@ 0x38
 800ac18:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7fc fe2f 	bl	8007880 <ld_dword>
 800ac22:	4602      	mov	r2, r0
 800ac24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac26:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ac28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac2a:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800ac2e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ac30:	4b0e      	ldr	r3, [pc, #56]	@ (800ac6c <find_volume+0x6ac>)
 800ac32:	881b      	ldrh	r3, [r3, #0]
 800ac34:	3301      	adds	r3, #1
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	4b0c      	ldr	r3, [pc, #48]	@ (800ac6c <find_volume+0x6ac>)
 800ac3a:	801a      	strh	r2, [r3, #0]
 800ac3c:	4b0b      	ldr	r3, [pc, #44]	@ (800ac6c <find_volume+0x6ac>)
 800ac3e:	881a      	ldrh	r2, [r3, #0]
 800ac40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac42:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ac44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac46:	4a0a      	ldr	r2, [pc, #40]	@ (800ac70 <find_volume+0x6b0>)
 800ac48:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800ac4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac4c:	4a09      	ldr	r2, [pc, #36]	@ (800ac74 <find_volume+0x6b4>)
 800ac4e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ac50:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ac52:	f7fd f9a9 	bl	8007fa8 <clear_lock>
#endif
	return FR_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3770      	adds	r7, #112	@ 0x70
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac62:	bf00      	nop
 800ac64:	41615252 	.word	0x41615252
 800ac68:	61417272 	.word	0x61417272
 800ac6c:	20001010 	.word	0x20001010
 800ac70:	20001284 	.word	0x20001284
 800ac74:	20001024 	.word	0x20001024

0800ac78 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ac82:	2309      	movs	r3, #9
 800ac84:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d01c      	beq.n	800acc6 <validate+0x4e>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d018      	beq.n	800acc6 <validate+0x4e>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d013      	beq.n	800acc6 <validate+0x4e>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	889a      	ldrh	r2, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	88db      	ldrh	r3, [r3, #6]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d10c      	bne.n	800acc6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	785b      	ldrb	r3, [r3, #1]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fc fd10 	bl	80076d8 <disk_status>
 800acb8:	4603      	mov	r3, r0
 800acba:	f003 0301 	and.w	r3, r3, #1
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d101      	bne.n	800acc6 <validate+0x4e>
			res = FR_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d102      	bne.n	800acd2 <validate+0x5a>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	e000      	b.n	800acd4 <validate+0x5c>
 800acd2:	2300      	movs	r3, #0
 800acd4:	683a      	ldr	r2, [r7, #0]
 800acd6:	6013      	str	r3, [r2, #0]
	return res;
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
	...

0800ace4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b088      	sub	sp, #32
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	4613      	mov	r3, r2
 800acf0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800acf6:	f107 0310 	add.w	r3, r7, #16
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff fbb7 	bl	800a46e <get_ldnumber>
 800ad00:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	da01      	bge.n	800ad0c <f_mount+0x28>
 800ad08:	230b      	movs	r3, #11
 800ad0a:	e02b      	b.n	800ad64 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ad0c:	4a17      	ldr	r2, [pc, #92]	@ (800ad6c <f_mount+0x88>)
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad14:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d005      	beq.n	800ad28 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ad1c:	69b8      	ldr	r0, [r7, #24]
 800ad1e:	f7fd f943 	bl	8007fa8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	2200      	movs	r2, #0
 800ad26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d002      	beq.n	800ad34 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	490d      	ldr	r1, [pc, #52]	@ (800ad6c <f_mount+0x88>)
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d002      	beq.n	800ad4a <f_mount+0x66>
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d001      	beq.n	800ad4e <f_mount+0x6a>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	e00a      	b.n	800ad64 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ad4e:	f107 010c 	add.w	r1, r7, #12
 800ad52:	f107 0308 	add.w	r3, r7, #8
 800ad56:	2200      	movs	r2, #0
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff fc31 	bl	800a5c0 <find_volume>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3720      	adds	r7, #32
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	2000100c 	.word	0x2000100c

0800ad70 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ad70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad74:	b0a6      	sub	sp, #152	@ 0x98
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	61f8      	str	r0, [r7, #28]
 800ad7a:	61b9      	str	r1, [r7, #24]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <f_open+0x1a>
 800ad86:	2309      	movs	r3, #9
 800ad88:	e2aa      	b.n	800b2e0 <f_open+0x570>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad90:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800ad92:	7dfa      	ldrb	r2, [r7, #23]
 800ad94:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800ad98:	f107 0318 	add.w	r3, r7, #24
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7ff fc0f 	bl	800a5c0 <find_volume>
 800ada2:	4603      	mov	r3, r0
 800ada4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	if (res == FR_OK) {
 800ada8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800adac:	2b00      	cmp	r3, #0
 800adae:	f040 828e 	bne.w	800b2ce <f_open+0x55e>
		dj.obj.fs = fs;
 800adb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb4:	62bb      	str	r3, [r7, #40]	@ 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800adb6:	69ba      	ldr	r2, [r7, #24]
 800adb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800adbc:	4611      	mov	r1, r2
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff faac 	bl	800a31c <follow_path>
 800adc4:	4603      	mov	r3, r0
 800adc6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800adca:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800adce:	2b00      	cmp	r3, #0
 800add0:	d118      	bne.n	800ae04 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800add2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800add6:	b25b      	sxtb	r3, r3
 800add8:	2b00      	cmp	r3, #0
 800adda:	da03      	bge.n	800ade4 <f_open+0x74>
				res = FR_INVALID_NAME;
 800addc:	2306      	movs	r3, #6
 800adde:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800ade2:	e00f      	b.n	800ae04 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ade4:	7dfb      	ldrb	r3, [r7, #23]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	bf8c      	ite	hi
 800adea:	2301      	movhi	r3, #1
 800adec:	2300      	movls	r3, #0
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	461a      	mov	r2, r3
 800adf2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800adf6:	4611      	mov	r1, r2
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7fc ff8d 	bl	8007d18 <chk_lock>
 800adfe:	4603      	mov	r3, r0
 800ae00:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ae04:	7dfb      	ldrb	r3, [r7, #23]
 800ae06:	f003 031c 	and.w	r3, r3, #28
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 8115 	beq.w	800b03a <f_open+0x2ca>
			if (res != FR_OK) {					/* No file, create new */
 800ae10:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d017      	beq.n	800ae48 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ae18:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ae1c:	2b04      	cmp	r3, #4
 800ae1e:	d10e      	bne.n	800ae3e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ae20:	f7fc ffd6 	bl	8007dd0 <enq_lock>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d006      	beq.n	800ae38 <f_open+0xc8>
 800ae2a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fe ff16 	bl	8009c60 <dir_register>
 800ae34:	4603      	mov	r3, r0
 800ae36:	e000      	b.n	800ae3a <f_open+0xca>
 800ae38:	2312      	movs	r3, #18
 800ae3a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ae3e:	7dfb      	ldrb	r3, [r7, #23]
 800ae40:	f043 0308 	orr.w	r3, r3, #8
 800ae44:	75fb      	strb	r3, [r7, #23]
 800ae46:	e011      	b.n	800ae6c <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ae48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae4c:	f003 0311 	and.w	r3, r3, #17
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d003      	beq.n	800ae5c <f_open+0xec>
					res = FR_DENIED;
 800ae54:	2307      	movs	r3, #7
 800ae56:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800ae5a:	e007      	b.n	800ae6c <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	f003 0304 	and.w	r3, r3, #4
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d002      	beq.n	800ae6c <f_open+0xfc>
 800ae66:	2308      	movs	r3, #8
 800ae68:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ae6c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f040 80fe 	bne.w	800b072 <f_open+0x302>
 800ae76:	7dfb      	ldrb	r3, [r7, #23]
 800ae78:	f003 0308 	and.w	r3, r3, #8
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	f000 80f8 	beq.w	800b072 <f_open+0x302>
				dw = GET_FATTIME();
 800ae82:	f7fc fc21 	bl	80076c8 <get_fattime>
 800ae86:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	2b04      	cmp	r3, #4
 800ae90:	f040 8084 	bne.w	800af9c <f_open+0x22c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800ae94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9c:	691b      	ldr	r3, [r3, #16]
 800ae9e:	3334      	adds	r3, #52	@ 0x34
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7fc fced 	bl	8007880 <ld_dword>
 800aea6:	4602      	mov	r2, r0
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800aeac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	3338      	adds	r3, #56	@ 0x38
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fc fd07 	bl	80078c6 <ld_qword>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	69f9      	ldr	r1, [r7, #28]
 800aebe:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800aec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	3321      	adds	r3, #33	@ 0x21
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	f003 0302 	and.w	r3, r3, #2
 800aece:	b2da      	uxtb	r2, r3
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	2200      	movs	r2, #0
 800aed8:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800aeda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	3308      	adds	r3, #8
 800aee0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fc fde4 	bl	8007ab2 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800aeea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	3314      	adds	r3, #20
 800aef0:	2200      	movs	r2, #0
 800aef2:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800aef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	330c      	adds	r3, #12
 800aefa:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800aefe:	4618      	mov	r0, r3
 800af00:	f7fc fdd7 	bl	8007ab2 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800af04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	3315      	adds	r3, #21
 800af0a:	2200      	movs	r2, #0
 800af0c:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800af0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af10:	691b      	ldr	r3, [r3, #16]
 800af12:	3304      	adds	r3, #4
 800af14:	2220      	movs	r2, #32
 800af16:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800af18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	3334      	adds	r3, #52	@ 0x34
 800af1e:	2100      	movs	r1, #0
 800af20:	4618      	mov	r0, r3
 800af22:	f7fc fdc6 	bl	8007ab2 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800af26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800af2e:	f04f 0200 	mov.w	r2, #0
 800af32:	f04f 0300 	mov.w	r3, #0
 800af36:	4608      	mov	r0, r1
 800af38:	f7fc fde7 	bl	8007b0a <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800af3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800af44:	f04f 0200 	mov.w	r2, #0
 800af48:	f04f 0300 	mov.w	r3, #0
 800af4c:	4608      	mov	r0, r1
 800af4e:	f7fc fddc 	bl	8007b0a <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800af52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	3321      	adds	r3, #33	@ 0x21
 800af58:	2201      	movs	r2, #1
 800af5a:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800af5c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800af60:	4618      	mov	r0, r3
 800af62:	f7fe fbc9 	bl	80096f8 <store_xdir>
 800af66:	4603      	mov	r3, r0
 800af68:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800af6c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800af70:	2b00      	cmp	r3, #0
 800af72:	d17e      	bne.n	800b072 <f_open+0x302>
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d07a      	beq.n	800b072 <f_open+0x302>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800af7c:	69f8      	ldr	r0, [r7, #28]
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	2200      	movs	r2, #0
 800af84:	4619      	mov	r1, r3
 800af86:	f7fd fc81 	bl	800888c <remove_chain>
 800af8a:	4603      	mov	r3, r0
 800af8c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	689a      	ldr	r2, [r3, #8]
 800af94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af96:	3a01      	subs	r2, #1
 800af98:	615a      	str	r2, [r3, #20]
 800af9a:	e06a      	b.n	800b072 <f_open+0x302>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800af9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af9e:	330e      	adds	r3, #14
 800afa0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7fc fd84 	bl	8007ab2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800afaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afac:	3316      	adds	r3, #22
 800afae:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fc fd7d 	bl	8007ab2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800afb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afba:	330b      	adds	r3, #11
 800afbc:	2220      	movs	r2, #32
 800afbe:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800afc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800afc4:	4611      	mov	r1, r2
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fe f810 	bl	8008fec <ld_clust>
 800afcc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800afd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800afd4:	2200      	movs	r2, #0
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7fe f827 	bl	800902a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800afdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afde:	331c      	adds	r3, #28
 800afe0:	2100      	movs	r1, #0
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fc fd65 	bl	8007ab2 <st_dword>
					fs->wflag = 1;
 800afe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afea:	2201      	movs	r2, #1
 800afec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800afee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d03d      	beq.n	800b072 <f_open+0x302>
						dw = fs->winsect;
 800aff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800affa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						res = remove_chain(&dj.obj, cl, 0);
 800affe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b002:	2200      	movs	r2, #0
 800b004:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800b008:	4618      	mov	r0, r3
 800b00a:	f7fd fc3f 	bl	800888c <remove_chain>
 800b00e:	4603      	mov	r3, r0
 800b010:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
						if (res == FR_OK) {
 800b014:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d12a      	bne.n	800b072 <f_open+0x302>
							res = move_window(fs, dw);
 800b01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 800b022:	4618      	mov	r0, r3
 800b024:	f7fd f828 	bl	8008078 <move_window>
 800b028:	4603      	mov	r3, r0
 800b02a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b030:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b034:	3a01      	subs	r2, #1
 800b036:	615a      	str	r2, [r3, #20]
 800b038:	e01b      	b.n	800b072 <f_open+0x302>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b03a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d117      	bne.n	800b072 <f_open+0x302>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b042:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b046:	f003 0310 	and.w	r3, r3, #16
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <f_open+0x2e6>
					res = FR_NO_FILE;
 800b04e:	2304      	movs	r3, #4
 800b050:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800b054:	e00d      	b.n	800b072 <f_open+0x302>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b056:	7dfb      	ldrb	r3, [r7, #23]
 800b058:	f003 0302 	and.w	r3, r3, #2
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d008      	beq.n	800b072 <f_open+0x302>
 800b060:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b064:	f003 0301 	and.w	r3, r3, #1
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d002      	beq.n	800b072 <f_open+0x302>
						res = FR_DENIED;
 800b06c:	2307      	movs	r3, #7
 800b06e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 800b072:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800b076:	2b00      	cmp	r3, #0
 800b078:	d126      	bne.n	800b0c8 <f_open+0x358>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	f003 0308 	and.w	r3, r3, #8
 800b080:	2b00      	cmp	r3, #0
 800b082:	d003      	beq.n	800b08c <f_open+0x31c>
				mode |= FA_MODIFIED;
 800b084:	7dfb      	ldrb	r3, [r7, #23]
 800b086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b08a:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800b094:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	bf8c      	ite	hi
 800b0a0:	2301      	movhi	r3, #1
 800b0a2:	2300      	movls	r3, #0
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fc feb0 	bl	8007e14 <inc_lock>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d102      	bne.n	800b0c8 <f_open+0x358>
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b0c8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f040 80fe 	bne.w	800b2ce <f_open+0x55e>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	2b04      	cmp	r3, #4
 800b0d8:	d12d      	bne.n	800b136 <f_open+0x3c6>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800b0da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800b0e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b0ea:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b0ee:	431a      	orrs	r2, r3
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800b0f4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	3334      	adds	r3, #52	@ 0x34
 800b100:	4618      	mov	r0, r3
 800b102:	f7fc fbbd 	bl	8007880 <ld_dword>
 800b106:	4602      	mov	r2, r0
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800b10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	3338      	adds	r3, #56	@ 0x38
 800b112:	4618      	mov	r0, r3
 800b114:	f7fc fbd7 	bl	80078c6 <ld_qword>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	69f9      	ldr	r1, [r7, #28]
 800b11e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800b122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	3321      	adds	r3, #33	@ 0x21
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	f003 0302 	and.w	r3, r3, #2
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	71da      	strb	r2, [r3, #7]
 800b134:	e016      	b.n	800b164 <f_open+0x3f4>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b138:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b13a:	4611      	mov	r1, r2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fd ff55 	bl	8008fec <ld_clust>
 800b142:	4602      	mov	r2, r0
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b14a:	331c      	adds	r3, #28
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fc fb97 	bl	8007880 <ld_dword>
 800b152:	4603      	mov	r3, r0
 800b154:	2200      	movs	r2, #0
 800b156:	60bb      	str	r3, [r7, #8]
 800b158:	60fa      	str	r2, [r7, #12]
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b160:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	2200      	movs	r2, #0
 800b168:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b16a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	88da      	ldrh	r2, [r3, #6]
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	7dfa      	ldrb	r2, [r7, #23]
 800b17c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	2200      	movs	r2, #0
 800b18c:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b18e:	69f9      	ldr	r1, [r7, #28]
 800b190:	f04f 0200 	mov.w	r2, #0
 800b194:	f04f 0300 	mov.w	r3, #0
 800b198:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	3354      	adds	r3, #84	@ 0x54
 800b1a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fc fd58 	bl	8007c5c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b1ac:	7dfb      	ldrb	r3, [r7, #23]
 800b1ae:	f003 0320 	and.w	r3, r3, #32
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f000 808b 	beq.w	800b2ce <f_open+0x55e>
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	f000 8085 	beq.w	800b2ce <f_open+0x55e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b1ca:	69f9      	ldr	r1, [r7, #28]
 800b1cc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d2:	895b      	ldrh	r3, [r3, #10]
 800b1d4:	025b      	lsls	r3, r3, #9
 800b1d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b1e6:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800b1ea:	e026      	b.n	800b23a <f_open+0x4ca>
					clst = get_fat(&fp->obj, clst);
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fc fffc 	bl	80081f0 <get_fat>
 800b1f8:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
					if (clst <= 1) res = FR_INT_ERR;
 800b1fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b200:	2b01      	cmp	r3, #1
 800b202:	d802      	bhi.n	800b20a <f_open+0x49a>
 800b204:	2302      	movs	r3, #2
 800b206:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b20a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b212:	d102      	bne.n	800b21a <f_open+0x4aa>
 800b214:	2301      	movs	r3, #1
 800b216:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b21a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b21c:	2200      	movs	r2, #0
 800b21e:	469a      	mov	sl, r3
 800b220:	4693      	mov	fp, r2
 800b222:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800b226:	ebb2 010a 	subs.w	r1, r2, sl
 800b22a:	6039      	str	r1, [r7, #0]
 800b22c:	eb63 030b 	sbc.w	r3, r3, fp
 800b230:	607b      	str	r3, [r7, #4]
 800b232:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b236:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 800b23a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d109      	bne.n	800b256 <f_open+0x4e6>
 800b242:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b244:	2200      	movs	r2, #0
 800b246:	4698      	mov	r8, r3
 800b248:	4691      	mov	r9, r2
 800b24a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800b24e:	4590      	cmp	r8, r2
 800b250:	eb79 0303 	sbcs.w	r3, r9, r3
 800b254:	d3ca      	bcc.n	800b1ec <f_open+0x47c>
				}
				fp->clust = clst;
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800b25c:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b25e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800b262:	2b00      	cmp	r3, #0
 800b264:	d133      	bne.n	800b2ce <f_open+0x55e>
 800b266:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800b26a:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800b26e:	2500      	movs	r5, #0
 800b270:	ea54 0305 	orrs.w	r3, r4, r5
 800b274:	d02b      	beq.n	800b2ce <f_open+0x55e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b278:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fc ff97 	bl	80081b0 <clust2sect>
 800b282:	67b8      	str	r0, [r7, #120]	@ 0x78
 800b284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b286:	2b00      	cmp	r3, #0
 800b288:	d103      	bne.n	800b292 <f_open+0x522>
						res = FR_INT_ERR;
 800b28a:	2302      	movs	r3, #2
 800b28c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 800b290:	e01d      	b.n	800b2ce <f_open+0x55e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b292:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800b296:	f04f 0200 	mov.w	r2, #0
 800b29a:	f04f 0300 	mov.w	r3, #0
 800b29e:	0a42      	lsrs	r2, r0, #9
 800b2a0:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800b2a4:	0a4b      	lsrs	r3, r1, #9
 800b2a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b2a8:	441a      	add	r2, r3
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b0:	7858      	ldrb	r0, [r3, #1]
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2bc:	2301      	movs	r3, #1
 800b2be:	f7fc fa32 	bl	8007726 <disk_read>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <f_open+0x55e>
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b2ce:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d002      	beq.n	800b2dc <f_open+0x56c>
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b2dc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3798      	adds	r7, #152	@ 0x98
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b2ea <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800b2ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ee:	b095      	sub	sp, #84	@ 0x54
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	61f8      	str	r0, [r7, #28]
 800b2f4:	61b9      	str	r1, [r7, #24]
 800b2f6:	617a      	str	r2, [r7, #20]
 800b2f8:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c


	*br = 0;	/* Clear read byte counter */
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	2200      	movs	r2, #0
 800b302:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800b30a:	4611      	mov	r1, r2
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff fcb3 	bl	800ac78 <validate>
 800b312:	4603      	mov	r3, r0
 800b314:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b318:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d108      	bne.n	800b332 <f_read+0x48>
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b326:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800b32a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d002      	beq.n	800b338 <f_read+0x4e>
 800b332:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800b336:	e14b      	b.n	800b5d0 <f_read+0x2e6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	2b00      	cmp	r3, #0
 800b344:	d101      	bne.n	800b34a <f_read+0x60>
 800b346:	2307      	movs	r3, #7
 800b348:	e142      	b.n	800b5d0 <f_read+0x2e6>
	remain = fp->obj.objsize - fp->fptr;
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b356:	1a86      	subs	r6, r0, r2
 800b358:	603e      	str	r6, [r7, #0]
 800b35a:	eb61 0303 	sbc.w	r3, r1, r3
 800b35e:	607b      	str	r3, [r7, #4]
 800b360:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b364:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	2200      	movs	r2, #0
 800b36c:	469a      	mov	sl, r3
 800b36e:	4693      	mov	fp, r2
 800b370:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800b374:	4552      	cmp	r2, sl
 800b376:	eb73 030b 	sbcs.w	r3, r3, fp
 800b37a:	f080 8124 	bcs.w	800b5c6 <f_read+0x2dc>
 800b37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b380:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800b382:	e120      	b.n	800b5c6 <f_read+0x2dc>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b38a:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800b38e:	2500      	movs	r5, #0
 800b390:	ea54 0305 	orrs.w	r3, r4, r5
 800b394:	f040 80d9 	bne.w	800b54a <f_read+0x260>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b39e:	f04f 0200 	mov.w	r2, #0
 800b3a2:	f04f 0300 	mov.w	r3, #0
 800b3a6:	0a42      	lsrs	r2, r0, #9
 800b3a8:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800b3ac:	0a4b      	lsrs	r3, r1, #9
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b0:	895b      	ldrh	r3, [r3, #10]
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 800b3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d132      	bne.n	800b424 <f_read+0x13a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	d103      	bne.n	800b3d0 <f_read+0xe6>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3ce:	e013      	b.n	800b3f8 <f_read+0x10e>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d007      	beq.n	800b3e8 <f_read+0xfe>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b3de:	69f8      	ldr	r0, [r7, #28]
 800b3e0:	f7fd fc09 	bl	8008bf6 <clmt_clust>
 800b3e4:	64b8      	str	r0, [r7, #72]	@ 0x48
 800b3e6:	e007      	b.n	800b3f8 <f_read+0x10e>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b3e8:	69fa      	ldr	r2, [r7, #28]
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	f7fc fefd 	bl	80081f0 <get_fat>
 800b3f6:	64b8      	str	r0, [r7, #72]	@ 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b3f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d805      	bhi.n	800b40a <f_read+0x120>
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	2202      	movs	r2, #2
 800b402:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b406:	2302      	movs	r3, #2
 800b408:	e0e2      	b.n	800b5d0 <f_read+0x2e6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b40a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b410:	d105      	bne.n	800b41e <f_read+0x134>
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b41a:	2301      	movs	r3, #1
 800b41c:	e0d8      	b.n	800b5d0 <f_read+0x2e6>
				fp->clust = clst;				/* Update current cluster */
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b422:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b42a:	4619      	mov	r1, r3
 800b42c:	4610      	mov	r0, r2
 800b42e:	f7fc febf 	bl	80081b0 <clust2sect>
 800b432:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b436:	2b00      	cmp	r3, #0
 800b438:	d105      	bne.n	800b446 <f_read+0x15c>
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	2202      	movs	r2, #2
 800b43e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b442:	2302      	movs	r3, #2
 800b444:	e0c4      	b.n	800b5d0 <f_read+0x2e6>
			sect += csect;
 800b446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b44a:	4413      	add	r3, r2
 800b44c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	0a5b      	lsrs	r3, r3, #9
 800b452:	643b      	str	r3, [r7, #64]	@ 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b456:	2b00      	cmp	r3, #0
 800b458:	d03b      	beq.n	800b4d2 <f_read+0x1e8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b45a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b45c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b45e:	4413      	add	r3, r2
 800b460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b462:	8952      	ldrh	r2, [r2, #10]
 800b464:	4293      	cmp	r3, r2
 800b466:	d905      	bls.n	800b474 <f_read+0x18a>
					cc = fs->csize - csect;
 800b468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46a:	895b      	ldrh	r3, [r3, #10]
 800b46c:	461a      	mov	r2, r3
 800b46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	643b      	str	r3, [r7, #64]	@ 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b476:	7858      	ldrb	r0, [r3, #1]
 800b478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b47a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b47c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b47e:	f7fc f952 	bl	8007726 <disk_read>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d005      	beq.n	800b494 <f_read+0x1aa>
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b490:	2301      	movs	r3, #1
 800b492:	e09d      	b.n	800b5d0 <f_read+0x2e6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b49a:	b25b      	sxtb	r3, r3
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	da14      	bge.n	800b4ca <f_read+0x1e0>
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a6:	1ad3      	subs	r3, r2, r3
 800b4a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d90d      	bls.n	800b4ca <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b4:	1ad3      	subs	r3, r2, r3
 800b4b6:	025b      	lsls	r3, r3, #9
 800b4b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b4ba:	18d0      	adds	r0, r2, r3
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	3354      	adds	r3, #84	@ 0x54
 800b4c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	f7fc fba8 	bl	8007c1a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b4ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4cc:	025b      	lsls	r3, r3, #9
 800b4ce:	647b      	str	r3, [r7, #68]	@ 0x44
				continue;
 800b4d0:	e059      	b.n	800b586 <f_read+0x29c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d033      	beq.n	800b544 <f_read+0x25a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b4e2:	b25b      	sxtb	r3, r3
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	da1b      	bge.n	800b520 <f_read+0x236>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ea:	7858      	ldrb	r0, [r3, #1]
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	f7fc f944 	bl	8007784 <disk_write>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d005      	beq.n	800b50e <f_read+0x224>
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	2201      	movs	r2, #1
 800b506:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b50a:	2301      	movs	r3, #1
 800b50c:	e060      	b.n	800b5d0 <f_read+0x2e6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b518:	b2da      	uxtb	r2, r3
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b522:	7858      	ldrb	r0, [r3, #1]
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b52a:	2301      	movs	r3, #1
 800b52c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b52e:	f7fc f8fa 	bl	8007726 <disk_read>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d005      	beq.n	800b544 <f_read+0x25a>
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b540:	2301      	movs	r3, #1
 800b542:	e045      	b.n	800b5d0 <f_read+0x2e6>
			}
#endif
			fp->sect = sect;
 800b544:	69fb      	ldr	r3, [r7, #28]
 800b546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b548:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b550:	4613      	mov	r3, r2
 800b552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b556:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b55a:	647b      	str	r3, [r7, #68]	@ 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b55c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	429a      	cmp	r2, r3
 800b562:	d901      	bls.n	800b568 <f_read+0x27e>
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	647b      	str	r3, [r7, #68]	@ 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b568:	69fb      	ldr	r3, [r7, #28]
 800b56a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b574:	4613      	mov	r3, r2
 800b576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b57a:	440b      	add	r3, r1
 800b57c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b57e:	4619      	mov	r1, r3
 800b580:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b582:	f7fc fb4a 	bl	8007c1a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b586:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b58a:	4413      	add	r3, r2
 800b58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b58e:	69fb      	ldr	r3, [r7, #28]
 800b590:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b594:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b596:	2000      	movs	r0, #0
 800b598:	4688      	mov	r8, r1
 800b59a:	4681      	mov	r9, r0
 800b59c:	eb12 0108 	adds.w	r1, r2, r8
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	eb43 0309 	adc.w	r3, r3, r9
 800b5a6:	60fb      	str	r3, [r7, #12]
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b5ae:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5b8:	441a      	add	r2, r3
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	601a      	str	r2, [r3, #0]
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f47f aedb 	bne.w	800b384 <f_read+0x9a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3754      	adds	r7, #84	@ 0x54
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b5da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5de:	b08d      	sub	sp, #52	@ 0x34
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	607a      	str	r2, [r7, #4]
 800b5e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f107 0210 	add.w	r2, r7, #16
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7ff fb3b 	bl	800ac78 <validate>
 800b602:	4603      	mov	r3, r0
 800b604:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b608:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d108      	bne.n	800b622 <f_write+0x48>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b616:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b61a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <f_write+0x4e>
 800b622:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b626:	e187      	b.n	800b938 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b62e:	f003 0302 	and.w	r3, r3, #2
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <f_write+0x60>
 800b636:	2307      	movs	r3, #7
 800b638:	e17e      	b.n	800b938 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	2b04      	cmp	r3, #4
 800b640:	f000 816a 	beq.w	800b918 <f_write+0x33e>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	18d1      	adds	r1, r2, r3
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b654:	4613      	mov	r3, r2
 800b656:	4299      	cmp	r1, r3
 800b658:	f080 815e 	bcs.w	800b918 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b662:	4613      	mov	r3, r2
 800b664:	43db      	mvns	r3, r3
 800b666:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b668:	e156      	b.n	800b918 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b670:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800b674:	2500      	movs	r5, #0
 800b676:	ea54 0305 	orrs.w	r3, r4, r5
 800b67a:	f040 80fb 	bne.w	800b874 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b684:	f04f 0200 	mov.w	r2, #0
 800b688:	f04f 0300 	mov.w	r3, #0
 800b68c:	0a42      	lsrs	r2, r0, #9
 800b68e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800b692:	0a4b      	lsrs	r3, r1, #9
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	895b      	ldrh	r3, [r3, #10]
 800b698:	3b01      	subs	r3, #1
 800b69a:	4013      	ands	r3, r2
 800b69c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d146      	bne.n	800b732 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	d10c      	bne.n	800b6c8 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d11a      	bne.n	800b6f0 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2100      	movs	r1, #0
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7fd f998 	bl	80089f4 <create_chain>
 800b6c4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b6c6:	e013      	b.n	800b6f0 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d007      	beq.n	800b6e0 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f7fd fa8d 	bl	8008bf6 <clmt_clust>
 800b6dc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b6de:	e007      	b.n	800b6f0 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	4610      	mov	r0, r2
 800b6ea:	f7fd f983 	bl	80089f4 <create_chain>
 800b6ee:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f000 8115 	beq.w	800b922 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fa:	2b01      	cmp	r3, #1
 800b6fc:	d105      	bne.n	800b70a <f_write+0x130>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2202      	movs	r2, #2
 800b702:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b706:	2302      	movs	r3, #2
 800b708:	e116      	b.n	800b938 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b710:	d105      	bne.n	800b71e <f_write+0x144>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b71a:	2301      	movs	r3, #1
 800b71c:	e10c      	b.n	800b938 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b722:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d102      	bne.n	800b732 <f_write+0x158>
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b730:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b738:	b25b      	sxtb	r3, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	da1b      	bge.n	800b776 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	7858      	ldrb	r0, [r3, #1]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b74c:	2301      	movs	r3, #1
 800b74e:	f7fc f819 	bl	8007784 <disk_write>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d005      	beq.n	800b764 <f_write+0x18a>
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b760:	2301      	movs	r3, #1
 800b762:	e0e9      	b.n	800b938 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b76a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b76e:	b2da      	uxtb	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b776:	693a      	ldr	r2, [r7, #16]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b77c:	4619      	mov	r1, r3
 800b77e:	4610      	mov	r0, r2
 800b780:	f7fc fd16 	bl	80081b0 <clust2sect>
 800b784:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d105      	bne.n	800b798 <f_write+0x1be>
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	2202      	movs	r2, #2
 800b790:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b794:	2302      	movs	r3, #2
 800b796:	e0cf      	b.n	800b938 <f_write+0x35e>
			sect += csect;
 800b798:	697a      	ldr	r2, [r7, #20]
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	4413      	add	r3, r2
 800b79e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	0a5b      	lsrs	r3, r3, #9
 800b7a4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d03f      	beq.n	800b82c <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b7ac:	69ba      	ldr	r2, [r7, #24]
 800b7ae:	6a3b      	ldr	r3, [r7, #32]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	8952      	ldrh	r2, [r2, #10]
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d905      	bls.n	800b7c6 <f_write+0x1ec>
					cc = fs->csize - csect;
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	895b      	ldrh	r3, [r3, #10]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	7858      	ldrb	r0, [r3, #1]
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	69f9      	ldr	r1, [r7, #28]
 800b7d0:	f7fb ffd8 	bl	8007784 <disk_write>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d005      	beq.n	800b7e6 <f_write+0x20c>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e0a8      	b.n	800b938 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	6a3a      	ldr	r2, [r7, #32]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d917      	bls.n	800b824 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	1ad3      	subs	r3, r2, r3
 800b802:	025b      	lsls	r3, r3, #9
 800b804:	69fa      	ldr	r2, [r7, #28]
 800b806:	4413      	add	r3, r2
 800b808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b80c:	4619      	mov	r1, r3
 800b80e:	f7fc fa04 	bl	8007c1a <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	025b      	lsls	r3, r3, #9
 800b828:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b82a:	e04a      	b.n	800b8c2 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b830:	697a      	ldr	r2, [r7, #20]
 800b832:	429a      	cmp	r2, r3
 800b834:	d01b      	beq.n	800b86e <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b842:	4290      	cmp	r0, r2
 800b844:	eb71 0303 	sbcs.w	r3, r1, r3
 800b848:	d211      	bcs.n	800b86e <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	7858      	ldrb	r0, [r3, #1]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b854:	2301      	movs	r3, #1
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	f7fb ff65 	bl	8007726 <disk_read>
 800b85c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d005      	beq.n	800b86e <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2201      	movs	r2, #1
 800b866:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800b86a:	2301      	movs	r3, #1
 800b86c:	e064      	b.n	800b938 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	697a      	ldr	r2, [r7, #20]
 800b872:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b87a:	4613      	mov	r3, r2
 800b87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b880:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800b884:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d901      	bls.n	800b892 <f_write+0x2b8>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b89e:	4613      	mov	r3, r2
 800b8a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a4:	440b      	add	r3, r1
 800b8a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8a8:	69f9      	ldr	r1, [r7, #28]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fc f9b5 	bl	8007c1a <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b8ba:	b2da      	uxtb	r2, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b8c2:	69fa      	ldr	r2, [r7, #28]
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c6:	4413      	add	r3, r2
 800b8c8:	61fb      	str	r3, [r7, #28]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800b8d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	4688      	mov	r8, r1
 800b8d6:	4681      	mov	r9, r0
 800b8d8:	eb12 0a08 	adds.w	sl, r2, r8
 800b8dc:	eb43 0b09 	adc.w	fp, r3, r9
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b8ec:	68f9      	ldr	r1, [r7, #12]
 800b8ee:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	@ 0x38
 800b8f2:	4282      	cmp	r2, r0
 800b8f4:	eb73 0601 	sbcs.w	r6, r3, r1
 800b8f8:	d201      	bcs.n	800b8fe <f_write+0x324>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	68f9      	ldr	r1, [r7, #12]
 800b900:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90a:	441a      	add	r2, r3
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	601a      	str	r2, [r3, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f47f aea5 	bne.w	800b66a <f_write+0x90>
 800b920:	e000      	b.n	800b924 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b922:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b92a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3734      	adds	r7, #52	@ 0x34
 800b93c:	46bd      	mov	sp, r7
 800b93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b942 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b09a      	sub	sp, #104	@ 0x68
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800b950:	4611      	mov	r1, r2
 800b952:	4618      	mov	r0, r3
 800b954:	f7ff f990 	bl	800ac78 <validate>
 800b958:	4603      	mov	r3, r0
 800b95a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800b95e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b962:	2b00      	cmp	r3, #0
 800b964:	f040 8105 	bne.w	800bb72 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b96e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 80fd 	beq.w	800bb72 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b97e:	b25b      	sxtb	r3, r3
 800b980:	2b00      	cmp	r3, #0
 800b982:	da17      	bge.n	800b9b4 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b986:	7858      	ldrb	r0, [r3, #1]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b992:	2301      	movs	r3, #1
 800b994:	f7fb fef6 	bl	8007784 <disk_write>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d001      	beq.n	800b9a2 <f_sync+0x60>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e0e9      	b.n	800bb76 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b9a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9ac:	b2da      	uxtb	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b9b4:	f7fb fe88 	bl	80076c8 <get_fattime>
 800b9b8:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b9ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	f040 808c 	bne.w	800badc <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fc ff00 	bl	80087cc <fill_first_frag>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800b9d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10a      	bne.n	800b9f0 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	f7fc ff20 	bl	800882a <fill_last_frag>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 800b9f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f040 80bc 	bne.w	800bb72 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	f107 0308 	add.w	r3, r7, #8
 800ba00:	4611      	mov	r1, r2
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fd fe42 	bl	800968c <load_obj_dir>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 800ba0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f040 80ad 	bne.w	800bb72 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800ba18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	781a      	ldrb	r2, [r3, #0]
 800ba20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	3304      	adds	r3, #4
 800ba26:	f042 0220 	orr.w	r2, r2, #32
 800ba2a:	b2d2      	uxtb	r2, r2
 800ba2c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	79da      	ldrb	r2, [r3, #7]
 800ba32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	3321      	adds	r3, #33	@ 0x21
 800ba38:	f042 0201 	orr.w	r2, r2, #1
 800ba3c:	b2d2      	uxtb	r2, r2
 800ba3e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800ba40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba42:	691b      	ldr	r3, [r3, #16]
 800ba44:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	4610      	mov	r0, r2
 800ba50:	f7fc f82f 	bl	8007ab2 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800ba54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ba62:	4608      	mov	r0, r1
 800ba64:	f7fc f851 	bl	8007b0a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800ba68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ba76:	4608      	mov	r0, r1
 800ba78:	f7fc f847 	bl	8007b0a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800ba7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	330c      	adds	r3, #12
 800ba82:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fc f814 	bl	8007ab2 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800ba8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	3315      	adds	r3, #21
 800ba90:	2200      	movs	r2, #0
 800ba92:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800ba94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	3310      	adds	r3, #16
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7fc f808 	bl	8007ab2 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800baa2:	f107 0308 	add.w	r3, r7, #8
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fd fe26 	bl	80096f8 <store_xdir>
 800baac:	4603      	mov	r3, r0
 800baae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800bab2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d15b      	bne.n	800bb72 <f_sync+0x230>
							res = sync_fs(fs);
 800baba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800babc:	4618      	mov	r0, r3
 800babe:	f7fc fb09 	bl	80080d4 <sync_fs>
 800bac2:	4603      	mov	r3, r0
 800bac4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800bada:	e04a      	b.n	800bb72 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800badc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bae2:	4619      	mov	r1, r3
 800bae4:	4610      	mov	r0, r2
 800bae6:	f7fc fac7 	bl	8008078 <move_window>
 800baea:	4603      	mov	r3, r0
 800baec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800baf0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d13c      	bne.n	800bb72 <f_sync+0x230>
					dir = fp->dir_ptr;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bafc:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bafe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb00:	330b      	adds	r3, #11
 800bb02:	781a      	ldrb	r2, [r3, #0]
 800bb04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb06:	330b      	adds	r3, #11
 800bb08:	f042 0220 	orr.w	r2, r2, #32
 800bb0c:	b2d2      	uxtb	r2, r2
 800bb0e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6818      	ldr	r0, [r3, #0]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800bb1c:	f7fd fa85 	bl	800902a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bb20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb22:	f103 001c 	add.w	r0, r3, #28
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	4619      	mov	r1, r3
 800bb30:	f7fb ffbf 	bl	8007ab2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bb34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb36:	3316      	adds	r3, #22
 800bb38:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fb ffb9 	bl	8007ab2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bb40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb42:	3312      	adds	r3, #18
 800bb44:	2100      	movs	r1, #0
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fb ff98 	bl	8007a7c <st_word>
					fs->wflag = 1;
 800bb4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb4e:	2201      	movs	r2, #1
 800bb50:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bb52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fc fabd 	bl	80080d4 <sync_fs>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bb66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb6a:	b2da      	uxtb	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bb72:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3768      	adds	r7, #104	@ 0x68
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff fedb 	bl	800b942 <f_sync>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d118      	bne.n	800bbc8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f107 0208 	add.w	r2, r7, #8
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7ff f86a 	bl	800ac78 <validate>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d10c      	bne.n	800bbc8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fc f9bc 	bl	8007f30 <dec_lock>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d102      	bne.n	800bbc8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
	...

0800bbd4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b087      	sub	sp, #28
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bbea:	4b1f      	ldr	r3, [pc, #124]	@ (800bc68 <FATFS_LinkDriverEx+0x94>)
 800bbec:	7a5b      	ldrb	r3, [r3, #9]
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d131      	bne.n	800bc58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bbf4:	4b1c      	ldr	r3, [pc, #112]	@ (800bc68 <FATFS_LinkDriverEx+0x94>)
 800bbf6:	7a5b      	ldrb	r3, [r3, #9]
 800bbf8:	b2db      	uxtb	r3, r3
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	4b1a      	ldr	r3, [pc, #104]	@ (800bc68 <FATFS_LinkDriverEx+0x94>)
 800bbfe:	2100      	movs	r1, #0
 800bc00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bc02:	4b19      	ldr	r3, [pc, #100]	@ (800bc68 <FATFS_LinkDriverEx+0x94>)
 800bc04:	7a5b      	ldrb	r3, [r3, #9]
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	4a17      	ldr	r2, [pc, #92]	@ (800bc68 <FATFS_LinkDriverEx+0x94>)
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	4413      	add	r3, r2
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bc12:	4b15      	ldr	r3, [pc, #84]	@ (800bc68 <FATFS_LinkDriverEx+0x94>)
 800bc14:	7a5b      	ldrb	r3, [r3, #9]
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	461a      	mov	r2, r3
 800bc1a:	4b13      	ldr	r3, [pc, #76]	@ (800bc68 <FATFS_LinkDriverEx+0x94>)
 800bc1c:	4413      	add	r3, r2
 800bc1e:	79fa      	ldrb	r2, [r7, #7]
 800bc20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bc22:	4b11      	ldr	r3, [pc, #68]	@ (800bc68 <FATFS_LinkDriverEx+0x94>)
 800bc24:	7a5b      	ldrb	r3, [r3, #9]
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	1c5a      	adds	r2, r3, #1
 800bc2a:	b2d1      	uxtb	r1, r2
 800bc2c:	4a0e      	ldr	r2, [pc, #56]	@ (800bc68 <FATFS_LinkDriverEx+0x94>)
 800bc2e:	7251      	strb	r1, [r2, #9]
 800bc30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bc32:	7dbb      	ldrb	r3, [r7, #22]
 800bc34:	3330      	adds	r3, #48	@ 0x30
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	223a      	movs	r2, #58	@ 0x3a
 800bc42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	3302      	adds	r3, #2
 800bc48:	222f      	movs	r2, #47	@ 0x2f
 800bc4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	3303      	adds	r3, #3
 800bc50:	2200      	movs	r2, #0
 800bc52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bc54:	2300      	movs	r3, #0
 800bc56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bc58:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	371c      	adds	r7, #28
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	20001484 	.word	0x20001484

0800bc6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bc76:	2200      	movs	r2, #0
 800bc78:	6839      	ldr	r1, [r7, #0]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7ff ffaa 	bl	800bbd4 <FATFS_LinkDriverEx>
 800bc80:	4603      	mov	r3, r0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
	...

0800bc8c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	4603      	mov	r3, r0
 800bc94:	6039      	str	r1, [r7, #0]
 800bc96:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800bc98:	88fb      	ldrh	r3, [r7, #6]
 800bc9a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc9c:	d802      	bhi.n	800bca4 <ff_convert+0x18>
		c = chr;
 800bc9e:	88fb      	ldrh	r3, [r7, #6]
 800bca0:	81fb      	strh	r3, [r7, #14]
 800bca2:	e025      	b.n	800bcf0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00b      	beq.n	800bcc2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800bcaa:	88fb      	ldrh	r3, [r7, #6]
 800bcac:	2bff      	cmp	r3, #255	@ 0xff
 800bcae:	d805      	bhi.n	800bcbc <ff_convert+0x30>
 800bcb0:	88fb      	ldrh	r3, [r7, #6]
 800bcb2:	3b80      	subs	r3, #128	@ 0x80
 800bcb4:	4a12      	ldr	r2, [pc, #72]	@ (800bd00 <ff_convert+0x74>)
 800bcb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcba:	e000      	b.n	800bcbe <ff_convert+0x32>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	81fb      	strh	r3, [r7, #14]
 800bcc0:	e016      	b.n	800bcf0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	81fb      	strh	r3, [r7, #14]
 800bcc6:	e009      	b.n	800bcdc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800bcc8:	89fb      	ldrh	r3, [r7, #14]
 800bcca:	4a0d      	ldr	r2, [pc, #52]	@ (800bd00 <ff_convert+0x74>)
 800bccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bcd0:	88fa      	ldrh	r2, [r7, #6]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d006      	beq.n	800bce4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800bcd6:	89fb      	ldrh	r3, [r7, #14]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	81fb      	strh	r3, [r7, #14]
 800bcdc:	89fb      	ldrh	r3, [r7, #14]
 800bcde:	2b7f      	cmp	r3, #127	@ 0x7f
 800bce0:	d9f2      	bls.n	800bcc8 <ff_convert+0x3c>
 800bce2:	e000      	b.n	800bce6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800bce4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800bce6:	89fb      	ldrh	r3, [r7, #14]
 800bce8:	3380      	adds	r3, #128	@ 0x80
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800bcf0:	89fb      	ldrh	r3, [r7, #14]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	080107dc 	.word	0x080107dc

0800bd04 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b087      	sub	sp, #28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800bd0e:	88fb      	ldrh	r3, [r7, #6]
 800bd10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd14:	d201      	bcs.n	800bd1a <ff_wtoupper+0x16>
 800bd16:	4b3e      	ldr	r3, [pc, #248]	@ (800be10 <ff_wtoupper+0x10c>)
 800bd18:	e000      	b.n	800bd1c <ff_wtoupper+0x18>
 800bd1a:	4b3e      	ldr	r3, [pc, #248]	@ (800be14 <ff_wtoupper+0x110>)
 800bd1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	1c9a      	adds	r2, r3, #2
 800bd22:	617a      	str	r2, [r7, #20]
 800bd24:	881b      	ldrh	r3, [r3, #0]
 800bd26:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800bd28:	8a7b      	ldrh	r3, [r7, #18]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d068      	beq.n	800be00 <ff_wtoupper+0xfc>
 800bd2e:	88fa      	ldrh	r2, [r7, #6]
 800bd30:	8a7b      	ldrh	r3, [r7, #18]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d364      	bcc.n	800be00 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	1c9a      	adds	r2, r3, #2
 800bd3a:	617a      	str	r2, [r7, #20]
 800bd3c:	881b      	ldrh	r3, [r3, #0]
 800bd3e:	823b      	strh	r3, [r7, #16]
 800bd40:	8a3b      	ldrh	r3, [r7, #16]
 800bd42:	0a1b      	lsrs	r3, r3, #8
 800bd44:	81fb      	strh	r3, [r7, #14]
 800bd46:	8a3b      	ldrh	r3, [r7, #16]
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800bd4c:	88fa      	ldrh	r2, [r7, #6]
 800bd4e:	8a79      	ldrh	r1, [r7, #18]
 800bd50:	8a3b      	ldrh	r3, [r7, #16]
 800bd52:	440b      	add	r3, r1
 800bd54:	429a      	cmp	r2, r3
 800bd56:	da49      	bge.n	800bdec <ff_wtoupper+0xe8>
			switch (cmd) {
 800bd58:	89fb      	ldrh	r3, [r7, #14]
 800bd5a:	2b08      	cmp	r3, #8
 800bd5c:	d84f      	bhi.n	800bdfe <ff_wtoupper+0xfa>
 800bd5e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd64 <ff_wtoupper+0x60>)
 800bd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd64:	0800bd89 	.word	0x0800bd89
 800bd68:	0800bd9b 	.word	0x0800bd9b
 800bd6c:	0800bdb1 	.word	0x0800bdb1
 800bd70:	0800bdb9 	.word	0x0800bdb9
 800bd74:	0800bdc1 	.word	0x0800bdc1
 800bd78:	0800bdc9 	.word	0x0800bdc9
 800bd7c:	0800bdd1 	.word	0x0800bdd1
 800bd80:	0800bdd9 	.word	0x0800bdd9
 800bd84:	0800bde1 	.word	0x0800bde1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800bd88:	88fa      	ldrh	r2, [r7, #6]
 800bd8a:	8a7b      	ldrh	r3, [r7, #18]
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	005b      	lsls	r3, r3, #1
 800bd90:	697a      	ldr	r2, [r7, #20]
 800bd92:	4413      	add	r3, r2
 800bd94:	881b      	ldrh	r3, [r3, #0]
 800bd96:	80fb      	strh	r3, [r7, #6]
 800bd98:	e027      	b.n	800bdea <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800bd9a:	88fa      	ldrh	r2, [r7, #6]
 800bd9c:	8a7b      	ldrh	r3, [r7, #18]
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	f003 0301 	and.w	r3, r3, #1
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	88fa      	ldrh	r2, [r7, #6]
 800bdaa:	1ad3      	subs	r3, r2, r3
 800bdac:	80fb      	strh	r3, [r7, #6]
 800bdae:	e01c      	b.n	800bdea <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800bdb0:	88fb      	ldrh	r3, [r7, #6]
 800bdb2:	3b10      	subs	r3, #16
 800bdb4:	80fb      	strh	r3, [r7, #6]
 800bdb6:	e018      	b.n	800bdea <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800bdb8:	88fb      	ldrh	r3, [r7, #6]
 800bdba:	3b20      	subs	r3, #32
 800bdbc:	80fb      	strh	r3, [r7, #6]
 800bdbe:	e014      	b.n	800bdea <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bdc0:	88fb      	ldrh	r3, [r7, #6]
 800bdc2:	3b30      	subs	r3, #48	@ 0x30
 800bdc4:	80fb      	strh	r3, [r7, #6]
 800bdc6:	e010      	b.n	800bdea <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bdc8:	88fb      	ldrh	r3, [r7, #6]
 800bdca:	3b1a      	subs	r3, #26
 800bdcc:	80fb      	strh	r3, [r7, #6]
 800bdce:	e00c      	b.n	800bdea <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bdd0:	88fb      	ldrh	r3, [r7, #6]
 800bdd2:	3308      	adds	r3, #8
 800bdd4:	80fb      	strh	r3, [r7, #6]
 800bdd6:	e008      	b.n	800bdea <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bdd8:	88fb      	ldrh	r3, [r7, #6]
 800bdda:	3b50      	subs	r3, #80	@ 0x50
 800bddc:	80fb      	strh	r3, [r7, #6]
 800bdde:	e004      	b.n	800bdea <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bde0:	88fb      	ldrh	r3, [r7, #6]
 800bde2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800bde6:	80fb      	strh	r3, [r7, #6]
 800bde8:	bf00      	nop
			}
			break;
 800bdea:	e008      	b.n	800bdfe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800bdec:	89fb      	ldrh	r3, [r7, #14]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d195      	bne.n	800bd1e <ff_wtoupper+0x1a>
 800bdf2:	8a3b      	ldrh	r3, [r7, #16]
 800bdf4:	005b      	lsls	r3, r3, #1
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800bdfc:	e78f      	b.n	800bd1e <ff_wtoupper+0x1a>
			break;
 800bdfe:	bf00      	nop
	}

	return chr;
 800be00:	88fb      	ldrh	r3, [r7, #6]
}
 800be02:	4618      	mov	r0, r3
 800be04:	371c      	adds	r7, #28
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	080108dc 	.word	0x080108dc
 800be14:	08010ad0 	.word	0x08010ad0

0800be18 <sulp>:
 800be18:	b570      	push	{r4, r5, r6, lr}
 800be1a:	4604      	mov	r4, r0
 800be1c:	460d      	mov	r5, r1
 800be1e:	ec45 4b10 	vmov	d0, r4, r5
 800be22:	4616      	mov	r6, r2
 800be24:	f003 fd2c 	bl	800f880 <__ulp>
 800be28:	ec51 0b10 	vmov	r0, r1, d0
 800be2c:	b17e      	cbz	r6, 800be4e <sulp+0x36>
 800be2e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800be32:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800be36:	2b00      	cmp	r3, #0
 800be38:	dd09      	ble.n	800be4e <sulp+0x36>
 800be3a:	051b      	lsls	r3, r3, #20
 800be3c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800be40:	2400      	movs	r4, #0
 800be42:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800be46:	4622      	mov	r2, r4
 800be48:	462b      	mov	r3, r5
 800be4a:	f7f4 fbf5 	bl	8000638 <__aeabi_dmul>
 800be4e:	ec41 0b10 	vmov	d0, r0, r1
 800be52:	bd70      	pop	{r4, r5, r6, pc}
 800be54:	0000      	movs	r0, r0
	...

0800be58 <_strtod_l>:
 800be58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	b09f      	sub	sp, #124	@ 0x7c
 800be5e:	460c      	mov	r4, r1
 800be60:	9217      	str	r2, [sp, #92]	@ 0x5c
 800be62:	2200      	movs	r2, #0
 800be64:	921a      	str	r2, [sp, #104]	@ 0x68
 800be66:	9005      	str	r0, [sp, #20]
 800be68:	f04f 0a00 	mov.w	sl, #0
 800be6c:	f04f 0b00 	mov.w	fp, #0
 800be70:	460a      	mov	r2, r1
 800be72:	9219      	str	r2, [sp, #100]	@ 0x64
 800be74:	7811      	ldrb	r1, [r2, #0]
 800be76:	292b      	cmp	r1, #43	@ 0x2b
 800be78:	d04a      	beq.n	800bf10 <_strtod_l+0xb8>
 800be7a:	d838      	bhi.n	800beee <_strtod_l+0x96>
 800be7c:	290d      	cmp	r1, #13
 800be7e:	d832      	bhi.n	800bee6 <_strtod_l+0x8e>
 800be80:	2908      	cmp	r1, #8
 800be82:	d832      	bhi.n	800beea <_strtod_l+0x92>
 800be84:	2900      	cmp	r1, #0
 800be86:	d03b      	beq.n	800bf00 <_strtod_l+0xa8>
 800be88:	2200      	movs	r2, #0
 800be8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800be8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800be8e:	782a      	ldrb	r2, [r5, #0]
 800be90:	2a30      	cmp	r2, #48	@ 0x30
 800be92:	f040 80b3 	bne.w	800bffc <_strtod_l+0x1a4>
 800be96:	786a      	ldrb	r2, [r5, #1]
 800be98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800be9c:	2a58      	cmp	r2, #88	@ 0x58
 800be9e:	d16e      	bne.n	800bf7e <_strtod_l+0x126>
 800bea0:	9302      	str	r3, [sp, #8]
 800bea2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bea4:	9301      	str	r3, [sp, #4]
 800bea6:	ab1a      	add	r3, sp, #104	@ 0x68
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	4a8e      	ldr	r2, [pc, #568]	@ (800c0e4 <_strtod_l+0x28c>)
 800beac:	9805      	ldr	r0, [sp, #20]
 800beae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800beb0:	a919      	add	r1, sp, #100	@ 0x64
 800beb2:	f002 fdd7 	bl	800ea64 <__gethex>
 800beb6:	f010 060f 	ands.w	r6, r0, #15
 800beba:	4604      	mov	r4, r0
 800bebc:	d005      	beq.n	800beca <_strtod_l+0x72>
 800bebe:	2e06      	cmp	r6, #6
 800bec0:	d128      	bne.n	800bf14 <_strtod_l+0xbc>
 800bec2:	3501      	adds	r5, #1
 800bec4:	2300      	movs	r3, #0
 800bec6:	9519      	str	r5, [sp, #100]	@ 0x64
 800bec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800beca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800becc:	2b00      	cmp	r3, #0
 800bece:	f040 858e 	bne.w	800c9ee <_strtod_l+0xb96>
 800bed2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bed4:	b1cb      	cbz	r3, 800bf0a <_strtod_l+0xb2>
 800bed6:	4652      	mov	r2, sl
 800bed8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800bedc:	ec43 2b10 	vmov	d0, r2, r3
 800bee0:	b01f      	add	sp, #124	@ 0x7c
 800bee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee6:	2920      	cmp	r1, #32
 800bee8:	d1ce      	bne.n	800be88 <_strtod_l+0x30>
 800beea:	3201      	adds	r2, #1
 800beec:	e7c1      	b.n	800be72 <_strtod_l+0x1a>
 800beee:	292d      	cmp	r1, #45	@ 0x2d
 800bef0:	d1ca      	bne.n	800be88 <_strtod_l+0x30>
 800bef2:	2101      	movs	r1, #1
 800bef4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bef6:	1c51      	adds	r1, r2, #1
 800bef8:	9119      	str	r1, [sp, #100]	@ 0x64
 800befa:	7852      	ldrb	r2, [r2, #1]
 800befc:	2a00      	cmp	r2, #0
 800befe:	d1c5      	bne.n	800be8c <_strtod_l+0x34>
 800bf00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bf02:	9419      	str	r4, [sp, #100]	@ 0x64
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f040 8570 	bne.w	800c9ea <_strtod_l+0xb92>
 800bf0a:	4652      	mov	r2, sl
 800bf0c:	465b      	mov	r3, fp
 800bf0e:	e7e5      	b.n	800bedc <_strtod_l+0x84>
 800bf10:	2100      	movs	r1, #0
 800bf12:	e7ef      	b.n	800bef4 <_strtod_l+0x9c>
 800bf14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bf16:	b13a      	cbz	r2, 800bf28 <_strtod_l+0xd0>
 800bf18:	2135      	movs	r1, #53	@ 0x35
 800bf1a:	a81c      	add	r0, sp, #112	@ 0x70
 800bf1c:	f003 fdaa 	bl	800fa74 <__copybits>
 800bf20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bf22:	9805      	ldr	r0, [sp, #20]
 800bf24:	f003 f978 	bl	800f218 <_Bfree>
 800bf28:	3e01      	subs	r6, #1
 800bf2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800bf2c:	2e04      	cmp	r6, #4
 800bf2e:	d806      	bhi.n	800bf3e <_strtod_l+0xe6>
 800bf30:	e8df f006 	tbb	[pc, r6]
 800bf34:	201d0314 	.word	0x201d0314
 800bf38:	14          	.byte	0x14
 800bf39:	00          	.byte	0x00
 800bf3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800bf3e:	05e1      	lsls	r1, r4, #23
 800bf40:	bf48      	it	mi
 800bf42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bf46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf4a:	0d1b      	lsrs	r3, r3, #20
 800bf4c:	051b      	lsls	r3, r3, #20
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1bb      	bne.n	800beca <_strtod_l+0x72>
 800bf52:	f001 fe21 	bl	800db98 <__errno>
 800bf56:	2322      	movs	r3, #34	@ 0x22
 800bf58:	6003      	str	r3, [r0, #0]
 800bf5a:	e7b6      	b.n	800beca <_strtod_l+0x72>
 800bf5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800bf60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bf64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bf68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bf6c:	e7e7      	b.n	800bf3e <_strtod_l+0xe6>
 800bf6e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800c0ec <_strtod_l+0x294>
 800bf72:	e7e4      	b.n	800bf3e <_strtod_l+0xe6>
 800bf74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bf78:	f04f 3aff 	mov.w	sl, #4294967295
 800bf7c:	e7df      	b.n	800bf3e <_strtod_l+0xe6>
 800bf7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf80:	1c5a      	adds	r2, r3, #1
 800bf82:	9219      	str	r2, [sp, #100]	@ 0x64
 800bf84:	785b      	ldrb	r3, [r3, #1]
 800bf86:	2b30      	cmp	r3, #48	@ 0x30
 800bf88:	d0f9      	beq.n	800bf7e <_strtod_l+0x126>
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d09d      	beq.n	800beca <_strtod_l+0x72>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf94:	930c      	str	r3, [sp, #48]	@ 0x30
 800bf96:	2300      	movs	r3, #0
 800bf98:	9308      	str	r3, [sp, #32]
 800bf9a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf9c:	461f      	mov	r7, r3
 800bf9e:	220a      	movs	r2, #10
 800bfa0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800bfa2:	7805      	ldrb	r5, [r0, #0]
 800bfa4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800bfa8:	b2d9      	uxtb	r1, r3
 800bfaa:	2909      	cmp	r1, #9
 800bfac:	d928      	bls.n	800c000 <_strtod_l+0x1a8>
 800bfae:	494e      	ldr	r1, [pc, #312]	@ (800c0e8 <_strtod_l+0x290>)
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	f001 fd38 	bl	800da26 <strncmp>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d032      	beq.n	800c020 <_strtod_l+0x1c8>
 800bfba:	2000      	movs	r0, #0
 800bfbc:	462a      	mov	r2, r5
 800bfbe:	4681      	mov	r9, r0
 800bfc0:	463d      	mov	r5, r7
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2a65      	cmp	r2, #101	@ 0x65
 800bfc6:	d001      	beq.n	800bfcc <_strtod_l+0x174>
 800bfc8:	2a45      	cmp	r2, #69	@ 0x45
 800bfca:	d114      	bne.n	800bff6 <_strtod_l+0x19e>
 800bfcc:	b91d      	cbnz	r5, 800bfd6 <_strtod_l+0x17e>
 800bfce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfd0:	4302      	orrs	r2, r0
 800bfd2:	d095      	beq.n	800bf00 <_strtod_l+0xa8>
 800bfd4:	2500      	movs	r5, #0
 800bfd6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800bfd8:	1c62      	adds	r2, r4, #1
 800bfda:	9219      	str	r2, [sp, #100]	@ 0x64
 800bfdc:	7862      	ldrb	r2, [r4, #1]
 800bfde:	2a2b      	cmp	r2, #43	@ 0x2b
 800bfe0:	d077      	beq.n	800c0d2 <_strtod_l+0x27a>
 800bfe2:	2a2d      	cmp	r2, #45	@ 0x2d
 800bfe4:	d07b      	beq.n	800c0de <_strtod_l+0x286>
 800bfe6:	f04f 0c00 	mov.w	ip, #0
 800bfea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800bfee:	2909      	cmp	r1, #9
 800bff0:	f240 8082 	bls.w	800c0f8 <_strtod_l+0x2a0>
 800bff4:	9419      	str	r4, [sp, #100]	@ 0x64
 800bff6:	f04f 0800 	mov.w	r8, #0
 800bffa:	e0a2      	b.n	800c142 <_strtod_l+0x2ea>
 800bffc:	2300      	movs	r3, #0
 800bffe:	e7c7      	b.n	800bf90 <_strtod_l+0x138>
 800c000:	2f08      	cmp	r7, #8
 800c002:	bfd5      	itete	le
 800c004:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c006:	9908      	ldrgt	r1, [sp, #32]
 800c008:	fb02 3301 	mlale	r3, r2, r1, r3
 800c00c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c010:	f100 0001 	add.w	r0, r0, #1
 800c014:	bfd4      	ite	le
 800c016:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c018:	9308      	strgt	r3, [sp, #32]
 800c01a:	3701      	adds	r7, #1
 800c01c:	9019      	str	r0, [sp, #100]	@ 0x64
 800c01e:	e7bf      	b.n	800bfa0 <_strtod_l+0x148>
 800c020:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c022:	1c5a      	adds	r2, r3, #1
 800c024:	9219      	str	r2, [sp, #100]	@ 0x64
 800c026:	785a      	ldrb	r2, [r3, #1]
 800c028:	b37f      	cbz	r7, 800c08a <_strtod_l+0x232>
 800c02a:	4681      	mov	r9, r0
 800c02c:	463d      	mov	r5, r7
 800c02e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c032:	2b09      	cmp	r3, #9
 800c034:	d912      	bls.n	800c05c <_strtod_l+0x204>
 800c036:	2301      	movs	r3, #1
 800c038:	e7c4      	b.n	800bfc4 <_strtod_l+0x16c>
 800c03a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c03c:	1c5a      	adds	r2, r3, #1
 800c03e:	9219      	str	r2, [sp, #100]	@ 0x64
 800c040:	785a      	ldrb	r2, [r3, #1]
 800c042:	3001      	adds	r0, #1
 800c044:	2a30      	cmp	r2, #48	@ 0x30
 800c046:	d0f8      	beq.n	800c03a <_strtod_l+0x1e2>
 800c048:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c04c:	2b08      	cmp	r3, #8
 800c04e:	f200 84d3 	bhi.w	800c9f8 <_strtod_l+0xba0>
 800c052:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c054:	930c      	str	r3, [sp, #48]	@ 0x30
 800c056:	4681      	mov	r9, r0
 800c058:	2000      	movs	r0, #0
 800c05a:	4605      	mov	r5, r0
 800c05c:	3a30      	subs	r2, #48	@ 0x30
 800c05e:	f100 0301 	add.w	r3, r0, #1
 800c062:	d02a      	beq.n	800c0ba <_strtod_l+0x262>
 800c064:	4499      	add	r9, r3
 800c066:	eb00 0c05 	add.w	ip, r0, r5
 800c06a:	462b      	mov	r3, r5
 800c06c:	210a      	movs	r1, #10
 800c06e:	4563      	cmp	r3, ip
 800c070:	d10d      	bne.n	800c08e <_strtod_l+0x236>
 800c072:	1c69      	adds	r1, r5, #1
 800c074:	4401      	add	r1, r0
 800c076:	4428      	add	r0, r5
 800c078:	2808      	cmp	r0, #8
 800c07a:	dc16      	bgt.n	800c0aa <_strtod_l+0x252>
 800c07c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c07e:	230a      	movs	r3, #10
 800c080:	fb03 2300 	mla	r3, r3, r0, r2
 800c084:	930a      	str	r3, [sp, #40]	@ 0x28
 800c086:	2300      	movs	r3, #0
 800c088:	e018      	b.n	800c0bc <_strtod_l+0x264>
 800c08a:	4638      	mov	r0, r7
 800c08c:	e7da      	b.n	800c044 <_strtod_l+0x1ec>
 800c08e:	2b08      	cmp	r3, #8
 800c090:	f103 0301 	add.w	r3, r3, #1
 800c094:	dc03      	bgt.n	800c09e <_strtod_l+0x246>
 800c096:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c098:	434e      	muls	r6, r1
 800c09a:	960a      	str	r6, [sp, #40]	@ 0x28
 800c09c:	e7e7      	b.n	800c06e <_strtod_l+0x216>
 800c09e:	2b10      	cmp	r3, #16
 800c0a0:	bfde      	ittt	le
 800c0a2:	9e08      	ldrle	r6, [sp, #32]
 800c0a4:	434e      	mulle	r6, r1
 800c0a6:	9608      	strle	r6, [sp, #32]
 800c0a8:	e7e1      	b.n	800c06e <_strtod_l+0x216>
 800c0aa:	280f      	cmp	r0, #15
 800c0ac:	dceb      	bgt.n	800c086 <_strtod_l+0x22e>
 800c0ae:	9808      	ldr	r0, [sp, #32]
 800c0b0:	230a      	movs	r3, #10
 800c0b2:	fb03 2300 	mla	r3, r3, r0, r2
 800c0b6:	9308      	str	r3, [sp, #32]
 800c0b8:	e7e5      	b.n	800c086 <_strtod_l+0x22e>
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c0be:	1c50      	adds	r0, r2, #1
 800c0c0:	9019      	str	r0, [sp, #100]	@ 0x64
 800c0c2:	7852      	ldrb	r2, [r2, #1]
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	460d      	mov	r5, r1
 800c0c8:	e7b1      	b.n	800c02e <_strtod_l+0x1d6>
 800c0ca:	f04f 0900 	mov.w	r9, #0
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e77d      	b.n	800bfce <_strtod_l+0x176>
 800c0d2:	f04f 0c00 	mov.w	ip, #0
 800c0d6:	1ca2      	adds	r2, r4, #2
 800c0d8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c0da:	78a2      	ldrb	r2, [r4, #2]
 800c0dc:	e785      	b.n	800bfea <_strtod_l+0x192>
 800c0de:	f04f 0c01 	mov.w	ip, #1
 800c0e2:	e7f8      	b.n	800c0d6 <_strtod_l+0x27e>
 800c0e4:	08010ba4 	.word	0x08010ba4
 800c0e8:	08010b8c 	.word	0x08010b8c
 800c0ec:	7ff00000 	.word	0x7ff00000
 800c0f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c0f2:	1c51      	adds	r1, r2, #1
 800c0f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c0f6:	7852      	ldrb	r2, [r2, #1]
 800c0f8:	2a30      	cmp	r2, #48	@ 0x30
 800c0fa:	d0f9      	beq.n	800c0f0 <_strtod_l+0x298>
 800c0fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c100:	2908      	cmp	r1, #8
 800c102:	f63f af78 	bhi.w	800bff6 <_strtod_l+0x19e>
 800c106:	3a30      	subs	r2, #48	@ 0x30
 800c108:	920e      	str	r2, [sp, #56]	@ 0x38
 800c10a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c10c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c10e:	f04f 080a 	mov.w	r8, #10
 800c112:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c114:	1c56      	adds	r6, r2, #1
 800c116:	9619      	str	r6, [sp, #100]	@ 0x64
 800c118:	7852      	ldrb	r2, [r2, #1]
 800c11a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c11e:	f1be 0f09 	cmp.w	lr, #9
 800c122:	d939      	bls.n	800c198 <_strtod_l+0x340>
 800c124:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c126:	1a76      	subs	r6, r6, r1
 800c128:	2e08      	cmp	r6, #8
 800c12a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c12e:	dc03      	bgt.n	800c138 <_strtod_l+0x2e0>
 800c130:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c132:	4588      	cmp	r8, r1
 800c134:	bfa8      	it	ge
 800c136:	4688      	movge	r8, r1
 800c138:	f1bc 0f00 	cmp.w	ip, #0
 800c13c:	d001      	beq.n	800c142 <_strtod_l+0x2ea>
 800c13e:	f1c8 0800 	rsb	r8, r8, #0
 800c142:	2d00      	cmp	r5, #0
 800c144:	d14e      	bne.n	800c1e4 <_strtod_l+0x38c>
 800c146:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c148:	4308      	orrs	r0, r1
 800c14a:	f47f aebe 	bne.w	800beca <_strtod_l+0x72>
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f47f aed6 	bne.w	800bf00 <_strtod_l+0xa8>
 800c154:	2a69      	cmp	r2, #105	@ 0x69
 800c156:	d028      	beq.n	800c1aa <_strtod_l+0x352>
 800c158:	dc25      	bgt.n	800c1a6 <_strtod_l+0x34e>
 800c15a:	2a49      	cmp	r2, #73	@ 0x49
 800c15c:	d025      	beq.n	800c1aa <_strtod_l+0x352>
 800c15e:	2a4e      	cmp	r2, #78	@ 0x4e
 800c160:	f47f aece 	bne.w	800bf00 <_strtod_l+0xa8>
 800c164:	499b      	ldr	r1, [pc, #620]	@ (800c3d4 <_strtod_l+0x57c>)
 800c166:	a819      	add	r0, sp, #100	@ 0x64
 800c168:	f002 fe9e 	bl	800eea8 <__match>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	f43f aec7 	beq.w	800bf00 <_strtod_l+0xa8>
 800c172:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	2b28      	cmp	r3, #40	@ 0x28
 800c178:	d12e      	bne.n	800c1d8 <_strtod_l+0x380>
 800c17a:	4997      	ldr	r1, [pc, #604]	@ (800c3d8 <_strtod_l+0x580>)
 800c17c:	aa1c      	add	r2, sp, #112	@ 0x70
 800c17e:	a819      	add	r0, sp, #100	@ 0x64
 800c180:	f002 fea6 	bl	800eed0 <__hexnan>
 800c184:	2805      	cmp	r0, #5
 800c186:	d127      	bne.n	800c1d8 <_strtod_l+0x380>
 800c188:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c18a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c18e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c192:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c196:	e698      	b.n	800beca <_strtod_l+0x72>
 800c198:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c19a:	fb08 2101 	mla	r1, r8, r1, r2
 800c19e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c1a2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1a4:	e7b5      	b.n	800c112 <_strtod_l+0x2ba>
 800c1a6:	2a6e      	cmp	r2, #110	@ 0x6e
 800c1a8:	e7da      	b.n	800c160 <_strtod_l+0x308>
 800c1aa:	498c      	ldr	r1, [pc, #560]	@ (800c3dc <_strtod_l+0x584>)
 800c1ac:	a819      	add	r0, sp, #100	@ 0x64
 800c1ae:	f002 fe7b 	bl	800eea8 <__match>
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	f43f aea4 	beq.w	800bf00 <_strtod_l+0xa8>
 800c1b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1ba:	4989      	ldr	r1, [pc, #548]	@ (800c3e0 <_strtod_l+0x588>)
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	a819      	add	r0, sp, #100	@ 0x64
 800c1c0:	9319      	str	r3, [sp, #100]	@ 0x64
 800c1c2:	f002 fe71 	bl	800eea8 <__match>
 800c1c6:	b910      	cbnz	r0, 800c1ce <_strtod_l+0x376>
 800c1c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	9319      	str	r3, [sp, #100]	@ 0x64
 800c1ce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800c3f0 <_strtod_l+0x598>
 800c1d2:	f04f 0a00 	mov.w	sl, #0
 800c1d6:	e678      	b.n	800beca <_strtod_l+0x72>
 800c1d8:	4882      	ldr	r0, [pc, #520]	@ (800c3e4 <_strtod_l+0x58c>)
 800c1da:	f001 fd19 	bl	800dc10 <nan>
 800c1de:	ec5b ab10 	vmov	sl, fp, d0
 800c1e2:	e672      	b.n	800beca <_strtod_l+0x72>
 800c1e4:	eba8 0309 	sub.w	r3, r8, r9
 800c1e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c1ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1ec:	2f00      	cmp	r7, #0
 800c1ee:	bf08      	it	eq
 800c1f0:	462f      	moveq	r7, r5
 800c1f2:	2d10      	cmp	r5, #16
 800c1f4:	462c      	mov	r4, r5
 800c1f6:	bfa8      	it	ge
 800c1f8:	2410      	movge	r4, #16
 800c1fa:	f7f4 f9a3 	bl	8000544 <__aeabi_ui2d>
 800c1fe:	2d09      	cmp	r5, #9
 800c200:	4682      	mov	sl, r0
 800c202:	468b      	mov	fp, r1
 800c204:	dc13      	bgt.n	800c22e <_strtod_l+0x3d6>
 800c206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f43f ae5e 	beq.w	800beca <_strtod_l+0x72>
 800c20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c210:	dd78      	ble.n	800c304 <_strtod_l+0x4ac>
 800c212:	2b16      	cmp	r3, #22
 800c214:	dc5f      	bgt.n	800c2d6 <_strtod_l+0x47e>
 800c216:	4974      	ldr	r1, [pc, #464]	@ (800c3e8 <_strtod_l+0x590>)
 800c218:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c21c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c220:	4652      	mov	r2, sl
 800c222:	465b      	mov	r3, fp
 800c224:	f7f4 fa08 	bl	8000638 <__aeabi_dmul>
 800c228:	4682      	mov	sl, r0
 800c22a:	468b      	mov	fp, r1
 800c22c:	e64d      	b.n	800beca <_strtod_l+0x72>
 800c22e:	4b6e      	ldr	r3, [pc, #440]	@ (800c3e8 <_strtod_l+0x590>)
 800c230:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c234:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800c238:	f7f4 f9fe 	bl	8000638 <__aeabi_dmul>
 800c23c:	4682      	mov	sl, r0
 800c23e:	9808      	ldr	r0, [sp, #32]
 800c240:	468b      	mov	fp, r1
 800c242:	f7f4 f97f 	bl	8000544 <__aeabi_ui2d>
 800c246:	4602      	mov	r2, r0
 800c248:	460b      	mov	r3, r1
 800c24a:	4650      	mov	r0, sl
 800c24c:	4659      	mov	r1, fp
 800c24e:	f7f4 f83d 	bl	80002cc <__adddf3>
 800c252:	2d0f      	cmp	r5, #15
 800c254:	4682      	mov	sl, r0
 800c256:	468b      	mov	fp, r1
 800c258:	ddd5      	ble.n	800c206 <_strtod_l+0x3ae>
 800c25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c25c:	1b2c      	subs	r4, r5, r4
 800c25e:	441c      	add	r4, r3
 800c260:	2c00      	cmp	r4, #0
 800c262:	f340 8096 	ble.w	800c392 <_strtod_l+0x53a>
 800c266:	f014 030f 	ands.w	r3, r4, #15
 800c26a:	d00a      	beq.n	800c282 <_strtod_l+0x42a>
 800c26c:	495e      	ldr	r1, [pc, #376]	@ (800c3e8 <_strtod_l+0x590>)
 800c26e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c272:	4652      	mov	r2, sl
 800c274:	465b      	mov	r3, fp
 800c276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c27a:	f7f4 f9dd 	bl	8000638 <__aeabi_dmul>
 800c27e:	4682      	mov	sl, r0
 800c280:	468b      	mov	fp, r1
 800c282:	f034 040f 	bics.w	r4, r4, #15
 800c286:	d073      	beq.n	800c370 <_strtod_l+0x518>
 800c288:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800c28c:	dd48      	ble.n	800c320 <_strtod_l+0x4c8>
 800c28e:	2400      	movs	r4, #0
 800c290:	46a0      	mov	r8, r4
 800c292:	940a      	str	r4, [sp, #40]	@ 0x28
 800c294:	46a1      	mov	r9, r4
 800c296:	9a05      	ldr	r2, [sp, #20]
 800c298:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c3f0 <_strtod_l+0x598>
 800c29c:	2322      	movs	r3, #34	@ 0x22
 800c29e:	6013      	str	r3, [r2, #0]
 800c2a0:	f04f 0a00 	mov.w	sl, #0
 800c2a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f43f ae0f 	beq.w	800beca <_strtod_l+0x72>
 800c2ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c2ae:	9805      	ldr	r0, [sp, #20]
 800c2b0:	f002 ffb2 	bl	800f218 <_Bfree>
 800c2b4:	9805      	ldr	r0, [sp, #20]
 800c2b6:	4649      	mov	r1, r9
 800c2b8:	f002 ffae 	bl	800f218 <_Bfree>
 800c2bc:	9805      	ldr	r0, [sp, #20]
 800c2be:	4641      	mov	r1, r8
 800c2c0:	f002 ffaa 	bl	800f218 <_Bfree>
 800c2c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c2c6:	9805      	ldr	r0, [sp, #20]
 800c2c8:	f002 ffa6 	bl	800f218 <_Bfree>
 800c2cc:	9805      	ldr	r0, [sp, #20]
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	f002 ffa2 	bl	800f218 <_Bfree>
 800c2d4:	e5f9      	b.n	800beca <_strtod_l+0x72>
 800c2d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	dbbc      	blt.n	800c25a <_strtod_l+0x402>
 800c2e0:	4c41      	ldr	r4, [pc, #260]	@ (800c3e8 <_strtod_l+0x590>)
 800c2e2:	f1c5 050f 	rsb	r5, r5, #15
 800c2e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c2ea:	4652      	mov	r2, sl
 800c2ec:	465b      	mov	r3, fp
 800c2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2f2:	f7f4 f9a1 	bl	8000638 <__aeabi_dmul>
 800c2f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2f8:	1b5d      	subs	r5, r3, r5
 800c2fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c2fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c302:	e78f      	b.n	800c224 <_strtod_l+0x3cc>
 800c304:	3316      	adds	r3, #22
 800c306:	dba8      	blt.n	800c25a <_strtod_l+0x402>
 800c308:	4b37      	ldr	r3, [pc, #220]	@ (800c3e8 <_strtod_l+0x590>)
 800c30a:	eba9 0808 	sub.w	r8, r9, r8
 800c30e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800c312:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c316:	4650      	mov	r0, sl
 800c318:	4659      	mov	r1, fp
 800c31a:	f7f4 fab7 	bl	800088c <__aeabi_ddiv>
 800c31e:	e783      	b.n	800c228 <_strtod_l+0x3d0>
 800c320:	4b32      	ldr	r3, [pc, #200]	@ (800c3ec <_strtod_l+0x594>)
 800c322:	9308      	str	r3, [sp, #32]
 800c324:	2300      	movs	r3, #0
 800c326:	1124      	asrs	r4, r4, #4
 800c328:	4650      	mov	r0, sl
 800c32a:	4659      	mov	r1, fp
 800c32c:	461e      	mov	r6, r3
 800c32e:	2c01      	cmp	r4, #1
 800c330:	dc21      	bgt.n	800c376 <_strtod_l+0x51e>
 800c332:	b10b      	cbz	r3, 800c338 <_strtod_l+0x4e0>
 800c334:	4682      	mov	sl, r0
 800c336:	468b      	mov	fp, r1
 800c338:	492c      	ldr	r1, [pc, #176]	@ (800c3ec <_strtod_l+0x594>)
 800c33a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c33e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800c342:	4652      	mov	r2, sl
 800c344:	465b      	mov	r3, fp
 800c346:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c34a:	f7f4 f975 	bl	8000638 <__aeabi_dmul>
 800c34e:	4b28      	ldr	r3, [pc, #160]	@ (800c3f0 <_strtod_l+0x598>)
 800c350:	460a      	mov	r2, r1
 800c352:	400b      	ands	r3, r1
 800c354:	4927      	ldr	r1, [pc, #156]	@ (800c3f4 <_strtod_l+0x59c>)
 800c356:	428b      	cmp	r3, r1
 800c358:	4682      	mov	sl, r0
 800c35a:	d898      	bhi.n	800c28e <_strtod_l+0x436>
 800c35c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800c360:	428b      	cmp	r3, r1
 800c362:	bf86      	itte	hi
 800c364:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800c3f8 <_strtod_l+0x5a0>
 800c368:	f04f 3aff 	movhi.w	sl, #4294967295
 800c36c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800c370:	2300      	movs	r3, #0
 800c372:	9308      	str	r3, [sp, #32]
 800c374:	e07a      	b.n	800c46c <_strtod_l+0x614>
 800c376:	07e2      	lsls	r2, r4, #31
 800c378:	d505      	bpl.n	800c386 <_strtod_l+0x52e>
 800c37a:	9b08      	ldr	r3, [sp, #32]
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	f7f4 f95a 	bl	8000638 <__aeabi_dmul>
 800c384:	2301      	movs	r3, #1
 800c386:	9a08      	ldr	r2, [sp, #32]
 800c388:	3208      	adds	r2, #8
 800c38a:	3601      	adds	r6, #1
 800c38c:	1064      	asrs	r4, r4, #1
 800c38e:	9208      	str	r2, [sp, #32]
 800c390:	e7cd      	b.n	800c32e <_strtod_l+0x4d6>
 800c392:	d0ed      	beq.n	800c370 <_strtod_l+0x518>
 800c394:	4264      	negs	r4, r4
 800c396:	f014 020f 	ands.w	r2, r4, #15
 800c39a:	d00a      	beq.n	800c3b2 <_strtod_l+0x55a>
 800c39c:	4b12      	ldr	r3, [pc, #72]	@ (800c3e8 <_strtod_l+0x590>)
 800c39e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3a2:	4650      	mov	r0, sl
 800c3a4:	4659      	mov	r1, fp
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	f7f4 fa6f 	bl	800088c <__aeabi_ddiv>
 800c3ae:	4682      	mov	sl, r0
 800c3b0:	468b      	mov	fp, r1
 800c3b2:	1124      	asrs	r4, r4, #4
 800c3b4:	d0dc      	beq.n	800c370 <_strtod_l+0x518>
 800c3b6:	2c1f      	cmp	r4, #31
 800c3b8:	dd20      	ble.n	800c3fc <_strtod_l+0x5a4>
 800c3ba:	2400      	movs	r4, #0
 800c3bc:	46a0      	mov	r8, r4
 800c3be:	940a      	str	r4, [sp, #40]	@ 0x28
 800c3c0:	46a1      	mov	r9, r4
 800c3c2:	9a05      	ldr	r2, [sp, #20]
 800c3c4:	2322      	movs	r3, #34	@ 0x22
 800c3c6:	f04f 0a00 	mov.w	sl, #0
 800c3ca:	f04f 0b00 	mov.w	fp, #0
 800c3ce:	6013      	str	r3, [r2, #0]
 800c3d0:	e768      	b.n	800c2a4 <_strtod_l+0x44c>
 800c3d2:	bf00      	nop
 800c3d4:	08010bed 	.word	0x08010bed
 800c3d8:	08010b90 	.word	0x08010b90
 800c3dc:	08010be5 	.word	0x08010be5
 800c3e0:	08010cd1 	.word	0x08010cd1
 800c3e4:	08010ccd 	.word	0x08010ccd
 800c3e8:	08010e38 	.word	0x08010e38
 800c3ec:	08010e10 	.word	0x08010e10
 800c3f0:	7ff00000 	.word	0x7ff00000
 800c3f4:	7ca00000 	.word	0x7ca00000
 800c3f8:	7fefffff 	.word	0x7fefffff
 800c3fc:	f014 0310 	ands.w	r3, r4, #16
 800c400:	bf18      	it	ne
 800c402:	236a      	movne	r3, #106	@ 0x6a
 800c404:	4ea9      	ldr	r6, [pc, #676]	@ (800c6ac <_strtod_l+0x854>)
 800c406:	9308      	str	r3, [sp, #32]
 800c408:	4650      	mov	r0, sl
 800c40a:	4659      	mov	r1, fp
 800c40c:	2300      	movs	r3, #0
 800c40e:	07e2      	lsls	r2, r4, #31
 800c410:	d504      	bpl.n	800c41c <_strtod_l+0x5c4>
 800c412:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c416:	f7f4 f90f 	bl	8000638 <__aeabi_dmul>
 800c41a:	2301      	movs	r3, #1
 800c41c:	1064      	asrs	r4, r4, #1
 800c41e:	f106 0608 	add.w	r6, r6, #8
 800c422:	d1f4      	bne.n	800c40e <_strtod_l+0x5b6>
 800c424:	b10b      	cbz	r3, 800c42a <_strtod_l+0x5d2>
 800c426:	4682      	mov	sl, r0
 800c428:	468b      	mov	fp, r1
 800c42a:	9b08      	ldr	r3, [sp, #32]
 800c42c:	b1b3      	cbz	r3, 800c45c <_strtod_l+0x604>
 800c42e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c432:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800c436:	2b00      	cmp	r3, #0
 800c438:	4659      	mov	r1, fp
 800c43a:	dd0f      	ble.n	800c45c <_strtod_l+0x604>
 800c43c:	2b1f      	cmp	r3, #31
 800c43e:	dd55      	ble.n	800c4ec <_strtod_l+0x694>
 800c440:	2b34      	cmp	r3, #52	@ 0x34
 800c442:	bfde      	ittt	le
 800c444:	f04f 33ff 	movle.w	r3, #4294967295
 800c448:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800c44c:	4093      	lslle	r3, r2
 800c44e:	f04f 0a00 	mov.w	sl, #0
 800c452:	bfcc      	ite	gt
 800c454:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c458:	ea03 0b01 	andle.w	fp, r3, r1
 800c45c:	2200      	movs	r2, #0
 800c45e:	2300      	movs	r3, #0
 800c460:	4650      	mov	r0, sl
 800c462:	4659      	mov	r1, fp
 800c464:	f7f4 fb50 	bl	8000b08 <__aeabi_dcmpeq>
 800c468:	2800      	cmp	r0, #0
 800c46a:	d1a6      	bne.n	800c3ba <_strtod_l+0x562>
 800c46c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c472:	9805      	ldr	r0, [sp, #20]
 800c474:	462b      	mov	r3, r5
 800c476:	463a      	mov	r2, r7
 800c478:	f002 ff36 	bl	800f2e8 <__s2b>
 800c47c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c47e:	2800      	cmp	r0, #0
 800c480:	f43f af05 	beq.w	800c28e <_strtod_l+0x436>
 800c484:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c486:	2a00      	cmp	r2, #0
 800c488:	eba9 0308 	sub.w	r3, r9, r8
 800c48c:	bfa8      	it	ge
 800c48e:	2300      	movge	r3, #0
 800c490:	9312      	str	r3, [sp, #72]	@ 0x48
 800c492:	2400      	movs	r4, #0
 800c494:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c498:	9316      	str	r3, [sp, #88]	@ 0x58
 800c49a:	46a0      	mov	r8, r4
 800c49c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c49e:	9805      	ldr	r0, [sp, #20]
 800c4a0:	6859      	ldr	r1, [r3, #4]
 800c4a2:	f002 fe79 	bl	800f198 <_Balloc>
 800c4a6:	4681      	mov	r9, r0
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	f43f aef4 	beq.w	800c296 <_strtod_l+0x43e>
 800c4ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4b0:	691a      	ldr	r2, [r3, #16]
 800c4b2:	3202      	adds	r2, #2
 800c4b4:	f103 010c 	add.w	r1, r3, #12
 800c4b8:	0092      	lsls	r2, r2, #2
 800c4ba:	300c      	adds	r0, #12
 800c4bc:	f001 fb99 	bl	800dbf2 <memcpy>
 800c4c0:	ec4b ab10 	vmov	d0, sl, fp
 800c4c4:	9805      	ldr	r0, [sp, #20]
 800c4c6:	aa1c      	add	r2, sp, #112	@ 0x70
 800c4c8:	a91b      	add	r1, sp, #108	@ 0x6c
 800c4ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800c4ce:	f003 fa47 	bl	800f960 <__d2b>
 800c4d2:	901a      	str	r0, [sp, #104]	@ 0x68
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	f43f aede 	beq.w	800c296 <_strtod_l+0x43e>
 800c4da:	9805      	ldr	r0, [sp, #20]
 800c4dc:	2101      	movs	r1, #1
 800c4de:	f002 ff99 	bl	800f414 <__i2b>
 800c4e2:	4680      	mov	r8, r0
 800c4e4:	b948      	cbnz	r0, 800c4fa <_strtod_l+0x6a2>
 800c4e6:	f04f 0800 	mov.w	r8, #0
 800c4ea:	e6d4      	b.n	800c296 <_strtod_l+0x43e>
 800c4ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c4f4:	ea03 0a0a 	and.w	sl, r3, sl
 800c4f8:	e7b0      	b.n	800c45c <_strtod_l+0x604>
 800c4fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800c4fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800c4fe:	2d00      	cmp	r5, #0
 800c500:	bfab      	itete	ge
 800c502:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800c504:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800c506:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800c508:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800c50a:	bfac      	ite	ge
 800c50c:	18ef      	addge	r7, r5, r3
 800c50e:	1b5e      	sublt	r6, r3, r5
 800c510:	9b08      	ldr	r3, [sp, #32]
 800c512:	1aed      	subs	r5, r5, r3
 800c514:	4415      	add	r5, r2
 800c516:	4b66      	ldr	r3, [pc, #408]	@ (800c6b0 <_strtod_l+0x858>)
 800c518:	3d01      	subs	r5, #1
 800c51a:	429d      	cmp	r5, r3
 800c51c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c520:	da50      	bge.n	800c5c4 <_strtod_l+0x76c>
 800c522:	1b5b      	subs	r3, r3, r5
 800c524:	2b1f      	cmp	r3, #31
 800c526:	eba2 0203 	sub.w	r2, r2, r3
 800c52a:	f04f 0101 	mov.w	r1, #1
 800c52e:	dc3d      	bgt.n	800c5ac <_strtod_l+0x754>
 800c530:	fa01 f303 	lsl.w	r3, r1, r3
 800c534:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c536:	2300      	movs	r3, #0
 800c538:	9310      	str	r3, [sp, #64]	@ 0x40
 800c53a:	18bd      	adds	r5, r7, r2
 800c53c:	9b08      	ldr	r3, [sp, #32]
 800c53e:	42af      	cmp	r7, r5
 800c540:	4416      	add	r6, r2
 800c542:	441e      	add	r6, r3
 800c544:	463b      	mov	r3, r7
 800c546:	bfa8      	it	ge
 800c548:	462b      	movge	r3, r5
 800c54a:	42b3      	cmp	r3, r6
 800c54c:	bfa8      	it	ge
 800c54e:	4633      	movge	r3, r6
 800c550:	2b00      	cmp	r3, #0
 800c552:	bfc2      	ittt	gt
 800c554:	1aed      	subgt	r5, r5, r3
 800c556:	1af6      	subgt	r6, r6, r3
 800c558:	1aff      	subgt	r7, r7, r3
 800c55a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	dd16      	ble.n	800c58e <_strtod_l+0x736>
 800c560:	4641      	mov	r1, r8
 800c562:	9805      	ldr	r0, [sp, #20]
 800c564:	461a      	mov	r2, r3
 800c566:	f003 f815 	bl	800f594 <__pow5mult>
 800c56a:	4680      	mov	r8, r0
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d0ba      	beq.n	800c4e6 <_strtod_l+0x68e>
 800c570:	4601      	mov	r1, r0
 800c572:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c574:	9805      	ldr	r0, [sp, #20]
 800c576:	f002 ff63 	bl	800f440 <__multiply>
 800c57a:	900e      	str	r0, [sp, #56]	@ 0x38
 800c57c:	2800      	cmp	r0, #0
 800c57e:	f43f ae8a 	beq.w	800c296 <_strtod_l+0x43e>
 800c582:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c584:	9805      	ldr	r0, [sp, #20]
 800c586:	f002 fe47 	bl	800f218 <_Bfree>
 800c58a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c58c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c58e:	2d00      	cmp	r5, #0
 800c590:	dc1d      	bgt.n	800c5ce <_strtod_l+0x776>
 800c592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c594:	2b00      	cmp	r3, #0
 800c596:	dd23      	ble.n	800c5e0 <_strtod_l+0x788>
 800c598:	4649      	mov	r1, r9
 800c59a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c59c:	9805      	ldr	r0, [sp, #20]
 800c59e:	f002 fff9 	bl	800f594 <__pow5mult>
 800c5a2:	4681      	mov	r9, r0
 800c5a4:	b9e0      	cbnz	r0, 800c5e0 <_strtod_l+0x788>
 800c5a6:	f04f 0900 	mov.w	r9, #0
 800c5aa:	e674      	b.n	800c296 <_strtod_l+0x43e>
 800c5ac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800c5b0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800c5b4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800c5b8:	35e2      	adds	r5, #226	@ 0xe2
 800c5ba:	fa01 f305 	lsl.w	r3, r1, r5
 800c5be:	9310      	str	r3, [sp, #64]	@ 0x40
 800c5c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c5c2:	e7ba      	b.n	800c53a <_strtod_l+0x6e2>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c5cc:	e7b5      	b.n	800c53a <_strtod_l+0x6e2>
 800c5ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c5d0:	9805      	ldr	r0, [sp, #20]
 800c5d2:	462a      	mov	r2, r5
 800c5d4:	f003 f838 	bl	800f648 <__lshift>
 800c5d8:	901a      	str	r0, [sp, #104]	@ 0x68
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	d1d9      	bne.n	800c592 <_strtod_l+0x73a>
 800c5de:	e65a      	b.n	800c296 <_strtod_l+0x43e>
 800c5e0:	2e00      	cmp	r6, #0
 800c5e2:	dd07      	ble.n	800c5f4 <_strtod_l+0x79c>
 800c5e4:	4649      	mov	r1, r9
 800c5e6:	9805      	ldr	r0, [sp, #20]
 800c5e8:	4632      	mov	r2, r6
 800c5ea:	f003 f82d 	bl	800f648 <__lshift>
 800c5ee:	4681      	mov	r9, r0
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	d0d8      	beq.n	800c5a6 <_strtod_l+0x74e>
 800c5f4:	2f00      	cmp	r7, #0
 800c5f6:	dd08      	ble.n	800c60a <_strtod_l+0x7b2>
 800c5f8:	4641      	mov	r1, r8
 800c5fa:	9805      	ldr	r0, [sp, #20]
 800c5fc:	463a      	mov	r2, r7
 800c5fe:	f003 f823 	bl	800f648 <__lshift>
 800c602:	4680      	mov	r8, r0
 800c604:	2800      	cmp	r0, #0
 800c606:	f43f ae46 	beq.w	800c296 <_strtod_l+0x43e>
 800c60a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c60c:	9805      	ldr	r0, [sp, #20]
 800c60e:	464a      	mov	r2, r9
 800c610:	f003 f8a2 	bl	800f758 <__mdiff>
 800c614:	4604      	mov	r4, r0
 800c616:	2800      	cmp	r0, #0
 800c618:	f43f ae3d 	beq.w	800c296 <_strtod_l+0x43e>
 800c61c:	68c3      	ldr	r3, [r0, #12]
 800c61e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c620:	2300      	movs	r3, #0
 800c622:	60c3      	str	r3, [r0, #12]
 800c624:	4641      	mov	r1, r8
 800c626:	f003 f87b 	bl	800f720 <__mcmp>
 800c62a:	2800      	cmp	r0, #0
 800c62c:	da46      	bge.n	800c6bc <_strtod_l+0x864>
 800c62e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c630:	ea53 030a 	orrs.w	r3, r3, sl
 800c634:	d16c      	bne.n	800c710 <_strtod_l+0x8b8>
 800c636:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d168      	bne.n	800c710 <_strtod_l+0x8b8>
 800c63e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c642:	0d1b      	lsrs	r3, r3, #20
 800c644:	051b      	lsls	r3, r3, #20
 800c646:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c64a:	d961      	bls.n	800c710 <_strtod_l+0x8b8>
 800c64c:	6963      	ldr	r3, [r4, #20]
 800c64e:	b913      	cbnz	r3, 800c656 <_strtod_l+0x7fe>
 800c650:	6923      	ldr	r3, [r4, #16]
 800c652:	2b01      	cmp	r3, #1
 800c654:	dd5c      	ble.n	800c710 <_strtod_l+0x8b8>
 800c656:	4621      	mov	r1, r4
 800c658:	2201      	movs	r2, #1
 800c65a:	9805      	ldr	r0, [sp, #20]
 800c65c:	f002 fff4 	bl	800f648 <__lshift>
 800c660:	4641      	mov	r1, r8
 800c662:	4604      	mov	r4, r0
 800c664:	f003 f85c 	bl	800f720 <__mcmp>
 800c668:	2800      	cmp	r0, #0
 800c66a:	dd51      	ble.n	800c710 <_strtod_l+0x8b8>
 800c66c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c670:	9a08      	ldr	r2, [sp, #32]
 800c672:	0d1b      	lsrs	r3, r3, #20
 800c674:	051b      	lsls	r3, r3, #20
 800c676:	2a00      	cmp	r2, #0
 800c678:	d06b      	beq.n	800c752 <_strtod_l+0x8fa>
 800c67a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c67e:	d868      	bhi.n	800c752 <_strtod_l+0x8fa>
 800c680:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c684:	f67f ae9d 	bls.w	800c3c2 <_strtod_l+0x56a>
 800c688:	4b0a      	ldr	r3, [pc, #40]	@ (800c6b4 <_strtod_l+0x85c>)
 800c68a:	4650      	mov	r0, sl
 800c68c:	4659      	mov	r1, fp
 800c68e:	2200      	movs	r2, #0
 800c690:	f7f3 ffd2 	bl	8000638 <__aeabi_dmul>
 800c694:	4b08      	ldr	r3, [pc, #32]	@ (800c6b8 <_strtod_l+0x860>)
 800c696:	400b      	ands	r3, r1
 800c698:	4682      	mov	sl, r0
 800c69a:	468b      	mov	fp, r1
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f47f ae05 	bne.w	800c2ac <_strtod_l+0x454>
 800c6a2:	9a05      	ldr	r2, [sp, #20]
 800c6a4:	2322      	movs	r3, #34	@ 0x22
 800c6a6:	6013      	str	r3, [r2, #0]
 800c6a8:	e600      	b.n	800c2ac <_strtod_l+0x454>
 800c6aa:	bf00      	nop
 800c6ac:	08010bb8 	.word	0x08010bb8
 800c6b0:	fffffc02 	.word	0xfffffc02
 800c6b4:	39500000 	.word	0x39500000
 800c6b8:	7ff00000 	.word	0x7ff00000
 800c6bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c6c0:	d165      	bne.n	800c78e <_strtod_l+0x936>
 800c6c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c6c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6c8:	b35a      	cbz	r2, 800c722 <_strtod_l+0x8ca>
 800c6ca:	4a9f      	ldr	r2, [pc, #636]	@ (800c948 <_strtod_l+0xaf0>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d12b      	bne.n	800c728 <_strtod_l+0x8d0>
 800c6d0:	9b08      	ldr	r3, [sp, #32]
 800c6d2:	4651      	mov	r1, sl
 800c6d4:	b303      	cbz	r3, 800c718 <_strtod_l+0x8c0>
 800c6d6:	4b9d      	ldr	r3, [pc, #628]	@ (800c94c <_strtod_l+0xaf4>)
 800c6d8:	465a      	mov	r2, fp
 800c6da:	4013      	ands	r3, r2
 800c6dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c6e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e4:	d81b      	bhi.n	800c71e <_strtod_l+0x8c6>
 800c6e6:	0d1b      	lsrs	r3, r3, #20
 800c6e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c6ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c6f0:	4299      	cmp	r1, r3
 800c6f2:	d119      	bne.n	800c728 <_strtod_l+0x8d0>
 800c6f4:	4b96      	ldr	r3, [pc, #600]	@ (800c950 <_strtod_l+0xaf8>)
 800c6f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d102      	bne.n	800c702 <_strtod_l+0x8aa>
 800c6fc:	3101      	adds	r1, #1
 800c6fe:	f43f adca 	beq.w	800c296 <_strtod_l+0x43e>
 800c702:	4b92      	ldr	r3, [pc, #584]	@ (800c94c <_strtod_l+0xaf4>)
 800c704:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c706:	401a      	ands	r2, r3
 800c708:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800c70c:	f04f 0a00 	mov.w	sl, #0
 800c710:	9b08      	ldr	r3, [sp, #32]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1b8      	bne.n	800c688 <_strtod_l+0x830>
 800c716:	e5c9      	b.n	800c2ac <_strtod_l+0x454>
 800c718:	f04f 33ff 	mov.w	r3, #4294967295
 800c71c:	e7e8      	b.n	800c6f0 <_strtod_l+0x898>
 800c71e:	4613      	mov	r3, r2
 800c720:	e7e6      	b.n	800c6f0 <_strtod_l+0x898>
 800c722:	ea53 030a 	orrs.w	r3, r3, sl
 800c726:	d0a1      	beq.n	800c66c <_strtod_l+0x814>
 800c728:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c72a:	b1db      	cbz	r3, 800c764 <_strtod_l+0x90c>
 800c72c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c72e:	4213      	tst	r3, r2
 800c730:	d0ee      	beq.n	800c710 <_strtod_l+0x8b8>
 800c732:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c734:	9a08      	ldr	r2, [sp, #32]
 800c736:	4650      	mov	r0, sl
 800c738:	4659      	mov	r1, fp
 800c73a:	b1bb      	cbz	r3, 800c76c <_strtod_l+0x914>
 800c73c:	f7ff fb6c 	bl	800be18 <sulp>
 800c740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c744:	ec53 2b10 	vmov	r2, r3, d0
 800c748:	f7f3 fdc0 	bl	80002cc <__adddf3>
 800c74c:	4682      	mov	sl, r0
 800c74e:	468b      	mov	fp, r1
 800c750:	e7de      	b.n	800c710 <_strtod_l+0x8b8>
 800c752:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c756:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c75a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c75e:	f04f 3aff 	mov.w	sl, #4294967295
 800c762:	e7d5      	b.n	800c710 <_strtod_l+0x8b8>
 800c764:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c766:	ea13 0f0a 	tst.w	r3, sl
 800c76a:	e7e1      	b.n	800c730 <_strtod_l+0x8d8>
 800c76c:	f7ff fb54 	bl	800be18 <sulp>
 800c770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c774:	ec53 2b10 	vmov	r2, r3, d0
 800c778:	f7f3 fda6 	bl	80002c8 <__aeabi_dsub>
 800c77c:	2200      	movs	r2, #0
 800c77e:	2300      	movs	r3, #0
 800c780:	4682      	mov	sl, r0
 800c782:	468b      	mov	fp, r1
 800c784:	f7f4 f9c0 	bl	8000b08 <__aeabi_dcmpeq>
 800c788:	2800      	cmp	r0, #0
 800c78a:	d0c1      	beq.n	800c710 <_strtod_l+0x8b8>
 800c78c:	e619      	b.n	800c3c2 <_strtod_l+0x56a>
 800c78e:	4641      	mov	r1, r8
 800c790:	4620      	mov	r0, r4
 800c792:	f003 f93d 	bl	800fa10 <__ratio>
 800c796:	ec57 6b10 	vmov	r6, r7, d0
 800c79a:	2200      	movs	r2, #0
 800c79c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	4639      	mov	r1, r7
 800c7a4:	f7f4 f9c4 	bl	8000b30 <__aeabi_dcmple>
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d06f      	beq.n	800c88c <_strtod_l+0xa34>
 800c7ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d17a      	bne.n	800c8a8 <_strtod_l+0xa50>
 800c7b2:	f1ba 0f00 	cmp.w	sl, #0
 800c7b6:	d158      	bne.n	800c86a <_strtod_l+0xa12>
 800c7b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d15a      	bne.n	800c878 <_strtod_l+0xa20>
 800c7c2:	4b64      	ldr	r3, [pc, #400]	@ (800c954 <_strtod_l+0xafc>)
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	4639      	mov	r1, r7
 800c7ca:	f7f4 f9a7 	bl	8000b1c <__aeabi_dcmplt>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d159      	bne.n	800c886 <_strtod_l+0xa2e>
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	4639      	mov	r1, r7
 800c7d6:	4b60      	ldr	r3, [pc, #384]	@ (800c958 <_strtod_l+0xb00>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f7f3 ff2d 	bl	8000638 <__aeabi_dmul>
 800c7de:	4606      	mov	r6, r0
 800c7e0:	460f      	mov	r7, r1
 800c7e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800c7e6:	9606      	str	r6, [sp, #24]
 800c7e8:	9307      	str	r3, [sp, #28]
 800c7ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c7ee:	4d57      	ldr	r5, [pc, #348]	@ (800c94c <_strtod_l+0xaf4>)
 800c7f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c7f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7f6:	401d      	ands	r5, r3
 800c7f8:	4b58      	ldr	r3, [pc, #352]	@ (800c95c <_strtod_l+0xb04>)
 800c7fa:	429d      	cmp	r5, r3
 800c7fc:	f040 80b2 	bne.w	800c964 <_strtod_l+0xb0c>
 800c800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c802:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800c806:	ec4b ab10 	vmov	d0, sl, fp
 800c80a:	f003 f839 	bl	800f880 <__ulp>
 800c80e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c812:	ec51 0b10 	vmov	r0, r1, d0
 800c816:	f7f3 ff0f 	bl	8000638 <__aeabi_dmul>
 800c81a:	4652      	mov	r2, sl
 800c81c:	465b      	mov	r3, fp
 800c81e:	f7f3 fd55 	bl	80002cc <__adddf3>
 800c822:	460b      	mov	r3, r1
 800c824:	4949      	ldr	r1, [pc, #292]	@ (800c94c <_strtod_l+0xaf4>)
 800c826:	4a4e      	ldr	r2, [pc, #312]	@ (800c960 <_strtod_l+0xb08>)
 800c828:	4019      	ands	r1, r3
 800c82a:	4291      	cmp	r1, r2
 800c82c:	4682      	mov	sl, r0
 800c82e:	d942      	bls.n	800c8b6 <_strtod_l+0xa5e>
 800c830:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c832:	4b47      	ldr	r3, [pc, #284]	@ (800c950 <_strtod_l+0xaf8>)
 800c834:	429a      	cmp	r2, r3
 800c836:	d103      	bne.n	800c840 <_strtod_l+0x9e8>
 800c838:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c83a:	3301      	adds	r3, #1
 800c83c:	f43f ad2b 	beq.w	800c296 <_strtod_l+0x43e>
 800c840:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800c950 <_strtod_l+0xaf8>
 800c844:	f04f 3aff 	mov.w	sl, #4294967295
 800c848:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c84a:	9805      	ldr	r0, [sp, #20]
 800c84c:	f002 fce4 	bl	800f218 <_Bfree>
 800c850:	9805      	ldr	r0, [sp, #20]
 800c852:	4649      	mov	r1, r9
 800c854:	f002 fce0 	bl	800f218 <_Bfree>
 800c858:	9805      	ldr	r0, [sp, #20]
 800c85a:	4641      	mov	r1, r8
 800c85c:	f002 fcdc 	bl	800f218 <_Bfree>
 800c860:	9805      	ldr	r0, [sp, #20]
 800c862:	4621      	mov	r1, r4
 800c864:	f002 fcd8 	bl	800f218 <_Bfree>
 800c868:	e618      	b.n	800c49c <_strtod_l+0x644>
 800c86a:	f1ba 0f01 	cmp.w	sl, #1
 800c86e:	d103      	bne.n	800c878 <_strtod_l+0xa20>
 800c870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c872:	2b00      	cmp	r3, #0
 800c874:	f43f ada5 	beq.w	800c3c2 <_strtod_l+0x56a>
 800c878:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800c928 <_strtod_l+0xad0>
 800c87c:	4f35      	ldr	r7, [pc, #212]	@ (800c954 <_strtod_l+0xafc>)
 800c87e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c882:	2600      	movs	r6, #0
 800c884:	e7b1      	b.n	800c7ea <_strtod_l+0x992>
 800c886:	4f34      	ldr	r7, [pc, #208]	@ (800c958 <_strtod_l+0xb00>)
 800c888:	2600      	movs	r6, #0
 800c88a:	e7aa      	b.n	800c7e2 <_strtod_l+0x98a>
 800c88c:	4b32      	ldr	r3, [pc, #200]	@ (800c958 <_strtod_l+0xb00>)
 800c88e:	4630      	mov	r0, r6
 800c890:	4639      	mov	r1, r7
 800c892:	2200      	movs	r2, #0
 800c894:	f7f3 fed0 	bl	8000638 <__aeabi_dmul>
 800c898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c89a:	4606      	mov	r6, r0
 800c89c:	460f      	mov	r7, r1
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d09f      	beq.n	800c7e2 <_strtod_l+0x98a>
 800c8a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c8a6:	e7a0      	b.n	800c7ea <_strtod_l+0x992>
 800c8a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800c930 <_strtod_l+0xad8>
 800c8ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c8b0:	ec57 6b17 	vmov	r6, r7, d7
 800c8b4:	e799      	b.n	800c7ea <_strtod_l+0x992>
 800c8b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c8ba:	9b08      	ldr	r3, [sp, #32]
 800c8bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1c1      	bne.n	800c848 <_strtod_l+0x9f0>
 800c8c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8c8:	0d1b      	lsrs	r3, r3, #20
 800c8ca:	051b      	lsls	r3, r3, #20
 800c8cc:	429d      	cmp	r5, r3
 800c8ce:	d1bb      	bne.n	800c848 <_strtod_l+0x9f0>
 800c8d0:	4630      	mov	r0, r6
 800c8d2:	4639      	mov	r1, r7
 800c8d4:	f7f4 fa10 	bl	8000cf8 <__aeabi_d2lz>
 800c8d8:	f7f3 fe80 	bl	80005dc <__aeabi_l2d>
 800c8dc:	4602      	mov	r2, r0
 800c8de:	460b      	mov	r3, r1
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	4639      	mov	r1, r7
 800c8e4:	f7f3 fcf0 	bl	80002c8 <__aeabi_dsub>
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c8f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800c8f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8f6:	ea46 060a 	orr.w	r6, r6, sl
 800c8fa:	431e      	orrs	r6, r3
 800c8fc:	d06f      	beq.n	800c9de <_strtod_l+0xb86>
 800c8fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800c938 <_strtod_l+0xae0>)
 800c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c904:	f7f4 f90a 	bl	8000b1c <__aeabi_dcmplt>
 800c908:	2800      	cmp	r0, #0
 800c90a:	f47f accf 	bne.w	800c2ac <_strtod_l+0x454>
 800c90e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c940 <_strtod_l+0xae8>)
 800c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c918:	f7f4 f91e 	bl	8000b58 <__aeabi_dcmpgt>
 800c91c:	2800      	cmp	r0, #0
 800c91e:	d093      	beq.n	800c848 <_strtod_l+0x9f0>
 800c920:	e4c4      	b.n	800c2ac <_strtod_l+0x454>
 800c922:	bf00      	nop
 800c924:	f3af 8000 	nop.w
 800c928:	00000000 	.word	0x00000000
 800c92c:	bff00000 	.word	0xbff00000
 800c930:	00000000 	.word	0x00000000
 800c934:	3ff00000 	.word	0x3ff00000
 800c938:	94a03595 	.word	0x94a03595
 800c93c:	3fdfffff 	.word	0x3fdfffff
 800c940:	35afe535 	.word	0x35afe535
 800c944:	3fe00000 	.word	0x3fe00000
 800c948:	000fffff 	.word	0x000fffff
 800c94c:	7ff00000 	.word	0x7ff00000
 800c950:	7fefffff 	.word	0x7fefffff
 800c954:	3ff00000 	.word	0x3ff00000
 800c958:	3fe00000 	.word	0x3fe00000
 800c95c:	7fe00000 	.word	0x7fe00000
 800c960:	7c9fffff 	.word	0x7c9fffff
 800c964:	9b08      	ldr	r3, [sp, #32]
 800c966:	b323      	cbz	r3, 800c9b2 <_strtod_l+0xb5a>
 800c968:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800c96c:	d821      	bhi.n	800c9b2 <_strtod_l+0xb5a>
 800c96e:	a328      	add	r3, pc, #160	@ (adr r3, 800ca10 <_strtod_l+0xbb8>)
 800c970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c974:	4630      	mov	r0, r6
 800c976:	4639      	mov	r1, r7
 800c978:	f7f4 f8da 	bl	8000b30 <__aeabi_dcmple>
 800c97c:	b1a0      	cbz	r0, 800c9a8 <_strtod_l+0xb50>
 800c97e:	4639      	mov	r1, r7
 800c980:	4630      	mov	r0, r6
 800c982:	f7f4 f931 	bl	8000be8 <__aeabi_d2uiz>
 800c986:	2801      	cmp	r0, #1
 800c988:	bf38      	it	cc
 800c98a:	2001      	movcc	r0, #1
 800c98c:	f7f3 fdda 	bl	8000544 <__aeabi_ui2d>
 800c990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c992:	4606      	mov	r6, r0
 800c994:	460f      	mov	r7, r1
 800c996:	b9fb      	cbnz	r3, 800c9d8 <_strtod_l+0xb80>
 800c998:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c99c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c99e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c9a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c9a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c9a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c9aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c9ae:	1b5b      	subs	r3, r3, r5
 800c9b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800c9b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c9b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c9ba:	f002 ff61 	bl	800f880 <__ulp>
 800c9be:	4650      	mov	r0, sl
 800c9c0:	ec53 2b10 	vmov	r2, r3, d0
 800c9c4:	4659      	mov	r1, fp
 800c9c6:	f7f3 fe37 	bl	8000638 <__aeabi_dmul>
 800c9ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c9ce:	f7f3 fc7d 	bl	80002cc <__adddf3>
 800c9d2:	4682      	mov	sl, r0
 800c9d4:	468b      	mov	fp, r1
 800c9d6:	e770      	b.n	800c8ba <_strtod_l+0xa62>
 800c9d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c9dc:	e7e0      	b.n	800c9a0 <_strtod_l+0xb48>
 800c9de:	a30e      	add	r3, pc, #56	@ (adr r3, 800ca18 <_strtod_l+0xbc0>)
 800c9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e4:	f7f4 f89a 	bl	8000b1c <__aeabi_dcmplt>
 800c9e8:	e798      	b.n	800c91c <_strtod_l+0xac4>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c9ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c9f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9f2:	6013      	str	r3, [r2, #0]
 800c9f4:	f7ff ba6d 	b.w	800bed2 <_strtod_l+0x7a>
 800c9f8:	2a65      	cmp	r2, #101	@ 0x65
 800c9fa:	f43f ab66 	beq.w	800c0ca <_strtod_l+0x272>
 800c9fe:	2a45      	cmp	r2, #69	@ 0x45
 800ca00:	f43f ab63 	beq.w	800c0ca <_strtod_l+0x272>
 800ca04:	2301      	movs	r3, #1
 800ca06:	f7ff bb9e 	b.w	800c146 <_strtod_l+0x2ee>
 800ca0a:	bf00      	nop
 800ca0c:	f3af 8000 	nop.w
 800ca10:	ffc00000 	.word	0xffc00000
 800ca14:	41dfffff 	.word	0x41dfffff
 800ca18:	94a03595 	.word	0x94a03595
 800ca1c:	3fcfffff 	.word	0x3fcfffff

0800ca20 <_strtod_r>:
 800ca20:	4b01      	ldr	r3, [pc, #4]	@ (800ca28 <_strtod_r+0x8>)
 800ca22:	f7ff ba19 	b.w	800be58 <_strtod_l>
 800ca26:	bf00      	nop
 800ca28:	2000002c 	.word	0x2000002c

0800ca2c <strtof>:
 800ca2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca30:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800caf0 <strtof+0xc4>
 800ca34:	4b29      	ldr	r3, [pc, #164]	@ (800cadc <strtof+0xb0>)
 800ca36:	460a      	mov	r2, r1
 800ca38:	ed2d 8b02 	vpush	{d8}
 800ca3c:	4601      	mov	r1, r0
 800ca3e:	f8d8 0000 	ldr.w	r0, [r8]
 800ca42:	f7ff fa09 	bl	800be58 <_strtod_l>
 800ca46:	ec55 4b10 	vmov	r4, r5, d0
 800ca4a:	4622      	mov	r2, r4
 800ca4c:	462b      	mov	r3, r5
 800ca4e:	4620      	mov	r0, r4
 800ca50:	4629      	mov	r1, r5
 800ca52:	f7f4 f88b 	bl	8000b6c <__aeabi_dcmpun>
 800ca56:	b190      	cbz	r0, 800ca7e <strtof+0x52>
 800ca58:	2d00      	cmp	r5, #0
 800ca5a:	4821      	ldr	r0, [pc, #132]	@ (800cae0 <strtof+0xb4>)
 800ca5c:	da09      	bge.n	800ca72 <strtof+0x46>
 800ca5e:	f001 f8df 	bl	800dc20 <nanf>
 800ca62:	eeb1 8a40 	vneg.f32	s16, s0
 800ca66:	eeb0 0a48 	vmov.f32	s0, s16
 800ca6a:	ecbd 8b02 	vpop	{d8}
 800ca6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca72:	ecbd 8b02 	vpop	{d8}
 800ca76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7a:	f001 b8d1 	b.w	800dc20 <nanf>
 800ca7e:	4620      	mov	r0, r4
 800ca80:	4629      	mov	r1, r5
 800ca82:	f7f4 f8d1 	bl	8000c28 <__aeabi_d2f>
 800ca86:	ee08 0a10 	vmov	s16, r0
 800ca8a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800cae4 <strtof+0xb8>
 800ca8e:	eeb0 7ac8 	vabs.f32	s14, s16
 800ca92:	eeb4 7a67 	vcmp.f32	s14, s15
 800ca96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9a:	dd11      	ble.n	800cac0 <strtof+0x94>
 800ca9c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800caa0:	4b11      	ldr	r3, [pc, #68]	@ (800cae8 <strtof+0xbc>)
 800caa2:	f04f 32ff 	mov.w	r2, #4294967295
 800caa6:	4620      	mov	r0, r4
 800caa8:	4639      	mov	r1, r7
 800caaa:	f7f4 f85f 	bl	8000b6c <__aeabi_dcmpun>
 800caae:	b980      	cbnz	r0, 800cad2 <strtof+0xa6>
 800cab0:	4b0d      	ldr	r3, [pc, #52]	@ (800cae8 <strtof+0xbc>)
 800cab2:	f04f 32ff 	mov.w	r2, #4294967295
 800cab6:	4620      	mov	r0, r4
 800cab8:	4639      	mov	r1, r7
 800caba:	f7f4 f839 	bl	8000b30 <__aeabi_dcmple>
 800cabe:	b940      	cbnz	r0, 800cad2 <strtof+0xa6>
 800cac0:	ee18 3a10 	vmov	r3, s16
 800cac4:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800cac8:	d1cd      	bne.n	800ca66 <strtof+0x3a>
 800caca:	4b08      	ldr	r3, [pc, #32]	@ (800caec <strtof+0xc0>)
 800cacc:	402b      	ands	r3, r5
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d0c9      	beq.n	800ca66 <strtof+0x3a>
 800cad2:	f8d8 3000 	ldr.w	r3, [r8]
 800cad6:	2222      	movs	r2, #34	@ 0x22
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	e7c4      	b.n	800ca66 <strtof+0x3a>
 800cadc:	2000002c 	.word	0x2000002c
 800cae0:	08010ccd 	.word	0x08010ccd
 800cae4:	7f7fffff 	.word	0x7f7fffff
 800cae8:	7fefffff 	.word	0x7fefffff
 800caec:	7ff00000 	.word	0x7ff00000
 800caf0:	20000198 	.word	0x20000198

0800caf4 <__cvt>:
 800caf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caf8:	ec57 6b10 	vmov	r6, r7, d0
 800cafc:	2f00      	cmp	r7, #0
 800cafe:	460c      	mov	r4, r1
 800cb00:	4619      	mov	r1, r3
 800cb02:	463b      	mov	r3, r7
 800cb04:	bfbb      	ittet	lt
 800cb06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cb0a:	461f      	movlt	r7, r3
 800cb0c:	2300      	movge	r3, #0
 800cb0e:	232d      	movlt	r3, #45	@ 0x2d
 800cb10:	700b      	strb	r3, [r1, #0]
 800cb12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cb18:	4691      	mov	r9, r2
 800cb1a:	f023 0820 	bic.w	r8, r3, #32
 800cb1e:	bfbc      	itt	lt
 800cb20:	4632      	movlt	r2, r6
 800cb22:	4616      	movlt	r6, r2
 800cb24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb28:	d005      	beq.n	800cb36 <__cvt+0x42>
 800cb2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cb2e:	d100      	bne.n	800cb32 <__cvt+0x3e>
 800cb30:	3401      	adds	r4, #1
 800cb32:	2102      	movs	r1, #2
 800cb34:	e000      	b.n	800cb38 <__cvt+0x44>
 800cb36:	2103      	movs	r1, #3
 800cb38:	ab03      	add	r3, sp, #12
 800cb3a:	9301      	str	r3, [sp, #4]
 800cb3c:	ab02      	add	r3, sp, #8
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	ec47 6b10 	vmov	d0, r6, r7
 800cb44:	4653      	mov	r3, sl
 800cb46:	4622      	mov	r2, r4
 800cb48:	f001 f916 	bl	800dd78 <_dtoa_r>
 800cb4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cb50:	4605      	mov	r5, r0
 800cb52:	d119      	bne.n	800cb88 <__cvt+0x94>
 800cb54:	f019 0f01 	tst.w	r9, #1
 800cb58:	d00e      	beq.n	800cb78 <__cvt+0x84>
 800cb5a:	eb00 0904 	add.w	r9, r0, r4
 800cb5e:	2200      	movs	r2, #0
 800cb60:	2300      	movs	r3, #0
 800cb62:	4630      	mov	r0, r6
 800cb64:	4639      	mov	r1, r7
 800cb66:	f7f3 ffcf 	bl	8000b08 <__aeabi_dcmpeq>
 800cb6a:	b108      	cbz	r0, 800cb70 <__cvt+0x7c>
 800cb6c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb70:	2230      	movs	r2, #48	@ 0x30
 800cb72:	9b03      	ldr	r3, [sp, #12]
 800cb74:	454b      	cmp	r3, r9
 800cb76:	d31e      	bcc.n	800cbb6 <__cvt+0xc2>
 800cb78:	9b03      	ldr	r3, [sp, #12]
 800cb7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb7c:	1b5b      	subs	r3, r3, r5
 800cb7e:	4628      	mov	r0, r5
 800cb80:	6013      	str	r3, [r2, #0]
 800cb82:	b004      	add	sp, #16
 800cb84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb8c:	eb00 0904 	add.w	r9, r0, r4
 800cb90:	d1e5      	bne.n	800cb5e <__cvt+0x6a>
 800cb92:	7803      	ldrb	r3, [r0, #0]
 800cb94:	2b30      	cmp	r3, #48	@ 0x30
 800cb96:	d10a      	bne.n	800cbae <__cvt+0xba>
 800cb98:	2200      	movs	r2, #0
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	4639      	mov	r1, r7
 800cba0:	f7f3 ffb2 	bl	8000b08 <__aeabi_dcmpeq>
 800cba4:	b918      	cbnz	r0, 800cbae <__cvt+0xba>
 800cba6:	f1c4 0401 	rsb	r4, r4, #1
 800cbaa:	f8ca 4000 	str.w	r4, [sl]
 800cbae:	f8da 3000 	ldr.w	r3, [sl]
 800cbb2:	4499      	add	r9, r3
 800cbb4:	e7d3      	b.n	800cb5e <__cvt+0x6a>
 800cbb6:	1c59      	adds	r1, r3, #1
 800cbb8:	9103      	str	r1, [sp, #12]
 800cbba:	701a      	strb	r2, [r3, #0]
 800cbbc:	e7d9      	b.n	800cb72 <__cvt+0x7e>

0800cbbe <__exponent>:
 800cbbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbc0:	2900      	cmp	r1, #0
 800cbc2:	bfba      	itte	lt
 800cbc4:	4249      	neglt	r1, r1
 800cbc6:	232d      	movlt	r3, #45	@ 0x2d
 800cbc8:	232b      	movge	r3, #43	@ 0x2b
 800cbca:	2909      	cmp	r1, #9
 800cbcc:	7002      	strb	r2, [r0, #0]
 800cbce:	7043      	strb	r3, [r0, #1]
 800cbd0:	dd29      	ble.n	800cc26 <__exponent+0x68>
 800cbd2:	f10d 0307 	add.w	r3, sp, #7
 800cbd6:	461d      	mov	r5, r3
 800cbd8:	270a      	movs	r7, #10
 800cbda:	461a      	mov	r2, r3
 800cbdc:	fbb1 f6f7 	udiv	r6, r1, r7
 800cbe0:	fb07 1416 	mls	r4, r7, r6, r1
 800cbe4:	3430      	adds	r4, #48	@ 0x30
 800cbe6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cbea:	460c      	mov	r4, r1
 800cbec:	2c63      	cmp	r4, #99	@ 0x63
 800cbee:	f103 33ff 	add.w	r3, r3, #4294967295
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	dcf1      	bgt.n	800cbda <__exponent+0x1c>
 800cbf6:	3130      	adds	r1, #48	@ 0x30
 800cbf8:	1e94      	subs	r4, r2, #2
 800cbfa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cbfe:	1c41      	adds	r1, r0, #1
 800cc00:	4623      	mov	r3, r4
 800cc02:	42ab      	cmp	r3, r5
 800cc04:	d30a      	bcc.n	800cc1c <__exponent+0x5e>
 800cc06:	f10d 0309 	add.w	r3, sp, #9
 800cc0a:	1a9b      	subs	r3, r3, r2
 800cc0c:	42ac      	cmp	r4, r5
 800cc0e:	bf88      	it	hi
 800cc10:	2300      	movhi	r3, #0
 800cc12:	3302      	adds	r3, #2
 800cc14:	4403      	add	r3, r0
 800cc16:	1a18      	subs	r0, r3, r0
 800cc18:	b003      	add	sp, #12
 800cc1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc1c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cc20:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cc24:	e7ed      	b.n	800cc02 <__exponent+0x44>
 800cc26:	2330      	movs	r3, #48	@ 0x30
 800cc28:	3130      	adds	r1, #48	@ 0x30
 800cc2a:	7083      	strb	r3, [r0, #2]
 800cc2c:	70c1      	strb	r1, [r0, #3]
 800cc2e:	1d03      	adds	r3, r0, #4
 800cc30:	e7f1      	b.n	800cc16 <__exponent+0x58>
	...

0800cc34 <_printf_float>:
 800cc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc38:	b08d      	sub	sp, #52	@ 0x34
 800cc3a:	460c      	mov	r4, r1
 800cc3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cc40:	4616      	mov	r6, r2
 800cc42:	461f      	mov	r7, r3
 800cc44:	4605      	mov	r5, r0
 800cc46:	f000 ff5d 	bl	800db04 <_localeconv_r>
 800cc4a:	6803      	ldr	r3, [r0, #0]
 800cc4c:	9304      	str	r3, [sp, #16]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7f3 fb2e 	bl	80002b0 <strlen>
 800cc54:	2300      	movs	r3, #0
 800cc56:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc58:	f8d8 3000 	ldr.w	r3, [r8]
 800cc5c:	9005      	str	r0, [sp, #20]
 800cc5e:	3307      	adds	r3, #7
 800cc60:	f023 0307 	bic.w	r3, r3, #7
 800cc64:	f103 0208 	add.w	r2, r3, #8
 800cc68:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cc6c:	f8d4 b000 	ldr.w	fp, [r4]
 800cc70:	f8c8 2000 	str.w	r2, [r8]
 800cc74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cc7c:	9307      	str	r3, [sp, #28]
 800cc7e:	f8cd 8018 	str.w	r8, [sp, #24]
 800cc82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cc86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc8a:	4b9c      	ldr	r3, [pc, #624]	@ (800cefc <_printf_float+0x2c8>)
 800cc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800cc90:	f7f3 ff6c 	bl	8000b6c <__aeabi_dcmpun>
 800cc94:	bb70      	cbnz	r0, 800ccf4 <_printf_float+0xc0>
 800cc96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc9a:	4b98      	ldr	r3, [pc, #608]	@ (800cefc <_printf_float+0x2c8>)
 800cc9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cca0:	f7f3 ff46 	bl	8000b30 <__aeabi_dcmple>
 800cca4:	bb30      	cbnz	r0, 800ccf4 <_printf_float+0xc0>
 800cca6:	2200      	movs	r2, #0
 800cca8:	2300      	movs	r3, #0
 800ccaa:	4640      	mov	r0, r8
 800ccac:	4649      	mov	r1, r9
 800ccae:	f7f3 ff35 	bl	8000b1c <__aeabi_dcmplt>
 800ccb2:	b110      	cbz	r0, 800ccba <_printf_float+0x86>
 800ccb4:	232d      	movs	r3, #45	@ 0x2d
 800ccb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccba:	4a91      	ldr	r2, [pc, #580]	@ (800cf00 <_printf_float+0x2cc>)
 800ccbc:	4b91      	ldr	r3, [pc, #580]	@ (800cf04 <_printf_float+0x2d0>)
 800ccbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ccc2:	bf94      	ite	ls
 800ccc4:	4690      	movls	r8, r2
 800ccc6:	4698      	movhi	r8, r3
 800ccc8:	2303      	movs	r3, #3
 800ccca:	6123      	str	r3, [r4, #16]
 800cccc:	f02b 0304 	bic.w	r3, fp, #4
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	f04f 0900 	mov.w	r9, #0
 800ccd6:	9700      	str	r7, [sp, #0]
 800ccd8:	4633      	mov	r3, r6
 800ccda:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ccdc:	4621      	mov	r1, r4
 800ccde:	4628      	mov	r0, r5
 800cce0:	f000 f9d2 	bl	800d088 <_printf_common>
 800cce4:	3001      	adds	r0, #1
 800cce6:	f040 808d 	bne.w	800ce04 <_printf_float+0x1d0>
 800ccea:	f04f 30ff 	mov.w	r0, #4294967295
 800ccee:	b00d      	add	sp, #52	@ 0x34
 800ccf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf4:	4642      	mov	r2, r8
 800ccf6:	464b      	mov	r3, r9
 800ccf8:	4640      	mov	r0, r8
 800ccfa:	4649      	mov	r1, r9
 800ccfc:	f7f3 ff36 	bl	8000b6c <__aeabi_dcmpun>
 800cd00:	b140      	cbz	r0, 800cd14 <_printf_float+0xe0>
 800cd02:	464b      	mov	r3, r9
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	bfbc      	itt	lt
 800cd08:	232d      	movlt	r3, #45	@ 0x2d
 800cd0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cd0e:	4a7e      	ldr	r2, [pc, #504]	@ (800cf08 <_printf_float+0x2d4>)
 800cd10:	4b7e      	ldr	r3, [pc, #504]	@ (800cf0c <_printf_float+0x2d8>)
 800cd12:	e7d4      	b.n	800ccbe <_printf_float+0x8a>
 800cd14:	6863      	ldr	r3, [r4, #4]
 800cd16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cd1a:	9206      	str	r2, [sp, #24]
 800cd1c:	1c5a      	adds	r2, r3, #1
 800cd1e:	d13b      	bne.n	800cd98 <_printf_float+0x164>
 800cd20:	2306      	movs	r3, #6
 800cd22:	6063      	str	r3, [r4, #4]
 800cd24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cd28:	2300      	movs	r3, #0
 800cd2a:	6022      	str	r2, [r4, #0]
 800cd2c:	9303      	str	r3, [sp, #12]
 800cd2e:	ab0a      	add	r3, sp, #40	@ 0x28
 800cd30:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cd34:	ab09      	add	r3, sp, #36	@ 0x24
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	6861      	ldr	r1, [r4, #4]
 800cd3a:	ec49 8b10 	vmov	d0, r8, r9
 800cd3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cd42:	4628      	mov	r0, r5
 800cd44:	f7ff fed6 	bl	800caf4 <__cvt>
 800cd48:	9b06      	ldr	r3, [sp, #24]
 800cd4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd4c:	2b47      	cmp	r3, #71	@ 0x47
 800cd4e:	4680      	mov	r8, r0
 800cd50:	d129      	bne.n	800cda6 <_printf_float+0x172>
 800cd52:	1cc8      	adds	r0, r1, #3
 800cd54:	db02      	blt.n	800cd5c <_printf_float+0x128>
 800cd56:	6863      	ldr	r3, [r4, #4]
 800cd58:	4299      	cmp	r1, r3
 800cd5a:	dd41      	ble.n	800cde0 <_printf_float+0x1ac>
 800cd5c:	f1aa 0a02 	sub.w	sl, sl, #2
 800cd60:	fa5f fa8a 	uxtb.w	sl, sl
 800cd64:	3901      	subs	r1, #1
 800cd66:	4652      	mov	r2, sl
 800cd68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cd6c:	9109      	str	r1, [sp, #36]	@ 0x24
 800cd6e:	f7ff ff26 	bl	800cbbe <__exponent>
 800cd72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cd74:	1813      	adds	r3, r2, r0
 800cd76:	2a01      	cmp	r2, #1
 800cd78:	4681      	mov	r9, r0
 800cd7a:	6123      	str	r3, [r4, #16]
 800cd7c:	dc02      	bgt.n	800cd84 <_printf_float+0x150>
 800cd7e:	6822      	ldr	r2, [r4, #0]
 800cd80:	07d2      	lsls	r2, r2, #31
 800cd82:	d501      	bpl.n	800cd88 <_printf_float+0x154>
 800cd84:	3301      	adds	r3, #1
 800cd86:	6123      	str	r3, [r4, #16]
 800cd88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d0a2      	beq.n	800ccd6 <_printf_float+0xa2>
 800cd90:	232d      	movs	r3, #45	@ 0x2d
 800cd92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd96:	e79e      	b.n	800ccd6 <_printf_float+0xa2>
 800cd98:	9a06      	ldr	r2, [sp, #24]
 800cd9a:	2a47      	cmp	r2, #71	@ 0x47
 800cd9c:	d1c2      	bne.n	800cd24 <_printf_float+0xf0>
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1c0      	bne.n	800cd24 <_printf_float+0xf0>
 800cda2:	2301      	movs	r3, #1
 800cda4:	e7bd      	b.n	800cd22 <_printf_float+0xee>
 800cda6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cdaa:	d9db      	bls.n	800cd64 <_printf_float+0x130>
 800cdac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cdb0:	d118      	bne.n	800cde4 <_printf_float+0x1b0>
 800cdb2:	2900      	cmp	r1, #0
 800cdb4:	6863      	ldr	r3, [r4, #4]
 800cdb6:	dd0b      	ble.n	800cdd0 <_printf_float+0x19c>
 800cdb8:	6121      	str	r1, [r4, #16]
 800cdba:	b913      	cbnz	r3, 800cdc2 <_printf_float+0x18e>
 800cdbc:	6822      	ldr	r2, [r4, #0]
 800cdbe:	07d0      	lsls	r0, r2, #31
 800cdc0:	d502      	bpl.n	800cdc8 <_printf_float+0x194>
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	440b      	add	r3, r1
 800cdc6:	6123      	str	r3, [r4, #16]
 800cdc8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cdca:	f04f 0900 	mov.w	r9, #0
 800cdce:	e7db      	b.n	800cd88 <_printf_float+0x154>
 800cdd0:	b913      	cbnz	r3, 800cdd8 <_printf_float+0x1a4>
 800cdd2:	6822      	ldr	r2, [r4, #0]
 800cdd4:	07d2      	lsls	r2, r2, #31
 800cdd6:	d501      	bpl.n	800cddc <_printf_float+0x1a8>
 800cdd8:	3302      	adds	r3, #2
 800cdda:	e7f4      	b.n	800cdc6 <_printf_float+0x192>
 800cddc:	2301      	movs	r3, #1
 800cdde:	e7f2      	b.n	800cdc6 <_printf_float+0x192>
 800cde0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cde4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cde6:	4299      	cmp	r1, r3
 800cde8:	db05      	blt.n	800cdf6 <_printf_float+0x1c2>
 800cdea:	6823      	ldr	r3, [r4, #0]
 800cdec:	6121      	str	r1, [r4, #16]
 800cdee:	07d8      	lsls	r0, r3, #31
 800cdf0:	d5ea      	bpl.n	800cdc8 <_printf_float+0x194>
 800cdf2:	1c4b      	adds	r3, r1, #1
 800cdf4:	e7e7      	b.n	800cdc6 <_printf_float+0x192>
 800cdf6:	2900      	cmp	r1, #0
 800cdf8:	bfd4      	ite	le
 800cdfa:	f1c1 0202 	rsble	r2, r1, #2
 800cdfe:	2201      	movgt	r2, #1
 800ce00:	4413      	add	r3, r2
 800ce02:	e7e0      	b.n	800cdc6 <_printf_float+0x192>
 800ce04:	6823      	ldr	r3, [r4, #0]
 800ce06:	055a      	lsls	r2, r3, #21
 800ce08:	d407      	bmi.n	800ce1a <_printf_float+0x1e6>
 800ce0a:	6923      	ldr	r3, [r4, #16]
 800ce0c:	4642      	mov	r2, r8
 800ce0e:	4631      	mov	r1, r6
 800ce10:	4628      	mov	r0, r5
 800ce12:	47b8      	blx	r7
 800ce14:	3001      	adds	r0, #1
 800ce16:	d12b      	bne.n	800ce70 <_printf_float+0x23c>
 800ce18:	e767      	b.n	800ccea <_printf_float+0xb6>
 800ce1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce1e:	f240 80dd 	bls.w	800cfdc <_printf_float+0x3a8>
 800ce22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce26:	2200      	movs	r2, #0
 800ce28:	2300      	movs	r3, #0
 800ce2a:	f7f3 fe6d 	bl	8000b08 <__aeabi_dcmpeq>
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	d033      	beq.n	800ce9a <_printf_float+0x266>
 800ce32:	4a37      	ldr	r2, [pc, #220]	@ (800cf10 <_printf_float+0x2dc>)
 800ce34:	2301      	movs	r3, #1
 800ce36:	4631      	mov	r1, r6
 800ce38:	4628      	mov	r0, r5
 800ce3a:	47b8      	blx	r7
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	f43f af54 	beq.w	800ccea <_printf_float+0xb6>
 800ce42:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ce46:	4543      	cmp	r3, r8
 800ce48:	db02      	blt.n	800ce50 <_printf_float+0x21c>
 800ce4a:	6823      	ldr	r3, [r4, #0]
 800ce4c:	07d8      	lsls	r0, r3, #31
 800ce4e:	d50f      	bpl.n	800ce70 <_printf_float+0x23c>
 800ce50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce54:	4631      	mov	r1, r6
 800ce56:	4628      	mov	r0, r5
 800ce58:	47b8      	blx	r7
 800ce5a:	3001      	adds	r0, #1
 800ce5c:	f43f af45 	beq.w	800ccea <_printf_float+0xb6>
 800ce60:	f04f 0900 	mov.w	r9, #0
 800ce64:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce68:	f104 0a1a 	add.w	sl, r4, #26
 800ce6c:	45c8      	cmp	r8, r9
 800ce6e:	dc09      	bgt.n	800ce84 <_printf_float+0x250>
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	079b      	lsls	r3, r3, #30
 800ce74:	f100 8103 	bmi.w	800d07e <_printf_float+0x44a>
 800ce78:	68e0      	ldr	r0, [r4, #12]
 800ce7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce7c:	4298      	cmp	r0, r3
 800ce7e:	bfb8      	it	lt
 800ce80:	4618      	movlt	r0, r3
 800ce82:	e734      	b.n	800ccee <_printf_float+0xba>
 800ce84:	2301      	movs	r3, #1
 800ce86:	4652      	mov	r2, sl
 800ce88:	4631      	mov	r1, r6
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	47b8      	blx	r7
 800ce8e:	3001      	adds	r0, #1
 800ce90:	f43f af2b 	beq.w	800ccea <_printf_float+0xb6>
 800ce94:	f109 0901 	add.w	r9, r9, #1
 800ce98:	e7e8      	b.n	800ce6c <_printf_float+0x238>
 800ce9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	dc39      	bgt.n	800cf14 <_printf_float+0x2e0>
 800cea0:	4a1b      	ldr	r2, [pc, #108]	@ (800cf10 <_printf_float+0x2dc>)
 800cea2:	2301      	movs	r3, #1
 800cea4:	4631      	mov	r1, r6
 800cea6:	4628      	mov	r0, r5
 800cea8:	47b8      	blx	r7
 800ceaa:	3001      	adds	r0, #1
 800ceac:	f43f af1d 	beq.w	800ccea <_printf_float+0xb6>
 800ceb0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ceb4:	ea59 0303 	orrs.w	r3, r9, r3
 800ceb8:	d102      	bne.n	800cec0 <_printf_float+0x28c>
 800ceba:	6823      	ldr	r3, [r4, #0]
 800cebc:	07d9      	lsls	r1, r3, #31
 800cebe:	d5d7      	bpl.n	800ce70 <_printf_float+0x23c>
 800cec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cec4:	4631      	mov	r1, r6
 800cec6:	4628      	mov	r0, r5
 800cec8:	47b8      	blx	r7
 800ceca:	3001      	adds	r0, #1
 800cecc:	f43f af0d 	beq.w	800ccea <_printf_float+0xb6>
 800ced0:	f04f 0a00 	mov.w	sl, #0
 800ced4:	f104 0b1a 	add.w	fp, r4, #26
 800ced8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceda:	425b      	negs	r3, r3
 800cedc:	4553      	cmp	r3, sl
 800cede:	dc01      	bgt.n	800cee4 <_printf_float+0x2b0>
 800cee0:	464b      	mov	r3, r9
 800cee2:	e793      	b.n	800ce0c <_printf_float+0x1d8>
 800cee4:	2301      	movs	r3, #1
 800cee6:	465a      	mov	r2, fp
 800cee8:	4631      	mov	r1, r6
 800ceea:	4628      	mov	r0, r5
 800ceec:	47b8      	blx	r7
 800ceee:	3001      	adds	r0, #1
 800cef0:	f43f aefb 	beq.w	800ccea <_printf_float+0xb6>
 800cef4:	f10a 0a01 	add.w	sl, sl, #1
 800cef8:	e7ee      	b.n	800ced8 <_printf_float+0x2a4>
 800cefa:	bf00      	nop
 800cefc:	7fefffff 	.word	0x7fefffff
 800cf00:	08010be0 	.word	0x08010be0
 800cf04:	08010be4 	.word	0x08010be4
 800cf08:	08010be8 	.word	0x08010be8
 800cf0c:	08010bec 	.word	0x08010bec
 800cf10:	08010bf0 	.word	0x08010bf0
 800cf14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf16:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf1a:	4553      	cmp	r3, sl
 800cf1c:	bfa8      	it	ge
 800cf1e:	4653      	movge	r3, sl
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	4699      	mov	r9, r3
 800cf24:	dc36      	bgt.n	800cf94 <_printf_float+0x360>
 800cf26:	f04f 0b00 	mov.w	fp, #0
 800cf2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf2e:	f104 021a 	add.w	r2, r4, #26
 800cf32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf34:	9306      	str	r3, [sp, #24]
 800cf36:	eba3 0309 	sub.w	r3, r3, r9
 800cf3a:	455b      	cmp	r3, fp
 800cf3c:	dc31      	bgt.n	800cfa2 <_printf_float+0x36e>
 800cf3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf40:	459a      	cmp	sl, r3
 800cf42:	dc3a      	bgt.n	800cfba <_printf_float+0x386>
 800cf44:	6823      	ldr	r3, [r4, #0]
 800cf46:	07da      	lsls	r2, r3, #31
 800cf48:	d437      	bmi.n	800cfba <_printf_float+0x386>
 800cf4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf4c:	ebaa 0903 	sub.w	r9, sl, r3
 800cf50:	9b06      	ldr	r3, [sp, #24]
 800cf52:	ebaa 0303 	sub.w	r3, sl, r3
 800cf56:	4599      	cmp	r9, r3
 800cf58:	bfa8      	it	ge
 800cf5a:	4699      	movge	r9, r3
 800cf5c:	f1b9 0f00 	cmp.w	r9, #0
 800cf60:	dc33      	bgt.n	800cfca <_printf_float+0x396>
 800cf62:	f04f 0800 	mov.w	r8, #0
 800cf66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf6a:	f104 0b1a 	add.w	fp, r4, #26
 800cf6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf70:	ebaa 0303 	sub.w	r3, sl, r3
 800cf74:	eba3 0309 	sub.w	r3, r3, r9
 800cf78:	4543      	cmp	r3, r8
 800cf7a:	f77f af79 	ble.w	800ce70 <_printf_float+0x23c>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	465a      	mov	r2, fp
 800cf82:	4631      	mov	r1, r6
 800cf84:	4628      	mov	r0, r5
 800cf86:	47b8      	blx	r7
 800cf88:	3001      	adds	r0, #1
 800cf8a:	f43f aeae 	beq.w	800ccea <_printf_float+0xb6>
 800cf8e:	f108 0801 	add.w	r8, r8, #1
 800cf92:	e7ec      	b.n	800cf6e <_printf_float+0x33a>
 800cf94:	4642      	mov	r2, r8
 800cf96:	4631      	mov	r1, r6
 800cf98:	4628      	mov	r0, r5
 800cf9a:	47b8      	blx	r7
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	d1c2      	bne.n	800cf26 <_printf_float+0x2f2>
 800cfa0:	e6a3      	b.n	800ccea <_printf_float+0xb6>
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	9206      	str	r2, [sp, #24]
 800cfaa:	47b8      	blx	r7
 800cfac:	3001      	adds	r0, #1
 800cfae:	f43f ae9c 	beq.w	800ccea <_printf_float+0xb6>
 800cfb2:	9a06      	ldr	r2, [sp, #24]
 800cfb4:	f10b 0b01 	add.w	fp, fp, #1
 800cfb8:	e7bb      	b.n	800cf32 <_printf_float+0x2fe>
 800cfba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfbe:	4631      	mov	r1, r6
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	47b8      	blx	r7
 800cfc4:	3001      	adds	r0, #1
 800cfc6:	d1c0      	bne.n	800cf4a <_printf_float+0x316>
 800cfc8:	e68f      	b.n	800ccea <_printf_float+0xb6>
 800cfca:	9a06      	ldr	r2, [sp, #24]
 800cfcc:	464b      	mov	r3, r9
 800cfce:	4442      	add	r2, r8
 800cfd0:	4631      	mov	r1, r6
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	47b8      	blx	r7
 800cfd6:	3001      	adds	r0, #1
 800cfd8:	d1c3      	bne.n	800cf62 <_printf_float+0x32e>
 800cfda:	e686      	b.n	800ccea <_printf_float+0xb6>
 800cfdc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cfe0:	f1ba 0f01 	cmp.w	sl, #1
 800cfe4:	dc01      	bgt.n	800cfea <_printf_float+0x3b6>
 800cfe6:	07db      	lsls	r3, r3, #31
 800cfe8:	d536      	bpl.n	800d058 <_printf_float+0x424>
 800cfea:	2301      	movs	r3, #1
 800cfec:	4642      	mov	r2, r8
 800cfee:	4631      	mov	r1, r6
 800cff0:	4628      	mov	r0, r5
 800cff2:	47b8      	blx	r7
 800cff4:	3001      	adds	r0, #1
 800cff6:	f43f ae78 	beq.w	800ccea <_printf_float+0xb6>
 800cffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cffe:	4631      	mov	r1, r6
 800d000:	4628      	mov	r0, r5
 800d002:	47b8      	blx	r7
 800d004:	3001      	adds	r0, #1
 800d006:	f43f ae70 	beq.w	800ccea <_printf_float+0xb6>
 800d00a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d00e:	2200      	movs	r2, #0
 800d010:	2300      	movs	r3, #0
 800d012:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d016:	f7f3 fd77 	bl	8000b08 <__aeabi_dcmpeq>
 800d01a:	b9c0      	cbnz	r0, 800d04e <_printf_float+0x41a>
 800d01c:	4653      	mov	r3, sl
 800d01e:	f108 0201 	add.w	r2, r8, #1
 800d022:	4631      	mov	r1, r6
 800d024:	4628      	mov	r0, r5
 800d026:	47b8      	blx	r7
 800d028:	3001      	adds	r0, #1
 800d02a:	d10c      	bne.n	800d046 <_printf_float+0x412>
 800d02c:	e65d      	b.n	800ccea <_printf_float+0xb6>
 800d02e:	2301      	movs	r3, #1
 800d030:	465a      	mov	r2, fp
 800d032:	4631      	mov	r1, r6
 800d034:	4628      	mov	r0, r5
 800d036:	47b8      	blx	r7
 800d038:	3001      	adds	r0, #1
 800d03a:	f43f ae56 	beq.w	800ccea <_printf_float+0xb6>
 800d03e:	f108 0801 	add.w	r8, r8, #1
 800d042:	45d0      	cmp	r8, sl
 800d044:	dbf3      	blt.n	800d02e <_printf_float+0x3fa>
 800d046:	464b      	mov	r3, r9
 800d048:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d04c:	e6df      	b.n	800ce0e <_printf_float+0x1da>
 800d04e:	f04f 0800 	mov.w	r8, #0
 800d052:	f104 0b1a 	add.w	fp, r4, #26
 800d056:	e7f4      	b.n	800d042 <_printf_float+0x40e>
 800d058:	2301      	movs	r3, #1
 800d05a:	4642      	mov	r2, r8
 800d05c:	e7e1      	b.n	800d022 <_printf_float+0x3ee>
 800d05e:	2301      	movs	r3, #1
 800d060:	464a      	mov	r2, r9
 800d062:	4631      	mov	r1, r6
 800d064:	4628      	mov	r0, r5
 800d066:	47b8      	blx	r7
 800d068:	3001      	adds	r0, #1
 800d06a:	f43f ae3e 	beq.w	800ccea <_printf_float+0xb6>
 800d06e:	f108 0801 	add.w	r8, r8, #1
 800d072:	68e3      	ldr	r3, [r4, #12]
 800d074:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d076:	1a5b      	subs	r3, r3, r1
 800d078:	4543      	cmp	r3, r8
 800d07a:	dcf0      	bgt.n	800d05e <_printf_float+0x42a>
 800d07c:	e6fc      	b.n	800ce78 <_printf_float+0x244>
 800d07e:	f04f 0800 	mov.w	r8, #0
 800d082:	f104 0919 	add.w	r9, r4, #25
 800d086:	e7f4      	b.n	800d072 <_printf_float+0x43e>

0800d088 <_printf_common>:
 800d088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d08c:	4616      	mov	r6, r2
 800d08e:	4698      	mov	r8, r3
 800d090:	688a      	ldr	r2, [r1, #8]
 800d092:	690b      	ldr	r3, [r1, #16]
 800d094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d098:	4293      	cmp	r3, r2
 800d09a:	bfb8      	it	lt
 800d09c:	4613      	movlt	r3, r2
 800d09e:	6033      	str	r3, [r6, #0]
 800d0a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d0a4:	4607      	mov	r7, r0
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	b10a      	cbz	r2, 800d0ae <_printf_common+0x26>
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	6033      	str	r3, [r6, #0]
 800d0ae:	6823      	ldr	r3, [r4, #0]
 800d0b0:	0699      	lsls	r1, r3, #26
 800d0b2:	bf42      	ittt	mi
 800d0b4:	6833      	ldrmi	r3, [r6, #0]
 800d0b6:	3302      	addmi	r3, #2
 800d0b8:	6033      	strmi	r3, [r6, #0]
 800d0ba:	6825      	ldr	r5, [r4, #0]
 800d0bc:	f015 0506 	ands.w	r5, r5, #6
 800d0c0:	d106      	bne.n	800d0d0 <_printf_common+0x48>
 800d0c2:	f104 0a19 	add.w	sl, r4, #25
 800d0c6:	68e3      	ldr	r3, [r4, #12]
 800d0c8:	6832      	ldr	r2, [r6, #0]
 800d0ca:	1a9b      	subs	r3, r3, r2
 800d0cc:	42ab      	cmp	r3, r5
 800d0ce:	dc26      	bgt.n	800d11e <_printf_common+0x96>
 800d0d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d0d4:	6822      	ldr	r2, [r4, #0]
 800d0d6:	3b00      	subs	r3, #0
 800d0d8:	bf18      	it	ne
 800d0da:	2301      	movne	r3, #1
 800d0dc:	0692      	lsls	r2, r2, #26
 800d0de:	d42b      	bmi.n	800d138 <_printf_common+0xb0>
 800d0e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d0e4:	4641      	mov	r1, r8
 800d0e6:	4638      	mov	r0, r7
 800d0e8:	47c8      	blx	r9
 800d0ea:	3001      	adds	r0, #1
 800d0ec:	d01e      	beq.n	800d12c <_printf_common+0xa4>
 800d0ee:	6823      	ldr	r3, [r4, #0]
 800d0f0:	6922      	ldr	r2, [r4, #16]
 800d0f2:	f003 0306 	and.w	r3, r3, #6
 800d0f6:	2b04      	cmp	r3, #4
 800d0f8:	bf02      	ittt	eq
 800d0fa:	68e5      	ldreq	r5, [r4, #12]
 800d0fc:	6833      	ldreq	r3, [r6, #0]
 800d0fe:	1aed      	subeq	r5, r5, r3
 800d100:	68a3      	ldr	r3, [r4, #8]
 800d102:	bf0c      	ite	eq
 800d104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d108:	2500      	movne	r5, #0
 800d10a:	4293      	cmp	r3, r2
 800d10c:	bfc4      	itt	gt
 800d10e:	1a9b      	subgt	r3, r3, r2
 800d110:	18ed      	addgt	r5, r5, r3
 800d112:	2600      	movs	r6, #0
 800d114:	341a      	adds	r4, #26
 800d116:	42b5      	cmp	r5, r6
 800d118:	d11a      	bne.n	800d150 <_printf_common+0xc8>
 800d11a:	2000      	movs	r0, #0
 800d11c:	e008      	b.n	800d130 <_printf_common+0xa8>
 800d11e:	2301      	movs	r3, #1
 800d120:	4652      	mov	r2, sl
 800d122:	4641      	mov	r1, r8
 800d124:	4638      	mov	r0, r7
 800d126:	47c8      	blx	r9
 800d128:	3001      	adds	r0, #1
 800d12a:	d103      	bne.n	800d134 <_printf_common+0xac>
 800d12c:	f04f 30ff 	mov.w	r0, #4294967295
 800d130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d134:	3501      	adds	r5, #1
 800d136:	e7c6      	b.n	800d0c6 <_printf_common+0x3e>
 800d138:	18e1      	adds	r1, r4, r3
 800d13a:	1c5a      	adds	r2, r3, #1
 800d13c:	2030      	movs	r0, #48	@ 0x30
 800d13e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d142:	4422      	add	r2, r4
 800d144:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d148:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d14c:	3302      	adds	r3, #2
 800d14e:	e7c7      	b.n	800d0e0 <_printf_common+0x58>
 800d150:	2301      	movs	r3, #1
 800d152:	4622      	mov	r2, r4
 800d154:	4641      	mov	r1, r8
 800d156:	4638      	mov	r0, r7
 800d158:	47c8      	blx	r9
 800d15a:	3001      	adds	r0, #1
 800d15c:	d0e6      	beq.n	800d12c <_printf_common+0xa4>
 800d15e:	3601      	adds	r6, #1
 800d160:	e7d9      	b.n	800d116 <_printf_common+0x8e>
	...

0800d164 <_printf_i>:
 800d164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d168:	7e0f      	ldrb	r7, [r1, #24]
 800d16a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d16c:	2f78      	cmp	r7, #120	@ 0x78
 800d16e:	4691      	mov	r9, r2
 800d170:	4680      	mov	r8, r0
 800d172:	460c      	mov	r4, r1
 800d174:	469a      	mov	sl, r3
 800d176:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d17a:	d807      	bhi.n	800d18c <_printf_i+0x28>
 800d17c:	2f62      	cmp	r7, #98	@ 0x62
 800d17e:	d80a      	bhi.n	800d196 <_printf_i+0x32>
 800d180:	2f00      	cmp	r7, #0
 800d182:	f000 80d2 	beq.w	800d32a <_printf_i+0x1c6>
 800d186:	2f58      	cmp	r7, #88	@ 0x58
 800d188:	f000 80b9 	beq.w	800d2fe <_printf_i+0x19a>
 800d18c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d190:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d194:	e03a      	b.n	800d20c <_printf_i+0xa8>
 800d196:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d19a:	2b15      	cmp	r3, #21
 800d19c:	d8f6      	bhi.n	800d18c <_printf_i+0x28>
 800d19e:	a101      	add	r1, pc, #4	@ (adr r1, 800d1a4 <_printf_i+0x40>)
 800d1a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1a4:	0800d1fd 	.word	0x0800d1fd
 800d1a8:	0800d211 	.word	0x0800d211
 800d1ac:	0800d18d 	.word	0x0800d18d
 800d1b0:	0800d18d 	.word	0x0800d18d
 800d1b4:	0800d18d 	.word	0x0800d18d
 800d1b8:	0800d18d 	.word	0x0800d18d
 800d1bc:	0800d211 	.word	0x0800d211
 800d1c0:	0800d18d 	.word	0x0800d18d
 800d1c4:	0800d18d 	.word	0x0800d18d
 800d1c8:	0800d18d 	.word	0x0800d18d
 800d1cc:	0800d18d 	.word	0x0800d18d
 800d1d0:	0800d311 	.word	0x0800d311
 800d1d4:	0800d23b 	.word	0x0800d23b
 800d1d8:	0800d2cb 	.word	0x0800d2cb
 800d1dc:	0800d18d 	.word	0x0800d18d
 800d1e0:	0800d18d 	.word	0x0800d18d
 800d1e4:	0800d333 	.word	0x0800d333
 800d1e8:	0800d18d 	.word	0x0800d18d
 800d1ec:	0800d23b 	.word	0x0800d23b
 800d1f0:	0800d18d 	.word	0x0800d18d
 800d1f4:	0800d18d 	.word	0x0800d18d
 800d1f8:	0800d2d3 	.word	0x0800d2d3
 800d1fc:	6833      	ldr	r3, [r6, #0]
 800d1fe:	1d1a      	adds	r2, r3, #4
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	6032      	str	r2, [r6, #0]
 800d204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d20c:	2301      	movs	r3, #1
 800d20e:	e09d      	b.n	800d34c <_printf_i+0x1e8>
 800d210:	6833      	ldr	r3, [r6, #0]
 800d212:	6820      	ldr	r0, [r4, #0]
 800d214:	1d19      	adds	r1, r3, #4
 800d216:	6031      	str	r1, [r6, #0]
 800d218:	0606      	lsls	r6, r0, #24
 800d21a:	d501      	bpl.n	800d220 <_printf_i+0xbc>
 800d21c:	681d      	ldr	r5, [r3, #0]
 800d21e:	e003      	b.n	800d228 <_printf_i+0xc4>
 800d220:	0645      	lsls	r5, r0, #25
 800d222:	d5fb      	bpl.n	800d21c <_printf_i+0xb8>
 800d224:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d228:	2d00      	cmp	r5, #0
 800d22a:	da03      	bge.n	800d234 <_printf_i+0xd0>
 800d22c:	232d      	movs	r3, #45	@ 0x2d
 800d22e:	426d      	negs	r5, r5
 800d230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d234:	4859      	ldr	r0, [pc, #356]	@ (800d39c <_printf_i+0x238>)
 800d236:	230a      	movs	r3, #10
 800d238:	e011      	b.n	800d25e <_printf_i+0xfa>
 800d23a:	6821      	ldr	r1, [r4, #0]
 800d23c:	6833      	ldr	r3, [r6, #0]
 800d23e:	0608      	lsls	r0, r1, #24
 800d240:	f853 5b04 	ldr.w	r5, [r3], #4
 800d244:	d402      	bmi.n	800d24c <_printf_i+0xe8>
 800d246:	0649      	lsls	r1, r1, #25
 800d248:	bf48      	it	mi
 800d24a:	b2ad      	uxthmi	r5, r5
 800d24c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d24e:	4853      	ldr	r0, [pc, #332]	@ (800d39c <_printf_i+0x238>)
 800d250:	6033      	str	r3, [r6, #0]
 800d252:	bf14      	ite	ne
 800d254:	230a      	movne	r3, #10
 800d256:	2308      	moveq	r3, #8
 800d258:	2100      	movs	r1, #0
 800d25a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d25e:	6866      	ldr	r6, [r4, #4]
 800d260:	60a6      	str	r6, [r4, #8]
 800d262:	2e00      	cmp	r6, #0
 800d264:	bfa2      	ittt	ge
 800d266:	6821      	ldrge	r1, [r4, #0]
 800d268:	f021 0104 	bicge.w	r1, r1, #4
 800d26c:	6021      	strge	r1, [r4, #0]
 800d26e:	b90d      	cbnz	r5, 800d274 <_printf_i+0x110>
 800d270:	2e00      	cmp	r6, #0
 800d272:	d04b      	beq.n	800d30c <_printf_i+0x1a8>
 800d274:	4616      	mov	r6, r2
 800d276:	fbb5 f1f3 	udiv	r1, r5, r3
 800d27a:	fb03 5711 	mls	r7, r3, r1, r5
 800d27e:	5dc7      	ldrb	r7, [r0, r7]
 800d280:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d284:	462f      	mov	r7, r5
 800d286:	42bb      	cmp	r3, r7
 800d288:	460d      	mov	r5, r1
 800d28a:	d9f4      	bls.n	800d276 <_printf_i+0x112>
 800d28c:	2b08      	cmp	r3, #8
 800d28e:	d10b      	bne.n	800d2a8 <_printf_i+0x144>
 800d290:	6823      	ldr	r3, [r4, #0]
 800d292:	07df      	lsls	r7, r3, #31
 800d294:	d508      	bpl.n	800d2a8 <_printf_i+0x144>
 800d296:	6923      	ldr	r3, [r4, #16]
 800d298:	6861      	ldr	r1, [r4, #4]
 800d29a:	4299      	cmp	r1, r3
 800d29c:	bfde      	ittt	le
 800d29e:	2330      	movle	r3, #48	@ 0x30
 800d2a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d2a8:	1b92      	subs	r2, r2, r6
 800d2aa:	6122      	str	r2, [r4, #16]
 800d2ac:	f8cd a000 	str.w	sl, [sp]
 800d2b0:	464b      	mov	r3, r9
 800d2b2:	aa03      	add	r2, sp, #12
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	4640      	mov	r0, r8
 800d2b8:	f7ff fee6 	bl	800d088 <_printf_common>
 800d2bc:	3001      	adds	r0, #1
 800d2be:	d14a      	bne.n	800d356 <_printf_i+0x1f2>
 800d2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c4:	b004      	add	sp, #16
 800d2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ca:	6823      	ldr	r3, [r4, #0]
 800d2cc:	f043 0320 	orr.w	r3, r3, #32
 800d2d0:	6023      	str	r3, [r4, #0]
 800d2d2:	4833      	ldr	r0, [pc, #204]	@ (800d3a0 <_printf_i+0x23c>)
 800d2d4:	2778      	movs	r7, #120	@ 0x78
 800d2d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d2da:	6823      	ldr	r3, [r4, #0]
 800d2dc:	6831      	ldr	r1, [r6, #0]
 800d2de:	061f      	lsls	r7, r3, #24
 800d2e0:	f851 5b04 	ldr.w	r5, [r1], #4
 800d2e4:	d402      	bmi.n	800d2ec <_printf_i+0x188>
 800d2e6:	065f      	lsls	r7, r3, #25
 800d2e8:	bf48      	it	mi
 800d2ea:	b2ad      	uxthmi	r5, r5
 800d2ec:	6031      	str	r1, [r6, #0]
 800d2ee:	07d9      	lsls	r1, r3, #31
 800d2f0:	bf44      	itt	mi
 800d2f2:	f043 0320 	orrmi.w	r3, r3, #32
 800d2f6:	6023      	strmi	r3, [r4, #0]
 800d2f8:	b11d      	cbz	r5, 800d302 <_printf_i+0x19e>
 800d2fa:	2310      	movs	r3, #16
 800d2fc:	e7ac      	b.n	800d258 <_printf_i+0xf4>
 800d2fe:	4827      	ldr	r0, [pc, #156]	@ (800d39c <_printf_i+0x238>)
 800d300:	e7e9      	b.n	800d2d6 <_printf_i+0x172>
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	f023 0320 	bic.w	r3, r3, #32
 800d308:	6023      	str	r3, [r4, #0]
 800d30a:	e7f6      	b.n	800d2fa <_printf_i+0x196>
 800d30c:	4616      	mov	r6, r2
 800d30e:	e7bd      	b.n	800d28c <_printf_i+0x128>
 800d310:	6833      	ldr	r3, [r6, #0]
 800d312:	6825      	ldr	r5, [r4, #0]
 800d314:	6961      	ldr	r1, [r4, #20]
 800d316:	1d18      	adds	r0, r3, #4
 800d318:	6030      	str	r0, [r6, #0]
 800d31a:	062e      	lsls	r6, r5, #24
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	d501      	bpl.n	800d324 <_printf_i+0x1c0>
 800d320:	6019      	str	r1, [r3, #0]
 800d322:	e002      	b.n	800d32a <_printf_i+0x1c6>
 800d324:	0668      	lsls	r0, r5, #25
 800d326:	d5fb      	bpl.n	800d320 <_printf_i+0x1bc>
 800d328:	8019      	strh	r1, [r3, #0]
 800d32a:	2300      	movs	r3, #0
 800d32c:	6123      	str	r3, [r4, #16]
 800d32e:	4616      	mov	r6, r2
 800d330:	e7bc      	b.n	800d2ac <_printf_i+0x148>
 800d332:	6833      	ldr	r3, [r6, #0]
 800d334:	1d1a      	adds	r2, r3, #4
 800d336:	6032      	str	r2, [r6, #0]
 800d338:	681e      	ldr	r6, [r3, #0]
 800d33a:	6862      	ldr	r2, [r4, #4]
 800d33c:	2100      	movs	r1, #0
 800d33e:	4630      	mov	r0, r6
 800d340:	f7f2 ff66 	bl	8000210 <memchr>
 800d344:	b108      	cbz	r0, 800d34a <_printf_i+0x1e6>
 800d346:	1b80      	subs	r0, r0, r6
 800d348:	6060      	str	r0, [r4, #4]
 800d34a:	6863      	ldr	r3, [r4, #4]
 800d34c:	6123      	str	r3, [r4, #16]
 800d34e:	2300      	movs	r3, #0
 800d350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d354:	e7aa      	b.n	800d2ac <_printf_i+0x148>
 800d356:	6923      	ldr	r3, [r4, #16]
 800d358:	4632      	mov	r2, r6
 800d35a:	4649      	mov	r1, r9
 800d35c:	4640      	mov	r0, r8
 800d35e:	47d0      	blx	sl
 800d360:	3001      	adds	r0, #1
 800d362:	d0ad      	beq.n	800d2c0 <_printf_i+0x15c>
 800d364:	6823      	ldr	r3, [r4, #0]
 800d366:	079b      	lsls	r3, r3, #30
 800d368:	d413      	bmi.n	800d392 <_printf_i+0x22e>
 800d36a:	68e0      	ldr	r0, [r4, #12]
 800d36c:	9b03      	ldr	r3, [sp, #12]
 800d36e:	4298      	cmp	r0, r3
 800d370:	bfb8      	it	lt
 800d372:	4618      	movlt	r0, r3
 800d374:	e7a6      	b.n	800d2c4 <_printf_i+0x160>
 800d376:	2301      	movs	r3, #1
 800d378:	4632      	mov	r2, r6
 800d37a:	4649      	mov	r1, r9
 800d37c:	4640      	mov	r0, r8
 800d37e:	47d0      	blx	sl
 800d380:	3001      	adds	r0, #1
 800d382:	d09d      	beq.n	800d2c0 <_printf_i+0x15c>
 800d384:	3501      	adds	r5, #1
 800d386:	68e3      	ldr	r3, [r4, #12]
 800d388:	9903      	ldr	r1, [sp, #12]
 800d38a:	1a5b      	subs	r3, r3, r1
 800d38c:	42ab      	cmp	r3, r5
 800d38e:	dcf2      	bgt.n	800d376 <_printf_i+0x212>
 800d390:	e7eb      	b.n	800d36a <_printf_i+0x206>
 800d392:	2500      	movs	r5, #0
 800d394:	f104 0619 	add.w	r6, r4, #25
 800d398:	e7f5      	b.n	800d386 <_printf_i+0x222>
 800d39a:	bf00      	nop
 800d39c:	08010bf2 	.word	0x08010bf2
 800d3a0:	08010c03 	.word	0x08010c03

0800d3a4 <_scanf_float>:
 800d3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a8:	b087      	sub	sp, #28
 800d3aa:	4617      	mov	r7, r2
 800d3ac:	9303      	str	r3, [sp, #12]
 800d3ae:	688b      	ldr	r3, [r1, #8]
 800d3b0:	1e5a      	subs	r2, r3, #1
 800d3b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d3b6:	bf81      	itttt	hi
 800d3b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d3bc:	eb03 0b05 	addhi.w	fp, r3, r5
 800d3c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d3c4:	608b      	strhi	r3, [r1, #8]
 800d3c6:	680b      	ldr	r3, [r1, #0]
 800d3c8:	460a      	mov	r2, r1
 800d3ca:	f04f 0500 	mov.w	r5, #0
 800d3ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d3d2:	f842 3b1c 	str.w	r3, [r2], #28
 800d3d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d3da:	4680      	mov	r8, r0
 800d3dc:	460c      	mov	r4, r1
 800d3de:	bf98      	it	ls
 800d3e0:	f04f 0b00 	movls.w	fp, #0
 800d3e4:	9201      	str	r2, [sp, #4]
 800d3e6:	4616      	mov	r6, r2
 800d3e8:	46aa      	mov	sl, r5
 800d3ea:	46a9      	mov	r9, r5
 800d3ec:	9502      	str	r5, [sp, #8]
 800d3ee:	68a2      	ldr	r2, [r4, #8]
 800d3f0:	b152      	cbz	r2, 800d408 <_scanf_float+0x64>
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	2b4e      	cmp	r3, #78	@ 0x4e
 800d3f8:	d864      	bhi.n	800d4c4 <_scanf_float+0x120>
 800d3fa:	2b40      	cmp	r3, #64	@ 0x40
 800d3fc:	d83c      	bhi.n	800d478 <_scanf_float+0xd4>
 800d3fe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d402:	b2c8      	uxtb	r0, r1
 800d404:	280e      	cmp	r0, #14
 800d406:	d93a      	bls.n	800d47e <_scanf_float+0xda>
 800d408:	f1b9 0f00 	cmp.w	r9, #0
 800d40c:	d003      	beq.n	800d416 <_scanf_float+0x72>
 800d40e:	6823      	ldr	r3, [r4, #0]
 800d410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d414:	6023      	str	r3, [r4, #0]
 800d416:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d41a:	f1ba 0f01 	cmp.w	sl, #1
 800d41e:	f200 8117 	bhi.w	800d650 <_scanf_float+0x2ac>
 800d422:	9b01      	ldr	r3, [sp, #4]
 800d424:	429e      	cmp	r6, r3
 800d426:	f200 8108 	bhi.w	800d63a <_scanf_float+0x296>
 800d42a:	2001      	movs	r0, #1
 800d42c:	b007      	add	sp, #28
 800d42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d432:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d436:	2a0d      	cmp	r2, #13
 800d438:	d8e6      	bhi.n	800d408 <_scanf_float+0x64>
 800d43a:	a101      	add	r1, pc, #4	@ (adr r1, 800d440 <_scanf_float+0x9c>)
 800d43c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d440:	0800d587 	.word	0x0800d587
 800d444:	0800d409 	.word	0x0800d409
 800d448:	0800d409 	.word	0x0800d409
 800d44c:	0800d409 	.word	0x0800d409
 800d450:	0800d5e7 	.word	0x0800d5e7
 800d454:	0800d5bf 	.word	0x0800d5bf
 800d458:	0800d409 	.word	0x0800d409
 800d45c:	0800d409 	.word	0x0800d409
 800d460:	0800d595 	.word	0x0800d595
 800d464:	0800d409 	.word	0x0800d409
 800d468:	0800d409 	.word	0x0800d409
 800d46c:	0800d409 	.word	0x0800d409
 800d470:	0800d409 	.word	0x0800d409
 800d474:	0800d54d 	.word	0x0800d54d
 800d478:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d47c:	e7db      	b.n	800d436 <_scanf_float+0x92>
 800d47e:	290e      	cmp	r1, #14
 800d480:	d8c2      	bhi.n	800d408 <_scanf_float+0x64>
 800d482:	a001      	add	r0, pc, #4	@ (adr r0, 800d488 <_scanf_float+0xe4>)
 800d484:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d488:	0800d53d 	.word	0x0800d53d
 800d48c:	0800d409 	.word	0x0800d409
 800d490:	0800d53d 	.word	0x0800d53d
 800d494:	0800d5d3 	.word	0x0800d5d3
 800d498:	0800d409 	.word	0x0800d409
 800d49c:	0800d4e5 	.word	0x0800d4e5
 800d4a0:	0800d523 	.word	0x0800d523
 800d4a4:	0800d523 	.word	0x0800d523
 800d4a8:	0800d523 	.word	0x0800d523
 800d4ac:	0800d523 	.word	0x0800d523
 800d4b0:	0800d523 	.word	0x0800d523
 800d4b4:	0800d523 	.word	0x0800d523
 800d4b8:	0800d523 	.word	0x0800d523
 800d4bc:	0800d523 	.word	0x0800d523
 800d4c0:	0800d523 	.word	0x0800d523
 800d4c4:	2b6e      	cmp	r3, #110	@ 0x6e
 800d4c6:	d809      	bhi.n	800d4dc <_scanf_float+0x138>
 800d4c8:	2b60      	cmp	r3, #96	@ 0x60
 800d4ca:	d8b2      	bhi.n	800d432 <_scanf_float+0x8e>
 800d4cc:	2b54      	cmp	r3, #84	@ 0x54
 800d4ce:	d07b      	beq.n	800d5c8 <_scanf_float+0x224>
 800d4d0:	2b59      	cmp	r3, #89	@ 0x59
 800d4d2:	d199      	bne.n	800d408 <_scanf_float+0x64>
 800d4d4:	2d07      	cmp	r5, #7
 800d4d6:	d197      	bne.n	800d408 <_scanf_float+0x64>
 800d4d8:	2508      	movs	r5, #8
 800d4da:	e02c      	b.n	800d536 <_scanf_float+0x192>
 800d4dc:	2b74      	cmp	r3, #116	@ 0x74
 800d4de:	d073      	beq.n	800d5c8 <_scanf_float+0x224>
 800d4e0:	2b79      	cmp	r3, #121	@ 0x79
 800d4e2:	e7f6      	b.n	800d4d2 <_scanf_float+0x12e>
 800d4e4:	6821      	ldr	r1, [r4, #0]
 800d4e6:	05c8      	lsls	r0, r1, #23
 800d4e8:	d51b      	bpl.n	800d522 <_scanf_float+0x17e>
 800d4ea:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d4ee:	6021      	str	r1, [r4, #0]
 800d4f0:	f109 0901 	add.w	r9, r9, #1
 800d4f4:	f1bb 0f00 	cmp.w	fp, #0
 800d4f8:	d003      	beq.n	800d502 <_scanf_float+0x15e>
 800d4fa:	3201      	adds	r2, #1
 800d4fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d500:	60a2      	str	r2, [r4, #8]
 800d502:	68a3      	ldr	r3, [r4, #8]
 800d504:	3b01      	subs	r3, #1
 800d506:	60a3      	str	r3, [r4, #8]
 800d508:	6923      	ldr	r3, [r4, #16]
 800d50a:	3301      	adds	r3, #1
 800d50c:	6123      	str	r3, [r4, #16]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	3b01      	subs	r3, #1
 800d512:	2b00      	cmp	r3, #0
 800d514:	607b      	str	r3, [r7, #4]
 800d516:	f340 8087 	ble.w	800d628 <_scanf_float+0x284>
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	3301      	adds	r3, #1
 800d51e:	603b      	str	r3, [r7, #0]
 800d520:	e765      	b.n	800d3ee <_scanf_float+0x4a>
 800d522:	eb1a 0105 	adds.w	r1, sl, r5
 800d526:	f47f af6f 	bne.w	800d408 <_scanf_float+0x64>
 800d52a:	6822      	ldr	r2, [r4, #0]
 800d52c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d530:	6022      	str	r2, [r4, #0]
 800d532:	460d      	mov	r5, r1
 800d534:	468a      	mov	sl, r1
 800d536:	f806 3b01 	strb.w	r3, [r6], #1
 800d53a:	e7e2      	b.n	800d502 <_scanf_float+0x15e>
 800d53c:	6822      	ldr	r2, [r4, #0]
 800d53e:	0610      	lsls	r0, r2, #24
 800d540:	f57f af62 	bpl.w	800d408 <_scanf_float+0x64>
 800d544:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d548:	6022      	str	r2, [r4, #0]
 800d54a:	e7f4      	b.n	800d536 <_scanf_float+0x192>
 800d54c:	f1ba 0f00 	cmp.w	sl, #0
 800d550:	d10e      	bne.n	800d570 <_scanf_float+0x1cc>
 800d552:	f1b9 0f00 	cmp.w	r9, #0
 800d556:	d10e      	bne.n	800d576 <_scanf_float+0x1d2>
 800d558:	6822      	ldr	r2, [r4, #0]
 800d55a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d55e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d562:	d108      	bne.n	800d576 <_scanf_float+0x1d2>
 800d564:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d568:	6022      	str	r2, [r4, #0]
 800d56a:	f04f 0a01 	mov.w	sl, #1
 800d56e:	e7e2      	b.n	800d536 <_scanf_float+0x192>
 800d570:	f1ba 0f02 	cmp.w	sl, #2
 800d574:	d055      	beq.n	800d622 <_scanf_float+0x27e>
 800d576:	2d01      	cmp	r5, #1
 800d578:	d002      	beq.n	800d580 <_scanf_float+0x1dc>
 800d57a:	2d04      	cmp	r5, #4
 800d57c:	f47f af44 	bne.w	800d408 <_scanf_float+0x64>
 800d580:	3501      	adds	r5, #1
 800d582:	b2ed      	uxtb	r5, r5
 800d584:	e7d7      	b.n	800d536 <_scanf_float+0x192>
 800d586:	f1ba 0f01 	cmp.w	sl, #1
 800d58a:	f47f af3d 	bne.w	800d408 <_scanf_float+0x64>
 800d58e:	f04f 0a02 	mov.w	sl, #2
 800d592:	e7d0      	b.n	800d536 <_scanf_float+0x192>
 800d594:	b97d      	cbnz	r5, 800d5b6 <_scanf_float+0x212>
 800d596:	f1b9 0f00 	cmp.w	r9, #0
 800d59a:	f47f af38 	bne.w	800d40e <_scanf_float+0x6a>
 800d59e:	6822      	ldr	r2, [r4, #0]
 800d5a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d5a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d5a8:	f040 8108 	bne.w	800d7bc <_scanf_float+0x418>
 800d5ac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d5b0:	6022      	str	r2, [r4, #0]
 800d5b2:	2501      	movs	r5, #1
 800d5b4:	e7bf      	b.n	800d536 <_scanf_float+0x192>
 800d5b6:	2d03      	cmp	r5, #3
 800d5b8:	d0e2      	beq.n	800d580 <_scanf_float+0x1dc>
 800d5ba:	2d05      	cmp	r5, #5
 800d5bc:	e7de      	b.n	800d57c <_scanf_float+0x1d8>
 800d5be:	2d02      	cmp	r5, #2
 800d5c0:	f47f af22 	bne.w	800d408 <_scanf_float+0x64>
 800d5c4:	2503      	movs	r5, #3
 800d5c6:	e7b6      	b.n	800d536 <_scanf_float+0x192>
 800d5c8:	2d06      	cmp	r5, #6
 800d5ca:	f47f af1d 	bne.w	800d408 <_scanf_float+0x64>
 800d5ce:	2507      	movs	r5, #7
 800d5d0:	e7b1      	b.n	800d536 <_scanf_float+0x192>
 800d5d2:	6822      	ldr	r2, [r4, #0]
 800d5d4:	0591      	lsls	r1, r2, #22
 800d5d6:	f57f af17 	bpl.w	800d408 <_scanf_float+0x64>
 800d5da:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d5de:	6022      	str	r2, [r4, #0]
 800d5e0:	f8cd 9008 	str.w	r9, [sp, #8]
 800d5e4:	e7a7      	b.n	800d536 <_scanf_float+0x192>
 800d5e6:	6822      	ldr	r2, [r4, #0]
 800d5e8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d5ec:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d5f0:	d006      	beq.n	800d600 <_scanf_float+0x25c>
 800d5f2:	0550      	lsls	r0, r2, #21
 800d5f4:	f57f af08 	bpl.w	800d408 <_scanf_float+0x64>
 800d5f8:	f1b9 0f00 	cmp.w	r9, #0
 800d5fc:	f000 80de 	beq.w	800d7bc <_scanf_float+0x418>
 800d600:	0591      	lsls	r1, r2, #22
 800d602:	bf58      	it	pl
 800d604:	9902      	ldrpl	r1, [sp, #8]
 800d606:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d60a:	bf58      	it	pl
 800d60c:	eba9 0101 	subpl.w	r1, r9, r1
 800d610:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d614:	bf58      	it	pl
 800d616:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d61a:	6022      	str	r2, [r4, #0]
 800d61c:	f04f 0900 	mov.w	r9, #0
 800d620:	e789      	b.n	800d536 <_scanf_float+0x192>
 800d622:	f04f 0a03 	mov.w	sl, #3
 800d626:	e786      	b.n	800d536 <_scanf_float+0x192>
 800d628:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d62c:	4639      	mov	r1, r7
 800d62e:	4640      	mov	r0, r8
 800d630:	4798      	blx	r3
 800d632:	2800      	cmp	r0, #0
 800d634:	f43f aedb 	beq.w	800d3ee <_scanf_float+0x4a>
 800d638:	e6e6      	b.n	800d408 <_scanf_float+0x64>
 800d63a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d63e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d642:	463a      	mov	r2, r7
 800d644:	4640      	mov	r0, r8
 800d646:	4798      	blx	r3
 800d648:	6923      	ldr	r3, [r4, #16]
 800d64a:	3b01      	subs	r3, #1
 800d64c:	6123      	str	r3, [r4, #16]
 800d64e:	e6e8      	b.n	800d422 <_scanf_float+0x7e>
 800d650:	1e6b      	subs	r3, r5, #1
 800d652:	2b06      	cmp	r3, #6
 800d654:	d824      	bhi.n	800d6a0 <_scanf_float+0x2fc>
 800d656:	2d02      	cmp	r5, #2
 800d658:	d836      	bhi.n	800d6c8 <_scanf_float+0x324>
 800d65a:	9b01      	ldr	r3, [sp, #4]
 800d65c:	429e      	cmp	r6, r3
 800d65e:	f67f aee4 	bls.w	800d42a <_scanf_float+0x86>
 800d662:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d666:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d66a:	463a      	mov	r2, r7
 800d66c:	4640      	mov	r0, r8
 800d66e:	4798      	blx	r3
 800d670:	6923      	ldr	r3, [r4, #16]
 800d672:	3b01      	subs	r3, #1
 800d674:	6123      	str	r3, [r4, #16]
 800d676:	e7f0      	b.n	800d65a <_scanf_float+0x2b6>
 800d678:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d67c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d680:	463a      	mov	r2, r7
 800d682:	4640      	mov	r0, r8
 800d684:	4798      	blx	r3
 800d686:	6923      	ldr	r3, [r4, #16]
 800d688:	3b01      	subs	r3, #1
 800d68a:	6123      	str	r3, [r4, #16]
 800d68c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d690:	fa5f fa8a 	uxtb.w	sl, sl
 800d694:	f1ba 0f02 	cmp.w	sl, #2
 800d698:	d1ee      	bne.n	800d678 <_scanf_float+0x2d4>
 800d69a:	3d03      	subs	r5, #3
 800d69c:	b2ed      	uxtb	r5, r5
 800d69e:	1b76      	subs	r6, r6, r5
 800d6a0:	6823      	ldr	r3, [r4, #0]
 800d6a2:	05da      	lsls	r2, r3, #23
 800d6a4:	d530      	bpl.n	800d708 <_scanf_float+0x364>
 800d6a6:	055b      	lsls	r3, r3, #21
 800d6a8:	d511      	bpl.n	800d6ce <_scanf_float+0x32a>
 800d6aa:	9b01      	ldr	r3, [sp, #4]
 800d6ac:	429e      	cmp	r6, r3
 800d6ae:	f67f aebc 	bls.w	800d42a <_scanf_float+0x86>
 800d6b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d6b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d6ba:	463a      	mov	r2, r7
 800d6bc:	4640      	mov	r0, r8
 800d6be:	4798      	blx	r3
 800d6c0:	6923      	ldr	r3, [r4, #16]
 800d6c2:	3b01      	subs	r3, #1
 800d6c4:	6123      	str	r3, [r4, #16]
 800d6c6:	e7f0      	b.n	800d6aa <_scanf_float+0x306>
 800d6c8:	46aa      	mov	sl, r5
 800d6ca:	46b3      	mov	fp, r6
 800d6cc:	e7de      	b.n	800d68c <_scanf_float+0x2e8>
 800d6ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d6d2:	6923      	ldr	r3, [r4, #16]
 800d6d4:	2965      	cmp	r1, #101	@ 0x65
 800d6d6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d6da:	f106 35ff 	add.w	r5, r6, #4294967295
 800d6de:	6123      	str	r3, [r4, #16]
 800d6e0:	d00c      	beq.n	800d6fc <_scanf_float+0x358>
 800d6e2:	2945      	cmp	r1, #69	@ 0x45
 800d6e4:	d00a      	beq.n	800d6fc <_scanf_float+0x358>
 800d6e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d6ea:	463a      	mov	r2, r7
 800d6ec:	4640      	mov	r0, r8
 800d6ee:	4798      	blx	r3
 800d6f0:	6923      	ldr	r3, [r4, #16]
 800d6f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	1eb5      	subs	r5, r6, #2
 800d6fa:	6123      	str	r3, [r4, #16]
 800d6fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d700:	463a      	mov	r2, r7
 800d702:	4640      	mov	r0, r8
 800d704:	4798      	blx	r3
 800d706:	462e      	mov	r6, r5
 800d708:	6822      	ldr	r2, [r4, #0]
 800d70a:	f012 0210 	ands.w	r2, r2, #16
 800d70e:	d001      	beq.n	800d714 <_scanf_float+0x370>
 800d710:	2000      	movs	r0, #0
 800d712:	e68b      	b.n	800d42c <_scanf_float+0x88>
 800d714:	7032      	strb	r2, [r6, #0]
 800d716:	6823      	ldr	r3, [r4, #0]
 800d718:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d71c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d720:	d11c      	bne.n	800d75c <_scanf_float+0x3b8>
 800d722:	9b02      	ldr	r3, [sp, #8]
 800d724:	454b      	cmp	r3, r9
 800d726:	eba3 0209 	sub.w	r2, r3, r9
 800d72a:	d123      	bne.n	800d774 <_scanf_float+0x3d0>
 800d72c:	9901      	ldr	r1, [sp, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	4640      	mov	r0, r8
 800d732:	f7ff f975 	bl	800ca20 <_strtod_r>
 800d736:	9b03      	ldr	r3, [sp, #12]
 800d738:	6821      	ldr	r1, [r4, #0]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f011 0f02 	tst.w	r1, #2
 800d740:	ec57 6b10 	vmov	r6, r7, d0
 800d744:	f103 0204 	add.w	r2, r3, #4
 800d748:	d01f      	beq.n	800d78a <_scanf_float+0x3e6>
 800d74a:	9903      	ldr	r1, [sp, #12]
 800d74c:	600a      	str	r2, [r1, #0]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	e9c3 6700 	strd	r6, r7, [r3]
 800d754:	68e3      	ldr	r3, [r4, #12]
 800d756:	3301      	adds	r3, #1
 800d758:	60e3      	str	r3, [r4, #12]
 800d75a:	e7d9      	b.n	800d710 <_scanf_float+0x36c>
 800d75c:	9b04      	ldr	r3, [sp, #16]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d0e4      	beq.n	800d72c <_scanf_float+0x388>
 800d762:	9905      	ldr	r1, [sp, #20]
 800d764:	230a      	movs	r3, #10
 800d766:	3101      	adds	r1, #1
 800d768:	4640      	mov	r0, r8
 800d76a:	f002 fa41 	bl	800fbf0 <_strtol_r>
 800d76e:	9b04      	ldr	r3, [sp, #16]
 800d770:	9e05      	ldr	r6, [sp, #20]
 800d772:	1ac2      	subs	r2, r0, r3
 800d774:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d778:	429e      	cmp	r6, r3
 800d77a:	bf28      	it	cs
 800d77c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d780:	4910      	ldr	r1, [pc, #64]	@ (800d7c4 <_scanf_float+0x420>)
 800d782:	4630      	mov	r0, r6
 800d784:	f000 f8e4 	bl	800d950 <siprintf>
 800d788:	e7d0      	b.n	800d72c <_scanf_float+0x388>
 800d78a:	f011 0f04 	tst.w	r1, #4
 800d78e:	9903      	ldr	r1, [sp, #12]
 800d790:	600a      	str	r2, [r1, #0]
 800d792:	d1dc      	bne.n	800d74e <_scanf_float+0x3aa>
 800d794:	681d      	ldr	r5, [r3, #0]
 800d796:	4632      	mov	r2, r6
 800d798:	463b      	mov	r3, r7
 800d79a:	4630      	mov	r0, r6
 800d79c:	4639      	mov	r1, r7
 800d79e:	f7f3 f9e5 	bl	8000b6c <__aeabi_dcmpun>
 800d7a2:	b128      	cbz	r0, 800d7b0 <_scanf_float+0x40c>
 800d7a4:	4808      	ldr	r0, [pc, #32]	@ (800d7c8 <_scanf_float+0x424>)
 800d7a6:	f000 fa3b 	bl	800dc20 <nanf>
 800d7aa:	ed85 0a00 	vstr	s0, [r5]
 800d7ae:	e7d1      	b.n	800d754 <_scanf_float+0x3b0>
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	4639      	mov	r1, r7
 800d7b4:	f7f3 fa38 	bl	8000c28 <__aeabi_d2f>
 800d7b8:	6028      	str	r0, [r5, #0]
 800d7ba:	e7cb      	b.n	800d754 <_scanf_float+0x3b0>
 800d7bc:	f04f 0900 	mov.w	r9, #0
 800d7c0:	e629      	b.n	800d416 <_scanf_float+0x72>
 800d7c2:	bf00      	nop
 800d7c4:	08010c14 	.word	0x08010c14
 800d7c8:	08010ccd 	.word	0x08010ccd

0800d7cc <std>:
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	b510      	push	{r4, lr}
 800d7d0:	4604      	mov	r4, r0
 800d7d2:	e9c0 3300 	strd	r3, r3, [r0]
 800d7d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7da:	6083      	str	r3, [r0, #8]
 800d7dc:	8181      	strh	r1, [r0, #12]
 800d7de:	6643      	str	r3, [r0, #100]	@ 0x64
 800d7e0:	81c2      	strh	r2, [r0, #14]
 800d7e2:	6183      	str	r3, [r0, #24]
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	2208      	movs	r2, #8
 800d7e8:	305c      	adds	r0, #92	@ 0x5c
 800d7ea:	f000 f914 	bl	800da16 <memset>
 800d7ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d824 <std+0x58>)
 800d7f0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d828 <std+0x5c>)
 800d7f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d7f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d82c <std+0x60>)
 800d7f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d7fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d830 <std+0x64>)
 800d7fc:	6323      	str	r3, [r4, #48]	@ 0x30
 800d7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d834 <std+0x68>)
 800d800:	6224      	str	r4, [r4, #32]
 800d802:	429c      	cmp	r4, r3
 800d804:	d006      	beq.n	800d814 <std+0x48>
 800d806:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d80a:	4294      	cmp	r4, r2
 800d80c:	d002      	beq.n	800d814 <std+0x48>
 800d80e:	33d0      	adds	r3, #208	@ 0xd0
 800d810:	429c      	cmp	r4, r3
 800d812:	d105      	bne.n	800d820 <std+0x54>
 800d814:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d81c:	f000 b9e6 	b.w	800dbec <__retarget_lock_init_recursive>
 800d820:	bd10      	pop	{r4, pc}
 800d822:	bf00      	nop
 800d824:	0800d991 	.word	0x0800d991
 800d828:	0800d9b3 	.word	0x0800d9b3
 800d82c:	0800d9eb 	.word	0x0800d9eb
 800d830:	0800da0f 	.word	0x0800da0f
 800d834:	20001490 	.word	0x20001490

0800d838 <stdio_exit_handler>:
 800d838:	4a02      	ldr	r2, [pc, #8]	@ (800d844 <stdio_exit_handler+0xc>)
 800d83a:	4903      	ldr	r1, [pc, #12]	@ (800d848 <stdio_exit_handler+0x10>)
 800d83c:	4803      	ldr	r0, [pc, #12]	@ (800d84c <stdio_exit_handler+0x14>)
 800d83e:	f000 b869 	b.w	800d914 <_fwalk_sglue>
 800d842:	bf00      	nop
 800d844:	20000020 	.word	0x20000020
 800d848:	0800ffc5 	.word	0x0800ffc5
 800d84c:	2000019c 	.word	0x2000019c

0800d850 <cleanup_stdio>:
 800d850:	6841      	ldr	r1, [r0, #4]
 800d852:	4b0c      	ldr	r3, [pc, #48]	@ (800d884 <cleanup_stdio+0x34>)
 800d854:	4299      	cmp	r1, r3
 800d856:	b510      	push	{r4, lr}
 800d858:	4604      	mov	r4, r0
 800d85a:	d001      	beq.n	800d860 <cleanup_stdio+0x10>
 800d85c:	f002 fbb2 	bl	800ffc4 <_fflush_r>
 800d860:	68a1      	ldr	r1, [r4, #8]
 800d862:	4b09      	ldr	r3, [pc, #36]	@ (800d888 <cleanup_stdio+0x38>)
 800d864:	4299      	cmp	r1, r3
 800d866:	d002      	beq.n	800d86e <cleanup_stdio+0x1e>
 800d868:	4620      	mov	r0, r4
 800d86a:	f002 fbab 	bl	800ffc4 <_fflush_r>
 800d86e:	68e1      	ldr	r1, [r4, #12]
 800d870:	4b06      	ldr	r3, [pc, #24]	@ (800d88c <cleanup_stdio+0x3c>)
 800d872:	4299      	cmp	r1, r3
 800d874:	d004      	beq.n	800d880 <cleanup_stdio+0x30>
 800d876:	4620      	mov	r0, r4
 800d878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d87c:	f002 bba2 	b.w	800ffc4 <_fflush_r>
 800d880:	bd10      	pop	{r4, pc}
 800d882:	bf00      	nop
 800d884:	20001490 	.word	0x20001490
 800d888:	200014f8 	.word	0x200014f8
 800d88c:	20001560 	.word	0x20001560

0800d890 <global_stdio_init.part.0>:
 800d890:	b510      	push	{r4, lr}
 800d892:	4b0b      	ldr	r3, [pc, #44]	@ (800d8c0 <global_stdio_init.part.0+0x30>)
 800d894:	4c0b      	ldr	r4, [pc, #44]	@ (800d8c4 <global_stdio_init.part.0+0x34>)
 800d896:	4a0c      	ldr	r2, [pc, #48]	@ (800d8c8 <global_stdio_init.part.0+0x38>)
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	4620      	mov	r0, r4
 800d89c:	2200      	movs	r2, #0
 800d89e:	2104      	movs	r1, #4
 800d8a0:	f7ff ff94 	bl	800d7cc <std>
 800d8a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	2109      	movs	r1, #9
 800d8ac:	f7ff ff8e 	bl	800d7cc <std>
 800d8b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d8b4:	2202      	movs	r2, #2
 800d8b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8ba:	2112      	movs	r1, #18
 800d8bc:	f7ff bf86 	b.w	800d7cc <std>
 800d8c0:	200015c8 	.word	0x200015c8
 800d8c4:	20001490 	.word	0x20001490
 800d8c8:	0800d839 	.word	0x0800d839

0800d8cc <__sfp_lock_acquire>:
 800d8cc:	4801      	ldr	r0, [pc, #4]	@ (800d8d4 <__sfp_lock_acquire+0x8>)
 800d8ce:	f000 b98e 	b.w	800dbee <__retarget_lock_acquire_recursive>
 800d8d2:	bf00      	nop
 800d8d4:	200015d1 	.word	0x200015d1

0800d8d8 <__sfp_lock_release>:
 800d8d8:	4801      	ldr	r0, [pc, #4]	@ (800d8e0 <__sfp_lock_release+0x8>)
 800d8da:	f000 b989 	b.w	800dbf0 <__retarget_lock_release_recursive>
 800d8de:	bf00      	nop
 800d8e0:	200015d1 	.word	0x200015d1

0800d8e4 <__sinit>:
 800d8e4:	b510      	push	{r4, lr}
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	f7ff fff0 	bl	800d8cc <__sfp_lock_acquire>
 800d8ec:	6a23      	ldr	r3, [r4, #32]
 800d8ee:	b11b      	cbz	r3, 800d8f8 <__sinit+0x14>
 800d8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8f4:	f7ff bff0 	b.w	800d8d8 <__sfp_lock_release>
 800d8f8:	4b04      	ldr	r3, [pc, #16]	@ (800d90c <__sinit+0x28>)
 800d8fa:	6223      	str	r3, [r4, #32]
 800d8fc:	4b04      	ldr	r3, [pc, #16]	@ (800d910 <__sinit+0x2c>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d1f5      	bne.n	800d8f0 <__sinit+0xc>
 800d904:	f7ff ffc4 	bl	800d890 <global_stdio_init.part.0>
 800d908:	e7f2      	b.n	800d8f0 <__sinit+0xc>
 800d90a:	bf00      	nop
 800d90c:	0800d851 	.word	0x0800d851
 800d910:	200015c8 	.word	0x200015c8

0800d914 <_fwalk_sglue>:
 800d914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d918:	4607      	mov	r7, r0
 800d91a:	4688      	mov	r8, r1
 800d91c:	4614      	mov	r4, r2
 800d91e:	2600      	movs	r6, #0
 800d920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d924:	f1b9 0901 	subs.w	r9, r9, #1
 800d928:	d505      	bpl.n	800d936 <_fwalk_sglue+0x22>
 800d92a:	6824      	ldr	r4, [r4, #0]
 800d92c:	2c00      	cmp	r4, #0
 800d92e:	d1f7      	bne.n	800d920 <_fwalk_sglue+0xc>
 800d930:	4630      	mov	r0, r6
 800d932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d936:	89ab      	ldrh	r3, [r5, #12]
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d907      	bls.n	800d94c <_fwalk_sglue+0x38>
 800d93c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d940:	3301      	adds	r3, #1
 800d942:	d003      	beq.n	800d94c <_fwalk_sglue+0x38>
 800d944:	4629      	mov	r1, r5
 800d946:	4638      	mov	r0, r7
 800d948:	47c0      	blx	r8
 800d94a:	4306      	orrs	r6, r0
 800d94c:	3568      	adds	r5, #104	@ 0x68
 800d94e:	e7e9      	b.n	800d924 <_fwalk_sglue+0x10>

0800d950 <siprintf>:
 800d950:	b40e      	push	{r1, r2, r3}
 800d952:	b500      	push	{lr}
 800d954:	b09c      	sub	sp, #112	@ 0x70
 800d956:	ab1d      	add	r3, sp, #116	@ 0x74
 800d958:	9002      	str	r0, [sp, #8]
 800d95a:	9006      	str	r0, [sp, #24]
 800d95c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d960:	4809      	ldr	r0, [pc, #36]	@ (800d988 <siprintf+0x38>)
 800d962:	9107      	str	r1, [sp, #28]
 800d964:	9104      	str	r1, [sp, #16]
 800d966:	4909      	ldr	r1, [pc, #36]	@ (800d98c <siprintf+0x3c>)
 800d968:	f853 2b04 	ldr.w	r2, [r3], #4
 800d96c:	9105      	str	r1, [sp, #20]
 800d96e:	6800      	ldr	r0, [r0, #0]
 800d970:	9301      	str	r3, [sp, #4]
 800d972:	a902      	add	r1, sp, #8
 800d974:	f002 f9a6 	bl	800fcc4 <_svfiprintf_r>
 800d978:	9b02      	ldr	r3, [sp, #8]
 800d97a:	2200      	movs	r2, #0
 800d97c:	701a      	strb	r2, [r3, #0]
 800d97e:	b01c      	add	sp, #112	@ 0x70
 800d980:	f85d eb04 	ldr.w	lr, [sp], #4
 800d984:	b003      	add	sp, #12
 800d986:	4770      	bx	lr
 800d988:	20000198 	.word	0x20000198
 800d98c:	ffff0208 	.word	0xffff0208

0800d990 <__sread>:
 800d990:	b510      	push	{r4, lr}
 800d992:	460c      	mov	r4, r1
 800d994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d998:	f000 f8da 	bl	800db50 <_read_r>
 800d99c:	2800      	cmp	r0, #0
 800d99e:	bfab      	itete	ge
 800d9a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d9a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d9a4:	181b      	addge	r3, r3, r0
 800d9a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d9aa:	bfac      	ite	ge
 800d9ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d9ae:	81a3      	strhlt	r3, [r4, #12]
 800d9b0:	bd10      	pop	{r4, pc}

0800d9b2 <__swrite>:
 800d9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b6:	461f      	mov	r7, r3
 800d9b8:	898b      	ldrh	r3, [r1, #12]
 800d9ba:	05db      	lsls	r3, r3, #23
 800d9bc:	4605      	mov	r5, r0
 800d9be:	460c      	mov	r4, r1
 800d9c0:	4616      	mov	r6, r2
 800d9c2:	d505      	bpl.n	800d9d0 <__swrite+0x1e>
 800d9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c8:	2302      	movs	r3, #2
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f000 f8ae 	bl	800db2c <_lseek_r>
 800d9d0:	89a3      	ldrh	r3, [r4, #12]
 800d9d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d9da:	81a3      	strh	r3, [r4, #12]
 800d9dc:	4632      	mov	r2, r6
 800d9de:	463b      	mov	r3, r7
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e6:	f000 b8c5 	b.w	800db74 <_write_r>

0800d9ea <__sseek>:
 800d9ea:	b510      	push	{r4, lr}
 800d9ec:	460c      	mov	r4, r1
 800d9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f2:	f000 f89b 	bl	800db2c <_lseek_r>
 800d9f6:	1c43      	adds	r3, r0, #1
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	bf15      	itete	ne
 800d9fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d9fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800da02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800da06:	81a3      	strheq	r3, [r4, #12]
 800da08:	bf18      	it	ne
 800da0a:	81a3      	strhne	r3, [r4, #12]
 800da0c:	bd10      	pop	{r4, pc}

0800da0e <__sclose>:
 800da0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da12:	f000 b87b 	b.w	800db0c <_close_r>

0800da16 <memset>:
 800da16:	4402      	add	r2, r0
 800da18:	4603      	mov	r3, r0
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d100      	bne.n	800da20 <memset+0xa>
 800da1e:	4770      	bx	lr
 800da20:	f803 1b01 	strb.w	r1, [r3], #1
 800da24:	e7f9      	b.n	800da1a <memset+0x4>

0800da26 <strncmp>:
 800da26:	b510      	push	{r4, lr}
 800da28:	b16a      	cbz	r2, 800da46 <strncmp+0x20>
 800da2a:	3901      	subs	r1, #1
 800da2c:	1884      	adds	r4, r0, r2
 800da2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da32:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800da36:	429a      	cmp	r2, r3
 800da38:	d103      	bne.n	800da42 <strncmp+0x1c>
 800da3a:	42a0      	cmp	r0, r4
 800da3c:	d001      	beq.n	800da42 <strncmp+0x1c>
 800da3e:	2a00      	cmp	r2, #0
 800da40:	d1f5      	bne.n	800da2e <strncmp+0x8>
 800da42:	1ad0      	subs	r0, r2, r3
 800da44:	bd10      	pop	{r4, pc}
 800da46:	4610      	mov	r0, r2
 800da48:	e7fc      	b.n	800da44 <strncmp+0x1e>
	...

0800da4c <strtok>:
 800da4c:	4b16      	ldr	r3, [pc, #88]	@ (800daa8 <strtok+0x5c>)
 800da4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da52:	681f      	ldr	r7, [r3, #0]
 800da54:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800da56:	4605      	mov	r5, r0
 800da58:	460e      	mov	r6, r1
 800da5a:	b9ec      	cbnz	r4, 800da98 <strtok+0x4c>
 800da5c:	2050      	movs	r0, #80	@ 0x50
 800da5e:	f001 fad3 	bl	800f008 <malloc>
 800da62:	4602      	mov	r2, r0
 800da64:	6478      	str	r0, [r7, #68]	@ 0x44
 800da66:	b920      	cbnz	r0, 800da72 <strtok+0x26>
 800da68:	4b10      	ldr	r3, [pc, #64]	@ (800daac <strtok+0x60>)
 800da6a:	4811      	ldr	r0, [pc, #68]	@ (800dab0 <strtok+0x64>)
 800da6c:	215b      	movs	r1, #91	@ 0x5b
 800da6e:	f000 f8dd 	bl	800dc2c <__assert_func>
 800da72:	e9c0 4400 	strd	r4, r4, [r0]
 800da76:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800da7a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800da7e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800da82:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800da86:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800da8a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800da8e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800da92:	6184      	str	r4, [r0, #24]
 800da94:	7704      	strb	r4, [r0, #28]
 800da96:	6244      	str	r4, [r0, #36]	@ 0x24
 800da98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da9a:	4631      	mov	r1, r6
 800da9c:	4628      	mov	r0, r5
 800da9e:	2301      	movs	r3, #1
 800daa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daa4:	f000 b806 	b.w	800dab4 <__strtok_r>
 800daa8:	20000198 	.word	0x20000198
 800daac:	08010c19 	.word	0x08010c19
 800dab0:	08010c30 	.word	0x08010c30

0800dab4 <__strtok_r>:
 800dab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dab6:	4604      	mov	r4, r0
 800dab8:	b908      	cbnz	r0, 800dabe <__strtok_r+0xa>
 800daba:	6814      	ldr	r4, [r2, #0]
 800dabc:	b144      	cbz	r4, 800dad0 <__strtok_r+0x1c>
 800dabe:	4620      	mov	r0, r4
 800dac0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dac4:	460f      	mov	r7, r1
 800dac6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800daca:	b91e      	cbnz	r6, 800dad4 <__strtok_r+0x20>
 800dacc:	b965      	cbnz	r5, 800dae8 <__strtok_r+0x34>
 800dace:	6015      	str	r5, [r2, #0]
 800dad0:	2000      	movs	r0, #0
 800dad2:	e005      	b.n	800dae0 <__strtok_r+0x2c>
 800dad4:	42b5      	cmp	r5, r6
 800dad6:	d1f6      	bne.n	800dac6 <__strtok_r+0x12>
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1f0      	bne.n	800dabe <__strtok_r+0xa>
 800dadc:	6014      	str	r4, [r2, #0]
 800dade:	7003      	strb	r3, [r0, #0]
 800dae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dae2:	461c      	mov	r4, r3
 800dae4:	e00c      	b.n	800db00 <__strtok_r+0x4c>
 800dae6:	b915      	cbnz	r5, 800daee <__strtok_r+0x3a>
 800dae8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800daec:	460e      	mov	r6, r1
 800daee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800daf2:	42ab      	cmp	r3, r5
 800daf4:	d1f7      	bne.n	800dae6 <__strtok_r+0x32>
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d0f3      	beq.n	800dae2 <__strtok_r+0x2e>
 800dafa:	2300      	movs	r3, #0
 800dafc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800db00:	6014      	str	r4, [r2, #0]
 800db02:	e7ed      	b.n	800dae0 <__strtok_r+0x2c>

0800db04 <_localeconv_r>:
 800db04:	4800      	ldr	r0, [pc, #0]	@ (800db08 <_localeconv_r+0x4>)
 800db06:	4770      	bx	lr
 800db08:	2000011c 	.word	0x2000011c

0800db0c <_close_r>:
 800db0c:	b538      	push	{r3, r4, r5, lr}
 800db0e:	4d06      	ldr	r5, [pc, #24]	@ (800db28 <_close_r+0x1c>)
 800db10:	2300      	movs	r3, #0
 800db12:	4604      	mov	r4, r0
 800db14:	4608      	mov	r0, r1
 800db16:	602b      	str	r3, [r5, #0]
 800db18:	f7f7 ff29 	bl	800596e <_close>
 800db1c:	1c43      	adds	r3, r0, #1
 800db1e:	d102      	bne.n	800db26 <_close_r+0x1a>
 800db20:	682b      	ldr	r3, [r5, #0]
 800db22:	b103      	cbz	r3, 800db26 <_close_r+0x1a>
 800db24:	6023      	str	r3, [r4, #0]
 800db26:	bd38      	pop	{r3, r4, r5, pc}
 800db28:	200015cc 	.word	0x200015cc

0800db2c <_lseek_r>:
 800db2c:	b538      	push	{r3, r4, r5, lr}
 800db2e:	4d07      	ldr	r5, [pc, #28]	@ (800db4c <_lseek_r+0x20>)
 800db30:	4604      	mov	r4, r0
 800db32:	4608      	mov	r0, r1
 800db34:	4611      	mov	r1, r2
 800db36:	2200      	movs	r2, #0
 800db38:	602a      	str	r2, [r5, #0]
 800db3a:	461a      	mov	r2, r3
 800db3c:	f7f7 ff3e 	bl	80059bc <_lseek>
 800db40:	1c43      	adds	r3, r0, #1
 800db42:	d102      	bne.n	800db4a <_lseek_r+0x1e>
 800db44:	682b      	ldr	r3, [r5, #0]
 800db46:	b103      	cbz	r3, 800db4a <_lseek_r+0x1e>
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	bd38      	pop	{r3, r4, r5, pc}
 800db4c:	200015cc 	.word	0x200015cc

0800db50 <_read_r>:
 800db50:	b538      	push	{r3, r4, r5, lr}
 800db52:	4d07      	ldr	r5, [pc, #28]	@ (800db70 <_read_r+0x20>)
 800db54:	4604      	mov	r4, r0
 800db56:	4608      	mov	r0, r1
 800db58:	4611      	mov	r1, r2
 800db5a:	2200      	movs	r2, #0
 800db5c:	602a      	str	r2, [r5, #0]
 800db5e:	461a      	mov	r2, r3
 800db60:	f7f7 fecc 	bl	80058fc <_read>
 800db64:	1c43      	adds	r3, r0, #1
 800db66:	d102      	bne.n	800db6e <_read_r+0x1e>
 800db68:	682b      	ldr	r3, [r5, #0]
 800db6a:	b103      	cbz	r3, 800db6e <_read_r+0x1e>
 800db6c:	6023      	str	r3, [r4, #0]
 800db6e:	bd38      	pop	{r3, r4, r5, pc}
 800db70:	200015cc 	.word	0x200015cc

0800db74 <_write_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	4d07      	ldr	r5, [pc, #28]	@ (800db94 <_write_r+0x20>)
 800db78:	4604      	mov	r4, r0
 800db7a:	4608      	mov	r0, r1
 800db7c:	4611      	mov	r1, r2
 800db7e:	2200      	movs	r2, #0
 800db80:	602a      	str	r2, [r5, #0]
 800db82:	461a      	mov	r2, r3
 800db84:	f7f7 fed7 	bl	8005936 <_write>
 800db88:	1c43      	adds	r3, r0, #1
 800db8a:	d102      	bne.n	800db92 <_write_r+0x1e>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	b103      	cbz	r3, 800db92 <_write_r+0x1e>
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	bd38      	pop	{r3, r4, r5, pc}
 800db94:	200015cc 	.word	0x200015cc

0800db98 <__errno>:
 800db98:	4b01      	ldr	r3, [pc, #4]	@ (800dba0 <__errno+0x8>)
 800db9a:	6818      	ldr	r0, [r3, #0]
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	20000198 	.word	0x20000198

0800dba4 <__libc_init_array>:
 800dba4:	b570      	push	{r4, r5, r6, lr}
 800dba6:	4d0d      	ldr	r5, [pc, #52]	@ (800dbdc <__libc_init_array+0x38>)
 800dba8:	4c0d      	ldr	r4, [pc, #52]	@ (800dbe0 <__libc_init_array+0x3c>)
 800dbaa:	1b64      	subs	r4, r4, r5
 800dbac:	10a4      	asrs	r4, r4, #2
 800dbae:	2600      	movs	r6, #0
 800dbb0:	42a6      	cmp	r6, r4
 800dbb2:	d109      	bne.n	800dbc8 <__libc_init_array+0x24>
 800dbb4:	4d0b      	ldr	r5, [pc, #44]	@ (800dbe4 <__libc_init_array+0x40>)
 800dbb6:	4c0c      	ldr	r4, [pc, #48]	@ (800dbe8 <__libc_init_array+0x44>)
 800dbb8:	f002 fd56 	bl	8010668 <_init>
 800dbbc:	1b64      	subs	r4, r4, r5
 800dbbe:	10a4      	asrs	r4, r4, #2
 800dbc0:	2600      	movs	r6, #0
 800dbc2:	42a6      	cmp	r6, r4
 800dbc4:	d105      	bne.n	800dbd2 <__libc_init_array+0x2e>
 800dbc6:	bd70      	pop	{r4, r5, r6, pc}
 800dbc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbcc:	4798      	blx	r3
 800dbce:	3601      	adds	r6, #1
 800dbd0:	e7ee      	b.n	800dbb0 <__libc_init_array+0xc>
 800dbd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbd6:	4798      	blx	r3
 800dbd8:	3601      	adds	r6, #1
 800dbda:	e7f2      	b.n	800dbc2 <__libc_init_array+0x1e>
 800dbdc:	0801101c 	.word	0x0801101c
 800dbe0:	0801101c 	.word	0x0801101c
 800dbe4:	0801101c 	.word	0x0801101c
 800dbe8:	08011020 	.word	0x08011020

0800dbec <__retarget_lock_init_recursive>:
 800dbec:	4770      	bx	lr

0800dbee <__retarget_lock_acquire_recursive>:
 800dbee:	4770      	bx	lr

0800dbf0 <__retarget_lock_release_recursive>:
 800dbf0:	4770      	bx	lr

0800dbf2 <memcpy>:
 800dbf2:	440a      	add	r2, r1
 800dbf4:	4291      	cmp	r1, r2
 800dbf6:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbfa:	d100      	bne.n	800dbfe <memcpy+0xc>
 800dbfc:	4770      	bx	lr
 800dbfe:	b510      	push	{r4, lr}
 800dc00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc08:	4291      	cmp	r1, r2
 800dc0a:	d1f9      	bne.n	800dc00 <memcpy+0xe>
 800dc0c:	bd10      	pop	{r4, pc}
	...

0800dc10 <nan>:
 800dc10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800dc18 <nan+0x8>
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop
 800dc18:	00000000 	.word	0x00000000
 800dc1c:	7ff80000 	.word	0x7ff80000

0800dc20 <nanf>:
 800dc20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dc28 <nanf+0x8>
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	7fc00000 	.word	0x7fc00000

0800dc2c <__assert_func>:
 800dc2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc2e:	4614      	mov	r4, r2
 800dc30:	461a      	mov	r2, r3
 800dc32:	4b09      	ldr	r3, [pc, #36]	@ (800dc58 <__assert_func+0x2c>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4605      	mov	r5, r0
 800dc38:	68d8      	ldr	r0, [r3, #12]
 800dc3a:	b954      	cbnz	r4, 800dc52 <__assert_func+0x26>
 800dc3c:	4b07      	ldr	r3, [pc, #28]	@ (800dc5c <__assert_func+0x30>)
 800dc3e:	461c      	mov	r4, r3
 800dc40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc44:	9100      	str	r1, [sp, #0]
 800dc46:	462b      	mov	r3, r5
 800dc48:	4905      	ldr	r1, [pc, #20]	@ (800dc60 <__assert_func+0x34>)
 800dc4a:	f002 f9e3 	bl	8010014 <fiprintf>
 800dc4e:	f002 fa1d 	bl	801008c <abort>
 800dc52:	4b04      	ldr	r3, [pc, #16]	@ (800dc64 <__assert_func+0x38>)
 800dc54:	e7f4      	b.n	800dc40 <__assert_func+0x14>
 800dc56:	bf00      	nop
 800dc58:	20000198 	.word	0x20000198
 800dc5c:	08010ccd 	.word	0x08010ccd
 800dc60:	08010c9f 	.word	0x08010c9f
 800dc64:	08010c92 	.word	0x08010c92

0800dc68 <quorem>:
 800dc68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6c:	6903      	ldr	r3, [r0, #16]
 800dc6e:	690c      	ldr	r4, [r1, #16]
 800dc70:	42a3      	cmp	r3, r4
 800dc72:	4607      	mov	r7, r0
 800dc74:	db7e      	blt.n	800dd74 <quorem+0x10c>
 800dc76:	3c01      	subs	r4, #1
 800dc78:	f101 0814 	add.w	r8, r1, #20
 800dc7c:	00a3      	lsls	r3, r4, #2
 800dc7e:	f100 0514 	add.w	r5, r0, #20
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc88:	9301      	str	r3, [sp, #4]
 800dc8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc92:	3301      	adds	r3, #1
 800dc94:	429a      	cmp	r2, r3
 800dc96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc9a:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc9e:	d32e      	bcc.n	800dcfe <quorem+0x96>
 800dca0:	f04f 0a00 	mov.w	sl, #0
 800dca4:	46c4      	mov	ip, r8
 800dca6:	46ae      	mov	lr, r5
 800dca8:	46d3      	mov	fp, sl
 800dcaa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dcae:	b298      	uxth	r0, r3
 800dcb0:	fb06 a000 	mla	r0, r6, r0, sl
 800dcb4:	0c02      	lsrs	r2, r0, #16
 800dcb6:	0c1b      	lsrs	r3, r3, #16
 800dcb8:	fb06 2303 	mla	r3, r6, r3, r2
 800dcbc:	f8de 2000 	ldr.w	r2, [lr]
 800dcc0:	b280      	uxth	r0, r0
 800dcc2:	b292      	uxth	r2, r2
 800dcc4:	1a12      	subs	r2, r2, r0
 800dcc6:	445a      	add	r2, fp
 800dcc8:	f8de 0000 	ldr.w	r0, [lr]
 800dccc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dcd6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dcda:	b292      	uxth	r2, r2
 800dcdc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dce0:	45e1      	cmp	r9, ip
 800dce2:	f84e 2b04 	str.w	r2, [lr], #4
 800dce6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dcea:	d2de      	bcs.n	800dcaa <quorem+0x42>
 800dcec:	9b00      	ldr	r3, [sp, #0]
 800dcee:	58eb      	ldr	r3, [r5, r3]
 800dcf0:	b92b      	cbnz	r3, 800dcfe <quorem+0x96>
 800dcf2:	9b01      	ldr	r3, [sp, #4]
 800dcf4:	3b04      	subs	r3, #4
 800dcf6:	429d      	cmp	r5, r3
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	d32f      	bcc.n	800dd5c <quorem+0xf4>
 800dcfc:	613c      	str	r4, [r7, #16]
 800dcfe:	4638      	mov	r0, r7
 800dd00:	f001 fd0e 	bl	800f720 <__mcmp>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	db25      	blt.n	800dd54 <quorem+0xec>
 800dd08:	4629      	mov	r1, r5
 800dd0a:	2000      	movs	r0, #0
 800dd0c:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd10:	f8d1 c000 	ldr.w	ip, [r1]
 800dd14:	fa1f fe82 	uxth.w	lr, r2
 800dd18:	fa1f f38c 	uxth.w	r3, ip
 800dd1c:	eba3 030e 	sub.w	r3, r3, lr
 800dd20:	4403      	add	r3, r0
 800dd22:	0c12      	lsrs	r2, r2, #16
 800dd24:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dd28:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd32:	45c1      	cmp	r9, r8
 800dd34:	f841 3b04 	str.w	r3, [r1], #4
 800dd38:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dd3c:	d2e6      	bcs.n	800dd0c <quorem+0xa4>
 800dd3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd46:	b922      	cbnz	r2, 800dd52 <quorem+0xea>
 800dd48:	3b04      	subs	r3, #4
 800dd4a:	429d      	cmp	r5, r3
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	d30b      	bcc.n	800dd68 <quorem+0x100>
 800dd50:	613c      	str	r4, [r7, #16]
 800dd52:	3601      	adds	r6, #1
 800dd54:	4630      	mov	r0, r6
 800dd56:	b003      	add	sp, #12
 800dd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd5c:	6812      	ldr	r2, [r2, #0]
 800dd5e:	3b04      	subs	r3, #4
 800dd60:	2a00      	cmp	r2, #0
 800dd62:	d1cb      	bne.n	800dcfc <quorem+0x94>
 800dd64:	3c01      	subs	r4, #1
 800dd66:	e7c6      	b.n	800dcf6 <quorem+0x8e>
 800dd68:	6812      	ldr	r2, [r2, #0]
 800dd6a:	3b04      	subs	r3, #4
 800dd6c:	2a00      	cmp	r2, #0
 800dd6e:	d1ef      	bne.n	800dd50 <quorem+0xe8>
 800dd70:	3c01      	subs	r4, #1
 800dd72:	e7ea      	b.n	800dd4a <quorem+0xe2>
 800dd74:	2000      	movs	r0, #0
 800dd76:	e7ee      	b.n	800dd56 <quorem+0xee>

0800dd78 <_dtoa_r>:
 800dd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd7c:	69c7      	ldr	r7, [r0, #28]
 800dd7e:	b099      	sub	sp, #100	@ 0x64
 800dd80:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd84:	ec55 4b10 	vmov	r4, r5, d0
 800dd88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dd8a:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd8c:	4683      	mov	fp, r0
 800dd8e:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd90:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd92:	b97f      	cbnz	r7, 800ddb4 <_dtoa_r+0x3c>
 800dd94:	2010      	movs	r0, #16
 800dd96:	f001 f937 	bl	800f008 <malloc>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	f8cb 001c 	str.w	r0, [fp, #28]
 800dda0:	b920      	cbnz	r0, 800ddac <_dtoa_r+0x34>
 800dda2:	4ba7      	ldr	r3, [pc, #668]	@ (800e040 <_dtoa_r+0x2c8>)
 800dda4:	21ef      	movs	r1, #239	@ 0xef
 800dda6:	48a7      	ldr	r0, [pc, #668]	@ (800e044 <_dtoa_r+0x2cc>)
 800dda8:	f7ff ff40 	bl	800dc2c <__assert_func>
 800ddac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ddb0:	6007      	str	r7, [r0, #0]
 800ddb2:	60c7      	str	r7, [r0, #12]
 800ddb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ddb8:	6819      	ldr	r1, [r3, #0]
 800ddba:	b159      	cbz	r1, 800ddd4 <_dtoa_r+0x5c>
 800ddbc:	685a      	ldr	r2, [r3, #4]
 800ddbe:	604a      	str	r2, [r1, #4]
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	4093      	lsls	r3, r2
 800ddc4:	608b      	str	r3, [r1, #8]
 800ddc6:	4658      	mov	r0, fp
 800ddc8:	f001 fa26 	bl	800f218 <_Bfree>
 800ddcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	601a      	str	r2, [r3, #0]
 800ddd4:	1e2b      	subs	r3, r5, #0
 800ddd6:	bfb9      	ittee	lt
 800ddd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dddc:	9303      	strlt	r3, [sp, #12]
 800ddde:	2300      	movge	r3, #0
 800dde0:	6033      	strge	r3, [r6, #0]
 800dde2:	9f03      	ldr	r7, [sp, #12]
 800dde4:	4b98      	ldr	r3, [pc, #608]	@ (800e048 <_dtoa_r+0x2d0>)
 800dde6:	bfbc      	itt	lt
 800dde8:	2201      	movlt	r2, #1
 800ddea:	6032      	strlt	r2, [r6, #0]
 800ddec:	43bb      	bics	r3, r7
 800ddee:	d112      	bne.n	800de16 <_dtoa_r+0x9e>
 800ddf0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ddf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ddf6:	6013      	str	r3, [r2, #0]
 800ddf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ddfc:	4323      	orrs	r3, r4
 800ddfe:	f000 854d 	beq.w	800e89c <_dtoa_r+0xb24>
 800de02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e05c <_dtoa_r+0x2e4>
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f000 854f 	beq.w	800e8ac <_dtoa_r+0xb34>
 800de0e:	f10a 0303 	add.w	r3, sl, #3
 800de12:	f000 bd49 	b.w	800e8a8 <_dtoa_r+0xb30>
 800de16:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de1a:	2200      	movs	r2, #0
 800de1c:	ec51 0b17 	vmov	r0, r1, d7
 800de20:	2300      	movs	r3, #0
 800de22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800de26:	f7f2 fe6f 	bl	8000b08 <__aeabi_dcmpeq>
 800de2a:	4680      	mov	r8, r0
 800de2c:	b158      	cbz	r0, 800de46 <_dtoa_r+0xce>
 800de2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800de30:	2301      	movs	r3, #1
 800de32:	6013      	str	r3, [r2, #0]
 800de34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de36:	b113      	cbz	r3, 800de3e <_dtoa_r+0xc6>
 800de38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800de3a:	4b84      	ldr	r3, [pc, #528]	@ (800e04c <_dtoa_r+0x2d4>)
 800de3c:	6013      	str	r3, [r2, #0]
 800de3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e060 <_dtoa_r+0x2e8>
 800de42:	f000 bd33 	b.w	800e8ac <_dtoa_r+0xb34>
 800de46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800de4a:	aa16      	add	r2, sp, #88	@ 0x58
 800de4c:	a917      	add	r1, sp, #92	@ 0x5c
 800de4e:	4658      	mov	r0, fp
 800de50:	f001 fd86 	bl	800f960 <__d2b>
 800de54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800de58:	4681      	mov	r9, r0
 800de5a:	2e00      	cmp	r6, #0
 800de5c:	d077      	beq.n	800df4e <_dtoa_r+0x1d6>
 800de5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800de64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800de70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800de74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800de78:	4619      	mov	r1, r3
 800de7a:	2200      	movs	r2, #0
 800de7c:	4b74      	ldr	r3, [pc, #464]	@ (800e050 <_dtoa_r+0x2d8>)
 800de7e:	f7f2 fa23 	bl	80002c8 <__aeabi_dsub>
 800de82:	a369      	add	r3, pc, #420	@ (adr r3, 800e028 <_dtoa_r+0x2b0>)
 800de84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de88:	f7f2 fbd6 	bl	8000638 <__aeabi_dmul>
 800de8c:	a368      	add	r3, pc, #416	@ (adr r3, 800e030 <_dtoa_r+0x2b8>)
 800de8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de92:	f7f2 fa1b 	bl	80002cc <__adddf3>
 800de96:	4604      	mov	r4, r0
 800de98:	4630      	mov	r0, r6
 800de9a:	460d      	mov	r5, r1
 800de9c:	f7f2 fb62 	bl	8000564 <__aeabi_i2d>
 800dea0:	a365      	add	r3, pc, #404	@ (adr r3, 800e038 <_dtoa_r+0x2c0>)
 800dea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea6:	f7f2 fbc7 	bl	8000638 <__aeabi_dmul>
 800deaa:	4602      	mov	r2, r0
 800deac:	460b      	mov	r3, r1
 800deae:	4620      	mov	r0, r4
 800deb0:	4629      	mov	r1, r5
 800deb2:	f7f2 fa0b 	bl	80002cc <__adddf3>
 800deb6:	4604      	mov	r4, r0
 800deb8:	460d      	mov	r5, r1
 800deba:	f7f2 fe6d 	bl	8000b98 <__aeabi_d2iz>
 800debe:	2200      	movs	r2, #0
 800dec0:	4607      	mov	r7, r0
 800dec2:	2300      	movs	r3, #0
 800dec4:	4620      	mov	r0, r4
 800dec6:	4629      	mov	r1, r5
 800dec8:	f7f2 fe28 	bl	8000b1c <__aeabi_dcmplt>
 800decc:	b140      	cbz	r0, 800dee0 <_dtoa_r+0x168>
 800dece:	4638      	mov	r0, r7
 800ded0:	f7f2 fb48 	bl	8000564 <__aeabi_i2d>
 800ded4:	4622      	mov	r2, r4
 800ded6:	462b      	mov	r3, r5
 800ded8:	f7f2 fe16 	bl	8000b08 <__aeabi_dcmpeq>
 800dedc:	b900      	cbnz	r0, 800dee0 <_dtoa_r+0x168>
 800dede:	3f01      	subs	r7, #1
 800dee0:	2f16      	cmp	r7, #22
 800dee2:	d851      	bhi.n	800df88 <_dtoa_r+0x210>
 800dee4:	4b5b      	ldr	r3, [pc, #364]	@ (800e054 <_dtoa_r+0x2dc>)
 800dee6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800def2:	f7f2 fe13 	bl	8000b1c <__aeabi_dcmplt>
 800def6:	2800      	cmp	r0, #0
 800def8:	d048      	beq.n	800df8c <_dtoa_r+0x214>
 800defa:	3f01      	subs	r7, #1
 800defc:	2300      	movs	r3, #0
 800defe:	9312      	str	r3, [sp, #72]	@ 0x48
 800df00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800df02:	1b9b      	subs	r3, r3, r6
 800df04:	1e5a      	subs	r2, r3, #1
 800df06:	bf44      	itt	mi
 800df08:	f1c3 0801 	rsbmi	r8, r3, #1
 800df0c:	2300      	movmi	r3, #0
 800df0e:	9208      	str	r2, [sp, #32]
 800df10:	bf54      	ite	pl
 800df12:	f04f 0800 	movpl.w	r8, #0
 800df16:	9308      	strmi	r3, [sp, #32]
 800df18:	2f00      	cmp	r7, #0
 800df1a:	db39      	blt.n	800df90 <_dtoa_r+0x218>
 800df1c:	9b08      	ldr	r3, [sp, #32]
 800df1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800df20:	443b      	add	r3, r7
 800df22:	9308      	str	r3, [sp, #32]
 800df24:	2300      	movs	r3, #0
 800df26:	930a      	str	r3, [sp, #40]	@ 0x28
 800df28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df2a:	2b09      	cmp	r3, #9
 800df2c:	d864      	bhi.n	800dff8 <_dtoa_r+0x280>
 800df2e:	2b05      	cmp	r3, #5
 800df30:	bfc4      	itt	gt
 800df32:	3b04      	subgt	r3, #4
 800df34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800df36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df38:	f1a3 0302 	sub.w	r3, r3, #2
 800df3c:	bfcc      	ite	gt
 800df3e:	2400      	movgt	r4, #0
 800df40:	2401      	movle	r4, #1
 800df42:	2b03      	cmp	r3, #3
 800df44:	d863      	bhi.n	800e00e <_dtoa_r+0x296>
 800df46:	e8df f003 	tbb	[pc, r3]
 800df4a:	372a      	.short	0x372a
 800df4c:	5535      	.short	0x5535
 800df4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800df52:	441e      	add	r6, r3
 800df54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800df58:	2b20      	cmp	r3, #32
 800df5a:	bfc1      	itttt	gt
 800df5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800df60:	409f      	lslgt	r7, r3
 800df62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800df66:	fa24 f303 	lsrgt.w	r3, r4, r3
 800df6a:	bfd6      	itet	le
 800df6c:	f1c3 0320 	rsble	r3, r3, #32
 800df70:	ea47 0003 	orrgt.w	r0, r7, r3
 800df74:	fa04 f003 	lslle.w	r0, r4, r3
 800df78:	f7f2 fae4 	bl	8000544 <__aeabi_ui2d>
 800df7c:	2201      	movs	r2, #1
 800df7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800df82:	3e01      	subs	r6, #1
 800df84:	9214      	str	r2, [sp, #80]	@ 0x50
 800df86:	e777      	b.n	800de78 <_dtoa_r+0x100>
 800df88:	2301      	movs	r3, #1
 800df8a:	e7b8      	b.n	800defe <_dtoa_r+0x186>
 800df8c:	9012      	str	r0, [sp, #72]	@ 0x48
 800df8e:	e7b7      	b.n	800df00 <_dtoa_r+0x188>
 800df90:	427b      	negs	r3, r7
 800df92:	930a      	str	r3, [sp, #40]	@ 0x28
 800df94:	2300      	movs	r3, #0
 800df96:	eba8 0807 	sub.w	r8, r8, r7
 800df9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df9c:	e7c4      	b.n	800df28 <_dtoa_r+0x1b0>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	dc35      	bgt.n	800e014 <_dtoa_r+0x29c>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	9307      	str	r3, [sp, #28]
 800dfae:	461a      	mov	r2, r3
 800dfb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800dfb2:	e00b      	b.n	800dfcc <_dtoa_r+0x254>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e7f3      	b.n	800dfa0 <_dtoa_r+0x228>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfbe:	18fb      	adds	r3, r7, r3
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	9307      	str	r3, [sp, #28]
 800dfc8:	bfb8      	it	lt
 800dfca:	2301      	movlt	r3, #1
 800dfcc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dfd0:	2100      	movs	r1, #0
 800dfd2:	2204      	movs	r2, #4
 800dfd4:	f102 0514 	add.w	r5, r2, #20
 800dfd8:	429d      	cmp	r5, r3
 800dfda:	d91f      	bls.n	800e01c <_dtoa_r+0x2a4>
 800dfdc:	6041      	str	r1, [r0, #4]
 800dfde:	4658      	mov	r0, fp
 800dfe0:	f001 f8da 	bl	800f198 <_Balloc>
 800dfe4:	4682      	mov	sl, r0
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d13c      	bne.n	800e064 <_dtoa_r+0x2ec>
 800dfea:	4b1b      	ldr	r3, [pc, #108]	@ (800e058 <_dtoa_r+0x2e0>)
 800dfec:	4602      	mov	r2, r0
 800dfee:	f240 11af 	movw	r1, #431	@ 0x1af
 800dff2:	e6d8      	b.n	800dda6 <_dtoa_r+0x2e>
 800dff4:	2301      	movs	r3, #1
 800dff6:	e7e0      	b.n	800dfba <_dtoa_r+0x242>
 800dff8:	2401      	movs	r4, #1
 800dffa:	2300      	movs	r3, #0
 800dffc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dffe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e000:	f04f 33ff 	mov.w	r3, #4294967295
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	9307      	str	r3, [sp, #28]
 800e008:	2200      	movs	r2, #0
 800e00a:	2312      	movs	r3, #18
 800e00c:	e7d0      	b.n	800dfb0 <_dtoa_r+0x238>
 800e00e:	2301      	movs	r3, #1
 800e010:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e012:	e7f5      	b.n	800e000 <_dtoa_r+0x288>
 800e014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e016:	9300      	str	r3, [sp, #0]
 800e018:	9307      	str	r3, [sp, #28]
 800e01a:	e7d7      	b.n	800dfcc <_dtoa_r+0x254>
 800e01c:	3101      	adds	r1, #1
 800e01e:	0052      	lsls	r2, r2, #1
 800e020:	e7d8      	b.n	800dfd4 <_dtoa_r+0x25c>
 800e022:	bf00      	nop
 800e024:	f3af 8000 	nop.w
 800e028:	636f4361 	.word	0x636f4361
 800e02c:	3fd287a7 	.word	0x3fd287a7
 800e030:	8b60c8b3 	.word	0x8b60c8b3
 800e034:	3fc68a28 	.word	0x3fc68a28
 800e038:	509f79fb 	.word	0x509f79fb
 800e03c:	3fd34413 	.word	0x3fd34413
 800e040:	08010c19 	.word	0x08010c19
 800e044:	08010cdb 	.word	0x08010cdb
 800e048:	7ff00000 	.word	0x7ff00000
 800e04c:	08010bf1 	.word	0x08010bf1
 800e050:	3ff80000 	.word	0x3ff80000
 800e054:	08010e38 	.word	0x08010e38
 800e058:	08010d33 	.word	0x08010d33
 800e05c:	08010cd7 	.word	0x08010cd7
 800e060:	08010bf0 	.word	0x08010bf0
 800e064:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e068:	6018      	str	r0, [r3, #0]
 800e06a:	9b07      	ldr	r3, [sp, #28]
 800e06c:	2b0e      	cmp	r3, #14
 800e06e:	f200 80a4 	bhi.w	800e1ba <_dtoa_r+0x442>
 800e072:	2c00      	cmp	r4, #0
 800e074:	f000 80a1 	beq.w	800e1ba <_dtoa_r+0x442>
 800e078:	2f00      	cmp	r7, #0
 800e07a:	dd33      	ble.n	800e0e4 <_dtoa_r+0x36c>
 800e07c:	4bad      	ldr	r3, [pc, #692]	@ (800e334 <_dtoa_r+0x5bc>)
 800e07e:	f007 020f 	and.w	r2, r7, #15
 800e082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e086:	ed93 7b00 	vldr	d7, [r3]
 800e08a:	05f8      	lsls	r0, r7, #23
 800e08c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e090:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e094:	d516      	bpl.n	800e0c4 <_dtoa_r+0x34c>
 800e096:	4ba8      	ldr	r3, [pc, #672]	@ (800e338 <_dtoa_r+0x5c0>)
 800e098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e09c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e0a0:	f7f2 fbf4 	bl	800088c <__aeabi_ddiv>
 800e0a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0a8:	f004 040f 	and.w	r4, r4, #15
 800e0ac:	2603      	movs	r6, #3
 800e0ae:	4da2      	ldr	r5, [pc, #648]	@ (800e338 <_dtoa_r+0x5c0>)
 800e0b0:	b954      	cbnz	r4, 800e0c8 <_dtoa_r+0x350>
 800e0b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ba:	f7f2 fbe7 	bl	800088c <__aeabi_ddiv>
 800e0be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0c2:	e028      	b.n	800e116 <_dtoa_r+0x39e>
 800e0c4:	2602      	movs	r6, #2
 800e0c6:	e7f2      	b.n	800e0ae <_dtoa_r+0x336>
 800e0c8:	07e1      	lsls	r1, r4, #31
 800e0ca:	d508      	bpl.n	800e0de <_dtoa_r+0x366>
 800e0cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0d4:	f7f2 fab0 	bl	8000638 <__aeabi_dmul>
 800e0d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0dc:	3601      	adds	r6, #1
 800e0de:	1064      	asrs	r4, r4, #1
 800e0e0:	3508      	adds	r5, #8
 800e0e2:	e7e5      	b.n	800e0b0 <_dtoa_r+0x338>
 800e0e4:	f000 80d2 	beq.w	800e28c <_dtoa_r+0x514>
 800e0e8:	427c      	negs	r4, r7
 800e0ea:	4b92      	ldr	r3, [pc, #584]	@ (800e334 <_dtoa_r+0x5bc>)
 800e0ec:	4d92      	ldr	r5, [pc, #584]	@ (800e338 <_dtoa_r+0x5c0>)
 800e0ee:	f004 020f 	and.w	r2, r4, #15
 800e0f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0fe:	f7f2 fa9b 	bl	8000638 <__aeabi_dmul>
 800e102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e106:	1124      	asrs	r4, r4, #4
 800e108:	2300      	movs	r3, #0
 800e10a:	2602      	movs	r6, #2
 800e10c:	2c00      	cmp	r4, #0
 800e10e:	f040 80b2 	bne.w	800e276 <_dtoa_r+0x4fe>
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1d3      	bne.n	800e0be <_dtoa_r+0x346>
 800e116:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e118:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f000 80b7 	beq.w	800e290 <_dtoa_r+0x518>
 800e122:	4b86      	ldr	r3, [pc, #536]	@ (800e33c <_dtoa_r+0x5c4>)
 800e124:	2200      	movs	r2, #0
 800e126:	4620      	mov	r0, r4
 800e128:	4629      	mov	r1, r5
 800e12a:	f7f2 fcf7 	bl	8000b1c <__aeabi_dcmplt>
 800e12e:	2800      	cmp	r0, #0
 800e130:	f000 80ae 	beq.w	800e290 <_dtoa_r+0x518>
 800e134:	9b07      	ldr	r3, [sp, #28]
 800e136:	2b00      	cmp	r3, #0
 800e138:	f000 80aa 	beq.w	800e290 <_dtoa_r+0x518>
 800e13c:	9b00      	ldr	r3, [sp, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	dd37      	ble.n	800e1b2 <_dtoa_r+0x43a>
 800e142:	1e7b      	subs	r3, r7, #1
 800e144:	9304      	str	r3, [sp, #16]
 800e146:	4620      	mov	r0, r4
 800e148:	4b7d      	ldr	r3, [pc, #500]	@ (800e340 <_dtoa_r+0x5c8>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	4629      	mov	r1, r5
 800e14e:	f7f2 fa73 	bl	8000638 <__aeabi_dmul>
 800e152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e156:	9c00      	ldr	r4, [sp, #0]
 800e158:	3601      	adds	r6, #1
 800e15a:	4630      	mov	r0, r6
 800e15c:	f7f2 fa02 	bl	8000564 <__aeabi_i2d>
 800e160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e164:	f7f2 fa68 	bl	8000638 <__aeabi_dmul>
 800e168:	4b76      	ldr	r3, [pc, #472]	@ (800e344 <_dtoa_r+0x5cc>)
 800e16a:	2200      	movs	r2, #0
 800e16c:	f7f2 f8ae 	bl	80002cc <__adddf3>
 800e170:	4605      	mov	r5, r0
 800e172:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e176:	2c00      	cmp	r4, #0
 800e178:	f040 808d 	bne.w	800e296 <_dtoa_r+0x51e>
 800e17c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e180:	4b71      	ldr	r3, [pc, #452]	@ (800e348 <_dtoa_r+0x5d0>)
 800e182:	2200      	movs	r2, #0
 800e184:	f7f2 f8a0 	bl	80002c8 <__aeabi_dsub>
 800e188:	4602      	mov	r2, r0
 800e18a:	460b      	mov	r3, r1
 800e18c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e190:	462a      	mov	r2, r5
 800e192:	4633      	mov	r3, r6
 800e194:	f7f2 fce0 	bl	8000b58 <__aeabi_dcmpgt>
 800e198:	2800      	cmp	r0, #0
 800e19a:	f040 828b 	bne.w	800e6b4 <_dtoa_r+0x93c>
 800e19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1a2:	462a      	mov	r2, r5
 800e1a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e1a8:	f7f2 fcb8 	bl	8000b1c <__aeabi_dcmplt>
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	f040 8128 	bne.w	800e402 <_dtoa_r+0x68a>
 800e1b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e1b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e1ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f2c0 815a 	blt.w	800e476 <_dtoa_r+0x6fe>
 800e1c2:	2f0e      	cmp	r7, #14
 800e1c4:	f300 8157 	bgt.w	800e476 <_dtoa_r+0x6fe>
 800e1c8:	4b5a      	ldr	r3, [pc, #360]	@ (800e334 <_dtoa_r+0x5bc>)
 800e1ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e1ce:	ed93 7b00 	vldr	d7, [r3]
 800e1d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	ed8d 7b00 	vstr	d7, [sp]
 800e1da:	da03      	bge.n	800e1e4 <_dtoa_r+0x46c>
 800e1dc:	9b07      	ldr	r3, [sp, #28]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	f340 8101 	ble.w	800e3e6 <_dtoa_r+0x66e>
 800e1e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e1e8:	4656      	mov	r6, sl
 800e1ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	4629      	mov	r1, r5
 800e1f2:	f7f2 fb4b 	bl	800088c <__aeabi_ddiv>
 800e1f6:	f7f2 fccf 	bl	8000b98 <__aeabi_d2iz>
 800e1fa:	4680      	mov	r8, r0
 800e1fc:	f7f2 f9b2 	bl	8000564 <__aeabi_i2d>
 800e200:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e204:	f7f2 fa18 	bl	8000638 <__aeabi_dmul>
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	4620      	mov	r0, r4
 800e20e:	4629      	mov	r1, r5
 800e210:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e214:	f7f2 f858 	bl	80002c8 <__aeabi_dsub>
 800e218:	f806 4b01 	strb.w	r4, [r6], #1
 800e21c:	9d07      	ldr	r5, [sp, #28]
 800e21e:	eba6 040a 	sub.w	r4, r6, sl
 800e222:	42a5      	cmp	r5, r4
 800e224:	4602      	mov	r2, r0
 800e226:	460b      	mov	r3, r1
 800e228:	f040 8117 	bne.w	800e45a <_dtoa_r+0x6e2>
 800e22c:	f7f2 f84e 	bl	80002cc <__adddf3>
 800e230:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e234:	4604      	mov	r4, r0
 800e236:	460d      	mov	r5, r1
 800e238:	f7f2 fc8e 	bl	8000b58 <__aeabi_dcmpgt>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	f040 80f9 	bne.w	800e434 <_dtoa_r+0x6bc>
 800e242:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e246:	4620      	mov	r0, r4
 800e248:	4629      	mov	r1, r5
 800e24a:	f7f2 fc5d 	bl	8000b08 <__aeabi_dcmpeq>
 800e24e:	b118      	cbz	r0, 800e258 <_dtoa_r+0x4e0>
 800e250:	f018 0f01 	tst.w	r8, #1
 800e254:	f040 80ee 	bne.w	800e434 <_dtoa_r+0x6bc>
 800e258:	4649      	mov	r1, r9
 800e25a:	4658      	mov	r0, fp
 800e25c:	f000 ffdc 	bl	800f218 <_Bfree>
 800e260:	2300      	movs	r3, #0
 800e262:	7033      	strb	r3, [r6, #0]
 800e264:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e266:	3701      	adds	r7, #1
 800e268:	601f      	str	r7, [r3, #0]
 800e26a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f000 831d 	beq.w	800e8ac <_dtoa_r+0xb34>
 800e272:	601e      	str	r6, [r3, #0]
 800e274:	e31a      	b.n	800e8ac <_dtoa_r+0xb34>
 800e276:	07e2      	lsls	r2, r4, #31
 800e278:	d505      	bpl.n	800e286 <_dtoa_r+0x50e>
 800e27a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e27e:	f7f2 f9db 	bl	8000638 <__aeabi_dmul>
 800e282:	3601      	adds	r6, #1
 800e284:	2301      	movs	r3, #1
 800e286:	1064      	asrs	r4, r4, #1
 800e288:	3508      	adds	r5, #8
 800e28a:	e73f      	b.n	800e10c <_dtoa_r+0x394>
 800e28c:	2602      	movs	r6, #2
 800e28e:	e742      	b.n	800e116 <_dtoa_r+0x39e>
 800e290:	9c07      	ldr	r4, [sp, #28]
 800e292:	9704      	str	r7, [sp, #16]
 800e294:	e761      	b.n	800e15a <_dtoa_r+0x3e2>
 800e296:	4b27      	ldr	r3, [pc, #156]	@ (800e334 <_dtoa_r+0x5bc>)
 800e298:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e29a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e29e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e2a2:	4454      	add	r4, sl
 800e2a4:	2900      	cmp	r1, #0
 800e2a6:	d053      	beq.n	800e350 <_dtoa_r+0x5d8>
 800e2a8:	4928      	ldr	r1, [pc, #160]	@ (800e34c <_dtoa_r+0x5d4>)
 800e2aa:	2000      	movs	r0, #0
 800e2ac:	f7f2 faee 	bl	800088c <__aeabi_ddiv>
 800e2b0:	4633      	mov	r3, r6
 800e2b2:	462a      	mov	r2, r5
 800e2b4:	f7f2 f808 	bl	80002c8 <__aeabi_dsub>
 800e2b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2bc:	4656      	mov	r6, sl
 800e2be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2c2:	f7f2 fc69 	bl	8000b98 <__aeabi_d2iz>
 800e2c6:	4605      	mov	r5, r0
 800e2c8:	f7f2 f94c 	bl	8000564 <__aeabi_i2d>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2d4:	f7f1 fff8 	bl	80002c8 <__aeabi_dsub>
 800e2d8:	3530      	adds	r5, #48	@ 0x30
 800e2da:	4602      	mov	r2, r0
 800e2dc:	460b      	mov	r3, r1
 800e2de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2e2:	f806 5b01 	strb.w	r5, [r6], #1
 800e2e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2ea:	f7f2 fc17 	bl	8000b1c <__aeabi_dcmplt>
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	d171      	bne.n	800e3d6 <_dtoa_r+0x65e>
 800e2f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2f6:	4911      	ldr	r1, [pc, #68]	@ (800e33c <_dtoa_r+0x5c4>)
 800e2f8:	2000      	movs	r0, #0
 800e2fa:	f7f1 ffe5 	bl	80002c8 <__aeabi_dsub>
 800e2fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e302:	f7f2 fc0b 	bl	8000b1c <__aeabi_dcmplt>
 800e306:	2800      	cmp	r0, #0
 800e308:	f040 8095 	bne.w	800e436 <_dtoa_r+0x6be>
 800e30c:	42a6      	cmp	r6, r4
 800e30e:	f43f af50 	beq.w	800e1b2 <_dtoa_r+0x43a>
 800e312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e316:	4b0a      	ldr	r3, [pc, #40]	@ (800e340 <_dtoa_r+0x5c8>)
 800e318:	2200      	movs	r2, #0
 800e31a:	f7f2 f98d 	bl	8000638 <__aeabi_dmul>
 800e31e:	4b08      	ldr	r3, [pc, #32]	@ (800e340 <_dtoa_r+0x5c8>)
 800e320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e324:	2200      	movs	r2, #0
 800e326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e32a:	f7f2 f985 	bl	8000638 <__aeabi_dmul>
 800e32e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e332:	e7c4      	b.n	800e2be <_dtoa_r+0x546>
 800e334:	08010e38 	.word	0x08010e38
 800e338:	08010e10 	.word	0x08010e10
 800e33c:	3ff00000 	.word	0x3ff00000
 800e340:	40240000 	.word	0x40240000
 800e344:	401c0000 	.word	0x401c0000
 800e348:	40140000 	.word	0x40140000
 800e34c:	3fe00000 	.word	0x3fe00000
 800e350:	4631      	mov	r1, r6
 800e352:	4628      	mov	r0, r5
 800e354:	f7f2 f970 	bl	8000638 <__aeabi_dmul>
 800e358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e35c:	9415      	str	r4, [sp, #84]	@ 0x54
 800e35e:	4656      	mov	r6, sl
 800e360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e364:	f7f2 fc18 	bl	8000b98 <__aeabi_d2iz>
 800e368:	4605      	mov	r5, r0
 800e36a:	f7f2 f8fb 	bl	8000564 <__aeabi_i2d>
 800e36e:	4602      	mov	r2, r0
 800e370:	460b      	mov	r3, r1
 800e372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e376:	f7f1 ffa7 	bl	80002c8 <__aeabi_dsub>
 800e37a:	3530      	adds	r5, #48	@ 0x30
 800e37c:	f806 5b01 	strb.w	r5, [r6], #1
 800e380:	4602      	mov	r2, r0
 800e382:	460b      	mov	r3, r1
 800e384:	42a6      	cmp	r6, r4
 800e386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e38a:	f04f 0200 	mov.w	r2, #0
 800e38e:	d124      	bne.n	800e3da <_dtoa_r+0x662>
 800e390:	4bac      	ldr	r3, [pc, #688]	@ (800e644 <_dtoa_r+0x8cc>)
 800e392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e396:	f7f1 ff99 	bl	80002cc <__adddf3>
 800e39a:	4602      	mov	r2, r0
 800e39c:	460b      	mov	r3, r1
 800e39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3a2:	f7f2 fbd9 	bl	8000b58 <__aeabi_dcmpgt>
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	d145      	bne.n	800e436 <_dtoa_r+0x6be>
 800e3aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e3ae:	49a5      	ldr	r1, [pc, #660]	@ (800e644 <_dtoa_r+0x8cc>)
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	f7f1 ff89 	bl	80002c8 <__aeabi_dsub>
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3be:	f7f2 fbad 	bl	8000b1c <__aeabi_dcmplt>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	f43f aef5 	beq.w	800e1b2 <_dtoa_r+0x43a>
 800e3c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e3ca:	1e73      	subs	r3, r6, #1
 800e3cc:	9315      	str	r3, [sp, #84]	@ 0x54
 800e3ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e3d2:	2b30      	cmp	r3, #48	@ 0x30
 800e3d4:	d0f8      	beq.n	800e3c8 <_dtoa_r+0x650>
 800e3d6:	9f04      	ldr	r7, [sp, #16]
 800e3d8:	e73e      	b.n	800e258 <_dtoa_r+0x4e0>
 800e3da:	4b9b      	ldr	r3, [pc, #620]	@ (800e648 <_dtoa_r+0x8d0>)
 800e3dc:	f7f2 f92c 	bl	8000638 <__aeabi_dmul>
 800e3e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3e4:	e7bc      	b.n	800e360 <_dtoa_r+0x5e8>
 800e3e6:	d10c      	bne.n	800e402 <_dtoa_r+0x68a>
 800e3e8:	4b98      	ldr	r3, [pc, #608]	@ (800e64c <_dtoa_r+0x8d4>)
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3f0:	f7f2 f922 	bl	8000638 <__aeabi_dmul>
 800e3f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3f8:	f7f2 fba4 	bl	8000b44 <__aeabi_dcmpge>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	f000 8157 	beq.w	800e6b0 <_dtoa_r+0x938>
 800e402:	2400      	movs	r4, #0
 800e404:	4625      	mov	r5, r4
 800e406:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e408:	43db      	mvns	r3, r3
 800e40a:	9304      	str	r3, [sp, #16]
 800e40c:	4656      	mov	r6, sl
 800e40e:	2700      	movs	r7, #0
 800e410:	4621      	mov	r1, r4
 800e412:	4658      	mov	r0, fp
 800e414:	f000 ff00 	bl	800f218 <_Bfree>
 800e418:	2d00      	cmp	r5, #0
 800e41a:	d0dc      	beq.n	800e3d6 <_dtoa_r+0x65e>
 800e41c:	b12f      	cbz	r7, 800e42a <_dtoa_r+0x6b2>
 800e41e:	42af      	cmp	r7, r5
 800e420:	d003      	beq.n	800e42a <_dtoa_r+0x6b2>
 800e422:	4639      	mov	r1, r7
 800e424:	4658      	mov	r0, fp
 800e426:	f000 fef7 	bl	800f218 <_Bfree>
 800e42a:	4629      	mov	r1, r5
 800e42c:	4658      	mov	r0, fp
 800e42e:	f000 fef3 	bl	800f218 <_Bfree>
 800e432:	e7d0      	b.n	800e3d6 <_dtoa_r+0x65e>
 800e434:	9704      	str	r7, [sp, #16]
 800e436:	4633      	mov	r3, r6
 800e438:	461e      	mov	r6, r3
 800e43a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e43e:	2a39      	cmp	r2, #57	@ 0x39
 800e440:	d107      	bne.n	800e452 <_dtoa_r+0x6da>
 800e442:	459a      	cmp	sl, r3
 800e444:	d1f8      	bne.n	800e438 <_dtoa_r+0x6c0>
 800e446:	9a04      	ldr	r2, [sp, #16]
 800e448:	3201      	adds	r2, #1
 800e44a:	9204      	str	r2, [sp, #16]
 800e44c:	2230      	movs	r2, #48	@ 0x30
 800e44e:	f88a 2000 	strb.w	r2, [sl]
 800e452:	781a      	ldrb	r2, [r3, #0]
 800e454:	3201      	adds	r2, #1
 800e456:	701a      	strb	r2, [r3, #0]
 800e458:	e7bd      	b.n	800e3d6 <_dtoa_r+0x65e>
 800e45a:	4b7b      	ldr	r3, [pc, #492]	@ (800e648 <_dtoa_r+0x8d0>)
 800e45c:	2200      	movs	r2, #0
 800e45e:	f7f2 f8eb 	bl	8000638 <__aeabi_dmul>
 800e462:	2200      	movs	r2, #0
 800e464:	2300      	movs	r3, #0
 800e466:	4604      	mov	r4, r0
 800e468:	460d      	mov	r5, r1
 800e46a:	f7f2 fb4d 	bl	8000b08 <__aeabi_dcmpeq>
 800e46e:	2800      	cmp	r0, #0
 800e470:	f43f aebb 	beq.w	800e1ea <_dtoa_r+0x472>
 800e474:	e6f0      	b.n	800e258 <_dtoa_r+0x4e0>
 800e476:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e478:	2a00      	cmp	r2, #0
 800e47a:	f000 80db 	beq.w	800e634 <_dtoa_r+0x8bc>
 800e47e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e480:	2a01      	cmp	r2, #1
 800e482:	f300 80bf 	bgt.w	800e604 <_dtoa_r+0x88c>
 800e486:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e488:	2a00      	cmp	r2, #0
 800e48a:	f000 80b7 	beq.w	800e5fc <_dtoa_r+0x884>
 800e48e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e492:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e494:	4646      	mov	r6, r8
 800e496:	9a08      	ldr	r2, [sp, #32]
 800e498:	2101      	movs	r1, #1
 800e49a:	441a      	add	r2, r3
 800e49c:	4658      	mov	r0, fp
 800e49e:	4498      	add	r8, r3
 800e4a0:	9208      	str	r2, [sp, #32]
 800e4a2:	f000 ffb7 	bl	800f414 <__i2b>
 800e4a6:	4605      	mov	r5, r0
 800e4a8:	b15e      	cbz	r6, 800e4c2 <_dtoa_r+0x74a>
 800e4aa:	9b08      	ldr	r3, [sp, #32]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	dd08      	ble.n	800e4c2 <_dtoa_r+0x74a>
 800e4b0:	42b3      	cmp	r3, r6
 800e4b2:	9a08      	ldr	r2, [sp, #32]
 800e4b4:	bfa8      	it	ge
 800e4b6:	4633      	movge	r3, r6
 800e4b8:	eba8 0803 	sub.w	r8, r8, r3
 800e4bc:	1af6      	subs	r6, r6, r3
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	9308      	str	r3, [sp, #32]
 800e4c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4c4:	b1f3      	cbz	r3, 800e504 <_dtoa_r+0x78c>
 800e4c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f000 80b7 	beq.w	800e63c <_dtoa_r+0x8c4>
 800e4ce:	b18c      	cbz	r4, 800e4f4 <_dtoa_r+0x77c>
 800e4d0:	4629      	mov	r1, r5
 800e4d2:	4622      	mov	r2, r4
 800e4d4:	4658      	mov	r0, fp
 800e4d6:	f001 f85d 	bl	800f594 <__pow5mult>
 800e4da:	464a      	mov	r2, r9
 800e4dc:	4601      	mov	r1, r0
 800e4de:	4605      	mov	r5, r0
 800e4e0:	4658      	mov	r0, fp
 800e4e2:	f000 ffad 	bl	800f440 <__multiply>
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	9004      	str	r0, [sp, #16]
 800e4ea:	4658      	mov	r0, fp
 800e4ec:	f000 fe94 	bl	800f218 <_Bfree>
 800e4f0:	9b04      	ldr	r3, [sp, #16]
 800e4f2:	4699      	mov	r9, r3
 800e4f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4f6:	1b1a      	subs	r2, r3, r4
 800e4f8:	d004      	beq.n	800e504 <_dtoa_r+0x78c>
 800e4fa:	4649      	mov	r1, r9
 800e4fc:	4658      	mov	r0, fp
 800e4fe:	f001 f849 	bl	800f594 <__pow5mult>
 800e502:	4681      	mov	r9, r0
 800e504:	2101      	movs	r1, #1
 800e506:	4658      	mov	r0, fp
 800e508:	f000 ff84 	bl	800f414 <__i2b>
 800e50c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e50e:	4604      	mov	r4, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	f000 81cf 	beq.w	800e8b4 <_dtoa_r+0xb3c>
 800e516:	461a      	mov	r2, r3
 800e518:	4601      	mov	r1, r0
 800e51a:	4658      	mov	r0, fp
 800e51c:	f001 f83a 	bl	800f594 <__pow5mult>
 800e520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e522:	2b01      	cmp	r3, #1
 800e524:	4604      	mov	r4, r0
 800e526:	f300 8095 	bgt.w	800e654 <_dtoa_r+0x8dc>
 800e52a:	9b02      	ldr	r3, [sp, #8]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f040 8087 	bne.w	800e640 <_dtoa_r+0x8c8>
 800e532:	9b03      	ldr	r3, [sp, #12]
 800e534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f040 8089 	bne.w	800e650 <_dtoa_r+0x8d8>
 800e53e:	9b03      	ldr	r3, [sp, #12]
 800e540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e544:	0d1b      	lsrs	r3, r3, #20
 800e546:	051b      	lsls	r3, r3, #20
 800e548:	b12b      	cbz	r3, 800e556 <_dtoa_r+0x7de>
 800e54a:	9b08      	ldr	r3, [sp, #32]
 800e54c:	3301      	adds	r3, #1
 800e54e:	9308      	str	r3, [sp, #32]
 800e550:	f108 0801 	add.w	r8, r8, #1
 800e554:	2301      	movs	r3, #1
 800e556:	930a      	str	r3, [sp, #40]	@ 0x28
 800e558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	f000 81b0 	beq.w	800e8c0 <_dtoa_r+0xb48>
 800e560:	6923      	ldr	r3, [r4, #16]
 800e562:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e566:	6918      	ldr	r0, [r3, #16]
 800e568:	f000 ff08 	bl	800f37c <__hi0bits>
 800e56c:	f1c0 0020 	rsb	r0, r0, #32
 800e570:	9b08      	ldr	r3, [sp, #32]
 800e572:	4418      	add	r0, r3
 800e574:	f010 001f 	ands.w	r0, r0, #31
 800e578:	d077      	beq.n	800e66a <_dtoa_r+0x8f2>
 800e57a:	f1c0 0320 	rsb	r3, r0, #32
 800e57e:	2b04      	cmp	r3, #4
 800e580:	dd6b      	ble.n	800e65a <_dtoa_r+0x8e2>
 800e582:	9b08      	ldr	r3, [sp, #32]
 800e584:	f1c0 001c 	rsb	r0, r0, #28
 800e588:	4403      	add	r3, r0
 800e58a:	4480      	add	r8, r0
 800e58c:	4406      	add	r6, r0
 800e58e:	9308      	str	r3, [sp, #32]
 800e590:	f1b8 0f00 	cmp.w	r8, #0
 800e594:	dd05      	ble.n	800e5a2 <_dtoa_r+0x82a>
 800e596:	4649      	mov	r1, r9
 800e598:	4642      	mov	r2, r8
 800e59a:	4658      	mov	r0, fp
 800e59c:	f001 f854 	bl	800f648 <__lshift>
 800e5a0:	4681      	mov	r9, r0
 800e5a2:	9b08      	ldr	r3, [sp, #32]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	dd05      	ble.n	800e5b4 <_dtoa_r+0x83c>
 800e5a8:	4621      	mov	r1, r4
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	4658      	mov	r0, fp
 800e5ae:	f001 f84b 	bl	800f648 <__lshift>
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d059      	beq.n	800e66e <_dtoa_r+0x8f6>
 800e5ba:	4621      	mov	r1, r4
 800e5bc:	4648      	mov	r0, r9
 800e5be:	f001 f8af 	bl	800f720 <__mcmp>
 800e5c2:	2800      	cmp	r0, #0
 800e5c4:	da53      	bge.n	800e66e <_dtoa_r+0x8f6>
 800e5c6:	1e7b      	subs	r3, r7, #1
 800e5c8:	9304      	str	r3, [sp, #16]
 800e5ca:	4649      	mov	r1, r9
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	220a      	movs	r2, #10
 800e5d0:	4658      	mov	r0, fp
 800e5d2:	f000 fe43 	bl	800f25c <__multadd>
 800e5d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5d8:	4681      	mov	r9, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	f000 8172 	beq.w	800e8c4 <_dtoa_r+0xb4c>
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	4629      	mov	r1, r5
 800e5e4:	220a      	movs	r2, #10
 800e5e6:	4658      	mov	r0, fp
 800e5e8:	f000 fe38 	bl	800f25c <__multadd>
 800e5ec:	9b00      	ldr	r3, [sp, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	4605      	mov	r5, r0
 800e5f2:	dc67      	bgt.n	800e6c4 <_dtoa_r+0x94c>
 800e5f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5f6:	2b02      	cmp	r3, #2
 800e5f8:	dc41      	bgt.n	800e67e <_dtoa_r+0x906>
 800e5fa:	e063      	b.n	800e6c4 <_dtoa_r+0x94c>
 800e5fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e5fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e602:	e746      	b.n	800e492 <_dtoa_r+0x71a>
 800e604:	9b07      	ldr	r3, [sp, #28]
 800e606:	1e5c      	subs	r4, r3, #1
 800e608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e60a:	42a3      	cmp	r3, r4
 800e60c:	bfbf      	itttt	lt
 800e60e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e610:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e612:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e614:	1ae3      	sublt	r3, r4, r3
 800e616:	bfb4      	ite	lt
 800e618:	18d2      	addlt	r2, r2, r3
 800e61a:	1b1c      	subge	r4, r3, r4
 800e61c:	9b07      	ldr	r3, [sp, #28]
 800e61e:	bfbc      	itt	lt
 800e620:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e622:	2400      	movlt	r4, #0
 800e624:	2b00      	cmp	r3, #0
 800e626:	bfb5      	itete	lt
 800e628:	eba8 0603 	sublt.w	r6, r8, r3
 800e62c:	9b07      	ldrge	r3, [sp, #28]
 800e62e:	2300      	movlt	r3, #0
 800e630:	4646      	movge	r6, r8
 800e632:	e730      	b.n	800e496 <_dtoa_r+0x71e>
 800e634:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e636:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e638:	4646      	mov	r6, r8
 800e63a:	e735      	b.n	800e4a8 <_dtoa_r+0x730>
 800e63c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e63e:	e75c      	b.n	800e4fa <_dtoa_r+0x782>
 800e640:	2300      	movs	r3, #0
 800e642:	e788      	b.n	800e556 <_dtoa_r+0x7de>
 800e644:	3fe00000 	.word	0x3fe00000
 800e648:	40240000 	.word	0x40240000
 800e64c:	40140000 	.word	0x40140000
 800e650:	9b02      	ldr	r3, [sp, #8]
 800e652:	e780      	b.n	800e556 <_dtoa_r+0x7de>
 800e654:	2300      	movs	r3, #0
 800e656:	930a      	str	r3, [sp, #40]	@ 0x28
 800e658:	e782      	b.n	800e560 <_dtoa_r+0x7e8>
 800e65a:	d099      	beq.n	800e590 <_dtoa_r+0x818>
 800e65c:	9a08      	ldr	r2, [sp, #32]
 800e65e:	331c      	adds	r3, #28
 800e660:	441a      	add	r2, r3
 800e662:	4498      	add	r8, r3
 800e664:	441e      	add	r6, r3
 800e666:	9208      	str	r2, [sp, #32]
 800e668:	e792      	b.n	800e590 <_dtoa_r+0x818>
 800e66a:	4603      	mov	r3, r0
 800e66c:	e7f6      	b.n	800e65c <_dtoa_r+0x8e4>
 800e66e:	9b07      	ldr	r3, [sp, #28]
 800e670:	9704      	str	r7, [sp, #16]
 800e672:	2b00      	cmp	r3, #0
 800e674:	dc20      	bgt.n	800e6b8 <_dtoa_r+0x940>
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e67a:	2b02      	cmp	r3, #2
 800e67c:	dd1e      	ble.n	800e6bc <_dtoa_r+0x944>
 800e67e:	9b00      	ldr	r3, [sp, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	f47f aec0 	bne.w	800e406 <_dtoa_r+0x68e>
 800e686:	4621      	mov	r1, r4
 800e688:	2205      	movs	r2, #5
 800e68a:	4658      	mov	r0, fp
 800e68c:	f000 fde6 	bl	800f25c <__multadd>
 800e690:	4601      	mov	r1, r0
 800e692:	4604      	mov	r4, r0
 800e694:	4648      	mov	r0, r9
 800e696:	f001 f843 	bl	800f720 <__mcmp>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	f77f aeb3 	ble.w	800e406 <_dtoa_r+0x68e>
 800e6a0:	4656      	mov	r6, sl
 800e6a2:	2331      	movs	r3, #49	@ 0x31
 800e6a4:	f806 3b01 	strb.w	r3, [r6], #1
 800e6a8:	9b04      	ldr	r3, [sp, #16]
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	9304      	str	r3, [sp, #16]
 800e6ae:	e6ae      	b.n	800e40e <_dtoa_r+0x696>
 800e6b0:	9c07      	ldr	r4, [sp, #28]
 800e6b2:	9704      	str	r7, [sp, #16]
 800e6b4:	4625      	mov	r5, r4
 800e6b6:	e7f3      	b.n	800e6a0 <_dtoa_r+0x928>
 800e6b8:	9b07      	ldr	r3, [sp, #28]
 800e6ba:	9300      	str	r3, [sp, #0]
 800e6bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	f000 8104 	beq.w	800e8cc <_dtoa_r+0xb54>
 800e6c4:	2e00      	cmp	r6, #0
 800e6c6:	dd05      	ble.n	800e6d4 <_dtoa_r+0x95c>
 800e6c8:	4629      	mov	r1, r5
 800e6ca:	4632      	mov	r2, r6
 800e6cc:	4658      	mov	r0, fp
 800e6ce:	f000 ffbb 	bl	800f648 <__lshift>
 800e6d2:	4605      	mov	r5, r0
 800e6d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d05a      	beq.n	800e790 <_dtoa_r+0xa18>
 800e6da:	6869      	ldr	r1, [r5, #4]
 800e6dc:	4658      	mov	r0, fp
 800e6de:	f000 fd5b 	bl	800f198 <_Balloc>
 800e6e2:	4606      	mov	r6, r0
 800e6e4:	b928      	cbnz	r0, 800e6f2 <_dtoa_r+0x97a>
 800e6e6:	4b84      	ldr	r3, [pc, #528]	@ (800e8f8 <_dtoa_r+0xb80>)
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e6ee:	f7ff bb5a 	b.w	800dda6 <_dtoa_r+0x2e>
 800e6f2:	692a      	ldr	r2, [r5, #16]
 800e6f4:	3202      	adds	r2, #2
 800e6f6:	0092      	lsls	r2, r2, #2
 800e6f8:	f105 010c 	add.w	r1, r5, #12
 800e6fc:	300c      	adds	r0, #12
 800e6fe:	f7ff fa78 	bl	800dbf2 <memcpy>
 800e702:	2201      	movs	r2, #1
 800e704:	4631      	mov	r1, r6
 800e706:	4658      	mov	r0, fp
 800e708:	f000 ff9e 	bl	800f648 <__lshift>
 800e70c:	f10a 0301 	add.w	r3, sl, #1
 800e710:	9307      	str	r3, [sp, #28]
 800e712:	9b00      	ldr	r3, [sp, #0]
 800e714:	4453      	add	r3, sl
 800e716:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e718:	9b02      	ldr	r3, [sp, #8]
 800e71a:	f003 0301 	and.w	r3, r3, #1
 800e71e:	462f      	mov	r7, r5
 800e720:	930a      	str	r3, [sp, #40]	@ 0x28
 800e722:	4605      	mov	r5, r0
 800e724:	9b07      	ldr	r3, [sp, #28]
 800e726:	4621      	mov	r1, r4
 800e728:	3b01      	subs	r3, #1
 800e72a:	4648      	mov	r0, r9
 800e72c:	9300      	str	r3, [sp, #0]
 800e72e:	f7ff fa9b 	bl	800dc68 <quorem>
 800e732:	4639      	mov	r1, r7
 800e734:	9002      	str	r0, [sp, #8]
 800e736:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e73a:	4648      	mov	r0, r9
 800e73c:	f000 fff0 	bl	800f720 <__mcmp>
 800e740:	462a      	mov	r2, r5
 800e742:	9008      	str	r0, [sp, #32]
 800e744:	4621      	mov	r1, r4
 800e746:	4658      	mov	r0, fp
 800e748:	f001 f806 	bl	800f758 <__mdiff>
 800e74c:	68c2      	ldr	r2, [r0, #12]
 800e74e:	4606      	mov	r6, r0
 800e750:	bb02      	cbnz	r2, 800e794 <_dtoa_r+0xa1c>
 800e752:	4601      	mov	r1, r0
 800e754:	4648      	mov	r0, r9
 800e756:	f000 ffe3 	bl	800f720 <__mcmp>
 800e75a:	4602      	mov	r2, r0
 800e75c:	4631      	mov	r1, r6
 800e75e:	4658      	mov	r0, fp
 800e760:	920e      	str	r2, [sp, #56]	@ 0x38
 800e762:	f000 fd59 	bl	800f218 <_Bfree>
 800e766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e768:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e76a:	9e07      	ldr	r6, [sp, #28]
 800e76c:	ea43 0102 	orr.w	r1, r3, r2
 800e770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e772:	4319      	orrs	r1, r3
 800e774:	d110      	bne.n	800e798 <_dtoa_r+0xa20>
 800e776:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e77a:	d029      	beq.n	800e7d0 <_dtoa_r+0xa58>
 800e77c:	9b08      	ldr	r3, [sp, #32]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	dd02      	ble.n	800e788 <_dtoa_r+0xa10>
 800e782:	9b02      	ldr	r3, [sp, #8]
 800e784:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e788:	9b00      	ldr	r3, [sp, #0]
 800e78a:	f883 8000 	strb.w	r8, [r3]
 800e78e:	e63f      	b.n	800e410 <_dtoa_r+0x698>
 800e790:	4628      	mov	r0, r5
 800e792:	e7bb      	b.n	800e70c <_dtoa_r+0x994>
 800e794:	2201      	movs	r2, #1
 800e796:	e7e1      	b.n	800e75c <_dtoa_r+0x9e4>
 800e798:	9b08      	ldr	r3, [sp, #32]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	db04      	blt.n	800e7a8 <_dtoa_r+0xa30>
 800e79e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e7a0:	430b      	orrs	r3, r1
 800e7a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e7a4:	430b      	orrs	r3, r1
 800e7a6:	d120      	bne.n	800e7ea <_dtoa_r+0xa72>
 800e7a8:	2a00      	cmp	r2, #0
 800e7aa:	dded      	ble.n	800e788 <_dtoa_r+0xa10>
 800e7ac:	4649      	mov	r1, r9
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	4658      	mov	r0, fp
 800e7b2:	f000 ff49 	bl	800f648 <__lshift>
 800e7b6:	4621      	mov	r1, r4
 800e7b8:	4681      	mov	r9, r0
 800e7ba:	f000 ffb1 	bl	800f720 <__mcmp>
 800e7be:	2800      	cmp	r0, #0
 800e7c0:	dc03      	bgt.n	800e7ca <_dtoa_r+0xa52>
 800e7c2:	d1e1      	bne.n	800e788 <_dtoa_r+0xa10>
 800e7c4:	f018 0f01 	tst.w	r8, #1
 800e7c8:	d0de      	beq.n	800e788 <_dtoa_r+0xa10>
 800e7ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e7ce:	d1d8      	bne.n	800e782 <_dtoa_r+0xa0a>
 800e7d0:	9a00      	ldr	r2, [sp, #0]
 800e7d2:	2339      	movs	r3, #57	@ 0x39
 800e7d4:	7013      	strb	r3, [r2, #0]
 800e7d6:	4633      	mov	r3, r6
 800e7d8:	461e      	mov	r6, r3
 800e7da:	3b01      	subs	r3, #1
 800e7dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e7e0:	2a39      	cmp	r2, #57	@ 0x39
 800e7e2:	d052      	beq.n	800e88a <_dtoa_r+0xb12>
 800e7e4:	3201      	adds	r2, #1
 800e7e6:	701a      	strb	r2, [r3, #0]
 800e7e8:	e612      	b.n	800e410 <_dtoa_r+0x698>
 800e7ea:	2a00      	cmp	r2, #0
 800e7ec:	dd07      	ble.n	800e7fe <_dtoa_r+0xa86>
 800e7ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e7f2:	d0ed      	beq.n	800e7d0 <_dtoa_r+0xa58>
 800e7f4:	9a00      	ldr	r2, [sp, #0]
 800e7f6:	f108 0301 	add.w	r3, r8, #1
 800e7fa:	7013      	strb	r3, [r2, #0]
 800e7fc:	e608      	b.n	800e410 <_dtoa_r+0x698>
 800e7fe:	9b07      	ldr	r3, [sp, #28]
 800e800:	9a07      	ldr	r2, [sp, #28]
 800e802:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e808:	4293      	cmp	r3, r2
 800e80a:	d028      	beq.n	800e85e <_dtoa_r+0xae6>
 800e80c:	4649      	mov	r1, r9
 800e80e:	2300      	movs	r3, #0
 800e810:	220a      	movs	r2, #10
 800e812:	4658      	mov	r0, fp
 800e814:	f000 fd22 	bl	800f25c <__multadd>
 800e818:	42af      	cmp	r7, r5
 800e81a:	4681      	mov	r9, r0
 800e81c:	f04f 0300 	mov.w	r3, #0
 800e820:	f04f 020a 	mov.w	r2, #10
 800e824:	4639      	mov	r1, r7
 800e826:	4658      	mov	r0, fp
 800e828:	d107      	bne.n	800e83a <_dtoa_r+0xac2>
 800e82a:	f000 fd17 	bl	800f25c <__multadd>
 800e82e:	4607      	mov	r7, r0
 800e830:	4605      	mov	r5, r0
 800e832:	9b07      	ldr	r3, [sp, #28]
 800e834:	3301      	adds	r3, #1
 800e836:	9307      	str	r3, [sp, #28]
 800e838:	e774      	b.n	800e724 <_dtoa_r+0x9ac>
 800e83a:	f000 fd0f 	bl	800f25c <__multadd>
 800e83e:	4629      	mov	r1, r5
 800e840:	4607      	mov	r7, r0
 800e842:	2300      	movs	r3, #0
 800e844:	220a      	movs	r2, #10
 800e846:	4658      	mov	r0, fp
 800e848:	f000 fd08 	bl	800f25c <__multadd>
 800e84c:	4605      	mov	r5, r0
 800e84e:	e7f0      	b.n	800e832 <_dtoa_r+0xaba>
 800e850:	9b00      	ldr	r3, [sp, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	bfcc      	ite	gt
 800e856:	461e      	movgt	r6, r3
 800e858:	2601      	movle	r6, #1
 800e85a:	4456      	add	r6, sl
 800e85c:	2700      	movs	r7, #0
 800e85e:	4649      	mov	r1, r9
 800e860:	2201      	movs	r2, #1
 800e862:	4658      	mov	r0, fp
 800e864:	f000 fef0 	bl	800f648 <__lshift>
 800e868:	4621      	mov	r1, r4
 800e86a:	4681      	mov	r9, r0
 800e86c:	f000 ff58 	bl	800f720 <__mcmp>
 800e870:	2800      	cmp	r0, #0
 800e872:	dcb0      	bgt.n	800e7d6 <_dtoa_r+0xa5e>
 800e874:	d102      	bne.n	800e87c <_dtoa_r+0xb04>
 800e876:	f018 0f01 	tst.w	r8, #1
 800e87a:	d1ac      	bne.n	800e7d6 <_dtoa_r+0xa5e>
 800e87c:	4633      	mov	r3, r6
 800e87e:	461e      	mov	r6, r3
 800e880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e884:	2a30      	cmp	r2, #48	@ 0x30
 800e886:	d0fa      	beq.n	800e87e <_dtoa_r+0xb06>
 800e888:	e5c2      	b.n	800e410 <_dtoa_r+0x698>
 800e88a:	459a      	cmp	sl, r3
 800e88c:	d1a4      	bne.n	800e7d8 <_dtoa_r+0xa60>
 800e88e:	9b04      	ldr	r3, [sp, #16]
 800e890:	3301      	adds	r3, #1
 800e892:	9304      	str	r3, [sp, #16]
 800e894:	2331      	movs	r3, #49	@ 0x31
 800e896:	f88a 3000 	strb.w	r3, [sl]
 800e89a:	e5b9      	b.n	800e410 <_dtoa_r+0x698>
 800e89c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e89e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e8fc <_dtoa_r+0xb84>
 800e8a2:	b11b      	cbz	r3, 800e8ac <_dtoa_r+0xb34>
 800e8a4:	f10a 0308 	add.w	r3, sl, #8
 800e8a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e8aa:	6013      	str	r3, [r2, #0]
 800e8ac:	4650      	mov	r0, sl
 800e8ae:	b019      	add	sp, #100	@ 0x64
 800e8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	f77f ae37 	ble.w	800e52a <_dtoa_r+0x7b2>
 800e8bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8be:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8c0:	2001      	movs	r0, #1
 800e8c2:	e655      	b.n	800e570 <_dtoa_r+0x7f8>
 800e8c4:	9b00      	ldr	r3, [sp, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	f77f aed6 	ble.w	800e678 <_dtoa_r+0x900>
 800e8cc:	4656      	mov	r6, sl
 800e8ce:	4621      	mov	r1, r4
 800e8d0:	4648      	mov	r0, r9
 800e8d2:	f7ff f9c9 	bl	800dc68 <quorem>
 800e8d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e8da:	f806 8b01 	strb.w	r8, [r6], #1
 800e8de:	9b00      	ldr	r3, [sp, #0]
 800e8e0:	eba6 020a 	sub.w	r2, r6, sl
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	ddb3      	ble.n	800e850 <_dtoa_r+0xad8>
 800e8e8:	4649      	mov	r1, r9
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	220a      	movs	r2, #10
 800e8ee:	4658      	mov	r0, fp
 800e8f0:	f000 fcb4 	bl	800f25c <__multadd>
 800e8f4:	4681      	mov	r9, r0
 800e8f6:	e7ea      	b.n	800e8ce <_dtoa_r+0xb56>
 800e8f8:	08010d33 	.word	0x08010d33
 800e8fc:	08010cce 	.word	0x08010cce

0800e900 <_free_r>:
 800e900:	b538      	push	{r3, r4, r5, lr}
 800e902:	4605      	mov	r5, r0
 800e904:	2900      	cmp	r1, #0
 800e906:	d041      	beq.n	800e98c <_free_r+0x8c>
 800e908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e90c:	1f0c      	subs	r4, r1, #4
 800e90e:	2b00      	cmp	r3, #0
 800e910:	bfb8      	it	lt
 800e912:	18e4      	addlt	r4, r4, r3
 800e914:	f000 fc34 	bl	800f180 <__malloc_lock>
 800e918:	4a1d      	ldr	r2, [pc, #116]	@ (800e990 <_free_r+0x90>)
 800e91a:	6813      	ldr	r3, [r2, #0]
 800e91c:	b933      	cbnz	r3, 800e92c <_free_r+0x2c>
 800e91e:	6063      	str	r3, [r4, #4]
 800e920:	6014      	str	r4, [r2, #0]
 800e922:	4628      	mov	r0, r5
 800e924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e928:	f000 bc30 	b.w	800f18c <__malloc_unlock>
 800e92c:	42a3      	cmp	r3, r4
 800e92e:	d908      	bls.n	800e942 <_free_r+0x42>
 800e930:	6820      	ldr	r0, [r4, #0]
 800e932:	1821      	adds	r1, r4, r0
 800e934:	428b      	cmp	r3, r1
 800e936:	bf01      	itttt	eq
 800e938:	6819      	ldreq	r1, [r3, #0]
 800e93a:	685b      	ldreq	r3, [r3, #4]
 800e93c:	1809      	addeq	r1, r1, r0
 800e93e:	6021      	streq	r1, [r4, #0]
 800e940:	e7ed      	b.n	800e91e <_free_r+0x1e>
 800e942:	461a      	mov	r2, r3
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	b10b      	cbz	r3, 800e94c <_free_r+0x4c>
 800e948:	42a3      	cmp	r3, r4
 800e94a:	d9fa      	bls.n	800e942 <_free_r+0x42>
 800e94c:	6811      	ldr	r1, [r2, #0]
 800e94e:	1850      	adds	r0, r2, r1
 800e950:	42a0      	cmp	r0, r4
 800e952:	d10b      	bne.n	800e96c <_free_r+0x6c>
 800e954:	6820      	ldr	r0, [r4, #0]
 800e956:	4401      	add	r1, r0
 800e958:	1850      	adds	r0, r2, r1
 800e95a:	4283      	cmp	r3, r0
 800e95c:	6011      	str	r1, [r2, #0]
 800e95e:	d1e0      	bne.n	800e922 <_free_r+0x22>
 800e960:	6818      	ldr	r0, [r3, #0]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	6053      	str	r3, [r2, #4]
 800e966:	4408      	add	r0, r1
 800e968:	6010      	str	r0, [r2, #0]
 800e96a:	e7da      	b.n	800e922 <_free_r+0x22>
 800e96c:	d902      	bls.n	800e974 <_free_r+0x74>
 800e96e:	230c      	movs	r3, #12
 800e970:	602b      	str	r3, [r5, #0]
 800e972:	e7d6      	b.n	800e922 <_free_r+0x22>
 800e974:	6820      	ldr	r0, [r4, #0]
 800e976:	1821      	adds	r1, r4, r0
 800e978:	428b      	cmp	r3, r1
 800e97a:	bf04      	itt	eq
 800e97c:	6819      	ldreq	r1, [r3, #0]
 800e97e:	685b      	ldreq	r3, [r3, #4]
 800e980:	6063      	str	r3, [r4, #4]
 800e982:	bf04      	itt	eq
 800e984:	1809      	addeq	r1, r1, r0
 800e986:	6021      	streq	r1, [r4, #0]
 800e988:	6054      	str	r4, [r2, #4]
 800e98a:	e7ca      	b.n	800e922 <_free_r+0x22>
 800e98c:	bd38      	pop	{r3, r4, r5, pc}
 800e98e:	bf00      	nop
 800e990:	200015d8 	.word	0x200015d8

0800e994 <rshift>:
 800e994:	6903      	ldr	r3, [r0, #16]
 800e996:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e99a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e99e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e9a2:	f100 0414 	add.w	r4, r0, #20
 800e9a6:	dd45      	ble.n	800ea34 <rshift+0xa0>
 800e9a8:	f011 011f 	ands.w	r1, r1, #31
 800e9ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e9b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e9b4:	d10c      	bne.n	800e9d0 <rshift+0x3c>
 800e9b6:	f100 0710 	add.w	r7, r0, #16
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	42b1      	cmp	r1, r6
 800e9be:	d334      	bcc.n	800ea2a <rshift+0x96>
 800e9c0:	1a9b      	subs	r3, r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	1eea      	subs	r2, r5, #3
 800e9c6:	4296      	cmp	r6, r2
 800e9c8:	bf38      	it	cc
 800e9ca:	2300      	movcc	r3, #0
 800e9cc:	4423      	add	r3, r4
 800e9ce:	e015      	b.n	800e9fc <rshift+0x68>
 800e9d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e9d4:	f1c1 0820 	rsb	r8, r1, #32
 800e9d8:	40cf      	lsrs	r7, r1
 800e9da:	f105 0e04 	add.w	lr, r5, #4
 800e9de:	46a1      	mov	r9, r4
 800e9e0:	4576      	cmp	r6, lr
 800e9e2:	46f4      	mov	ip, lr
 800e9e4:	d815      	bhi.n	800ea12 <rshift+0x7e>
 800e9e6:	1a9a      	subs	r2, r3, r2
 800e9e8:	0092      	lsls	r2, r2, #2
 800e9ea:	3a04      	subs	r2, #4
 800e9ec:	3501      	adds	r5, #1
 800e9ee:	42ae      	cmp	r6, r5
 800e9f0:	bf38      	it	cc
 800e9f2:	2200      	movcc	r2, #0
 800e9f4:	18a3      	adds	r3, r4, r2
 800e9f6:	50a7      	str	r7, [r4, r2]
 800e9f8:	b107      	cbz	r7, 800e9fc <rshift+0x68>
 800e9fa:	3304      	adds	r3, #4
 800e9fc:	1b1a      	subs	r2, r3, r4
 800e9fe:	42a3      	cmp	r3, r4
 800ea00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ea04:	bf08      	it	eq
 800ea06:	2300      	moveq	r3, #0
 800ea08:	6102      	str	r2, [r0, #16]
 800ea0a:	bf08      	it	eq
 800ea0c:	6143      	streq	r3, [r0, #20]
 800ea0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea12:	f8dc c000 	ldr.w	ip, [ip]
 800ea16:	fa0c fc08 	lsl.w	ip, ip, r8
 800ea1a:	ea4c 0707 	orr.w	r7, ip, r7
 800ea1e:	f849 7b04 	str.w	r7, [r9], #4
 800ea22:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea26:	40cf      	lsrs	r7, r1
 800ea28:	e7da      	b.n	800e9e0 <rshift+0x4c>
 800ea2a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea2e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ea32:	e7c3      	b.n	800e9bc <rshift+0x28>
 800ea34:	4623      	mov	r3, r4
 800ea36:	e7e1      	b.n	800e9fc <rshift+0x68>

0800ea38 <__hexdig_fun>:
 800ea38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ea3c:	2b09      	cmp	r3, #9
 800ea3e:	d802      	bhi.n	800ea46 <__hexdig_fun+0xe>
 800ea40:	3820      	subs	r0, #32
 800ea42:	b2c0      	uxtb	r0, r0
 800ea44:	4770      	bx	lr
 800ea46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ea4a:	2b05      	cmp	r3, #5
 800ea4c:	d801      	bhi.n	800ea52 <__hexdig_fun+0x1a>
 800ea4e:	3847      	subs	r0, #71	@ 0x47
 800ea50:	e7f7      	b.n	800ea42 <__hexdig_fun+0xa>
 800ea52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ea56:	2b05      	cmp	r3, #5
 800ea58:	d801      	bhi.n	800ea5e <__hexdig_fun+0x26>
 800ea5a:	3827      	subs	r0, #39	@ 0x27
 800ea5c:	e7f1      	b.n	800ea42 <__hexdig_fun+0xa>
 800ea5e:	2000      	movs	r0, #0
 800ea60:	4770      	bx	lr
	...

0800ea64 <__gethex>:
 800ea64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea68:	b085      	sub	sp, #20
 800ea6a:	468a      	mov	sl, r1
 800ea6c:	9302      	str	r3, [sp, #8]
 800ea6e:	680b      	ldr	r3, [r1, #0]
 800ea70:	9001      	str	r0, [sp, #4]
 800ea72:	4690      	mov	r8, r2
 800ea74:	1c9c      	adds	r4, r3, #2
 800ea76:	46a1      	mov	r9, r4
 800ea78:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ea7c:	2830      	cmp	r0, #48	@ 0x30
 800ea7e:	d0fa      	beq.n	800ea76 <__gethex+0x12>
 800ea80:	eba9 0303 	sub.w	r3, r9, r3
 800ea84:	f1a3 0b02 	sub.w	fp, r3, #2
 800ea88:	f7ff ffd6 	bl	800ea38 <__hexdig_fun>
 800ea8c:	4605      	mov	r5, r0
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	d168      	bne.n	800eb64 <__gethex+0x100>
 800ea92:	49a0      	ldr	r1, [pc, #640]	@ (800ed14 <__gethex+0x2b0>)
 800ea94:	2201      	movs	r2, #1
 800ea96:	4648      	mov	r0, r9
 800ea98:	f7fe ffc5 	bl	800da26 <strncmp>
 800ea9c:	4607      	mov	r7, r0
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d167      	bne.n	800eb72 <__gethex+0x10e>
 800eaa2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eaa6:	4626      	mov	r6, r4
 800eaa8:	f7ff ffc6 	bl	800ea38 <__hexdig_fun>
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d062      	beq.n	800eb76 <__gethex+0x112>
 800eab0:	4623      	mov	r3, r4
 800eab2:	7818      	ldrb	r0, [r3, #0]
 800eab4:	2830      	cmp	r0, #48	@ 0x30
 800eab6:	4699      	mov	r9, r3
 800eab8:	f103 0301 	add.w	r3, r3, #1
 800eabc:	d0f9      	beq.n	800eab2 <__gethex+0x4e>
 800eabe:	f7ff ffbb 	bl	800ea38 <__hexdig_fun>
 800eac2:	fab0 f580 	clz	r5, r0
 800eac6:	096d      	lsrs	r5, r5, #5
 800eac8:	f04f 0b01 	mov.w	fp, #1
 800eacc:	464a      	mov	r2, r9
 800eace:	4616      	mov	r6, r2
 800ead0:	3201      	adds	r2, #1
 800ead2:	7830      	ldrb	r0, [r6, #0]
 800ead4:	f7ff ffb0 	bl	800ea38 <__hexdig_fun>
 800ead8:	2800      	cmp	r0, #0
 800eada:	d1f8      	bne.n	800eace <__gethex+0x6a>
 800eadc:	498d      	ldr	r1, [pc, #564]	@ (800ed14 <__gethex+0x2b0>)
 800eade:	2201      	movs	r2, #1
 800eae0:	4630      	mov	r0, r6
 800eae2:	f7fe ffa0 	bl	800da26 <strncmp>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d13f      	bne.n	800eb6a <__gethex+0x106>
 800eaea:	b944      	cbnz	r4, 800eafe <__gethex+0x9a>
 800eaec:	1c74      	adds	r4, r6, #1
 800eaee:	4622      	mov	r2, r4
 800eaf0:	4616      	mov	r6, r2
 800eaf2:	3201      	adds	r2, #1
 800eaf4:	7830      	ldrb	r0, [r6, #0]
 800eaf6:	f7ff ff9f 	bl	800ea38 <__hexdig_fun>
 800eafa:	2800      	cmp	r0, #0
 800eafc:	d1f8      	bne.n	800eaf0 <__gethex+0x8c>
 800eafe:	1ba4      	subs	r4, r4, r6
 800eb00:	00a7      	lsls	r7, r4, #2
 800eb02:	7833      	ldrb	r3, [r6, #0]
 800eb04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eb08:	2b50      	cmp	r3, #80	@ 0x50
 800eb0a:	d13e      	bne.n	800eb8a <__gethex+0x126>
 800eb0c:	7873      	ldrb	r3, [r6, #1]
 800eb0e:	2b2b      	cmp	r3, #43	@ 0x2b
 800eb10:	d033      	beq.n	800eb7a <__gethex+0x116>
 800eb12:	2b2d      	cmp	r3, #45	@ 0x2d
 800eb14:	d034      	beq.n	800eb80 <__gethex+0x11c>
 800eb16:	1c71      	adds	r1, r6, #1
 800eb18:	2400      	movs	r4, #0
 800eb1a:	7808      	ldrb	r0, [r1, #0]
 800eb1c:	f7ff ff8c 	bl	800ea38 <__hexdig_fun>
 800eb20:	1e43      	subs	r3, r0, #1
 800eb22:	b2db      	uxtb	r3, r3
 800eb24:	2b18      	cmp	r3, #24
 800eb26:	d830      	bhi.n	800eb8a <__gethex+0x126>
 800eb28:	f1a0 0210 	sub.w	r2, r0, #16
 800eb2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eb30:	f7ff ff82 	bl	800ea38 <__hexdig_fun>
 800eb34:	f100 3cff 	add.w	ip, r0, #4294967295
 800eb38:	fa5f fc8c 	uxtb.w	ip, ip
 800eb3c:	f1bc 0f18 	cmp.w	ip, #24
 800eb40:	f04f 030a 	mov.w	r3, #10
 800eb44:	d91e      	bls.n	800eb84 <__gethex+0x120>
 800eb46:	b104      	cbz	r4, 800eb4a <__gethex+0xe6>
 800eb48:	4252      	negs	r2, r2
 800eb4a:	4417      	add	r7, r2
 800eb4c:	f8ca 1000 	str.w	r1, [sl]
 800eb50:	b1ed      	cbz	r5, 800eb8e <__gethex+0x12a>
 800eb52:	f1bb 0f00 	cmp.w	fp, #0
 800eb56:	bf0c      	ite	eq
 800eb58:	2506      	moveq	r5, #6
 800eb5a:	2500      	movne	r5, #0
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	b005      	add	sp, #20
 800eb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb64:	2500      	movs	r5, #0
 800eb66:	462c      	mov	r4, r5
 800eb68:	e7b0      	b.n	800eacc <__gethex+0x68>
 800eb6a:	2c00      	cmp	r4, #0
 800eb6c:	d1c7      	bne.n	800eafe <__gethex+0x9a>
 800eb6e:	4627      	mov	r7, r4
 800eb70:	e7c7      	b.n	800eb02 <__gethex+0x9e>
 800eb72:	464e      	mov	r6, r9
 800eb74:	462f      	mov	r7, r5
 800eb76:	2501      	movs	r5, #1
 800eb78:	e7c3      	b.n	800eb02 <__gethex+0x9e>
 800eb7a:	2400      	movs	r4, #0
 800eb7c:	1cb1      	adds	r1, r6, #2
 800eb7e:	e7cc      	b.n	800eb1a <__gethex+0xb6>
 800eb80:	2401      	movs	r4, #1
 800eb82:	e7fb      	b.n	800eb7c <__gethex+0x118>
 800eb84:	fb03 0002 	mla	r0, r3, r2, r0
 800eb88:	e7ce      	b.n	800eb28 <__gethex+0xc4>
 800eb8a:	4631      	mov	r1, r6
 800eb8c:	e7de      	b.n	800eb4c <__gethex+0xe8>
 800eb8e:	eba6 0309 	sub.w	r3, r6, r9
 800eb92:	3b01      	subs	r3, #1
 800eb94:	4629      	mov	r1, r5
 800eb96:	2b07      	cmp	r3, #7
 800eb98:	dc0a      	bgt.n	800ebb0 <__gethex+0x14c>
 800eb9a:	9801      	ldr	r0, [sp, #4]
 800eb9c:	f000 fafc 	bl	800f198 <_Balloc>
 800eba0:	4604      	mov	r4, r0
 800eba2:	b940      	cbnz	r0, 800ebb6 <__gethex+0x152>
 800eba4:	4b5c      	ldr	r3, [pc, #368]	@ (800ed18 <__gethex+0x2b4>)
 800eba6:	4602      	mov	r2, r0
 800eba8:	21e4      	movs	r1, #228	@ 0xe4
 800ebaa:	485c      	ldr	r0, [pc, #368]	@ (800ed1c <__gethex+0x2b8>)
 800ebac:	f7ff f83e 	bl	800dc2c <__assert_func>
 800ebb0:	3101      	adds	r1, #1
 800ebb2:	105b      	asrs	r3, r3, #1
 800ebb4:	e7ef      	b.n	800eb96 <__gethex+0x132>
 800ebb6:	f100 0a14 	add.w	sl, r0, #20
 800ebba:	2300      	movs	r3, #0
 800ebbc:	4655      	mov	r5, sl
 800ebbe:	469b      	mov	fp, r3
 800ebc0:	45b1      	cmp	r9, r6
 800ebc2:	d337      	bcc.n	800ec34 <__gethex+0x1d0>
 800ebc4:	f845 bb04 	str.w	fp, [r5], #4
 800ebc8:	eba5 050a 	sub.w	r5, r5, sl
 800ebcc:	10ad      	asrs	r5, r5, #2
 800ebce:	6125      	str	r5, [r4, #16]
 800ebd0:	4658      	mov	r0, fp
 800ebd2:	f000 fbd3 	bl	800f37c <__hi0bits>
 800ebd6:	016d      	lsls	r5, r5, #5
 800ebd8:	f8d8 6000 	ldr.w	r6, [r8]
 800ebdc:	1a2d      	subs	r5, r5, r0
 800ebde:	42b5      	cmp	r5, r6
 800ebe0:	dd54      	ble.n	800ec8c <__gethex+0x228>
 800ebe2:	1bad      	subs	r5, r5, r6
 800ebe4:	4629      	mov	r1, r5
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f000 ff67 	bl	800faba <__any_on>
 800ebec:	4681      	mov	r9, r0
 800ebee:	b178      	cbz	r0, 800ec10 <__gethex+0x1ac>
 800ebf0:	1e6b      	subs	r3, r5, #1
 800ebf2:	1159      	asrs	r1, r3, #5
 800ebf4:	f003 021f 	and.w	r2, r3, #31
 800ebf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ebfc:	f04f 0901 	mov.w	r9, #1
 800ec00:	fa09 f202 	lsl.w	r2, r9, r2
 800ec04:	420a      	tst	r2, r1
 800ec06:	d003      	beq.n	800ec10 <__gethex+0x1ac>
 800ec08:	454b      	cmp	r3, r9
 800ec0a:	dc36      	bgt.n	800ec7a <__gethex+0x216>
 800ec0c:	f04f 0902 	mov.w	r9, #2
 800ec10:	4629      	mov	r1, r5
 800ec12:	4620      	mov	r0, r4
 800ec14:	f7ff febe 	bl	800e994 <rshift>
 800ec18:	442f      	add	r7, r5
 800ec1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec1e:	42bb      	cmp	r3, r7
 800ec20:	da42      	bge.n	800eca8 <__gethex+0x244>
 800ec22:	9801      	ldr	r0, [sp, #4]
 800ec24:	4621      	mov	r1, r4
 800ec26:	f000 faf7 	bl	800f218 <_Bfree>
 800ec2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	6013      	str	r3, [r2, #0]
 800ec30:	25a3      	movs	r5, #163	@ 0xa3
 800ec32:	e793      	b.n	800eb5c <__gethex+0xf8>
 800ec34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ec38:	2a2e      	cmp	r2, #46	@ 0x2e
 800ec3a:	d012      	beq.n	800ec62 <__gethex+0x1fe>
 800ec3c:	2b20      	cmp	r3, #32
 800ec3e:	d104      	bne.n	800ec4a <__gethex+0x1e6>
 800ec40:	f845 bb04 	str.w	fp, [r5], #4
 800ec44:	f04f 0b00 	mov.w	fp, #0
 800ec48:	465b      	mov	r3, fp
 800ec4a:	7830      	ldrb	r0, [r6, #0]
 800ec4c:	9303      	str	r3, [sp, #12]
 800ec4e:	f7ff fef3 	bl	800ea38 <__hexdig_fun>
 800ec52:	9b03      	ldr	r3, [sp, #12]
 800ec54:	f000 000f 	and.w	r0, r0, #15
 800ec58:	4098      	lsls	r0, r3
 800ec5a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ec5e:	3304      	adds	r3, #4
 800ec60:	e7ae      	b.n	800ebc0 <__gethex+0x15c>
 800ec62:	45b1      	cmp	r9, r6
 800ec64:	d8ea      	bhi.n	800ec3c <__gethex+0x1d8>
 800ec66:	492b      	ldr	r1, [pc, #172]	@ (800ed14 <__gethex+0x2b0>)
 800ec68:	9303      	str	r3, [sp, #12]
 800ec6a:	2201      	movs	r2, #1
 800ec6c:	4630      	mov	r0, r6
 800ec6e:	f7fe feda 	bl	800da26 <strncmp>
 800ec72:	9b03      	ldr	r3, [sp, #12]
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d1e1      	bne.n	800ec3c <__gethex+0x1d8>
 800ec78:	e7a2      	b.n	800ebc0 <__gethex+0x15c>
 800ec7a:	1ea9      	subs	r1, r5, #2
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	f000 ff1c 	bl	800faba <__any_on>
 800ec82:	2800      	cmp	r0, #0
 800ec84:	d0c2      	beq.n	800ec0c <__gethex+0x1a8>
 800ec86:	f04f 0903 	mov.w	r9, #3
 800ec8a:	e7c1      	b.n	800ec10 <__gethex+0x1ac>
 800ec8c:	da09      	bge.n	800eca2 <__gethex+0x23e>
 800ec8e:	1b75      	subs	r5, r6, r5
 800ec90:	4621      	mov	r1, r4
 800ec92:	9801      	ldr	r0, [sp, #4]
 800ec94:	462a      	mov	r2, r5
 800ec96:	f000 fcd7 	bl	800f648 <__lshift>
 800ec9a:	1b7f      	subs	r7, r7, r5
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	f100 0a14 	add.w	sl, r0, #20
 800eca2:	f04f 0900 	mov.w	r9, #0
 800eca6:	e7b8      	b.n	800ec1a <__gethex+0x1b6>
 800eca8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ecac:	42bd      	cmp	r5, r7
 800ecae:	dd6f      	ble.n	800ed90 <__gethex+0x32c>
 800ecb0:	1bed      	subs	r5, r5, r7
 800ecb2:	42ae      	cmp	r6, r5
 800ecb4:	dc34      	bgt.n	800ed20 <__gethex+0x2bc>
 800ecb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ecba:	2b02      	cmp	r3, #2
 800ecbc:	d022      	beq.n	800ed04 <__gethex+0x2a0>
 800ecbe:	2b03      	cmp	r3, #3
 800ecc0:	d024      	beq.n	800ed0c <__gethex+0x2a8>
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d115      	bne.n	800ecf2 <__gethex+0x28e>
 800ecc6:	42ae      	cmp	r6, r5
 800ecc8:	d113      	bne.n	800ecf2 <__gethex+0x28e>
 800ecca:	2e01      	cmp	r6, #1
 800eccc:	d10b      	bne.n	800ece6 <__gethex+0x282>
 800ecce:	9a02      	ldr	r2, [sp, #8]
 800ecd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ecd4:	6013      	str	r3, [r2, #0]
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	6123      	str	r3, [r4, #16]
 800ecda:	f8ca 3000 	str.w	r3, [sl]
 800ecde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ece0:	2562      	movs	r5, #98	@ 0x62
 800ece2:	601c      	str	r4, [r3, #0]
 800ece4:	e73a      	b.n	800eb5c <__gethex+0xf8>
 800ece6:	1e71      	subs	r1, r6, #1
 800ece8:	4620      	mov	r0, r4
 800ecea:	f000 fee6 	bl	800faba <__any_on>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d1ed      	bne.n	800ecce <__gethex+0x26a>
 800ecf2:	9801      	ldr	r0, [sp, #4]
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	f000 fa8f 	bl	800f218 <_Bfree>
 800ecfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	6013      	str	r3, [r2, #0]
 800ed00:	2550      	movs	r5, #80	@ 0x50
 800ed02:	e72b      	b.n	800eb5c <__gethex+0xf8>
 800ed04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d1f3      	bne.n	800ecf2 <__gethex+0x28e>
 800ed0a:	e7e0      	b.n	800ecce <__gethex+0x26a>
 800ed0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1dd      	bne.n	800ecce <__gethex+0x26a>
 800ed12:	e7ee      	b.n	800ecf2 <__gethex+0x28e>
 800ed14:	08010b8c 	.word	0x08010b8c
 800ed18:	08010d33 	.word	0x08010d33
 800ed1c:	08010d44 	.word	0x08010d44
 800ed20:	1e6f      	subs	r7, r5, #1
 800ed22:	f1b9 0f00 	cmp.w	r9, #0
 800ed26:	d130      	bne.n	800ed8a <__gethex+0x326>
 800ed28:	b127      	cbz	r7, 800ed34 <__gethex+0x2d0>
 800ed2a:	4639      	mov	r1, r7
 800ed2c:	4620      	mov	r0, r4
 800ed2e:	f000 fec4 	bl	800faba <__any_on>
 800ed32:	4681      	mov	r9, r0
 800ed34:	117a      	asrs	r2, r7, #5
 800ed36:	2301      	movs	r3, #1
 800ed38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ed3c:	f007 071f 	and.w	r7, r7, #31
 800ed40:	40bb      	lsls	r3, r7
 800ed42:	4213      	tst	r3, r2
 800ed44:	4629      	mov	r1, r5
 800ed46:	4620      	mov	r0, r4
 800ed48:	bf18      	it	ne
 800ed4a:	f049 0902 	orrne.w	r9, r9, #2
 800ed4e:	f7ff fe21 	bl	800e994 <rshift>
 800ed52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ed56:	1b76      	subs	r6, r6, r5
 800ed58:	2502      	movs	r5, #2
 800ed5a:	f1b9 0f00 	cmp.w	r9, #0
 800ed5e:	d047      	beq.n	800edf0 <__gethex+0x38c>
 800ed60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed64:	2b02      	cmp	r3, #2
 800ed66:	d015      	beq.n	800ed94 <__gethex+0x330>
 800ed68:	2b03      	cmp	r3, #3
 800ed6a:	d017      	beq.n	800ed9c <__gethex+0x338>
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	d109      	bne.n	800ed84 <__gethex+0x320>
 800ed70:	f019 0f02 	tst.w	r9, #2
 800ed74:	d006      	beq.n	800ed84 <__gethex+0x320>
 800ed76:	f8da 3000 	ldr.w	r3, [sl]
 800ed7a:	ea49 0903 	orr.w	r9, r9, r3
 800ed7e:	f019 0f01 	tst.w	r9, #1
 800ed82:	d10e      	bne.n	800eda2 <__gethex+0x33e>
 800ed84:	f045 0510 	orr.w	r5, r5, #16
 800ed88:	e032      	b.n	800edf0 <__gethex+0x38c>
 800ed8a:	f04f 0901 	mov.w	r9, #1
 800ed8e:	e7d1      	b.n	800ed34 <__gethex+0x2d0>
 800ed90:	2501      	movs	r5, #1
 800ed92:	e7e2      	b.n	800ed5a <__gethex+0x2f6>
 800ed94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed96:	f1c3 0301 	rsb	r3, r3, #1
 800ed9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ed9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d0f0      	beq.n	800ed84 <__gethex+0x320>
 800eda2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eda6:	f104 0314 	add.w	r3, r4, #20
 800edaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800edae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800edb2:	f04f 0c00 	mov.w	ip, #0
 800edb6:	4618      	mov	r0, r3
 800edb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800edbc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800edc0:	d01b      	beq.n	800edfa <__gethex+0x396>
 800edc2:	3201      	adds	r2, #1
 800edc4:	6002      	str	r2, [r0, #0]
 800edc6:	2d02      	cmp	r5, #2
 800edc8:	f104 0314 	add.w	r3, r4, #20
 800edcc:	d13c      	bne.n	800ee48 <__gethex+0x3e4>
 800edce:	f8d8 2000 	ldr.w	r2, [r8]
 800edd2:	3a01      	subs	r2, #1
 800edd4:	42b2      	cmp	r2, r6
 800edd6:	d109      	bne.n	800edec <__gethex+0x388>
 800edd8:	1171      	asrs	r1, r6, #5
 800edda:	2201      	movs	r2, #1
 800eddc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ede0:	f006 061f 	and.w	r6, r6, #31
 800ede4:	fa02 f606 	lsl.w	r6, r2, r6
 800ede8:	421e      	tst	r6, r3
 800edea:	d13a      	bne.n	800ee62 <__gethex+0x3fe>
 800edec:	f045 0520 	orr.w	r5, r5, #32
 800edf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800edf2:	601c      	str	r4, [r3, #0]
 800edf4:	9b02      	ldr	r3, [sp, #8]
 800edf6:	601f      	str	r7, [r3, #0]
 800edf8:	e6b0      	b.n	800eb5c <__gethex+0xf8>
 800edfa:	4299      	cmp	r1, r3
 800edfc:	f843 cc04 	str.w	ip, [r3, #-4]
 800ee00:	d8d9      	bhi.n	800edb6 <__gethex+0x352>
 800ee02:	68a3      	ldr	r3, [r4, #8]
 800ee04:	459b      	cmp	fp, r3
 800ee06:	db17      	blt.n	800ee38 <__gethex+0x3d4>
 800ee08:	6861      	ldr	r1, [r4, #4]
 800ee0a:	9801      	ldr	r0, [sp, #4]
 800ee0c:	3101      	adds	r1, #1
 800ee0e:	f000 f9c3 	bl	800f198 <_Balloc>
 800ee12:	4681      	mov	r9, r0
 800ee14:	b918      	cbnz	r0, 800ee1e <__gethex+0x3ba>
 800ee16:	4b1a      	ldr	r3, [pc, #104]	@ (800ee80 <__gethex+0x41c>)
 800ee18:	4602      	mov	r2, r0
 800ee1a:	2184      	movs	r1, #132	@ 0x84
 800ee1c:	e6c5      	b.n	800ebaa <__gethex+0x146>
 800ee1e:	6922      	ldr	r2, [r4, #16]
 800ee20:	3202      	adds	r2, #2
 800ee22:	f104 010c 	add.w	r1, r4, #12
 800ee26:	0092      	lsls	r2, r2, #2
 800ee28:	300c      	adds	r0, #12
 800ee2a:	f7fe fee2 	bl	800dbf2 <memcpy>
 800ee2e:	4621      	mov	r1, r4
 800ee30:	9801      	ldr	r0, [sp, #4]
 800ee32:	f000 f9f1 	bl	800f218 <_Bfree>
 800ee36:	464c      	mov	r4, r9
 800ee38:	6923      	ldr	r3, [r4, #16]
 800ee3a:	1c5a      	adds	r2, r3, #1
 800ee3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee40:	6122      	str	r2, [r4, #16]
 800ee42:	2201      	movs	r2, #1
 800ee44:	615a      	str	r2, [r3, #20]
 800ee46:	e7be      	b.n	800edc6 <__gethex+0x362>
 800ee48:	6922      	ldr	r2, [r4, #16]
 800ee4a:	455a      	cmp	r2, fp
 800ee4c:	dd0b      	ble.n	800ee66 <__gethex+0x402>
 800ee4e:	2101      	movs	r1, #1
 800ee50:	4620      	mov	r0, r4
 800ee52:	f7ff fd9f 	bl	800e994 <rshift>
 800ee56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee5a:	3701      	adds	r7, #1
 800ee5c:	42bb      	cmp	r3, r7
 800ee5e:	f6ff aee0 	blt.w	800ec22 <__gethex+0x1be>
 800ee62:	2501      	movs	r5, #1
 800ee64:	e7c2      	b.n	800edec <__gethex+0x388>
 800ee66:	f016 061f 	ands.w	r6, r6, #31
 800ee6a:	d0fa      	beq.n	800ee62 <__gethex+0x3fe>
 800ee6c:	4453      	add	r3, sl
 800ee6e:	f1c6 0620 	rsb	r6, r6, #32
 800ee72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ee76:	f000 fa81 	bl	800f37c <__hi0bits>
 800ee7a:	42b0      	cmp	r0, r6
 800ee7c:	dbe7      	blt.n	800ee4e <__gethex+0x3ea>
 800ee7e:	e7f0      	b.n	800ee62 <__gethex+0x3fe>
 800ee80:	08010d33 	.word	0x08010d33

0800ee84 <L_shift>:
 800ee84:	f1c2 0208 	rsb	r2, r2, #8
 800ee88:	0092      	lsls	r2, r2, #2
 800ee8a:	b570      	push	{r4, r5, r6, lr}
 800ee8c:	f1c2 0620 	rsb	r6, r2, #32
 800ee90:	6843      	ldr	r3, [r0, #4]
 800ee92:	6804      	ldr	r4, [r0, #0]
 800ee94:	fa03 f506 	lsl.w	r5, r3, r6
 800ee98:	432c      	orrs	r4, r5
 800ee9a:	40d3      	lsrs	r3, r2
 800ee9c:	6004      	str	r4, [r0, #0]
 800ee9e:	f840 3f04 	str.w	r3, [r0, #4]!
 800eea2:	4288      	cmp	r0, r1
 800eea4:	d3f4      	bcc.n	800ee90 <L_shift+0xc>
 800eea6:	bd70      	pop	{r4, r5, r6, pc}

0800eea8 <__match>:
 800eea8:	b530      	push	{r4, r5, lr}
 800eeaa:	6803      	ldr	r3, [r0, #0]
 800eeac:	3301      	adds	r3, #1
 800eeae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeb2:	b914      	cbnz	r4, 800eeba <__match+0x12>
 800eeb4:	6003      	str	r3, [r0, #0]
 800eeb6:	2001      	movs	r0, #1
 800eeb8:	bd30      	pop	{r4, r5, pc}
 800eeba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eebe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800eec2:	2d19      	cmp	r5, #25
 800eec4:	bf98      	it	ls
 800eec6:	3220      	addls	r2, #32
 800eec8:	42a2      	cmp	r2, r4
 800eeca:	d0f0      	beq.n	800eeae <__match+0x6>
 800eecc:	2000      	movs	r0, #0
 800eece:	e7f3      	b.n	800eeb8 <__match+0x10>

0800eed0 <__hexnan>:
 800eed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed4:	680b      	ldr	r3, [r1, #0]
 800eed6:	6801      	ldr	r1, [r0, #0]
 800eed8:	115e      	asrs	r6, r3, #5
 800eeda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eede:	f013 031f 	ands.w	r3, r3, #31
 800eee2:	b087      	sub	sp, #28
 800eee4:	bf18      	it	ne
 800eee6:	3604      	addne	r6, #4
 800eee8:	2500      	movs	r5, #0
 800eeea:	1f37      	subs	r7, r6, #4
 800eeec:	4682      	mov	sl, r0
 800eeee:	4690      	mov	r8, r2
 800eef0:	9301      	str	r3, [sp, #4]
 800eef2:	f846 5c04 	str.w	r5, [r6, #-4]
 800eef6:	46b9      	mov	r9, r7
 800eef8:	463c      	mov	r4, r7
 800eefa:	9502      	str	r5, [sp, #8]
 800eefc:	46ab      	mov	fp, r5
 800eefe:	784a      	ldrb	r2, [r1, #1]
 800ef00:	1c4b      	adds	r3, r1, #1
 800ef02:	9303      	str	r3, [sp, #12]
 800ef04:	b342      	cbz	r2, 800ef58 <__hexnan+0x88>
 800ef06:	4610      	mov	r0, r2
 800ef08:	9105      	str	r1, [sp, #20]
 800ef0a:	9204      	str	r2, [sp, #16]
 800ef0c:	f7ff fd94 	bl	800ea38 <__hexdig_fun>
 800ef10:	2800      	cmp	r0, #0
 800ef12:	d151      	bne.n	800efb8 <__hexnan+0xe8>
 800ef14:	9a04      	ldr	r2, [sp, #16]
 800ef16:	9905      	ldr	r1, [sp, #20]
 800ef18:	2a20      	cmp	r2, #32
 800ef1a:	d818      	bhi.n	800ef4e <__hexnan+0x7e>
 800ef1c:	9b02      	ldr	r3, [sp, #8]
 800ef1e:	459b      	cmp	fp, r3
 800ef20:	dd13      	ble.n	800ef4a <__hexnan+0x7a>
 800ef22:	454c      	cmp	r4, r9
 800ef24:	d206      	bcs.n	800ef34 <__hexnan+0x64>
 800ef26:	2d07      	cmp	r5, #7
 800ef28:	dc04      	bgt.n	800ef34 <__hexnan+0x64>
 800ef2a:	462a      	mov	r2, r5
 800ef2c:	4649      	mov	r1, r9
 800ef2e:	4620      	mov	r0, r4
 800ef30:	f7ff ffa8 	bl	800ee84 <L_shift>
 800ef34:	4544      	cmp	r4, r8
 800ef36:	d952      	bls.n	800efde <__hexnan+0x10e>
 800ef38:	2300      	movs	r3, #0
 800ef3a:	f1a4 0904 	sub.w	r9, r4, #4
 800ef3e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef42:	f8cd b008 	str.w	fp, [sp, #8]
 800ef46:	464c      	mov	r4, r9
 800ef48:	461d      	mov	r5, r3
 800ef4a:	9903      	ldr	r1, [sp, #12]
 800ef4c:	e7d7      	b.n	800eefe <__hexnan+0x2e>
 800ef4e:	2a29      	cmp	r2, #41	@ 0x29
 800ef50:	d157      	bne.n	800f002 <__hexnan+0x132>
 800ef52:	3102      	adds	r1, #2
 800ef54:	f8ca 1000 	str.w	r1, [sl]
 800ef58:	f1bb 0f00 	cmp.w	fp, #0
 800ef5c:	d051      	beq.n	800f002 <__hexnan+0x132>
 800ef5e:	454c      	cmp	r4, r9
 800ef60:	d206      	bcs.n	800ef70 <__hexnan+0xa0>
 800ef62:	2d07      	cmp	r5, #7
 800ef64:	dc04      	bgt.n	800ef70 <__hexnan+0xa0>
 800ef66:	462a      	mov	r2, r5
 800ef68:	4649      	mov	r1, r9
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f7ff ff8a 	bl	800ee84 <L_shift>
 800ef70:	4544      	cmp	r4, r8
 800ef72:	d936      	bls.n	800efe2 <__hexnan+0x112>
 800ef74:	f1a8 0204 	sub.w	r2, r8, #4
 800ef78:	4623      	mov	r3, r4
 800ef7a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ef7e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ef82:	429f      	cmp	r7, r3
 800ef84:	d2f9      	bcs.n	800ef7a <__hexnan+0xaa>
 800ef86:	1b3b      	subs	r3, r7, r4
 800ef88:	f023 0303 	bic.w	r3, r3, #3
 800ef8c:	3304      	adds	r3, #4
 800ef8e:	3401      	adds	r4, #1
 800ef90:	3e03      	subs	r6, #3
 800ef92:	42b4      	cmp	r4, r6
 800ef94:	bf88      	it	hi
 800ef96:	2304      	movhi	r3, #4
 800ef98:	4443      	add	r3, r8
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f843 2b04 	str.w	r2, [r3], #4
 800efa0:	429f      	cmp	r7, r3
 800efa2:	d2fb      	bcs.n	800ef9c <__hexnan+0xcc>
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	b91b      	cbnz	r3, 800efb0 <__hexnan+0xe0>
 800efa8:	4547      	cmp	r7, r8
 800efaa:	d128      	bne.n	800effe <__hexnan+0x12e>
 800efac:	2301      	movs	r3, #1
 800efae:	603b      	str	r3, [r7, #0]
 800efb0:	2005      	movs	r0, #5
 800efb2:	b007      	add	sp, #28
 800efb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb8:	3501      	adds	r5, #1
 800efba:	2d08      	cmp	r5, #8
 800efbc:	f10b 0b01 	add.w	fp, fp, #1
 800efc0:	dd06      	ble.n	800efd0 <__hexnan+0x100>
 800efc2:	4544      	cmp	r4, r8
 800efc4:	d9c1      	bls.n	800ef4a <__hexnan+0x7a>
 800efc6:	2300      	movs	r3, #0
 800efc8:	f844 3c04 	str.w	r3, [r4, #-4]
 800efcc:	2501      	movs	r5, #1
 800efce:	3c04      	subs	r4, #4
 800efd0:	6822      	ldr	r2, [r4, #0]
 800efd2:	f000 000f 	and.w	r0, r0, #15
 800efd6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800efda:	6020      	str	r0, [r4, #0]
 800efdc:	e7b5      	b.n	800ef4a <__hexnan+0x7a>
 800efde:	2508      	movs	r5, #8
 800efe0:	e7b3      	b.n	800ef4a <__hexnan+0x7a>
 800efe2:	9b01      	ldr	r3, [sp, #4]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d0dd      	beq.n	800efa4 <__hexnan+0xd4>
 800efe8:	f1c3 0320 	rsb	r3, r3, #32
 800efec:	f04f 32ff 	mov.w	r2, #4294967295
 800eff0:	40da      	lsrs	r2, r3
 800eff2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800eff6:	4013      	ands	r3, r2
 800eff8:	f846 3c04 	str.w	r3, [r6, #-4]
 800effc:	e7d2      	b.n	800efa4 <__hexnan+0xd4>
 800effe:	3f04      	subs	r7, #4
 800f000:	e7d0      	b.n	800efa4 <__hexnan+0xd4>
 800f002:	2004      	movs	r0, #4
 800f004:	e7d5      	b.n	800efb2 <__hexnan+0xe2>
	...

0800f008 <malloc>:
 800f008:	4b02      	ldr	r3, [pc, #8]	@ (800f014 <malloc+0xc>)
 800f00a:	4601      	mov	r1, r0
 800f00c:	6818      	ldr	r0, [r3, #0]
 800f00e:	f000 b825 	b.w	800f05c <_malloc_r>
 800f012:	bf00      	nop
 800f014:	20000198 	.word	0x20000198

0800f018 <sbrk_aligned>:
 800f018:	b570      	push	{r4, r5, r6, lr}
 800f01a:	4e0f      	ldr	r6, [pc, #60]	@ (800f058 <sbrk_aligned+0x40>)
 800f01c:	460c      	mov	r4, r1
 800f01e:	6831      	ldr	r1, [r6, #0]
 800f020:	4605      	mov	r5, r0
 800f022:	b911      	cbnz	r1, 800f02a <sbrk_aligned+0x12>
 800f024:	f001 f822 	bl	801006c <_sbrk_r>
 800f028:	6030      	str	r0, [r6, #0]
 800f02a:	4621      	mov	r1, r4
 800f02c:	4628      	mov	r0, r5
 800f02e:	f001 f81d 	bl	801006c <_sbrk_r>
 800f032:	1c43      	adds	r3, r0, #1
 800f034:	d103      	bne.n	800f03e <sbrk_aligned+0x26>
 800f036:	f04f 34ff 	mov.w	r4, #4294967295
 800f03a:	4620      	mov	r0, r4
 800f03c:	bd70      	pop	{r4, r5, r6, pc}
 800f03e:	1cc4      	adds	r4, r0, #3
 800f040:	f024 0403 	bic.w	r4, r4, #3
 800f044:	42a0      	cmp	r0, r4
 800f046:	d0f8      	beq.n	800f03a <sbrk_aligned+0x22>
 800f048:	1a21      	subs	r1, r4, r0
 800f04a:	4628      	mov	r0, r5
 800f04c:	f001 f80e 	bl	801006c <_sbrk_r>
 800f050:	3001      	adds	r0, #1
 800f052:	d1f2      	bne.n	800f03a <sbrk_aligned+0x22>
 800f054:	e7ef      	b.n	800f036 <sbrk_aligned+0x1e>
 800f056:	bf00      	nop
 800f058:	200015d4 	.word	0x200015d4

0800f05c <_malloc_r>:
 800f05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f060:	1ccd      	adds	r5, r1, #3
 800f062:	f025 0503 	bic.w	r5, r5, #3
 800f066:	3508      	adds	r5, #8
 800f068:	2d0c      	cmp	r5, #12
 800f06a:	bf38      	it	cc
 800f06c:	250c      	movcc	r5, #12
 800f06e:	2d00      	cmp	r5, #0
 800f070:	4606      	mov	r6, r0
 800f072:	db01      	blt.n	800f078 <_malloc_r+0x1c>
 800f074:	42a9      	cmp	r1, r5
 800f076:	d904      	bls.n	800f082 <_malloc_r+0x26>
 800f078:	230c      	movs	r3, #12
 800f07a:	6033      	str	r3, [r6, #0]
 800f07c:	2000      	movs	r0, #0
 800f07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f082:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f158 <_malloc_r+0xfc>
 800f086:	f000 f87b 	bl	800f180 <__malloc_lock>
 800f08a:	f8d8 3000 	ldr.w	r3, [r8]
 800f08e:	461c      	mov	r4, r3
 800f090:	bb44      	cbnz	r4, 800f0e4 <_malloc_r+0x88>
 800f092:	4629      	mov	r1, r5
 800f094:	4630      	mov	r0, r6
 800f096:	f7ff ffbf 	bl	800f018 <sbrk_aligned>
 800f09a:	1c43      	adds	r3, r0, #1
 800f09c:	4604      	mov	r4, r0
 800f09e:	d158      	bne.n	800f152 <_malloc_r+0xf6>
 800f0a0:	f8d8 4000 	ldr.w	r4, [r8]
 800f0a4:	4627      	mov	r7, r4
 800f0a6:	2f00      	cmp	r7, #0
 800f0a8:	d143      	bne.n	800f132 <_malloc_r+0xd6>
 800f0aa:	2c00      	cmp	r4, #0
 800f0ac:	d04b      	beq.n	800f146 <_malloc_r+0xea>
 800f0ae:	6823      	ldr	r3, [r4, #0]
 800f0b0:	4639      	mov	r1, r7
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	eb04 0903 	add.w	r9, r4, r3
 800f0b8:	f000 ffd8 	bl	801006c <_sbrk_r>
 800f0bc:	4581      	cmp	r9, r0
 800f0be:	d142      	bne.n	800f146 <_malloc_r+0xea>
 800f0c0:	6821      	ldr	r1, [r4, #0]
 800f0c2:	1a6d      	subs	r5, r5, r1
 800f0c4:	4629      	mov	r1, r5
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	f7ff ffa6 	bl	800f018 <sbrk_aligned>
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	d03a      	beq.n	800f146 <_malloc_r+0xea>
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	442b      	add	r3, r5
 800f0d4:	6023      	str	r3, [r4, #0]
 800f0d6:	f8d8 3000 	ldr.w	r3, [r8]
 800f0da:	685a      	ldr	r2, [r3, #4]
 800f0dc:	bb62      	cbnz	r2, 800f138 <_malloc_r+0xdc>
 800f0de:	f8c8 7000 	str.w	r7, [r8]
 800f0e2:	e00f      	b.n	800f104 <_malloc_r+0xa8>
 800f0e4:	6822      	ldr	r2, [r4, #0]
 800f0e6:	1b52      	subs	r2, r2, r5
 800f0e8:	d420      	bmi.n	800f12c <_malloc_r+0xd0>
 800f0ea:	2a0b      	cmp	r2, #11
 800f0ec:	d917      	bls.n	800f11e <_malloc_r+0xc2>
 800f0ee:	1961      	adds	r1, r4, r5
 800f0f0:	42a3      	cmp	r3, r4
 800f0f2:	6025      	str	r5, [r4, #0]
 800f0f4:	bf18      	it	ne
 800f0f6:	6059      	strne	r1, [r3, #4]
 800f0f8:	6863      	ldr	r3, [r4, #4]
 800f0fa:	bf08      	it	eq
 800f0fc:	f8c8 1000 	streq.w	r1, [r8]
 800f100:	5162      	str	r2, [r4, r5]
 800f102:	604b      	str	r3, [r1, #4]
 800f104:	4630      	mov	r0, r6
 800f106:	f000 f841 	bl	800f18c <__malloc_unlock>
 800f10a:	f104 000b 	add.w	r0, r4, #11
 800f10e:	1d23      	adds	r3, r4, #4
 800f110:	f020 0007 	bic.w	r0, r0, #7
 800f114:	1ac2      	subs	r2, r0, r3
 800f116:	bf1c      	itt	ne
 800f118:	1a1b      	subne	r3, r3, r0
 800f11a:	50a3      	strne	r3, [r4, r2]
 800f11c:	e7af      	b.n	800f07e <_malloc_r+0x22>
 800f11e:	6862      	ldr	r2, [r4, #4]
 800f120:	42a3      	cmp	r3, r4
 800f122:	bf0c      	ite	eq
 800f124:	f8c8 2000 	streq.w	r2, [r8]
 800f128:	605a      	strne	r2, [r3, #4]
 800f12a:	e7eb      	b.n	800f104 <_malloc_r+0xa8>
 800f12c:	4623      	mov	r3, r4
 800f12e:	6864      	ldr	r4, [r4, #4]
 800f130:	e7ae      	b.n	800f090 <_malloc_r+0x34>
 800f132:	463c      	mov	r4, r7
 800f134:	687f      	ldr	r7, [r7, #4]
 800f136:	e7b6      	b.n	800f0a6 <_malloc_r+0x4a>
 800f138:	461a      	mov	r2, r3
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	42a3      	cmp	r3, r4
 800f13e:	d1fb      	bne.n	800f138 <_malloc_r+0xdc>
 800f140:	2300      	movs	r3, #0
 800f142:	6053      	str	r3, [r2, #4]
 800f144:	e7de      	b.n	800f104 <_malloc_r+0xa8>
 800f146:	230c      	movs	r3, #12
 800f148:	6033      	str	r3, [r6, #0]
 800f14a:	4630      	mov	r0, r6
 800f14c:	f000 f81e 	bl	800f18c <__malloc_unlock>
 800f150:	e794      	b.n	800f07c <_malloc_r+0x20>
 800f152:	6005      	str	r5, [r0, #0]
 800f154:	e7d6      	b.n	800f104 <_malloc_r+0xa8>
 800f156:	bf00      	nop
 800f158:	200015d8 	.word	0x200015d8

0800f15c <__ascii_mbtowc>:
 800f15c:	b082      	sub	sp, #8
 800f15e:	b901      	cbnz	r1, 800f162 <__ascii_mbtowc+0x6>
 800f160:	a901      	add	r1, sp, #4
 800f162:	b142      	cbz	r2, 800f176 <__ascii_mbtowc+0x1a>
 800f164:	b14b      	cbz	r3, 800f17a <__ascii_mbtowc+0x1e>
 800f166:	7813      	ldrb	r3, [r2, #0]
 800f168:	600b      	str	r3, [r1, #0]
 800f16a:	7812      	ldrb	r2, [r2, #0]
 800f16c:	1e10      	subs	r0, r2, #0
 800f16e:	bf18      	it	ne
 800f170:	2001      	movne	r0, #1
 800f172:	b002      	add	sp, #8
 800f174:	4770      	bx	lr
 800f176:	4610      	mov	r0, r2
 800f178:	e7fb      	b.n	800f172 <__ascii_mbtowc+0x16>
 800f17a:	f06f 0001 	mvn.w	r0, #1
 800f17e:	e7f8      	b.n	800f172 <__ascii_mbtowc+0x16>

0800f180 <__malloc_lock>:
 800f180:	4801      	ldr	r0, [pc, #4]	@ (800f188 <__malloc_lock+0x8>)
 800f182:	f7fe bd34 	b.w	800dbee <__retarget_lock_acquire_recursive>
 800f186:	bf00      	nop
 800f188:	200015d0 	.word	0x200015d0

0800f18c <__malloc_unlock>:
 800f18c:	4801      	ldr	r0, [pc, #4]	@ (800f194 <__malloc_unlock+0x8>)
 800f18e:	f7fe bd2f 	b.w	800dbf0 <__retarget_lock_release_recursive>
 800f192:	bf00      	nop
 800f194:	200015d0 	.word	0x200015d0

0800f198 <_Balloc>:
 800f198:	b570      	push	{r4, r5, r6, lr}
 800f19a:	69c6      	ldr	r6, [r0, #28]
 800f19c:	4604      	mov	r4, r0
 800f19e:	460d      	mov	r5, r1
 800f1a0:	b976      	cbnz	r6, 800f1c0 <_Balloc+0x28>
 800f1a2:	2010      	movs	r0, #16
 800f1a4:	f7ff ff30 	bl	800f008 <malloc>
 800f1a8:	4602      	mov	r2, r0
 800f1aa:	61e0      	str	r0, [r4, #28]
 800f1ac:	b920      	cbnz	r0, 800f1b8 <_Balloc+0x20>
 800f1ae:	4b18      	ldr	r3, [pc, #96]	@ (800f210 <_Balloc+0x78>)
 800f1b0:	4818      	ldr	r0, [pc, #96]	@ (800f214 <_Balloc+0x7c>)
 800f1b2:	216b      	movs	r1, #107	@ 0x6b
 800f1b4:	f7fe fd3a 	bl	800dc2c <__assert_func>
 800f1b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1bc:	6006      	str	r6, [r0, #0]
 800f1be:	60c6      	str	r6, [r0, #12]
 800f1c0:	69e6      	ldr	r6, [r4, #28]
 800f1c2:	68f3      	ldr	r3, [r6, #12]
 800f1c4:	b183      	cbz	r3, 800f1e8 <_Balloc+0x50>
 800f1c6:	69e3      	ldr	r3, [r4, #28]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1ce:	b9b8      	cbnz	r0, 800f200 <_Balloc+0x68>
 800f1d0:	2101      	movs	r1, #1
 800f1d2:	fa01 f605 	lsl.w	r6, r1, r5
 800f1d6:	1d72      	adds	r2, r6, #5
 800f1d8:	0092      	lsls	r2, r2, #2
 800f1da:	4620      	mov	r0, r4
 800f1dc:	f000 ff5d 	bl	801009a <_calloc_r>
 800f1e0:	b160      	cbz	r0, 800f1fc <_Balloc+0x64>
 800f1e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f1e6:	e00e      	b.n	800f206 <_Balloc+0x6e>
 800f1e8:	2221      	movs	r2, #33	@ 0x21
 800f1ea:	2104      	movs	r1, #4
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f000 ff54 	bl	801009a <_calloc_r>
 800f1f2:	69e3      	ldr	r3, [r4, #28]
 800f1f4:	60f0      	str	r0, [r6, #12]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d1e4      	bne.n	800f1c6 <_Balloc+0x2e>
 800f1fc:	2000      	movs	r0, #0
 800f1fe:	bd70      	pop	{r4, r5, r6, pc}
 800f200:	6802      	ldr	r2, [r0, #0]
 800f202:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f206:	2300      	movs	r3, #0
 800f208:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f20c:	e7f7      	b.n	800f1fe <_Balloc+0x66>
 800f20e:	bf00      	nop
 800f210:	08010c19 	.word	0x08010c19
 800f214:	08010da4 	.word	0x08010da4

0800f218 <_Bfree>:
 800f218:	b570      	push	{r4, r5, r6, lr}
 800f21a:	69c6      	ldr	r6, [r0, #28]
 800f21c:	4605      	mov	r5, r0
 800f21e:	460c      	mov	r4, r1
 800f220:	b976      	cbnz	r6, 800f240 <_Bfree+0x28>
 800f222:	2010      	movs	r0, #16
 800f224:	f7ff fef0 	bl	800f008 <malloc>
 800f228:	4602      	mov	r2, r0
 800f22a:	61e8      	str	r0, [r5, #28]
 800f22c:	b920      	cbnz	r0, 800f238 <_Bfree+0x20>
 800f22e:	4b09      	ldr	r3, [pc, #36]	@ (800f254 <_Bfree+0x3c>)
 800f230:	4809      	ldr	r0, [pc, #36]	@ (800f258 <_Bfree+0x40>)
 800f232:	218f      	movs	r1, #143	@ 0x8f
 800f234:	f7fe fcfa 	bl	800dc2c <__assert_func>
 800f238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f23c:	6006      	str	r6, [r0, #0]
 800f23e:	60c6      	str	r6, [r0, #12]
 800f240:	b13c      	cbz	r4, 800f252 <_Bfree+0x3a>
 800f242:	69eb      	ldr	r3, [r5, #28]
 800f244:	6862      	ldr	r2, [r4, #4]
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f24c:	6021      	str	r1, [r4, #0]
 800f24e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f252:	bd70      	pop	{r4, r5, r6, pc}
 800f254:	08010c19 	.word	0x08010c19
 800f258:	08010da4 	.word	0x08010da4

0800f25c <__multadd>:
 800f25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f260:	690d      	ldr	r5, [r1, #16]
 800f262:	4607      	mov	r7, r0
 800f264:	460c      	mov	r4, r1
 800f266:	461e      	mov	r6, r3
 800f268:	f101 0c14 	add.w	ip, r1, #20
 800f26c:	2000      	movs	r0, #0
 800f26e:	f8dc 3000 	ldr.w	r3, [ip]
 800f272:	b299      	uxth	r1, r3
 800f274:	fb02 6101 	mla	r1, r2, r1, r6
 800f278:	0c1e      	lsrs	r6, r3, #16
 800f27a:	0c0b      	lsrs	r3, r1, #16
 800f27c:	fb02 3306 	mla	r3, r2, r6, r3
 800f280:	b289      	uxth	r1, r1
 800f282:	3001      	adds	r0, #1
 800f284:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f288:	4285      	cmp	r5, r0
 800f28a:	f84c 1b04 	str.w	r1, [ip], #4
 800f28e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f292:	dcec      	bgt.n	800f26e <__multadd+0x12>
 800f294:	b30e      	cbz	r6, 800f2da <__multadd+0x7e>
 800f296:	68a3      	ldr	r3, [r4, #8]
 800f298:	42ab      	cmp	r3, r5
 800f29a:	dc19      	bgt.n	800f2d0 <__multadd+0x74>
 800f29c:	6861      	ldr	r1, [r4, #4]
 800f29e:	4638      	mov	r0, r7
 800f2a0:	3101      	adds	r1, #1
 800f2a2:	f7ff ff79 	bl	800f198 <_Balloc>
 800f2a6:	4680      	mov	r8, r0
 800f2a8:	b928      	cbnz	r0, 800f2b6 <__multadd+0x5a>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	4b0c      	ldr	r3, [pc, #48]	@ (800f2e0 <__multadd+0x84>)
 800f2ae:	480d      	ldr	r0, [pc, #52]	@ (800f2e4 <__multadd+0x88>)
 800f2b0:	21ba      	movs	r1, #186	@ 0xba
 800f2b2:	f7fe fcbb 	bl	800dc2c <__assert_func>
 800f2b6:	6922      	ldr	r2, [r4, #16]
 800f2b8:	3202      	adds	r2, #2
 800f2ba:	f104 010c 	add.w	r1, r4, #12
 800f2be:	0092      	lsls	r2, r2, #2
 800f2c0:	300c      	adds	r0, #12
 800f2c2:	f7fe fc96 	bl	800dbf2 <memcpy>
 800f2c6:	4621      	mov	r1, r4
 800f2c8:	4638      	mov	r0, r7
 800f2ca:	f7ff ffa5 	bl	800f218 <_Bfree>
 800f2ce:	4644      	mov	r4, r8
 800f2d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f2d4:	3501      	adds	r5, #1
 800f2d6:	615e      	str	r6, [r3, #20]
 800f2d8:	6125      	str	r5, [r4, #16]
 800f2da:	4620      	mov	r0, r4
 800f2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e0:	08010d33 	.word	0x08010d33
 800f2e4:	08010da4 	.word	0x08010da4

0800f2e8 <__s2b>:
 800f2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2ec:	460c      	mov	r4, r1
 800f2ee:	4615      	mov	r5, r2
 800f2f0:	461f      	mov	r7, r3
 800f2f2:	2209      	movs	r2, #9
 800f2f4:	3308      	adds	r3, #8
 800f2f6:	4606      	mov	r6, r0
 800f2f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2fc:	2100      	movs	r1, #0
 800f2fe:	2201      	movs	r2, #1
 800f300:	429a      	cmp	r2, r3
 800f302:	db09      	blt.n	800f318 <__s2b+0x30>
 800f304:	4630      	mov	r0, r6
 800f306:	f7ff ff47 	bl	800f198 <_Balloc>
 800f30a:	b940      	cbnz	r0, 800f31e <__s2b+0x36>
 800f30c:	4602      	mov	r2, r0
 800f30e:	4b19      	ldr	r3, [pc, #100]	@ (800f374 <__s2b+0x8c>)
 800f310:	4819      	ldr	r0, [pc, #100]	@ (800f378 <__s2b+0x90>)
 800f312:	21d3      	movs	r1, #211	@ 0xd3
 800f314:	f7fe fc8a 	bl	800dc2c <__assert_func>
 800f318:	0052      	lsls	r2, r2, #1
 800f31a:	3101      	adds	r1, #1
 800f31c:	e7f0      	b.n	800f300 <__s2b+0x18>
 800f31e:	9b08      	ldr	r3, [sp, #32]
 800f320:	6143      	str	r3, [r0, #20]
 800f322:	2d09      	cmp	r5, #9
 800f324:	f04f 0301 	mov.w	r3, #1
 800f328:	6103      	str	r3, [r0, #16]
 800f32a:	dd16      	ble.n	800f35a <__s2b+0x72>
 800f32c:	f104 0909 	add.w	r9, r4, #9
 800f330:	46c8      	mov	r8, r9
 800f332:	442c      	add	r4, r5
 800f334:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f338:	4601      	mov	r1, r0
 800f33a:	3b30      	subs	r3, #48	@ 0x30
 800f33c:	220a      	movs	r2, #10
 800f33e:	4630      	mov	r0, r6
 800f340:	f7ff ff8c 	bl	800f25c <__multadd>
 800f344:	45a0      	cmp	r8, r4
 800f346:	d1f5      	bne.n	800f334 <__s2b+0x4c>
 800f348:	f1a5 0408 	sub.w	r4, r5, #8
 800f34c:	444c      	add	r4, r9
 800f34e:	1b2d      	subs	r5, r5, r4
 800f350:	1963      	adds	r3, r4, r5
 800f352:	42bb      	cmp	r3, r7
 800f354:	db04      	blt.n	800f360 <__s2b+0x78>
 800f356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f35a:	340a      	adds	r4, #10
 800f35c:	2509      	movs	r5, #9
 800f35e:	e7f6      	b.n	800f34e <__s2b+0x66>
 800f360:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f364:	4601      	mov	r1, r0
 800f366:	3b30      	subs	r3, #48	@ 0x30
 800f368:	220a      	movs	r2, #10
 800f36a:	4630      	mov	r0, r6
 800f36c:	f7ff ff76 	bl	800f25c <__multadd>
 800f370:	e7ee      	b.n	800f350 <__s2b+0x68>
 800f372:	bf00      	nop
 800f374:	08010d33 	.word	0x08010d33
 800f378:	08010da4 	.word	0x08010da4

0800f37c <__hi0bits>:
 800f37c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f380:	4603      	mov	r3, r0
 800f382:	bf36      	itet	cc
 800f384:	0403      	lslcc	r3, r0, #16
 800f386:	2000      	movcs	r0, #0
 800f388:	2010      	movcc	r0, #16
 800f38a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f38e:	bf3c      	itt	cc
 800f390:	021b      	lslcc	r3, r3, #8
 800f392:	3008      	addcc	r0, #8
 800f394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f398:	bf3c      	itt	cc
 800f39a:	011b      	lslcc	r3, r3, #4
 800f39c:	3004      	addcc	r0, #4
 800f39e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f3a2:	bf3c      	itt	cc
 800f3a4:	009b      	lslcc	r3, r3, #2
 800f3a6:	3002      	addcc	r0, #2
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	db05      	blt.n	800f3b8 <__hi0bits+0x3c>
 800f3ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f3b0:	f100 0001 	add.w	r0, r0, #1
 800f3b4:	bf08      	it	eq
 800f3b6:	2020      	moveq	r0, #32
 800f3b8:	4770      	bx	lr

0800f3ba <__lo0bits>:
 800f3ba:	6803      	ldr	r3, [r0, #0]
 800f3bc:	4602      	mov	r2, r0
 800f3be:	f013 0007 	ands.w	r0, r3, #7
 800f3c2:	d00b      	beq.n	800f3dc <__lo0bits+0x22>
 800f3c4:	07d9      	lsls	r1, r3, #31
 800f3c6:	d421      	bmi.n	800f40c <__lo0bits+0x52>
 800f3c8:	0798      	lsls	r0, r3, #30
 800f3ca:	bf49      	itett	mi
 800f3cc:	085b      	lsrmi	r3, r3, #1
 800f3ce:	089b      	lsrpl	r3, r3, #2
 800f3d0:	2001      	movmi	r0, #1
 800f3d2:	6013      	strmi	r3, [r2, #0]
 800f3d4:	bf5c      	itt	pl
 800f3d6:	6013      	strpl	r3, [r2, #0]
 800f3d8:	2002      	movpl	r0, #2
 800f3da:	4770      	bx	lr
 800f3dc:	b299      	uxth	r1, r3
 800f3de:	b909      	cbnz	r1, 800f3e4 <__lo0bits+0x2a>
 800f3e0:	0c1b      	lsrs	r3, r3, #16
 800f3e2:	2010      	movs	r0, #16
 800f3e4:	b2d9      	uxtb	r1, r3
 800f3e6:	b909      	cbnz	r1, 800f3ec <__lo0bits+0x32>
 800f3e8:	3008      	adds	r0, #8
 800f3ea:	0a1b      	lsrs	r3, r3, #8
 800f3ec:	0719      	lsls	r1, r3, #28
 800f3ee:	bf04      	itt	eq
 800f3f0:	091b      	lsreq	r3, r3, #4
 800f3f2:	3004      	addeq	r0, #4
 800f3f4:	0799      	lsls	r1, r3, #30
 800f3f6:	bf04      	itt	eq
 800f3f8:	089b      	lsreq	r3, r3, #2
 800f3fa:	3002      	addeq	r0, #2
 800f3fc:	07d9      	lsls	r1, r3, #31
 800f3fe:	d403      	bmi.n	800f408 <__lo0bits+0x4e>
 800f400:	085b      	lsrs	r3, r3, #1
 800f402:	f100 0001 	add.w	r0, r0, #1
 800f406:	d003      	beq.n	800f410 <__lo0bits+0x56>
 800f408:	6013      	str	r3, [r2, #0]
 800f40a:	4770      	bx	lr
 800f40c:	2000      	movs	r0, #0
 800f40e:	4770      	bx	lr
 800f410:	2020      	movs	r0, #32
 800f412:	4770      	bx	lr

0800f414 <__i2b>:
 800f414:	b510      	push	{r4, lr}
 800f416:	460c      	mov	r4, r1
 800f418:	2101      	movs	r1, #1
 800f41a:	f7ff febd 	bl	800f198 <_Balloc>
 800f41e:	4602      	mov	r2, r0
 800f420:	b928      	cbnz	r0, 800f42e <__i2b+0x1a>
 800f422:	4b05      	ldr	r3, [pc, #20]	@ (800f438 <__i2b+0x24>)
 800f424:	4805      	ldr	r0, [pc, #20]	@ (800f43c <__i2b+0x28>)
 800f426:	f240 1145 	movw	r1, #325	@ 0x145
 800f42a:	f7fe fbff 	bl	800dc2c <__assert_func>
 800f42e:	2301      	movs	r3, #1
 800f430:	6144      	str	r4, [r0, #20]
 800f432:	6103      	str	r3, [r0, #16]
 800f434:	bd10      	pop	{r4, pc}
 800f436:	bf00      	nop
 800f438:	08010d33 	.word	0x08010d33
 800f43c:	08010da4 	.word	0x08010da4

0800f440 <__multiply>:
 800f440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f444:	4614      	mov	r4, r2
 800f446:	690a      	ldr	r2, [r1, #16]
 800f448:	6923      	ldr	r3, [r4, #16]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	bfa8      	it	ge
 800f44e:	4623      	movge	r3, r4
 800f450:	460f      	mov	r7, r1
 800f452:	bfa4      	itt	ge
 800f454:	460c      	movge	r4, r1
 800f456:	461f      	movge	r7, r3
 800f458:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f45c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f460:	68a3      	ldr	r3, [r4, #8]
 800f462:	6861      	ldr	r1, [r4, #4]
 800f464:	eb0a 0609 	add.w	r6, sl, r9
 800f468:	42b3      	cmp	r3, r6
 800f46a:	b085      	sub	sp, #20
 800f46c:	bfb8      	it	lt
 800f46e:	3101      	addlt	r1, #1
 800f470:	f7ff fe92 	bl	800f198 <_Balloc>
 800f474:	b930      	cbnz	r0, 800f484 <__multiply+0x44>
 800f476:	4602      	mov	r2, r0
 800f478:	4b44      	ldr	r3, [pc, #272]	@ (800f58c <__multiply+0x14c>)
 800f47a:	4845      	ldr	r0, [pc, #276]	@ (800f590 <__multiply+0x150>)
 800f47c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f480:	f7fe fbd4 	bl	800dc2c <__assert_func>
 800f484:	f100 0514 	add.w	r5, r0, #20
 800f488:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f48c:	462b      	mov	r3, r5
 800f48e:	2200      	movs	r2, #0
 800f490:	4543      	cmp	r3, r8
 800f492:	d321      	bcc.n	800f4d8 <__multiply+0x98>
 800f494:	f107 0114 	add.w	r1, r7, #20
 800f498:	f104 0214 	add.w	r2, r4, #20
 800f49c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f4a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f4a4:	9302      	str	r3, [sp, #8]
 800f4a6:	1b13      	subs	r3, r2, r4
 800f4a8:	3b15      	subs	r3, #21
 800f4aa:	f023 0303 	bic.w	r3, r3, #3
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	f104 0715 	add.w	r7, r4, #21
 800f4b4:	42ba      	cmp	r2, r7
 800f4b6:	bf38      	it	cc
 800f4b8:	2304      	movcc	r3, #4
 800f4ba:	9301      	str	r3, [sp, #4]
 800f4bc:	9b02      	ldr	r3, [sp, #8]
 800f4be:	9103      	str	r1, [sp, #12]
 800f4c0:	428b      	cmp	r3, r1
 800f4c2:	d80c      	bhi.n	800f4de <__multiply+0x9e>
 800f4c4:	2e00      	cmp	r6, #0
 800f4c6:	dd03      	ble.n	800f4d0 <__multiply+0x90>
 800f4c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d05b      	beq.n	800f588 <__multiply+0x148>
 800f4d0:	6106      	str	r6, [r0, #16]
 800f4d2:	b005      	add	sp, #20
 800f4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4d8:	f843 2b04 	str.w	r2, [r3], #4
 800f4dc:	e7d8      	b.n	800f490 <__multiply+0x50>
 800f4de:	f8b1 a000 	ldrh.w	sl, [r1]
 800f4e2:	f1ba 0f00 	cmp.w	sl, #0
 800f4e6:	d024      	beq.n	800f532 <__multiply+0xf2>
 800f4e8:	f104 0e14 	add.w	lr, r4, #20
 800f4ec:	46a9      	mov	r9, r5
 800f4ee:	f04f 0c00 	mov.w	ip, #0
 800f4f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f4f6:	f8d9 3000 	ldr.w	r3, [r9]
 800f4fa:	fa1f fb87 	uxth.w	fp, r7
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	fb0a 330b 	mla	r3, sl, fp, r3
 800f504:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f508:	f8d9 7000 	ldr.w	r7, [r9]
 800f50c:	4463      	add	r3, ip
 800f50e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f512:	fb0a c70b 	mla	r7, sl, fp, ip
 800f516:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f520:	4572      	cmp	r2, lr
 800f522:	f849 3b04 	str.w	r3, [r9], #4
 800f526:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f52a:	d8e2      	bhi.n	800f4f2 <__multiply+0xb2>
 800f52c:	9b01      	ldr	r3, [sp, #4]
 800f52e:	f845 c003 	str.w	ip, [r5, r3]
 800f532:	9b03      	ldr	r3, [sp, #12]
 800f534:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f538:	3104      	adds	r1, #4
 800f53a:	f1b9 0f00 	cmp.w	r9, #0
 800f53e:	d021      	beq.n	800f584 <__multiply+0x144>
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	f104 0c14 	add.w	ip, r4, #20
 800f546:	46ae      	mov	lr, r5
 800f548:	f04f 0a00 	mov.w	sl, #0
 800f54c:	f8bc b000 	ldrh.w	fp, [ip]
 800f550:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f554:	fb09 770b 	mla	r7, r9, fp, r7
 800f558:	4457      	add	r7, sl
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f560:	f84e 3b04 	str.w	r3, [lr], #4
 800f564:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f568:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f56c:	f8be 3000 	ldrh.w	r3, [lr]
 800f570:	fb09 330a 	mla	r3, r9, sl, r3
 800f574:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f578:	4562      	cmp	r2, ip
 800f57a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f57e:	d8e5      	bhi.n	800f54c <__multiply+0x10c>
 800f580:	9f01      	ldr	r7, [sp, #4]
 800f582:	51eb      	str	r3, [r5, r7]
 800f584:	3504      	adds	r5, #4
 800f586:	e799      	b.n	800f4bc <__multiply+0x7c>
 800f588:	3e01      	subs	r6, #1
 800f58a:	e79b      	b.n	800f4c4 <__multiply+0x84>
 800f58c:	08010d33 	.word	0x08010d33
 800f590:	08010da4 	.word	0x08010da4

0800f594 <__pow5mult>:
 800f594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f598:	4615      	mov	r5, r2
 800f59a:	f012 0203 	ands.w	r2, r2, #3
 800f59e:	4607      	mov	r7, r0
 800f5a0:	460e      	mov	r6, r1
 800f5a2:	d007      	beq.n	800f5b4 <__pow5mult+0x20>
 800f5a4:	4c25      	ldr	r4, [pc, #148]	@ (800f63c <__pow5mult+0xa8>)
 800f5a6:	3a01      	subs	r2, #1
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5ae:	f7ff fe55 	bl	800f25c <__multadd>
 800f5b2:	4606      	mov	r6, r0
 800f5b4:	10ad      	asrs	r5, r5, #2
 800f5b6:	d03d      	beq.n	800f634 <__pow5mult+0xa0>
 800f5b8:	69fc      	ldr	r4, [r7, #28]
 800f5ba:	b97c      	cbnz	r4, 800f5dc <__pow5mult+0x48>
 800f5bc:	2010      	movs	r0, #16
 800f5be:	f7ff fd23 	bl	800f008 <malloc>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	61f8      	str	r0, [r7, #28]
 800f5c6:	b928      	cbnz	r0, 800f5d4 <__pow5mult+0x40>
 800f5c8:	4b1d      	ldr	r3, [pc, #116]	@ (800f640 <__pow5mult+0xac>)
 800f5ca:	481e      	ldr	r0, [pc, #120]	@ (800f644 <__pow5mult+0xb0>)
 800f5cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f5d0:	f7fe fb2c 	bl	800dc2c <__assert_func>
 800f5d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5d8:	6004      	str	r4, [r0, #0]
 800f5da:	60c4      	str	r4, [r0, #12]
 800f5dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f5e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5e4:	b94c      	cbnz	r4, 800f5fa <__pow5mult+0x66>
 800f5e6:	f240 2171 	movw	r1, #625	@ 0x271
 800f5ea:	4638      	mov	r0, r7
 800f5ec:	f7ff ff12 	bl	800f414 <__i2b>
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	6003      	str	r3, [r0, #0]
 800f5fa:	f04f 0900 	mov.w	r9, #0
 800f5fe:	07eb      	lsls	r3, r5, #31
 800f600:	d50a      	bpl.n	800f618 <__pow5mult+0x84>
 800f602:	4631      	mov	r1, r6
 800f604:	4622      	mov	r2, r4
 800f606:	4638      	mov	r0, r7
 800f608:	f7ff ff1a 	bl	800f440 <__multiply>
 800f60c:	4631      	mov	r1, r6
 800f60e:	4680      	mov	r8, r0
 800f610:	4638      	mov	r0, r7
 800f612:	f7ff fe01 	bl	800f218 <_Bfree>
 800f616:	4646      	mov	r6, r8
 800f618:	106d      	asrs	r5, r5, #1
 800f61a:	d00b      	beq.n	800f634 <__pow5mult+0xa0>
 800f61c:	6820      	ldr	r0, [r4, #0]
 800f61e:	b938      	cbnz	r0, 800f630 <__pow5mult+0x9c>
 800f620:	4622      	mov	r2, r4
 800f622:	4621      	mov	r1, r4
 800f624:	4638      	mov	r0, r7
 800f626:	f7ff ff0b 	bl	800f440 <__multiply>
 800f62a:	6020      	str	r0, [r4, #0]
 800f62c:	f8c0 9000 	str.w	r9, [r0]
 800f630:	4604      	mov	r4, r0
 800f632:	e7e4      	b.n	800f5fe <__pow5mult+0x6a>
 800f634:	4630      	mov	r0, r6
 800f636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f63a:	bf00      	nop
 800f63c:	08010e00 	.word	0x08010e00
 800f640:	08010c19 	.word	0x08010c19
 800f644:	08010da4 	.word	0x08010da4

0800f648 <__lshift>:
 800f648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f64c:	460c      	mov	r4, r1
 800f64e:	6849      	ldr	r1, [r1, #4]
 800f650:	6923      	ldr	r3, [r4, #16]
 800f652:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f656:	68a3      	ldr	r3, [r4, #8]
 800f658:	4607      	mov	r7, r0
 800f65a:	4691      	mov	r9, r2
 800f65c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f660:	f108 0601 	add.w	r6, r8, #1
 800f664:	42b3      	cmp	r3, r6
 800f666:	db0b      	blt.n	800f680 <__lshift+0x38>
 800f668:	4638      	mov	r0, r7
 800f66a:	f7ff fd95 	bl	800f198 <_Balloc>
 800f66e:	4605      	mov	r5, r0
 800f670:	b948      	cbnz	r0, 800f686 <__lshift+0x3e>
 800f672:	4602      	mov	r2, r0
 800f674:	4b28      	ldr	r3, [pc, #160]	@ (800f718 <__lshift+0xd0>)
 800f676:	4829      	ldr	r0, [pc, #164]	@ (800f71c <__lshift+0xd4>)
 800f678:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f67c:	f7fe fad6 	bl	800dc2c <__assert_func>
 800f680:	3101      	adds	r1, #1
 800f682:	005b      	lsls	r3, r3, #1
 800f684:	e7ee      	b.n	800f664 <__lshift+0x1c>
 800f686:	2300      	movs	r3, #0
 800f688:	f100 0114 	add.w	r1, r0, #20
 800f68c:	f100 0210 	add.w	r2, r0, #16
 800f690:	4618      	mov	r0, r3
 800f692:	4553      	cmp	r3, sl
 800f694:	db33      	blt.n	800f6fe <__lshift+0xb6>
 800f696:	6920      	ldr	r0, [r4, #16]
 800f698:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f69c:	f104 0314 	add.w	r3, r4, #20
 800f6a0:	f019 091f 	ands.w	r9, r9, #31
 800f6a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f6a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f6ac:	d02b      	beq.n	800f706 <__lshift+0xbe>
 800f6ae:	f1c9 0e20 	rsb	lr, r9, #32
 800f6b2:	468a      	mov	sl, r1
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	6818      	ldr	r0, [r3, #0]
 800f6b8:	fa00 f009 	lsl.w	r0, r0, r9
 800f6bc:	4310      	orrs	r0, r2
 800f6be:	f84a 0b04 	str.w	r0, [sl], #4
 800f6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6c6:	459c      	cmp	ip, r3
 800f6c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800f6cc:	d8f3      	bhi.n	800f6b6 <__lshift+0x6e>
 800f6ce:	ebac 0304 	sub.w	r3, ip, r4
 800f6d2:	3b15      	subs	r3, #21
 800f6d4:	f023 0303 	bic.w	r3, r3, #3
 800f6d8:	3304      	adds	r3, #4
 800f6da:	f104 0015 	add.w	r0, r4, #21
 800f6de:	4584      	cmp	ip, r0
 800f6e0:	bf38      	it	cc
 800f6e2:	2304      	movcc	r3, #4
 800f6e4:	50ca      	str	r2, [r1, r3]
 800f6e6:	b10a      	cbz	r2, 800f6ec <__lshift+0xa4>
 800f6e8:	f108 0602 	add.w	r6, r8, #2
 800f6ec:	3e01      	subs	r6, #1
 800f6ee:	4638      	mov	r0, r7
 800f6f0:	612e      	str	r6, [r5, #16]
 800f6f2:	4621      	mov	r1, r4
 800f6f4:	f7ff fd90 	bl	800f218 <_Bfree>
 800f6f8:	4628      	mov	r0, r5
 800f6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800f702:	3301      	adds	r3, #1
 800f704:	e7c5      	b.n	800f692 <__lshift+0x4a>
 800f706:	3904      	subs	r1, #4
 800f708:	f853 2b04 	ldr.w	r2, [r3], #4
 800f70c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f710:	459c      	cmp	ip, r3
 800f712:	d8f9      	bhi.n	800f708 <__lshift+0xc0>
 800f714:	e7ea      	b.n	800f6ec <__lshift+0xa4>
 800f716:	bf00      	nop
 800f718:	08010d33 	.word	0x08010d33
 800f71c:	08010da4 	.word	0x08010da4

0800f720 <__mcmp>:
 800f720:	690a      	ldr	r2, [r1, #16]
 800f722:	4603      	mov	r3, r0
 800f724:	6900      	ldr	r0, [r0, #16]
 800f726:	1a80      	subs	r0, r0, r2
 800f728:	b530      	push	{r4, r5, lr}
 800f72a:	d10e      	bne.n	800f74a <__mcmp+0x2a>
 800f72c:	3314      	adds	r3, #20
 800f72e:	3114      	adds	r1, #20
 800f730:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f734:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f738:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f73c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f740:	4295      	cmp	r5, r2
 800f742:	d003      	beq.n	800f74c <__mcmp+0x2c>
 800f744:	d205      	bcs.n	800f752 <__mcmp+0x32>
 800f746:	f04f 30ff 	mov.w	r0, #4294967295
 800f74a:	bd30      	pop	{r4, r5, pc}
 800f74c:	42a3      	cmp	r3, r4
 800f74e:	d3f3      	bcc.n	800f738 <__mcmp+0x18>
 800f750:	e7fb      	b.n	800f74a <__mcmp+0x2a>
 800f752:	2001      	movs	r0, #1
 800f754:	e7f9      	b.n	800f74a <__mcmp+0x2a>
	...

0800f758 <__mdiff>:
 800f758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75c:	4689      	mov	r9, r1
 800f75e:	4606      	mov	r6, r0
 800f760:	4611      	mov	r1, r2
 800f762:	4648      	mov	r0, r9
 800f764:	4614      	mov	r4, r2
 800f766:	f7ff ffdb 	bl	800f720 <__mcmp>
 800f76a:	1e05      	subs	r5, r0, #0
 800f76c:	d112      	bne.n	800f794 <__mdiff+0x3c>
 800f76e:	4629      	mov	r1, r5
 800f770:	4630      	mov	r0, r6
 800f772:	f7ff fd11 	bl	800f198 <_Balloc>
 800f776:	4602      	mov	r2, r0
 800f778:	b928      	cbnz	r0, 800f786 <__mdiff+0x2e>
 800f77a:	4b3f      	ldr	r3, [pc, #252]	@ (800f878 <__mdiff+0x120>)
 800f77c:	f240 2137 	movw	r1, #567	@ 0x237
 800f780:	483e      	ldr	r0, [pc, #248]	@ (800f87c <__mdiff+0x124>)
 800f782:	f7fe fa53 	bl	800dc2c <__assert_func>
 800f786:	2301      	movs	r3, #1
 800f788:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f78c:	4610      	mov	r0, r2
 800f78e:	b003      	add	sp, #12
 800f790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f794:	bfbc      	itt	lt
 800f796:	464b      	movlt	r3, r9
 800f798:	46a1      	movlt	r9, r4
 800f79a:	4630      	mov	r0, r6
 800f79c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f7a0:	bfba      	itte	lt
 800f7a2:	461c      	movlt	r4, r3
 800f7a4:	2501      	movlt	r5, #1
 800f7a6:	2500      	movge	r5, #0
 800f7a8:	f7ff fcf6 	bl	800f198 <_Balloc>
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	b918      	cbnz	r0, 800f7b8 <__mdiff+0x60>
 800f7b0:	4b31      	ldr	r3, [pc, #196]	@ (800f878 <__mdiff+0x120>)
 800f7b2:	f240 2145 	movw	r1, #581	@ 0x245
 800f7b6:	e7e3      	b.n	800f780 <__mdiff+0x28>
 800f7b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f7bc:	6926      	ldr	r6, [r4, #16]
 800f7be:	60c5      	str	r5, [r0, #12]
 800f7c0:	f109 0310 	add.w	r3, r9, #16
 800f7c4:	f109 0514 	add.w	r5, r9, #20
 800f7c8:	f104 0e14 	add.w	lr, r4, #20
 800f7cc:	f100 0b14 	add.w	fp, r0, #20
 800f7d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f7d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f7d8:	9301      	str	r3, [sp, #4]
 800f7da:	46d9      	mov	r9, fp
 800f7dc:	f04f 0c00 	mov.w	ip, #0
 800f7e0:	9b01      	ldr	r3, [sp, #4]
 800f7e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f7e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f7ea:	9301      	str	r3, [sp, #4]
 800f7ec:	fa1f f38a 	uxth.w	r3, sl
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	b283      	uxth	r3, r0
 800f7f4:	1acb      	subs	r3, r1, r3
 800f7f6:	0c00      	lsrs	r0, r0, #16
 800f7f8:	4463      	add	r3, ip
 800f7fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f7fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f802:	b29b      	uxth	r3, r3
 800f804:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f808:	4576      	cmp	r6, lr
 800f80a:	f849 3b04 	str.w	r3, [r9], #4
 800f80e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f812:	d8e5      	bhi.n	800f7e0 <__mdiff+0x88>
 800f814:	1b33      	subs	r3, r6, r4
 800f816:	3b15      	subs	r3, #21
 800f818:	f023 0303 	bic.w	r3, r3, #3
 800f81c:	3415      	adds	r4, #21
 800f81e:	3304      	adds	r3, #4
 800f820:	42a6      	cmp	r6, r4
 800f822:	bf38      	it	cc
 800f824:	2304      	movcc	r3, #4
 800f826:	441d      	add	r5, r3
 800f828:	445b      	add	r3, fp
 800f82a:	461e      	mov	r6, r3
 800f82c:	462c      	mov	r4, r5
 800f82e:	4544      	cmp	r4, r8
 800f830:	d30e      	bcc.n	800f850 <__mdiff+0xf8>
 800f832:	f108 0103 	add.w	r1, r8, #3
 800f836:	1b49      	subs	r1, r1, r5
 800f838:	f021 0103 	bic.w	r1, r1, #3
 800f83c:	3d03      	subs	r5, #3
 800f83e:	45a8      	cmp	r8, r5
 800f840:	bf38      	it	cc
 800f842:	2100      	movcc	r1, #0
 800f844:	440b      	add	r3, r1
 800f846:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f84a:	b191      	cbz	r1, 800f872 <__mdiff+0x11a>
 800f84c:	6117      	str	r7, [r2, #16]
 800f84e:	e79d      	b.n	800f78c <__mdiff+0x34>
 800f850:	f854 1b04 	ldr.w	r1, [r4], #4
 800f854:	46e6      	mov	lr, ip
 800f856:	0c08      	lsrs	r0, r1, #16
 800f858:	fa1c fc81 	uxtah	ip, ip, r1
 800f85c:	4471      	add	r1, lr
 800f85e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f862:	b289      	uxth	r1, r1
 800f864:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f868:	f846 1b04 	str.w	r1, [r6], #4
 800f86c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f870:	e7dd      	b.n	800f82e <__mdiff+0xd6>
 800f872:	3f01      	subs	r7, #1
 800f874:	e7e7      	b.n	800f846 <__mdiff+0xee>
 800f876:	bf00      	nop
 800f878:	08010d33 	.word	0x08010d33
 800f87c:	08010da4 	.word	0x08010da4

0800f880 <__ulp>:
 800f880:	b082      	sub	sp, #8
 800f882:	ed8d 0b00 	vstr	d0, [sp]
 800f886:	9a01      	ldr	r2, [sp, #4]
 800f888:	4b0f      	ldr	r3, [pc, #60]	@ (800f8c8 <__ulp+0x48>)
 800f88a:	4013      	ands	r3, r2
 800f88c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f890:	2b00      	cmp	r3, #0
 800f892:	dc08      	bgt.n	800f8a6 <__ulp+0x26>
 800f894:	425b      	negs	r3, r3
 800f896:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f89a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f89e:	da04      	bge.n	800f8aa <__ulp+0x2a>
 800f8a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f8a4:	4113      	asrs	r3, r2
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	e008      	b.n	800f8bc <__ulp+0x3c>
 800f8aa:	f1a2 0314 	sub.w	r3, r2, #20
 800f8ae:	2b1e      	cmp	r3, #30
 800f8b0:	bfda      	itte	le
 800f8b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f8b6:	40da      	lsrle	r2, r3
 800f8b8:	2201      	movgt	r2, #1
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	4619      	mov	r1, r3
 800f8be:	4610      	mov	r0, r2
 800f8c0:	ec41 0b10 	vmov	d0, r0, r1
 800f8c4:	b002      	add	sp, #8
 800f8c6:	4770      	bx	lr
 800f8c8:	7ff00000 	.word	0x7ff00000

0800f8cc <__b2d>:
 800f8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d0:	6906      	ldr	r6, [r0, #16]
 800f8d2:	f100 0814 	add.w	r8, r0, #20
 800f8d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f8da:	1f37      	subs	r7, r6, #4
 800f8dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f8e0:	4610      	mov	r0, r2
 800f8e2:	f7ff fd4b 	bl	800f37c <__hi0bits>
 800f8e6:	f1c0 0320 	rsb	r3, r0, #32
 800f8ea:	280a      	cmp	r0, #10
 800f8ec:	600b      	str	r3, [r1, #0]
 800f8ee:	491b      	ldr	r1, [pc, #108]	@ (800f95c <__b2d+0x90>)
 800f8f0:	dc15      	bgt.n	800f91e <__b2d+0x52>
 800f8f2:	f1c0 0c0b 	rsb	ip, r0, #11
 800f8f6:	fa22 f30c 	lsr.w	r3, r2, ip
 800f8fa:	45b8      	cmp	r8, r7
 800f8fc:	ea43 0501 	orr.w	r5, r3, r1
 800f900:	bf34      	ite	cc
 800f902:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f906:	2300      	movcs	r3, #0
 800f908:	3015      	adds	r0, #21
 800f90a:	fa02 f000 	lsl.w	r0, r2, r0
 800f90e:	fa23 f30c 	lsr.w	r3, r3, ip
 800f912:	4303      	orrs	r3, r0
 800f914:	461c      	mov	r4, r3
 800f916:	ec45 4b10 	vmov	d0, r4, r5
 800f91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f91e:	45b8      	cmp	r8, r7
 800f920:	bf3a      	itte	cc
 800f922:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f926:	f1a6 0708 	subcc.w	r7, r6, #8
 800f92a:	2300      	movcs	r3, #0
 800f92c:	380b      	subs	r0, #11
 800f92e:	d012      	beq.n	800f956 <__b2d+0x8a>
 800f930:	f1c0 0120 	rsb	r1, r0, #32
 800f934:	fa23 f401 	lsr.w	r4, r3, r1
 800f938:	4082      	lsls	r2, r0
 800f93a:	4322      	orrs	r2, r4
 800f93c:	4547      	cmp	r7, r8
 800f93e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f942:	bf8c      	ite	hi
 800f944:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f948:	2200      	movls	r2, #0
 800f94a:	4083      	lsls	r3, r0
 800f94c:	40ca      	lsrs	r2, r1
 800f94e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f952:	4313      	orrs	r3, r2
 800f954:	e7de      	b.n	800f914 <__b2d+0x48>
 800f956:	ea42 0501 	orr.w	r5, r2, r1
 800f95a:	e7db      	b.n	800f914 <__b2d+0x48>
 800f95c:	3ff00000 	.word	0x3ff00000

0800f960 <__d2b>:
 800f960:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f964:	460f      	mov	r7, r1
 800f966:	2101      	movs	r1, #1
 800f968:	ec59 8b10 	vmov	r8, r9, d0
 800f96c:	4616      	mov	r6, r2
 800f96e:	f7ff fc13 	bl	800f198 <_Balloc>
 800f972:	4604      	mov	r4, r0
 800f974:	b930      	cbnz	r0, 800f984 <__d2b+0x24>
 800f976:	4602      	mov	r2, r0
 800f978:	4b23      	ldr	r3, [pc, #140]	@ (800fa08 <__d2b+0xa8>)
 800f97a:	4824      	ldr	r0, [pc, #144]	@ (800fa0c <__d2b+0xac>)
 800f97c:	f240 310f 	movw	r1, #783	@ 0x30f
 800f980:	f7fe f954 	bl	800dc2c <__assert_func>
 800f984:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f988:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f98c:	b10d      	cbz	r5, 800f992 <__d2b+0x32>
 800f98e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f992:	9301      	str	r3, [sp, #4]
 800f994:	f1b8 0300 	subs.w	r3, r8, #0
 800f998:	d023      	beq.n	800f9e2 <__d2b+0x82>
 800f99a:	4668      	mov	r0, sp
 800f99c:	9300      	str	r3, [sp, #0]
 800f99e:	f7ff fd0c 	bl	800f3ba <__lo0bits>
 800f9a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f9a6:	b1d0      	cbz	r0, 800f9de <__d2b+0x7e>
 800f9a8:	f1c0 0320 	rsb	r3, r0, #32
 800f9ac:	fa02 f303 	lsl.w	r3, r2, r3
 800f9b0:	430b      	orrs	r3, r1
 800f9b2:	40c2      	lsrs	r2, r0
 800f9b4:	6163      	str	r3, [r4, #20]
 800f9b6:	9201      	str	r2, [sp, #4]
 800f9b8:	9b01      	ldr	r3, [sp, #4]
 800f9ba:	61a3      	str	r3, [r4, #24]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	bf0c      	ite	eq
 800f9c0:	2201      	moveq	r2, #1
 800f9c2:	2202      	movne	r2, #2
 800f9c4:	6122      	str	r2, [r4, #16]
 800f9c6:	b1a5      	cbz	r5, 800f9f2 <__d2b+0x92>
 800f9c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f9cc:	4405      	add	r5, r0
 800f9ce:	603d      	str	r5, [r7, #0]
 800f9d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f9d4:	6030      	str	r0, [r6, #0]
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	b003      	add	sp, #12
 800f9da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9de:	6161      	str	r1, [r4, #20]
 800f9e0:	e7ea      	b.n	800f9b8 <__d2b+0x58>
 800f9e2:	a801      	add	r0, sp, #4
 800f9e4:	f7ff fce9 	bl	800f3ba <__lo0bits>
 800f9e8:	9b01      	ldr	r3, [sp, #4]
 800f9ea:	6163      	str	r3, [r4, #20]
 800f9ec:	3020      	adds	r0, #32
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	e7e8      	b.n	800f9c4 <__d2b+0x64>
 800f9f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f9f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f9fa:	6038      	str	r0, [r7, #0]
 800f9fc:	6918      	ldr	r0, [r3, #16]
 800f9fe:	f7ff fcbd 	bl	800f37c <__hi0bits>
 800fa02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fa06:	e7e5      	b.n	800f9d4 <__d2b+0x74>
 800fa08:	08010d33 	.word	0x08010d33
 800fa0c:	08010da4 	.word	0x08010da4

0800fa10 <__ratio>:
 800fa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa14:	b085      	sub	sp, #20
 800fa16:	e9cd 1000 	strd	r1, r0, [sp]
 800fa1a:	a902      	add	r1, sp, #8
 800fa1c:	f7ff ff56 	bl	800f8cc <__b2d>
 800fa20:	9800      	ldr	r0, [sp, #0]
 800fa22:	a903      	add	r1, sp, #12
 800fa24:	ec55 4b10 	vmov	r4, r5, d0
 800fa28:	f7ff ff50 	bl	800f8cc <__b2d>
 800fa2c:	9b01      	ldr	r3, [sp, #4]
 800fa2e:	6919      	ldr	r1, [r3, #16]
 800fa30:	9b00      	ldr	r3, [sp, #0]
 800fa32:	691b      	ldr	r3, [r3, #16]
 800fa34:	1ac9      	subs	r1, r1, r3
 800fa36:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800fa3a:	1a9b      	subs	r3, r3, r2
 800fa3c:	ec5b ab10 	vmov	sl, fp, d0
 800fa40:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	bfce      	itee	gt
 800fa48:	462a      	movgt	r2, r5
 800fa4a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fa4e:	465a      	movle	r2, fp
 800fa50:	462f      	mov	r7, r5
 800fa52:	46d9      	mov	r9, fp
 800fa54:	bfcc      	ite	gt
 800fa56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fa5a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800fa5e:	464b      	mov	r3, r9
 800fa60:	4652      	mov	r2, sl
 800fa62:	4620      	mov	r0, r4
 800fa64:	4639      	mov	r1, r7
 800fa66:	f7f0 ff11 	bl	800088c <__aeabi_ddiv>
 800fa6a:	ec41 0b10 	vmov	d0, r0, r1
 800fa6e:	b005      	add	sp, #20
 800fa70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fa74 <__copybits>:
 800fa74:	3901      	subs	r1, #1
 800fa76:	b570      	push	{r4, r5, r6, lr}
 800fa78:	1149      	asrs	r1, r1, #5
 800fa7a:	6914      	ldr	r4, [r2, #16]
 800fa7c:	3101      	adds	r1, #1
 800fa7e:	f102 0314 	add.w	r3, r2, #20
 800fa82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fa86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fa8a:	1f05      	subs	r5, r0, #4
 800fa8c:	42a3      	cmp	r3, r4
 800fa8e:	d30c      	bcc.n	800faaa <__copybits+0x36>
 800fa90:	1aa3      	subs	r3, r4, r2
 800fa92:	3b11      	subs	r3, #17
 800fa94:	f023 0303 	bic.w	r3, r3, #3
 800fa98:	3211      	adds	r2, #17
 800fa9a:	42a2      	cmp	r2, r4
 800fa9c:	bf88      	it	hi
 800fa9e:	2300      	movhi	r3, #0
 800faa0:	4418      	add	r0, r3
 800faa2:	2300      	movs	r3, #0
 800faa4:	4288      	cmp	r0, r1
 800faa6:	d305      	bcc.n	800fab4 <__copybits+0x40>
 800faa8:	bd70      	pop	{r4, r5, r6, pc}
 800faaa:	f853 6b04 	ldr.w	r6, [r3], #4
 800faae:	f845 6f04 	str.w	r6, [r5, #4]!
 800fab2:	e7eb      	b.n	800fa8c <__copybits+0x18>
 800fab4:	f840 3b04 	str.w	r3, [r0], #4
 800fab8:	e7f4      	b.n	800faa4 <__copybits+0x30>

0800faba <__any_on>:
 800faba:	f100 0214 	add.w	r2, r0, #20
 800fabe:	6900      	ldr	r0, [r0, #16]
 800fac0:	114b      	asrs	r3, r1, #5
 800fac2:	4298      	cmp	r0, r3
 800fac4:	b510      	push	{r4, lr}
 800fac6:	db11      	blt.n	800faec <__any_on+0x32>
 800fac8:	dd0a      	ble.n	800fae0 <__any_on+0x26>
 800faca:	f011 011f 	ands.w	r1, r1, #31
 800face:	d007      	beq.n	800fae0 <__any_on+0x26>
 800fad0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fad4:	fa24 f001 	lsr.w	r0, r4, r1
 800fad8:	fa00 f101 	lsl.w	r1, r0, r1
 800fadc:	428c      	cmp	r4, r1
 800fade:	d10b      	bne.n	800faf8 <__any_on+0x3e>
 800fae0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d803      	bhi.n	800faf0 <__any_on+0x36>
 800fae8:	2000      	movs	r0, #0
 800faea:	bd10      	pop	{r4, pc}
 800faec:	4603      	mov	r3, r0
 800faee:	e7f7      	b.n	800fae0 <__any_on+0x26>
 800faf0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800faf4:	2900      	cmp	r1, #0
 800faf6:	d0f5      	beq.n	800fae4 <__any_on+0x2a>
 800faf8:	2001      	movs	r0, #1
 800fafa:	e7f6      	b.n	800faea <__any_on+0x30>

0800fafc <_strtol_l.constprop.0>:
 800fafc:	2b24      	cmp	r3, #36	@ 0x24
 800fafe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb02:	4686      	mov	lr, r0
 800fb04:	4690      	mov	r8, r2
 800fb06:	d801      	bhi.n	800fb0c <_strtol_l.constprop.0+0x10>
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d106      	bne.n	800fb1a <_strtol_l.constprop.0+0x1e>
 800fb0c:	f7fe f844 	bl	800db98 <__errno>
 800fb10:	2316      	movs	r3, #22
 800fb12:	6003      	str	r3, [r0, #0]
 800fb14:	2000      	movs	r0, #0
 800fb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb1a:	4834      	ldr	r0, [pc, #208]	@ (800fbec <_strtol_l.constprop.0+0xf0>)
 800fb1c:	460d      	mov	r5, r1
 800fb1e:	462a      	mov	r2, r5
 800fb20:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb24:	5d06      	ldrb	r6, [r0, r4]
 800fb26:	f016 0608 	ands.w	r6, r6, #8
 800fb2a:	d1f8      	bne.n	800fb1e <_strtol_l.constprop.0+0x22>
 800fb2c:	2c2d      	cmp	r4, #45	@ 0x2d
 800fb2e:	d12d      	bne.n	800fb8c <_strtol_l.constprop.0+0x90>
 800fb30:	782c      	ldrb	r4, [r5, #0]
 800fb32:	2601      	movs	r6, #1
 800fb34:	1c95      	adds	r5, r2, #2
 800fb36:	f033 0210 	bics.w	r2, r3, #16
 800fb3a:	d109      	bne.n	800fb50 <_strtol_l.constprop.0+0x54>
 800fb3c:	2c30      	cmp	r4, #48	@ 0x30
 800fb3e:	d12a      	bne.n	800fb96 <_strtol_l.constprop.0+0x9a>
 800fb40:	782a      	ldrb	r2, [r5, #0]
 800fb42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fb46:	2a58      	cmp	r2, #88	@ 0x58
 800fb48:	d125      	bne.n	800fb96 <_strtol_l.constprop.0+0x9a>
 800fb4a:	786c      	ldrb	r4, [r5, #1]
 800fb4c:	2310      	movs	r3, #16
 800fb4e:	3502      	adds	r5, #2
 800fb50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fb54:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fb58:	2200      	movs	r2, #0
 800fb5a:	fbbc f9f3 	udiv	r9, ip, r3
 800fb5e:	4610      	mov	r0, r2
 800fb60:	fb03 ca19 	mls	sl, r3, r9, ip
 800fb64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fb68:	2f09      	cmp	r7, #9
 800fb6a:	d81b      	bhi.n	800fba4 <_strtol_l.constprop.0+0xa8>
 800fb6c:	463c      	mov	r4, r7
 800fb6e:	42a3      	cmp	r3, r4
 800fb70:	dd27      	ble.n	800fbc2 <_strtol_l.constprop.0+0xc6>
 800fb72:	1c57      	adds	r7, r2, #1
 800fb74:	d007      	beq.n	800fb86 <_strtol_l.constprop.0+0x8a>
 800fb76:	4581      	cmp	r9, r0
 800fb78:	d320      	bcc.n	800fbbc <_strtol_l.constprop.0+0xc0>
 800fb7a:	d101      	bne.n	800fb80 <_strtol_l.constprop.0+0x84>
 800fb7c:	45a2      	cmp	sl, r4
 800fb7e:	db1d      	blt.n	800fbbc <_strtol_l.constprop.0+0xc0>
 800fb80:	fb00 4003 	mla	r0, r0, r3, r4
 800fb84:	2201      	movs	r2, #1
 800fb86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fb8a:	e7eb      	b.n	800fb64 <_strtol_l.constprop.0+0x68>
 800fb8c:	2c2b      	cmp	r4, #43	@ 0x2b
 800fb8e:	bf04      	itt	eq
 800fb90:	782c      	ldrbeq	r4, [r5, #0]
 800fb92:	1c95      	addeq	r5, r2, #2
 800fb94:	e7cf      	b.n	800fb36 <_strtol_l.constprop.0+0x3a>
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d1da      	bne.n	800fb50 <_strtol_l.constprop.0+0x54>
 800fb9a:	2c30      	cmp	r4, #48	@ 0x30
 800fb9c:	bf0c      	ite	eq
 800fb9e:	2308      	moveq	r3, #8
 800fba0:	230a      	movne	r3, #10
 800fba2:	e7d5      	b.n	800fb50 <_strtol_l.constprop.0+0x54>
 800fba4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fba8:	2f19      	cmp	r7, #25
 800fbaa:	d801      	bhi.n	800fbb0 <_strtol_l.constprop.0+0xb4>
 800fbac:	3c37      	subs	r4, #55	@ 0x37
 800fbae:	e7de      	b.n	800fb6e <_strtol_l.constprop.0+0x72>
 800fbb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fbb4:	2f19      	cmp	r7, #25
 800fbb6:	d804      	bhi.n	800fbc2 <_strtol_l.constprop.0+0xc6>
 800fbb8:	3c57      	subs	r4, #87	@ 0x57
 800fbba:	e7d8      	b.n	800fb6e <_strtol_l.constprop.0+0x72>
 800fbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800fbc0:	e7e1      	b.n	800fb86 <_strtol_l.constprop.0+0x8a>
 800fbc2:	1c53      	adds	r3, r2, #1
 800fbc4:	d108      	bne.n	800fbd8 <_strtol_l.constprop.0+0xdc>
 800fbc6:	2322      	movs	r3, #34	@ 0x22
 800fbc8:	f8ce 3000 	str.w	r3, [lr]
 800fbcc:	4660      	mov	r0, ip
 800fbce:	f1b8 0f00 	cmp.w	r8, #0
 800fbd2:	d0a0      	beq.n	800fb16 <_strtol_l.constprop.0+0x1a>
 800fbd4:	1e69      	subs	r1, r5, #1
 800fbd6:	e006      	b.n	800fbe6 <_strtol_l.constprop.0+0xea>
 800fbd8:	b106      	cbz	r6, 800fbdc <_strtol_l.constprop.0+0xe0>
 800fbda:	4240      	negs	r0, r0
 800fbdc:	f1b8 0f00 	cmp.w	r8, #0
 800fbe0:	d099      	beq.n	800fb16 <_strtol_l.constprop.0+0x1a>
 800fbe2:	2a00      	cmp	r2, #0
 800fbe4:	d1f6      	bne.n	800fbd4 <_strtol_l.constprop.0+0xd8>
 800fbe6:	f8c8 1000 	str.w	r1, [r8]
 800fbea:	e794      	b.n	800fb16 <_strtol_l.constprop.0+0x1a>
 800fbec:	08010f01 	.word	0x08010f01

0800fbf0 <_strtol_r>:
 800fbf0:	f7ff bf84 	b.w	800fafc <_strtol_l.constprop.0>

0800fbf4 <__ascii_wctomb>:
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	4608      	mov	r0, r1
 800fbf8:	b141      	cbz	r1, 800fc0c <__ascii_wctomb+0x18>
 800fbfa:	2aff      	cmp	r2, #255	@ 0xff
 800fbfc:	d904      	bls.n	800fc08 <__ascii_wctomb+0x14>
 800fbfe:	228a      	movs	r2, #138	@ 0x8a
 800fc00:	601a      	str	r2, [r3, #0]
 800fc02:	f04f 30ff 	mov.w	r0, #4294967295
 800fc06:	4770      	bx	lr
 800fc08:	700a      	strb	r2, [r1, #0]
 800fc0a:	2001      	movs	r0, #1
 800fc0c:	4770      	bx	lr

0800fc0e <__ssputs_r>:
 800fc0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc12:	688e      	ldr	r6, [r1, #8]
 800fc14:	461f      	mov	r7, r3
 800fc16:	42be      	cmp	r6, r7
 800fc18:	680b      	ldr	r3, [r1, #0]
 800fc1a:	4682      	mov	sl, r0
 800fc1c:	460c      	mov	r4, r1
 800fc1e:	4690      	mov	r8, r2
 800fc20:	d82d      	bhi.n	800fc7e <__ssputs_r+0x70>
 800fc22:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc26:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc2a:	d026      	beq.n	800fc7a <__ssputs_r+0x6c>
 800fc2c:	6965      	ldr	r5, [r4, #20]
 800fc2e:	6909      	ldr	r1, [r1, #16]
 800fc30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc34:	eba3 0901 	sub.w	r9, r3, r1
 800fc38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc3c:	1c7b      	adds	r3, r7, #1
 800fc3e:	444b      	add	r3, r9
 800fc40:	106d      	asrs	r5, r5, #1
 800fc42:	429d      	cmp	r5, r3
 800fc44:	bf38      	it	cc
 800fc46:	461d      	movcc	r5, r3
 800fc48:	0553      	lsls	r3, r2, #21
 800fc4a:	d527      	bpl.n	800fc9c <__ssputs_r+0x8e>
 800fc4c:	4629      	mov	r1, r5
 800fc4e:	f7ff fa05 	bl	800f05c <_malloc_r>
 800fc52:	4606      	mov	r6, r0
 800fc54:	b360      	cbz	r0, 800fcb0 <__ssputs_r+0xa2>
 800fc56:	6921      	ldr	r1, [r4, #16]
 800fc58:	464a      	mov	r2, r9
 800fc5a:	f7fd ffca 	bl	800dbf2 <memcpy>
 800fc5e:	89a3      	ldrh	r3, [r4, #12]
 800fc60:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fc64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc68:	81a3      	strh	r3, [r4, #12]
 800fc6a:	6126      	str	r6, [r4, #16]
 800fc6c:	6165      	str	r5, [r4, #20]
 800fc6e:	444e      	add	r6, r9
 800fc70:	eba5 0509 	sub.w	r5, r5, r9
 800fc74:	6026      	str	r6, [r4, #0]
 800fc76:	60a5      	str	r5, [r4, #8]
 800fc78:	463e      	mov	r6, r7
 800fc7a:	42be      	cmp	r6, r7
 800fc7c:	d900      	bls.n	800fc80 <__ssputs_r+0x72>
 800fc7e:	463e      	mov	r6, r7
 800fc80:	6820      	ldr	r0, [r4, #0]
 800fc82:	4632      	mov	r2, r6
 800fc84:	4641      	mov	r1, r8
 800fc86:	f000 f9d7 	bl	8010038 <memmove>
 800fc8a:	68a3      	ldr	r3, [r4, #8]
 800fc8c:	1b9b      	subs	r3, r3, r6
 800fc8e:	60a3      	str	r3, [r4, #8]
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	4433      	add	r3, r6
 800fc94:	6023      	str	r3, [r4, #0]
 800fc96:	2000      	movs	r0, #0
 800fc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc9c:	462a      	mov	r2, r5
 800fc9e:	f000 fa10 	bl	80100c2 <_realloc_r>
 800fca2:	4606      	mov	r6, r0
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d1e0      	bne.n	800fc6a <__ssputs_r+0x5c>
 800fca8:	6921      	ldr	r1, [r4, #16]
 800fcaa:	4650      	mov	r0, sl
 800fcac:	f7fe fe28 	bl	800e900 <_free_r>
 800fcb0:	230c      	movs	r3, #12
 800fcb2:	f8ca 3000 	str.w	r3, [sl]
 800fcb6:	89a3      	ldrh	r3, [r4, #12]
 800fcb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcbc:	81a3      	strh	r3, [r4, #12]
 800fcbe:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc2:	e7e9      	b.n	800fc98 <__ssputs_r+0x8a>

0800fcc4 <_svfiprintf_r>:
 800fcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc8:	4698      	mov	r8, r3
 800fcca:	898b      	ldrh	r3, [r1, #12]
 800fccc:	061b      	lsls	r3, r3, #24
 800fcce:	b09d      	sub	sp, #116	@ 0x74
 800fcd0:	4607      	mov	r7, r0
 800fcd2:	460d      	mov	r5, r1
 800fcd4:	4614      	mov	r4, r2
 800fcd6:	d510      	bpl.n	800fcfa <_svfiprintf_r+0x36>
 800fcd8:	690b      	ldr	r3, [r1, #16]
 800fcda:	b973      	cbnz	r3, 800fcfa <_svfiprintf_r+0x36>
 800fcdc:	2140      	movs	r1, #64	@ 0x40
 800fcde:	f7ff f9bd 	bl	800f05c <_malloc_r>
 800fce2:	6028      	str	r0, [r5, #0]
 800fce4:	6128      	str	r0, [r5, #16]
 800fce6:	b930      	cbnz	r0, 800fcf6 <_svfiprintf_r+0x32>
 800fce8:	230c      	movs	r3, #12
 800fcea:	603b      	str	r3, [r7, #0]
 800fcec:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf0:	b01d      	add	sp, #116	@ 0x74
 800fcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf6:	2340      	movs	r3, #64	@ 0x40
 800fcf8:	616b      	str	r3, [r5, #20]
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcfe:	2320      	movs	r3, #32
 800fd00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd04:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd08:	2330      	movs	r3, #48	@ 0x30
 800fd0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fea8 <_svfiprintf_r+0x1e4>
 800fd0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd12:	f04f 0901 	mov.w	r9, #1
 800fd16:	4623      	mov	r3, r4
 800fd18:	469a      	mov	sl, r3
 800fd1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd1e:	b10a      	cbz	r2, 800fd24 <_svfiprintf_r+0x60>
 800fd20:	2a25      	cmp	r2, #37	@ 0x25
 800fd22:	d1f9      	bne.n	800fd18 <_svfiprintf_r+0x54>
 800fd24:	ebba 0b04 	subs.w	fp, sl, r4
 800fd28:	d00b      	beq.n	800fd42 <_svfiprintf_r+0x7e>
 800fd2a:	465b      	mov	r3, fp
 800fd2c:	4622      	mov	r2, r4
 800fd2e:	4629      	mov	r1, r5
 800fd30:	4638      	mov	r0, r7
 800fd32:	f7ff ff6c 	bl	800fc0e <__ssputs_r>
 800fd36:	3001      	adds	r0, #1
 800fd38:	f000 80a7 	beq.w	800fe8a <_svfiprintf_r+0x1c6>
 800fd3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd3e:	445a      	add	r2, fp
 800fd40:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd42:	f89a 3000 	ldrb.w	r3, [sl]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f000 809f 	beq.w	800fe8a <_svfiprintf_r+0x1c6>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd56:	f10a 0a01 	add.w	sl, sl, #1
 800fd5a:	9304      	str	r3, [sp, #16]
 800fd5c:	9307      	str	r3, [sp, #28]
 800fd5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd62:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd64:	4654      	mov	r4, sl
 800fd66:	2205      	movs	r2, #5
 800fd68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd6c:	484e      	ldr	r0, [pc, #312]	@ (800fea8 <_svfiprintf_r+0x1e4>)
 800fd6e:	f7f0 fa4f 	bl	8000210 <memchr>
 800fd72:	9a04      	ldr	r2, [sp, #16]
 800fd74:	b9d8      	cbnz	r0, 800fdae <_svfiprintf_r+0xea>
 800fd76:	06d0      	lsls	r0, r2, #27
 800fd78:	bf44      	itt	mi
 800fd7a:	2320      	movmi	r3, #32
 800fd7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd80:	0711      	lsls	r1, r2, #28
 800fd82:	bf44      	itt	mi
 800fd84:	232b      	movmi	r3, #43	@ 0x2b
 800fd86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd8a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd90:	d015      	beq.n	800fdbe <_svfiprintf_r+0xfa>
 800fd92:	9a07      	ldr	r2, [sp, #28]
 800fd94:	4654      	mov	r4, sl
 800fd96:	2000      	movs	r0, #0
 800fd98:	f04f 0c0a 	mov.w	ip, #10
 800fd9c:	4621      	mov	r1, r4
 800fd9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fda2:	3b30      	subs	r3, #48	@ 0x30
 800fda4:	2b09      	cmp	r3, #9
 800fda6:	d94b      	bls.n	800fe40 <_svfiprintf_r+0x17c>
 800fda8:	b1b0      	cbz	r0, 800fdd8 <_svfiprintf_r+0x114>
 800fdaa:	9207      	str	r2, [sp, #28]
 800fdac:	e014      	b.n	800fdd8 <_svfiprintf_r+0x114>
 800fdae:	eba0 0308 	sub.w	r3, r0, r8
 800fdb2:	fa09 f303 	lsl.w	r3, r9, r3
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	9304      	str	r3, [sp, #16]
 800fdba:	46a2      	mov	sl, r4
 800fdbc:	e7d2      	b.n	800fd64 <_svfiprintf_r+0xa0>
 800fdbe:	9b03      	ldr	r3, [sp, #12]
 800fdc0:	1d19      	adds	r1, r3, #4
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	9103      	str	r1, [sp, #12]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	bfbb      	ittet	lt
 800fdca:	425b      	neglt	r3, r3
 800fdcc:	f042 0202 	orrlt.w	r2, r2, #2
 800fdd0:	9307      	strge	r3, [sp, #28]
 800fdd2:	9307      	strlt	r3, [sp, #28]
 800fdd4:	bfb8      	it	lt
 800fdd6:	9204      	strlt	r2, [sp, #16]
 800fdd8:	7823      	ldrb	r3, [r4, #0]
 800fdda:	2b2e      	cmp	r3, #46	@ 0x2e
 800fddc:	d10a      	bne.n	800fdf4 <_svfiprintf_r+0x130>
 800fdde:	7863      	ldrb	r3, [r4, #1]
 800fde0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fde2:	d132      	bne.n	800fe4a <_svfiprintf_r+0x186>
 800fde4:	9b03      	ldr	r3, [sp, #12]
 800fde6:	1d1a      	adds	r2, r3, #4
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	9203      	str	r2, [sp, #12]
 800fdec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fdf0:	3402      	adds	r4, #2
 800fdf2:	9305      	str	r3, [sp, #20]
 800fdf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800feb8 <_svfiprintf_r+0x1f4>
 800fdf8:	7821      	ldrb	r1, [r4, #0]
 800fdfa:	2203      	movs	r2, #3
 800fdfc:	4650      	mov	r0, sl
 800fdfe:	f7f0 fa07 	bl	8000210 <memchr>
 800fe02:	b138      	cbz	r0, 800fe14 <_svfiprintf_r+0x150>
 800fe04:	9b04      	ldr	r3, [sp, #16]
 800fe06:	eba0 000a 	sub.w	r0, r0, sl
 800fe0a:	2240      	movs	r2, #64	@ 0x40
 800fe0c:	4082      	lsls	r2, r0
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	3401      	adds	r4, #1
 800fe12:	9304      	str	r3, [sp, #16]
 800fe14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe18:	4824      	ldr	r0, [pc, #144]	@ (800feac <_svfiprintf_r+0x1e8>)
 800fe1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe1e:	2206      	movs	r2, #6
 800fe20:	f7f0 f9f6 	bl	8000210 <memchr>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d036      	beq.n	800fe96 <_svfiprintf_r+0x1d2>
 800fe28:	4b21      	ldr	r3, [pc, #132]	@ (800feb0 <_svfiprintf_r+0x1ec>)
 800fe2a:	bb1b      	cbnz	r3, 800fe74 <_svfiprintf_r+0x1b0>
 800fe2c:	9b03      	ldr	r3, [sp, #12]
 800fe2e:	3307      	adds	r3, #7
 800fe30:	f023 0307 	bic.w	r3, r3, #7
 800fe34:	3308      	adds	r3, #8
 800fe36:	9303      	str	r3, [sp, #12]
 800fe38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe3a:	4433      	add	r3, r6
 800fe3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe3e:	e76a      	b.n	800fd16 <_svfiprintf_r+0x52>
 800fe40:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe44:	460c      	mov	r4, r1
 800fe46:	2001      	movs	r0, #1
 800fe48:	e7a8      	b.n	800fd9c <_svfiprintf_r+0xd8>
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	3401      	adds	r4, #1
 800fe4e:	9305      	str	r3, [sp, #20]
 800fe50:	4619      	mov	r1, r3
 800fe52:	f04f 0c0a 	mov.w	ip, #10
 800fe56:	4620      	mov	r0, r4
 800fe58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe5c:	3a30      	subs	r2, #48	@ 0x30
 800fe5e:	2a09      	cmp	r2, #9
 800fe60:	d903      	bls.n	800fe6a <_svfiprintf_r+0x1a6>
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d0c6      	beq.n	800fdf4 <_svfiprintf_r+0x130>
 800fe66:	9105      	str	r1, [sp, #20]
 800fe68:	e7c4      	b.n	800fdf4 <_svfiprintf_r+0x130>
 800fe6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe6e:	4604      	mov	r4, r0
 800fe70:	2301      	movs	r3, #1
 800fe72:	e7f0      	b.n	800fe56 <_svfiprintf_r+0x192>
 800fe74:	ab03      	add	r3, sp, #12
 800fe76:	9300      	str	r3, [sp, #0]
 800fe78:	462a      	mov	r2, r5
 800fe7a:	4b0e      	ldr	r3, [pc, #56]	@ (800feb4 <_svfiprintf_r+0x1f0>)
 800fe7c:	a904      	add	r1, sp, #16
 800fe7e:	4638      	mov	r0, r7
 800fe80:	f7fc fed8 	bl	800cc34 <_printf_float>
 800fe84:	1c42      	adds	r2, r0, #1
 800fe86:	4606      	mov	r6, r0
 800fe88:	d1d6      	bne.n	800fe38 <_svfiprintf_r+0x174>
 800fe8a:	89ab      	ldrh	r3, [r5, #12]
 800fe8c:	065b      	lsls	r3, r3, #25
 800fe8e:	f53f af2d 	bmi.w	800fcec <_svfiprintf_r+0x28>
 800fe92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe94:	e72c      	b.n	800fcf0 <_svfiprintf_r+0x2c>
 800fe96:	ab03      	add	r3, sp, #12
 800fe98:	9300      	str	r3, [sp, #0]
 800fe9a:	462a      	mov	r2, r5
 800fe9c:	4b05      	ldr	r3, [pc, #20]	@ (800feb4 <_svfiprintf_r+0x1f0>)
 800fe9e:	a904      	add	r1, sp, #16
 800fea0:	4638      	mov	r0, r7
 800fea2:	f7fd f95f 	bl	800d164 <_printf_i>
 800fea6:	e7ed      	b.n	800fe84 <_svfiprintf_r+0x1c0>
 800fea8:	08011001 	.word	0x08011001
 800feac:	0801100b 	.word	0x0801100b
 800feb0:	0800cc35 	.word	0x0800cc35
 800feb4:	0800fc0f 	.word	0x0800fc0f
 800feb8:	08011007 	.word	0x08011007

0800febc <__sflush_r>:
 800febc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fec4:	0716      	lsls	r6, r2, #28
 800fec6:	4605      	mov	r5, r0
 800fec8:	460c      	mov	r4, r1
 800feca:	d454      	bmi.n	800ff76 <__sflush_r+0xba>
 800fecc:	684b      	ldr	r3, [r1, #4]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	dc02      	bgt.n	800fed8 <__sflush_r+0x1c>
 800fed2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	dd48      	ble.n	800ff6a <__sflush_r+0xae>
 800fed8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800feda:	2e00      	cmp	r6, #0
 800fedc:	d045      	beq.n	800ff6a <__sflush_r+0xae>
 800fede:	2300      	movs	r3, #0
 800fee0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fee4:	682f      	ldr	r7, [r5, #0]
 800fee6:	6a21      	ldr	r1, [r4, #32]
 800fee8:	602b      	str	r3, [r5, #0]
 800feea:	d030      	beq.n	800ff4e <__sflush_r+0x92>
 800feec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800feee:	89a3      	ldrh	r3, [r4, #12]
 800fef0:	0759      	lsls	r1, r3, #29
 800fef2:	d505      	bpl.n	800ff00 <__sflush_r+0x44>
 800fef4:	6863      	ldr	r3, [r4, #4]
 800fef6:	1ad2      	subs	r2, r2, r3
 800fef8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fefa:	b10b      	cbz	r3, 800ff00 <__sflush_r+0x44>
 800fefc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fefe:	1ad2      	subs	r2, r2, r3
 800ff00:	2300      	movs	r3, #0
 800ff02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff04:	6a21      	ldr	r1, [r4, #32]
 800ff06:	4628      	mov	r0, r5
 800ff08:	47b0      	blx	r6
 800ff0a:	1c43      	adds	r3, r0, #1
 800ff0c:	89a3      	ldrh	r3, [r4, #12]
 800ff0e:	d106      	bne.n	800ff1e <__sflush_r+0x62>
 800ff10:	6829      	ldr	r1, [r5, #0]
 800ff12:	291d      	cmp	r1, #29
 800ff14:	d82b      	bhi.n	800ff6e <__sflush_r+0xb2>
 800ff16:	4a2a      	ldr	r2, [pc, #168]	@ (800ffc0 <__sflush_r+0x104>)
 800ff18:	410a      	asrs	r2, r1
 800ff1a:	07d6      	lsls	r6, r2, #31
 800ff1c:	d427      	bmi.n	800ff6e <__sflush_r+0xb2>
 800ff1e:	2200      	movs	r2, #0
 800ff20:	6062      	str	r2, [r4, #4]
 800ff22:	04d9      	lsls	r1, r3, #19
 800ff24:	6922      	ldr	r2, [r4, #16]
 800ff26:	6022      	str	r2, [r4, #0]
 800ff28:	d504      	bpl.n	800ff34 <__sflush_r+0x78>
 800ff2a:	1c42      	adds	r2, r0, #1
 800ff2c:	d101      	bne.n	800ff32 <__sflush_r+0x76>
 800ff2e:	682b      	ldr	r3, [r5, #0]
 800ff30:	b903      	cbnz	r3, 800ff34 <__sflush_r+0x78>
 800ff32:	6560      	str	r0, [r4, #84]	@ 0x54
 800ff34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff36:	602f      	str	r7, [r5, #0]
 800ff38:	b1b9      	cbz	r1, 800ff6a <__sflush_r+0xae>
 800ff3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff3e:	4299      	cmp	r1, r3
 800ff40:	d002      	beq.n	800ff48 <__sflush_r+0x8c>
 800ff42:	4628      	mov	r0, r5
 800ff44:	f7fe fcdc 	bl	800e900 <_free_r>
 800ff48:	2300      	movs	r3, #0
 800ff4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff4c:	e00d      	b.n	800ff6a <__sflush_r+0xae>
 800ff4e:	2301      	movs	r3, #1
 800ff50:	4628      	mov	r0, r5
 800ff52:	47b0      	blx	r6
 800ff54:	4602      	mov	r2, r0
 800ff56:	1c50      	adds	r0, r2, #1
 800ff58:	d1c9      	bne.n	800feee <__sflush_r+0x32>
 800ff5a:	682b      	ldr	r3, [r5, #0]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d0c6      	beq.n	800feee <__sflush_r+0x32>
 800ff60:	2b1d      	cmp	r3, #29
 800ff62:	d001      	beq.n	800ff68 <__sflush_r+0xac>
 800ff64:	2b16      	cmp	r3, #22
 800ff66:	d11e      	bne.n	800ffa6 <__sflush_r+0xea>
 800ff68:	602f      	str	r7, [r5, #0]
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	e022      	b.n	800ffb4 <__sflush_r+0xf8>
 800ff6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff72:	b21b      	sxth	r3, r3
 800ff74:	e01b      	b.n	800ffae <__sflush_r+0xf2>
 800ff76:	690f      	ldr	r7, [r1, #16]
 800ff78:	2f00      	cmp	r7, #0
 800ff7a:	d0f6      	beq.n	800ff6a <__sflush_r+0xae>
 800ff7c:	0793      	lsls	r3, r2, #30
 800ff7e:	680e      	ldr	r6, [r1, #0]
 800ff80:	bf08      	it	eq
 800ff82:	694b      	ldreq	r3, [r1, #20]
 800ff84:	600f      	str	r7, [r1, #0]
 800ff86:	bf18      	it	ne
 800ff88:	2300      	movne	r3, #0
 800ff8a:	eba6 0807 	sub.w	r8, r6, r7
 800ff8e:	608b      	str	r3, [r1, #8]
 800ff90:	f1b8 0f00 	cmp.w	r8, #0
 800ff94:	dde9      	ble.n	800ff6a <__sflush_r+0xae>
 800ff96:	6a21      	ldr	r1, [r4, #32]
 800ff98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ff9a:	4643      	mov	r3, r8
 800ff9c:	463a      	mov	r2, r7
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	47b0      	blx	r6
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	dc08      	bgt.n	800ffb8 <__sflush_r+0xfc>
 800ffa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffae:	81a3      	strh	r3, [r4, #12]
 800ffb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ffb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffb8:	4407      	add	r7, r0
 800ffba:	eba8 0800 	sub.w	r8, r8, r0
 800ffbe:	e7e7      	b.n	800ff90 <__sflush_r+0xd4>
 800ffc0:	dfbffffe 	.word	0xdfbffffe

0800ffc4 <_fflush_r>:
 800ffc4:	b538      	push	{r3, r4, r5, lr}
 800ffc6:	690b      	ldr	r3, [r1, #16]
 800ffc8:	4605      	mov	r5, r0
 800ffca:	460c      	mov	r4, r1
 800ffcc:	b913      	cbnz	r3, 800ffd4 <_fflush_r+0x10>
 800ffce:	2500      	movs	r5, #0
 800ffd0:	4628      	mov	r0, r5
 800ffd2:	bd38      	pop	{r3, r4, r5, pc}
 800ffd4:	b118      	cbz	r0, 800ffde <_fflush_r+0x1a>
 800ffd6:	6a03      	ldr	r3, [r0, #32]
 800ffd8:	b90b      	cbnz	r3, 800ffde <_fflush_r+0x1a>
 800ffda:	f7fd fc83 	bl	800d8e4 <__sinit>
 800ffde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d0f3      	beq.n	800ffce <_fflush_r+0xa>
 800ffe6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ffe8:	07d0      	lsls	r0, r2, #31
 800ffea:	d404      	bmi.n	800fff6 <_fflush_r+0x32>
 800ffec:	0599      	lsls	r1, r3, #22
 800ffee:	d402      	bmi.n	800fff6 <_fflush_r+0x32>
 800fff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fff2:	f7fd fdfc 	bl	800dbee <__retarget_lock_acquire_recursive>
 800fff6:	4628      	mov	r0, r5
 800fff8:	4621      	mov	r1, r4
 800fffa:	f7ff ff5f 	bl	800febc <__sflush_r>
 800fffe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010000:	07da      	lsls	r2, r3, #31
 8010002:	4605      	mov	r5, r0
 8010004:	d4e4      	bmi.n	800ffd0 <_fflush_r+0xc>
 8010006:	89a3      	ldrh	r3, [r4, #12]
 8010008:	059b      	lsls	r3, r3, #22
 801000a:	d4e1      	bmi.n	800ffd0 <_fflush_r+0xc>
 801000c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801000e:	f7fd fdef 	bl	800dbf0 <__retarget_lock_release_recursive>
 8010012:	e7dd      	b.n	800ffd0 <_fflush_r+0xc>

08010014 <fiprintf>:
 8010014:	b40e      	push	{r1, r2, r3}
 8010016:	b503      	push	{r0, r1, lr}
 8010018:	4601      	mov	r1, r0
 801001a:	ab03      	add	r3, sp, #12
 801001c:	4805      	ldr	r0, [pc, #20]	@ (8010034 <fiprintf+0x20>)
 801001e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010022:	6800      	ldr	r0, [r0, #0]
 8010024:	9301      	str	r3, [sp, #4]
 8010026:	f000 f8a3 	bl	8010170 <_vfiprintf_r>
 801002a:	b002      	add	sp, #8
 801002c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010030:	b003      	add	sp, #12
 8010032:	4770      	bx	lr
 8010034:	20000198 	.word	0x20000198

08010038 <memmove>:
 8010038:	4288      	cmp	r0, r1
 801003a:	b510      	push	{r4, lr}
 801003c:	eb01 0402 	add.w	r4, r1, r2
 8010040:	d902      	bls.n	8010048 <memmove+0x10>
 8010042:	4284      	cmp	r4, r0
 8010044:	4623      	mov	r3, r4
 8010046:	d807      	bhi.n	8010058 <memmove+0x20>
 8010048:	1e43      	subs	r3, r0, #1
 801004a:	42a1      	cmp	r1, r4
 801004c:	d008      	beq.n	8010060 <memmove+0x28>
 801004e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010056:	e7f8      	b.n	801004a <memmove+0x12>
 8010058:	4402      	add	r2, r0
 801005a:	4601      	mov	r1, r0
 801005c:	428a      	cmp	r2, r1
 801005e:	d100      	bne.n	8010062 <memmove+0x2a>
 8010060:	bd10      	pop	{r4, pc}
 8010062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801006a:	e7f7      	b.n	801005c <memmove+0x24>

0801006c <_sbrk_r>:
 801006c:	b538      	push	{r3, r4, r5, lr}
 801006e:	4d06      	ldr	r5, [pc, #24]	@ (8010088 <_sbrk_r+0x1c>)
 8010070:	2300      	movs	r3, #0
 8010072:	4604      	mov	r4, r0
 8010074:	4608      	mov	r0, r1
 8010076:	602b      	str	r3, [r5, #0]
 8010078:	f7f5 fcae 	bl	80059d8 <_sbrk>
 801007c:	1c43      	adds	r3, r0, #1
 801007e:	d102      	bne.n	8010086 <_sbrk_r+0x1a>
 8010080:	682b      	ldr	r3, [r5, #0]
 8010082:	b103      	cbz	r3, 8010086 <_sbrk_r+0x1a>
 8010084:	6023      	str	r3, [r4, #0]
 8010086:	bd38      	pop	{r3, r4, r5, pc}
 8010088:	200015cc 	.word	0x200015cc

0801008c <abort>:
 801008c:	b508      	push	{r3, lr}
 801008e:	2006      	movs	r0, #6
 8010090:	f000 fa42 	bl	8010518 <raise>
 8010094:	2001      	movs	r0, #1
 8010096:	f7f5 fc26 	bl	80058e6 <_exit>

0801009a <_calloc_r>:
 801009a:	b570      	push	{r4, r5, r6, lr}
 801009c:	fba1 5402 	umull	r5, r4, r1, r2
 80100a0:	b93c      	cbnz	r4, 80100b2 <_calloc_r+0x18>
 80100a2:	4629      	mov	r1, r5
 80100a4:	f7fe ffda 	bl	800f05c <_malloc_r>
 80100a8:	4606      	mov	r6, r0
 80100aa:	b928      	cbnz	r0, 80100b8 <_calloc_r+0x1e>
 80100ac:	2600      	movs	r6, #0
 80100ae:	4630      	mov	r0, r6
 80100b0:	bd70      	pop	{r4, r5, r6, pc}
 80100b2:	220c      	movs	r2, #12
 80100b4:	6002      	str	r2, [r0, #0]
 80100b6:	e7f9      	b.n	80100ac <_calloc_r+0x12>
 80100b8:	462a      	mov	r2, r5
 80100ba:	4621      	mov	r1, r4
 80100bc:	f7fd fcab 	bl	800da16 <memset>
 80100c0:	e7f5      	b.n	80100ae <_calloc_r+0x14>

080100c2 <_realloc_r>:
 80100c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c6:	4680      	mov	r8, r0
 80100c8:	4615      	mov	r5, r2
 80100ca:	460c      	mov	r4, r1
 80100cc:	b921      	cbnz	r1, 80100d8 <_realloc_r+0x16>
 80100ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100d2:	4611      	mov	r1, r2
 80100d4:	f7fe bfc2 	b.w	800f05c <_malloc_r>
 80100d8:	b92a      	cbnz	r2, 80100e6 <_realloc_r+0x24>
 80100da:	f7fe fc11 	bl	800e900 <_free_r>
 80100de:	2400      	movs	r4, #0
 80100e0:	4620      	mov	r0, r4
 80100e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100e6:	f000 fa33 	bl	8010550 <_malloc_usable_size_r>
 80100ea:	4285      	cmp	r5, r0
 80100ec:	4606      	mov	r6, r0
 80100ee:	d802      	bhi.n	80100f6 <_realloc_r+0x34>
 80100f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80100f4:	d8f4      	bhi.n	80100e0 <_realloc_r+0x1e>
 80100f6:	4629      	mov	r1, r5
 80100f8:	4640      	mov	r0, r8
 80100fa:	f7fe ffaf 	bl	800f05c <_malloc_r>
 80100fe:	4607      	mov	r7, r0
 8010100:	2800      	cmp	r0, #0
 8010102:	d0ec      	beq.n	80100de <_realloc_r+0x1c>
 8010104:	42b5      	cmp	r5, r6
 8010106:	462a      	mov	r2, r5
 8010108:	4621      	mov	r1, r4
 801010a:	bf28      	it	cs
 801010c:	4632      	movcs	r2, r6
 801010e:	f7fd fd70 	bl	800dbf2 <memcpy>
 8010112:	4621      	mov	r1, r4
 8010114:	4640      	mov	r0, r8
 8010116:	f7fe fbf3 	bl	800e900 <_free_r>
 801011a:	463c      	mov	r4, r7
 801011c:	e7e0      	b.n	80100e0 <_realloc_r+0x1e>

0801011e <__sfputc_r>:
 801011e:	6893      	ldr	r3, [r2, #8]
 8010120:	3b01      	subs	r3, #1
 8010122:	2b00      	cmp	r3, #0
 8010124:	b410      	push	{r4}
 8010126:	6093      	str	r3, [r2, #8]
 8010128:	da08      	bge.n	801013c <__sfputc_r+0x1e>
 801012a:	6994      	ldr	r4, [r2, #24]
 801012c:	42a3      	cmp	r3, r4
 801012e:	db01      	blt.n	8010134 <__sfputc_r+0x16>
 8010130:	290a      	cmp	r1, #10
 8010132:	d103      	bne.n	801013c <__sfputc_r+0x1e>
 8010134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010138:	f000 b932 	b.w	80103a0 <__swbuf_r>
 801013c:	6813      	ldr	r3, [r2, #0]
 801013e:	1c58      	adds	r0, r3, #1
 8010140:	6010      	str	r0, [r2, #0]
 8010142:	7019      	strb	r1, [r3, #0]
 8010144:	4608      	mov	r0, r1
 8010146:	f85d 4b04 	ldr.w	r4, [sp], #4
 801014a:	4770      	bx	lr

0801014c <__sfputs_r>:
 801014c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014e:	4606      	mov	r6, r0
 8010150:	460f      	mov	r7, r1
 8010152:	4614      	mov	r4, r2
 8010154:	18d5      	adds	r5, r2, r3
 8010156:	42ac      	cmp	r4, r5
 8010158:	d101      	bne.n	801015e <__sfputs_r+0x12>
 801015a:	2000      	movs	r0, #0
 801015c:	e007      	b.n	801016e <__sfputs_r+0x22>
 801015e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010162:	463a      	mov	r2, r7
 8010164:	4630      	mov	r0, r6
 8010166:	f7ff ffda 	bl	801011e <__sfputc_r>
 801016a:	1c43      	adds	r3, r0, #1
 801016c:	d1f3      	bne.n	8010156 <__sfputs_r+0xa>
 801016e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010170 <_vfiprintf_r>:
 8010170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010174:	460d      	mov	r5, r1
 8010176:	b09d      	sub	sp, #116	@ 0x74
 8010178:	4614      	mov	r4, r2
 801017a:	4698      	mov	r8, r3
 801017c:	4606      	mov	r6, r0
 801017e:	b118      	cbz	r0, 8010188 <_vfiprintf_r+0x18>
 8010180:	6a03      	ldr	r3, [r0, #32]
 8010182:	b90b      	cbnz	r3, 8010188 <_vfiprintf_r+0x18>
 8010184:	f7fd fbae 	bl	800d8e4 <__sinit>
 8010188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801018a:	07d9      	lsls	r1, r3, #31
 801018c:	d405      	bmi.n	801019a <_vfiprintf_r+0x2a>
 801018e:	89ab      	ldrh	r3, [r5, #12]
 8010190:	059a      	lsls	r2, r3, #22
 8010192:	d402      	bmi.n	801019a <_vfiprintf_r+0x2a>
 8010194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010196:	f7fd fd2a 	bl	800dbee <__retarget_lock_acquire_recursive>
 801019a:	89ab      	ldrh	r3, [r5, #12]
 801019c:	071b      	lsls	r3, r3, #28
 801019e:	d501      	bpl.n	80101a4 <_vfiprintf_r+0x34>
 80101a0:	692b      	ldr	r3, [r5, #16]
 80101a2:	b99b      	cbnz	r3, 80101cc <_vfiprintf_r+0x5c>
 80101a4:	4629      	mov	r1, r5
 80101a6:	4630      	mov	r0, r6
 80101a8:	f000 f938 	bl	801041c <__swsetup_r>
 80101ac:	b170      	cbz	r0, 80101cc <_vfiprintf_r+0x5c>
 80101ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101b0:	07dc      	lsls	r4, r3, #31
 80101b2:	d504      	bpl.n	80101be <_vfiprintf_r+0x4e>
 80101b4:	f04f 30ff 	mov.w	r0, #4294967295
 80101b8:	b01d      	add	sp, #116	@ 0x74
 80101ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101be:	89ab      	ldrh	r3, [r5, #12]
 80101c0:	0598      	lsls	r0, r3, #22
 80101c2:	d4f7      	bmi.n	80101b4 <_vfiprintf_r+0x44>
 80101c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101c6:	f7fd fd13 	bl	800dbf0 <__retarget_lock_release_recursive>
 80101ca:	e7f3      	b.n	80101b4 <_vfiprintf_r+0x44>
 80101cc:	2300      	movs	r3, #0
 80101ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80101d0:	2320      	movs	r3, #32
 80101d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80101d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80101da:	2330      	movs	r3, #48	@ 0x30
 80101dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801038c <_vfiprintf_r+0x21c>
 80101e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80101e4:	f04f 0901 	mov.w	r9, #1
 80101e8:	4623      	mov	r3, r4
 80101ea:	469a      	mov	sl, r3
 80101ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101f0:	b10a      	cbz	r2, 80101f6 <_vfiprintf_r+0x86>
 80101f2:	2a25      	cmp	r2, #37	@ 0x25
 80101f4:	d1f9      	bne.n	80101ea <_vfiprintf_r+0x7a>
 80101f6:	ebba 0b04 	subs.w	fp, sl, r4
 80101fa:	d00b      	beq.n	8010214 <_vfiprintf_r+0xa4>
 80101fc:	465b      	mov	r3, fp
 80101fe:	4622      	mov	r2, r4
 8010200:	4629      	mov	r1, r5
 8010202:	4630      	mov	r0, r6
 8010204:	f7ff ffa2 	bl	801014c <__sfputs_r>
 8010208:	3001      	adds	r0, #1
 801020a:	f000 80a7 	beq.w	801035c <_vfiprintf_r+0x1ec>
 801020e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010210:	445a      	add	r2, fp
 8010212:	9209      	str	r2, [sp, #36]	@ 0x24
 8010214:	f89a 3000 	ldrb.w	r3, [sl]
 8010218:	2b00      	cmp	r3, #0
 801021a:	f000 809f 	beq.w	801035c <_vfiprintf_r+0x1ec>
 801021e:	2300      	movs	r3, #0
 8010220:	f04f 32ff 	mov.w	r2, #4294967295
 8010224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010228:	f10a 0a01 	add.w	sl, sl, #1
 801022c:	9304      	str	r3, [sp, #16]
 801022e:	9307      	str	r3, [sp, #28]
 8010230:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010234:	931a      	str	r3, [sp, #104]	@ 0x68
 8010236:	4654      	mov	r4, sl
 8010238:	2205      	movs	r2, #5
 801023a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801023e:	4853      	ldr	r0, [pc, #332]	@ (801038c <_vfiprintf_r+0x21c>)
 8010240:	f7ef ffe6 	bl	8000210 <memchr>
 8010244:	9a04      	ldr	r2, [sp, #16]
 8010246:	b9d8      	cbnz	r0, 8010280 <_vfiprintf_r+0x110>
 8010248:	06d1      	lsls	r1, r2, #27
 801024a:	bf44      	itt	mi
 801024c:	2320      	movmi	r3, #32
 801024e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010252:	0713      	lsls	r3, r2, #28
 8010254:	bf44      	itt	mi
 8010256:	232b      	movmi	r3, #43	@ 0x2b
 8010258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801025c:	f89a 3000 	ldrb.w	r3, [sl]
 8010260:	2b2a      	cmp	r3, #42	@ 0x2a
 8010262:	d015      	beq.n	8010290 <_vfiprintf_r+0x120>
 8010264:	9a07      	ldr	r2, [sp, #28]
 8010266:	4654      	mov	r4, sl
 8010268:	2000      	movs	r0, #0
 801026a:	f04f 0c0a 	mov.w	ip, #10
 801026e:	4621      	mov	r1, r4
 8010270:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010274:	3b30      	subs	r3, #48	@ 0x30
 8010276:	2b09      	cmp	r3, #9
 8010278:	d94b      	bls.n	8010312 <_vfiprintf_r+0x1a2>
 801027a:	b1b0      	cbz	r0, 80102aa <_vfiprintf_r+0x13a>
 801027c:	9207      	str	r2, [sp, #28]
 801027e:	e014      	b.n	80102aa <_vfiprintf_r+0x13a>
 8010280:	eba0 0308 	sub.w	r3, r0, r8
 8010284:	fa09 f303 	lsl.w	r3, r9, r3
 8010288:	4313      	orrs	r3, r2
 801028a:	9304      	str	r3, [sp, #16]
 801028c:	46a2      	mov	sl, r4
 801028e:	e7d2      	b.n	8010236 <_vfiprintf_r+0xc6>
 8010290:	9b03      	ldr	r3, [sp, #12]
 8010292:	1d19      	adds	r1, r3, #4
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	9103      	str	r1, [sp, #12]
 8010298:	2b00      	cmp	r3, #0
 801029a:	bfbb      	ittet	lt
 801029c:	425b      	neglt	r3, r3
 801029e:	f042 0202 	orrlt.w	r2, r2, #2
 80102a2:	9307      	strge	r3, [sp, #28]
 80102a4:	9307      	strlt	r3, [sp, #28]
 80102a6:	bfb8      	it	lt
 80102a8:	9204      	strlt	r2, [sp, #16]
 80102aa:	7823      	ldrb	r3, [r4, #0]
 80102ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80102ae:	d10a      	bne.n	80102c6 <_vfiprintf_r+0x156>
 80102b0:	7863      	ldrb	r3, [r4, #1]
 80102b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80102b4:	d132      	bne.n	801031c <_vfiprintf_r+0x1ac>
 80102b6:	9b03      	ldr	r3, [sp, #12]
 80102b8:	1d1a      	adds	r2, r3, #4
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	9203      	str	r2, [sp, #12]
 80102be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80102c2:	3402      	adds	r4, #2
 80102c4:	9305      	str	r3, [sp, #20]
 80102c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801039c <_vfiprintf_r+0x22c>
 80102ca:	7821      	ldrb	r1, [r4, #0]
 80102cc:	2203      	movs	r2, #3
 80102ce:	4650      	mov	r0, sl
 80102d0:	f7ef ff9e 	bl	8000210 <memchr>
 80102d4:	b138      	cbz	r0, 80102e6 <_vfiprintf_r+0x176>
 80102d6:	9b04      	ldr	r3, [sp, #16]
 80102d8:	eba0 000a 	sub.w	r0, r0, sl
 80102dc:	2240      	movs	r2, #64	@ 0x40
 80102de:	4082      	lsls	r2, r0
 80102e0:	4313      	orrs	r3, r2
 80102e2:	3401      	adds	r4, #1
 80102e4:	9304      	str	r3, [sp, #16]
 80102e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ea:	4829      	ldr	r0, [pc, #164]	@ (8010390 <_vfiprintf_r+0x220>)
 80102ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102f0:	2206      	movs	r2, #6
 80102f2:	f7ef ff8d 	bl	8000210 <memchr>
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d03f      	beq.n	801037a <_vfiprintf_r+0x20a>
 80102fa:	4b26      	ldr	r3, [pc, #152]	@ (8010394 <_vfiprintf_r+0x224>)
 80102fc:	bb1b      	cbnz	r3, 8010346 <_vfiprintf_r+0x1d6>
 80102fe:	9b03      	ldr	r3, [sp, #12]
 8010300:	3307      	adds	r3, #7
 8010302:	f023 0307 	bic.w	r3, r3, #7
 8010306:	3308      	adds	r3, #8
 8010308:	9303      	str	r3, [sp, #12]
 801030a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801030c:	443b      	add	r3, r7
 801030e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010310:	e76a      	b.n	80101e8 <_vfiprintf_r+0x78>
 8010312:	fb0c 3202 	mla	r2, ip, r2, r3
 8010316:	460c      	mov	r4, r1
 8010318:	2001      	movs	r0, #1
 801031a:	e7a8      	b.n	801026e <_vfiprintf_r+0xfe>
 801031c:	2300      	movs	r3, #0
 801031e:	3401      	adds	r4, #1
 8010320:	9305      	str	r3, [sp, #20]
 8010322:	4619      	mov	r1, r3
 8010324:	f04f 0c0a 	mov.w	ip, #10
 8010328:	4620      	mov	r0, r4
 801032a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801032e:	3a30      	subs	r2, #48	@ 0x30
 8010330:	2a09      	cmp	r2, #9
 8010332:	d903      	bls.n	801033c <_vfiprintf_r+0x1cc>
 8010334:	2b00      	cmp	r3, #0
 8010336:	d0c6      	beq.n	80102c6 <_vfiprintf_r+0x156>
 8010338:	9105      	str	r1, [sp, #20]
 801033a:	e7c4      	b.n	80102c6 <_vfiprintf_r+0x156>
 801033c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010340:	4604      	mov	r4, r0
 8010342:	2301      	movs	r3, #1
 8010344:	e7f0      	b.n	8010328 <_vfiprintf_r+0x1b8>
 8010346:	ab03      	add	r3, sp, #12
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	462a      	mov	r2, r5
 801034c:	4b12      	ldr	r3, [pc, #72]	@ (8010398 <_vfiprintf_r+0x228>)
 801034e:	a904      	add	r1, sp, #16
 8010350:	4630      	mov	r0, r6
 8010352:	f7fc fc6f 	bl	800cc34 <_printf_float>
 8010356:	4607      	mov	r7, r0
 8010358:	1c78      	adds	r0, r7, #1
 801035a:	d1d6      	bne.n	801030a <_vfiprintf_r+0x19a>
 801035c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801035e:	07d9      	lsls	r1, r3, #31
 8010360:	d405      	bmi.n	801036e <_vfiprintf_r+0x1fe>
 8010362:	89ab      	ldrh	r3, [r5, #12]
 8010364:	059a      	lsls	r2, r3, #22
 8010366:	d402      	bmi.n	801036e <_vfiprintf_r+0x1fe>
 8010368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801036a:	f7fd fc41 	bl	800dbf0 <__retarget_lock_release_recursive>
 801036e:	89ab      	ldrh	r3, [r5, #12]
 8010370:	065b      	lsls	r3, r3, #25
 8010372:	f53f af1f 	bmi.w	80101b4 <_vfiprintf_r+0x44>
 8010376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010378:	e71e      	b.n	80101b8 <_vfiprintf_r+0x48>
 801037a:	ab03      	add	r3, sp, #12
 801037c:	9300      	str	r3, [sp, #0]
 801037e:	462a      	mov	r2, r5
 8010380:	4b05      	ldr	r3, [pc, #20]	@ (8010398 <_vfiprintf_r+0x228>)
 8010382:	a904      	add	r1, sp, #16
 8010384:	4630      	mov	r0, r6
 8010386:	f7fc feed 	bl	800d164 <_printf_i>
 801038a:	e7e4      	b.n	8010356 <_vfiprintf_r+0x1e6>
 801038c:	08011001 	.word	0x08011001
 8010390:	0801100b 	.word	0x0801100b
 8010394:	0800cc35 	.word	0x0800cc35
 8010398:	0801014d 	.word	0x0801014d
 801039c:	08011007 	.word	0x08011007

080103a0 <__swbuf_r>:
 80103a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103a2:	460e      	mov	r6, r1
 80103a4:	4614      	mov	r4, r2
 80103a6:	4605      	mov	r5, r0
 80103a8:	b118      	cbz	r0, 80103b2 <__swbuf_r+0x12>
 80103aa:	6a03      	ldr	r3, [r0, #32]
 80103ac:	b90b      	cbnz	r3, 80103b2 <__swbuf_r+0x12>
 80103ae:	f7fd fa99 	bl	800d8e4 <__sinit>
 80103b2:	69a3      	ldr	r3, [r4, #24]
 80103b4:	60a3      	str	r3, [r4, #8]
 80103b6:	89a3      	ldrh	r3, [r4, #12]
 80103b8:	071a      	lsls	r2, r3, #28
 80103ba:	d501      	bpl.n	80103c0 <__swbuf_r+0x20>
 80103bc:	6923      	ldr	r3, [r4, #16]
 80103be:	b943      	cbnz	r3, 80103d2 <__swbuf_r+0x32>
 80103c0:	4621      	mov	r1, r4
 80103c2:	4628      	mov	r0, r5
 80103c4:	f000 f82a 	bl	801041c <__swsetup_r>
 80103c8:	b118      	cbz	r0, 80103d2 <__swbuf_r+0x32>
 80103ca:	f04f 37ff 	mov.w	r7, #4294967295
 80103ce:	4638      	mov	r0, r7
 80103d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103d2:	6823      	ldr	r3, [r4, #0]
 80103d4:	6922      	ldr	r2, [r4, #16]
 80103d6:	1a98      	subs	r0, r3, r2
 80103d8:	6963      	ldr	r3, [r4, #20]
 80103da:	b2f6      	uxtb	r6, r6
 80103dc:	4283      	cmp	r3, r0
 80103de:	4637      	mov	r7, r6
 80103e0:	dc05      	bgt.n	80103ee <__swbuf_r+0x4e>
 80103e2:	4621      	mov	r1, r4
 80103e4:	4628      	mov	r0, r5
 80103e6:	f7ff fded 	bl	800ffc4 <_fflush_r>
 80103ea:	2800      	cmp	r0, #0
 80103ec:	d1ed      	bne.n	80103ca <__swbuf_r+0x2a>
 80103ee:	68a3      	ldr	r3, [r4, #8]
 80103f0:	3b01      	subs	r3, #1
 80103f2:	60a3      	str	r3, [r4, #8]
 80103f4:	6823      	ldr	r3, [r4, #0]
 80103f6:	1c5a      	adds	r2, r3, #1
 80103f8:	6022      	str	r2, [r4, #0]
 80103fa:	701e      	strb	r6, [r3, #0]
 80103fc:	6962      	ldr	r2, [r4, #20]
 80103fe:	1c43      	adds	r3, r0, #1
 8010400:	429a      	cmp	r2, r3
 8010402:	d004      	beq.n	801040e <__swbuf_r+0x6e>
 8010404:	89a3      	ldrh	r3, [r4, #12]
 8010406:	07db      	lsls	r3, r3, #31
 8010408:	d5e1      	bpl.n	80103ce <__swbuf_r+0x2e>
 801040a:	2e0a      	cmp	r6, #10
 801040c:	d1df      	bne.n	80103ce <__swbuf_r+0x2e>
 801040e:	4621      	mov	r1, r4
 8010410:	4628      	mov	r0, r5
 8010412:	f7ff fdd7 	bl	800ffc4 <_fflush_r>
 8010416:	2800      	cmp	r0, #0
 8010418:	d0d9      	beq.n	80103ce <__swbuf_r+0x2e>
 801041a:	e7d6      	b.n	80103ca <__swbuf_r+0x2a>

0801041c <__swsetup_r>:
 801041c:	b538      	push	{r3, r4, r5, lr}
 801041e:	4b29      	ldr	r3, [pc, #164]	@ (80104c4 <__swsetup_r+0xa8>)
 8010420:	4605      	mov	r5, r0
 8010422:	6818      	ldr	r0, [r3, #0]
 8010424:	460c      	mov	r4, r1
 8010426:	b118      	cbz	r0, 8010430 <__swsetup_r+0x14>
 8010428:	6a03      	ldr	r3, [r0, #32]
 801042a:	b90b      	cbnz	r3, 8010430 <__swsetup_r+0x14>
 801042c:	f7fd fa5a 	bl	800d8e4 <__sinit>
 8010430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010434:	0719      	lsls	r1, r3, #28
 8010436:	d422      	bmi.n	801047e <__swsetup_r+0x62>
 8010438:	06da      	lsls	r2, r3, #27
 801043a:	d407      	bmi.n	801044c <__swsetup_r+0x30>
 801043c:	2209      	movs	r2, #9
 801043e:	602a      	str	r2, [r5, #0]
 8010440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010444:	81a3      	strh	r3, [r4, #12]
 8010446:	f04f 30ff 	mov.w	r0, #4294967295
 801044a:	e033      	b.n	80104b4 <__swsetup_r+0x98>
 801044c:	0758      	lsls	r0, r3, #29
 801044e:	d512      	bpl.n	8010476 <__swsetup_r+0x5a>
 8010450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010452:	b141      	cbz	r1, 8010466 <__swsetup_r+0x4a>
 8010454:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010458:	4299      	cmp	r1, r3
 801045a:	d002      	beq.n	8010462 <__swsetup_r+0x46>
 801045c:	4628      	mov	r0, r5
 801045e:	f7fe fa4f 	bl	800e900 <_free_r>
 8010462:	2300      	movs	r3, #0
 8010464:	6363      	str	r3, [r4, #52]	@ 0x34
 8010466:	89a3      	ldrh	r3, [r4, #12]
 8010468:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801046c:	81a3      	strh	r3, [r4, #12]
 801046e:	2300      	movs	r3, #0
 8010470:	6063      	str	r3, [r4, #4]
 8010472:	6923      	ldr	r3, [r4, #16]
 8010474:	6023      	str	r3, [r4, #0]
 8010476:	89a3      	ldrh	r3, [r4, #12]
 8010478:	f043 0308 	orr.w	r3, r3, #8
 801047c:	81a3      	strh	r3, [r4, #12]
 801047e:	6923      	ldr	r3, [r4, #16]
 8010480:	b94b      	cbnz	r3, 8010496 <__swsetup_r+0x7a>
 8010482:	89a3      	ldrh	r3, [r4, #12]
 8010484:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801048c:	d003      	beq.n	8010496 <__swsetup_r+0x7a>
 801048e:	4621      	mov	r1, r4
 8010490:	4628      	mov	r0, r5
 8010492:	f000 f88b 	bl	80105ac <__smakebuf_r>
 8010496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801049a:	f013 0201 	ands.w	r2, r3, #1
 801049e:	d00a      	beq.n	80104b6 <__swsetup_r+0x9a>
 80104a0:	2200      	movs	r2, #0
 80104a2:	60a2      	str	r2, [r4, #8]
 80104a4:	6962      	ldr	r2, [r4, #20]
 80104a6:	4252      	negs	r2, r2
 80104a8:	61a2      	str	r2, [r4, #24]
 80104aa:	6922      	ldr	r2, [r4, #16]
 80104ac:	b942      	cbnz	r2, 80104c0 <__swsetup_r+0xa4>
 80104ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80104b2:	d1c5      	bne.n	8010440 <__swsetup_r+0x24>
 80104b4:	bd38      	pop	{r3, r4, r5, pc}
 80104b6:	0799      	lsls	r1, r3, #30
 80104b8:	bf58      	it	pl
 80104ba:	6962      	ldrpl	r2, [r4, #20]
 80104bc:	60a2      	str	r2, [r4, #8]
 80104be:	e7f4      	b.n	80104aa <__swsetup_r+0x8e>
 80104c0:	2000      	movs	r0, #0
 80104c2:	e7f7      	b.n	80104b4 <__swsetup_r+0x98>
 80104c4:	20000198 	.word	0x20000198

080104c8 <_raise_r>:
 80104c8:	291f      	cmp	r1, #31
 80104ca:	b538      	push	{r3, r4, r5, lr}
 80104cc:	4605      	mov	r5, r0
 80104ce:	460c      	mov	r4, r1
 80104d0:	d904      	bls.n	80104dc <_raise_r+0x14>
 80104d2:	2316      	movs	r3, #22
 80104d4:	6003      	str	r3, [r0, #0]
 80104d6:	f04f 30ff 	mov.w	r0, #4294967295
 80104da:	bd38      	pop	{r3, r4, r5, pc}
 80104dc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80104de:	b112      	cbz	r2, 80104e6 <_raise_r+0x1e>
 80104e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80104e4:	b94b      	cbnz	r3, 80104fa <_raise_r+0x32>
 80104e6:	4628      	mov	r0, r5
 80104e8:	f000 f830 	bl	801054c <_getpid_r>
 80104ec:	4622      	mov	r2, r4
 80104ee:	4601      	mov	r1, r0
 80104f0:	4628      	mov	r0, r5
 80104f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104f6:	f000 b817 	b.w	8010528 <_kill_r>
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d00a      	beq.n	8010514 <_raise_r+0x4c>
 80104fe:	1c59      	adds	r1, r3, #1
 8010500:	d103      	bne.n	801050a <_raise_r+0x42>
 8010502:	2316      	movs	r3, #22
 8010504:	6003      	str	r3, [r0, #0]
 8010506:	2001      	movs	r0, #1
 8010508:	e7e7      	b.n	80104da <_raise_r+0x12>
 801050a:	2100      	movs	r1, #0
 801050c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010510:	4620      	mov	r0, r4
 8010512:	4798      	blx	r3
 8010514:	2000      	movs	r0, #0
 8010516:	e7e0      	b.n	80104da <_raise_r+0x12>

08010518 <raise>:
 8010518:	4b02      	ldr	r3, [pc, #8]	@ (8010524 <raise+0xc>)
 801051a:	4601      	mov	r1, r0
 801051c:	6818      	ldr	r0, [r3, #0]
 801051e:	f7ff bfd3 	b.w	80104c8 <_raise_r>
 8010522:	bf00      	nop
 8010524:	20000198 	.word	0x20000198

08010528 <_kill_r>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	4d07      	ldr	r5, [pc, #28]	@ (8010548 <_kill_r+0x20>)
 801052c:	2300      	movs	r3, #0
 801052e:	4604      	mov	r4, r0
 8010530:	4608      	mov	r0, r1
 8010532:	4611      	mov	r1, r2
 8010534:	602b      	str	r3, [r5, #0]
 8010536:	f7f5 f9c6 	bl	80058c6 <_kill>
 801053a:	1c43      	adds	r3, r0, #1
 801053c:	d102      	bne.n	8010544 <_kill_r+0x1c>
 801053e:	682b      	ldr	r3, [r5, #0]
 8010540:	b103      	cbz	r3, 8010544 <_kill_r+0x1c>
 8010542:	6023      	str	r3, [r4, #0]
 8010544:	bd38      	pop	{r3, r4, r5, pc}
 8010546:	bf00      	nop
 8010548:	200015cc 	.word	0x200015cc

0801054c <_getpid_r>:
 801054c:	f7f5 b9b3 	b.w	80058b6 <_getpid>

08010550 <_malloc_usable_size_r>:
 8010550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010554:	1f18      	subs	r0, r3, #4
 8010556:	2b00      	cmp	r3, #0
 8010558:	bfbc      	itt	lt
 801055a:	580b      	ldrlt	r3, [r1, r0]
 801055c:	18c0      	addlt	r0, r0, r3
 801055e:	4770      	bx	lr

08010560 <__swhatbuf_r>:
 8010560:	b570      	push	{r4, r5, r6, lr}
 8010562:	460c      	mov	r4, r1
 8010564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010568:	2900      	cmp	r1, #0
 801056a:	b096      	sub	sp, #88	@ 0x58
 801056c:	4615      	mov	r5, r2
 801056e:	461e      	mov	r6, r3
 8010570:	da0d      	bge.n	801058e <__swhatbuf_r+0x2e>
 8010572:	89a3      	ldrh	r3, [r4, #12]
 8010574:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010578:	f04f 0100 	mov.w	r1, #0
 801057c:	bf14      	ite	ne
 801057e:	2340      	movne	r3, #64	@ 0x40
 8010580:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010584:	2000      	movs	r0, #0
 8010586:	6031      	str	r1, [r6, #0]
 8010588:	602b      	str	r3, [r5, #0]
 801058a:	b016      	add	sp, #88	@ 0x58
 801058c:	bd70      	pop	{r4, r5, r6, pc}
 801058e:	466a      	mov	r2, sp
 8010590:	f000 f848 	bl	8010624 <_fstat_r>
 8010594:	2800      	cmp	r0, #0
 8010596:	dbec      	blt.n	8010572 <__swhatbuf_r+0x12>
 8010598:	9901      	ldr	r1, [sp, #4]
 801059a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801059e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80105a2:	4259      	negs	r1, r3
 80105a4:	4159      	adcs	r1, r3
 80105a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105aa:	e7eb      	b.n	8010584 <__swhatbuf_r+0x24>

080105ac <__smakebuf_r>:
 80105ac:	898b      	ldrh	r3, [r1, #12]
 80105ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105b0:	079d      	lsls	r5, r3, #30
 80105b2:	4606      	mov	r6, r0
 80105b4:	460c      	mov	r4, r1
 80105b6:	d507      	bpl.n	80105c8 <__smakebuf_r+0x1c>
 80105b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80105bc:	6023      	str	r3, [r4, #0]
 80105be:	6123      	str	r3, [r4, #16]
 80105c0:	2301      	movs	r3, #1
 80105c2:	6163      	str	r3, [r4, #20]
 80105c4:	b003      	add	sp, #12
 80105c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105c8:	ab01      	add	r3, sp, #4
 80105ca:	466a      	mov	r2, sp
 80105cc:	f7ff ffc8 	bl	8010560 <__swhatbuf_r>
 80105d0:	9f00      	ldr	r7, [sp, #0]
 80105d2:	4605      	mov	r5, r0
 80105d4:	4639      	mov	r1, r7
 80105d6:	4630      	mov	r0, r6
 80105d8:	f7fe fd40 	bl	800f05c <_malloc_r>
 80105dc:	b948      	cbnz	r0, 80105f2 <__smakebuf_r+0x46>
 80105de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105e2:	059a      	lsls	r2, r3, #22
 80105e4:	d4ee      	bmi.n	80105c4 <__smakebuf_r+0x18>
 80105e6:	f023 0303 	bic.w	r3, r3, #3
 80105ea:	f043 0302 	orr.w	r3, r3, #2
 80105ee:	81a3      	strh	r3, [r4, #12]
 80105f0:	e7e2      	b.n	80105b8 <__smakebuf_r+0xc>
 80105f2:	89a3      	ldrh	r3, [r4, #12]
 80105f4:	6020      	str	r0, [r4, #0]
 80105f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105fa:	81a3      	strh	r3, [r4, #12]
 80105fc:	9b01      	ldr	r3, [sp, #4]
 80105fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010602:	b15b      	cbz	r3, 801061c <__smakebuf_r+0x70>
 8010604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010608:	4630      	mov	r0, r6
 801060a:	f000 f81d 	bl	8010648 <_isatty_r>
 801060e:	b128      	cbz	r0, 801061c <__smakebuf_r+0x70>
 8010610:	89a3      	ldrh	r3, [r4, #12]
 8010612:	f023 0303 	bic.w	r3, r3, #3
 8010616:	f043 0301 	orr.w	r3, r3, #1
 801061a:	81a3      	strh	r3, [r4, #12]
 801061c:	89a3      	ldrh	r3, [r4, #12]
 801061e:	431d      	orrs	r5, r3
 8010620:	81a5      	strh	r5, [r4, #12]
 8010622:	e7cf      	b.n	80105c4 <__smakebuf_r+0x18>

08010624 <_fstat_r>:
 8010624:	b538      	push	{r3, r4, r5, lr}
 8010626:	4d07      	ldr	r5, [pc, #28]	@ (8010644 <_fstat_r+0x20>)
 8010628:	2300      	movs	r3, #0
 801062a:	4604      	mov	r4, r0
 801062c:	4608      	mov	r0, r1
 801062e:	4611      	mov	r1, r2
 8010630:	602b      	str	r3, [r5, #0]
 8010632:	f7f5 f9a8 	bl	8005986 <_fstat>
 8010636:	1c43      	adds	r3, r0, #1
 8010638:	d102      	bne.n	8010640 <_fstat_r+0x1c>
 801063a:	682b      	ldr	r3, [r5, #0]
 801063c:	b103      	cbz	r3, 8010640 <_fstat_r+0x1c>
 801063e:	6023      	str	r3, [r4, #0]
 8010640:	bd38      	pop	{r3, r4, r5, pc}
 8010642:	bf00      	nop
 8010644:	200015cc 	.word	0x200015cc

08010648 <_isatty_r>:
 8010648:	b538      	push	{r3, r4, r5, lr}
 801064a:	4d06      	ldr	r5, [pc, #24]	@ (8010664 <_isatty_r+0x1c>)
 801064c:	2300      	movs	r3, #0
 801064e:	4604      	mov	r4, r0
 8010650:	4608      	mov	r0, r1
 8010652:	602b      	str	r3, [r5, #0]
 8010654:	f7f5 f9a7 	bl	80059a6 <_isatty>
 8010658:	1c43      	adds	r3, r0, #1
 801065a:	d102      	bne.n	8010662 <_isatty_r+0x1a>
 801065c:	682b      	ldr	r3, [r5, #0]
 801065e:	b103      	cbz	r3, 8010662 <_isatty_r+0x1a>
 8010660:	6023      	str	r3, [r4, #0]
 8010662:	bd38      	pop	{r3, r4, r5, pc}
 8010664:	200015cc 	.word	0x200015cc

08010668 <_init>:
 8010668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801066a:	bf00      	nop
 801066c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801066e:	bc08      	pop	{r3}
 8010670:	469e      	mov	lr, r3
 8010672:	4770      	bx	lr

08010674 <_fini>:
 8010674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010676:	bf00      	nop
 8010678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801067a:	bc08      	pop	{r3}
 801067c:	469e      	mov	lr, r3
 801067e:	4770      	bx	lr
