
MPU_6050_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800a890  0800a890  0000b890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acf8  0800acf8  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800acf8  0800acf8  0000bcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad00  0800ad00  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad00  0800ad00  0000bd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad04  0800ad04  0000bd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800ad08  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200001e8  0800aef0  0000c1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  0800aef0  0000c53c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155c7  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe4  00000000  00000000  000217df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000247c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dec  00000000  00000000  000259b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283b7  00000000  00000000  000267a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e6e  00000000  00000000  0004eb5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f393b  00000000  00000000  000679c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b304  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f64  00000000  00000000  0015b348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001612ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a878 	.word	0x0800a878

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800a878 	.word	0x0800a878

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <cria_triad>:
 */

#include "atitude.h"

void cria_triad(double *v1, double *v2, double *r1, double *r2, double *r3)
{
 8001024:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001028:	b08e      	sub	sp, #56	@ 0x38
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	603b      	str	r3, [r7, #0]
	double vec_prod[3];
	vec_prod[0] = v1[1]*v2[2] - v1[2]*v2[1];
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3308      	adds	r3, #8
 8001038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	3310      	adds	r3, #16
 8001040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001044:	f7ff faf8 	bl	8000638 <__aeabi_dmul>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4614      	mov	r4, r2
 800104e:	461d      	mov	r5, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3310      	adds	r3, #16
 8001054:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	3308      	adds	r3, #8
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff faea 	bl	8000638 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4620      	mov	r0, r4
 800106a:	4629      	mov	r1, r5
 800106c:	f7ff f92c 	bl	80002c8 <__aeabi_dsub>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	e9c7 2304 	strd	r2, r3, [r7, #16]
	vec_prod[1] = v1[2]*v2[0] - v1[0]*v2[2];
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3310      	adds	r3, #16
 800107c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001086:	f7ff fad7 	bl	8000638 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	4614      	mov	r4, r2
 8001090:	461d      	mov	r5, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	3310      	adds	r3, #16
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff faca 	bl	8000638 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4620      	mov	r0, r4
 80010aa:	4629      	mov	r1, r5
 80010ac:	f7ff f90c 	bl	80002c8 <__aeabi_dsub>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	vec_prod[2] = v1[0]*v2[1] - v1[1]*v2[0];
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3308      	adds	r3, #8
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fab7 	bl	8000638 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4614      	mov	r4, r2
 80010d0:	461d      	mov	r5, r3
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3308      	adds	r3, #8
 80010d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff faaa 	bl	8000638 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4620      	mov	r0, r4
 80010ea:	4629      	mov	r1, r5
 80010ec:	f7ff f8ec 	bl	80002c8 <__aeabi_dsub>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double norm = sqrt(vec_prod[0]*vec_prod[0] + vec_prod[1]*vec_prod[1] + vec_prod[2]*vec_prod[2]);
 80010f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001100:	f7ff fa9a 	bl	8000638 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4614      	mov	r4, r2
 800110a:	461d      	mov	r5, r3
 800110c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001114:	f7ff fa90 	bl	8000638 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4620      	mov	r0, r4
 800111e:	4629      	mov	r1, r5
 8001120:	f7ff f8d4 	bl	80002cc <__adddf3>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4614      	mov	r4, r2
 800112a:	461d      	mov	r5, r3
 800112c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001130:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001134:	f7ff fa80 	bl	8000638 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4620      	mov	r0, r4
 800113e:	4629      	mov	r1, r5
 8001140:	f7ff f8c4 	bl	80002cc <__adddf3>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	ec43 2b17 	vmov	d7, r2, r3
 800114c:	eeb0 0a47 	vmov.f32	s0, s14
 8001150:	eef0 0a67 	vmov.f32	s1, s15
 8001154:	f009 fa8a 	bl	800a66c <sqrt>
 8001158:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	r3[0] = v1[1]*vec_prod[2] - v1[2]*vec_prod[1];
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3308      	adds	r3, #8
 8001160:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001164:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001168:	f7ff fa66 	bl	8000638 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4614      	mov	r4, r2
 8001172:	461d      	mov	r5, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3310      	adds	r3, #16
 8001178:	e9d3 0100 	ldrd	r0, r1, [r3]
 800117c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001180:	f7ff fa5a 	bl	8000638 <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4620      	mov	r0, r4
 800118a:	4629      	mov	r1, r5
 800118c:	f7ff f89c 	bl	80002c8 <__aeabi_dsub>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001196:	e9c1 2300 	strd	r2, r3, [r1]
	r3[1] = v1[2]*vec_prod[0] - v1[0]*vec_prod[2];
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3310      	adds	r3, #16
 800119e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011a6:	f7ff fa47 	bl	8000638 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4690      	mov	r8, r2
 80011b0:	4699      	mov	r9, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011bc:	f7ff fa3c 	bl	8000638 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80011ca:	f103 0408 	add.w	r4, r3, #8
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4640      	mov	r0, r8
 80011d4:	4649      	mov	r1, r9
 80011d6:	f7ff f877 	bl	80002c8 <__aeabi_dsub>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	e9c4 2300 	strd	r2, r3, [r4]
	r3[2] = v1[0]*vec_prod[1] - v1[1]*vec_prod[0];
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011ec:	f7ff fa24 	bl	8000638 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4690      	mov	r8, r2
 80011f6:	4699      	mov	r9, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3308      	adds	r3, #8
 80011fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001200:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001204:	f7ff fa18 	bl	8000638 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001212:	f103 0410 	add.w	r4, r3, #16
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4640      	mov	r0, r8
 800121c:	4649      	mov	r1, r9
 800121e:	f7ff f853 	bl	80002c8 <__aeabi_dsub>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	e9c4 2300 	strd	r2, r3, [r4]

	for(uint8_t i = 0; i < 3; i++)
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001230:	e03b      	b.n	80012aa <cria_triad+0x286>
	{
		r1[i] = v1[i];
 8001232:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	4413      	add	r3, r2
 800123c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001240:	00d2      	lsls	r2, r2, #3
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	4411      	add	r1, r2
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	e9c1 2300 	strd	r2, r3, [r1]
		r2[i] = vec_prod[i]/norm;
 800124e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	3338      	adds	r3, #56	@ 0x38
 8001256:	443b      	add	r3, r7
 8001258:	3b28      	subs	r3, #40	@ 0x28
 800125a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800125e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	18d4      	adds	r4, r2, r3
 8001268:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800126c:	f7ff fb0e 	bl	800088c <__aeabi_ddiv>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	e9c4 2300 	strd	r2, r3, [r4]
		r3[i] /= norm;
 8001278:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001280:	4413      	add	r3, r2
 8001282:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001286:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800128e:	18d4      	adds	r4, r2, r3
 8001290:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001294:	f7ff fafa 	bl	800088c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	e9c4 2300 	strd	r2, r3, [r4]
	for(uint8_t i = 0; i < 3; i++)
 80012a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80012a4:	3301      	adds	r3, #1
 80012a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80012aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d9bf      	bls.n	8001232 <cria_triad+0x20e>
	}
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3738      	adds	r7, #56	@ 0x38
 80012b8:	46bd      	mov	sp, r7
 80012ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080012be <vet2mat>:

void vet2mat(double *r1, double *r2, double *r3, double M[3][3])
{
 80012be:	b480      	push	{r7}
 80012c0:	b087      	sub	sp, #28
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 0; i < 3; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	75fb      	strb	r3, [r7, #23]
 80012d0:	e02a      	b.n	8001328 <vet2mat+0x6a>
	  {
		  M[0][i] = r1[i];
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4413      	add	r3, r2
 80012da:	7df9      	ldrb	r1, [r7, #23]
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	6838      	ldr	r0, [r7, #0]
 80012e2:	00c9      	lsls	r1, r1, #3
 80012e4:	4401      	add	r1, r0
 80012e6:	e9c1 2300 	strd	r2, r3, [r1]
		  M[1][i] = r2[i];
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	4413      	add	r3, r2
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	f102 0018 	add.w	r0, r2, #24
 80012f8:	7df9      	ldrb	r1, [r7, #23]
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	00c9      	lsls	r1, r1, #3
 8001300:	4401      	add	r1, r0
 8001302:	e9c1 2300 	strd	r2, r3, [r1]
		  M[2][i] = r3[i];
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 8001314:	7df9      	ldrb	r1, [r7, #23]
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	00c9      	lsls	r1, r1, #3
 800131c:	4401      	add	r1, r0
 800131e:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t i = 0; i < 3; i++)
 8001322:	7dfb      	ldrb	r3, [r7, #23]
 8001324:	3301      	adds	r3, #1
 8001326:	75fb      	strb	r3, [r7, #23]
 8001328:	7dfb      	ldrb	r3, [r7, #23]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d9d1      	bls.n	80012d2 <vet2mat+0x14>
	  }
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <atitude_determination>:

void atitude_determination(double Mref[3][3], double Mobs[3][3], double atitude[3][3])
{
 800133c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133e:	b089      	sub	sp, #36	@ 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++)
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	e067      	b.n	800141e <atitude_determination+0xe2>
	{
		for (int j = 0; j < 3; j++)
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	e05e      	b.n	8001412 <atitude_determination+0xd6>
		{
			atitude[i][j] = 0;
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	441a      	add	r2, r3
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	18d1      	adds	r1, r2, r3
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	e9c1 2300 	strd	r2, r3, [r1]
	        for (int k = 0; k < 3; k++)
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e044      	b.n	8001406 <atitude_determination+0xca>
	        {
	        	atitude[i][j] += Mobs[i][k] * Mref[j][k];
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	461a      	mov	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	441a      	add	r2, r3
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	461a      	mov	r2, r3
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	441a      	add	r2, r3
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	441a      	add	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f935 	bl	8000638 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	461a      	mov	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	189e      	adds	r6, r3, r2
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4620      	mov	r0, r4
 80013ec:	4629      	mov	r1, r5
 80013ee:	f7fe ff6d 	bl	80002cc <__adddf3>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	69b9      	ldr	r1, [r7, #24]
 80013f8:	00c9      	lsls	r1, r1, #3
 80013fa:	4431      	add	r1, r6
 80013fc:	e9c1 2300 	strd	r2, r3, [r1]
	        for (int k = 0; k < 3; k++)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	2b02      	cmp	r3, #2
 800140a:	ddb7      	ble.n	800137c <atitude_determination+0x40>
		for (int j = 0; j < 3; j++)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	3301      	adds	r3, #1
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	2b02      	cmp	r3, #2
 8001416:	dd9d      	ble.n	8001354 <atitude_determination+0x18>
	for (int i = 0; i < 3; i++)
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	3301      	adds	r3, #1
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	2b02      	cmp	r3, #2
 8001422:	dd94      	ble.n	800134e <atitude_determination+0x12>
	        }
	     }
	  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3724      	adds	r7, #36	@ 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001430 <send_atitude>:

void send_atitude(double atitude[3][3])
{
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	b095      	sub	sp, #84	@ 0x54
 8001434:	af04      	add	r7, sp, #16
 8001436:	6078      	str	r0, [r7, #4]
	uint8_t data_to_send[50];

	sprintf((char*)data_to_send, "%f, %f, %f\n", atitude[0][0], atitude[0][1], atitude[0][2]);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800144a:	f107 060c 	add.w	r6, r7, #12
 800144e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001452:	e9cd 2300 	strd	r2, r3, [sp]
 8001456:	4622      	mov	r2, r4
 8001458:	462b      	mov	r3, r5
 800145a:	492f      	ldr	r1, [pc, #188]	@ (8001518 <send_atitude+0xe8>)
 800145c:	4630      	mov	r0, r6
 800145e:	f005 fccd 	bl	8006dfc <siprintf>
	HAL_UART_Transmit(&huart2, data_to_send, strlen((char*)data_to_send), 100);
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	4618      	mov	r0, r3
 8001468:	f7fe ff22 	bl	80002b0 <strlen>
 800146c:	4603      	mov	r3, r0
 800146e:	b29a      	uxth	r2, r3
 8001470:	f107 010c 	add.w	r1, r7, #12
 8001474:	2364      	movs	r3, #100	@ 0x64
 8001476:	4829      	ldr	r0, [pc, #164]	@ (800151c <send_atitude+0xec>)
 8001478:	f003 fe1c 	bl	80050b4 <HAL_UART_Transmit>

	sprintf((char*)data_to_send, "%f, %f, %f\n", atitude[1][0], atitude[1][1], atitude[1][2]);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3318      	adds	r3, #24
 8001480:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3318      	adds	r3, #24
 8001488:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	3118      	adds	r1, #24
 8001490:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001494:	f107 060c 	add.w	r6, r7, #12
 8001498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800149c:	e9cd 2300 	strd	r2, r3, [sp]
 80014a0:	4622      	mov	r2, r4
 80014a2:	462b      	mov	r3, r5
 80014a4:	491c      	ldr	r1, [pc, #112]	@ (8001518 <send_atitude+0xe8>)
 80014a6:	4630      	mov	r0, r6
 80014a8:	f005 fca8 	bl	8006dfc <siprintf>
	HAL_UART_Transmit(&huart2, data_to_send, strlen((char*)data_to_send), 100);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fefd 	bl	80002b0 <strlen>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	f107 010c 	add.w	r1, r7, #12
 80014be:	2364      	movs	r3, #100	@ 0x64
 80014c0:	4816      	ldr	r0, [pc, #88]	@ (800151c <send_atitude+0xec>)
 80014c2:	f003 fdf7 	bl	80050b4 <HAL_UART_Transmit>

	sprintf((char*)data_to_send, "%f, %f, %f\n", atitude[2][0], atitude[2][1], atitude[2][2]);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3330      	adds	r3, #48	@ 0x30
 80014ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3330      	adds	r3, #48	@ 0x30
 80014d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	3130      	adds	r1, #48	@ 0x30
 80014da:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80014de:	f107 060c 	add.w	r6, r7, #12
 80014e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014e6:	e9cd 2300 	strd	r2, r3, [sp]
 80014ea:	4622      	mov	r2, r4
 80014ec:	462b      	mov	r3, r5
 80014ee:	490a      	ldr	r1, [pc, #40]	@ (8001518 <send_atitude+0xe8>)
 80014f0:	4630      	mov	r0, r6
 80014f2:	f005 fc83 	bl	8006dfc <siprintf>
	HAL_UART_Transmit(&huart2, data_to_send, strlen((char*)data_to_send), 100);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7fe fed8 	bl	80002b0 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	f107 010c 	add.w	r1, r7, #12
 8001508:	2364      	movs	r3, #100	@ 0x64
 800150a:	4804      	ldr	r0, [pc, #16]	@ (800151c <send_atitude+0xec>)
 800150c:	f003 fdd2 	bl	80050b4 <HAL_UART_Transmit>
}
 8001510:	bf00      	nop
 8001512:	3744      	adds	r7, #68	@ 0x44
 8001514:	46bd      	mov	sp, r7
 8001516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001518:	0800a890 	.word	0x0800a890
 800151c:	20000364 	.word	0x20000364

08001520 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <MX_GPIO_Init+0x74>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a1a      	ldr	r2, [pc, #104]	@ (8001594 <MX_GPIO_Init+0x74>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <MX_GPIO_Init+0x74>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <MX_GPIO_Init+0x74>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a14      	ldr	r2, [pc, #80]	@ (8001594 <MX_GPIO_Init+0x74>)
 8001544:	f043 0320 	orr.w	r3, r3, #32
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <MX_GPIO_Init+0x74>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0320 	and.w	r3, r3, #32
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <MX_GPIO_Init+0x74>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a0e      	ldr	r2, [pc, #56]	@ (8001594 <MX_GPIO_Init+0x74>)
 800155c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <MX_GPIO_Init+0x74>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <MX_GPIO_Init+0x74>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <MX_GPIO_Init+0x74>)
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <MX_GPIO_Init+0x74>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0308 	and.w	r3, r3, #8
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]

}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <config_hmc>:
 *      Author: labt5
 */
#include "hmc5883.h"

void config_hmc(I2C_HandleTypeDef *h)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	6078      	str	r0, [r7, #4]
	uint8_t data;
	data = 0x78;
 80015a0:	2378      	movs	r3, #120	@ 0x78
 80015a2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(h, hmc_addr, hmc_conf_a, 1, &data, 1, 10); //0x18 => OSR = 1; Data Rate = 75 Hz; Measurement Mode = continuous
 80015a4:	230a      	movs	r3, #10
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	2301      	movs	r3, #1
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	f107 030f 	add.w	r3, r7, #15
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2301      	movs	r3, #1
 80015b4:	2200      	movs	r2, #0
 80015b6:	213c      	movs	r1, #60	@ 0x3c
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f001 f9cf 	bl	800295c <HAL_I2C_Mem_Write>
	data = 0x00;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(h, hmc_addr, hmc_conf_b, 1, &data, 1, 10); //0x00 => Sensor Field Range = + ou - 0.88 Ga
 80015c2:	230a      	movs	r3, #10
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	2301      	movs	r3, #1
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	f107 030f 	add.w	r3, r7, #15
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2301      	movs	r3, #1
 80015d2:	2201      	movs	r2, #1
 80015d4:	213c      	movs	r1, #60	@ 0x3c
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f001 f9c0 	bl	800295c <HAL_I2C_Mem_Write>
	data = 0x00;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(h, hmc_addr, hmc_mode_reg, 1, &data, 1, 10); //0x00 => Continuous mode
 80015e0:	230a      	movs	r3, #10
 80015e2:	9302      	str	r3, [sp, #8]
 80015e4:	2301      	movs	r3, #1
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	f107 030f 	add.w	r3, r7, #15
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2301      	movs	r3, #1
 80015f0:	2202      	movs	r2, #2
 80015f2:	213c      	movs	r1, #60	@ 0x3c
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f001 f9b1 	bl	800295c <HAL_I2C_Mem_Write>
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <read_id_hmc>:

void read_id_hmc(I2C_HandleTypeDef *h)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af04      	add	r7, sp, #16
 800160a:	6078      	str	r0, [r7, #4]
	uint8_t id[3] = {0};
 800160c:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <read_id_hmc+0x38>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	81bb      	strh	r3, [r7, #12]
 8001612:	2300      	movs	r3, #0
 8001614:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Read(h, hmc_addr, hmc_id_a, 1, id, 3, 50);
 8001616:	2332      	movs	r3, #50	@ 0x32
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	2303      	movs	r3, #3
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f107 030c 	add.w	r3, r7, #12
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	220a      	movs	r2, #10
 8001628:	213c      	movs	r1, #60	@ 0x3c
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f001 faaa 	bl	8002b84 <HAL_I2C_Mem_Read>
	id[3] = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	0800a89c 	.word	0x0800a89c

08001640 <read_hmc>:

void read_hmc(I2C_HandleTypeDef *h, HMC_t *Data)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af04      	add	r7, sp, #16
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Read(h, hmc_addr, hmc_x_high, 1, Data->mag_data_nude, 6, 50);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2232      	movs	r2, #50	@ 0x32
 800164e:	9202      	str	r2, [sp, #8]
 8001650:	2206      	movs	r2, #6
 8001652:	9201      	str	r2, [sp, #4]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2301      	movs	r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	213c      	movs	r1, #60	@ 0x3c
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f001 fa91 	bl	8002b84 <HAL_I2C_Mem_Read>


	Data->mag_x_nude = (int16_t)((Data->mag_data_nude[0] << 8) | Data->mag_data_nude[1]);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21a      	sxth	r2, r3
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	785b      	ldrb	r3, [r3, #1]
 800166e:	b21b      	sxth	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b21a      	sxth	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	80da      	strh	r2, [r3, #6]
	Data->mag_z_nude = (int16_t)((Data->mag_data_nude[2] << 8) | Data->mag_data_nude[2]);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	b21a      	sxth	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	789b      	ldrb	r3, [r3, #2]
 8001684:	b21b      	sxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b21a      	sxth	r2, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	815a      	strh	r2, [r3, #10]
	Data->mag_y_nude = (int16_t)((Data->mag_data_nude[4] << 8) | Data->mag_data_nude[5]);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	791b      	ldrb	r3, [r3, #4]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	b21a      	sxth	r2, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	795b      	ldrb	r3, [r3, #5]
 800169a:	b21b      	sxth	r3, r3
 800169c:	4313      	orrs	r3, r2
 800169e:	b21a      	sxth	r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	811a      	strh	r2, [r3, #8]

	Data->mag_x = ((double)Data->mag_x_nude)/1370;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff5a 	bl	8000564 <__aeabi_i2d>
 80016b0:	a317      	add	r3, pc, #92	@ (adr r3, 8001710 <read_hmc+0xd0>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7ff f8e9 	bl	800088c <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	6839      	ldr	r1, [r7, #0]
 80016c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Data->mag_y = ((double)Data->mag_y_nude)/1370;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff4a 	bl	8000564 <__aeabi_i2d>
 80016d0:	a30f      	add	r3, pc, #60	@ (adr r3, 8001710 <read_hmc+0xd0>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	f7ff f8d9 	bl	800088c <__aeabi_ddiv>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	6839      	ldr	r1, [r7, #0]
 80016e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Data->mag_z = ((double)Data->mag_z_nude)/1370;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff3a 	bl	8000564 <__aeabi_i2d>
 80016f0:	a307      	add	r3, pc, #28	@ (adr r3, 8001710 <read_hmc+0xd0>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f7ff f8c9 	bl	800088c <__aeabi_ddiv>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	6839      	ldr	r1, [r7, #0]
 8001700:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	f3af 8000 	nop.w
 8001710:	00000000 	.word	0x00000000
 8001714:	40956800 	.word	0x40956800

08001718 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <MX_I2C2_Init+0x74>)
 800171e:	4a1c      	ldr	r2, [pc, #112]	@ (8001790 <MX_I2C2_Init+0x78>)
 8001720:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00501E63;
 8001722:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <MX_I2C2_Init+0x74>)
 8001724:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <MX_I2C2_Init+0x7c>)
 8001726:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001728:	4b18      	ldr	r3, [pc, #96]	@ (800178c <MX_I2C2_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172e:	4b17      	ldr	r3, [pc, #92]	@ (800178c <MX_I2C2_Init+0x74>)
 8001730:	2201      	movs	r2, #1
 8001732:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <MX_I2C2_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800173a:	4b14      	ldr	r3, [pc, #80]	@ (800178c <MX_I2C2_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <MX_I2C2_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <MX_I2C2_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <MX_I2C2_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001752:	480e      	ldr	r0, [pc, #56]	@ (800178c <MX_I2C2_Init+0x74>)
 8001754:	f001 f866 	bl	8002824 <HAL_I2C_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800175e:	f000 fa1f 	bl	8001ba0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001762:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001766:	4809      	ldr	r0, [pc, #36]	@ (800178c <MX_I2C2_Init+0x74>)
 8001768:	f001 fde8 	bl	800333c <HAL_I2CEx_ConfigAnalogFilter>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001772:	f000 fa15 	bl	8001ba0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001776:	2100      	movs	r1, #0
 8001778:	4804      	ldr	r0, [pc, #16]	@ (800178c <MX_I2C2_Init+0x74>)
 800177a:	f001 fe2a 	bl	80033d2 <HAL_I2CEx_ConfigDigitalFilter>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001784:	f000 fa0c 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000204 	.word	0x20000204
 8001790:	40005800 	.word	0x40005800
 8001794:	00501e63 	.word	0x00501e63

08001798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0aa      	sub	sp, #168	@ 0xa8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017b0:	f107 0310 	add.w	r3, r7, #16
 80017b4:	2284      	movs	r2, #132	@ 0x84
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f005 fb82 	bl	8006ec2 <memset>
  if(i2cHandle->Instance==I2C2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a21      	ldr	r2, [pc, #132]	@ (8001848 <HAL_I2C_MspInit+0xb0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d13b      	bne.n	8001840 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017ce:	2300      	movs	r3, #0
 80017d0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 fb72 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017e2:	f000 f9dd 	bl	8001ba0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <HAL_I2C_MspInit+0xb4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a18      	ldr	r2, [pc, #96]	@ (800184c <HAL_I2C_MspInit+0xb4>)
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b16      	ldr	r3, [pc, #88]	@ (800184c <HAL_I2C_MspInit+0xb4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017fe:	2303      	movs	r3, #3
 8001800:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001804:	2312      	movs	r3, #18
 8001806:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180a:	2301      	movs	r3, #1
 800180c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001816:	2304      	movs	r3, #4
 8001818:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800181c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001820:	4619      	mov	r1, r3
 8001822:	480b      	ldr	r0, [pc, #44]	@ (8001850 <HAL_I2C_MspInit+0xb8>)
 8001824:	f000 fe52 	bl	80024cc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	@ (800184c <HAL_I2C_MspInit+0xb4>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	4a07      	ldr	r2, [pc, #28]	@ (800184c <HAL_I2C_MspInit+0xb4>)
 800182e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001832:	6413      	str	r3, [r2, #64]	@ 0x40
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <HAL_I2C_MspInit+0xb4>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001838:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001840:	bf00      	nop
 8001842:	37a8      	adds	r7, #168	@ 0xa8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40005800 	.word	0x40005800
 800184c:	40023800 	.word	0x40023800
 8001850:	40021400 	.word	0x40021400

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b0f7      	sub	sp, #476	@ 0x1dc
 8001858:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185a:	f000 fcc8 	bl	80021ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185e:	f000 f8c5 	bl	80019ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001862:	f7ff fe5d 	bl	8001520 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001866:	f7ff ff57 	bl	8001718 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800186a:	f000 fc01 	bl	8002070 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800186e:	f000 fb8d 	bl	8001f8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  config_mpu6050(&hi2c2);
 8001872:	4853      	ldr	r0, [pc, #332]	@ (80019c0 <main+0x16c>)
 8001874:	f000 f99a 	bl	8001bac <config_mpu6050>
  config_mpu6050(&hi2c2);
 8001878:	4851      	ldr	r0, [pc, #324]	@ (80019c0 <main+0x16c>)
 800187a:	f000 f997 	bl	8001bac <config_mpu6050>
  HAL_I2C_Mem_Read(&hi2c2, mpu_6050_add, who_am_i_mpu, 1, &who_I_am, 1, 10);
 800187e:	230a      	movs	r3, #10
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2301      	movs	r3, #1
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	4b4f      	ldr	r3, [pc, #316]	@ (80019c4 <main+0x170>)
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2301      	movs	r3, #1
 800188c:	2275      	movs	r2, #117	@ 0x75
 800188e:	21d0      	movs	r1, #208	@ 0xd0
 8001890:	484b      	ldr	r0, [pc, #300]	@ (80019c0 <main+0x16c>)
 8001892:	f001 f977 	bl	8002b84 <HAL_I2C_Mem_Read>

  HAL_I2C_Mem_Read(&hi2c2, mpu_6050_add, pwr_mng1_mpu, 1, read, 1, 10);
 8001896:	230a      	movs	r3, #10
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	2301      	movs	r3, #1
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	4b4a      	ldr	r3, [pc, #296]	@ (80019c8 <main+0x174>)
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2301      	movs	r3, #1
 80018a4:	226b      	movs	r2, #107	@ 0x6b
 80018a6:	21d0      	movs	r1, #208	@ 0xd0
 80018a8:	4845      	ldr	r0, [pc, #276]	@ (80019c0 <main+0x16c>)
 80018aa:	f001 f96b 	bl	8002b84 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c2, mpu_6050_add, sample_div_reg_mpu, 1, &read[1], 1, 10);
 80018ae:	230a      	movs	r3, #10
 80018b0:	9302      	str	r3, [sp, #8]
 80018b2:	2301      	movs	r3, #1
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	4b45      	ldr	r3, [pc, #276]	@ (80019cc <main+0x178>)
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	2219      	movs	r2, #25
 80018be:	21d0      	movs	r1, #208	@ 0xd0
 80018c0:	483f      	ldr	r0, [pc, #252]	@ (80019c0 <main+0x16c>)
 80018c2:	f001 f95f 	bl	8002b84 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c2, mpu_6050_add, config_reg_mpu, 1, &read[2], 1, 10);
 80018c6:	230a      	movs	r3, #10
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	2301      	movs	r3, #1
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	4b40      	ldr	r3, [pc, #256]	@ (80019d0 <main+0x17c>)
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2301      	movs	r3, #1
 80018d4:	221a      	movs	r2, #26
 80018d6:	21d0      	movs	r1, #208	@ 0xd0
 80018d8:	4839      	ldr	r0, [pc, #228]	@ (80019c0 <main+0x16c>)
 80018da:	f001 f953 	bl	8002b84 <HAL_I2C_Mem_Read>

  read_id_hmc(&hi2c2);
 80018de:	4838      	ldr	r0, [pc, #224]	@ (80019c0 <main+0x16c>)
 80018e0:	f7ff fe90 	bl	8001604 <read_id_hmc>
  config_hmc(&hi2c2);
 80018e4:	4836      	ldr	r0, [pc, #216]	@ (80019c0 <main+0x16c>)
 80018e6:	f7ff fe57 	bl	8001598 <config_hmc>
  double v1[3], v2[3];
  //Colocar o valor lido dos sensores para referência
  double r1[3], r2[3], r3[3];
  double Mref[3][3];

  cria_triad(v1, v2, r1, r2, r3);
 80018ea:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 80018ee:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80018f2:	f507 71cc 	add.w	r1, r7, #408	@ 0x198
 80018f6:	f507 70d8 	add.w	r0, r7, #432	@ 0x1b0
 80018fa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4623      	mov	r3, r4
 8001902:	f7ff fb8f 	bl	8001024 <cria_triad>
  vet2mat(r1, r2, r3, Mref);
 8001906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800190a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800190e:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 8001912:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8001916:	f7ff fcd2 	bl	80012be <vet2mat>
  double s1[3], s2[3], s3[3];
  double Mobs[3][3];

  double atitude[3][3];

  HAL_TIM_Base_Start_IT(&htim2);
 800191a:	482e      	ldr	r0, [pc, #184]	@ (80019d4 <main+0x180>)
 800191c:	f002 ff18 	bl	8004750 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001920:	2201      	movs	r2, #1
 8001922:	492d      	ldr	r1, [pc, #180]	@ (80019d8 <main+0x184>)
 8001924:	482d      	ldr	r0, [pc, #180]	@ (80019dc <main+0x188>)
 8001926:	f003 fc4e 	bl	80051c6 <HAL_UART_Receive_IT>
	if(flag == 1)
 800192a:	4b2d      	ldr	r3, [pc, #180]	@ (80019e0 <main+0x18c>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d1f6      	bne.n	8001920 <main+0xcc>
	{
		//Código para determinação de atitude
		w1[0] = sensor_data_mag.mag_x;
 8001932:	4b2c      	ldr	r3, [pc, #176]	@ (80019e4 <main+0x190>)
 8001934:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001938:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0
		w1[1] = sensor_data_mag.mag_y;
 800193c:	4b29      	ldr	r3, [pc, #164]	@ (80019e4 <main+0x190>)
 800193e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001942:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
		w1[2] = sensor_data_mag.mag_z;
 8001946:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <main+0x190>)
 8001948:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800194c:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100

		w2[0] = sensor_data_accel.accel_x;
 8001950:	4b25      	ldr	r3, [pc, #148]	@ (80019e8 <main+0x194>)
 8001952:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001956:	e9c7 2336 	strd	r2, r3, [r7, #216]	@ 0xd8
		w2[1] = sensor_data_accel.accel_y;
 800195a:	4b23      	ldr	r3, [pc, #140]	@ (80019e8 <main+0x194>)
 800195c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001960:	e9c7 2338 	strd	r2, r3, [r7, #224]	@ 0xe0
		w2[2] = sensor_data_accel.accel_z;
 8001964:	4b20      	ldr	r3, [pc, #128]	@ (80019e8 <main+0x194>)
 8001966:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800196a:	e9c7 233a 	strd	r2, r3, [r7, #232]	@ 0xe8

		cria_triad(w1, w2, s1, s2, s3);
 800196e:	f107 04a8 	add.w	r4, r7, #168	@ 0xa8
 8001972:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 8001976:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 800197a:	f107 00f0 	add.w	r0, r7, #240	@ 0xf0
 800197e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	4623      	mov	r3, r4
 8001986:	f7ff fb4d 	bl	8001024 <cria_triad>
		vet2mat(s1, s2, s3, Mobs);
 800198a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800198e:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8001992:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001996:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 800199a:	f7ff fc90 	bl	80012be <vet2mat>
		atitude_determination(Mref, Mobs, atitude);
 800199e:	463a      	mov	r2, r7
 80019a0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80019a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fcc7 	bl	800133c <atitude_determination>

		send_atitude(atitude);
 80019ae:	463b      	mov	r3, r7
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fd3d 	bl	8001430 <send_atitude>
		flag = 0;
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <main+0x18c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80019bc:	e7b0      	b.n	8001920 <main+0xcc>
 80019be:	bf00      	nop
 80019c0:	20000204 	.word	0x20000204
 80019c4:	2000025b 	.word	0x2000025b
 80019c8:	20000258 	.word	0x20000258
 80019cc:	20000259 	.word	0x20000259
 80019d0:	2000025a 	.word	0x2000025a
 80019d4:	20000318 	.word	0x20000318
 80019d8:	20000310 	.word	0x20000310
 80019dc:	20000364 	.word	0x20000364
 80019e0:	20000311 	.word	0x20000311
 80019e4:	200002e8 	.word	0x200002e8
 80019e8:	200002c0 	.word	0x200002c0

080019ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b094      	sub	sp, #80	@ 0x50
 80019f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	2230      	movs	r2, #48	@ 0x30
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f005 fa61 	bl	8006ec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a10:	f001 fd2c 	bl	800346c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac0 <SystemClock_Config+0xd4>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	4a29      	ldr	r2, [pc, #164]	@ (8001ac0 <SystemClock_Config+0xd4>)
 8001a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a20:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <SystemClock_Config+0xd4>)
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2c:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <SystemClock_Config+0xd8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a24      	ldr	r2, [pc, #144]	@ (8001ac4 <SystemClock_Config+0xd8>)
 8001a32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <SystemClock_Config+0xd8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a44:	2302      	movs	r3, #2
 8001a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a50:	2302      	movs	r3, #2
 8001a52:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001a5c:	23d8      	movs	r3, #216	@ 0xd8
 8001a5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a60:	2302      	movs	r3, #2
 8001a62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a64:	2302      	movs	r3, #2
 8001a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 fd5d 	bl	800352c <HAL_RCC_OscConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a78:	f000 f892 	bl	8001ba0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a7c:	f001 fd06 	bl	800348c <HAL_PWREx_EnableOverDrive>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a86:	f000 f88b 	bl	8001ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a8a:	230f      	movs	r3, #15
 8001a8c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a96:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	2107      	movs	r1, #7
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 ffe3 	bl	8003a74 <HAL_RCC_ClockConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001ab4:	f000 f874 	bl	8001ba0 <Error_Handler>
  }
}
 8001ab8:	bf00      	nop
 8001aba:	3750      	adds	r7, #80	@ 0x50
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af04      	add	r7, sp, #16
 8001ace:	6078      	str	r0, [r7, #4]
	read_mpu6050(&hi2c2, &sensor_data_accel);
 8001ad0:	4922      	ldr	r1, [pc, #136]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001ad2:	4823      	ldr	r0, [pc, #140]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001ad4:	f000 f8bc 	bl	8001c50 <read_mpu6050>
	read_hmc(&hi2c2, &sensor_data_mag);
 8001ad8:	4922      	ldr	r1, [pc, #136]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001ada:	4821      	ldr	r0, [pc, #132]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001adc:	f7ff fdb0 	bl	8001640 <read_hmc>

	sprintf((char*)send, "%f, %f, %f\n\r", sensor_data_accel.accel_x, sensor_data_accel.accel_y, sensor_data_accel.accel_z);
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001ae2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001ae8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001aec:	491b      	ldr	r1, [pc, #108]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001aee:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8001af2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001af6:	e9cd 2300 	strd	r2, r3, [sp]
 8001afa:	4622      	mov	r2, r4
 8001afc:	462b      	mov	r3, r5
 8001afe:	491a      	ldr	r1, [pc, #104]	@ (8001b68 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b00:	481a      	ldr	r0, [pc, #104]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b02:	f005 f97b 	bl	8006dfc <siprintf>
	HAL_UART_Transmit(&huart2, send, strlen((char*)send), 100);
 8001b06:	4819      	ldr	r0, [pc, #100]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b08:	f7fe fbd2 	bl	80002b0 <strlen>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	2364      	movs	r3, #100	@ 0x64
 8001b12:	4916      	ldr	r1, [pc, #88]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b14:	4816      	ldr	r0, [pc, #88]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b16:	f003 facd 	bl	80050b4 <HAL_UART_Transmit>

	sprintf((char*)send, "%f, %f, %f\n\r", sensor_data_mag.mag_x, sensor_data_mag.mag_y, sensor_data_mag.mag_z);
 8001b1a:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b1c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001b20:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b22:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b26:	490f      	ldr	r1, [pc, #60]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b28:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8001b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b30:	e9cd 2300 	strd	r2, r3, [sp]
 8001b34:	4622      	mov	r2, r4
 8001b36:	462b      	mov	r3, r5
 8001b38:	490b      	ldr	r1, [pc, #44]	@ (8001b68 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b3a:	480c      	ldr	r0, [pc, #48]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b3c:	f005 f95e 	bl	8006dfc <siprintf>
	HAL_UART_Transmit(&huart2, send, strlen((char*)send), 100);
 8001b40:	480a      	ldr	r0, [pc, #40]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b42:	f7fe fbb5 	bl	80002b0 <strlen>
 8001b46:	4603      	mov	r3, r0
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	2364      	movs	r3, #100	@ 0x64
 8001b4c:	4907      	ldr	r1, [pc, #28]	@ (8001b6c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b4e:	4808      	ldr	r0, [pc, #32]	@ (8001b70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b50:	f003 fab0 	bl	80050b4 <HAL_UART_Transmit>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5c:	200002c0 	.word	0x200002c0
 8001b60:	20000204 	.word	0x20000204
 8001b64:	200002e8 	.word	0x200002e8
 8001b68:	0800a8a0 	.word	0x0800a8a0
 8001b6c:	2000025c 	.word	0x2000025c
 8001b70:	20000364 	.word	0x20000364

08001b74 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	if(rx_data == '$')
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_UART_RxCpltCallback+0x24>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b24      	cmp	r3, #36	@ 0x24
 8001b82:	d102      	bne.n	8001b8a <HAL_UART_RxCpltCallback+0x16>
	{
		flag = 1;
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <HAL_UART_RxCpltCallback+0x28>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
	}
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000310 	.word	0x20000310
 8001b9c:	20000311 	.word	0x20000311

08001ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <Error_Handler+0x8>

08001bac <config_mpu6050>:
 */
#include "mpu_6050.h"


void config_mpu6050(I2C_HandleTypeDef *h)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af04      	add	r7, sp, #16
 8001bb2:	6078      	str	r0, [r7, #4]
	uint8_t data;
	data = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(h, mpu_6050_add, config_reg_mpu, 1, &data, 1, 10);
 8001bb8:	230a      	movs	r3, #10
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	f107 030f 	add.w	r3, r7, #15
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	221a      	movs	r2, #26
 8001bca:	21d0      	movs	r1, #208	@ 0xd0
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fec5 	bl	800295c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(h, mpu_6050_add, pwr_mng1_mpu, 1, &data, 1, 10);
 8001bd2:	230a      	movs	r3, #10
 8001bd4:	9302      	str	r3, [sp, #8]
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	f107 030f 	add.w	r3, r7, #15
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2301      	movs	r3, #1
 8001be2:	226b      	movs	r2, #107	@ 0x6b
 8001be4:	21d0      	movs	r1, #208	@ 0xd0
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 feb8 	bl	800295c <HAL_I2C_Mem_Write>
	data = 0x18;
 8001bec:	2318      	movs	r3, #24
 8001bee:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(h, mpu_6050_add, config_accel_reg_mpu, 1, &data, 1, 10); //0x08 => Configura para 4G de range
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	f107 030f 	add.w	r3, r7, #15
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2301      	movs	r3, #1
 8001c00:	221c      	movs	r2, #28
 8001c02:	21d0      	movs	r1, #208	@ 0xd0
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 fea9 	bl	800295c <HAL_I2C_Mem_Write>
	data = 0x08;
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(h, mpu_6050_add, config_gyro_reg_mpu, 1, &data, 1, 10); //0x08 => Configura para 500°/s
 8001c0e:	230a      	movs	r3, #10
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	2301      	movs	r3, #1
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	f107 030f 	add.w	r3, r7, #15
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	221b      	movs	r2, #27
 8001c20:	21d0      	movs	r1, #208	@ 0xd0
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fe9a 	bl	800295c <HAL_I2C_Mem_Write>
	data = 0x07;
 8001c28:	2307      	movs	r3, #7
 8001c2a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(h, mpu_6050_add, sample_div_reg_mpu, 1, &data, 1, 10);
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	9302      	str	r3, [sp, #8]
 8001c30:	2301      	movs	r3, #1
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	f107 030f 	add.w	r3, r7, #15
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	2219      	movs	r2, #25
 8001c3e:	21d0      	movs	r1, #208	@ 0xd0
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fe8b 	bl	800295c <HAL_I2C_Mem_Write>
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <read_mpu6050>:

void read_mpu6050(I2C_HandleTypeDef *h, MPU_t *Data)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Read(h, mpu_6050_add, accel_xout_h, 1, Data->accel_data_nude, 6, 50);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2232      	movs	r2, #50	@ 0x32
 8001c5e:	9202      	str	r2, [sp, #8]
 8001c60:	2206      	movs	r2, #6
 8001c62:	9201      	str	r2, [sp, #4]
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2301      	movs	r3, #1
 8001c68:	223b      	movs	r2, #59	@ 0x3b
 8001c6a:	21d0      	movs	r1, #208	@ 0xd0
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 ff89 	bl	8002b84 <HAL_I2C_Mem_Read>
	/*
	DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
	DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
	DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);*/

	Data->accel_x_nude = (int16_t)((Data->accel_data_nude[0] << 8) | Data->accel_data_nude[1]);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	785b      	ldrb	r3, [r3, #1]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	80da      	strh	r2, [r3, #6]
	Data->accel_y_nude = (int16_t)((Data->accel_data_nude[2] << 8) | Data->accel_data_nude[3]);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	789b      	ldrb	r3, [r3, #2]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	78db      	ldrb	r3, [r3, #3]
 8001c94:	b21b      	sxth	r3, r3
 8001c96:	4313      	orrs	r3, r2
 8001c98:	b21a      	sxth	r2, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	811a      	strh	r2, [r3, #8]
	Data->accel_z_nude = (int16_t)((Data->accel_data_nude[4] << 8) | Data->accel_data_nude[5]);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	791b      	ldrb	r3, [r3, #4]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	795b      	ldrb	r3, [r3, #5]
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	4313      	orrs	r3, r2
 8001cae:	b21a      	sxth	r2, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	815a      	strh	r2, [r3, #10]

	//Data->gyro_z_nude = (int16_t)((Data->gyro_data_nude[0] << 8) | Data->gyro_data_nude[1]);

	Data->accel_x = ((double)Data->accel_x_nude)/2048;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc52 	bl	8000564 <__aeabi_i2d>
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <read_mpu6050+0xcc>)
 8001cc6:	f7fe fde1 	bl	800088c <__aeabi_ddiv>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	6839      	ldr	r1, [r7, #0]
 8001cd0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Data->accel_y = ((double)Data->accel_y_nude)/2048;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc42 	bl	8000564 <__aeabi_i2d>
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <read_mpu6050+0xcc>)
 8001ce6:	f7fe fdd1 	bl	800088c <__aeabi_ddiv>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	6839      	ldr	r1, [r7, #0]
 8001cf0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Data->accel_z = ((double)Data->accel_z_nude)/2048;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc32 	bl	8000564 <__aeabi_i2d>
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <read_mpu6050+0xcc>)
 8001d06:	f7fe fdc1 	bl	800088c <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	e9c1 2308 	strd	r2, r3, [r1, #32]

	//Data->gyro_z = ((double)Data->gyro_z_nude)/65.5;
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40a00000 	.word	0x40a00000

08001d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d32:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	4b09      	ldr	r3, [pc, #36]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	4a08      	ldr	r2, [pc, #32]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_MspInit+0x44>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <NMI_Handler+0x4>

08001d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <MemManage_Handler+0x4>

08001d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbe:	f000 fa53 	bl	8002268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <TIM2_IRQHandler+0x10>)
 8001dce:	f002 fd37 	bl	8004840 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000318 	.word	0x20000318

08001ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return 1;
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_kill>:

int _kill(int pid, int sig)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001df6:	f005 f8b7 	bl	8006f68 <__errno>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2216      	movs	r2, #22
 8001dfe:	601a      	str	r2, [r3, #0]
  return -1;
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_exit>:

void _exit (int status)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ffe7 	bl	8001dec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e1e:	bf00      	nop
 8001e20:	e7fd      	b.n	8001e1e <_exit+0x12>

08001e22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e00a      	b.n	8001e4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e34:	f3af 8000 	nop.w
 8001e38:	4601      	mov	r1, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	60ba      	str	r2, [r7, #8]
 8001e40:	b2ca      	uxtb	r2, r1
 8001e42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3301      	adds	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	dbf0      	blt.n	8001e34 <_read+0x12>
  }

  return len;
 8001e52:	687b      	ldr	r3, [r7, #4]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e009      	b.n	8001e82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	60ba      	str	r2, [r7, #8]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dbf1      	blt.n	8001e6e <_write+0x12>
  }
  return len;
 8001e8a:	687b      	ldr	r3, [r7, #4]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_close>:

int _close(int file)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ebc:	605a      	str	r2, [r3, #4]
  return 0;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_isatty>:

int _isatty(int file)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed4:	2301      	movs	r3, #1
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f04:	4a14      	ldr	r2, [pc, #80]	@ (8001f58 <_sbrk+0x5c>)
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <_sbrk+0x60>)
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <_sbrk+0x64>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	@ (8001f64 <_sbrk+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1e:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f2c:	f005 f81c 	bl	8006f68 <__errno>
 8001f30:	4603      	mov	r3, r0
 8001f32:	220c      	movs	r2, #12
 8001f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	e009      	b.n	8001f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f42:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <_sbrk+0x64>)
 8001f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20050000 	.word	0x20050000
 8001f5c:	00000400 	.word	0x00000400
 8001f60:	20000314 	.word	0x20000314
 8001f64:	20000540 	.word	0x20000540

08001f68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <SystemInit+0x20>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f72:	4a05      	ldr	r2, [pc, #20]	@ (8001f88 <SystemInit+0x20>)
 8001f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001faa:	4b1e      	ldr	r3, [pc, #120]	@ (8002024 <MX_TIM2_Init+0x98>)
 8001fac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 54000-1;
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <MX_TIM2_Init+0x98>)
 8001fb4:	f24d 22ef 	movw	r2, #53999	@ 0xd2ef
 8001fb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <MX_TIM2_Init+0x98>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	@ (8002024 <MX_TIM2_Init+0x98>)
 8001fc2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001fc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <MX_TIM2_Init+0x98>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <MX_TIM2_Init+0x98>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fd4:	4813      	ldr	r0, [pc, #76]	@ (8002024 <MX_TIM2_Init+0x98>)
 8001fd6:	f002 fb63 	bl	80046a0 <HAL_TIM_Base_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001fe0:	f7ff fdde 	bl	8001ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fe8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fea:	f107 0310 	add.w	r3, r7, #16
 8001fee:	4619      	mov	r1, r3
 8001ff0:	480c      	ldr	r0, [pc, #48]	@ (8002024 <MX_TIM2_Init+0x98>)
 8001ff2:	f002 fd2d 	bl	8004a50 <HAL_TIM_ConfigClockSource>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001ffc:	f7ff fdd0 	bl	8001ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002000:	2320      	movs	r3, #32
 8002002:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	4619      	mov	r1, r3
 800200c:	4805      	ldr	r0, [pc, #20]	@ (8002024 <MX_TIM2_Init+0x98>)
 800200e:	f002 ff57 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002018:	f7ff fdc2 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	3720      	adds	r7, #32
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000318 	.word	0x20000318

08002028 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002038:	d113      	bne.n	8002062 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800203a:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <HAL_TIM_Base_MspInit+0x44>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4a0b      	ldr	r2, [pc, #44]	@ (800206c <HAL_TIM_Base_MspInit+0x44>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_TIM_Base_MspInit+0x44>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	201c      	movs	r0, #28
 8002058:	f000 fa01 	bl	800245e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800205c:	201c      	movs	r0, #28
 800205e:	f000 fa1a 	bl	8002496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002074:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 8002076:	4a19      	ldr	r2, [pc, #100]	@ (80020dc <MX_USART2_UART_Init+0x6c>)
 8002078:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800207a:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 800207c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002080:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b15      	ldr	r3, [pc, #84]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800208e:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a6:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80020ac:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 80020ae:	2230      	movs	r2, #48	@ 0x30
 80020b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80020b2:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 80020b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020b8:	639a      	str	r2, [r3, #56]	@ 0x38
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80020ba:	4b07      	ldr	r3, [pc, #28]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 80020bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <MX_USART2_UART_Init+0x68>)
 80020c4:	f002 ffa8 	bl	8005018 <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 80020ce:	f7ff fd67 	bl	8001ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000364 	.word	0x20000364
 80020dc:	40004400 	.word	0x40004400

080020e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0aa      	sub	sp, #168	@ 0xa8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020f8:	f107 0310 	add.w	r3, r7, #16
 80020fc:	2284      	movs	r2, #132	@ 0x84
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f004 fede 	bl	8006ec2 <memset>
  if(uartHandle->Instance==USART2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a21      	ldr	r2, [pc, #132]	@ (8002190 <HAL_UART_MspInit+0xb0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d13a      	bne.n	8002186 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002114:	2300      	movs	r3, #0
 8002116:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002118:	f107 0310 	add.w	r3, r7, #16
 800211c:	4618      	mov	r0, r3
 800211e:	f001 fecf 	bl	8003ec0 <HAL_RCCEx_PeriphCLKConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002128:	f7ff fd3a 	bl	8001ba0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800212c:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <HAL_UART_MspInit+0xb4>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	4a18      	ldr	r2, [pc, #96]	@ (8002194 <HAL_UART_MspInit+0xb4>)
 8002132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002136:	6413      	str	r3, [r2, #64]	@ 0x40
 8002138:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <HAL_UART_MspInit+0xb4>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002144:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <HAL_UART_MspInit+0xb4>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <HAL_UART_MspInit+0xb4>)
 800214a:	f043 0308 	orr.w	r3, r3, #8
 800214e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002150:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <HAL_UART_MspInit+0xb4>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800215c:	2360      	movs	r3, #96	@ 0x60
 800215e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002174:	2307      	movs	r3, #7
 8002176:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800217a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800217e:	4619      	mov	r1, r3
 8002180:	4805      	ldr	r0, [pc, #20]	@ (8002198 <HAL_UART_MspInit+0xb8>)
 8002182:	f000 f9a3 	bl	80024cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002186:	bf00      	nop
 8002188:	37a8      	adds	r7, #168	@ 0xa8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40004400 	.word	0x40004400
 8002194:	40023800 	.word	0x40023800
 8002198:	40020c00 	.word	0x40020c00

0800219c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800219c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021a0:	f7ff fee2 	bl	8001f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a4:	480c      	ldr	r0, [pc, #48]	@ (80021d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a6:	490d      	ldr	r1, [pc, #52]	@ (80021dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021bc:	4c0a      	ldr	r4, [pc, #40]	@ (80021e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021ca:	f004 fed3 	bl	8006f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ce:	f7ff fb41 	bl	8001854 <main>
  bx  lr    
 80021d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021dc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80021e0:	0800ad08 	.word	0x0800ad08
  ldr r2, =_sbss
 80021e4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80021e8:	2000053c 	.word	0x2000053c

080021ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021ec:	e7fe      	b.n	80021ec <ADC_IRQHandler>

080021ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f2:	2003      	movs	r0, #3
 80021f4:	f000 f928 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f8:	2000      	movs	r0, #0
 80021fa:	f000 f805 	bl	8002208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021fe:	f7ff fd8f 	bl	8001d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <HAL_InitTick+0x54>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <HAL_InitTick+0x58>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4619      	mov	r1, r3
 800221a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800221e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	4618      	mov	r0, r3
 8002228:	f000 f943 	bl	80024b2 <HAL_SYSTICK_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e00e      	b.n	8002254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b0f      	cmp	r3, #15
 800223a:	d80a      	bhi.n	8002252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800223c:	2200      	movs	r2, #0
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f000 f90b 	bl	800245e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002248:	4a06      	ldr	r2, [pc, #24]	@ (8002264 <HAL_InitTick+0x5c>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	e000      	b.n	8002254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000000 	.word	0x20000000
 8002260:	20000008 	.word	0x20000008
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_IncTick+0x20>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_IncTick+0x24>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4413      	add	r3, r2
 8002278:	4a04      	ldr	r2, [pc, #16]	@ (800228c <HAL_IncTick+0x24>)
 800227a:	6013      	str	r3, [r2, #0]
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000008 	.word	0x20000008
 800228c:	200003ec 	.word	0x200003ec

08002290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return uwTick;
 8002294:	4b03      	ldr	r3, [pc, #12]	@ (80022a4 <HAL_GetTick+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	200003ec 	.word	0x200003ec

080022a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <__NVIC_SetPriorityGrouping+0x40>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022c4:	4013      	ands	r3, r2
 80022c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022d0:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d6:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <__NVIC_SetPriorityGrouping+0x40>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00
 80022ec:	05fa0000 	.word	0x05fa0000

080022f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f4:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <__NVIC_GetPriorityGrouping+0x18>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f003 0307 	and.w	r3, r3, #7
}
 80022fe:	4618      	mov	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	2b00      	cmp	r3, #0
 800231c:	db0b      	blt.n	8002336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	f003 021f 	and.w	r2, r3, #31
 8002324:	4907      	ldr	r1, [pc, #28]	@ (8002344 <__NVIC_EnableIRQ+0x38>)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2001      	movs	r0, #1
 800232e:	fa00 f202 	lsl.w	r2, r0, r2
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000e100 	.word	0xe000e100

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	@ (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	@ (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	@ 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	@ 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f7ff ff8e 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	@ (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff29 	bl	80022a8 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002470:	f7ff ff3e 	bl	80022f0 <__NVIC_GetPriorityGrouping>
 8002474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	68b9      	ldr	r1, [r7, #8]
 800247a:	6978      	ldr	r0, [r7, #20]
 800247c:	f7ff ff8e 	bl	800239c <NVIC_EncodePriority>
 8002480:	4602      	mov	r2, r0
 8002482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff5d 	bl	8002348 <__NVIC_SetPriority>
}
 800248e:	bf00      	nop
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff31 	bl	800230c <__NVIC_EnableIRQ>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff ffa2 	bl	8002404 <SysTick_Config>
 80024c0:	4603      	mov	r3, r0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b089      	sub	sp, #36	@ 0x24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
 80024ea:	e175      	b.n	80027d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	429a      	cmp	r2, r3
 8002506:	f040 8164 	bne.w	80027d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d005      	beq.n	8002522 <HAL_GPIO_Init+0x56>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d130      	bne.n	8002584 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002558:	2201      	movs	r2, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 0201 	and.w	r2, r3, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b03      	cmp	r3, #3
 800258e:	d017      	beq.n	80025c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d123      	bne.n	8002614 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3208      	adds	r2, #8
 80025d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	08da      	lsrs	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3208      	adds	r2, #8
 800260e:	69b9      	ldr	r1, [r7, #24]
 8002610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0203 	and.w	r2, r3, #3
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80be 	beq.w	80027d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002656:	4b66      	ldr	r3, [pc, #408]	@ (80027f0 <HAL_GPIO_Init+0x324>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	4a65      	ldr	r2, [pc, #404]	@ (80027f0 <HAL_GPIO_Init+0x324>)
 800265c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002660:	6453      	str	r3, [r2, #68]	@ 0x44
 8002662:	4b63      	ldr	r3, [pc, #396]	@ (80027f0 <HAL_GPIO_Init+0x324>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800266e:	4a61      	ldr	r2, [pc, #388]	@ (80027f4 <HAL_GPIO_Init+0x328>)
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	220f      	movs	r2, #15
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a58      	ldr	r2, [pc, #352]	@ (80027f8 <HAL_GPIO_Init+0x32c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d037      	beq.n	800270a <HAL_GPIO_Init+0x23e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a57      	ldr	r2, [pc, #348]	@ (80027fc <HAL_GPIO_Init+0x330>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d031      	beq.n	8002706 <HAL_GPIO_Init+0x23a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a56      	ldr	r2, [pc, #344]	@ (8002800 <HAL_GPIO_Init+0x334>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d02b      	beq.n	8002702 <HAL_GPIO_Init+0x236>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a55      	ldr	r2, [pc, #340]	@ (8002804 <HAL_GPIO_Init+0x338>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d025      	beq.n	80026fe <HAL_GPIO_Init+0x232>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a54      	ldr	r2, [pc, #336]	@ (8002808 <HAL_GPIO_Init+0x33c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d01f      	beq.n	80026fa <HAL_GPIO_Init+0x22e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a53      	ldr	r2, [pc, #332]	@ (800280c <HAL_GPIO_Init+0x340>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d019      	beq.n	80026f6 <HAL_GPIO_Init+0x22a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a52      	ldr	r2, [pc, #328]	@ (8002810 <HAL_GPIO_Init+0x344>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_Init+0x226>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a51      	ldr	r2, [pc, #324]	@ (8002814 <HAL_GPIO_Init+0x348>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00d      	beq.n	80026ee <HAL_GPIO_Init+0x222>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a50      	ldr	r2, [pc, #320]	@ (8002818 <HAL_GPIO_Init+0x34c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <HAL_GPIO_Init+0x21e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4f      	ldr	r2, [pc, #316]	@ (800281c <HAL_GPIO_Init+0x350>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_GPIO_Init+0x21a>
 80026e2:	2309      	movs	r3, #9
 80026e4:	e012      	b.n	800270c <HAL_GPIO_Init+0x240>
 80026e6:	230a      	movs	r3, #10
 80026e8:	e010      	b.n	800270c <HAL_GPIO_Init+0x240>
 80026ea:	2308      	movs	r3, #8
 80026ec:	e00e      	b.n	800270c <HAL_GPIO_Init+0x240>
 80026ee:	2307      	movs	r3, #7
 80026f0:	e00c      	b.n	800270c <HAL_GPIO_Init+0x240>
 80026f2:	2306      	movs	r3, #6
 80026f4:	e00a      	b.n	800270c <HAL_GPIO_Init+0x240>
 80026f6:	2305      	movs	r3, #5
 80026f8:	e008      	b.n	800270c <HAL_GPIO_Init+0x240>
 80026fa:	2304      	movs	r3, #4
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x240>
 80026fe:	2303      	movs	r3, #3
 8002700:	e004      	b.n	800270c <HAL_GPIO_Init+0x240>
 8002702:	2302      	movs	r3, #2
 8002704:	e002      	b.n	800270c <HAL_GPIO_Init+0x240>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x240>
 800270a:	2300      	movs	r3, #0
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f002 0203 	and.w	r2, r2, #3
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	4093      	lsls	r3, r2
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800271c:	4935      	ldr	r1, [pc, #212]	@ (80027f4 <HAL_GPIO_Init+0x328>)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b3d      	ldr	r3, [pc, #244]	@ (8002820 <HAL_GPIO_Init+0x354>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274e:	4a34      	ldr	r2, [pc, #208]	@ (8002820 <HAL_GPIO_Init+0x354>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002754:	4b32      	ldr	r3, [pc, #200]	@ (8002820 <HAL_GPIO_Init+0x354>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002778:	4a29      	ldr	r2, [pc, #164]	@ (8002820 <HAL_GPIO_Init+0x354>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800277e:	4b28      	ldr	r3, [pc, #160]	@ (8002820 <HAL_GPIO_Init+0x354>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002820 <HAL_GPIO_Init+0x354>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <HAL_GPIO_Init+0x354>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027cc:	4a14      	ldr	r2, [pc, #80]	@ (8002820 <HAL_GPIO_Init+0x354>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	f67f ae86 	bls.w	80024ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3724      	adds	r7, #36	@ 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40020800 	.word	0x40020800
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021000 	.word	0x40021000
 800280c:	40021400 	.word	0x40021400
 8002810:	40021800 	.word	0x40021800
 8002814:	40021c00 	.word	0x40021c00
 8002818:	40022000 	.word	0x40022000
 800281c:	40022400 	.word	0x40022400
 8002820:	40013c00 	.word	0x40013c00

08002824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e08b      	b.n	800294e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe ffa4 	bl	8001798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2224      	movs	r2, #36	@ 0x24
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002874:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002884:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	e006      	b.n	80028ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80028aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d108      	bne.n	80028c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	e007      	b.n	80028d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002958 <HAL_I2C_Init+0x134>)
 80028e2:	430b      	orrs	r3, r1
 80028e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69d9      	ldr	r1, [r3, #28]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0201 	orr.w	r2, r2, #1
 800292e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2220      	movs	r2, #32
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	02008000 	.word	0x02008000

0800295c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	4608      	mov	r0, r1
 8002966:	4611      	mov	r1, r2
 8002968:	461a      	mov	r2, r3
 800296a:	4603      	mov	r3, r0
 800296c:	817b      	strh	r3, [r7, #10]
 800296e:	460b      	mov	r3, r1
 8002970:	813b      	strh	r3, [r7, #8]
 8002972:	4613      	mov	r3, r2
 8002974:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b20      	cmp	r3, #32
 8002980:	f040 80f9 	bne.w	8002b76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_I2C_Mem_Write+0x34>
 800298a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800298c:	2b00      	cmp	r3, #0
 800298e:	d105      	bne.n	800299c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002996:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0ed      	b.n	8002b78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_I2C_Mem_Write+0x4e>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e0e6      	b.n	8002b78 <HAL_I2C_Mem_Write+0x21c>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029b2:	f7ff fc6d 	bl	8002290 <HAL_GetTick>
 80029b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2319      	movs	r3, #25
 80029be:	2201      	movs	r2, #1
 80029c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fac3 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0d1      	b.n	8002b78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2221      	movs	r2, #33	@ 0x21
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2240      	movs	r2, #64	@ 0x40
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a3a      	ldr	r2, [r7, #32]
 80029ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80029f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029fc:	88f8      	ldrh	r0, [r7, #6]
 80029fe:	893a      	ldrh	r2, [r7, #8]
 8002a00:	8979      	ldrh	r1, [r7, #10]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f9d3 	bl	8002db8 <I2C_RequestMemoryWrite>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0a9      	b.n	8002b78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	2bff      	cmp	r3, #255	@ 0xff
 8002a2c:	d90e      	bls.n	8002a4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	22ff      	movs	r2, #255	@ 0xff
 8002a32:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	8979      	ldrh	r1, [r7, #10]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fc47 	bl	80032d8 <I2C_TransferConfig>
 8002a4a:	e00f      	b.n	8002a6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	8979      	ldrh	r1, [r7, #10]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fc36 	bl	80032d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fac6 	bl	8003002 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e07b      	b.n	8002b78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a84:	781a      	ldrb	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d034      	beq.n	8002b24 <HAL_I2C_Mem_Write+0x1c8>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d130      	bne.n	8002b24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2180      	movs	r1, #128	@ 0x80
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 fa3f 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e04d      	b.n	8002b78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2bff      	cmp	r3, #255	@ 0xff
 8002ae4:	d90e      	bls.n	8002b04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	22ff      	movs	r2, #255	@ 0xff
 8002aea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	8979      	ldrh	r1, [r7, #10]
 8002af4:	2300      	movs	r3, #0
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fbeb 	bl	80032d8 <I2C_TransferConfig>
 8002b02:	e00f      	b.n	8002b24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	8979      	ldrh	r1, [r7, #10]
 8002b16:	2300      	movs	r3, #0
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 fbda 	bl	80032d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d19e      	bne.n	8002a6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 faac 	bl	8003090 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e01a      	b.n	8002b78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2220      	movs	r2, #32
 8002b48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6859      	ldr	r1, [r3, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b0a      	ldr	r3, [pc, #40]	@ (8002b80 <HAL_I2C_Mem_Write+0x224>)
 8002b56:	400b      	ands	r3, r1
 8002b58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e000      	b.n	8002b78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002b76:	2302      	movs	r3, #2
  }
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	fe00e800 	.word	0xfe00e800

08002b84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	4608      	mov	r0, r1
 8002b8e:	4611      	mov	r1, r2
 8002b90:	461a      	mov	r2, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	817b      	strh	r3, [r7, #10]
 8002b96:	460b      	mov	r3, r1
 8002b98:	813b      	strh	r3, [r7, #8]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	f040 80fd 	bne.w	8002da6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_I2C_Mem_Read+0x34>
 8002bb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0f1      	b.n	8002da8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2C_Mem_Read+0x4e>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e0ea      	b.n	8002da8 <HAL_I2C_Mem_Read+0x224>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bda:	f7ff fb59 	bl	8002290 <HAL_GetTick>
 8002bde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2319      	movs	r3, #25
 8002be6:	2201      	movs	r2, #1
 8002be8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f9af 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0d5      	b.n	8002da8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2222      	movs	r2, #34	@ 0x22
 8002c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2240      	movs	r2, #64	@ 0x40
 8002c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a3a      	ldr	r2, [r7, #32]
 8002c16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c24:	88f8      	ldrh	r0, [r7, #6]
 8002c26:	893a      	ldrh	r2, [r7, #8]
 8002c28:	8979      	ldrh	r1, [r7, #10]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	4603      	mov	r3, r0
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f913 	bl	8002e60 <I2C_RequestMemoryRead>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0ad      	b.n	8002da8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2bff      	cmp	r3, #255	@ 0xff
 8002c54:	d90e      	bls.n	8002c74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	8979      	ldrh	r1, [r7, #10]
 8002c64:	4b52      	ldr	r3, [pc, #328]	@ (8002db0 <HAL_I2C_Mem_Read+0x22c>)
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fb33 	bl	80032d8 <I2C_TransferConfig>
 8002c72:	e00f      	b.n	8002c94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	8979      	ldrh	r1, [r7, #10]
 8002c86:	4b4a      	ldr	r3, [pc, #296]	@ (8002db0 <HAL_I2C_Mem_Read+0x22c>)
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fb22 	bl	80032d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2104      	movs	r1, #4
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f956 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e07c      	b.n	8002da8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d034      	beq.n	8002d54 <HAL_I2C_Mem_Read+0x1d0>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d130      	bne.n	8002d54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2180      	movs	r1, #128	@ 0x80
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f927 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e04d      	b.n	8002da8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2bff      	cmp	r3, #255	@ 0xff
 8002d14:	d90e      	bls.n	8002d34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	8979      	ldrh	r1, [r7, #10]
 8002d24:	2300      	movs	r3, #0
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fad3 	bl	80032d8 <I2C_TransferConfig>
 8002d32:	e00f      	b.n	8002d54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	8979      	ldrh	r1, [r7, #10]
 8002d46:	2300      	movs	r3, #0
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 fac2 	bl	80032d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d19a      	bne.n	8002c94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f994 	bl	8003090 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e01a      	b.n	8002da8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2220      	movs	r2, #32
 8002d78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6859      	ldr	r1, [r3, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <HAL_I2C_Mem_Read+0x230>)
 8002d86:	400b      	ands	r3, r1
 8002d88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e000      	b.n	8002da8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002da6:	2302      	movs	r3, #2
  }
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	80002400 	.word	0x80002400
 8002db4:	fe00e800 	.word	0xfe00e800

08002db8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	4608      	mov	r0, r1
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	817b      	strh	r3, [r7, #10]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	813b      	strh	r3, [r7, #8]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	8979      	ldrh	r1, [r7, #10]
 8002dd8:	4b20      	ldr	r3, [pc, #128]	@ (8002e5c <I2C_RequestMemoryWrite+0xa4>)
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fa79 	bl	80032d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	69b9      	ldr	r1, [r7, #24]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f909 	bl	8003002 <I2C_WaitOnTXISFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e02c      	b.n	8002e54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dfa:	88fb      	ldrh	r3, [r7, #6]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e00:	893b      	ldrh	r3, [r7, #8]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e0a:	e015      	b.n	8002e38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e0c:	893b      	ldrh	r3, [r7, #8]
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	69b9      	ldr	r1, [r7, #24]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f8ef 	bl	8003002 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e012      	b.n	8002e54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e2e:	893b      	ldrh	r3, [r7, #8]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2180      	movs	r1, #128	@ 0x80
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f884 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	80002000 	.word	0x80002000

08002e60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	4608      	mov	r0, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	817b      	strh	r3, [r7, #10]
 8002e72:	460b      	mov	r3, r1
 8002e74:	813b      	strh	r3, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	8979      	ldrh	r1, [r7, #10]
 8002e80:	4b20      	ldr	r3, [pc, #128]	@ (8002f04 <I2C_RequestMemoryRead+0xa4>)
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2300      	movs	r3, #0
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fa26 	bl	80032d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	69b9      	ldr	r1, [r7, #24]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f8b6 	bl	8003002 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e02c      	b.n	8002efa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d105      	bne.n	8002eb2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea6:	893b      	ldrh	r3, [r7, #8]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eb0:	e015      	b.n	8002ede <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002eb2:	893b      	ldrh	r3, [r7, #8]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	69b9      	ldr	r1, [r7, #24]
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f89c 	bl	8003002 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e012      	b.n	8002efa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed4:	893b      	ldrh	r3, [r7, #8]
 8002ed6:	b2da      	uxtb	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2140      	movs	r1, #64	@ 0x40
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f831 	bl	8002f50 <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	80002000 	.word	0x80002000

08002f08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d103      	bne.n	8002f26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d007      	beq.n	8002f44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	619a      	str	r2, [r3, #24]
  }
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f60:	e03b      	b.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	6839      	ldr	r1, [r7, #0]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 f8d6 	bl	8003118 <I2C_IsErrorOccurred>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e041      	b.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d02d      	beq.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7ff f987 	bl	8002290 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d122      	bne.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d113      	bne.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e00f      	b.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699a      	ldr	r2, [r3, #24]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d0b4      	beq.n	8002f62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800300e:	e033      	b.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f87f 	bl	8003118 <I2C_IsErrorOccurred>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e031      	b.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302a:	d025      	beq.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302c:	f7ff f930 	bl	8002290 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	d302      	bcc.n	8003042 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d11a      	bne.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b02      	cmp	r3, #2
 800304e:	d013      	beq.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e007      	b.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	d1c4      	bne.n	8003010 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800309c:	e02f      	b.n	80030fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f838 	bl	8003118 <I2C_IsErrorOccurred>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e02d      	b.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b2:	f7ff f8ed 	bl	8002290 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d11a      	bne.n	80030fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d013      	beq.n	80030fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e007      	b.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b20      	cmp	r3, #32
 800310a:	d1c8      	bne.n	800309e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	@ 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003132:	2300      	movs	r3, #0
 8003134:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d068      	beq.n	8003216 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2210      	movs	r2, #16
 800314a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800314c:	e049      	b.n	80031e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d045      	beq.n	80031e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7ff f89b 	bl	8002290 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <I2C_IsErrorOccurred+0x54>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d13a      	bne.n	80031e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003176:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800317e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800318a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800318e:	d121      	bne.n	80031d4 <I2C_IsErrorOccurred+0xbc>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003196:	d01d      	beq.n	80031d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	2b20      	cmp	r3, #32
 800319c:	d01a      	beq.n	80031d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031ae:	f7ff f86f 	bl	8002290 <HAL_GetTick>
 80031b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031b4:	e00e      	b.n	80031d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031b6:	f7ff f86b 	bl	8002290 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b19      	cmp	r3, #25
 80031c2:	d907      	bls.n	80031d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	f043 0320 	orr.w	r3, r3, #32
 80031ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80031d2:	e006      	b.n	80031e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d1e9      	bne.n	80031b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d003      	beq.n	80031f8 <I2C_IsErrorOccurred+0xe0>
 80031f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0aa      	beq.n	800314e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80031f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d103      	bne.n	8003208 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2220      	movs	r2, #32
 8003206:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003238:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f043 0308 	orr.w	r3, r3, #8
 8003250:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800325a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	f043 0302 	orr.w	r3, r3, #2
 8003272:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800327c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01c      	beq.n	80032c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fe3b 	bl	8002f08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <I2C_IsErrorOccurred+0x1bc>)
 800329e:	400b      	ands	r3, r1
 80032a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80032c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3728      	adds	r7, #40	@ 0x28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	fe00e800 	.word	0xfe00e800

080032d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	817b      	strh	r3, [r7, #10]
 80032e6:	4613      	mov	r3, r2
 80032e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032ea:	897b      	ldrh	r3, [r7, #10]
 80032ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032f0:	7a7b      	ldrb	r3, [r7, #9]
 80032f2:	041b      	lsls	r3, r3, #16
 80032f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	4313      	orrs	r3, r2
 8003302:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003306:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	0d5b      	lsrs	r3, r3, #21
 8003312:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003316:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <I2C_TransferConfig+0x60>)
 8003318:	430b      	orrs	r3, r1
 800331a:	43db      	mvns	r3, r3
 800331c:	ea02 0103 	and.w	r1, r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	03ff63ff 	.word	0x03ff63ff

0800333c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b20      	cmp	r3, #32
 8003350:	d138      	bne.n	80033c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800335c:	2302      	movs	r3, #2
 800335e:	e032      	b.n	80033c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	@ 0x24
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800338e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	e000      	b.n	80033c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033c4:	2302      	movs	r3, #2
  }
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d139      	bne.n	800345c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e033      	b.n	800345e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2224      	movs	r2, #36	@ 0x24
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003424:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	e000      	b.n	800345e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
  }
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a04      	ldr	r2, [pc, #16]	@ (8003488 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40007000 	.word	0x40007000

0800348c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003496:	4b23      	ldr	r3, [pc, #140]	@ (8003524 <HAL_PWREx_EnableOverDrive+0x98>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	4a22      	ldr	r2, [pc, #136]	@ (8003524 <HAL_PWREx_EnableOverDrive+0x98>)
 800349c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_PWREx_EnableOverDrive+0x98>)
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034ba:	f7fe fee9 	bl	8002290 <HAL_GetTick>
 80034be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034c0:	e009      	b.n	80034d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034c2:	f7fe fee5 	bl	8002290 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034d0:	d901      	bls.n	80034d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e022      	b.n	800351c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034d6:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e2:	d1ee      	bne.n	80034c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034e4:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034f0:	f7fe fece 	bl	8002290 <HAL_GetTick>
 80034f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034f6:	e009      	b.n	800350c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034f8:	f7fe feca 	bl	8002290 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003506:	d901      	bls.n	800350c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e007      	b.n	800351c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <HAL_PWREx_EnableOverDrive+0x9c>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003518:	d1ee      	bne.n	80034f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	40007000 	.word	0x40007000

0800352c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003534:	2300      	movs	r3, #0
 8003536:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e291      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8087 	beq.w	800365e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003550:	4b96      	ldr	r3, [pc, #600]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b04      	cmp	r3, #4
 800355a:	d00c      	beq.n	8003576 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355c:	4b93      	ldr	r3, [pc, #588]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 030c 	and.w	r3, r3, #12
 8003564:	2b08      	cmp	r3, #8
 8003566:	d112      	bne.n	800358e <HAL_RCC_OscConfig+0x62>
 8003568:	4b90      	ldr	r3, [pc, #576]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003574:	d10b      	bne.n	800358e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003576:	4b8d      	ldr	r3, [pc, #564]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d06c      	beq.n	800365c <HAL_RCC_OscConfig+0x130>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d168      	bne.n	800365c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e26b      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x7a>
 8003598:	4b84      	ldr	r3, [pc, #528]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a83      	ldr	r2, [pc, #524]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e02e      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x9c>
 80035ae:	4b7f      	ldr	r3, [pc, #508]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7e      	ldr	r2, [pc, #504]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b7c      	ldr	r3, [pc, #496]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7b      	ldr	r2, [pc, #492]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0xc0>
 80035d2:	4b76      	ldr	r3, [pc, #472]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a75      	ldr	r2, [pc, #468]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b73      	ldr	r3, [pc, #460]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a72      	ldr	r2, [pc, #456]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035ec:	4b6f      	ldr	r3, [pc, #444]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6e      	ldr	r2, [pc, #440]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b6c      	ldr	r3, [pc, #432]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6b      	ldr	r2, [pc, #428]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe fe40 	bl	8002290 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe fe3c 	bl	8002290 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e21f      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b61      	ldr	r3, [pc, #388]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xe8>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe fe2c 	bl	8002290 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe fe28 	bl	8002290 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e20b      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	4b57      	ldr	r3, [pc, #348]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x110>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d069      	beq.n	800373e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366a:	4b50      	ldr	r3, [pc, #320]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00b      	beq.n	800368e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003676:	4b4d      	ldr	r3, [pc, #308]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11c      	bne.n	80036bc <HAL_RCC_OscConfig+0x190>
 8003682:	4b4a      	ldr	r3, [pc, #296]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d116      	bne.n	80036bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368e:	4b47      	ldr	r3, [pc, #284]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_RCC_OscConfig+0x17a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e1df      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a6:	4b41      	ldr	r3, [pc, #260]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	493d      	ldr	r1, [pc, #244]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	e040      	b.n	800373e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d023      	beq.n	800370c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	4b39      	ldr	r3, [pc, #228]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a38      	ldr	r2, [pc, #224]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d0:	f7fe fdde 	bl	8002290 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d8:	f7fe fdda 	bl	8002290 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e1bd      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ea:	4b30      	ldr	r3, [pc, #192]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f6:	4b2d      	ldr	r3, [pc, #180]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4929      	ldr	r1, [pc, #164]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003706:	4313      	orrs	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
 800370a:	e018      	b.n	800373e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800370c:	4b27      	ldr	r3, [pc, #156]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a26      	ldr	r2, [pc, #152]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe fdba 	bl	8002290 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003720:	f7fe fdb6 	bl	8002290 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e199      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003732:	4b1e      	ldr	r3, [pc, #120]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d038      	beq.n	80037bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d019      	beq.n	8003786 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003752:	4b16      	ldr	r3, [pc, #88]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003756:	4a15      	ldr	r2, [pc, #84]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fe fd97 	bl	8002290 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003766:	f7fe fd93 	bl	8002290 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e176      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003778:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800377a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x23a>
 8003784:	e01a      	b.n	80037bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003786:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 8003788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378a:	4a08      	ldr	r2, [pc, #32]	@ (80037ac <HAL_RCC_OscConfig+0x280>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003792:	f7fe fd7d 	bl	8002290 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379a:	f7fe fd79 	bl	8002290 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d903      	bls.n	80037b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e15c      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
 80037ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b0:	4b91      	ldr	r3, [pc, #580]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80037b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ee      	bne.n	800379a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80a4 	beq.w	8003912 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ca:	4b8b      	ldr	r3, [pc, #556]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10d      	bne.n	80037f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d6:	4b88      	ldr	r3, [pc, #544]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	4a87      	ldr	r2, [pc, #540]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e2:	4b85      	ldr	r3, [pc, #532]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f2:	4b82      	ldr	r3, [pc, #520]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80037fe:	4b7f      	ldr	r3, [pc, #508]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a7e      	ldr	r2, [pc, #504]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800380a:	f7fe fd41 	bl	8002290 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003812:	f7fe fd3d 	bl	8002290 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b64      	cmp	r3, #100	@ 0x64
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e120      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003824:	4b75      	ldr	r3, [pc, #468]	@ (80039fc <HAL_RCC_OscConfig+0x4d0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x31a>
 8003838:	4b6f      	ldr	r3, [pc, #444]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383c:	4a6e      	ldr	r2, [pc, #440]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	@ 0x70
 8003844:	e02d      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x33c>
 800384e:	4b6a      	ldr	r3, [pc, #424]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003852:	4a69      	ldr	r2, [pc, #420]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6713      	str	r3, [r2, #112]	@ 0x70
 800385a:	4b67      	ldr	r3, [pc, #412]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	4a66      	ldr	r2, [pc, #408]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	6713      	str	r3, [r2, #112]	@ 0x70
 8003866:	e01c      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b05      	cmp	r3, #5
 800386e:	d10c      	bne.n	800388a <HAL_RCC_OscConfig+0x35e>
 8003870:	4b61      	ldr	r3, [pc, #388]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003874:	4a60      	ldr	r2, [pc, #384]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	6713      	str	r3, [r2, #112]	@ 0x70
 800387c:	4b5e      	ldr	r3, [pc, #376]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a5d      	ldr	r2, [pc, #372]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
 8003888:	e00b      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
 800388a:	4b5b      	ldr	r3, [pc, #364]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800388c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388e:	4a5a      	ldr	r2, [pc, #360]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6713      	str	r3, [r2, #112]	@ 0x70
 8003896:	4b58      	ldr	r3, [pc, #352]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389a:	4a57      	ldr	r2, [pc, #348]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d015      	beq.n	80038d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fe fcf1 	bl	8002290 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b2:	f7fe fced 	bl	8002290 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0ce      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c8:	4b4b      	ldr	r3, [pc, #300]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ee      	beq.n	80038b2 <HAL_RCC_OscConfig+0x386>
 80038d4:	e014      	b.n	8003900 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d6:	f7fe fcdb 	bl	8002290 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038de:	f7fe fcd7 	bl	8002290 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e0b8      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f4:	4b40      	ldr	r3, [pc, #256]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ee      	bne.n	80038de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d105      	bne.n	8003912 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003906:	4b3c      	ldr	r3, [pc, #240]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390a:	4a3b      	ldr	r2, [pc, #236]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800390c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003910:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80a4 	beq.w	8003a64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800391c:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	2b08      	cmp	r3, #8
 8003926:	d06b      	beq.n	8003a00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d149      	bne.n	80039c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003930:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a30      	ldr	r2, [pc, #192]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800393a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fe fca8 	bl	8002290 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7fe fca4 	bl	8002290 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e087      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	4b28      	ldr	r3, [pc, #160]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	019b      	lsls	r3, r3, #6
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	3b01      	subs	r3, #1
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	4313      	orrs	r3, r2
 8003988:	4a1b      	ldr	r2, [pc, #108]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 800398a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800398e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003990:	4b19      	ldr	r3, [pc, #100]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a18      	ldr	r2, [pc, #96]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 8003996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800399a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe fc78 	bl	8002290 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fe fc74 	bl	8002290 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e057      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b6:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x478>
 80039c2:	e04f      	b.n	8003a64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c4:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0b      	ldr	r2, [pc, #44]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80039ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d0:	f7fe fc5e 	bl	8002290 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d8:	f7fe fc5a 	bl	8002290 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e03d      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ea:	4b03      	ldr	r3, [pc, #12]	@ (80039f8 <HAL_RCC_OscConfig+0x4cc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCC_OscConfig+0x4ac>
 80039f6:	e035      	b.n	8003a64 <HAL_RCC_OscConfig+0x538>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a00:	4b1b      	ldr	r3, [pc, #108]	@ (8003a70 <HAL_RCC_OscConfig+0x544>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d028      	beq.n	8003a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d121      	bne.n	8003a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d11a      	bne.n	8003a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a30:	4013      	ands	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d111      	bne.n	8003a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	085b      	lsrs	r3, r3, #1
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800

08003a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0d0      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d910      	bls.n	8003abc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b67      	ldr	r3, [pc, #412]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 020f 	bic.w	r2, r3, #15
 8003aa2:	4965      	ldr	r1, [pc, #404]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b63      	ldr	r3, [pc, #396]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0b8      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d020      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ad4:	4b59      	ldr	r3, [pc, #356]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	4a58      	ldr	r2, [pc, #352]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003ada:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ade:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aec:	4b53      	ldr	r3, [pc, #332]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	4a52      	ldr	r2, [pc, #328]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003af2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003af6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af8:	4b50      	ldr	r3, [pc, #320]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	494d      	ldr	r1, [pc, #308]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d040      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1e:	4b47      	ldr	r3, [pc, #284]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d115      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e07f      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d107      	bne.n	8003b46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b36:	4b41      	ldr	r3, [pc, #260]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e073      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b46:	4b3d      	ldr	r3, [pc, #244]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e06b      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b56:	4b39      	ldr	r3, [pc, #228]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f023 0203 	bic.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4936      	ldr	r1, [pc, #216]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b68:	f7fe fb92 	bl	8002290 <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b70:	f7fe fb8e 	bl	8002290 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e053      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	4b2d      	ldr	r3, [pc, #180]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 020c 	and.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d1eb      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b98:	4b27      	ldr	r3, [pc, #156]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d210      	bcs.n	8003bc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba6:	4b24      	ldr	r3, [pc, #144]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f023 020f 	bic.w	r2, r3, #15
 8003bae:	4922      	ldr	r1, [pc, #136]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb6:	4b20      	ldr	r3, [pc, #128]	@ (8003c38 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e032      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd4:	4b19      	ldr	r3, [pc, #100]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4916      	ldr	r1, [pc, #88]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003bf2:	4b12      	ldr	r3, [pc, #72]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	490e      	ldr	r1, [pc, #56]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c06:	f000 f821 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <HAL_RCC_ClockConfig+0x1c8>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	490a      	ldr	r1, [pc, #40]	@ (8003c40 <HAL_RCC_ClockConfig+0x1cc>)
 8003c18:	5ccb      	ldrb	r3, [r1, r3]
 8003c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1e:	4a09      	ldr	r2, [pc, #36]	@ (8003c44 <HAL_RCC_ClockConfig+0x1d0>)
 8003c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c22:	4b09      	ldr	r3, [pc, #36]	@ (8003c48 <HAL_RCC_ClockConfig+0x1d4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fe faee 	bl	8002208 <HAL_InitTick>

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023c00 	.word	0x40023c00
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	0800a8b0 	.word	0x0800a8b0
 8003c44:	20000000 	.word	0x20000000
 8003c48:	20000004 	.word	0x20000004

08003c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c50:	b094      	sub	sp, #80	@ 0x50
 8003c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c54:	2300      	movs	r3, #0
 8003c56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c58:	2300      	movs	r3, #0
 8003c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c64:	4b79      	ldr	r3, [pc, #484]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f003 030c 	and.w	r3, r3, #12
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d00d      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0x40>
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	f200 80e1 	bhi.w	8003e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x34>
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d003      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c7e:	e0db      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c80:	4b73      	ldr	r3, [pc, #460]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c84:	e0db      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c86:	4b73      	ldr	r3, [pc, #460]	@ (8003e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c8a:	e0d8      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c94:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c96:	4b6d      	ldr	r3, [pc, #436]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d063      	beq.n	8003d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	2200      	movs	r2, #0
 8003caa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cbe:	4622      	mov	r2, r4
 8003cc0:	462b      	mov	r3, r5
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	0159      	lsls	r1, r3, #5
 8003ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd0:	0150      	lsls	r0, r2, #5
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	1a51      	subs	r1, r2, r1
 8003cda:	6139      	str	r1, [r7, #16]
 8003cdc:	4629      	mov	r1, r5
 8003cde:	eb63 0301 	sbc.w	r3, r3, r1
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cf0:	4659      	mov	r1, fp
 8003cf2:	018b      	lsls	r3, r1, #6
 8003cf4:	4651      	mov	r1, sl
 8003cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cfa:	4651      	mov	r1, sl
 8003cfc:	018a      	lsls	r2, r1, #6
 8003cfe:	4651      	mov	r1, sl
 8003d00:	ebb2 0801 	subs.w	r8, r2, r1
 8003d04:	4659      	mov	r1, fp
 8003d06:	eb63 0901 	sbc.w	r9, r3, r1
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d1e:	4690      	mov	r8, r2
 8003d20:	4699      	mov	r9, r3
 8003d22:	4623      	mov	r3, r4
 8003d24:	eb18 0303 	adds.w	r3, r8, r3
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	462b      	mov	r3, r5
 8003d2c:	eb49 0303 	adc.w	r3, r9, r3
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d3e:	4629      	mov	r1, r5
 8003d40:	024b      	lsls	r3, r1, #9
 8003d42:	4621      	mov	r1, r4
 8003d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d48:	4621      	mov	r1, r4
 8003d4a:	024a      	lsls	r2, r1, #9
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d52:	2200      	movs	r2, #0
 8003d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d5c:	f7fc ffb4 	bl	8000cc8 <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4613      	mov	r3, r2
 8003d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d68:	e058      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d6a:	4b38      	ldr	r3, [pc, #224]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	099b      	lsrs	r3, r3, #6
 8003d70:	2200      	movs	r2, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	4611      	mov	r1, r2
 8003d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d84:	4642      	mov	r2, r8
 8003d86:	464b      	mov	r3, r9
 8003d88:	f04f 0000 	mov.w	r0, #0
 8003d8c:	f04f 0100 	mov.w	r1, #0
 8003d90:	0159      	lsls	r1, r3, #5
 8003d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d96:	0150      	lsls	r0, r2, #5
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003da2:	4649      	mov	r1, r9
 8003da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8003dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	00eb      	lsls	r3, r5, #3
 8003dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dd2:	00e2      	lsls	r2, r4, #3
 8003dd4:	4614      	mov	r4, r2
 8003dd6:	461d      	mov	r5, r3
 8003dd8:	4643      	mov	r3, r8
 8003dda:	18e3      	adds	r3, r4, r3
 8003ddc:	603b      	str	r3, [r7, #0]
 8003dde:	464b      	mov	r3, r9
 8003de0:	eb45 0303 	adc.w	r3, r5, r3
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003df2:	4629      	mov	r1, r5
 8003df4:	028b      	lsls	r3, r1, #10
 8003df6:	4621      	mov	r1, r4
 8003df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	028a      	lsls	r2, r1, #10
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e06:	2200      	movs	r2, #0
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	61fa      	str	r2, [r7, #28]
 8003e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e10:	f7fc ff5a 	bl	8000cc8 <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4613      	mov	r3, r2
 8003e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	0c1b      	lsrs	r3, r3, #16
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	3301      	adds	r3, #1
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003e2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e36:	e002      	b.n	8003e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e38:	4b05      	ldr	r3, [pc, #20]	@ (8003e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3750      	adds	r7, #80	@ 0x50
 8003e44:	46bd      	mov	sp, r7
 8003e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	00f42400 	.word	0x00f42400
 8003e54:	007a1200 	.word	0x007a1200

08003e58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e5c:	4b03      	ldr	r3, [pc, #12]	@ (8003e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20000000 	.word	0x20000000

08003e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e74:	f7ff fff0 	bl	8003e58 <HAL_RCC_GetHCLKFreq>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	0a9b      	lsrs	r3, r3, #10
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	4903      	ldr	r1, [pc, #12]	@ (8003e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e86:	5ccb      	ldrb	r3, [r1, r3]
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40023800 	.word	0x40023800
 8003e94:	0800a8c0 	.word	0x0800a8c0

08003e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e9c:	f7ff ffdc 	bl	8003e58 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b05      	ldr	r3, [pc, #20]	@ (8003eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0b5b      	lsrs	r3, r3, #13
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4903      	ldr	r1, [pc, #12]	@ (8003ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	0800a8c0 	.word	0x0800a8c0

08003ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ee8:	4b69      	ldr	r3, [pc, #420]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a68      	ldr	r2, [pc, #416]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003ef2:	6093      	str	r3, [r2, #8]
 8003ef4:	4b66      	ldr	r3, [pc, #408]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003efc:	4964      	ldr	r1, [pc, #400]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d017      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f20:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f28:	4959      	ldr	r1, [pc, #356]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f38:	d101      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f46:	2301      	movs	r3, #1
 8003f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d017      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f56:	4b4e      	ldr	r3, [pc, #312]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f5c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	494a      	ldr	r1, [pc, #296]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f74:	d101      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f76:	2301      	movs	r3, #1
 8003f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f82:	2301      	movs	r3, #1
 8003f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f92:	2301      	movs	r3, #1
 8003f94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 808b 	beq.w	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	4a39      	ldr	r2, [pc, #228]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fb0:	4b37      	ldr	r3, [pc, #220]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fbc:	4b35      	ldr	r3, [pc, #212]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a34      	ldr	r2, [pc, #208]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc8:	f7fe f962 	bl	8002290 <HAL_GetTick>
 8003fcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd0:	f7fe f95e 	bl	8002290 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	@ 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e357      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fee:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ff6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d035      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	429a      	cmp	r2, r3
 800400a:	d02e      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800400c:	4b20      	ldr	r3, [pc, #128]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004010:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004014:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004016:	4b1e      	ldr	r3, [pc, #120]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	4a1d      	ldr	r2, [pc, #116]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004020:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004022:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004026:	4a1a      	ldr	r2, [pc, #104]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800402c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800402e:	4a18      	ldr	r2, [pc, #96]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004034:	4b16      	ldr	r3, [pc, #88]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d114      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fe f926 	bl	8002290 <HAL_GetTick>
 8004044:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004046:	e00a      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7fe f922 	bl	8002290 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e319      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405e:	4b0c      	ldr	r3, [pc, #48]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0ee      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004076:	d111      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004078:	4b05      	ldr	r3, [pc, #20]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004084:	4b04      	ldr	r3, [pc, #16]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004086:	400b      	ands	r3, r1
 8004088:	4901      	ldr	r1, [pc, #4]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
 800408e:	e00b      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004090:	40023800 	.word	0x40023800
 8004094:	40007000 	.word	0x40007000
 8004098:	0ffffcff 	.word	0x0ffffcff
 800409c:	4baa      	ldr	r3, [pc, #680]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	4aa9      	ldr	r2, [pc, #676]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80040a6:	6093      	str	r3, [r2, #8]
 80040a8:	4ba7      	ldr	r3, [pc, #668]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040aa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b4:	49a4      	ldr	r1, [pc, #656]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d010      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040c6:	4ba0      	ldr	r3, [pc, #640]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040cc:	4a9e      	ldr	r2, [pc, #632]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80040d6:	4b9c      	ldr	r3, [pc, #624]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	4999      	ldr	r1, [pc, #612]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040f4:	4b94      	ldr	r3, [pc, #592]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004102:	4991      	ldr	r1, [pc, #580]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004116:	4b8c      	ldr	r3, [pc, #560]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004124:	4988      	ldr	r1, [pc, #544]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004138:	4b83      	ldr	r3, [pc, #524]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004146:	4980      	ldr	r1, [pc, #512]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800415a:	4b7b      	ldr	r3, [pc, #492]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004160:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004168:	4977      	ldr	r1, [pc, #476]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800417c:	4b72      	ldr	r3, [pc, #456]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	496f      	ldr	r1, [pc, #444]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800419e:	4b6a      	ldr	r3, [pc, #424]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a4:	f023 020c 	bic.w	r2, r3, #12
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ac:	4966      	ldr	r1, [pc, #408]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c0:	4b61      	ldr	r3, [pc, #388]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ce:	495e      	ldr	r1, [pc, #376]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041e2:	4b59      	ldr	r3, [pc, #356]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f0:	4955      	ldr	r1, [pc, #340]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004204:	4b50      	ldr	r3, [pc, #320]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004212:	494d      	ldr	r1, [pc, #308]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004226:	4b48      	ldr	r3, [pc, #288]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004234:	4944      	ldr	r1, [pc, #272]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004248:	4b3f      	ldr	r3, [pc, #252]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004256:	493c      	ldr	r1, [pc, #240]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800426a:	4b37      	ldr	r3, [pc, #220]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004270:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004278:	4933      	ldr	r1, [pc, #204]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800428c:	4b2e      	ldr	r3, [pc, #184]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004292:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800429a:	492b      	ldr	r1, [pc, #172]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d011      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042ae:	4b26      	ldr	r3, [pc, #152]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042bc:	4922      	ldr	r1, [pc, #136]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042cc:	d101      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042de:	2301      	movs	r3, #1
 80042e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ee:	4b16      	ldr	r3, [pc, #88]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042fc:	4912      	ldr	r1, [pc, #72]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004310:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004316:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004320:	4909      	ldr	r1, [pc, #36]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d006      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80d9 	beq.w	80044ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800433c:	4b02      	ldr	r3, [pc, #8]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a01      	ldr	r2, [pc, #4]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004342:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004346:	e001      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004348:	40023800 	.word	0x40023800
 800434c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434e:	f7fd ff9f 	bl	8002290 <HAL_GetTick>
 8004352:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004356:	f7fd ff9b 	bl	8002290 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b64      	cmp	r3, #100	@ 0x64
 8004362:	d901      	bls.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e194      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004368:	4b6c      	ldr	r3, [pc, #432]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f0      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d021      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004384:	2b00      	cmp	r3, #0
 8004386:	d11d      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004388:	4b64      	ldr	r3, [pc, #400]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004396:	4b61      	ldr	r3, [pc, #388]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800439c:	0e1b      	lsrs	r3, r3, #24
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	019a      	lsls	r2, r3, #6
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	431a      	orrs	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	071b      	lsls	r3, r3, #28
 80043bc:	4957      	ldr	r1, [pc, #348]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d004      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043d8:	d00a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d02e      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ee:	d129      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043f0:	4b4a      	ldr	r3, [pc, #296]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f6:	0c1b      	lsrs	r3, r3, #16
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043fe:	4b47      	ldr	r3, [pc, #284]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004404:	0f1b      	lsrs	r3, r3, #28
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	019a      	lsls	r2, r3, #6
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	061b      	lsls	r3, r3, #24
 800441e:	431a      	orrs	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	071b      	lsls	r3, r3, #28
 8004424:	493d      	ldr	r1, [pc, #244]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800442c:	4b3b      	ldr	r3, [pc, #236]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004432:	f023 021f 	bic.w	r2, r3, #31
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	3b01      	subs	r3, #1
 800443c:	4937      	ldr	r1, [pc, #220]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01d      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004450:	4b32      	ldr	r3, [pc, #200]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004456:	0e1b      	lsrs	r3, r3, #24
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800445e:	4b2f      	ldr	r3, [pc, #188]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004464:	0f1b      	lsrs	r3, r3, #28
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	019a      	lsls	r2, r3, #6
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	041b      	lsls	r3, r3, #16
 8004478:	431a      	orrs	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	061b      	lsls	r3, r3, #24
 800447e:	431a      	orrs	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	071b      	lsls	r3, r3, #28
 8004484:	4925      	ldr	r1, [pc, #148]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d011      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	019a      	lsls	r2, r3, #6
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	061b      	lsls	r3, r3, #24
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	071b      	lsls	r3, r3, #28
 80044b4:	4919      	ldr	r1, [pc, #100]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044bc:	4b17      	ldr	r3, [pc, #92]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a16      	ldr	r2, [pc, #88]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c8:	f7fd fee2 	bl	8002290 <HAL_GetTick>
 80044cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044d0:	f7fd fede 	bl	8002290 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b64      	cmp	r3, #100	@ 0x64
 80044dc:	d901      	bls.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e0d7      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044e2:	4b0e      	ldr	r3, [pc, #56]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	f040 80cd 	bne.w	8004690 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044f6:	4b09      	ldr	r3, [pc, #36]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a08      	ldr	r2, [pc, #32]	@ (800451c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004502:	f7fd fec5 	bl	8002290 <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004508:	e00a      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800450a:	f7fd fec1 	bl	8002290 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b64      	cmp	r3, #100	@ 0x64
 8004516:	d903      	bls.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e0ba      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800451c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004520:	4b5e      	ldr	r3, [pc, #376]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800452c:	d0ed      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800454a:	2b00      	cmp	r3, #0
 800454c:	d02e      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d12a      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004556:	4b51      	ldr	r3, [pc, #324]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004564:	4b4d      	ldr	r3, [pc, #308]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456a:	0f1b      	lsrs	r3, r3, #28
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	019a      	lsls	r2, r3, #6
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	061b      	lsls	r3, r3, #24
 8004584:	431a      	orrs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	071b      	lsls	r3, r3, #28
 800458a:	4944      	ldr	r1, [pc, #272]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004592:	4b42      	ldr	r3, [pc, #264]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004598:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	493d      	ldr	r1, [pc, #244]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d022      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045c0:	d11d      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045c2:	4b36      	ldr	r3, [pc, #216]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c8:	0e1b      	lsrs	r3, r3, #24
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045d0:	4b32      	ldr	r3, [pc, #200]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d6:	0f1b      	lsrs	r3, r3, #28
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	019a      	lsls	r2, r3, #6
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	431a      	orrs	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	061b      	lsls	r3, r3, #24
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	071b      	lsls	r3, r3, #28
 80045f6:	4929      	ldr	r1, [pc, #164]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d028      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800460a:	4b24      	ldr	r3, [pc, #144]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004610:	0e1b      	lsrs	r3, r3, #24
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004618:	4b20      	ldr	r3, [pc, #128]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461e:	0c1b      	lsrs	r3, r3, #16
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	019a      	lsls	r2, r3, #6
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	431a      	orrs	r2, r3
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	061b      	lsls	r3, r3, #24
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	071b      	lsls	r3, r3, #28
 800463e:	4917      	ldr	r1, [pc, #92]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004646:	4b15      	ldr	r3, [pc, #84]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800464c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004654:	4911      	ldr	r1, [pc, #68]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800465c:	4b0f      	ldr	r3, [pc, #60]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0e      	ldr	r2, [pc, #56]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004668:	f7fd fe12 	bl	8002290 <HAL_GetTick>
 800466c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004670:	f7fd fe0e 	bl	8002290 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	@ 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e007      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004682:	4b06      	ldr	r3, [pc, #24]	@ (800469c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800468a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800468e:	d1ef      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800

080046a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e049      	b.n	8004746 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fd fcae 	bl	8002028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3304      	adds	r3, #4
 80046dc:	4619      	mov	r1, r3
 80046de:	4610      	mov	r0, r2
 80046e0:	f000 faa8 	bl	8004c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d001      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e054      	b.n	8004812 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a26      	ldr	r2, [pc, #152]	@ (8004820 <HAL_TIM_Base_Start_IT+0xd0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d022      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004792:	d01d      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a22      	ldr	r2, [pc, #136]	@ (8004824 <HAL_TIM_Base_Start_IT+0xd4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d018      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a21      	ldr	r2, [pc, #132]	@ (8004828 <HAL_TIM_Base_Start_IT+0xd8>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d013      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1f      	ldr	r2, [pc, #124]	@ (800482c <HAL_TIM_Base_Start_IT+0xdc>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00e      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1e      	ldr	r2, [pc, #120]	@ (8004830 <HAL_TIM_Base_Start_IT+0xe0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d009      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004834 <HAL_TIM_Base_Start_IT+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1b      	ldr	r2, [pc, #108]	@ (8004838 <HAL_TIM_Base_Start_IT+0xe8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d115      	bne.n	80047fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	4b19      	ldr	r3, [pc, #100]	@ (800483c <HAL_TIM_Base_Start_IT+0xec>)
 80047d8:	4013      	ands	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b06      	cmp	r3, #6
 80047e0:	d015      	beq.n	800480e <HAL_TIM_Base_Start_IT+0xbe>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e8:	d011      	beq.n	800480e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0201 	orr.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	e008      	b.n	800480e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	e000      	b.n	8004810 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40010400 	.word	0x40010400
 8004834:	40014000 	.word	0x40014000
 8004838:	40001800 	.word	0x40001800
 800483c:	00010007 	.word	0x00010007

08004840 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d020      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0202 	mvn.w	r2, #2
 8004874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f9b4 	bl	8004bf8 <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f9a6 	bl	8004be4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f9b7 	bl	8004c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0304 	and.w	r3, r3, #4
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d020      	beq.n	80048f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01b      	beq.n	80048f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0204 	mvn.w	r2, #4
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2202      	movs	r2, #2
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f98e 	bl	8004bf8 <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f980 	bl	8004be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f991 	bl	8004c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d020      	beq.n	800493c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01b      	beq.n	800493c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0208 	mvn.w	r2, #8
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2204      	movs	r2, #4
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f968 	bl	8004bf8 <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f95a 	bl	8004be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f96b 	bl	8004c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	2b00      	cmp	r3, #0
 8004944:	d020      	beq.n	8004988 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01b      	beq.n	8004988 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0210 	mvn.w	r2, #16
 8004958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2208      	movs	r2, #8
 800495e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f942 	bl	8004bf8 <HAL_TIM_IC_CaptureCallback>
 8004974:	e005      	b.n	8004982 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f934 	bl	8004be4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f945 	bl	8004c0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00c      	beq.n	80049ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0201 	mvn.w	r2, #1
 80049a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7fd f88e 	bl	8001ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d104      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00c      	beq.n	80049da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fb0b 	bl	8004ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00c      	beq.n	80049fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fb03 	bl	8005004 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00c      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f8ff 	bl	8004c20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00c      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f06f 0220 	mvn.w	r2, #32
 8004a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 facb 	bl	8004fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a46:	bf00      	nop
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
	...

08004a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_TIM_ConfigClockSource+0x1c>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e0b4      	b.n	8004bd6 <HAL_TIM_ConfigClockSource+0x186>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	4b56      	ldr	r3, [pc, #344]	@ (8004be0 <HAL_TIM_ConfigClockSource+0x190>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aa4:	d03e      	beq.n	8004b24 <HAL_TIM_ConfigClockSource+0xd4>
 8004aa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aaa:	f200 8087 	bhi.w	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab2:	f000 8086 	beq.w	8004bc2 <HAL_TIM_ConfigClockSource+0x172>
 8004ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aba:	d87f      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004abc:	2b70      	cmp	r3, #112	@ 0x70
 8004abe:	d01a      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0xa6>
 8004ac0:	2b70      	cmp	r3, #112	@ 0x70
 8004ac2:	d87b      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ac4:	2b60      	cmp	r3, #96	@ 0x60
 8004ac6:	d050      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0x11a>
 8004ac8:	2b60      	cmp	r3, #96	@ 0x60
 8004aca:	d877      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004acc:	2b50      	cmp	r3, #80	@ 0x50
 8004ace:	d03c      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0xfa>
 8004ad0:	2b50      	cmp	r3, #80	@ 0x50
 8004ad2:	d873      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ad4:	2b40      	cmp	r3, #64	@ 0x40
 8004ad6:	d058      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0x13a>
 8004ad8:	2b40      	cmp	r3, #64	@ 0x40
 8004ada:	d86f      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004adc:	2b30      	cmp	r3, #48	@ 0x30
 8004ade:	d064      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x15a>
 8004ae0:	2b30      	cmp	r3, #48	@ 0x30
 8004ae2:	d86b      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d060      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x15a>
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d867      	bhi.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d05c      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x15a>
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d05a      	beq.n	8004baa <HAL_TIM_ConfigClockSource+0x15a>
 8004af4:	e062      	b.n	8004bbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b06:	f000 f9bb 	bl	8004e80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	609a      	str	r2, [r3, #8]
      break;
 8004b22:	e04f      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b34:	f000 f9a4 	bl	8004e80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b46:	609a      	str	r2, [r3, #8]
      break;
 8004b48:	e03c      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b56:	461a      	mov	r2, r3
 8004b58:	f000 f918 	bl	8004d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2150      	movs	r1, #80	@ 0x50
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f971 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004b68:	e02c      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b76:	461a      	mov	r2, r3
 8004b78:	f000 f937 	bl	8004dea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2160      	movs	r1, #96	@ 0x60
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f961 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004b88:	e01c      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b96:	461a      	mov	r2, r3
 8004b98:	f000 f8f8 	bl	8004d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2140      	movs	r1, #64	@ 0x40
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 f951 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004ba8:	e00c      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	f000 f948 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004bba:	e003      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc0:	e000      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	fffeff88 	.word	0xfffeff88

08004be4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a46      	ldr	r2, [pc, #280]	@ (8004d60 <TIM_Base_SetConfig+0x12c>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d013      	beq.n	8004c74 <TIM_Base_SetConfig+0x40>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c52:	d00f      	beq.n	8004c74 <TIM_Base_SetConfig+0x40>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a43      	ldr	r2, [pc, #268]	@ (8004d64 <TIM_Base_SetConfig+0x130>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00b      	beq.n	8004c74 <TIM_Base_SetConfig+0x40>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a42      	ldr	r2, [pc, #264]	@ (8004d68 <TIM_Base_SetConfig+0x134>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d007      	beq.n	8004c74 <TIM_Base_SetConfig+0x40>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a41      	ldr	r2, [pc, #260]	@ (8004d6c <TIM_Base_SetConfig+0x138>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <TIM_Base_SetConfig+0x40>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a40      	ldr	r2, [pc, #256]	@ (8004d70 <TIM_Base_SetConfig+0x13c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d108      	bne.n	8004c86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a35      	ldr	r2, [pc, #212]	@ (8004d60 <TIM_Base_SetConfig+0x12c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d02b      	beq.n	8004ce6 <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c94:	d027      	beq.n	8004ce6 <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a32      	ldr	r2, [pc, #200]	@ (8004d64 <TIM_Base_SetConfig+0x130>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d023      	beq.n	8004ce6 <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a31      	ldr	r2, [pc, #196]	@ (8004d68 <TIM_Base_SetConfig+0x134>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d01f      	beq.n	8004ce6 <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a30      	ldr	r2, [pc, #192]	@ (8004d6c <TIM_Base_SetConfig+0x138>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d01b      	beq.n	8004ce6 <TIM_Base_SetConfig+0xb2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a2f      	ldr	r2, [pc, #188]	@ (8004d70 <TIM_Base_SetConfig+0x13c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d017      	beq.n	8004ce6 <TIM_Base_SetConfig+0xb2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a2e      	ldr	r2, [pc, #184]	@ (8004d74 <TIM_Base_SetConfig+0x140>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d013      	beq.n	8004ce6 <TIM_Base_SetConfig+0xb2>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d78 <TIM_Base_SetConfig+0x144>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d00f      	beq.n	8004ce6 <TIM_Base_SetConfig+0xb2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8004d7c <TIM_Base_SetConfig+0x148>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00b      	beq.n	8004ce6 <TIM_Base_SetConfig+0xb2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a2b      	ldr	r2, [pc, #172]	@ (8004d80 <TIM_Base_SetConfig+0x14c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d007      	beq.n	8004ce6 <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a2a      	ldr	r2, [pc, #168]	@ (8004d84 <TIM_Base_SetConfig+0x150>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a29      	ldr	r2, [pc, #164]	@ (8004d88 <TIM_Base_SetConfig+0x154>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d108      	bne.n	8004cf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a10      	ldr	r2, [pc, #64]	@ (8004d60 <TIM_Base_SetConfig+0x12c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_Base_SetConfig+0xf8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a12      	ldr	r2, [pc, #72]	@ (8004d70 <TIM_Base_SetConfig+0x13c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d103      	bne.n	8004d34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d105      	bne.n	8004d52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	611a      	str	r2, [r3, #16]
  }
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40010000 	.word	0x40010000
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40010400 	.word	0x40010400
 8004d74:	40014000 	.word	0x40014000
 8004d78:	40014400 	.word	0x40014400
 8004d7c:	40014800 	.word	0x40014800
 8004d80:	40001800 	.word	0x40001800
 8004d84:	40001c00 	.word	0x40001c00
 8004d88:	40002000 	.word	0x40002000

08004d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f023 0201 	bic.w	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f023 030a 	bic.w	r3, r3, #10
 8004dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b087      	sub	sp, #28
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f023 0210 	bic.w	r2, r3, #16
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	031b      	lsls	r3, r3, #12
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f043 0307 	orr.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	021a      	lsls	r2, r3, #8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e06d      	b.n	8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a30      	ldr	r2, [pc, #192]	@ (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d004      	beq.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a2f      	ldr	r2, [pc, #188]	@ (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d108      	bne.n	8004f1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a20      	ldr	r2, [pc, #128]	@ (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d022      	beq.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f4a:	d01d      	beq.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d018      	beq.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00e      	beq.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a15      	ldr	r2, [pc, #84]	@ (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d009      	beq.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a16      	ldr	r2, [pc, #88]	@ (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a15      	ldr	r2, [pc, #84]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d10c      	bne.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40010400 	.word	0x40010400
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40000800 	.word	0x40000800
 8004fd0:	40000c00 	.word	0x40000c00
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40001800 	.word	0x40001800

08004fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e040      	b.n	80050ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7fd f850 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2224      	movs	r2, #36	@ 0x24
 8005044:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0201 	bic.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fb66 	bl	8005730 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f8ff 	bl	8005268 <UART_SetConfig>
 800506a:	4603      	mov	r3, r0
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e01b      	b.n	80050ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fbe5 	bl	8005874 <UART_CheckIdleState>
 80050aa:	4603      	mov	r3, r0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	@ 0x28
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	4613      	mov	r3, r2
 80050c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050c8:	2b20      	cmp	r3, #32
 80050ca:	d177      	bne.n	80051bc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_UART_Transmit+0x24>
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e070      	b.n	80051be <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2221      	movs	r2, #33	@ 0x21
 80050e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ea:	f7fd f8d1 	bl	8002290 <HAL_GetTick>
 80050ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	88fa      	ldrh	r2, [r7, #6]
 80050f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005108:	d108      	bne.n	800511c <HAL_UART_Transmit+0x68>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d104      	bne.n	800511c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	e003      	b.n	8005124 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005120:	2300      	movs	r3, #0
 8005122:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005124:	e02f      	b.n	8005186 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2200      	movs	r2, #0
 800512e:	2180      	movs	r1, #128	@ 0x80
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fbf6 	bl	8005922 <UART_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d004      	beq.n	8005146 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e03b      	b.n	80051be <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10b      	bne.n	8005164 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	461a      	mov	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800515a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	3302      	adds	r3, #2
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	e007      	b.n	8005174 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	781a      	ldrb	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	3301      	adds	r3, #1
 8005172:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1c9      	bne.n	8005126 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2200      	movs	r2, #0
 800519a:	2140      	movs	r1, #64	@ 0x40
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 fbc0 	bl	8005922 <UART_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d004      	beq.n	80051b2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2220      	movs	r2, #32
 80051ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e005      	b.n	80051be <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80051b8:	2300      	movs	r3, #0
 80051ba:	e000      	b.n	80051be <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80051bc:	2302      	movs	r3, #2
  }
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b08a      	sub	sp, #40	@ 0x28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	4613      	mov	r3, r2
 80051d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d132      	bne.n	8005244 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <HAL_UART_Receive_IT+0x24>
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e02b      	b.n	8005246 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d018      	beq.n	8005234 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	613b      	str	r3, [r7, #16]
   return(result);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	623b      	str	r3, [r7, #32]
 8005222:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	69f9      	ldr	r1, [r7, #28]
 8005226:	6a3a      	ldr	r2, [r7, #32]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	61bb      	str	r3, [r7, #24]
   return(result);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e6      	bne.n	8005202 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	461a      	mov	r2, r3
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fbde 	bl	80059fc <UART_Start_Receive_IT>
 8005240:	4603      	mov	r3, r0
 8005242:	e000      	b.n	8005246 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005244:	2302      	movs	r3, #2
  }
}
 8005246:	4618      	mov	r0, r3
 8005248:	3728      	adds	r7, #40	@ 0x28
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	460b      	mov	r3, r1
 8005258:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
	...

08005268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	4ba6      	ldr	r3, [pc, #664]	@ (800552c <UART_SetConfig+0x2c4>)
 8005294:	4013      	ands	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	6979      	ldr	r1, [r7, #20]
 800529c:	430b      	orrs	r3, r1
 800529e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68da      	ldr	r2, [r3, #12]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a94      	ldr	r2, [pc, #592]	@ (8005530 <UART_SetConfig+0x2c8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d120      	bne.n	8005326 <UART_SetConfig+0xbe>
 80052e4:	4b93      	ldr	r3, [pc, #588]	@ (8005534 <UART_SetConfig+0x2cc>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d816      	bhi.n	8005320 <UART_SetConfig+0xb8>
 80052f2:	a201      	add	r2, pc, #4	@ (adr r2, 80052f8 <UART_SetConfig+0x90>)
 80052f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f8:	08005309 	.word	0x08005309
 80052fc:	08005315 	.word	0x08005315
 8005300:	0800530f 	.word	0x0800530f
 8005304:	0800531b 	.word	0x0800531b
 8005308:	2301      	movs	r3, #1
 800530a:	77fb      	strb	r3, [r7, #31]
 800530c:	e150      	b.n	80055b0 <UART_SetConfig+0x348>
 800530e:	2302      	movs	r3, #2
 8005310:	77fb      	strb	r3, [r7, #31]
 8005312:	e14d      	b.n	80055b0 <UART_SetConfig+0x348>
 8005314:	2304      	movs	r3, #4
 8005316:	77fb      	strb	r3, [r7, #31]
 8005318:	e14a      	b.n	80055b0 <UART_SetConfig+0x348>
 800531a:	2308      	movs	r3, #8
 800531c:	77fb      	strb	r3, [r7, #31]
 800531e:	e147      	b.n	80055b0 <UART_SetConfig+0x348>
 8005320:	2310      	movs	r3, #16
 8005322:	77fb      	strb	r3, [r7, #31]
 8005324:	e144      	b.n	80055b0 <UART_SetConfig+0x348>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a83      	ldr	r2, [pc, #524]	@ (8005538 <UART_SetConfig+0x2d0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d132      	bne.n	8005396 <UART_SetConfig+0x12e>
 8005330:	4b80      	ldr	r3, [pc, #512]	@ (8005534 <UART_SetConfig+0x2cc>)
 8005332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	2b0c      	cmp	r3, #12
 800533c:	d828      	bhi.n	8005390 <UART_SetConfig+0x128>
 800533e:	a201      	add	r2, pc, #4	@ (adr r2, 8005344 <UART_SetConfig+0xdc>)
 8005340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005344:	08005379 	.word	0x08005379
 8005348:	08005391 	.word	0x08005391
 800534c:	08005391 	.word	0x08005391
 8005350:	08005391 	.word	0x08005391
 8005354:	08005385 	.word	0x08005385
 8005358:	08005391 	.word	0x08005391
 800535c:	08005391 	.word	0x08005391
 8005360:	08005391 	.word	0x08005391
 8005364:	0800537f 	.word	0x0800537f
 8005368:	08005391 	.word	0x08005391
 800536c:	08005391 	.word	0x08005391
 8005370:	08005391 	.word	0x08005391
 8005374:	0800538b 	.word	0x0800538b
 8005378:	2300      	movs	r3, #0
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e118      	b.n	80055b0 <UART_SetConfig+0x348>
 800537e:	2302      	movs	r3, #2
 8005380:	77fb      	strb	r3, [r7, #31]
 8005382:	e115      	b.n	80055b0 <UART_SetConfig+0x348>
 8005384:	2304      	movs	r3, #4
 8005386:	77fb      	strb	r3, [r7, #31]
 8005388:	e112      	b.n	80055b0 <UART_SetConfig+0x348>
 800538a:	2308      	movs	r3, #8
 800538c:	77fb      	strb	r3, [r7, #31]
 800538e:	e10f      	b.n	80055b0 <UART_SetConfig+0x348>
 8005390:	2310      	movs	r3, #16
 8005392:	77fb      	strb	r3, [r7, #31]
 8005394:	e10c      	b.n	80055b0 <UART_SetConfig+0x348>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a68      	ldr	r2, [pc, #416]	@ (800553c <UART_SetConfig+0x2d4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d120      	bne.n	80053e2 <UART_SetConfig+0x17a>
 80053a0:	4b64      	ldr	r3, [pc, #400]	@ (8005534 <UART_SetConfig+0x2cc>)
 80053a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80053aa:	2b30      	cmp	r3, #48	@ 0x30
 80053ac:	d013      	beq.n	80053d6 <UART_SetConfig+0x16e>
 80053ae:	2b30      	cmp	r3, #48	@ 0x30
 80053b0:	d814      	bhi.n	80053dc <UART_SetConfig+0x174>
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d009      	beq.n	80053ca <UART_SetConfig+0x162>
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d810      	bhi.n	80053dc <UART_SetConfig+0x174>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <UART_SetConfig+0x15c>
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d006      	beq.n	80053d0 <UART_SetConfig+0x168>
 80053c2:	e00b      	b.n	80053dc <UART_SetConfig+0x174>
 80053c4:	2300      	movs	r3, #0
 80053c6:	77fb      	strb	r3, [r7, #31]
 80053c8:	e0f2      	b.n	80055b0 <UART_SetConfig+0x348>
 80053ca:	2302      	movs	r3, #2
 80053cc:	77fb      	strb	r3, [r7, #31]
 80053ce:	e0ef      	b.n	80055b0 <UART_SetConfig+0x348>
 80053d0:	2304      	movs	r3, #4
 80053d2:	77fb      	strb	r3, [r7, #31]
 80053d4:	e0ec      	b.n	80055b0 <UART_SetConfig+0x348>
 80053d6:	2308      	movs	r3, #8
 80053d8:	77fb      	strb	r3, [r7, #31]
 80053da:	e0e9      	b.n	80055b0 <UART_SetConfig+0x348>
 80053dc:	2310      	movs	r3, #16
 80053de:	77fb      	strb	r3, [r7, #31]
 80053e0:	e0e6      	b.n	80055b0 <UART_SetConfig+0x348>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a56      	ldr	r2, [pc, #344]	@ (8005540 <UART_SetConfig+0x2d8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d120      	bne.n	800542e <UART_SetConfig+0x1c6>
 80053ec:	4b51      	ldr	r3, [pc, #324]	@ (8005534 <UART_SetConfig+0x2cc>)
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80053f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80053f8:	d013      	beq.n	8005422 <UART_SetConfig+0x1ba>
 80053fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80053fc:	d814      	bhi.n	8005428 <UART_SetConfig+0x1c0>
 80053fe:	2b80      	cmp	r3, #128	@ 0x80
 8005400:	d009      	beq.n	8005416 <UART_SetConfig+0x1ae>
 8005402:	2b80      	cmp	r3, #128	@ 0x80
 8005404:	d810      	bhi.n	8005428 <UART_SetConfig+0x1c0>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <UART_SetConfig+0x1a8>
 800540a:	2b40      	cmp	r3, #64	@ 0x40
 800540c:	d006      	beq.n	800541c <UART_SetConfig+0x1b4>
 800540e:	e00b      	b.n	8005428 <UART_SetConfig+0x1c0>
 8005410:	2300      	movs	r3, #0
 8005412:	77fb      	strb	r3, [r7, #31]
 8005414:	e0cc      	b.n	80055b0 <UART_SetConfig+0x348>
 8005416:	2302      	movs	r3, #2
 8005418:	77fb      	strb	r3, [r7, #31]
 800541a:	e0c9      	b.n	80055b0 <UART_SetConfig+0x348>
 800541c:	2304      	movs	r3, #4
 800541e:	77fb      	strb	r3, [r7, #31]
 8005420:	e0c6      	b.n	80055b0 <UART_SetConfig+0x348>
 8005422:	2308      	movs	r3, #8
 8005424:	77fb      	strb	r3, [r7, #31]
 8005426:	e0c3      	b.n	80055b0 <UART_SetConfig+0x348>
 8005428:	2310      	movs	r3, #16
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e0c0      	b.n	80055b0 <UART_SetConfig+0x348>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a44      	ldr	r2, [pc, #272]	@ (8005544 <UART_SetConfig+0x2dc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d125      	bne.n	8005484 <UART_SetConfig+0x21c>
 8005438:	4b3e      	ldr	r3, [pc, #248]	@ (8005534 <UART_SetConfig+0x2cc>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005442:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005446:	d017      	beq.n	8005478 <UART_SetConfig+0x210>
 8005448:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800544c:	d817      	bhi.n	800547e <UART_SetConfig+0x216>
 800544e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005452:	d00b      	beq.n	800546c <UART_SetConfig+0x204>
 8005454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005458:	d811      	bhi.n	800547e <UART_SetConfig+0x216>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <UART_SetConfig+0x1fe>
 800545e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005462:	d006      	beq.n	8005472 <UART_SetConfig+0x20a>
 8005464:	e00b      	b.n	800547e <UART_SetConfig+0x216>
 8005466:	2300      	movs	r3, #0
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	e0a1      	b.n	80055b0 <UART_SetConfig+0x348>
 800546c:	2302      	movs	r3, #2
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e09e      	b.n	80055b0 <UART_SetConfig+0x348>
 8005472:	2304      	movs	r3, #4
 8005474:	77fb      	strb	r3, [r7, #31]
 8005476:	e09b      	b.n	80055b0 <UART_SetConfig+0x348>
 8005478:	2308      	movs	r3, #8
 800547a:	77fb      	strb	r3, [r7, #31]
 800547c:	e098      	b.n	80055b0 <UART_SetConfig+0x348>
 800547e:	2310      	movs	r3, #16
 8005480:	77fb      	strb	r3, [r7, #31]
 8005482:	e095      	b.n	80055b0 <UART_SetConfig+0x348>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a2f      	ldr	r2, [pc, #188]	@ (8005548 <UART_SetConfig+0x2e0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d125      	bne.n	80054da <UART_SetConfig+0x272>
 800548e:	4b29      	ldr	r3, [pc, #164]	@ (8005534 <UART_SetConfig+0x2cc>)
 8005490:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005494:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005498:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800549c:	d017      	beq.n	80054ce <UART_SetConfig+0x266>
 800549e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054a2:	d817      	bhi.n	80054d4 <UART_SetConfig+0x26c>
 80054a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a8:	d00b      	beq.n	80054c2 <UART_SetConfig+0x25a>
 80054aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ae:	d811      	bhi.n	80054d4 <UART_SetConfig+0x26c>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d003      	beq.n	80054bc <UART_SetConfig+0x254>
 80054b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054b8:	d006      	beq.n	80054c8 <UART_SetConfig+0x260>
 80054ba:	e00b      	b.n	80054d4 <UART_SetConfig+0x26c>
 80054bc:	2301      	movs	r3, #1
 80054be:	77fb      	strb	r3, [r7, #31]
 80054c0:	e076      	b.n	80055b0 <UART_SetConfig+0x348>
 80054c2:	2302      	movs	r3, #2
 80054c4:	77fb      	strb	r3, [r7, #31]
 80054c6:	e073      	b.n	80055b0 <UART_SetConfig+0x348>
 80054c8:	2304      	movs	r3, #4
 80054ca:	77fb      	strb	r3, [r7, #31]
 80054cc:	e070      	b.n	80055b0 <UART_SetConfig+0x348>
 80054ce:	2308      	movs	r3, #8
 80054d0:	77fb      	strb	r3, [r7, #31]
 80054d2:	e06d      	b.n	80055b0 <UART_SetConfig+0x348>
 80054d4:	2310      	movs	r3, #16
 80054d6:	77fb      	strb	r3, [r7, #31]
 80054d8:	e06a      	b.n	80055b0 <UART_SetConfig+0x348>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1b      	ldr	r2, [pc, #108]	@ (800554c <UART_SetConfig+0x2e4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d138      	bne.n	8005556 <UART_SetConfig+0x2ee>
 80054e4:	4b13      	ldr	r3, [pc, #76]	@ (8005534 <UART_SetConfig+0x2cc>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ea:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80054ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054f2:	d017      	beq.n	8005524 <UART_SetConfig+0x2bc>
 80054f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80054f8:	d82a      	bhi.n	8005550 <UART_SetConfig+0x2e8>
 80054fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054fe:	d00b      	beq.n	8005518 <UART_SetConfig+0x2b0>
 8005500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005504:	d824      	bhi.n	8005550 <UART_SetConfig+0x2e8>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <UART_SetConfig+0x2aa>
 800550a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800550e:	d006      	beq.n	800551e <UART_SetConfig+0x2b6>
 8005510:	e01e      	b.n	8005550 <UART_SetConfig+0x2e8>
 8005512:	2300      	movs	r3, #0
 8005514:	77fb      	strb	r3, [r7, #31]
 8005516:	e04b      	b.n	80055b0 <UART_SetConfig+0x348>
 8005518:	2302      	movs	r3, #2
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e048      	b.n	80055b0 <UART_SetConfig+0x348>
 800551e:	2304      	movs	r3, #4
 8005520:	77fb      	strb	r3, [r7, #31]
 8005522:	e045      	b.n	80055b0 <UART_SetConfig+0x348>
 8005524:	2308      	movs	r3, #8
 8005526:	77fb      	strb	r3, [r7, #31]
 8005528:	e042      	b.n	80055b0 <UART_SetConfig+0x348>
 800552a:	bf00      	nop
 800552c:	efff69f3 	.word	0xefff69f3
 8005530:	40011000 	.word	0x40011000
 8005534:	40023800 	.word	0x40023800
 8005538:	40004400 	.word	0x40004400
 800553c:	40004800 	.word	0x40004800
 8005540:	40004c00 	.word	0x40004c00
 8005544:	40005000 	.word	0x40005000
 8005548:	40011400 	.word	0x40011400
 800554c:	40007800 	.word	0x40007800
 8005550:	2310      	movs	r3, #16
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e02c      	b.n	80055b0 <UART_SetConfig+0x348>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a72      	ldr	r2, [pc, #456]	@ (8005724 <UART_SetConfig+0x4bc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d125      	bne.n	80055ac <UART_SetConfig+0x344>
 8005560:	4b71      	ldr	r3, [pc, #452]	@ (8005728 <UART_SetConfig+0x4c0>)
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005566:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800556a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800556e:	d017      	beq.n	80055a0 <UART_SetConfig+0x338>
 8005570:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005574:	d817      	bhi.n	80055a6 <UART_SetConfig+0x33e>
 8005576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800557a:	d00b      	beq.n	8005594 <UART_SetConfig+0x32c>
 800557c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005580:	d811      	bhi.n	80055a6 <UART_SetConfig+0x33e>
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <UART_SetConfig+0x326>
 8005586:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800558a:	d006      	beq.n	800559a <UART_SetConfig+0x332>
 800558c:	e00b      	b.n	80055a6 <UART_SetConfig+0x33e>
 800558e:	2300      	movs	r3, #0
 8005590:	77fb      	strb	r3, [r7, #31]
 8005592:	e00d      	b.n	80055b0 <UART_SetConfig+0x348>
 8005594:	2302      	movs	r3, #2
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e00a      	b.n	80055b0 <UART_SetConfig+0x348>
 800559a:	2304      	movs	r3, #4
 800559c:	77fb      	strb	r3, [r7, #31]
 800559e:	e007      	b.n	80055b0 <UART_SetConfig+0x348>
 80055a0:	2308      	movs	r3, #8
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e004      	b.n	80055b0 <UART_SetConfig+0x348>
 80055a6:	2310      	movs	r3, #16
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e001      	b.n	80055b0 <UART_SetConfig+0x348>
 80055ac:	2310      	movs	r3, #16
 80055ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055b8:	d15b      	bne.n	8005672 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80055ba:	7ffb      	ldrb	r3, [r7, #31]
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d828      	bhi.n	8005612 <UART_SetConfig+0x3aa>
 80055c0:	a201      	add	r2, pc, #4	@ (adr r2, 80055c8 <UART_SetConfig+0x360>)
 80055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c6:	bf00      	nop
 80055c8:	080055ed 	.word	0x080055ed
 80055cc:	080055f5 	.word	0x080055f5
 80055d0:	080055fd 	.word	0x080055fd
 80055d4:	08005613 	.word	0x08005613
 80055d8:	08005603 	.word	0x08005603
 80055dc:	08005613 	.word	0x08005613
 80055e0:	08005613 	.word	0x08005613
 80055e4:	08005613 	.word	0x08005613
 80055e8:	0800560b 	.word	0x0800560b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ec:	f7fe fc40 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 80055f0:	61b8      	str	r0, [r7, #24]
        break;
 80055f2:	e013      	b.n	800561c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f4:	f7fe fc50 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 80055f8:	61b8      	str	r0, [r7, #24]
        break;
 80055fa:	e00f      	b.n	800561c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055fc:	4b4b      	ldr	r3, [pc, #300]	@ (800572c <UART_SetConfig+0x4c4>)
 80055fe:	61bb      	str	r3, [r7, #24]
        break;
 8005600:	e00c      	b.n	800561c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005602:	f7fe fb23 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 8005606:	61b8      	str	r0, [r7, #24]
        break;
 8005608:	e008      	b.n	800561c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800560e:	61bb      	str	r3, [r7, #24]
        break;
 8005610:	e004      	b.n	800561c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005612:	2300      	movs	r3, #0
 8005614:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	77bb      	strb	r3, [r7, #30]
        break;
 800561a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d074      	beq.n	800570c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	005a      	lsls	r2, r3, #1
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	085b      	lsrs	r3, r3, #1
 800562c:	441a      	add	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	fbb2 f3f3 	udiv	r3, r2, r3
 8005636:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b0f      	cmp	r3, #15
 800563c:	d916      	bls.n	800566c <UART_SetConfig+0x404>
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005644:	d212      	bcs.n	800566c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	b29b      	uxth	r3, r3
 800564a:	f023 030f 	bic.w	r3, r3, #15
 800564e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	085b      	lsrs	r3, r3, #1
 8005654:	b29b      	uxth	r3, r3
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	b29a      	uxth	r2, r3
 800565c:	89fb      	ldrh	r3, [r7, #14]
 800565e:	4313      	orrs	r3, r2
 8005660:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	89fa      	ldrh	r2, [r7, #14]
 8005668:	60da      	str	r2, [r3, #12]
 800566a:	e04f      	b.n	800570c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	77bb      	strb	r3, [r7, #30]
 8005670:	e04c      	b.n	800570c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005672:	7ffb      	ldrb	r3, [r7, #31]
 8005674:	2b08      	cmp	r3, #8
 8005676:	d828      	bhi.n	80056ca <UART_SetConfig+0x462>
 8005678:	a201      	add	r2, pc, #4	@ (adr r2, 8005680 <UART_SetConfig+0x418>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	080056a5 	.word	0x080056a5
 8005684:	080056ad 	.word	0x080056ad
 8005688:	080056b5 	.word	0x080056b5
 800568c:	080056cb 	.word	0x080056cb
 8005690:	080056bb 	.word	0x080056bb
 8005694:	080056cb 	.word	0x080056cb
 8005698:	080056cb 	.word	0x080056cb
 800569c:	080056cb 	.word	0x080056cb
 80056a0:	080056c3 	.word	0x080056c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a4:	f7fe fbe4 	bl	8003e70 <HAL_RCC_GetPCLK1Freq>
 80056a8:	61b8      	str	r0, [r7, #24]
        break;
 80056aa:	e013      	b.n	80056d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056ac:	f7fe fbf4 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 80056b0:	61b8      	str	r0, [r7, #24]
        break;
 80056b2:	e00f      	b.n	80056d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056b4:	4b1d      	ldr	r3, [pc, #116]	@ (800572c <UART_SetConfig+0x4c4>)
 80056b6:	61bb      	str	r3, [r7, #24]
        break;
 80056b8:	e00c      	b.n	80056d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ba:	f7fe fac7 	bl	8003c4c <HAL_RCC_GetSysClockFreq>
 80056be:	61b8      	str	r0, [r7, #24]
        break;
 80056c0:	e008      	b.n	80056d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056c6:	61bb      	str	r3, [r7, #24]
        break;
 80056c8:	e004      	b.n	80056d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	77bb      	strb	r3, [r7, #30]
        break;
 80056d2:	bf00      	nop
    }

    if (pclk != 0U)
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d018      	beq.n	800570c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	085a      	lsrs	r2, r3, #1
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	441a      	add	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b0f      	cmp	r3, #15
 80056f2:	d909      	bls.n	8005708 <UART_SetConfig+0x4a0>
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056fa:	d205      	bcs.n	8005708 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	b29a      	uxth	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	e001      	b.n	800570c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005718:	7fbb      	ldrb	r3, [r7, #30]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3720      	adds	r7, #32
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40007c00 	.word	0x40007c00
 8005728:	40023800 	.word	0x40023800
 800572c:	00f42400 	.word	0x00f42400

08005730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c4:	f003 0310 	and.w	r3, r3, #16
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d01a      	beq.n	8005846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800582e:	d10a      	bne.n	8005846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	605a      	str	r2, [r3, #4]
  }
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08c      	sub	sp, #48	@ 0x30
 8005878:	af02      	add	r7, sp, #8
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005884:	f7fc fd04 	bl	8002290 <HAL_GetTick>
 8005888:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	2b08      	cmp	r3, #8
 8005896:	d12e      	bne.n	80058f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005898:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	2200      	movs	r2, #0
 80058a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f83b 	bl	8005922 <UART_WaitOnFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d021      	beq.n	80058f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	60fb      	str	r3, [r7, #12]
   return(result);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058c6:	623b      	str	r3, [r7, #32]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	617b      	str	r3, [r7, #20]
   return(result);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e6      	bne.n	80058b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e011      	b.n	800591a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2220      	movs	r2, #32
 80058fa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3728      	adds	r7, #40	@ 0x28
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	603b      	str	r3, [r7, #0]
 800592e:	4613      	mov	r3, r2
 8005930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005932:	e04f      	b.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d04b      	beq.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593c:	f7fc fca8 	bl	8002290 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	429a      	cmp	r2, r3
 800594a:	d302      	bcc.n	8005952 <UART_WaitOnFlagUntilTimeout+0x30>
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e04e      	b.n	80059f4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d037      	beq.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b80      	cmp	r3, #128	@ 0x80
 8005968:	d034      	beq.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b40      	cmp	r3, #64	@ 0x40
 800596e:	d031      	beq.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b08      	cmp	r3, #8
 800597c:	d110      	bne.n	80059a0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2208      	movs	r2, #8
 8005984:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f8fe 	bl	8005b88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2208      	movs	r2, #8
 8005990:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e029      	b.n	80059f4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ae:	d111      	bne.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f8e4 	bl	8005b88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e00f      	b.n	80059f4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69da      	ldr	r2, [r3, #28]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4013      	ands	r3, r2
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	bf0c      	ite	eq
 80059e4:	2301      	moveq	r3, #1
 80059e6:	2300      	movne	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d0a0      	beq.n	8005934 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b097      	sub	sp, #92	@ 0x5c
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	4613      	mov	r3, r2
 8005a08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	88fa      	ldrh	r2, [r7, #6]
 8005a1c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2e:	d10e      	bne.n	8005a4e <UART_Start_Receive_IT+0x52>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d105      	bne.n	8005a44 <UART_Start_Receive_IT+0x48>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a42:	e02d      	b.n	8005aa0 <UART_Start_Receive_IT+0xa4>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	22ff      	movs	r2, #255	@ 0xff
 8005a48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a4c:	e028      	b.n	8005aa0 <UART_Start_Receive_IT+0xa4>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10d      	bne.n	8005a72 <UART_Start_Receive_IT+0x76>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <UART_Start_Receive_IT+0x6c>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	22ff      	movs	r2, #255	@ 0xff
 8005a62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a66:	e01b      	b.n	8005aa0 <UART_Start_Receive_IT+0xa4>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	227f      	movs	r2, #127	@ 0x7f
 8005a6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a70:	e016      	b.n	8005aa0 <UART_Start_Receive_IT+0xa4>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a7a:	d10d      	bne.n	8005a98 <UART_Start_Receive_IT+0x9c>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d104      	bne.n	8005a8e <UART_Start_Receive_IT+0x92>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	227f      	movs	r2, #127	@ 0x7f
 8005a88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a8c:	e008      	b.n	8005aa0 <UART_Start_Receive_IT+0xa4>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	223f      	movs	r2, #63	@ 0x3f
 8005a92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005a96:	e003      	b.n	8005aa0 <UART_Start_Receive_IT+0xa4>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2222      	movs	r2, #34	@ 0x22
 8005aac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac2:	f043 0301 	orr.w	r3, r3, #1
 8005ac6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3308      	adds	r3, #8
 8005ace:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ad0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005ad2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005ad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e5      	bne.n	8005ab0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aec:	d107      	bne.n	8005afe <UART_Start_Receive_IT+0x102>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d103      	bne.n	8005afe <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4a21      	ldr	r2, [pc, #132]	@ (8005b80 <UART_Start_Receive_IT+0x184>)
 8005afa:	669a      	str	r2, [r3, #104]	@ 0x68
 8005afc:	e002      	b.n	8005b04 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4a20      	ldr	r2, [pc, #128]	@ (8005b84 <UART_Start_Receive_IT+0x188>)
 8005b02:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d019      	beq.n	8005b40 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b2c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e6      	bne.n	8005b0c <UART_Start_Receive_IT+0x110>
 8005b3e:	e018      	b.n	8005b72 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f043 0320 	orr.w	r3, r3, #32
 8005b54:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b5e:	623b      	str	r3, [r7, #32]
 8005b60:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	69f9      	ldr	r1, [r7, #28]
 8005b64:	6a3a      	ldr	r2, [r7, #32]
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e6      	bne.n	8005b40 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	375c      	adds	r7, #92	@ 0x5c
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	08005df9 	.word	0x08005df9
 8005b84:	08005c51 	.word	0x08005c51

08005b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b095      	sub	sp, #84	@ 0x54
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bae:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e6      	bne.n	8005b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3308      	adds	r3, #8
 8005bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f023 0301 	bic.w	r3, r3, #1
 8005bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3308      	adds	r3, #8
 8005be0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005be4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d118      	bne.n	8005c30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f023 0310 	bic.w	r3, r3, #16
 8005c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6979      	ldr	r1, [r7, #20]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e6      	bne.n	8005bfe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005c44:	bf00      	nop
 8005c46:	3754      	adds	r7, #84	@ 0x54
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b09c      	sub	sp, #112	@ 0x70
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c68:	2b22      	cmp	r3, #34	@ 0x22
 8005c6a:	f040 80b9 	bne.w	8005de0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c7c:	b2d9      	uxtb	r1, r3
 8005c7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c88:	400a      	ands	r2, r1
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c92:	1c5a      	adds	r2, r3, #1
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f040 809c 	bne.w	8005df0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc0:	e853 3f00 	ldrex	r3, [r3]
 8005cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cde:	e841 2300 	strex	r3, r2, [r1]
 8005ce2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1e6      	bne.n	8005cb8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	3308      	adds	r3, #8
 8005cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf4:	e853 3f00 	ldrex	r3, [r3]
 8005cf8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3308      	adds	r3, #8
 8005d08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005d0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e5      	bne.n	8005cea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d018      	beq.n	8005d72 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d54:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1e6      	bne.n	8005d40 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d12e      	bne.n	8005dd8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f023 0310 	bic.w	r3, r3, #16
 8005d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	69b9      	ldr	r1, [r7, #24]
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	617b      	str	r3, [r7, #20]
   return(result);
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e6      	bne.n	8005d80 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d103      	bne.n	8005dc8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7ff fa3c 	bl	800524e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dd6:	e00b      	b.n	8005df0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7fb fecb 	bl	8001b74 <HAL_UART_RxCpltCallback>
}
 8005dde:	e007      	b.n	8005df0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0208 	orr.w	r2, r2, #8
 8005dee:	619a      	str	r2, [r3, #24]
}
 8005df0:	bf00      	nop
 8005df2:	3770      	adds	r7, #112	@ 0x70
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b09c      	sub	sp, #112	@ 0x70
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005e06:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e10:	2b22      	cmp	r3, #34	@ 0x22
 8005e12:	f040 80b9 	bne.w	8005f88 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e24:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e26:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005e2a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005e2e:	4013      	ands	r3, r2
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e34:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3a:	1c9a      	adds	r2, r3, #2
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f040 809c 	bne.w	8005f98 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005e6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e74:	667b      	str	r3, [r7, #100]	@ 0x64
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e80:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e6      	bne.n	8005e60 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	3308      	adds	r3, #8
 8005eb0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005eb2:	643a      	str	r2, [r7, #64]	@ 0x40
 8005eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005eb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1e5      	bne.n	8005e92 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d018      	beq.n	8005f1a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f08:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e6      	bne.n	8005ee8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d12e      	bne.n	8005f80 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f023 0310 	bic.w	r3, r3, #16
 8005f3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f46:	61bb      	str	r3, [r7, #24]
 8005f48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6979      	ldr	r1, [r7, #20]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	613b      	str	r3, [r7, #16]
   return(result);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e6      	bne.n	8005f28 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b10      	cmp	r3, #16
 8005f66:	d103      	bne.n	8005f70 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2210      	movs	r2, #16
 8005f6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005f76:	4619      	mov	r1, r3
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff f968 	bl	800524e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f7e:	e00b      	b.n	8005f98 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7fb fdf7 	bl	8001b74 <HAL_UART_RxCpltCallback>
}
 8005f86:	e007      	b.n	8005f98 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0208 	orr.w	r2, r2, #8
 8005f96:	619a      	str	r2, [r3, #24]
}
 8005f98:	bf00      	nop
 8005f9a:	3770      	adds	r7, #112	@ 0x70
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <__cvt>:
 8005fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa4:	ec57 6b10 	vmov	r6, r7, d0
 8005fa8:	2f00      	cmp	r7, #0
 8005faa:	460c      	mov	r4, r1
 8005fac:	4619      	mov	r1, r3
 8005fae:	463b      	mov	r3, r7
 8005fb0:	bfbb      	ittet	lt
 8005fb2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005fb6:	461f      	movlt	r7, r3
 8005fb8:	2300      	movge	r3, #0
 8005fba:	232d      	movlt	r3, #45	@ 0x2d
 8005fbc:	700b      	strb	r3, [r1, #0]
 8005fbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fc0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005fc4:	4691      	mov	r9, r2
 8005fc6:	f023 0820 	bic.w	r8, r3, #32
 8005fca:	bfbc      	itt	lt
 8005fcc:	4632      	movlt	r2, r6
 8005fce:	4616      	movlt	r6, r2
 8005fd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fd4:	d005      	beq.n	8005fe2 <__cvt+0x42>
 8005fd6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fda:	d100      	bne.n	8005fde <__cvt+0x3e>
 8005fdc:	3401      	adds	r4, #1
 8005fde:	2102      	movs	r1, #2
 8005fe0:	e000      	b.n	8005fe4 <__cvt+0x44>
 8005fe2:	2103      	movs	r1, #3
 8005fe4:	ab03      	add	r3, sp, #12
 8005fe6:	9301      	str	r3, [sp, #4]
 8005fe8:	ab02      	add	r3, sp, #8
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	ec47 6b10 	vmov	d0, r6, r7
 8005ff0:	4653      	mov	r3, sl
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	f001 f874 	bl	80070e0 <_dtoa_r>
 8005ff8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ffc:	4605      	mov	r5, r0
 8005ffe:	d119      	bne.n	8006034 <__cvt+0x94>
 8006000:	f019 0f01 	tst.w	r9, #1
 8006004:	d00e      	beq.n	8006024 <__cvt+0x84>
 8006006:	eb00 0904 	add.w	r9, r0, r4
 800600a:	2200      	movs	r2, #0
 800600c:	2300      	movs	r3, #0
 800600e:	4630      	mov	r0, r6
 8006010:	4639      	mov	r1, r7
 8006012:	f7fa fd79 	bl	8000b08 <__aeabi_dcmpeq>
 8006016:	b108      	cbz	r0, 800601c <__cvt+0x7c>
 8006018:	f8cd 900c 	str.w	r9, [sp, #12]
 800601c:	2230      	movs	r2, #48	@ 0x30
 800601e:	9b03      	ldr	r3, [sp, #12]
 8006020:	454b      	cmp	r3, r9
 8006022:	d31e      	bcc.n	8006062 <__cvt+0xc2>
 8006024:	9b03      	ldr	r3, [sp, #12]
 8006026:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006028:	1b5b      	subs	r3, r3, r5
 800602a:	4628      	mov	r0, r5
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	b004      	add	sp, #16
 8006030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006034:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006038:	eb00 0904 	add.w	r9, r0, r4
 800603c:	d1e5      	bne.n	800600a <__cvt+0x6a>
 800603e:	7803      	ldrb	r3, [r0, #0]
 8006040:	2b30      	cmp	r3, #48	@ 0x30
 8006042:	d10a      	bne.n	800605a <__cvt+0xba>
 8006044:	2200      	movs	r2, #0
 8006046:	2300      	movs	r3, #0
 8006048:	4630      	mov	r0, r6
 800604a:	4639      	mov	r1, r7
 800604c:	f7fa fd5c 	bl	8000b08 <__aeabi_dcmpeq>
 8006050:	b918      	cbnz	r0, 800605a <__cvt+0xba>
 8006052:	f1c4 0401 	rsb	r4, r4, #1
 8006056:	f8ca 4000 	str.w	r4, [sl]
 800605a:	f8da 3000 	ldr.w	r3, [sl]
 800605e:	4499      	add	r9, r3
 8006060:	e7d3      	b.n	800600a <__cvt+0x6a>
 8006062:	1c59      	adds	r1, r3, #1
 8006064:	9103      	str	r1, [sp, #12]
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	e7d9      	b.n	800601e <__cvt+0x7e>

0800606a <__exponent>:
 800606a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800606c:	2900      	cmp	r1, #0
 800606e:	bfba      	itte	lt
 8006070:	4249      	neglt	r1, r1
 8006072:	232d      	movlt	r3, #45	@ 0x2d
 8006074:	232b      	movge	r3, #43	@ 0x2b
 8006076:	2909      	cmp	r1, #9
 8006078:	7002      	strb	r2, [r0, #0]
 800607a:	7043      	strb	r3, [r0, #1]
 800607c:	dd29      	ble.n	80060d2 <__exponent+0x68>
 800607e:	f10d 0307 	add.w	r3, sp, #7
 8006082:	461d      	mov	r5, r3
 8006084:	270a      	movs	r7, #10
 8006086:	461a      	mov	r2, r3
 8006088:	fbb1 f6f7 	udiv	r6, r1, r7
 800608c:	fb07 1416 	mls	r4, r7, r6, r1
 8006090:	3430      	adds	r4, #48	@ 0x30
 8006092:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006096:	460c      	mov	r4, r1
 8006098:	2c63      	cmp	r4, #99	@ 0x63
 800609a:	f103 33ff 	add.w	r3, r3, #4294967295
 800609e:	4631      	mov	r1, r6
 80060a0:	dcf1      	bgt.n	8006086 <__exponent+0x1c>
 80060a2:	3130      	adds	r1, #48	@ 0x30
 80060a4:	1e94      	subs	r4, r2, #2
 80060a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80060aa:	1c41      	adds	r1, r0, #1
 80060ac:	4623      	mov	r3, r4
 80060ae:	42ab      	cmp	r3, r5
 80060b0:	d30a      	bcc.n	80060c8 <__exponent+0x5e>
 80060b2:	f10d 0309 	add.w	r3, sp, #9
 80060b6:	1a9b      	subs	r3, r3, r2
 80060b8:	42ac      	cmp	r4, r5
 80060ba:	bf88      	it	hi
 80060bc:	2300      	movhi	r3, #0
 80060be:	3302      	adds	r3, #2
 80060c0:	4403      	add	r3, r0
 80060c2:	1a18      	subs	r0, r3, r0
 80060c4:	b003      	add	sp, #12
 80060c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060d0:	e7ed      	b.n	80060ae <__exponent+0x44>
 80060d2:	2330      	movs	r3, #48	@ 0x30
 80060d4:	3130      	adds	r1, #48	@ 0x30
 80060d6:	7083      	strb	r3, [r0, #2]
 80060d8:	70c1      	strb	r1, [r0, #3]
 80060da:	1d03      	adds	r3, r0, #4
 80060dc:	e7f1      	b.n	80060c2 <__exponent+0x58>
	...

080060e0 <_printf_float>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	b08d      	sub	sp, #52	@ 0x34
 80060e6:	460c      	mov	r4, r1
 80060e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80060ec:	4616      	mov	r6, r2
 80060ee:	461f      	mov	r7, r3
 80060f0:	4605      	mov	r5, r0
 80060f2:	f000 feef 	bl	8006ed4 <_localeconv_r>
 80060f6:	6803      	ldr	r3, [r0, #0]
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fa f8d8 	bl	80002b0 <strlen>
 8006100:	2300      	movs	r3, #0
 8006102:	930a      	str	r3, [sp, #40]	@ 0x28
 8006104:	f8d8 3000 	ldr.w	r3, [r8]
 8006108:	9005      	str	r0, [sp, #20]
 800610a:	3307      	adds	r3, #7
 800610c:	f023 0307 	bic.w	r3, r3, #7
 8006110:	f103 0208 	add.w	r2, r3, #8
 8006114:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006118:	f8d4 b000 	ldr.w	fp, [r4]
 800611c:	f8c8 2000 	str.w	r2, [r8]
 8006120:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006124:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006128:	9307      	str	r3, [sp, #28]
 800612a:	f8cd 8018 	str.w	r8, [sp, #24]
 800612e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006132:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006136:	4b9c      	ldr	r3, [pc, #624]	@ (80063a8 <_printf_float+0x2c8>)
 8006138:	f04f 32ff 	mov.w	r2, #4294967295
 800613c:	f7fa fd16 	bl	8000b6c <__aeabi_dcmpun>
 8006140:	bb70      	cbnz	r0, 80061a0 <_printf_float+0xc0>
 8006142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006146:	4b98      	ldr	r3, [pc, #608]	@ (80063a8 <_printf_float+0x2c8>)
 8006148:	f04f 32ff 	mov.w	r2, #4294967295
 800614c:	f7fa fcf0 	bl	8000b30 <__aeabi_dcmple>
 8006150:	bb30      	cbnz	r0, 80061a0 <_printf_float+0xc0>
 8006152:	2200      	movs	r2, #0
 8006154:	2300      	movs	r3, #0
 8006156:	4640      	mov	r0, r8
 8006158:	4649      	mov	r1, r9
 800615a:	f7fa fcdf 	bl	8000b1c <__aeabi_dcmplt>
 800615e:	b110      	cbz	r0, 8006166 <_printf_float+0x86>
 8006160:	232d      	movs	r3, #45	@ 0x2d
 8006162:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006166:	4a91      	ldr	r2, [pc, #580]	@ (80063ac <_printf_float+0x2cc>)
 8006168:	4b91      	ldr	r3, [pc, #580]	@ (80063b0 <_printf_float+0x2d0>)
 800616a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800616e:	bf94      	ite	ls
 8006170:	4690      	movls	r8, r2
 8006172:	4698      	movhi	r8, r3
 8006174:	2303      	movs	r3, #3
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	f02b 0304 	bic.w	r3, fp, #4
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	f04f 0900 	mov.w	r9, #0
 8006182:	9700      	str	r7, [sp, #0]
 8006184:	4633      	mov	r3, r6
 8006186:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006188:	4621      	mov	r1, r4
 800618a:	4628      	mov	r0, r5
 800618c:	f000 f9d2 	bl	8006534 <_printf_common>
 8006190:	3001      	adds	r0, #1
 8006192:	f040 808d 	bne.w	80062b0 <_printf_float+0x1d0>
 8006196:	f04f 30ff 	mov.w	r0, #4294967295
 800619a:	b00d      	add	sp, #52	@ 0x34
 800619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a0:	4642      	mov	r2, r8
 80061a2:	464b      	mov	r3, r9
 80061a4:	4640      	mov	r0, r8
 80061a6:	4649      	mov	r1, r9
 80061a8:	f7fa fce0 	bl	8000b6c <__aeabi_dcmpun>
 80061ac:	b140      	cbz	r0, 80061c0 <_printf_float+0xe0>
 80061ae:	464b      	mov	r3, r9
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bfbc      	itt	lt
 80061b4:	232d      	movlt	r3, #45	@ 0x2d
 80061b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061ba:	4a7e      	ldr	r2, [pc, #504]	@ (80063b4 <_printf_float+0x2d4>)
 80061bc:	4b7e      	ldr	r3, [pc, #504]	@ (80063b8 <_printf_float+0x2d8>)
 80061be:	e7d4      	b.n	800616a <_printf_float+0x8a>
 80061c0:	6863      	ldr	r3, [r4, #4]
 80061c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80061c6:	9206      	str	r2, [sp, #24]
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	d13b      	bne.n	8006244 <_printf_float+0x164>
 80061cc:	2306      	movs	r3, #6
 80061ce:	6063      	str	r3, [r4, #4]
 80061d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80061d4:	2300      	movs	r3, #0
 80061d6:	6022      	str	r2, [r4, #0]
 80061d8:	9303      	str	r3, [sp, #12]
 80061da:	ab0a      	add	r3, sp, #40	@ 0x28
 80061dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061e0:	ab09      	add	r3, sp, #36	@ 0x24
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	6861      	ldr	r1, [r4, #4]
 80061e6:	ec49 8b10 	vmov	d0, r8, r9
 80061ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80061ee:	4628      	mov	r0, r5
 80061f0:	f7ff fed6 	bl	8005fa0 <__cvt>
 80061f4:	9b06      	ldr	r3, [sp, #24]
 80061f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061f8:	2b47      	cmp	r3, #71	@ 0x47
 80061fa:	4680      	mov	r8, r0
 80061fc:	d129      	bne.n	8006252 <_printf_float+0x172>
 80061fe:	1cc8      	adds	r0, r1, #3
 8006200:	db02      	blt.n	8006208 <_printf_float+0x128>
 8006202:	6863      	ldr	r3, [r4, #4]
 8006204:	4299      	cmp	r1, r3
 8006206:	dd41      	ble.n	800628c <_printf_float+0x1ac>
 8006208:	f1aa 0a02 	sub.w	sl, sl, #2
 800620c:	fa5f fa8a 	uxtb.w	sl, sl
 8006210:	3901      	subs	r1, #1
 8006212:	4652      	mov	r2, sl
 8006214:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006218:	9109      	str	r1, [sp, #36]	@ 0x24
 800621a:	f7ff ff26 	bl	800606a <__exponent>
 800621e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006220:	1813      	adds	r3, r2, r0
 8006222:	2a01      	cmp	r2, #1
 8006224:	4681      	mov	r9, r0
 8006226:	6123      	str	r3, [r4, #16]
 8006228:	dc02      	bgt.n	8006230 <_printf_float+0x150>
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	07d2      	lsls	r2, r2, #31
 800622e:	d501      	bpl.n	8006234 <_printf_float+0x154>
 8006230:	3301      	adds	r3, #1
 8006232:	6123      	str	r3, [r4, #16]
 8006234:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0a2      	beq.n	8006182 <_printf_float+0xa2>
 800623c:	232d      	movs	r3, #45	@ 0x2d
 800623e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006242:	e79e      	b.n	8006182 <_printf_float+0xa2>
 8006244:	9a06      	ldr	r2, [sp, #24]
 8006246:	2a47      	cmp	r2, #71	@ 0x47
 8006248:	d1c2      	bne.n	80061d0 <_printf_float+0xf0>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1c0      	bne.n	80061d0 <_printf_float+0xf0>
 800624e:	2301      	movs	r3, #1
 8006250:	e7bd      	b.n	80061ce <_printf_float+0xee>
 8006252:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006256:	d9db      	bls.n	8006210 <_printf_float+0x130>
 8006258:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800625c:	d118      	bne.n	8006290 <_printf_float+0x1b0>
 800625e:	2900      	cmp	r1, #0
 8006260:	6863      	ldr	r3, [r4, #4]
 8006262:	dd0b      	ble.n	800627c <_printf_float+0x19c>
 8006264:	6121      	str	r1, [r4, #16]
 8006266:	b913      	cbnz	r3, 800626e <_printf_float+0x18e>
 8006268:	6822      	ldr	r2, [r4, #0]
 800626a:	07d0      	lsls	r0, r2, #31
 800626c:	d502      	bpl.n	8006274 <_printf_float+0x194>
 800626e:	3301      	adds	r3, #1
 8006270:	440b      	add	r3, r1
 8006272:	6123      	str	r3, [r4, #16]
 8006274:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006276:	f04f 0900 	mov.w	r9, #0
 800627a:	e7db      	b.n	8006234 <_printf_float+0x154>
 800627c:	b913      	cbnz	r3, 8006284 <_printf_float+0x1a4>
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	07d2      	lsls	r2, r2, #31
 8006282:	d501      	bpl.n	8006288 <_printf_float+0x1a8>
 8006284:	3302      	adds	r3, #2
 8006286:	e7f4      	b.n	8006272 <_printf_float+0x192>
 8006288:	2301      	movs	r3, #1
 800628a:	e7f2      	b.n	8006272 <_printf_float+0x192>
 800628c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006290:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006292:	4299      	cmp	r1, r3
 8006294:	db05      	blt.n	80062a2 <_printf_float+0x1c2>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	6121      	str	r1, [r4, #16]
 800629a:	07d8      	lsls	r0, r3, #31
 800629c:	d5ea      	bpl.n	8006274 <_printf_float+0x194>
 800629e:	1c4b      	adds	r3, r1, #1
 80062a0:	e7e7      	b.n	8006272 <_printf_float+0x192>
 80062a2:	2900      	cmp	r1, #0
 80062a4:	bfd4      	ite	le
 80062a6:	f1c1 0202 	rsble	r2, r1, #2
 80062aa:	2201      	movgt	r2, #1
 80062ac:	4413      	add	r3, r2
 80062ae:	e7e0      	b.n	8006272 <_printf_float+0x192>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	055a      	lsls	r2, r3, #21
 80062b4:	d407      	bmi.n	80062c6 <_printf_float+0x1e6>
 80062b6:	6923      	ldr	r3, [r4, #16]
 80062b8:	4642      	mov	r2, r8
 80062ba:	4631      	mov	r1, r6
 80062bc:	4628      	mov	r0, r5
 80062be:	47b8      	blx	r7
 80062c0:	3001      	adds	r0, #1
 80062c2:	d12b      	bne.n	800631c <_printf_float+0x23c>
 80062c4:	e767      	b.n	8006196 <_printf_float+0xb6>
 80062c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062ca:	f240 80dd 	bls.w	8006488 <_printf_float+0x3a8>
 80062ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062d2:	2200      	movs	r2, #0
 80062d4:	2300      	movs	r3, #0
 80062d6:	f7fa fc17 	bl	8000b08 <__aeabi_dcmpeq>
 80062da:	2800      	cmp	r0, #0
 80062dc:	d033      	beq.n	8006346 <_printf_float+0x266>
 80062de:	4a37      	ldr	r2, [pc, #220]	@ (80063bc <_printf_float+0x2dc>)
 80062e0:	2301      	movs	r3, #1
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	f43f af54 	beq.w	8006196 <_printf_float+0xb6>
 80062ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80062f2:	4543      	cmp	r3, r8
 80062f4:	db02      	blt.n	80062fc <_printf_float+0x21c>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	07d8      	lsls	r0, r3, #31
 80062fa:	d50f      	bpl.n	800631c <_printf_float+0x23c>
 80062fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006300:	4631      	mov	r1, r6
 8006302:	4628      	mov	r0, r5
 8006304:	47b8      	blx	r7
 8006306:	3001      	adds	r0, #1
 8006308:	f43f af45 	beq.w	8006196 <_printf_float+0xb6>
 800630c:	f04f 0900 	mov.w	r9, #0
 8006310:	f108 38ff 	add.w	r8, r8, #4294967295
 8006314:	f104 0a1a 	add.w	sl, r4, #26
 8006318:	45c8      	cmp	r8, r9
 800631a:	dc09      	bgt.n	8006330 <_printf_float+0x250>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	079b      	lsls	r3, r3, #30
 8006320:	f100 8103 	bmi.w	800652a <_printf_float+0x44a>
 8006324:	68e0      	ldr	r0, [r4, #12]
 8006326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006328:	4298      	cmp	r0, r3
 800632a:	bfb8      	it	lt
 800632c:	4618      	movlt	r0, r3
 800632e:	e734      	b.n	800619a <_printf_float+0xba>
 8006330:	2301      	movs	r3, #1
 8006332:	4652      	mov	r2, sl
 8006334:	4631      	mov	r1, r6
 8006336:	4628      	mov	r0, r5
 8006338:	47b8      	blx	r7
 800633a:	3001      	adds	r0, #1
 800633c:	f43f af2b 	beq.w	8006196 <_printf_float+0xb6>
 8006340:	f109 0901 	add.w	r9, r9, #1
 8006344:	e7e8      	b.n	8006318 <_printf_float+0x238>
 8006346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006348:	2b00      	cmp	r3, #0
 800634a:	dc39      	bgt.n	80063c0 <_printf_float+0x2e0>
 800634c:	4a1b      	ldr	r2, [pc, #108]	@ (80063bc <_printf_float+0x2dc>)
 800634e:	2301      	movs	r3, #1
 8006350:	4631      	mov	r1, r6
 8006352:	4628      	mov	r0, r5
 8006354:	47b8      	blx	r7
 8006356:	3001      	adds	r0, #1
 8006358:	f43f af1d 	beq.w	8006196 <_printf_float+0xb6>
 800635c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006360:	ea59 0303 	orrs.w	r3, r9, r3
 8006364:	d102      	bne.n	800636c <_printf_float+0x28c>
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	07d9      	lsls	r1, r3, #31
 800636a:	d5d7      	bpl.n	800631c <_printf_float+0x23c>
 800636c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006370:	4631      	mov	r1, r6
 8006372:	4628      	mov	r0, r5
 8006374:	47b8      	blx	r7
 8006376:	3001      	adds	r0, #1
 8006378:	f43f af0d 	beq.w	8006196 <_printf_float+0xb6>
 800637c:	f04f 0a00 	mov.w	sl, #0
 8006380:	f104 0b1a 	add.w	fp, r4, #26
 8006384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006386:	425b      	negs	r3, r3
 8006388:	4553      	cmp	r3, sl
 800638a:	dc01      	bgt.n	8006390 <_printf_float+0x2b0>
 800638c:	464b      	mov	r3, r9
 800638e:	e793      	b.n	80062b8 <_printf_float+0x1d8>
 8006390:	2301      	movs	r3, #1
 8006392:	465a      	mov	r2, fp
 8006394:	4631      	mov	r1, r6
 8006396:	4628      	mov	r0, r5
 8006398:	47b8      	blx	r7
 800639a:	3001      	adds	r0, #1
 800639c:	f43f aefb 	beq.w	8006196 <_printf_float+0xb6>
 80063a0:	f10a 0a01 	add.w	sl, sl, #1
 80063a4:	e7ee      	b.n	8006384 <_printf_float+0x2a4>
 80063a6:	bf00      	nop
 80063a8:	7fefffff 	.word	0x7fefffff
 80063ac:	0800a8c8 	.word	0x0800a8c8
 80063b0:	0800a8cc 	.word	0x0800a8cc
 80063b4:	0800a8d0 	.word	0x0800a8d0
 80063b8:	0800a8d4 	.word	0x0800a8d4
 80063bc:	0800a8d8 	.word	0x0800a8d8
 80063c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063c6:	4553      	cmp	r3, sl
 80063c8:	bfa8      	it	ge
 80063ca:	4653      	movge	r3, sl
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	4699      	mov	r9, r3
 80063d0:	dc36      	bgt.n	8006440 <_printf_float+0x360>
 80063d2:	f04f 0b00 	mov.w	fp, #0
 80063d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063da:	f104 021a 	add.w	r2, r4, #26
 80063de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063e0:	9306      	str	r3, [sp, #24]
 80063e2:	eba3 0309 	sub.w	r3, r3, r9
 80063e6:	455b      	cmp	r3, fp
 80063e8:	dc31      	bgt.n	800644e <_printf_float+0x36e>
 80063ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ec:	459a      	cmp	sl, r3
 80063ee:	dc3a      	bgt.n	8006466 <_printf_float+0x386>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	07da      	lsls	r2, r3, #31
 80063f4:	d437      	bmi.n	8006466 <_printf_float+0x386>
 80063f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f8:	ebaa 0903 	sub.w	r9, sl, r3
 80063fc:	9b06      	ldr	r3, [sp, #24]
 80063fe:	ebaa 0303 	sub.w	r3, sl, r3
 8006402:	4599      	cmp	r9, r3
 8006404:	bfa8      	it	ge
 8006406:	4699      	movge	r9, r3
 8006408:	f1b9 0f00 	cmp.w	r9, #0
 800640c:	dc33      	bgt.n	8006476 <_printf_float+0x396>
 800640e:	f04f 0800 	mov.w	r8, #0
 8006412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006416:	f104 0b1a 	add.w	fp, r4, #26
 800641a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800641c:	ebaa 0303 	sub.w	r3, sl, r3
 8006420:	eba3 0309 	sub.w	r3, r3, r9
 8006424:	4543      	cmp	r3, r8
 8006426:	f77f af79 	ble.w	800631c <_printf_float+0x23c>
 800642a:	2301      	movs	r3, #1
 800642c:	465a      	mov	r2, fp
 800642e:	4631      	mov	r1, r6
 8006430:	4628      	mov	r0, r5
 8006432:	47b8      	blx	r7
 8006434:	3001      	adds	r0, #1
 8006436:	f43f aeae 	beq.w	8006196 <_printf_float+0xb6>
 800643a:	f108 0801 	add.w	r8, r8, #1
 800643e:	e7ec      	b.n	800641a <_printf_float+0x33a>
 8006440:	4642      	mov	r2, r8
 8006442:	4631      	mov	r1, r6
 8006444:	4628      	mov	r0, r5
 8006446:	47b8      	blx	r7
 8006448:	3001      	adds	r0, #1
 800644a:	d1c2      	bne.n	80063d2 <_printf_float+0x2f2>
 800644c:	e6a3      	b.n	8006196 <_printf_float+0xb6>
 800644e:	2301      	movs	r3, #1
 8006450:	4631      	mov	r1, r6
 8006452:	4628      	mov	r0, r5
 8006454:	9206      	str	r2, [sp, #24]
 8006456:	47b8      	blx	r7
 8006458:	3001      	adds	r0, #1
 800645a:	f43f ae9c 	beq.w	8006196 <_printf_float+0xb6>
 800645e:	9a06      	ldr	r2, [sp, #24]
 8006460:	f10b 0b01 	add.w	fp, fp, #1
 8006464:	e7bb      	b.n	80063de <_printf_float+0x2fe>
 8006466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800646a:	4631      	mov	r1, r6
 800646c:	4628      	mov	r0, r5
 800646e:	47b8      	blx	r7
 8006470:	3001      	adds	r0, #1
 8006472:	d1c0      	bne.n	80063f6 <_printf_float+0x316>
 8006474:	e68f      	b.n	8006196 <_printf_float+0xb6>
 8006476:	9a06      	ldr	r2, [sp, #24]
 8006478:	464b      	mov	r3, r9
 800647a:	4442      	add	r2, r8
 800647c:	4631      	mov	r1, r6
 800647e:	4628      	mov	r0, r5
 8006480:	47b8      	blx	r7
 8006482:	3001      	adds	r0, #1
 8006484:	d1c3      	bne.n	800640e <_printf_float+0x32e>
 8006486:	e686      	b.n	8006196 <_printf_float+0xb6>
 8006488:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800648c:	f1ba 0f01 	cmp.w	sl, #1
 8006490:	dc01      	bgt.n	8006496 <_printf_float+0x3b6>
 8006492:	07db      	lsls	r3, r3, #31
 8006494:	d536      	bpl.n	8006504 <_printf_float+0x424>
 8006496:	2301      	movs	r3, #1
 8006498:	4642      	mov	r2, r8
 800649a:	4631      	mov	r1, r6
 800649c:	4628      	mov	r0, r5
 800649e:	47b8      	blx	r7
 80064a0:	3001      	adds	r0, #1
 80064a2:	f43f ae78 	beq.w	8006196 <_printf_float+0xb6>
 80064a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	f43f ae70 	beq.w	8006196 <_printf_float+0xb6>
 80064b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064ba:	2200      	movs	r2, #0
 80064bc:	2300      	movs	r3, #0
 80064be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064c2:	f7fa fb21 	bl	8000b08 <__aeabi_dcmpeq>
 80064c6:	b9c0      	cbnz	r0, 80064fa <_printf_float+0x41a>
 80064c8:	4653      	mov	r3, sl
 80064ca:	f108 0201 	add.w	r2, r8, #1
 80064ce:	4631      	mov	r1, r6
 80064d0:	4628      	mov	r0, r5
 80064d2:	47b8      	blx	r7
 80064d4:	3001      	adds	r0, #1
 80064d6:	d10c      	bne.n	80064f2 <_printf_float+0x412>
 80064d8:	e65d      	b.n	8006196 <_printf_float+0xb6>
 80064da:	2301      	movs	r3, #1
 80064dc:	465a      	mov	r2, fp
 80064de:	4631      	mov	r1, r6
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b8      	blx	r7
 80064e4:	3001      	adds	r0, #1
 80064e6:	f43f ae56 	beq.w	8006196 <_printf_float+0xb6>
 80064ea:	f108 0801 	add.w	r8, r8, #1
 80064ee:	45d0      	cmp	r8, sl
 80064f0:	dbf3      	blt.n	80064da <_printf_float+0x3fa>
 80064f2:	464b      	mov	r3, r9
 80064f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064f8:	e6df      	b.n	80062ba <_printf_float+0x1da>
 80064fa:	f04f 0800 	mov.w	r8, #0
 80064fe:	f104 0b1a 	add.w	fp, r4, #26
 8006502:	e7f4      	b.n	80064ee <_printf_float+0x40e>
 8006504:	2301      	movs	r3, #1
 8006506:	4642      	mov	r2, r8
 8006508:	e7e1      	b.n	80064ce <_printf_float+0x3ee>
 800650a:	2301      	movs	r3, #1
 800650c:	464a      	mov	r2, r9
 800650e:	4631      	mov	r1, r6
 8006510:	4628      	mov	r0, r5
 8006512:	47b8      	blx	r7
 8006514:	3001      	adds	r0, #1
 8006516:	f43f ae3e 	beq.w	8006196 <_printf_float+0xb6>
 800651a:	f108 0801 	add.w	r8, r8, #1
 800651e:	68e3      	ldr	r3, [r4, #12]
 8006520:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006522:	1a5b      	subs	r3, r3, r1
 8006524:	4543      	cmp	r3, r8
 8006526:	dcf0      	bgt.n	800650a <_printf_float+0x42a>
 8006528:	e6fc      	b.n	8006324 <_printf_float+0x244>
 800652a:	f04f 0800 	mov.w	r8, #0
 800652e:	f104 0919 	add.w	r9, r4, #25
 8006532:	e7f4      	b.n	800651e <_printf_float+0x43e>

08006534 <_printf_common>:
 8006534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006538:	4616      	mov	r6, r2
 800653a:	4698      	mov	r8, r3
 800653c:	688a      	ldr	r2, [r1, #8]
 800653e:	690b      	ldr	r3, [r1, #16]
 8006540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006544:	4293      	cmp	r3, r2
 8006546:	bfb8      	it	lt
 8006548:	4613      	movlt	r3, r2
 800654a:	6033      	str	r3, [r6, #0]
 800654c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006550:	4607      	mov	r7, r0
 8006552:	460c      	mov	r4, r1
 8006554:	b10a      	cbz	r2, 800655a <_printf_common+0x26>
 8006556:	3301      	adds	r3, #1
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	0699      	lsls	r1, r3, #26
 800655e:	bf42      	ittt	mi
 8006560:	6833      	ldrmi	r3, [r6, #0]
 8006562:	3302      	addmi	r3, #2
 8006564:	6033      	strmi	r3, [r6, #0]
 8006566:	6825      	ldr	r5, [r4, #0]
 8006568:	f015 0506 	ands.w	r5, r5, #6
 800656c:	d106      	bne.n	800657c <_printf_common+0x48>
 800656e:	f104 0a19 	add.w	sl, r4, #25
 8006572:	68e3      	ldr	r3, [r4, #12]
 8006574:	6832      	ldr	r2, [r6, #0]
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	42ab      	cmp	r3, r5
 800657a:	dc26      	bgt.n	80065ca <_printf_common+0x96>
 800657c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006580:	6822      	ldr	r2, [r4, #0]
 8006582:	3b00      	subs	r3, #0
 8006584:	bf18      	it	ne
 8006586:	2301      	movne	r3, #1
 8006588:	0692      	lsls	r2, r2, #26
 800658a:	d42b      	bmi.n	80065e4 <_printf_common+0xb0>
 800658c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006590:	4641      	mov	r1, r8
 8006592:	4638      	mov	r0, r7
 8006594:	47c8      	blx	r9
 8006596:	3001      	adds	r0, #1
 8006598:	d01e      	beq.n	80065d8 <_printf_common+0xa4>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	6922      	ldr	r2, [r4, #16]
 800659e:	f003 0306 	and.w	r3, r3, #6
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	bf02      	ittt	eq
 80065a6:	68e5      	ldreq	r5, [r4, #12]
 80065a8:	6833      	ldreq	r3, [r6, #0]
 80065aa:	1aed      	subeq	r5, r5, r3
 80065ac:	68a3      	ldr	r3, [r4, #8]
 80065ae:	bf0c      	ite	eq
 80065b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b4:	2500      	movne	r5, #0
 80065b6:	4293      	cmp	r3, r2
 80065b8:	bfc4      	itt	gt
 80065ba:	1a9b      	subgt	r3, r3, r2
 80065bc:	18ed      	addgt	r5, r5, r3
 80065be:	2600      	movs	r6, #0
 80065c0:	341a      	adds	r4, #26
 80065c2:	42b5      	cmp	r5, r6
 80065c4:	d11a      	bne.n	80065fc <_printf_common+0xc8>
 80065c6:	2000      	movs	r0, #0
 80065c8:	e008      	b.n	80065dc <_printf_common+0xa8>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4652      	mov	r2, sl
 80065ce:	4641      	mov	r1, r8
 80065d0:	4638      	mov	r0, r7
 80065d2:	47c8      	blx	r9
 80065d4:	3001      	adds	r0, #1
 80065d6:	d103      	bne.n	80065e0 <_printf_common+0xac>
 80065d8:	f04f 30ff 	mov.w	r0, #4294967295
 80065dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e0:	3501      	adds	r5, #1
 80065e2:	e7c6      	b.n	8006572 <_printf_common+0x3e>
 80065e4:	18e1      	adds	r1, r4, r3
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	2030      	movs	r0, #48	@ 0x30
 80065ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065ee:	4422      	add	r2, r4
 80065f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065f8:	3302      	adds	r3, #2
 80065fa:	e7c7      	b.n	800658c <_printf_common+0x58>
 80065fc:	2301      	movs	r3, #1
 80065fe:	4622      	mov	r2, r4
 8006600:	4641      	mov	r1, r8
 8006602:	4638      	mov	r0, r7
 8006604:	47c8      	blx	r9
 8006606:	3001      	adds	r0, #1
 8006608:	d0e6      	beq.n	80065d8 <_printf_common+0xa4>
 800660a:	3601      	adds	r6, #1
 800660c:	e7d9      	b.n	80065c2 <_printf_common+0x8e>
	...

08006610 <_printf_i>:
 8006610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	7e0f      	ldrb	r7, [r1, #24]
 8006616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006618:	2f78      	cmp	r7, #120	@ 0x78
 800661a:	4691      	mov	r9, r2
 800661c:	4680      	mov	r8, r0
 800661e:	460c      	mov	r4, r1
 8006620:	469a      	mov	sl, r3
 8006622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006626:	d807      	bhi.n	8006638 <_printf_i+0x28>
 8006628:	2f62      	cmp	r7, #98	@ 0x62
 800662a:	d80a      	bhi.n	8006642 <_printf_i+0x32>
 800662c:	2f00      	cmp	r7, #0
 800662e:	f000 80d2 	beq.w	80067d6 <_printf_i+0x1c6>
 8006632:	2f58      	cmp	r7, #88	@ 0x58
 8006634:	f000 80b9 	beq.w	80067aa <_printf_i+0x19a>
 8006638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800663c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006640:	e03a      	b.n	80066b8 <_printf_i+0xa8>
 8006642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006646:	2b15      	cmp	r3, #21
 8006648:	d8f6      	bhi.n	8006638 <_printf_i+0x28>
 800664a:	a101      	add	r1, pc, #4	@ (adr r1, 8006650 <_printf_i+0x40>)
 800664c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006650:	080066a9 	.word	0x080066a9
 8006654:	080066bd 	.word	0x080066bd
 8006658:	08006639 	.word	0x08006639
 800665c:	08006639 	.word	0x08006639
 8006660:	08006639 	.word	0x08006639
 8006664:	08006639 	.word	0x08006639
 8006668:	080066bd 	.word	0x080066bd
 800666c:	08006639 	.word	0x08006639
 8006670:	08006639 	.word	0x08006639
 8006674:	08006639 	.word	0x08006639
 8006678:	08006639 	.word	0x08006639
 800667c:	080067bd 	.word	0x080067bd
 8006680:	080066e7 	.word	0x080066e7
 8006684:	08006777 	.word	0x08006777
 8006688:	08006639 	.word	0x08006639
 800668c:	08006639 	.word	0x08006639
 8006690:	080067df 	.word	0x080067df
 8006694:	08006639 	.word	0x08006639
 8006698:	080066e7 	.word	0x080066e7
 800669c:	08006639 	.word	0x08006639
 80066a0:	08006639 	.word	0x08006639
 80066a4:	0800677f 	.word	0x0800677f
 80066a8:	6833      	ldr	r3, [r6, #0]
 80066aa:	1d1a      	adds	r2, r3, #4
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6032      	str	r2, [r6, #0]
 80066b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066b8:	2301      	movs	r3, #1
 80066ba:	e09d      	b.n	80067f8 <_printf_i+0x1e8>
 80066bc:	6833      	ldr	r3, [r6, #0]
 80066be:	6820      	ldr	r0, [r4, #0]
 80066c0:	1d19      	adds	r1, r3, #4
 80066c2:	6031      	str	r1, [r6, #0]
 80066c4:	0606      	lsls	r6, r0, #24
 80066c6:	d501      	bpl.n	80066cc <_printf_i+0xbc>
 80066c8:	681d      	ldr	r5, [r3, #0]
 80066ca:	e003      	b.n	80066d4 <_printf_i+0xc4>
 80066cc:	0645      	lsls	r5, r0, #25
 80066ce:	d5fb      	bpl.n	80066c8 <_printf_i+0xb8>
 80066d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066d4:	2d00      	cmp	r5, #0
 80066d6:	da03      	bge.n	80066e0 <_printf_i+0xd0>
 80066d8:	232d      	movs	r3, #45	@ 0x2d
 80066da:	426d      	negs	r5, r5
 80066dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066e0:	4859      	ldr	r0, [pc, #356]	@ (8006848 <_printf_i+0x238>)
 80066e2:	230a      	movs	r3, #10
 80066e4:	e011      	b.n	800670a <_printf_i+0xfa>
 80066e6:	6821      	ldr	r1, [r4, #0]
 80066e8:	6833      	ldr	r3, [r6, #0]
 80066ea:	0608      	lsls	r0, r1, #24
 80066ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80066f0:	d402      	bmi.n	80066f8 <_printf_i+0xe8>
 80066f2:	0649      	lsls	r1, r1, #25
 80066f4:	bf48      	it	mi
 80066f6:	b2ad      	uxthmi	r5, r5
 80066f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80066fa:	4853      	ldr	r0, [pc, #332]	@ (8006848 <_printf_i+0x238>)
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	bf14      	ite	ne
 8006700:	230a      	movne	r3, #10
 8006702:	2308      	moveq	r3, #8
 8006704:	2100      	movs	r1, #0
 8006706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800670a:	6866      	ldr	r6, [r4, #4]
 800670c:	60a6      	str	r6, [r4, #8]
 800670e:	2e00      	cmp	r6, #0
 8006710:	bfa2      	ittt	ge
 8006712:	6821      	ldrge	r1, [r4, #0]
 8006714:	f021 0104 	bicge.w	r1, r1, #4
 8006718:	6021      	strge	r1, [r4, #0]
 800671a:	b90d      	cbnz	r5, 8006720 <_printf_i+0x110>
 800671c:	2e00      	cmp	r6, #0
 800671e:	d04b      	beq.n	80067b8 <_printf_i+0x1a8>
 8006720:	4616      	mov	r6, r2
 8006722:	fbb5 f1f3 	udiv	r1, r5, r3
 8006726:	fb03 5711 	mls	r7, r3, r1, r5
 800672a:	5dc7      	ldrb	r7, [r0, r7]
 800672c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006730:	462f      	mov	r7, r5
 8006732:	42bb      	cmp	r3, r7
 8006734:	460d      	mov	r5, r1
 8006736:	d9f4      	bls.n	8006722 <_printf_i+0x112>
 8006738:	2b08      	cmp	r3, #8
 800673a:	d10b      	bne.n	8006754 <_printf_i+0x144>
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	07df      	lsls	r7, r3, #31
 8006740:	d508      	bpl.n	8006754 <_printf_i+0x144>
 8006742:	6923      	ldr	r3, [r4, #16]
 8006744:	6861      	ldr	r1, [r4, #4]
 8006746:	4299      	cmp	r1, r3
 8006748:	bfde      	ittt	le
 800674a:	2330      	movle	r3, #48	@ 0x30
 800674c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006750:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006754:	1b92      	subs	r2, r2, r6
 8006756:	6122      	str	r2, [r4, #16]
 8006758:	f8cd a000 	str.w	sl, [sp]
 800675c:	464b      	mov	r3, r9
 800675e:	aa03      	add	r2, sp, #12
 8006760:	4621      	mov	r1, r4
 8006762:	4640      	mov	r0, r8
 8006764:	f7ff fee6 	bl	8006534 <_printf_common>
 8006768:	3001      	adds	r0, #1
 800676a:	d14a      	bne.n	8006802 <_printf_i+0x1f2>
 800676c:	f04f 30ff 	mov.w	r0, #4294967295
 8006770:	b004      	add	sp, #16
 8006772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	f043 0320 	orr.w	r3, r3, #32
 800677c:	6023      	str	r3, [r4, #0]
 800677e:	4833      	ldr	r0, [pc, #204]	@ (800684c <_printf_i+0x23c>)
 8006780:	2778      	movs	r7, #120	@ 0x78
 8006782:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	6831      	ldr	r1, [r6, #0]
 800678a:	061f      	lsls	r7, r3, #24
 800678c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006790:	d402      	bmi.n	8006798 <_printf_i+0x188>
 8006792:	065f      	lsls	r7, r3, #25
 8006794:	bf48      	it	mi
 8006796:	b2ad      	uxthmi	r5, r5
 8006798:	6031      	str	r1, [r6, #0]
 800679a:	07d9      	lsls	r1, r3, #31
 800679c:	bf44      	itt	mi
 800679e:	f043 0320 	orrmi.w	r3, r3, #32
 80067a2:	6023      	strmi	r3, [r4, #0]
 80067a4:	b11d      	cbz	r5, 80067ae <_printf_i+0x19e>
 80067a6:	2310      	movs	r3, #16
 80067a8:	e7ac      	b.n	8006704 <_printf_i+0xf4>
 80067aa:	4827      	ldr	r0, [pc, #156]	@ (8006848 <_printf_i+0x238>)
 80067ac:	e7e9      	b.n	8006782 <_printf_i+0x172>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	f023 0320 	bic.w	r3, r3, #32
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	e7f6      	b.n	80067a6 <_printf_i+0x196>
 80067b8:	4616      	mov	r6, r2
 80067ba:	e7bd      	b.n	8006738 <_printf_i+0x128>
 80067bc:	6833      	ldr	r3, [r6, #0]
 80067be:	6825      	ldr	r5, [r4, #0]
 80067c0:	6961      	ldr	r1, [r4, #20]
 80067c2:	1d18      	adds	r0, r3, #4
 80067c4:	6030      	str	r0, [r6, #0]
 80067c6:	062e      	lsls	r6, r5, #24
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	d501      	bpl.n	80067d0 <_printf_i+0x1c0>
 80067cc:	6019      	str	r1, [r3, #0]
 80067ce:	e002      	b.n	80067d6 <_printf_i+0x1c6>
 80067d0:	0668      	lsls	r0, r5, #25
 80067d2:	d5fb      	bpl.n	80067cc <_printf_i+0x1bc>
 80067d4:	8019      	strh	r1, [r3, #0]
 80067d6:	2300      	movs	r3, #0
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	4616      	mov	r6, r2
 80067dc:	e7bc      	b.n	8006758 <_printf_i+0x148>
 80067de:	6833      	ldr	r3, [r6, #0]
 80067e0:	1d1a      	adds	r2, r3, #4
 80067e2:	6032      	str	r2, [r6, #0]
 80067e4:	681e      	ldr	r6, [r3, #0]
 80067e6:	6862      	ldr	r2, [r4, #4]
 80067e8:	2100      	movs	r1, #0
 80067ea:	4630      	mov	r0, r6
 80067ec:	f7f9 fd10 	bl	8000210 <memchr>
 80067f0:	b108      	cbz	r0, 80067f6 <_printf_i+0x1e6>
 80067f2:	1b80      	subs	r0, r0, r6
 80067f4:	6060      	str	r0, [r4, #4]
 80067f6:	6863      	ldr	r3, [r4, #4]
 80067f8:	6123      	str	r3, [r4, #16]
 80067fa:	2300      	movs	r3, #0
 80067fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006800:	e7aa      	b.n	8006758 <_printf_i+0x148>
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	4632      	mov	r2, r6
 8006806:	4649      	mov	r1, r9
 8006808:	4640      	mov	r0, r8
 800680a:	47d0      	blx	sl
 800680c:	3001      	adds	r0, #1
 800680e:	d0ad      	beq.n	800676c <_printf_i+0x15c>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	079b      	lsls	r3, r3, #30
 8006814:	d413      	bmi.n	800683e <_printf_i+0x22e>
 8006816:	68e0      	ldr	r0, [r4, #12]
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	4298      	cmp	r0, r3
 800681c:	bfb8      	it	lt
 800681e:	4618      	movlt	r0, r3
 8006820:	e7a6      	b.n	8006770 <_printf_i+0x160>
 8006822:	2301      	movs	r3, #1
 8006824:	4632      	mov	r2, r6
 8006826:	4649      	mov	r1, r9
 8006828:	4640      	mov	r0, r8
 800682a:	47d0      	blx	sl
 800682c:	3001      	adds	r0, #1
 800682e:	d09d      	beq.n	800676c <_printf_i+0x15c>
 8006830:	3501      	adds	r5, #1
 8006832:	68e3      	ldr	r3, [r4, #12]
 8006834:	9903      	ldr	r1, [sp, #12]
 8006836:	1a5b      	subs	r3, r3, r1
 8006838:	42ab      	cmp	r3, r5
 800683a:	dcf2      	bgt.n	8006822 <_printf_i+0x212>
 800683c:	e7eb      	b.n	8006816 <_printf_i+0x206>
 800683e:	2500      	movs	r5, #0
 8006840:	f104 0619 	add.w	r6, r4, #25
 8006844:	e7f5      	b.n	8006832 <_printf_i+0x222>
 8006846:	bf00      	nop
 8006848:	0800a8da 	.word	0x0800a8da
 800684c:	0800a8eb 	.word	0x0800a8eb

08006850 <_scanf_float>:
 8006850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006854:	b087      	sub	sp, #28
 8006856:	4617      	mov	r7, r2
 8006858:	9303      	str	r3, [sp, #12]
 800685a:	688b      	ldr	r3, [r1, #8]
 800685c:	1e5a      	subs	r2, r3, #1
 800685e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006862:	bf81      	itttt	hi
 8006864:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006868:	eb03 0b05 	addhi.w	fp, r3, r5
 800686c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006870:	608b      	strhi	r3, [r1, #8]
 8006872:	680b      	ldr	r3, [r1, #0]
 8006874:	460a      	mov	r2, r1
 8006876:	f04f 0500 	mov.w	r5, #0
 800687a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800687e:	f842 3b1c 	str.w	r3, [r2], #28
 8006882:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006886:	4680      	mov	r8, r0
 8006888:	460c      	mov	r4, r1
 800688a:	bf98      	it	ls
 800688c:	f04f 0b00 	movls.w	fp, #0
 8006890:	9201      	str	r2, [sp, #4]
 8006892:	4616      	mov	r6, r2
 8006894:	46aa      	mov	sl, r5
 8006896:	46a9      	mov	r9, r5
 8006898:	9502      	str	r5, [sp, #8]
 800689a:	68a2      	ldr	r2, [r4, #8]
 800689c:	b152      	cbz	r2, 80068b4 <_scanf_float+0x64>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b4e      	cmp	r3, #78	@ 0x4e
 80068a4:	d864      	bhi.n	8006970 <_scanf_float+0x120>
 80068a6:	2b40      	cmp	r3, #64	@ 0x40
 80068a8:	d83c      	bhi.n	8006924 <_scanf_float+0xd4>
 80068aa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80068ae:	b2c8      	uxtb	r0, r1
 80068b0:	280e      	cmp	r0, #14
 80068b2:	d93a      	bls.n	800692a <_scanf_float+0xda>
 80068b4:	f1b9 0f00 	cmp.w	r9, #0
 80068b8:	d003      	beq.n	80068c2 <_scanf_float+0x72>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068c6:	f1ba 0f01 	cmp.w	sl, #1
 80068ca:	f200 8117 	bhi.w	8006afc <_scanf_float+0x2ac>
 80068ce:	9b01      	ldr	r3, [sp, #4]
 80068d0:	429e      	cmp	r6, r3
 80068d2:	f200 8108 	bhi.w	8006ae6 <_scanf_float+0x296>
 80068d6:	2001      	movs	r0, #1
 80068d8:	b007      	add	sp, #28
 80068da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068de:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80068e2:	2a0d      	cmp	r2, #13
 80068e4:	d8e6      	bhi.n	80068b4 <_scanf_float+0x64>
 80068e6:	a101      	add	r1, pc, #4	@ (adr r1, 80068ec <_scanf_float+0x9c>)
 80068e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068ec:	08006a33 	.word	0x08006a33
 80068f0:	080068b5 	.word	0x080068b5
 80068f4:	080068b5 	.word	0x080068b5
 80068f8:	080068b5 	.word	0x080068b5
 80068fc:	08006a93 	.word	0x08006a93
 8006900:	08006a6b 	.word	0x08006a6b
 8006904:	080068b5 	.word	0x080068b5
 8006908:	080068b5 	.word	0x080068b5
 800690c:	08006a41 	.word	0x08006a41
 8006910:	080068b5 	.word	0x080068b5
 8006914:	080068b5 	.word	0x080068b5
 8006918:	080068b5 	.word	0x080068b5
 800691c:	080068b5 	.word	0x080068b5
 8006920:	080069f9 	.word	0x080069f9
 8006924:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006928:	e7db      	b.n	80068e2 <_scanf_float+0x92>
 800692a:	290e      	cmp	r1, #14
 800692c:	d8c2      	bhi.n	80068b4 <_scanf_float+0x64>
 800692e:	a001      	add	r0, pc, #4	@ (adr r0, 8006934 <_scanf_float+0xe4>)
 8006930:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006934:	080069e9 	.word	0x080069e9
 8006938:	080068b5 	.word	0x080068b5
 800693c:	080069e9 	.word	0x080069e9
 8006940:	08006a7f 	.word	0x08006a7f
 8006944:	080068b5 	.word	0x080068b5
 8006948:	08006991 	.word	0x08006991
 800694c:	080069cf 	.word	0x080069cf
 8006950:	080069cf 	.word	0x080069cf
 8006954:	080069cf 	.word	0x080069cf
 8006958:	080069cf 	.word	0x080069cf
 800695c:	080069cf 	.word	0x080069cf
 8006960:	080069cf 	.word	0x080069cf
 8006964:	080069cf 	.word	0x080069cf
 8006968:	080069cf 	.word	0x080069cf
 800696c:	080069cf 	.word	0x080069cf
 8006970:	2b6e      	cmp	r3, #110	@ 0x6e
 8006972:	d809      	bhi.n	8006988 <_scanf_float+0x138>
 8006974:	2b60      	cmp	r3, #96	@ 0x60
 8006976:	d8b2      	bhi.n	80068de <_scanf_float+0x8e>
 8006978:	2b54      	cmp	r3, #84	@ 0x54
 800697a:	d07b      	beq.n	8006a74 <_scanf_float+0x224>
 800697c:	2b59      	cmp	r3, #89	@ 0x59
 800697e:	d199      	bne.n	80068b4 <_scanf_float+0x64>
 8006980:	2d07      	cmp	r5, #7
 8006982:	d197      	bne.n	80068b4 <_scanf_float+0x64>
 8006984:	2508      	movs	r5, #8
 8006986:	e02c      	b.n	80069e2 <_scanf_float+0x192>
 8006988:	2b74      	cmp	r3, #116	@ 0x74
 800698a:	d073      	beq.n	8006a74 <_scanf_float+0x224>
 800698c:	2b79      	cmp	r3, #121	@ 0x79
 800698e:	e7f6      	b.n	800697e <_scanf_float+0x12e>
 8006990:	6821      	ldr	r1, [r4, #0]
 8006992:	05c8      	lsls	r0, r1, #23
 8006994:	d51b      	bpl.n	80069ce <_scanf_float+0x17e>
 8006996:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800699a:	6021      	str	r1, [r4, #0]
 800699c:	f109 0901 	add.w	r9, r9, #1
 80069a0:	f1bb 0f00 	cmp.w	fp, #0
 80069a4:	d003      	beq.n	80069ae <_scanf_float+0x15e>
 80069a6:	3201      	adds	r2, #1
 80069a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069ac:	60a2      	str	r2, [r4, #8]
 80069ae:	68a3      	ldr	r3, [r4, #8]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	60a3      	str	r3, [r4, #8]
 80069b4:	6923      	ldr	r3, [r4, #16]
 80069b6:	3301      	adds	r3, #1
 80069b8:	6123      	str	r3, [r4, #16]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3b01      	subs	r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	607b      	str	r3, [r7, #4]
 80069c2:	f340 8087 	ble.w	8006ad4 <_scanf_float+0x284>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	3301      	adds	r3, #1
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	e765      	b.n	800689a <_scanf_float+0x4a>
 80069ce:	eb1a 0105 	adds.w	r1, sl, r5
 80069d2:	f47f af6f 	bne.w	80068b4 <_scanf_float+0x64>
 80069d6:	6822      	ldr	r2, [r4, #0]
 80069d8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80069dc:	6022      	str	r2, [r4, #0]
 80069de:	460d      	mov	r5, r1
 80069e0:	468a      	mov	sl, r1
 80069e2:	f806 3b01 	strb.w	r3, [r6], #1
 80069e6:	e7e2      	b.n	80069ae <_scanf_float+0x15e>
 80069e8:	6822      	ldr	r2, [r4, #0]
 80069ea:	0610      	lsls	r0, r2, #24
 80069ec:	f57f af62 	bpl.w	80068b4 <_scanf_float+0x64>
 80069f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80069f4:	6022      	str	r2, [r4, #0]
 80069f6:	e7f4      	b.n	80069e2 <_scanf_float+0x192>
 80069f8:	f1ba 0f00 	cmp.w	sl, #0
 80069fc:	d10e      	bne.n	8006a1c <_scanf_float+0x1cc>
 80069fe:	f1b9 0f00 	cmp.w	r9, #0
 8006a02:	d10e      	bne.n	8006a22 <_scanf_float+0x1d2>
 8006a04:	6822      	ldr	r2, [r4, #0]
 8006a06:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a0a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a0e:	d108      	bne.n	8006a22 <_scanf_float+0x1d2>
 8006a10:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a14:	6022      	str	r2, [r4, #0]
 8006a16:	f04f 0a01 	mov.w	sl, #1
 8006a1a:	e7e2      	b.n	80069e2 <_scanf_float+0x192>
 8006a1c:	f1ba 0f02 	cmp.w	sl, #2
 8006a20:	d055      	beq.n	8006ace <_scanf_float+0x27e>
 8006a22:	2d01      	cmp	r5, #1
 8006a24:	d002      	beq.n	8006a2c <_scanf_float+0x1dc>
 8006a26:	2d04      	cmp	r5, #4
 8006a28:	f47f af44 	bne.w	80068b4 <_scanf_float+0x64>
 8006a2c:	3501      	adds	r5, #1
 8006a2e:	b2ed      	uxtb	r5, r5
 8006a30:	e7d7      	b.n	80069e2 <_scanf_float+0x192>
 8006a32:	f1ba 0f01 	cmp.w	sl, #1
 8006a36:	f47f af3d 	bne.w	80068b4 <_scanf_float+0x64>
 8006a3a:	f04f 0a02 	mov.w	sl, #2
 8006a3e:	e7d0      	b.n	80069e2 <_scanf_float+0x192>
 8006a40:	b97d      	cbnz	r5, 8006a62 <_scanf_float+0x212>
 8006a42:	f1b9 0f00 	cmp.w	r9, #0
 8006a46:	f47f af38 	bne.w	80068ba <_scanf_float+0x6a>
 8006a4a:	6822      	ldr	r2, [r4, #0]
 8006a4c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006a50:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006a54:	f040 8108 	bne.w	8006c68 <_scanf_float+0x418>
 8006a58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006a5c:	6022      	str	r2, [r4, #0]
 8006a5e:	2501      	movs	r5, #1
 8006a60:	e7bf      	b.n	80069e2 <_scanf_float+0x192>
 8006a62:	2d03      	cmp	r5, #3
 8006a64:	d0e2      	beq.n	8006a2c <_scanf_float+0x1dc>
 8006a66:	2d05      	cmp	r5, #5
 8006a68:	e7de      	b.n	8006a28 <_scanf_float+0x1d8>
 8006a6a:	2d02      	cmp	r5, #2
 8006a6c:	f47f af22 	bne.w	80068b4 <_scanf_float+0x64>
 8006a70:	2503      	movs	r5, #3
 8006a72:	e7b6      	b.n	80069e2 <_scanf_float+0x192>
 8006a74:	2d06      	cmp	r5, #6
 8006a76:	f47f af1d 	bne.w	80068b4 <_scanf_float+0x64>
 8006a7a:	2507      	movs	r5, #7
 8006a7c:	e7b1      	b.n	80069e2 <_scanf_float+0x192>
 8006a7e:	6822      	ldr	r2, [r4, #0]
 8006a80:	0591      	lsls	r1, r2, #22
 8006a82:	f57f af17 	bpl.w	80068b4 <_scanf_float+0x64>
 8006a86:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006a8a:	6022      	str	r2, [r4, #0]
 8006a8c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a90:	e7a7      	b.n	80069e2 <_scanf_float+0x192>
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006a98:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006a9c:	d006      	beq.n	8006aac <_scanf_float+0x25c>
 8006a9e:	0550      	lsls	r0, r2, #21
 8006aa0:	f57f af08 	bpl.w	80068b4 <_scanf_float+0x64>
 8006aa4:	f1b9 0f00 	cmp.w	r9, #0
 8006aa8:	f000 80de 	beq.w	8006c68 <_scanf_float+0x418>
 8006aac:	0591      	lsls	r1, r2, #22
 8006aae:	bf58      	it	pl
 8006ab0:	9902      	ldrpl	r1, [sp, #8]
 8006ab2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ab6:	bf58      	it	pl
 8006ab8:	eba9 0101 	subpl.w	r1, r9, r1
 8006abc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ac0:	bf58      	it	pl
 8006ac2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ac6:	6022      	str	r2, [r4, #0]
 8006ac8:	f04f 0900 	mov.w	r9, #0
 8006acc:	e789      	b.n	80069e2 <_scanf_float+0x192>
 8006ace:	f04f 0a03 	mov.w	sl, #3
 8006ad2:	e786      	b.n	80069e2 <_scanf_float+0x192>
 8006ad4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006ad8:	4639      	mov	r1, r7
 8006ada:	4640      	mov	r0, r8
 8006adc:	4798      	blx	r3
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	f43f aedb 	beq.w	800689a <_scanf_float+0x4a>
 8006ae4:	e6e6      	b.n	80068b4 <_scanf_float+0x64>
 8006ae6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006aea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006aee:	463a      	mov	r2, r7
 8006af0:	4640      	mov	r0, r8
 8006af2:	4798      	blx	r3
 8006af4:	6923      	ldr	r3, [r4, #16]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	6123      	str	r3, [r4, #16]
 8006afa:	e6e8      	b.n	80068ce <_scanf_float+0x7e>
 8006afc:	1e6b      	subs	r3, r5, #1
 8006afe:	2b06      	cmp	r3, #6
 8006b00:	d824      	bhi.n	8006b4c <_scanf_float+0x2fc>
 8006b02:	2d02      	cmp	r5, #2
 8006b04:	d836      	bhi.n	8006b74 <_scanf_float+0x324>
 8006b06:	9b01      	ldr	r3, [sp, #4]
 8006b08:	429e      	cmp	r6, r3
 8006b0a:	f67f aee4 	bls.w	80068d6 <_scanf_float+0x86>
 8006b0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b16:	463a      	mov	r2, r7
 8006b18:	4640      	mov	r0, r8
 8006b1a:	4798      	blx	r3
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	e7f0      	b.n	8006b06 <_scanf_float+0x2b6>
 8006b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b28:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006b2c:	463a      	mov	r2, r7
 8006b2e:	4640      	mov	r0, r8
 8006b30:	4798      	blx	r3
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b3c:	fa5f fa8a 	uxtb.w	sl, sl
 8006b40:	f1ba 0f02 	cmp.w	sl, #2
 8006b44:	d1ee      	bne.n	8006b24 <_scanf_float+0x2d4>
 8006b46:	3d03      	subs	r5, #3
 8006b48:	b2ed      	uxtb	r5, r5
 8006b4a:	1b76      	subs	r6, r6, r5
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	05da      	lsls	r2, r3, #23
 8006b50:	d530      	bpl.n	8006bb4 <_scanf_float+0x364>
 8006b52:	055b      	lsls	r3, r3, #21
 8006b54:	d511      	bpl.n	8006b7a <_scanf_float+0x32a>
 8006b56:	9b01      	ldr	r3, [sp, #4]
 8006b58:	429e      	cmp	r6, r3
 8006b5a:	f67f aebc 	bls.w	80068d6 <_scanf_float+0x86>
 8006b5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b66:	463a      	mov	r2, r7
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4798      	blx	r3
 8006b6c:	6923      	ldr	r3, [r4, #16]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	6123      	str	r3, [r4, #16]
 8006b72:	e7f0      	b.n	8006b56 <_scanf_float+0x306>
 8006b74:	46aa      	mov	sl, r5
 8006b76:	46b3      	mov	fp, r6
 8006b78:	e7de      	b.n	8006b38 <_scanf_float+0x2e8>
 8006b7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b7e:	6923      	ldr	r3, [r4, #16]
 8006b80:	2965      	cmp	r1, #101	@ 0x65
 8006b82:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b86:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b8a:	6123      	str	r3, [r4, #16]
 8006b8c:	d00c      	beq.n	8006ba8 <_scanf_float+0x358>
 8006b8e:	2945      	cmp	r1, #69	@ 0x45
 8006b90:	d00a      	beq.n	8006ba8 <_scanf_float+0x358>
 8006b92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b96:	463a      	mov	r2, r7
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4798      	blx	r3
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	1eb5      	subs	r5, r6, #2
 8006ba6:	6123      	str	r3, [r4, #16]
 8006ba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bac:	463a      	mov	r2, r7
 8006bae:	4640      	mov	r0, r8
 8006bb0:	4798      	blx	r3
 8006bb2:	462e      	mov	r6, r5
 8006bb4:	6822      	ldr	r2, [r4, #0]
 8006bb6:	f012 0210 	ands.w	r2, r2, #16
 8006bba:	d001      	beq.n	8006bc0 <_scanf_float+0x370>
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	e68b      	b.n	80068d8 <_scanf_float+0x88>
 8006bc0:	7032      	strb	r2, [r6, #0]
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bcc:	d11c      	bne.n	8006c08 <_scanf_float+0x3b8>
 8006bce:	9b02      	ldr	r3, [sp, #8]
 8006bd0:	454b      	cmp	r3, r9
 8006bd2:	eba3 0209 	sub.w	r2, r3, r9
 8006bd6:	d123      	bne.n	8006c20 <_scanf_float+0x3d0>
 8006bd8:	9901      	ldr	r1, [sp, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4640      	mov	r0, r8
 8006bde:	f002 fbf7 	bl	80093d0 <_strtod_r>
 8006be2:	9b03      	ldr	r3, [sp, #12]
 8006be4:	6821      	ldr	r1, [r4, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f011 0f02 	tst.w	r1, #2
 8006bec:	ec57 6b10 	vmov	r6, r7, d0
 8006bf0:	f103 0204 	add.w	r2, r3, #4
 8006bf4:	d01f      	beq.n	8006c36 <_scanf_float+0x3e6>
 8006bf6:	9903      	ldr	r1, [sp, #12]
 8006bf8:	600a      	str	r2, [r1, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	e9c3 6700 	strd	r6, r7, [r3]
 8006c00:	68e3      	ldr	r3, [r4, #12]
 8006c02:	3301      	adds	r3, #1
 8006c04:	60e3      	str	r3, [r4, #12]
 8006c06:	e7d9      	b.n	8006bbc <_scanf_float+0x36c>
 8006c08:	9b04      	ldr	r3, [sp, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d0e4      	beq.n	8006bd8 <_scanf_float+0x388>
 8006c0e:	9905      	ldr	r1, [sp, #20]
 8006c10:	230a      	movs	r3, #10
 8006c12:	3101      	adds	r1, #1
 8006c14:	4640      	mov	r0, r8
 8006c16:	f002 fc5b 	bl	80094d0 <_strtol_r>
 8006c1a:	9b04      	ldr	r3, [sp, #16]
 8006c1c:	9e05      	ldr	r6, [sp, #20]
 8006c1e:	1ac2      	subs	r2, r0, r3
 8006c20:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006c24:	429e      	cmp	r6, r3
 8006c26:	bf28      	it	cs
 8006c28:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006c2c:	4910      	ldr	r1, [pc, #64]	@ (8006c70 <_scanf_float+0x420>)
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f000 f8e4 	bl	8006dfc <siprintf>
 8006c34:	e7d0      	b.n	8006bd8 <_scanf_float+0x388>
 8006c36:	f011 0f04 	tst.w	r1, #4
 8006c3a:	9903      	ldr	r1, [sp, #12]
 8006c3c:	600a      	str	r2, [r1, #0]
 8006c3e:	d1dc      	bne.n	8006bfa <_scanf_float+0x3aa>
 8006c40:	681d      	ldr	r5, [r3, #0]
 8006c42:	4632      	mov	r2, r6
 8006c44:	463b      	mov	r3, r7
 8006c46:	4630      	mov	r0, r6
 8006c48:	4639      	mov	r1, r7
 8006c4a:	f7f9 ff8f 	bl	8000b6c <__aeabi_dcmpun>
 8006c4e:	b128      	cbz	r0, 8006c5c <_scanf_float+0x40c>
 8006c50:	4808      	ldr	r0, [pc, #32]	@ (8006c74 <_scanf_float+0x424>)
 8006c52:	f000 f9b7 	bl	8006fc4 <nanf>
 8006c56:	ed85 0a00 	vstr	s0, [r5]
 8006c5a:	e7d1      	b.n	8006c00 <_scanf_float+0x3b0>
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	4639      	mov	r1, r7
 8006c60:	f7f9 ffe2 	bl	8000c28 <__aeabi_d2f>
 8006c64:	6028      	str	r0, [r5, #0]
 8006c66:	e7cb      	b.n	8006c00 <_scanf_float+0x3b0>
 8006c68:	f04f 0900 	mov.w	r9, #0
 8006c6c:	e629      	b.n	80068c2 <_scanf_float+0x72>
 8006c6e:	bf00      	nop
 8006c70:	0800a8fc 	.word	0x0800a8fc
 8006c74:	0800ac95 	.word	0x0800ac95

08006c78 <std>:
 8006c78:	2300      	movs	r3, #0
 8006c7a:	b510      	push	{r4, lr}
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c86:	6083      	str	r3, [r0, #8]
 8006c88:	8181      	strh	r1, [r0, #12]
 8006c8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c8c:	81c2      	strh	r2, [r0, #14]
 8006c8e:	6183      	str	r3, [r0, #24]
 8006c90:	4619      	mov	r1, r3
 8006c92:	2208      	movs	r2, #8
 8006c94:	305c      	adds	r0, #92	@ 0x5c
 8006c96:	f000 f914 	bl	8006ec2 <memset>
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <std+0x58>)
 8006c9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd4 <std+0x5c>)
 8006ca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd8 <std+0x60>)
 8006ca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cdc <std+0x64>)
 8006ca8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006caa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce0 <std+0x68>)
 8006cac:	6224      	str	r4, [r4, #32]
 8006cae:	429c      	cmp	r4, r3
 8006cb0:	d006      	beq.n	8006cc0 <std+0x48>
 8006cb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cb6:	4294      	cmp	r4, r2
 8006cb8:	d002      	beq.n	8006cc0 <std+0x48>
 8006cba:	33d0      	adds	r3, #208	@ 0xd0
 8006cbc:	429c      	cmp	r4, r3
 8006cbe:	d105      	bne.n	8006ccc <std+0x54>
 8006cc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc8:	f000 b978 	b.w	8006fbc <__retarget_lock_init_recursive>
 8006ccc:	bd10      	pop	{r4, pc}
 8006cce:	bf00      	nop
 8006cd0:	08006e3d 	.word	0x08006e3d
 8006cd4:	08006e5f 	.word	0x08006e5f
 8006cd8:	08006e97 	.word	0x08006e97
 8006cdc:	08006ebb 	.word	0x08006ebb
 8006ce0:	200003f0 	.word	0x200003f0

08006ce4 <stdio_exit_handler>:
 8006ce4:	4a02      	ldr	r2, [pc, #8]	@ (8006cf0 <stdio_exit_handler+0xc>)
 8006ce6:	4903      	ldr	r1, [pc, #12]	@ (8006cf4 <stdio_exit_handler+0x10>)
 8006ce8:	4803      	ldr	r0, [pc, #12]	@ (8006cf8 <stdio_exit_handler+0x14>)
 8006cea:	f000 b869 	b.w	8006dc0 <_fwalk_sglue>
 8006cee:	bf00      	nop
 8006cf0:	2000000c 	.word	0x2000000c
 8006cf4:	0800988d 	.word	0x0800988d
 8006cf8:	2000001c 	.word	0x2000001c

08006cfc <cleanup_stdio>:
 8006cfc:	6841      	ldr	r1, [r0, #4]
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006d30 <cleanup_stdio+0x34>)
 8006d00:	4299      	cmp	r1, r3
 8006d02:	b510      	push	{r4, lr}
 8006d04:	4604      	mov	r4, r0
 8006d06:	d001      	beq.n	8006d0c <cleanup_stdio+0x10>
 8006d08:	f002 fdc0 	bl	800988c <_fflush_r>
 8006d0c:	68a1      	ldr	r1, [r4, #8]
 8006d0e:	4b09      	ldr	r3, [pc, #36]	@ (8006d34 <cleanup_stdio+0x38>)
 8006d10:	4299      	cmp	r1, r3
 8006d12:	d002      	beq.n	8006d1a <cleanup_stdio+0x1e>
 8006d14:	4620      	mov	r0, r4
 8006d16:	f002 fdb9 	bl	800988c <_fflush_r>
 8006d1a:	68e1      	ldr	r1, [r4, #12]
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <cleanup_stdio+0x3c>)
 8006d1e:	4299      	cmp	r1, r3
 8006d20:	d004      	beq.n	8006d2c <cleanup_stdio+0x30>
 8006d22:	4620      	mov	r0, r4
 8006d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d28:	f002 bdb0 	b.w	800988c <_fflush_r>
 8006d2c:	bd10      	pop	{r4, pc}
 8006d2e:	bf00      	nop
 8006d30:	200003f0 	.word	0x200003f0
 8006d34:	20000458 	.word	0x20000458
 8006d38:	200004c0 	.word	0x200004c0

08006d3c <global_stdio_init.part.0>:
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d6c <global_stdio_init.part.0+0x30>)
 8006d40:	4c0b      	ldr	r4, [pc, #44]	@ (8006d70 <global_stdio_init.part.0+0x34>)
 8006d42:	4a0c      	ldr	r2, [pc, #48]	@ (8006d74 <global_stdio_init.part.0+0x38>)
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	4620      	mov	r0, r4
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2104      	movs	r1, #4
 8006d4c:	f7ff ff94 	bl	8006c78 <std>
 8006d50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d54:	2201      	movs	r2, #1
 8006d56:	2109      	movs	r1, #9
 8006d58:	f7ff ff8e 	bl	8006c78 <std>
 8006d5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d60:	2202      	movs	r2, #2
 8006d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d66:	2112      	movs	r1, #18
 8006d68:	f7ff bf86 	b.w	8006c78 <std>
 8006d6c:	20000528 	.word	0x20000528
 8006d70:	200003f0 	.word	0x200003f0
 8006d74:	08006ce5 	.word	0x08006ce5

08006d78 <__sfp_lock_acquire>:
 8006d78:	4801      	ldr	r0, [pc, #4]	@ (8006d80 <__sfp_lock_acquire+0x8>)
 8006d7a:	f000 b920 	b.w	8006fbe <__retarget_lock_acquire_recursive>
 8006d7e:	bf00      	nop
 8006d80:	20000531 	.word	0x20000531

08006d84 <__sfp_lock_release>:
 8006d84:	4801      	ldr	r0, [pc, #4]	@ (8006d8c <__sfp_lock_release+0x8>)
 8006d86:	f000 b91b 	b.w	8006fc0 <__retarget_lock_release_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	20000531 	.word	0x20000531

08006d90 <__sinit>:
 8006d90:	b510      	push	{r4, lr}
 8006d92:	4604      	mov	r4, r0
 8006d94:	f7ff fff0 	bl	8006d78 <__sfp_lock_acquire>
 8006d98:	6a23      	ldr	r3, [r4, #32]
 8006d9a:	b11b      	cbz	r3, 8006da4 <__sinit+0x14>
 8006d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da0:	f7ff bff0 	b.w	8006d84 <__sfp_lock_release>
 8006da4:	4b04      	ldr	r3, [pc, #16]	@ (8006db8 <__sinit+0x28>)
 8006da6:	6223      	str	r3, [r4, #32]
 8006da8:	4b04      	ldr	r3, [pc, #16]	@ (8006dbc <__sinit+0x2c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f5      	bne.n	8006d9c <__sinit+0xc>
 8006db0:	f7ff ffc4 	bl	8006d3c <global_stdio_init.part.0>
 8006db4:	e7f2      	b.n	8006d9c <__sinit+0xc>
 8006db6:	bf00      	nop
 8006db8:	08006cfd 	.word	0x08006cfd
 8006dbc:	20000528 	.word	0x20000528

08006dc0 <_fwalk_sglue>:
 8006dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc4:	4607      	mov	r7, r0
 8006dc6:	4688      	mov	r8, r1
 8006dc8:	4614      	mov	r4, r2
 8006dca:	2600      	movs	r6, #0
 8006dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8006dd4:	d505      	bpl.n	8006de2 <_fwalk_sglue+0x22>
 8006dd6:	6824      	ldr	r4, [r4, #0]
 8006dd8:	2c00      	cmp	r4, #0
 8006dda:	d1f7      	bne.n	8006dcc <_fwalk_sglue+0xc>
 8006ddc:	4630      	mov	r0, r6
 8006dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de2:	89ab      	ldrh	r3, [r5, #12]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d907      	bls.n	8006df8 <_fwalk_sglue+0x38>
 8006de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dec:	3301      	adds	r3, #1
 8006dee:	d003      	beq.n	8006df8 <_fwalk_sglue+0x38>
 8006df0:	4629      	mov	r1, r5
 8006df2:	4638      	mov	r0, r7
 8006df4:	47c0      	blx	r8
 8006df6:	4306      	orrs	r6, r0
 8006df8:	3568      	adds	r5, #104	@ 0x68
 8006dfa:	e7e9      	b.n	8006dd0 <_fwalk_sglue+0x10>

08006dfc <siprintf>:
 8006dfc:	b40e      	push	{r1, r2, r3}
 8006dfe:	b500      	push	{lr}
 8006e00:	b09c      	sub	sp, #112	@ 0x70
 8006e02:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e04:	9002      	str	r0, [sp, #8]
 8006e06:	9006      	str	r0, [sp, #24]
 8006e08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e0c:	4809      	ldr	r0, [pc, #36]	@ (8006e34 <siprintf+0x38>)
 8006e0e:	9107      	str	r1, [sp, #28]
 8006e10:	9104      	str	r1, [sp, #16]
 8006e12:	4909      	ldr	r1, [pc, #36]	@ (8006e38 <siprintf+0x3c>)
 8006e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e18:	9105      	str	r1, [sp, #20]
 8006e1a:	6800      	ldr	r0, [r0, #0]
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	a902      	add	r1, sp, #8
 8006e20:	f002 fbb4 	bl	800958c <_svfiprintf_r>
 8006e24:	9b02      	ldr	r3, [sp, #8]
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	b01c      	add	sp, #112	@ 0x70
 8006e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e30:	b003      	add	sp, #12
 8006e32:	4770      	bx	lr
 8006e34:	20000018 	.word	0x20000018
 8006e38:	ffff0208 	.word	0xffff0208

08006e3c <__sread>:
 8006e3c:	b510      	push	{r4, lr}
 8006e3e:	460c      	mov	r4, r1
 8006e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e44:	f000 f86c 	bl	8006f20 <_read_r>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	bfab      	itete	ge
 8006e4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e50:	181b      	addge	r3, r3, r0
 8006e52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e56:	bfac      	ite	ge
 8006e58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e5a:	81a3      	strhlt	r3, [r4, #12]
 8006e5c:	bd10      	pop	{r4, pc}

08006e5e <__swrite>:
 8006e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e62:	461f      	mov	r7, r3
 8006e64:	898b      	ldrh	r3, [r1, #12]
 8006e66:	05db      	lsls	r3, r3, #23
 8006e68:	4605      	mov	r5, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	d505      	bpl.n	8006e7c <__swrite+0x1e>
 8006e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e74:	2302      	movs	r3, #2
 8006e76:	2200      	movs	r2, #0
 8006e78:	f000 f840 	bl	8006efc <_lseek_r>
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e86:	81a3      	strh	r3, [r4, #12]
 8006e88:	4632      	mov	r2, r6
 8006e8a:	463b      	mov	r3, r7
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e92:	f000 b857 	b.w	8006f44 <_write_r>

08006e96 <__sseek>:
 8006e96:	b510      	push	{r4, lr}
 8006e98:	460c      	mov	r4, r1
 8006e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9e:	f000 f82d 	bl	8006efc <_lseek_r>
 8006ea2:	1c43      	adds	r3, r0, #1
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	bf15      	itete	ne
 8006ea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006eaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eb2:	81a3      	strheq	r3, [r4, #12]
 8006eb4:	bf18      	it	ne
 8006eb6:	81a3      	strhne	r3, [r4, #12]
 8006eb8:	bd10      	pop	{r4, pc}

08006eba <__sclose>:
 8006eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebe:	f000 b80d 	b.w	8006edc <_close_r>

08006ec2 <memset>:
 8006ec2:	4402      	add	r2, r0
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d100      	bne.n	8006ecc <memset+0xa>
 8006eca:	4770      	bx	lr
 8006ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed0:	e7f9      	b.n	8006ec6 <memset+0x4>
	...

08006ed4 <_localeconv_r>:
 8006ed4:	4800      	ldr	r0, [pc, #0]	@ (8006ed8 <_localeconv_r+0x4>)
 8006ed6:	4770      	bx	lr
 8006ed8:	20000158 	.word	0x20000158

08006edc <_close_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4d06      	ldr	r5, [pc, #24]	@ (8006ef8 <_close_r+0x1c>)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	602b      	str	r3, [r5, #0]
 8006ee8:	f7fa ffd4 	bl	8001e94 <_close>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_close_r+0x1a>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_close_r+0x1a>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	2000052c 	.word	0x2000052c

08006efc <_lseek_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	4d07      	ldr	r5, [pc, #28]	@ (8006f1c <_lseek_r+0x20>)
 8006f00:	4604      	mov	r4, r0
 8006f02:	4608      	mov	r0, r1
 8006f04:	4611      	mov	r1, r2
 8006f06:	2200      	movs	r2, #0
 8006f08:	602a      	str	r2, [r5, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f7fa ffe9 	bl	8001ee2 <_lseek>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	d102      	bne.n	8006f1a <_lseek_r+0x1e>
 8006f14:	682b      	ldr	r3, [r5, #0]
 8006f16:	b103      	cbz	r3, 8006f1a <_lseek_r+0x1e>
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
 8006f1c:	2000052c 	.word	0x2000052c

08006f20 <_read_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4d07      	ldr	r5, [pc, #28]	@ (8006f40 <_read_r+0x20>)
 8006f24:	4604      	mov	r4, r0
 8006f26:	4608      	mov	r0, r1
 8006f28:	4611      	mov	r1, r2
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	602a      	str	r2, [r5, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f7fa ff77 	bl	8001e22 <_read>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d102      	bne.n	8006f3e <_read_r+0x1e>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	b103      	cbz	r3, 8006f3e <_read_r+0x1e>
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	2000052c 	.word	0x2000052c

08006f44 <_write_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4d07      	ldr	r5, [pc, #28]	@ (8006f64 <_write_r+0x20>)
 8006f48:	4604      	mov	r4, r0
 8006f4a:	4608      	mov	r0, r1
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	602a      	str	r2, [r5, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f7fa ff82 	bl	8001e5c <_write>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d102      	bne.n	8006f62 <_write_r+0x1e>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	b103      	cbz	r3, 8006f62 <_write_r+0x1e>
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	2000052c 	.word	0x2000052c

08006f68 <__errno>:
 8006f68:	4b01      	ldr	r3, [pc, #4]	@ (8006f70 <__errno+0x8>)
 8006f6a:	6818      	ldr	r0, [r3, #0]
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	20000018 	.word	0x20000018

08006f74 <__libc_init_array>:
 8006f74:	b570      	push	{r4, r5, r6, lr}
 8006f76:	4d0d      	ldr	r5, [pc, #52]	@ (8006fac <__libc_init_array+0x38>)
 8006f78:	4c0d      	ldr	r4, [pc, #52]	@ (8006fb0 <__libc_init_array+0x3c>)
 8006f7a:	1b64      	subs	r4, r4, r5
 8006f7c:	10a4      	asrs	r4, r4, #2
 8006f7e:	2600      	movs	r6, #0
 8006f80:	42a6      	cmp	r6, r4
 8006f82:	d109      	bne.n	8006f98 <__libc_init_array+0x24>
 8006f84:	4d0b      	ldr	r5, [pc, #44]	@ (8006fb4 <__libc_init_array+0x40>)
 8006f86:	4c0c      	ldr	r4, [pc, #48]	@ (8006fb8 <__libc_init_array+0x44>)
 8006f88:	f003 fc76 	bl	800a878 <_init>
 8006f8c:	1b64      	subs	r4, r4, r5
 8006f8e:	10a4      	asrs	r4, r4, #2
 8006f90:	2600      	movs	r6, #0
 8006f92:	42a6      	cmp	r6, r4
 8006f94:	d105      	bne.n	8006fa2 <__libc_init_array+0x2e>
 8006f96:	bd70      	pop	{r4, r5, r6, pc}
 8006f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f9c:	4798      	blx	r3
 8006f9e:	3601      	adds	r6, #1
 8006fa0:	e7ee      	b.n	8006f80 <__libc_init_array+0xc>
 8006fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa6:	4798      	blx	r3
 8006fa8:	3601      	adds	r6, #1
 8006faa:	e7f2      	b.n	8006f92 <__libc_init_array+0x1e>
 8006fac:	0800ad00 	.word	0x0800ad00
 8006fb0:	0800ad00 	.word	0x0800ad00
 8006fb4:	0800ad00 	.word	0x0800ad00
 8006fb8:	0800ad04 	.word	0x0800ad04

08006fbc <__retarget_lock_init_recursive>:
 8006fbc:	4770      	bx	lr

08006fbe <__retarget_lock_acquire_recursive>:
 8006fbe:	4770      	bx	lr

08006fc0 <__retarget_lock_release_recursive>:
 8006fc0:	4770      	bx	lr
	...

08006fc4 <nanf>:
 8006fc4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006fcc <nanf+0x8>
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	7fc00000 	.word	0x7fc00000

08006fd0 <quorem>:
 8006fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd4:	6903      	ldr	r3, [r0, #16]
 8006fd6:	690c      	ldr	r4, [r1, #16]
 8006fd8:	42a3      	cmp	r3, r4
 8006fda:	4607      	mov	r7, r0
 8006fdc:	db7e      	blt.n	80070dc <quorem+0x10c>
 8006fde:	3c01      	subs	r4, #1
 8006fe0:	f101 0814 	add.w	r8, r1, #20
 8006fe4:	00a3      	lsls	r3, r4, #2
 8006fe6:	f100 0514 	add.w	r5, r0, #20
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007002:	fbb2 f6f3 	udiv	r6, r2, r3
 8007006:	d32e      	bcc.n	8007066 <quorem+0x96>
 8007008:	f04f 0a00 	mov.w	sl, #0
 800700c:	46c4      	mov	ip, r8
 800700e:	46ae      	mov	lr, r5
 8007010:	46d3      	mov	fp, sl
 8007012:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007016:	b298      	uxth	r0, r3
 8007018:	fb06 a000 	mla	r0, r6, r0, sl
 800701c:	0c02      	lsrs	r2, r0, #16
 800701e:	0c1b      	lsrs	r3, r3, #16
 8007020:	fb06 2303 	mla	r3, r6, r3, r2
 8007024:	f8de 2000 	ldr.w	r2, [lr]
 8007028:	b280      	uxth	r0, r0
 800702a:	b292      	uxth	r2, r2
 800702c:	1a12      	subs	r2, r2, r0
 800702e:	445a      	add	r2, fp
 8007030:	f8de 0000 	ldr.w	r0, [lr]
 8007034:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007038:	b29b      	uxth	r3, r3
 800703a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800703e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007042:	b292      	uxth	r2, r2
 8007044:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007048:	45e1      	cmp	r9, ip
 800704a:	f84e 2b04 	str.w	r2, [lr], #4
 800704e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007052:	d2de      	bcs.n	8007012 <quorem+0x42>
 8007054:	9b00      	ldr	r3, [sp, #0]
 8007056:	58eb      	ldr	r3, [r5, r3]
 8007058:	b92b      	cbnz	r3, 8007066 <quorem+0x96>
 800705a:	9b01      	ldr	r3, [sp, #4]
 800705c:	3b04      	subs	r3, #4
 800705e:	429d      	cmp	r5, r3
 8007060:	461a      	mov	r2, r3
 8007062:	d32f      	bcc.n	80070c4 <quorem+0xf4>
 8007064:	613c      	str	r4, [r7, #16]
 8007066:	4638      	mov	r0, r7
 8007068:	f001 f9c2 	bl	80083f0 <__mcmp>
 800706c:	2800      	cmp	r0, #0
 800706e:	db25      	blt.n	80070bc <quorem+0xec>
 8007070:	4629      	mov	r1, r5
 8007072:	2000      	movs	r0, #0
 8007074:	f858 2b04 	ldr.w	r2, [r8], #4
 8007078:	f8d1 c000 	ldr.w	ip, [r1]
 800707c:	fa1f fe82 	uxth.w	lr, r2
 8007080:	fa1f f38c 	uxth.w	r3, ip
 8007084:	eba3 030e 	sub.w	r3, r3, lr
 8007088:	4403      	add	r3, r0
 800708a:	0c12      	lsrs	r2, r2, #16
 800708c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007090:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007094:	b29b      	uxth	r3, r3
 8007096:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800709a:	45c1      	cmp	r9, r8
 800709c:	f841 3b04 	str.w	r3, [r1], #4
 80070a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80070a4:	d2e6      	bcs.n	8007074 <quorem+0xa4>
 80070a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070ae:	b922      	cbnz	r2, 80070ba <quorem+0xea>
 80070b0:	3b04      	subs	r3, #4
 80070b2:	429d      	cmp	r5, r3
 80070b4:	461a      	mov	r2, r3
 80070b6:	d30b      	bcc.n	80070d0 <quorem+0x100>
 80070b8:	613c      	str	r4, [r7, #16]
 80070ba:	3601      	adds	r6, #1
 80070bc:	4630      	mov	r0, r6
 80070be:	b003      	add	sp, #12
 80070c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	3b04      	subs	r3, #4
 80070c8:	2a00      	cmp	r2, #0
 80070ca:	d1cb      	bne.n	8007064 <quorem+0x94>
 80070cc:	3c01      	subs	r4, #1
 80070ce:	e7c6      	b.n	800705e <quorem+0x8e>
 80070d0:	6812      	ldr	r2, [r2, #0]
 80070d2:	3b04      	subs	r3, #4
 80070d4:	2a00      	cmp	r2, #0
 80070d6:	d1ef      	bne.n	80070b8 <quorem+0xe8>
 80070d8:	3c01      	subs	r4, #1
 80070da:	e7ea      	b.n	80070b2 <quorem+0xe2>
 80070dc:	2000      	movs	r0, #0
 80070de:	e7ee      	b.n	80070be <quorem+0xee>

080070e0 <_dtoa_r>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	69c7      	ldr	r7, [r0, #28]
 80070e6:	b099      	sub	sp, #100	@ 0x64
 80070e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80070ec:	ec55 4b10 	vmov	r4, r5, d0
 80070f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80070f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80070f4:	4683      	mov	fp, r0
 80070f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80070f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80070fa:	b97f      	cbnz	r7, 800711c <_dtoa_r+0x3c>
 80070fc:	2010      	movs	r0, #16
 80070fe:	f000 fdfd 	bl	8007cfc <malloc>
 8007102:	4602      	mov	r2, r0
 8007104:	f8cb 001c 	str.w	r0, [fp, #28]
 8007108:	b920      	cbnz	r0, 8007114 <_dtoa_r+0x34>
 800710a:	4ba7      	ldr	r3, [pc, #668]	@ (80073a8 <_dtoa_r+0x2c8>)
 800710c:	21ef      	movs	r1, #239	@ 0xef
 800710e:	48a7      	ldr	r0, [pc, #668]	@ (80073ac <_dtoa_r+0x2cc>)
 8007110:	f002 fc36 	bl	8009980 <__assert_func>
 8007114:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007118:	6007      	str	r7, [r0, #0]
 800711a:	60c7      	str	r7, [r0, #12]
 800711c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	b159      	cbz	r1, 800713c <_dtoa_r+0x5c>
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	604a      	str	r2, [r1, #4]
 8007128:	2301      	movs	r3, #1
 800712a:	4093      	lsls	r3, r2
 800712c:	608b      	str	r3, [r1, #8]
 800712e:	4658      	mov	r0, fp
 8007130:	f000 feda 	bl	8007ee8 <_Bfree>
 8007134:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007138:	2200      	movs	r2, #0
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	1e2b      	subs	r3, r5, #0
 800713e:	bfb9      	ittee	lt
 8007140:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007144:	9303      	strlt	r3, [sp, #12]
 8007146:	2300      	movge	r3, #0
 8007148:	6033      	strge	r3, [r6, #0]
 800714a:	9f03      	ldr	r7, [sp, #12]
 800714c:	4b98      	ldr	r3, [pc, #608]	@ (80073b0 <_dtoa_r+0x2d0>)
 800714e:	bfbc      	itt	lt
 8007150:	2201      	movlt	r2, #1
 8007152:	6032      	strlt	r2, [r6, #0]
 8007154:	43bb      	bics	r3, r7
 8007156:	d112      	bne.n	800717e <_dtoa_r+0x9e>
 8007158:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800715a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007164:	4323      	orrs	r3, r4
 8007166:	f000 854d 	beq.w	8007c04 <_dtoa_r+0xb24>
 800716a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800716c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80073c4 <_dtoa_r+0x2e4>
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 854f 	beq.w	8007c14 <_dtoa_r+0xb34>
 8007176:	f10a 0303 	add.w	r3, sl, #3
 800717a:	f000 bd49 	b.w	8007c10 <_dtoa_r+0xb30>
 800717e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007182:	2200      	movs	r2, #0
 8007184:	ec51 0b17 	vmov	r0, r1, d7
 8007188:	2300      	movs	r3, #0
 800718a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800718e:	f7f9 fcbb 	bl	8000b08 <__aeabi_dcmpeq>
 8007192:	4680      	mov	r8, r0
 8007194:	b158      	cbz	r0, 80071ae <_dtoa_r+0xce>
 8007196:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007198:	2301      	movs	r3, #1
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800719e:	b113      	cbz	r3, 80071a6 <_dtoa_r+0xc6>
 80071a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80071a2:	4b84      	ldr	r3, [pc, #528]	@ (80073b4 <_dtoa_r+0x2d4>)
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80073c8 <_dtoa_r+0x2e8>
 80071aa:	f000 bd33 	b.w	8007c14 <_dtoa_r+0xb34>
 80071ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80071b2:	aa16      	add	r2, sp, #88	@ 0x58
 80071b4:	a917      	add	r1, sp, #92	@ 0x5c
 80071b6:	4658      	mov	r0, fp
 80071b8:	f001 fa3a 	bl	8008630 <__d2b>
 80071bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80071c0:	4681      	mov	r9, r0
 80071c2:	2e00      	cmp	r6, #0
 80071c4:	d077      	beq.n	80072b6 <_dtoa_r+0x1d6>
 80071c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80071cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80071d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80071dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80071e0:	4619      	mov	r1, r3
 80071e2:	2200      	movs	r2, #0
 80071e4:	4b74      	ldr	r3, [pc, #464]	@ (80073b8 <_dtoa_r+0x2d8>)
 80071e6:	f7f9 f86f 	bl	80002c8 <__aeabi_dsub>
 80071ea:	a369      	add	r3, pc, #420	@ (adr r3, 8007390 <_dtoa_r+0x2b0>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f7f9 fa22 	bl	8000638 <__aeabi_dmul>
 80071f4:	a368      	add	r3, pc, #416	@ (adr r3, 8007398 <_dtoa_r+0x2b8>)
 80071f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fa:	f7f9 f867 	bl	80002cc <__adddf3>
 80071fe:	4604      	mov	r4, r0
 8007200:	4630      	mov	r0, r6
 8007202:	460d      	mov	r5, r1
 8007204:	f7f9 f9ae 	bl	8000564 <__aeabi_i2d>
 8007208:	a365      	add	r3, pc, #404	@ (adr r3, 80073a0 <_dtoa_r+0x2c0>)
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	f7f9 fa13 	bl	8000638 <__aeabi_dmul>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4620      	mov	r0, r4
 8007218:	4629      	mov	r1, r5
 800721a:	f7f9 f857 	bl	80002cc <__adddf3>
 800721e:	4604      	mov	r4, r0
 8007220:	460d      	mov	r5, r1
 8007222:	f7f9 fcb9 	bl	8000b98 <__aeabi_d2iz>
 8007226:	2200      	movs	r2, #0
 8007228:	4607      	mov	r7, r0
 800722a:	2300      	movs	r3, #0
 800722c:	4620      	mov	r0, r4
 800722e:	4629      	mov	r1, r5
 8007230:	f7f9 fc74 	bl	8000b1c <__aeabi_dcmplt>
 8007234:	b140      	cbz	r0, 8007248 <_dtoa_r+0x168>
 8007236:	4638      	mov	r0, r7
 8007238:	f7f9 f994 	bl	8000564 <__aeabi_i2d>
 800723c:	4622      	mov	r2, r4
 800723e:	462b      	mov	r3, r5
 8007240:	f7f9 fc62 	bl	8000b08 <__aeabi_dcmpeq>
 8007244:	b900      	cbnz	r0, 8007248 <_dtoa_r+0x168>
 8007246:	3f01      	subs	r7, #1
 8007248:	2f16      	cmp	r7, #22
 800724a:	d851      	bhi.n	80072f0 <_dtoa_r+0x210>
 800724c:	4b5b      	ldr	r3, [pc, #364]	@ (80073bc <_dtoa_r+0x2dc>)
 800724e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800725a:	f7f9 fc5f 	bl	8000b1c <__aeabi_dcmplt>
 800725e:	2800      	cmp	r0, #0
 8007260:	d048      	beq.n	80072f4 <_dtoa_r+0x214>
 8007262:	3f01      	subs	r7, #1
 8007264:	2300      	movs	r3, #0
 8007266:	9312      	str	r3, [sp, #72]	@ 0x48
 8007268:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800726a:	1b9b      	subs	r3, r3, r6
 800726c:	1e5a      	subs	r2, r3, #1
 800726e:	bf44      	itt	mi
 8007270:	f1c3 0801 	rsbmi	r8, r3, #1
 8007274:	2300      	movmi	r3, #0
 8007276:	9208      	str	r2, [sp, #32]
 8007278:	bf54      	ite	pl
 800727a:	f04f 0800 	movpl.w	r8, #0
 800727e:	9308      	strmi	r3, [sp, #32]
 8007280:	2f00      	cmp	r7, #0
 8007282:	db39      	blt.n	80072f8 <_dtoa_r+0x218>
 8007284:	9b08      	ldr	r3, [sp, #32]
 8007286:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007288:	443b      	add	r3, r7
 800728a:	9308      	str	r3, [sp, #32]
 800728c:	2300      	movs	r3, #0
 800728e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007292:	2b09      	cmp	r3, #9
 8007294:	d864      	bhi.n	8007360 <_dtoa_r+0x280>
 8007296:	2b05      	cmp	r3, #5
 8007298:	bfc4      	itt	gt
 800729a:	3b04      	subgt	r3, #4
 800729c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800729e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072a0:	f1a3 0302 	sub.w	r3, r3, #2
 80072a4:	bfcc      	ite	gt
 80072a6:	2400      	movgt	r4, #0
 80072a8:	2401      	movle	r4, #1
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d863      	bhi.n	8007376 <_dtoa_r+0x296>
 80072ae:	e8df f003 	tbb	[pc, r3]
 80072b2:	372a      	.short	0x372a
 80072b4:	5535      	.short	0x5535
 80072b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80072ba:	441e      	add	r6, r3
 80072bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	bfc1      	itttt	gt
 80072c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80072c8:	409f      	lslgt	r7, r3
 80072ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80072ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80072d2:	bfd6      	itet	le
 80072d4:	f1c3 0320 	rsble	r3, r3, #32
 80072d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80072dc:	fa04 f003 	lslle.w	r0, r4, r3
 80072e0:	f7f9 f930 	bl	8000544 <__aeabi_ui2d>
 80072e4:	2201      	movs	r2, #1
 80072e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80072ea:	3e01      	subs	r6, #1
 80072ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80072ee:	e777      	b.n	80071e0 <_dtoa_r+0x100>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e7b8      	b.n	8007266 <_dtoa_r+0x186>
 80072f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80072f6:	e7b7      	b.n	8007268 <_dtoa_r+0x188>
 80072f8:	427b      	negs	r3, r7
 80072fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80072fc:	2300      	movs	r3, #0
 80072fe:	eba8 0807 	sub.w	r8, r8, r7
 8007302:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007304:	e7c4      	b.n	8007290 <_dtoa_r+0x1b0>
 8007306:	2300      	movs	r3, #0
 8007308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800730a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800730c:	2b00      	cmp	r3, #0
 800730e:	dc35      	bgt.n	800737c <_dtoa_r+0x29c>
 8007310:	2301      	movs	r3, #1
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	9307      	str	r3, [sp, #28]
 8007316:	461a      	mov	r2, r3
 8007318:	920e      	str	r2, [sp, #56]	@ 0x38
 800731a:	e00b      	b.n	8007334 <_dtoa_r+0x254>
 800731c:	2301      	movs	r3, #1
 800731e:	e7f3      	b.n	8007308 <_dtoa_r+0x228>
 8007320:	2300      	movs	r3, #0
 8007322:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007326:	18fb      	adds	r3, r7, r3
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	3301      	adds	r3, #1
 800732c:	2b01      	cmp	r3, #1
 800732e:	9307      	str	r3, [sp, #28]
 8007330:	bfb8      	it	lt
 8007332:	2301      	movlt	r3, #1
 8007334:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007338:	2100      	movs	r1, #0
 800733a:	2204      	movs	r2, #4
 800733c:	f102 0514 	add.w	r5, r2, #20
 8007340:	429d      	cmp	r5, r3
 8007342:	d91f      	bls.n	8007384 <_dtoa_r+0x2a4>
 8007344:	6041      	str	r1, [r0, #4]
 8007346:	4658      	mov	r0, fp
 8007348:	f000 fd8e 	bl	8007e68 <_Balloc>
 800734c:	4682      	mov	sl, r0
 800734e:	2800      	cmp	r0, #0
 8007350:	d13c      	bne.n	80073cc <_dtoa_r+0x2ec>
 8007352:	4b1b      	ldr	r3, [pc, #108]	@ (80073c0 <_dtoa_r+0x2e0>)
 8007354:	4602      	mov	r2, r0
 8007356:	f240 11af 	movw	r1, #431	@ 0x1af
 800735a:	e6d8      	b.n	800710e <_dtoa_r+0x2e>
 800735c:	2301      	movs	r3, #1
 800735e:	e7e0      	b.n	8007322 <_dtoa_r+0x242>
 8007360:	2401      	movs	r4, #1
 8007362:	2300      	movs	r3, #0
 8007364:	9309      	str	r3, [sp, #36]	@ 0x24
 8007366:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007368:	f04f 33ff 	mov.w	r3, #4294967295
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	9307      	str	r3, [sp, #28]
 8007370:	2200      	movs	r2, #0
 8007372:	2312      	movs	r3, #18
 8007374:	e7d0      	b.n	8007318 <_dtoa_r+0x238>
 8007376:	2301      	movs	r3, #1
 8007378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800737a:	e7f5      	b.n	8007368 <_dtoa_r+0x288>
 800737c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	9307      	str	r3, [sp, #28]
 8007382:	e7d7      	b.n	8007334 <_dtoa_r+0x254>
 8007384:	3101      	adds	r1, #1
 8007386:	0052      	lsls	r2, r2, #1
 8007388:	e7d8      	b.n	800733c <_dtoa_r+0x25c>
 800738a:	bf00      	nop
 800738c:	f3af 8000 	nop.w
 8007390:	636f4361 	.word	0x636f4361
 8007394:	3fd287a7 	.word	0x3fd287a7
 8007398:	8b60c8b3 	.word	0x8b60c8b3
 800739c:	3fc68a28 	.word	0x3fc68a28
 80073a0:	509f79fb 	.word	0x509f79fb
 80073a4:	3fd34413 	.word	0x3fd34413
 80073a8:	0800a90e 	.word	0x0800a90e
 80073ac:	0800a925 	.word	0x0800a925
 80073b0:	7ff00000 	.word	0x7ff00000
 80073b4:	0800a8d9 	.word	0x0800a8d9
 80073b8:	3ff80000 	.word	0x3ff80000
 80073bc:	0800aa20 	.word	0x0800aa20
 80073c0:	0800a97d 	.word	0x0800a97d
 80073c4:	0800a90a 	.word	0x0800a90a
 80073c8:	0800a8d8 	.word	0x0800a8d8
 80073cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073d0:	6018      	str	r0, [r3, #0]
 80073d2:	9b07      	ldr	r3, [sp, #28]
 80073d4:	2b0e      	cmp	r3, #14
 80073d6:	f200 80a4 	bhi.w	8007522 <_dtoa_r+0x442>
 80073da:	2c00      	cmp	r4, #0
 80073dc:	f000 80a1 	beq.w	8007522 <_dtoa_r+0x442>
 80073e0:	2f00      	cmp	r7, #0
 80073e2:	dd33      	ble.n	800744c <_dtoa_r+0x36c>
 80073e4:	4bad      	ldr	r3, [pc, #692]	@ (800769c <_dtoa_r+0x5bc>)
 80073e6:	f007 020f 	and.w	r2, r7, #15
 80073ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073ee:	ed93 7b00 	vldr	d7, [r3]
 80073f2:	05f8      	lsls	r0, r7, #23
 80073f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80073f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80073fc:	d516      	bpl.n	800742c <_dtoa_r+0x34c>
 80073fe:	4ba8      	ldr	r3, [pc, #672]	@ (80076a0 <_dtoa_r+0x5c0>)
 8007400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007408:	f7f9 fa40 	bl	800088c <__aeabi_ddiv>
 800740c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007410:	f004 040f 	and.w	r4, r4, #15
 8007414:	2603      	movs	r6, #3
 8007416:	4da2      	ldr	r5, [pc, #648]	@ (80076a0 <_dtoa_r+0x5c0>)
 8007418:	b954      	cbnz	r4, 8007430 <_dtoa_r+0x350>
 800741a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800741e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007422:	f7f9 fa33 	bl	800088c <__aeabi_ddiv>
 8007426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800742a:	e028      	b.n	800747e <_dtoa_r+0x39e>
 800742c:	2602      	movs	r6, #2
 800742e:	e7f2      	b.n	8007416 <_dtoa_r+0x336>
 8007430:	07e1      	lsls	r1, r4, #31
 8007432:	d508      	bpl.n	8007446 <_dtoa_r+0x366>
 8007434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007438:	e9d5 2300 	ldrd	r2, r3, [r5]
 800743c:	f7f9 f8fc 	bl	8000638 <__aeabi_dmul>
 8007440:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007444:	3601      	adds	r6, #1
 8007446:	1064      	asrs	r4, r4, #1
 8007448:	3508      	adds	r5, #8
 800744a:	e7e5      	b.n	8007418 <_dtoa_r+0x338>
 800744c:	f000 80d2 	beq.w	80075f4 <_dtoa_r+0x514>
 8007450:	427c      	negs	r4, r7
 8007452:	4b92      	ldr	r3, [pc, #584]	@ (800769c <_dtoa_r+0x5bc>)
 8007454:	4d92      	ldr	r5, [pc, #584]	@ (80076a0 <_dtoa_r+0x5c0>)
 8007456:	f004 020f 	and.w	r2, r4, #15
 800745a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007466:	f7f9 f8e7 	bl	8000638 <__aeabi_dmul>
 800746a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800746e:	1124      	asrs	r4, r4, #4
 8007470:	2300      	movs	r3, #0
 8007472:	2602      	movs	r6, #2
 8007474:	2c00      	cmp	r4, #0
 8007476:	f040 80b2 	bne.w	80075de <_dtoa_r+0x4fe>
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1d3      	bne.n	8007426 <_dtoa_r+0x346>
 800747e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007480:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80b7 	beq.w	80075f8 <_dtoa_r+0x518>
 800748a:	4b86      	ldr	r3, [pc, #536]	@ (80076a4 <_dtoa_r+0x5c4>)
 800748c:	2200      	movs	r2, #0
 800748e:	4620      	mov	r0, r4
 8007490:	4629      	mov	r1, r5
 8007492:	f7f9 fb43 	bl	8000b1c <__aeabi_dcmplt>
 8007496:	2800      	cmp	r0, #0
 8007498:	f000 80ae 	beq.w	80075f8 <_dtoa_r+0x518>
 800749c:	9b07      	ldr	r3, [sp, #28]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 80aa 	beq.w	80075f8 <_dtoa_r+0x518>
 80074a4:	9b00      	ldr	r3, [sp, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	dd37      	ble.n	800751a <_dtoa_r+0x43a>
 80074aa:	1e7b      	subs	r3, r7, #1
 80074ac:	9304      	str	r3, [sp, #16]
 80074ae:	4620      	mov	r0, r4
 80074b0:	4b7d      	ldr	r3, [pc, #500]	@ (80076a8 <_dtoa_r+0x5c8>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	4629      	mov	r1, r5
 80074b6:	f7f9 f8bf 	bl	8000638 <__aeabi_dmul>
 80074ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074be:	9c00      	ldr	r4, [sp, #0]
 80074c0:	3601      	adds	r6, #1
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7f9 f84e 	bl	8000564 <__aeabi_i2d>
 80074c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074cc:	f7f9 f8b4 	bl	8000638 <__aeabi_dmul>
 80074d0:	4b76      	ldr	r3, [pc, #472]	@ (80076ac <_dtoa_r+0x5cc>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	f7f8 fefa 	bl	80002cc <__adddf3>
 80074d8:	4605      	mov	r5, r0
 80074da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80074de:	2c00      	cmp	r4, #0
 80074e0:	f040 808d 	bne.w	80075fe <_dtoa_r+0x51e>
 80074e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e8:	4b71      	ldr	r3, [pc, #452]	@ (80076b0 <_dtoa_r+0x5d0>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	f7f8 feec 	bl	80002c8 <__aeabi_dsub>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074f8:	462a      	mov	r2, r5
 80074fa:	4633      	mov	r3, r6
 80074fc:	f7f9 fb2c 	bl	8000b58 <__aeabi_dcmpgt>
 8007500:	2800      	cmp	r0, #0
 8007502:	f040 828b 	bne.w	8007a1c <_dtoa_r+0x93c>
 8007506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800750a:	462a      	mov	r2, r5
 800750c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007510:	f7f9 fb04 	bl	8000b1c <__aeabi_dcmplt>
 8007514:	2800      	cmp	r0, #0
 8007516:	f040 8128 	bne.w	800776a <_dtoa_r+0x68a>
 800751a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800751e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007522:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007524:	2b00      	cmp	r3, #0
 8007526:	f2c0 815a 	blt.w	80077de <_dtoa_r+0x6fe>
 800752a:	2f0e      	cmp	r7, #14
 800752c:	f300 8157 	bgt.w	80077de <_dtoa_r+0x6fe>
 8007530:	4b5a      	ldr	r3, [pc, #360]	@ (800769c <_dtoa_r+0x5bc>)
 8007532:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007536:	ed93 7b00 	vldr	d7, [r3]
 800753a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800753c:	2b00      	cmp	r3, #0
 800753e:	ed8d 7b00 	vstr	d7, [sp]
 8007542:	da03      	bge.n	800754c <_dtoa_r+0x46c>
 8007544:	9b07      	ldr	r3, [sp, #28]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f340 8101 	ble.w	800774e <_dtoa_r+0x66e>
 800754c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007550:	4656      	mov	r6, sl
 8007552:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007556:	4620      	mov	r0, r4
 8007558:	4629      	mov	r1, r5
 800755a:	f7f9 f997 	bl	800088c <__aeabi_ddiv>
 800755e:	f7f9 fb1b 	bl	8000b98 <__aeabi_d2iz>
 8007562:	4680      	mov	r8, r0
 8007564:	f7f8 fffe 	bl	8000564 <__aeabi_i2d>
 8007568:	e9dd 2300 	ldrd	r2, r3, [sp]
 800756c:	f7f9 f864 	bl	8000638 <__aeabi_dmul>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4620      	mov	r0, r4
 8007576:	4629      	mov	r1, r5
 8007578:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800757c:	f7f8 fea4 	bl	80002c8 <__aeabi_dsub>
 8007580:	f806 4b01 	strb.w	r4, [r6], #1
 8007584:	9d07      	ldr	r5, [sp, #28]
 8007586:	eba6 040a 	sub.w	r4, r6, sl
 800758a:	42a5      	cmp	r5, r4
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	f040 8117 	bne.w	80077c2 <_dtoa_r+0x6e2>
 8007594:	f7f8 fe9a 	bl	80002cc <__adddf3>
 8007598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800759c:	4604      	mov	r4, r0
 800759e:	460d      	mov	r5, r1
 80075a0:	f7f9 fada 	bl	8000b58 <__aeabi_dcmpgt>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	f040 80f9 	bne.w	800779c <_dtoa_r+0x6bc>
 80075aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f9 faa9 	bl	8000b08 <__aeabi_dcmpeq>
 80075b6:	b118      	cbz	r0, 80075c0 <_dtoa_r+0x4e0>
 80075b8:	f018 0f01 	tst.w	r8, #1
 80075bc:	f040 80ee 	bne.w	800779c <_dtoa_r+0x6bc>
 80075c0:	4649      	mov	r1, r9
 80075c2:	4658      	mov	r0, fp
 80075c4:	f000 fc90 	bl	8007ee8 <_Bfree>
 80075c8:	2300      	movs	r3, #0
 80075ca:	7033      	strb	r3, [r6, #0]
 80075cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80075ce:	3701      	adds	r7, #1
 80075d0:	601f      	str	r7, [r3, #0]
 80075d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 831d 	beq.w	8007c14 <_dtoa_r+0xb34>
 80075da:	601e      	str	r6, [r3, #0]
 80075dc:	e31a      	b.n	8007c14 <_dtoa_r+0xb34>
 80075de:	07e2      	lsls	r2, r4, #31
 80075e0:	d505      	bpl.n	80075ee <_dtoa_r+0x50e>
 80075e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075e6:	f7f9 f827 	bl	8000638 <__aeabi_dmul>
 80075ea:	3601      	adds	r6, #1
 80075ec:	2301      	movs	r3, #1
 80075ee:	1064      	asrs	r4, r4, #1
 80075f0:	3508      	adds	r5, #8
 80075f2:	e73f      	b.n	8007474 <_dtoa_r+0x394>
 80075f4:	2602      	movs	r6, #2
 80075f6:	e742      	b.n	800747e <_dtoa_r+0x39e>
 80075f8:	9c07      	ldr	r4, [sp, #28]
 80075fa:	9704      	str	r7, [sp, #16]
 80075fc:	e761      	b.n	80074c2 <_dtoa_r+0x3e2>
 80075fe:	4b27      	ldr	r3, [pc, #156]	@ (800769c <_dtoa_r+0x5bc>)
 8007600:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007602:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007606:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800760a:	4454      	add	r4, sl
 800760c:	2900      	cmp	r1, #0
 800760e:	d053      	beq.n	80076b8 <_dtoa_r+0x5d8>
 8007610:	4928      	ldr	r1, [pc, #160]	@ (80076b4 <_dtoa_r+0x5d4>)
 8007612:	2000      	movs	r0, #0
 8007614:	f7f9 f93a 	bl	800088c <__aeabi_ddiv>
 8007618:	4633      	mov	r3, r6
 800761a:	462a      	mov	r2, r5
 800761c:	f7f8 fe54 	bl	80002c8 <__aeabi_dsub>
 8007620:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007624:	4656      	mov	r6, sl
 8007626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800762a:	f7f9 fab5 	bl	8000b98 <__aeabi_d2iz>
 800762e:	4605      	mov	r5, r0
 8007630:	f7f8 ff98 	bl	8000564 <__aeabi_i2d>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800763c:	f7f8 fe44 	bl	80002c8 <__aeabi_dsub>
 8007640:	3530      	adds	r5, #48	@ 0x30
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800764a:	f806 5b01 	strb.w	r5, [r6], #1
 800764e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007652:	f7f9 fa63 	bl	8000b1c <__aeabi_dcmplt>
 8007656:	2800      	cmp	r0, #0
 8007658:	d171      	bne.n	800773e <_dtoa_r+0x65e>
 800765a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800765e:	4911      	ldr	r1, [pc, #68]	@ (80076a4 <_dtoa_r+0x5c4>)
 8007660:	2000      	movs	r0, #0
 8007662:	f7f8 fe31 	bl	80002c8 <__aeabi_dsub>
 8007666:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800766a:	f7f9 fa57 	bl	8000b1c <__aeabi_dcmplt>
 800766e:	2800      	cmp	r0, #0
 8007670:	f040 8095 	bne.w	800779e <_dtoa_r+0x6be>
 8007674:	42a6      	cmp	r6, r4
 8007676:	f43f af50 	beq.w	800751a <_dtoa_r+0x43a>
 800767a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800767e:	4b0a      	ldr	r3, [pc, #40]	@ (80076a8 <_dtoa_r+0x5c8>)
 8007680:	2200      	movs	r2, #0
 8007682:	f7f8 ffd9 	bl	8000638 <__aeabi_dmul>
 8007686:	4b08      	ldr	r3, [pc, #32]	@ (80076a8 <_dtoa_r+0x5c8>)
 8007688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800768c:	2200      	movs	r2, #0
 800768e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007692:	f7f8 ffd1 	bl	8000638 <__aeabi_dmul>
 8007696:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800769a:	e7c4      	b.n	8007626 <_dtoa_r+0x546>
 800769c:	0800aa20 	.word	0x0800aa20
 80076a0:	0800a9f8 	.word	0x0800a9f8
 80076a4:	3ff00000 	.word	0x3ff00000
 80076a8:	40240000 	.word	0x40240000
 80076ac:	401c0000 	.word	0x401c0000
 80076b0:	40140000 	.word	0x40140000
 80076b4:	3fe00000 	.word	0x3fe00000
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	f7f8 ffbc 	bl	8000638 <__aeabi_dmul>
 80076c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80076c6:	4656      	mov	r6, sl
 80076c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076cc:	f7f9 fa64 	bl	8000b98 <__aeabi_d2iz>
 80076d0:	4605      	mov	r5, r0
 80076d2:	f7f8 ff47 	bl	8000564 <__aeabi_i2d>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076de:	f7f8 fdf3 	bl	80002c8 <__aeabi_dsub>
 80076e2:	3530      	adds	r5, #48	@ 0x30
 80076e4:	f806 5b01 	strb.w	r5, [r6], #1
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	42a6      	cmp	r6, r4
 80076ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	d124      	bne.n	8007742 <_dtoa_r+0x662>
 80076f8:	4bac      	ldr	r3, [pc, #688]	@ (80079ac <_dtoa_r+0x8cc>)
 80076fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076fe:	f7f8 fde5 	bl	80002cc <__adddf3>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800770a:	f7f9 fa25 	bl	8000b58 <__aeabi_dcmpgt>
 800770e:	2800      	cmp	r0, #0
 8007710:	d145      	bne.n	800779e <_dtoa_r+0x6be>
 8007712:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007716:	49a5      	ldr	r1, [pc, #660]	@ (80079ac <_dtoa_r+0x8cc>)
 8007718:	2000      	movs	r0, #0
 800771a:	f7f8 fdd5 	bl	80002c8 <__aeabi_dsub>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007726:	f7f9 f9f9 	bl	8000b1c <__aeabi_dcmplt>
 800772a:	2800      	cmp	r0, #0
 800772c:	f43f aef5 	beq.w	800751a <_dtoa_r+0x43a>
 8007730:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007732:	1e73      	subs	r3, r6, #1
 8007734:	9315      	str	r3, [sp, #84]	@ 0x54
 8007736:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800773a:	2b30      	cmp	r3, #48	@ 0x30
 800773c:	d0f8      	beq.n	8007730 <_dtoa_r+0x650>
 800773e:	9f04      	ldr	r7, [sp, #16]
 8007740:	e73e      	b.n	80075c0 <_dtoa_r+0x4e0>
 8007742:	4b9b      	ldr	r3, [pc, #620]	@ (80079b0 <_dtoa_r+0x8d0>)
 8007744:	f7f8 ff78 	bl	8000638 <__aeabi_dmul>
 8007748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800774c:	e7bc      	b.n	80076c8 <_dtoa_r+0x5e8>
 800774e:	d10c      	bne.n	800776a <_dtoa_r+0x68a>
 8007750:	4b98      	ldr	r3, [pc, #608]	@ (80079b4 <_dtoa_r+0x8d4>)
 8007752:	2200      	movs	r2, #0
 8007754:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007758:	f7f8 ff6e 	bl	8000638 <__aeabi_dmul>
 800775c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007760:	f7f9 f9f0 	bl	8000b44 <__aeabi_dcmpge>
 8007764:	2800      	cmp	r0, #0
 8007766:	f000 8157 	beq.w	8007a18 <_dtoa_r+0x938>
 800776a:	2400      	movs	r4, #0
 800776c:	4625      	mov	r5, r4
 800776e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007770:	43db      	mvns	r3, r3
 8007772:	9304      	str	r3, [sp, #16]
 8007774:	4656      	mov	r6, sl
 8007776:	2700      	movs	r7, #0
 8007778:	4621      	mov	r1, r4
 800777a:	4658      	mov	r0, fp
 800777c:	f000 fbb4 	bl	8007ee8 <_Bfree>
 8007780:	2d00      	cmp	r5, #0
 8007782:	d0dc      	beq.n	800773e <_dtoa_r+0x65e>
 8007784:	b12f      	cbz	r7, 8007792 <_dtoa_r+0x6b2>
 8007786:	42af      	cmp	r7, r5
 8007788:	d003      	beq.n	8007792 <_dtoa_r+0x6b2>
 800778a:	4639      	mov	r1, r7
 800778c:	4658      	mov	r0, fp
 800778e:	f000 fbab 	bl	8007ee8 <_Bfree>
 8007792:	4629      	mov	r1, r5
 8007794:	4658      	mov	r0, fp
 8007796:	f000 fba7 	bl	8007ee8 <_Bfree>
 800779a:	e7d0      	b.n	800773e <_dtoa_r+0x65e>
 800779c:	9704      	str	r7, [sp, #16]
 800779e:	4633      	mov	r3, r6
 80077a0:	461e      	mov	r6, r3
 80077a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077a6:	2a39      	cmp	r2, #57	@ 0x39
 80077a8:	d107      	bne.n	80077ba <_dtoa_r+0x6da>
 80077aa:	459a      	cmp	sl, r3
 80077ac:	d1f8      	bne.n	80077a0 <_dtoa_r+0x6c0>
 80077ae:	9a04      	ldr	r2, [sp, #16]
 80077b0:	3201      	adds	r2, #1
 80077b2:	9204      	str	r2, [sp, #16]
 80077b4:	2230      	movs	r2, #48	@ 0x30
 80077b6:	f88a 2000 	strb.w	r2, [sl]
 80077ba:	781a      	ldrb	r2, [r3, #0]
 80077bc:	3201      	adds	r2, #1
 80077be:	701a      	strb	r2, [r3, #0]
 80077c0:	e7bd      	b.n	800773e <_dtoa_r+0x65e>
 80077c2:	4b7b      	ldr	r3, [pc, #492]	@ (80079b0 <_dtoa_r+0x8d0>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	f7f8 ff37 	bl	8000638 <__aeabi_dmul>
 80077ca:	2200      	movs	r2, #0
 80077cc:	2300      	movs	r3, #0
 80077ce:	4604      	mov	r4, r0
 80077d0:	460d      	mov	r5, r1
 80077d2:	f7f9 f999 	bl	8000b08 <__aeabi_dcmpeq>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	f43f aebb 	beq.w	8007552 <_dtoa_r+0x472>
 80077dc:	e6f0      	b.n	80075c0 <_dtoa_r+0x4e0>
 80077de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80077e0:	2a00      	cmp	r2, #0
 80077e2:	f000 80db 	beq.w	800799c <_dtoa_r+0x8bc>
 80077e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077e8:	2a01      	cmp	r2, #1
 80077ea:	f300 80bf 	bgt.w	800796c <_dtoa_r+0x88c>
 80077ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	f000 80b7 	beq.w	8007964 <_dtoa_r+0x884>
 80077f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80077fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80077fc:	4646      	mov	r6, r8
 80077fe:	9a08      	ldr	r2, [sp, #32]
 8007800:	2101      	movs	r1, #1
 8007802:	441a      	add	r2, r3
 8007804:	4658      	mov	r0, fp
 8007806:	4498      	add	r8, r3
 8007808:	9208      	str	r2, [sp, #32]
 800780a:	f000 fc6b 	bl	80080e4 <__i2b>
 800780e:	4605      	mov	r5, r0
 8007810:	b15e      	cbz	r6, 800782a <_dtoa_r+0x74a>
 8007812:	9b08      	ldr	r3, [sp, #32]
 8007814:	2b00      	cmp	r3, #0
 8007816:	dd08      	ble.n	800782a <_dtoa_r+0x74a>
 8007818:	42b3      	cmp	r3, r6
 800781a:	9a08      	ldr	r2, [sp, #32]
 800781c:	bfa8      	it	ge
 800781e:	4633      	movge	r3, r6
 8007820:	eba8 0803 	sub.w	r8, r8, r3
 8007824:	1af6      	subs	r6, r6, r3
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	9308      	str	r3, [sp, #32]
 800782a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800782c:	b1f3      	cbz	r3, 800786c <_dtoa_r+0x78c>
 800782e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 80b7 	beq.w	80079a4 <_dtoa_r+0x8c4>
 8007836:	b18c      	cbz	r4, 800785c <_dtoa_r+0x77c>
 8007838:	4629      	mov	r1, r5
 800783a:	4622      	mov	r2, r4
 800783c:	4658      	mov	r0, fp
 800783e:	f000 fd11 	bl	8008264 <__pow5mult>
 8007842:	464a      	mov	r2, r9
 8007844:	4601      	mov	r1, r0
 8007846:	4605      	mov	r5, r0
 8007848:	4658      	mov	r0, fp
 800784a:	f000 fc61 	bl	8008110 <__multiply>
 800784e:	4649      	mov	r1, r9
 8007850:	9004      	str	r0, [sp, #16]
 8007852:	4658      	mov	r0, fp
 8007854:	f000 fb48 	bl	8007ee8 <_Bfree>
 8007858:	9b04      	ldr	r3, [sp, #16]
 800785a:	4699      	mov	r9, r3
 800785c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800785e:	1b1a      	subs	r2, r3, r4
 8007860:	d004      	beq.n	800786c <_dtoa_r+0x78c>
 8007862:	4649      	mov	r1, r9
 8007864:	4658      	mov	r0, fp
 8007866:	f000 fcfd 	bl	8008264 <__pow5mult>
 800786a:	4681      	mov	r9, r0
 800786c:	2101      	movs	r1, #1
 800786e:	4658      	mov	r0, fp
 8007870:	f000 fc38 	bl	80080e4 <__i2b>
 8007874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007876:	4604      	mov	r4, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 81cf 	beq.w	8007c1c <_dtoa_r+0xb3c>
 800787e:	461a      	mov	r2, r3
 8007880:	4601      	mov	r1, r0
 8007882:	4658      	mov	r0, fp
 8007884:	f000 fcee 	bl	8008264 <__pow5mult>
 8007888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800788a:	2b01      	cmp	r3, #1
 800788c:	4604      	mov	r4, r0
 800788e:	f300 8095 	bgt.w	80079bc <_dtoa_r+0x8dc>
 8007892:	9b02      	ldr	r3, [sp, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	f040 8087 	bne.w	80079a8 <_dtoa_r+0x8c8>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f040 8089 	bne.w	80079b8 <_dtoa_r+0x8d8>
 80078a6:	9b03      	ldr	r3, [sp, #12]
 80078a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078ac:	0d1b      	lsrs	r3, r3, #20
 80078ae:	051b      	lsls	r3, r3, #20
 80078b0:	b12b      	cbz	r3, 80078be <_dtoa_r+0x7de>
 80078b2:	9b08      	ldr	r3, [sp, #32]
 80078b4:	3301      	adds	r3, #1
 80078b6:	9308      	str	r3, [sp, #32]
 80078b8:	f108 0801 	add.w	r8, r8, #1
 80078bc:	2301      	movs	r3, #1
 80078be:	930a      	str	r3, [sp, #40]	@ 0x28
 80078c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 81b0 	beq.w	8007c28 <_dtoa_r+0xb48>
 80078c8:	6923      	ldr	r3, [r4, #16]
 80078ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078ce:	6918      	ldr	r0, [r3, #16]
 80078d0:	f000 fbbc 	bl	800804c <__hi0bits>
 80078d4:	f1c0 0020 	rsb	r0, r0, #32
 80078d8:	9b08      	ldr	r3, [sp, #32]
 80078da:	4418      	add	r0, r3
 80078dc:	f010 001f 	ands.w	r0, r0, #31
 80078e0:	d077      	beq.n	80079d2 <_dtoa_r+0x8f2>
 80078e2:	f1c0 0320 	rsb	r3, r0, #32
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	dd6b      	ble.n	80079c2 <_dtoa_r+0x8e2>
 80078ea:	9b08      	ldr	r3, [sp, #32]
 80078ec:	f1c0 001c 	rsb	r0, r0, #28
 80078f0:	4403      	add	r3, r0
 80078f2:	4480      	add	r8, r0
 80078f4:	4406      	add	r6, r0
 80078f6:	9308      	str	r3, [sp, #32]
 80078f8:	f1b8 0f00 	cmp.w	r8, #0
 80078fc:	dd05      	ble.n	800790a <_dtoa_r+0x82a>
 80078fe:	4649      	mov	r1, r9
 8007900:	4642      	mov	r2, r8
 8007902:	4658      	mov	r0, fp
 8007904:	f000 fd08 	bl	8008318 <__lshift>
 8007908:	4681      	mov	r9, r0
 800790a:	9b08      	ldr	r3, [sp, #32]
 800790c:	2b00      	cmp	r3, #0
 800790e:	dd05      	ble.n	800791c <_dtoa_r+0x83c>
 8007910:	4621      	mov	r1, r4
 8007912:	461a      	mov	r2, r3
 8007914:	4658      	mov	r0, fp
 8007916:	f000 fcff 	bl	8008318 <__lshift>
 800791a:	4604      	mov	r4, r0
 800791c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800791e:	2b00      	cmp	r3, #0
 8007920:	d059      	beq.n	80079d6 <_dtoa_r+0x8f6>
 8007922:	4621      	mov	r1, r4
 8007924:	4648      	mov	r0, r9
 8007926:	f000 fd63 	bl	80083f0 <__mcmp>
 800792a:	2800      	cmp	r0, #0
 800792c:	da53      	bge.n	80079d6 <_dtoa_r+0x8f6>
 800792e:	1e7b      	subs	r3, r7, #1
 8007930:	9304      	str	r3, [sp, #16]
 8007932:	4649      	mov	r1, r9
 8007934:	2300      	movs	r3, #0
 8007936:	220a      	movs	r2, #10
 8007938:	4658      	mov	r0, fp
 800793a:	f000 faf7 	bl	8007f2c <__multadd>
 800793e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007940:	4681      	mov	r9, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	f000 8172 	beq.w	8007c2c <_dtoa_r+0xb4c>
 8007948:	2300      	movs	r3, #0
 800794a:	4629      	mov	r1, r5
 800794c:	220a      	movs	r2, #10
 800794e:	4658      	mov	r0, fp
 8007950:	f000 faec 	bl	8007f2c <__multadd>
 8007954:	9b00      	ldr	r3, [sp, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	4605      	mov	r5, r0
 800795a:	dc67      	bgt.n	8007a2c <_dtoa_r+0x94c>
 800795c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800795e:	2b02      	cmp	r3, #2
 8007960:	dc41      	bgt.n	80079e6 <_dtoa_r+0x906>
 8007962:	e063      	b.n	8007a2c <_dtoa_r+0x94c>
 8007964:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007966:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800796a:	e746      	b.n	80077fa <_dtoa_r+0x71a>
 800796c:	9b07      	ldr	r3, [sp, #28]
 800796e:	1e5c      	subs	r4, r3, #1
 8007970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007972:	42a3      	cmp	r3, r4
 8007974:	bfbf      	itttt	lt
 8007976:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007978:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800797a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800797c:	1ae3      	sublt	r3, r4, r3
 800797e:	bfb4      	ite	lt
 8007980:	18d2      	addlt	r2, r2, r3
 8007982:	1b1c      	subge	r4, r3, r4
 8007984:	9b07      	ldr	r3, [sp, #28]
 8007986:	bfbc      	itt	lt
 8007988:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800798a:	2400      	movlt	r4, #0
 800798c:	2b00      	cmp	r3, #0
 800798e:	bfb5      	itete	lt
 8007990:	eba8 0603 	sublt.w	r6, r8, r3
 8007994:	9b07      	ldrge	r3, [sp, #28]
 8007996:	2300      	movlt	r3, #0
 8007998:	4646      	movge	r6, r8
 800799a:	e730      	b.n	80077fe <_dtoa_r+0x71e>
 800799c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800799e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80079a0:	4646      	mov	r6, r8
 80079a2:	e735      	b.n	8007810 <_dtoa_r+0x730>
 80079a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079a6:	e75c      	b.n	8007862 <_dtoa_r+0x782>
 80079a8:	2300      	movs	r3, #0
 80079aa:	e788      	b.n	80078be <_dtoa_r+0x7de>
 80079ac:	3fe00000 	.word	0x3fe00000
 80079b0:	40240000 	.word	0x40240000
 80079b4:	40140000 	.word	0x40140000
 80079b8:	9b02      	ldr	r3, [sp, #8]
 80079ba:	e780      	b.n	80078be <_dtoa_r+0x7de>
 80079bc:	2300      	movs	r3, #0
 80079be:	930a      	str	r3, [sp, #40]	@ 0x28
 80079c0:	e782      	b.n	80078c8 <_dtoa_r+0x7e8>
 80079c2:	d099      	beq.n	80078f8 <_dtoa_r+0x818>
 80079c4:	9a08      	ldr	r2, [sp, #32]
 80079c6:	331c      	adds	r3, #28
 80079c8:	441a      	add	r2, r3
 80079ca:	4498      	add	r8, r3
 80079cc:	441e      	add	r6, r3
 80079ce:	9208      	str	r2, [sp, #32]
 80079d0:	e792      	b.n	80078f8 <_dtoa_r+0x818>
 80079d2:	4603      	mov	r3, r0
 80079d4:	e7f6      	b.n	80079c4 <_dtoa_r+0x8e4>
 80079d6:	9b07      	ldr	r3, [sp, #28]
 80079d8:	9704      	str	r7, [sp, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	dc20      	bgt.n	8007a20 <_dtoa_r+0x940>
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	dd1e      	ble.n	8007a24 <_dtoa_r+0x944>
 80079e6:	9b00      	ldr	r3, [sp, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f47f aec0 	bne.w	800776e <_dtoa_r+0x68e>
 80079ee:	4621      	mov	r1, r4
 80079f0:	2205      	movs	r2, #5
 80079f2:	4658      	mov	r0, fp
 80079f4:	f000 fa9a 	bl	8007f2c <__multadd>
 80079f8:	4601      	mov	r1, r0
 80079fa:	4604      	mov	r4, r0
 80079fc:	4648      	mov	r0, r9
 80079fe:	f000 fcf7 	bl	80083f0 <__mcmp>
 8007a02:	2800      	cmp	r0, #0
 8007a04:	f77f aeb3 	ble.w	800776e <_dtoa_r+0x68e>
 8007a08:	4656      	mov	r6, sl
 8007a0a:	2331      	movs	r3, #49	@ 0x31
 8007a0c:	f806 3b01 	strb.w	r3, [r6], #1
 8007a10:	9b04      	ldr	r3, [sp, #16]
 8007a12:	3301      	adds	r3, #1
 8007a14:	9304      	str	r3, [sp, #16]
 8007a16:	e6ae      	b.n	8007776 <_dtoa_r+0x696>
 8007a18:	9c07      	ldr	r4, [sp, #28]
 8007a1a:	9704      	str	r7, [sp, #16]
 8007a1c:	4625      	mov	r5, r4
 8007a1e:	e7f3      	b.n	8007a08 <_dtoa_r+0x928>
 8007a20:	9b07      	ldr	r3, [sp, #28]
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	f000 8104 	beq.w	8007c34 <_dtoa_r+0xb54>
 8007a2c:	2e00      	cmp	r6, #0
 8007a2e:	dd05      	ble.n	8007a3c <_dtoa_r+0x95c>
 8007a30:	4629      	mov	r1, r5
 8007a32:	4632      	mov	r2, r6
 8007a34:	4658      	mov	r0, fp
 8007a36:	f000 fc6f 	bl	8008318 <__lshift>
 8007a3a:	4605      	mov	r5, r0
 8007a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d05a      	beq.n	8007af8 <_dtoa_r+0xa18>
 8007a42:	6869      	ldr	r1, [r5, #4]
 8007a44:	4658      	mov	r0, fp
 8007a46:	f000 fa0f 	bl	8007e68 <_Balloc>
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	b928      	cbnz	r0, 8007a5a <_dtoa_r+0x97a>
 8007a4e:	4b84      	ldr	r3, [pc, #528]	@ (8007c60 <_dtoa_r+0xb80>)
 8007a50:	4602      	mov	r2, r0
 8007a52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a56:	f7ff bb5a 	b.w	800710e <_dtoa_r+0x2e>
 8007a5a:	692a      	ldr	r2, [r5, #16]
 8007a5c:	3202      	adds	r2, #2
 8007a5e:	0092      	lsls	r2, r2, #2
 8007a60:	f105 010c 	add.w	r1, r5, #12
 8007a64:	300c      	adds	r0, #12
 8007a66:	f001 ff75 	bl	8009954 <memcpy>
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4658      	mov	r0, fp
 8007a70:	f000 fc52 	bl	8008318 <__lshift>
 8007a74:	f10a 0301 	add.w	r3, sl, #1
 8007a78:	9307      	str	r3, [sp, #28]
 8007a7a:	9b00      	ldr	r3, [sp, #0]
 8007a7c:	4453      	add	r3, sl
 8007a7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a80:	9b02      	ldr	r3, [sp, #8]
 8007a82:	f003 0301 	and.w	r3, r3, #1
 8007a86:	462f      	mov	r7, r5
 8007a88:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	9b07      	ldr	r3, [sp, #28]
 8007a8e:	4621      	mov	r1, r4
 8007a90:	3b01      	subs	r3, #1
 8007a92:	4648      	mov	r0, r9
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	f7ff fa9b 	bl	8006fd0 <quorem>
 8007a9a:	4639      	mov	r1, r7
 8007a9c:	9002      	str	r0, [sp, #8]
 8007a9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007aa2:	4648      	mov	r0, r9
 8007aa4:	f000 fca4 	bl	80083f0 <__mcmp>
 8007aa8:	462a      	mov	r2, r5
 8007aaa:	9008      	str	r0, [sp, #32]
 8007aac:	4621      	mov	r1, r4
 8007aae:	4658      	mov	r0, fp
 8007ab0:	f000 fcba 	bl	8008428 <__mdiff>
 8007ab4:	68c2      	ldr	r2, [r0, #12]
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	bb02      	cbnz	r2, 8007afc <_dtoa_r+0xa1c>
 8007aba:	4601      	mov	r1, r0
 8007abc:	4648      	mov	r0, r9
 8007abe:	f000 fc97 	bl	80083f0 <__mcmp>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	4658      	mov	r0, fp
 8007ac8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007aca:	f000 fa0d 	bl	8007ee8 <_Bfree>
 8007ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ad2:	9e07      	ldr	r6, [sp, #28]
 8007ad4:	ea43 0102 	orr.w	r1, r3, r2
 8007ad8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ada:	4319      	orrs	r1, r3
 8007adc:	d110      	bne.n	8007b00 <_dtoa_r+0xa20>
 8007ade:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ae2:	d029      	beq.n	8007b38 <_dtoa_r+0xa58>
 8007ae4:	9b08      	ldr	r3, [sp, #32]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	dd02      	ble.n	8007af0 <_dtoa_r+0xa10>
 8007aea:	9b02      	ldr	r3, [sp, #8]
 8007aec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007af0:	9b00      	ldr	r3, [sp, #0]
 8007af2:	f883 8000 	strb.w	r8, [r3]
 8007af6:	e63f      	b.n	8007778 <_dtoa_r+0x698>
 8007af8:	4628      	mov	r0, r5
 8007afa:	e7bb      	b.n	8007a74 <_dtoa_r+0x994>
 8007afc:	2201      	movs	r2, #1
 8007afe:	e7e1      	b.n	8007ac4 <_dtoa_r+0x9e4>
 8007b00:	9b08      	ldr	r3, [sp, #32]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	db04      	blt.n	8007b10 <_dtoa_r+0xa30>
 8007b06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	d120      	bne.n	8007b52 <_dtoa_r+0xa72>
 8007b10:	2a00      	cmp	r2, #0
 8007b12:	dded      	ble.n	8007af0 <_dtoa_r+0xa10>
 8007b14:	4649      	mov	r1, r9
 8007b16:	2201      	movs	r2, #1
 8007b18:	4658      	mov	r0, fp
 8007b1a:	f000 fbfd 	bl	8008318 <__lshift>
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4681      	mov	r9, r0
 8007b22:	f000 fc65 	bl	80083f0 <__mcmp>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	dc03      	bgt.n	8007b32 <_dtoa_r+0xa52>
 8007b2a:	d1e1      	bne.n	8007af0 <_dtoa_r+0xa10>
 8007b2c:	f018 0f01 	tst.w	r8, #1
 8007b30:	d0de      	beq.n	8007af0 <_dtoa_r+0xa10>
 8007b32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b36:	d1d8      	bne.n	8007aea <_dtoa_r+0xa0a>
 8007b38:	9a00      	ldr	r2, [sp, #0]
 8007b3a:	2339      	movs	r3, #57	@ 0x39
 8007b3c:	7013      	strb	r3, [r2, #0]
 8007b3e:	4633      	mov	r3, r6
 8007b40:	461e      	mov	r6, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b48:	2a39      	cmp	r2, #57	@ 0x39
 8007b4a:	d052      	beq.n	8007bf2 <_dtoa_r+0xb12>
 8007b4c:	3201      	adds	r2, #1
 8007b4e:	701a      	strb	r2, [r3, #0]
 8007b50:	e612      	b.n	8007778 <_dtoa_r+0x698>
 8007b52:	2a00      	cmp	r2, #0
 8007b54:	dd07      	ble.n	8007b66 <_dtoa_r+0xa86>
 8007b56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b5a:	d0ed      	beq.n	8007b38 <_dtoa_r+0xa58>
 8007b5c:	9a00      	ldr	r2, [sp, #0]
 8007b5e:	f108 0301 	add.w	r3, r8, #1
 8007b62:	7013      	strb	r3, [r2, #0]
 8007b64:	e608      	b.n	8007778 <_dtoa_r+0x698>
 8007b66:	9b07      	ldr	r3, [sp, #28]
 8007b68:	9a07      	ldr	r2, [sp, #28]
 8007b6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d028      	beq.n	8007bc6 <_dtoa_r+0xae6>
 8007b74:	4649      	mov	r1, r9
 8007b76:	2300      	movs	r3, #0
 8007b78:	220a      	movs	r2, #10
 8007b7a:	4658      	mov	r0, fp
 8007b7c:	f000 f9d6 	bl	8007f2c <__multadd>
 8007b80:	42af      	cmp	r7, r5
 8007b82:	4681      	mov	r9, r0
 8007b84:	f04f 0300 	mov.w	r3, #0
 8007b88:	f04f 020a 	mov.w	r2, #10
 8007b8c:	4639      	mov	r1, r7
 8007b8e:	4658      	mov	r0, fp
 8007b90:	d107      	bne.n	8007ba2 <_dtoa_r+0xac2>
 8007b92:	f000 f9cb 	bl	8007f2c <__multadd>
 8007b96:	4607      	mov	r7, r0
 8007b98:	4605      	mov	r5, r0
 8007b9a:	9b07      	ldr	r3, [sp, #28]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	9307      	str	r3, [sp, #28]
 8007ba0:	e774      	b.n	8007a8c <_dtoa_r+0x9ac>
 8007ba2:	f000 f9c3 	bl	8007f2c <__multadd>
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	4607      	mov	r7, r0
 8007baa:	2300      	movs	r3, #0
 8007bac:	220a      	movs	r2, #10
 8007bae:	4658      	mov	r0, fp
 8007bb0:	f000 f9bc 	bl	8007f2c <__multadd>
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	e7f0      	b.n	8007b9a <_dtoa_r+0xaba>
 8007bb8:	9b00      	ldr	r3, [sp, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bfcc      	ite	gt
 8007bbe:	461e      	movgt	r6, r3
 8007bc0:	2601      	movle	r6, #1
 8007bc2:	4456      	add	r6, sl
 8007bc4:	2700      	movs	r7, #0
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	2201      	movs	r2, #1
 8007bca:	4658      	mov	r0, fp
 8007bcc:	f000 fba4 	bl	8008318 <__lshift>
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	4681      	mov	r9, r0
 8007bd4:	f000 fc0c 	bl	80083f0 <__mcmp>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	dcb0      	bgt.n	8007b3e <_dtoa_r+0xa5e>
 8007bdc:	d102      	bne.n	8007be4 <_dtoa_r+0xb04>
 8007bde:	f018 0f01 	tst.w	r8, #1
 8007be2:	d1ac      	bne.n	8007b3e <_dtoa_r+0xa5e>
 8007be4:	4633      	mov	r3, r6
 8007be6:	461e      	mov	r6, r3
 8007be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bec:	2a30      	cmp	r2, #48	@ 0x30
 8007bee:	d0fa      	beq.n	8007be6 <_dtoa_r+0xb06>
 8007bf0:	e5c2      	b.n	8007778 <_dtoa_r+0x698>
 8007bf2:	459a      	cmp	sl, r3
 8007bf4:	d1a4      	bne.n	8007b40 <_dtoa_r+0xa60>
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	2331      	movs	r3, #49	@ 0x31
 8007bfe:	f88a 3000 	strb.w	r3, [sl]
 8007c02:	e5b9      	b.n	8007778 <_dtoa_r+0x698>
 8007c04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007c06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007c64 <_dtoa_r+0xb84>
 8007c0a:	b11b      	cbz	r3, 8007c14 <_dtoa_r+0xb34>
 8007c0c:	f10a 0308 	add.w	r3, sl, #8
 8007c10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	4650      	mov	r0, sl
 8007c16:	b019      	add	sp, #100	@ 0x64
 8007c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	f77f ae37 	ble.w	8007892 <_dtoa_r+0x7b2>
 8007c24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c28:	2001      	movs	r0, #1
 8007c2a:	e655      	b.n	80078d8 <_dtoa_r+0x7f8>
 8007c2c:	9b00      	ldr	r3, [sp, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f77f aed6 	ble.w	80079e0 <_dtoa_r+0x900>
 8007c34:	4656      	mov	r6, sl
 8007c36:	4621      	mov	r1, r4
 8007c38:	4648      	mov	r0, r9
 8007c3a:	f7ff f9c9 	bl	8006fd0 <quorem>
 8007c3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c42:	f806 8b01 	strb.w	r8, [r6], #1
 8007c46:	9b00      	ldr	r3, [sp, #0]
 8007c48:	eba6 020a 	sub.w	r2, r6, sl
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	ddb3      	ble.n	8007bb8 <_dtoa_r+0xad8>
 8007c50:	4649      	mov	r1, r9
 8007c52:	2300      	movs	r3, #0
 8007c54:	220a      	movs	r2, #10
 8007c56:	4658      	mov	r0, fp
 8007c58:	f000 f968 	bl	8007f2c <__multadd>
 8007c5c:	4681      	mov	r9, r0
 8007c5e:	e7ea      	b.n	8007c36 <_dtoa_r+0xb56>
 8007c60:	0800a97d 	.word	0x0800a97d
 8007c64:	0800a901 	.word	0x0800a901

08007c68 <_free_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4605      	mov	r5, r0
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	d041      	beq.n	8007cf4 <_free_r+0x8c>
 8007c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c74:	1f0c      	subs	r4, r1, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfb8      	it	lt
 8007c7a:	18e4      	addlt	r4, r4, r3
 8007c7c:	f000 f8e8 	bl	8007e50 <__malloc_lock>
 8007c80:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf8 <_free_r+0x90>)
 8007c82:	6813      	ldr	r3, [r2, #0]
 8007c84:	b933      	cbnz	r3, 8007c94 <_free_r+0x2c>
 8007c86:	6063      	str	r3, [r4, #4]
 8007c88:	6014      	str	r4, [r2, #0]
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c90:	f000 b8e4 	b.w	8007e5c <__malloc_unlock>
 8007c94:	42a3      	cmp	r3, r4
 8007c96:	d908      	bls.n	8007caa <_free_r+0x42>
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	1821      	adds	r1, r4, r0
 8007c9c:	428b      	cmp	r3, r1
 8007c9e:	bf01      	itttt	eq
 8007ca0:	6819      	ldreq	r1, [r3, #0]
 8007ca2:	685b      	ldreq	r3, [r3, #4]
 8007ca4:	1809      	addeq	r1, r1, r0
 8007ca6:	6021      	streq	r1, [r4, #0]
 8007ca8:	e7ed      	b.n	8007c86 <_free_r+0x1e>
 8007caa:	461a      	mov	r2, r3
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	b10b      	cbz	r3, 8007cb4 <_free_r+0x4c>
 8007cb0:	42a3      	cmp	r3, r4
 8007cb2:	d9fa      	bls.n	8007caa <_free_r+0x42>
 8007cb4:	6811      	ldr	r1, [r2, #0]
 8007cb6:	1850      	adds	r0, r2, r1
 8007cb8:	42a0      	cmp	r0, r4
 8007cba:	d10b      	bne.n	8007cd4 <_free_r+0x6c>
 8007cbc:	6820      	ldr	r0, [r4, #0]
 8007cbe:	4401      	add	r1, r0
 8007cc0:	1850      	adds	r0, r2, r1
 8007cc2:	4283      	cmp	r3, r0
 8007cc4:	6011      	str	r1, [r2, #0]
 8007cc6:	d1e0      	bne.n	8007c8a <_free_r+0x22>
 8007cc8:	6818      	ldr	r0, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	6053      	str	r3, [r2, #4]
 8007cce:	4408      	add	r0, r1
 8007cd0:	6010      	str	r0, [r2, #0]
 8007cd2:	e7da      	b.n	8007c8a <_free_r+0x22>
 8007cd4:	d902      	bls.n	8007cdc <_free_r+0x74>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	602b      	str	r3, [r5, #0]
 8007cda:	e7d6      	b.n	8007c8a <_free_r+0x22>
 8007cdc:	6820      	ldr	r0, [r4, #0]
 8007cde:	1821      	adds	r1, r4, r0
 8007ce0:	428b      	cmp	r3, r1
 8007ce2:	bf04      	itt	eq
 8007ce4:	6819      	ldreq	r1, [r3, #0]
 8007ce6:	685b      	ldreq	r3, [r3, #4]
 8007ce8:	6063      	str	r3, [r4, #4]
 8007cea:	bf04      	itt	eq
 8007cec:	1809      	addeq	r1, r1, r0
 8007cee:	6021      	streq	r1, [r4, #0]
 8007cf0:	6054      	str	r4, [r2, #4]
 8007cf2:	e7ca      	b.n	8007c8a <_free_r+0x22>
 8007cf4:	bd38      	pop	{r3, r4, r5, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000538 	.word	0x20000538

08007cfc <malloc>:
 8007cfc:	4b02      	ldr	r3, [pc, #8]	@ (8007d08 <malloc+0xc>)
 8007cfe:	4601      	mov	r1, r0
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	f000 b825 	b.w	8007d50 <_malloc_r>
 8007d06:	bf00      	nop
 8007d08:	20000018 	.word	0x20000018

08007d0c <sbrk_aligned>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8007d4c <sbrk_aligned+0x40>)
 8007d10:	460c      	mov	r4, r1
 8007d12:	6831      	ldr	r1, [r6, #0]
 8007d14:	4605      	mov	r5, r0
 8007d16:	b911      	cbnz	r1, 8007d1e <sbrk_aligned+0x12>
 8007d18:	f001 fe0c 	bl	8009934 <_sbrk_r>
 8007d1c:	6030      	str	r0, [r6, #0]
 8007d1e:	4621      	mov	r1, r4
 8007d20:	4628      	mov	r0, r5
 8007d22:	f001 fe07 	bl	8009934 <_sbrk_r>
 8007d26:	1c43      	adds	r3, r0, #1
 8007d28:	d103      	bne.n	8007d32 <sbrk_aligned+0x26>
 8007d2a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d2e:	4620      	mov	r0, r4
 8007d30:	bd70      	pop	{r4, r5, r6, pc}
 8007d32:	1cc4      	adds	r4, r0, #3
 8007d34:	f024 0403 	bic.w	r4, r4, #3
 8007d38:	42a0      	cmp	r0, r4
 8007d3a:	d0f8      	beq.n	8007d2e <sbrk_aligned+0x22>
 8007d3c:	1a21      	subs	r1, r4, r0
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f001 fdf8 	bl	8009934 <_sbrk_r>
 8007d44:	3001      	adds	r0, #1
 8007d46:	d1f2      	bne.n	8007d2e <sbrk_aligned+0x22>
 8007d48:	e7ef      	b.n	8007d2a <sbrk_aligned+0x1e>
 8007d4a:	bf00      	nop
 8007d4c:	20000534 	.word	0x20000534

08007d50 <_malloc_r>:
 8007d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d54:	1ccd      	adds	r5, r1, #3
 8007d56:	f025 0503 	bic.w	r5, r5, #3
 8007d5a:	3508      	adds	r5, #8
 8007d5c:	2d0c      	cmp	r5, #12
 8007d5e:	bf38      	it	cc
 8007d60:	250c      	movcc	r5, #12
 8007d62:	2d00      	cmp	r5, #0
 8007d64:	4606      	mov	r6, r0
 8007d66:	db01      	blt.n	8007d6c <_malloc_r+0x1c>
 8007d68:	42a9      	cmp	r1, r5
 8007d6a:	d904      	bls.n	8007d76 <_malloc_r+0x26>
 8007d6c:	230c      	movs	r3, #12
 8007d6e:	6033      	str	r3, [r6, #0]
 8007d70:	2000      	movs	r0, #0
 8007d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e4c <_malloc_r+0xfc>
 8007d7a:	f000 f869 	bl	8007e50 <__malloc_lock>
 8007d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d82:	461c      	mov	r4, r3
 8007d84:	bb44      	cbnz	r4, 8007dd8 <_malloc_r+0x88>
 8007d86:	4629      	mov	r1, r5
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f7ff ffbf 	bl	8007d0c <sbrk_aligned>
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	4604      	mov	r4, r0
 8007d92:	d158      	bne.n	8007e46 <_malloc_r+0xf6>
 8007d94:	f8d8 4000 	ldr.w	r4, [r8]
 8007d98:	4627      	mov	r7, r4
 8007d9a:	2f00      	cmp	r7, #0
 8007d9c:	d143      	bne.n	8007e26 <_malloc_r+0xd6>
 8007d9e:	2c00      	cmp	r4, #0
 8007da0:	d04b      	beq.n	8007e3a <_malloc_r+0xea>
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	4639      	mov	r1, r7
 8007da6:	4630      	mov	r0, r6
 8007da8:	eb04 0903 	add.w	r9, r4, r3
 8007dac:	f001 fdc2 	bl	8009934 <_sbrk_r>
 8007db0:	4581      	cmp	r9, r0
 8007db2:	d142      	bne.n	8007e3a <_malloc_r+0xea>
 8007db4:	6821      	ldr	r1, [r4, #0]
 8007db6:	1a6d      	subs	r5, r5, r1
 8007db8:	4629      	mov	r1, r5
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7ff ffa6 	bl	8007d0c <sbrk_aligned>
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	d03a      	beq.n	8007e3a <_malloc_r+0xea>
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	442b      	add	r3, r5
 8007dc8:	6023      	str	r3, [r4, #0]
 8007dca:	f8d8 3000 	ldr.w	r3, [r8]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	bb62      	cbnz	r2, 8007e2c <_malloc_r+0xdc>
 8007dd2:	f8c8 7000 	str.w	r7, [r8]
 8007dd6:	e00f      	b.n	8007df8 <_malloc_r+0xa8>
 8007dd8:	6822      	ldr	r2, [r4, #0]
 8007dda:	1b52      	subs	r2, r2, r5
 8007ddc:	d420      	bmi.n	8007e20 <_malloc_r+0xd0>
 8007dde:	2a0b      	cmp	r2, #11
 8007de0:	d917      	bls.n	8007e12 <_malloc_r+0xc2>
 8007de2:	1961      	adds	r1, r4, r5
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	6025      	str	r5, [r4, #0]
 8007de8:	bf18      	it	ne
 8007dea:	6059      	strne	r1, [r3, #4]
 8007dec:	6863      	ldr	r3, [r4, #4]
 8007dee:	bf08      	it	eq
 8007df0:	f8c8 1000 	streq.w	r1, [r8]
 8007df4:	5162      	str	r2, [r4, r5]
 8007df6:	604b      	str	r3, [r1, #4]
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f000 f82f 	bl	8007e5c <__malloc_unlock>
 8007dfe:	f104 000b 	add.w	r0, r4, #11
 8007e02:	1d23      	adds	r3, r4, #4
 8007e04:	f020 0007 	bic.w	r0, r0, #7
 8007e08:	1ac2      	subs	r2, r0, r3
 8007e0a:	bf1c      	itt	ne
 8007e0c:	1a1b      	subne	r3, r3, r0
 8007e0e:	50a3      	strne	r3, [r4, r2]
 8007e10:	e7af      	b.n	8007d72 <_malloc_r+0x22>
 8007e12:	6862      	ldr	r2, [r4, #4]
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	bf0c      	ite	eq
 8007e18:	f8c8 2000 	streq.w	r2, [r8]
 8007e1c:	605a      	strne	r2, [r3, #4]
 8007e1e:	e7eb      	b.n	8007df8 <_malloc_r+0xa8>
 8007e20:	4623      	mov	r3, r4
 8007e22:	6864      	ldr	r4, [r4, #4]
 8007e24:	e7ae      	b.n	8007d84 <_malloc_r+0x34>
 8007e26:	463c      	mov	r4, r7
 8007e28:	687f      	ldr	r7, [r7, #4]
 8007e2a:	e7b6      	b.n	8007d9a <_malloc_r+0x4a>
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	42a3      	cmp	r3, r4
 8007e32:	d1fb      	bne.n	8007e2c <_malloc_r+0xdc>
 8007e34:	2300      	movs	r3, #0
 8007e36:	6053      	str	r3, [r2, #4]
 8007e38:	e7de      	b.n	8007df8 <_malloc_r+0xa8>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	6033      	str	r3, [r6, #0]
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f000 f80c 	bl	8007e5c <__malloc_unlock>
 8007e44:	e794      	b.n	8007d70 <_malloc_r+0x20>
 8007e46:	6005      	str	r5, [r0, #0]
 8007e48:	e7d6      	b.n	8007df8 <_malloc_r+0xa8>
 8007e4a:	bf00      	nop
 8007e4c:	20000538 	.word	0x20000538

08007e50 <__malloc_lock>:
 8007e50:	4801      	ldr	r0, [pc, #4]	@ (8007e58 <__malloc_lock+0x8>)
 8007e52:	f7ff b8b4 	b.w	8006fbe <__retarget_lock_acquire_recursive>
 8007e56:	bf00      	nop
 8007e58:	20000530 	.word	0x20000530

08007e5c <__malloc_unlock>:
 8007e5c:	4801      	ldr	r0, [pc, #4]	@ (8007e64 <__malloc_unlock+0x8>)
 8007e5e:	f7ff b8af 	b.w	8006fc0 <__retarget_lock_release_recursive>
 8007e62:	bf00      	nop
 8007e64:	20000530 	.word	0x20000530

08007e68 <_Balloc>:
 8007e68:	b570      	push	{r4, r5, r6, lr}
 8007e6a:	69c6      	ldr	r6, [r0, #28]
 8007e6c:	4604      	mov	r4, r0
 8007e6e:	460d      	mov	r5, r1
 8007e70:	b976      	cbnz	r6, 8007e90 <_Balloc+0x28>
 8007e72:	2010      	movs	r0, #16
 8007e74:	f7ff ff42 	bl	8007cfc <malloc>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	61e0      	str	r0, [r4, #28]
 8007e7c:	b920      	cbnz	r0, 8007e88 <_Balloc+0x20>
 8007e7e:	4b18      	ldr	r3, [pc, #96]	@ (8007ee0 <_Balloc+0x78>)
 8007e80:	4818      	ldr	r0, [pc, #96]	@ (8007ee4 <_Balloc+0x7c>)
 8007e82:	216b      	movs	r1, #107	@ 0x6b
 8007e84:	f001 fd7c 	bl	8009980 <__assert_func>
 8007e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e8c:	6006      	str	r6, [r0, #0]
 8007e8e:	60c6      	str	r6, [r0, #12]
 8007e90:	69e6      	ldr	r6, [r4, #28]
 8007e92:	68f3      	ldr	r3, [r6, #12]
 8007e94:	b183      	cbz	r3, 8007eb8 <_Balloc+0x50>
 8007e96:	69e3      	ldr	r3, [r4, #28]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e9e:	b9b8      	cbnz	r0, 8007ed0 <_Balloc+0x68>
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ea6:	1d72      	adds	r2, r6, #5
 8007ea8:	0092      	lsls	r2, r2, #2
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f001 fd86 	bl	80099bc <_calloc_r>
 8007eb0:	b160      	cbz	r0, 8007ecc <_Balloc+0x64>
 8007eb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007eb6:	e00e      	b.n	8007ed6 <_Balloc+0x6e>
 8007eb8:	2221      	movs	r2, #33	@ 0x21
 8007eba:	2104      	movs	r1, #4
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f001 fd7d 	bl	80099bc <_calloc_r>
 8007ec2:	69e3      	ldr	r3, [r4, #28]
 8007ec4:	60f0      	str	r0, [r6, #12]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1e4      	bne.n	8007e96 <_Balloc+0x2e>
 8007ecc:	2000      	movs	r0, #0
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	6802      	ldr	r2, [r0, #0]
 8007ed2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007edc:	e7f7      	b.n	8007ece <_Balloc+0x66>
 8007ede:	bf00      	nop
 8007ee0:	0800a90e 	.word	0x0800a90e
 8007ee4:	0800a98e 	.word	0x0800a98e

08007ee8 <_Bfree>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	69c6      	ldr	r6, [r0, #28]
 8007eec:	4605      	mov	r5, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	b976      	cbnz	r6, 8007f10 <_Bfree+0x28>
 8007ef2:	2010      	movs	r0, #16
 8007ef4:	f7ff ff02 	bl	8007cfc <malloc>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	61e8      	str	r0, [r5, #28]
 8007efc:	b920      	cbnz	r0, 8007f08 <_Bfree+0x20>
 8007efe:	4b09      	ldr	r3, [pc, #36]	@ (8007f24 <_Bfree+0x3c>)
 8007f00:	4809      	ldr	r0, [pc, #36]	@ (8007f28 <_Bfree+0x40>)
 8007f02:	218f      	movs	r1, #143	@ 0x8f
 8007f04:	f001 fd3c 	bl	8009980 <__assert_func>
 8007f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f0c:	6006      	str	r6, [r0, #0]
 8007f0e:	60c6      	str	r6, [r0, #12]
 8007f10:	b13c      	cbz	r4, 8007f22 <_Bfree+0x3a>
 8007f12:	69eb      	ldr	r3, [r5, #28]
 8007f14:	6862      	ldr	r2, [r4, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f1c:	6021      	str	r1, [r4, #0]
 8007f1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	0800a90e 	.word	0x0800a90e
 8007f28:	0800a98e 	.word	0x0800a98e

08007f2c <__multadd>:
 8007f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f30:	690d      	ldr	r5, [r1, #16]
 8007f32:	4607      	mov	r7, r0
 8007f34:	460c      	mov	r4, r1
 8007f36:	461e      	mov	r6, r3
 8007f38:	f101 0c14 	add.w	ip, r1, #20
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	f8dc 3000 	ldr.w	r3, [ip]
 8007f42:	b299      	uxth	r1, r3
 8007f44:	fb02 6101 	mla	r1, r2, r1, r6
 8007f48:	0c1e      	lsrs	r6, r3, #16
 8007f4a:	0c0b      	lsrs	r3, r1, #16
 8007f4c:	fb02 3306 	mla	r3, r2, r6, r3
 8007f50:	b289      	uxth	r1, r1
 8007f52:	3001      	adds	r0, #1
 8007f54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f58:	4285      	cmp	r5, r0
 8007f5a:	f84c 1b04 	str.w	r1, [ip], #4
 8007f5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f62:	dcec      	bgt.n	8007f3e <__multadd+0x12>
 8007f64:	b30e      	cbz	r6, 8007faa <__multadd+0x7e>
 8007f66:	68a3      	ldr	r3, [r4, #8]
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	dc19      	bgt.n	8007fa0 <__multadd+0x74>
 8007f6c:	6861      	ldr	r1, [r4, #4]
 8007f6e:	4638      	mov	r0, r7
 8007f70:	3101      	adds	r1, #1
 8007f72:	f7ff ff79 	bl	8007e68 <_Balloc>
 8007f76:	4680      	mov	r8, r0
 8007f78:	b928      	cbnz	r0, 8007f86 <__multadd+0x5a>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb0 <__multadd+0x84>)
 8007f7e:	480d      	ldr	r0, [pc, #52]	@ (8007fb4 <__multadd+0x88>)
 8007f80:	21ba      	movs	r1, #186	@ 0xba
 8007f82:	f001 fcfd 	bl	8009980 <__assert_func>
 8007f86:	6922      	ldr	r2, [r4, #16]
 8007f88:	3202      	adds	r2, #2
 8007f8a:	f104 010c 	add.w	r1, r4, #12
 8007f8e:	0092      	lsls	r2, r2, #2
 8007f90:	300c      	adds	r0, #12
 8007f92:	f001 fcdf 	bl	8009954 <memcpy>
 8007f96:	4621      	mov	r1, r4
 8007f98:	4638      	mov	r0, r7
 8007f9a:	f7ff ffa5 	bl	8007ee8 <_Bfree>
 8007f9e:	4644      	mov	r4, r8
 8007fa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	615e      	str	r6, [r3, #20]
 8007fa8:	6125      	str	r5, [r4, #16]
 8007faa:	4620      	mov	r0, r4
 8007fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb0:	0800a97d 	.word	0x0800a97d
 8007fb4:	0800a98e 	.word	0x0800a98e

08007fb8 <__s2b>:
 8007fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	4615      	mov	r5, r2
 8007fc0:	461f      	mov	r7, r3
 8007fc2:	2209      	movs	r2, #9
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fcc:	2100      	movs	r1, #0
 8007fce:	2201      	movs	r2, #1
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	db09      	blt.n	8007fe8 <__s2b+0x30>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7ff ff47 	bl	8007e68 <_Balloc>
 8007fda:	b940      	cbnz	r0, 8007fee <__s2b+0x36>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	4b19      	ldr	r3, [pc, #100]	@ (8008044 <__s2b+0x8c>)
 8007fe0:	4819      	ldr	r0, [pc, #100]	@ (8008048 <__s2b+0x90>)
 8007fe2:	21d3      	movs	r1, #211	@ 0xd3
 8007fe4:	f001 fccc 	bl	8009980 <__assert_func>
 8007fe8:	0052      	lsls	r2, r2, #1
 8007fea:	3101      	adds	r1, #1
 8007fec:	e7f0      	b.n	8007fd0 <__s2b+0x18>
 8007fee:	9b08      	ldr	r3, [sp, #32]
 8007ff0:	6143      	str	r3, [r0, #20]
 8007ff2:	2d09      	cmp	r5, #9
 8007ff4:	f04f 0301 	mov.w	r3, #1
 8007ff8:	6103      	str	r3, [r0, #16]
 8007ffa:	dd16      	ble.n	800802a <__s2b+0x72>
 8007ffc:	f104 0909 	add.w	r9, r4, #9
 8008000:	46c8      	mov	r8, r9
 8008002:	442c      	add	r4, r5
 8008004:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008008:	4601      	mov	r1, r0
 800800a:	3b30      	subs	r3, #48	@ 0x30
 800800c:	220a      	movs	r2, #10
 800800e:	4630      	mov	r0, r6
 8008010:	f7ff ff8c 	bl	8007f2c <__multadd>
 8008014:	45a0      	cmp	r8, r4
 8008016:	d1f5      	bne.n	8008004 <__s2b+0x4c>
 8008018:	f1a5 0408 	sub.w	r4, r5, #8
 800801c:	444c      	add	r4, r9
 800801e:	1b2d      	subs	r5, r5, r4
 8008020:	1963      	adds	r3, r4, r5
 8008022:	42bb      	cmp	r3, r7
 8008024:	db04      	blt.n	8008030 <__s2b+0x78>
 8008026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800802a:	340a      	adds	r4, #10
 800802c:	2509      	movs	r5, #9
 800802e:	e7f6      	b.n	800801e <__s2b+0x66>
 8008030:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008034:	4601      	mov	r1, r0
 8008036:	3b30      	subs	r3, #48	@ 0x30
 8008038:	220a      	movs	r2, #10
 800803a:	4630      	mov	r0, r6
 800803c:	f7ff ff76 	bl	8007f2c <__multadd>
 8008040:	e7ee      	b.n	8008020 <__s2b+0x68>
 8008042:	bf00      	nop
 8008044:	0800a97d 	.word	0x0800a97d
 8008048:	0800a98e 	.word	0x0800a98e

0800804c <__hi0bits>:
 800804c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008050:	4603      	mov	r3, r0
 8008052:	bf36      	itet	cc
 8008054:	0403      	lslcc	r3, r0, #16
 8008056:	2000      	movcs	r0, #0
 8008058:	2010      	movcc	r0, #16
 800805a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800805e:	bf3c      	itt	cc
 8008060:	021b      	lslcc	r3, r3, #8
 8008062:	3008      	addcc	r0, #8
 8008064:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008068:	bf3c      	itt	cc
 800806a:	011b      	lslcc	r3, r3, #4
 800806c:	3004      	addcc	r0, #4
 800806e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008072:	bf3c      	itt	cc
 8008074:	009b      	lslcc	r3, r3, #2
 8008076:	3002      	addcc	r0, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	db05      	blt.n	8008088 <__hi0bits+0x3c>
 800807c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008080:	f100 0001 	add.w	r0, r0, #1
 8008084:	bf08      	it	eq
 8008086:	2020      	moveq	r0, #32
 8008088:	4770      	bx	lr

0800808a <__lo0bits>:
 800808a:	6803      	ldr	r3, [r0, #0]
 800808c:	4602      	mov	r2, r0
 800808e:	f013 0007 	ands.w	r0, r3, #7
 8008092:	d00b      	beq.n	80080ac <__lo0bits+0x22>
 8008094:	07d9      	lsls	r1, r3, #31
 8008096:	d421      	bmi.n	80080dc <__lo0bits+0x52>
 8008098:	0798      	lsls	r0, r3, #30
 800809a:	bf49      	itett	mi
 800809c:	085b      	lsrmi	r3, r3, #1
 800809e:	089b      	lsrpl	r3, r3, #2
 80080a0:	2001      	movmi	r0, #1
 80080a2:	6013      	strmi	r3, [r2, #0]
 80080a4:	bf5c      	itt	pl
 80080a6:	6013      	strpl	r3, [r2, #0]
 80080a8:	2002      	movpl	r0, #2
 80080aa:	4770      	bx	lr
 80080ac:	b299      	uxth	r1, r3
 80080ae:	b909      	cbnz	r1, 80080b4 <__lo0bits+0x2a>
 80080b0:	0c1b      	lsrs	r3, r3, #16
 80080b2:	2010      	movs	r0, #16
 80080b4:	b2d9      	uxtb	r1, r3
 80080b6:	b909      	cbnz	r1, 80080bc <__lo0bits+0x32>
 80080b8:	3008      	adds	r0, #8
 80080ba:	0a1b      	lsrs	r3, r3, #8
 80080bc:	0719      	lsls	r1, r3, #28
 80080be:	bf04      	itt	eq
 80080c0:	091b      	lsreq	r3, r3, #4
 80080c2:	3004      	addeq	r0, #4
 80080c4:	0799      	lsls	r1, r3, #30
 80080c6:	bf04      	itt	eq
 80080c8:	089b      	lsreq	r3, r3, #2
 80080ca:	3002      	addeq	r0, #2
 80080cc:	07d9      	lsls	r1, r3, #31
 80080ce:	d403      	bmi.n	80080d8 <__lo0bits+0x4e>
 80080d0:	085b      	lsrs	r3, r3, #1
 80080d2:	f100 0001 	add.w	r0, r0, #1
 80080d6:	d003      	beq.n	80080e0 <__lo0bits+0x56>
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	4770      	bx	lr
 80080dc:	2000      	movs	r0, #0
 80080de:	4770      	bx	lr
 80080e0:	2020      	movs	r0, #32
 80080e2:	4770      	bx	lr

080080e4 <__i2b>:
 80080e4:	b510      	push	{r4, lr}
 80080e6:	460c      	mov	r4, r1
 80080e8:	2101      	movs	r1, #1
 80080ea:	f7ff febd 	bl	8007e68 <_Balloc>
 80080ee:	4602      	mov	r2, r0
 80080f0:	b928      	cbnz	r0, 80080fe <__i2b+0x1a>
 80080f2:	4b05      	ldr	r3, [pc, #20]	@ (8008108 <__i2b+0x24>)
 80080f4:	4805      	ldr	r0, [pc, #20]	@ (800810c <__i2b+0x28>)
 80080f6:	f240 1145 	movw	r1, #325	@ 0x145
 80080fa:	f001 fc41 	bl	8009980 <__assert_func>
 80080fe:	2301      	movs	r3, #1
 8008100:	6144      	str	r4, [r0, #20]
 8008102:	6103      	str	r3, [r0, #16]
 8008104:	bd10      	pop	{r4, pc}
 8008106:	bf00      	nop
 8008108:	0800a97d 	.word	0x0800a97d
 800810c:	0800a98e 	.word	0x0800a98e

08008110 <__multiply>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	4614      	mov	r4, r2
 8008116:	690a      	ldr	r2, [r1, #16]
 8008118:	6923      	ldr	r3, [r4, #16]
 800811a:	429a      	cmp	r2, r3
 800811c:	bfa8      	it	ge
 800811e:	4623      	movge	r3, r4
 8008120:	460f      	mov	r7, r1
 8008122:	bfa4      	itt	ge
 8008124:	460c      	movge	r4, r1
 8008126:	461f      	movge	r7, r3
 8008128:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800812c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008130:	68a3      	ldr	r3, [r4, #8]
 8008132:	6861      	ldr	r1, [r4, #4]
 8008134:	eb0a 0609 	add.w	r6, sl, r9
 8008138:	42b3      	cmp	r3, r6
 800813a:	b085      	sub	sp, #20
 800813c:	bfb8      	it	lt
 800813e:	3101      	addlt	r1, #1
 8008140:	f7ff fe92 	bl	8007e68 <_Balloc>
 8008144:	b930      	cbnz	r0, 8008154 <__multiply+0x44>
 8008146:	4602      	mov	r2, r0
 8008148:	4b44      	ldr	r3, [pc, #272]	@ (800825c <__multiply+0x14c>)
 800814a:	4845      	ldr	r0, [pc, #276]	@ (8008260 <__multiply+0x150>)
 800814c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008150:	f001 fc16 	bl	8009980 <__assert_func>
 8008154:	f100 0514 	add.w	r5, r0, #20
 8008158:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800815c:	462b      	mov	r3, r5
 800815e:	2200      	movs	r2, #0
 8008160:	4543      	cmp	r3, r8
 8008162:	d321      	bcc.n	80081a8 <__multiply+0x98>
 8008164:	f107 0114 	add.w	r1, r7, #20
 8008168:	f104 0214 	add.w	r2, r4, #20
 800816c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008170:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008174:	9302      	str	r3, [sp, #8]
 8008176:	1b13      	subs	r3, r2, r4
 8008178:	3b15      	subs	r3, #21
 800817a:	f023 0303 	bic.w	r3, r3, #3
 800817e:	3304      	adds	r3, #4
 8008180:	f104 0715 	add.w	r7, r4, #21
 8008184:	42ba      	cmp	r2, r7
 8008186:	bf38      	it	cc
 8008188:	2304      	movcc	r3, #4
 800818a:	9301      	str	r3, [sp, #4]
 800818c:	9b02      	ldr	r3, [sp, #8]
 800818e:	9103      	str	r1, [sp, #12]
 8008190:	428b      	cmp	r3, r1
 8008192:	d80c      	bhi.n	80081ae <__multiply+0x9e>
 8008194:	2e00      	cmp	r6, #0
 8008196:	dd03      	ble.n	80081a0 <__multiply+0x90>
 8008198:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800819c:	2b00      	cmp	r3, #0
 800819e:	d05b      	beq.n	8008258 <__multiply+0x148>
 80081a0:	6106      	str	r6, [r0, #16]
 80081a2:	b005      	add	sp, #20
 80081a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a8:	f843 2b04 	str.w	r2, [r3], #4
 80081ac:	e7d8      	b.n	8008160 <__multiply+0x50>
 80081ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80081b2:	f1ba 0f00 	cmp.w	sl, #0
 80081b6:	d024      	beq.n	8008202 <__multiply+0xf2>
 80081b8:	f104 0e14 	add.w	lr, r4, #20
 80081bc:	46a9      	mov	r9, r5
 80081be:	f04f 0c00 	mov.w	ip, #0
 80081c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081c6:	f8d9 3000 	ldr.w	r3, [r9]
 80081ca:	fa1f fb87 	uxth.w	fp, r7
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80081d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80081d8:	f8d9 7000 	ldr.w	r7, [r9]
 80081dc:	4463      	add	r3, ip
 80081de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80081e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80081e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80081f0:	4572      	cmp	r2, lr
 80081f2:	f849 3b04 	str.w	r3, [r9], #4
 80081f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80081fa:	d8e2      	bhi.n	80081c2 <__multiply+0xb2>
 80081fc:	9b01      	ldr	r3, [sp, #4]
 80081fe:	f845 c003 	str.w	ip, [r5, r3]
 8008202:	9b03      	ldr	r3, [sp, #12]
 8008204:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008208:	3104      	adds	r1, #4
 800820a:	f1b9 0f00 	cmp.w	r9, #0
 800820e:	d021      	beq.n	8008254 <__multiply+0x144>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	f104 0c14 	add.w	ip, r4, #20
 8008216:	46ae      	mov	lr, r5
 8008218:	f04f 0a00 	mov.w	sl, #0
 800821c:	f8bc b000 	ldrh.w	fp, [ip]
 8008220:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008224:	fb09 770b 	mla	r7, r9, fp, r7
 8008228:	4457      	add	r7, sl
 800822a:	b29b      	uxth	r3, r3
 800822c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008230:	f84e 3b04 	str.w	r3, [lr], #4
 8008234:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008238:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800823c:	f8be 3000 	ldrh.w	r3, [lr]
 8008240:	fb09 330a 	mla	r3, r9, sl, r3
 8008244:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008248:	4562      	cmp	r2, ip
 800824a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800824e:	d8e5      	bhi.n	800821c <__multiply+0x10c>
 8008250:	9f01      	ldr	r7, [sp, #4]
 8008252:	51eb      	str	r3, [r5, r7]
 8008254:	3504      	adds	r5, #4
 8008256:	e799      	b.n	800818c <__multiply+0x7c>
 8008258:	3e01      	subs	r6, #1
 800825a:	e79b      	b.n	8008194 <__multiply+0x84>
 800825c:	0800a97d 	.word	0x0800a97d
 8008260:	0800a98e 	.word	0x0800a98e

08008264 <__pow5mult>:
 8008264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008268:	4615      	mov	r5, r2
 800826a:	f012 0203 	ands.w	r2, r2, #3
 800826e:	4607      	mov	r7, r0
 8008270:	460e      	mov	r6, r1
 8008272:	d007      	beq.n	8008284 <__pow5mult+0x20>
 8008274:	4c25      	ldr	r4, [pc, #148]	@ (800830c <__pow5mult+0xa8>)
 8008276:	3a01      	subs	r2, #1
 8008278:	2300      	movs	r3, #0
 800827a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800827e:	f7ff fe55 	bl	8007f2c <__multadd>
 8008282:	4606      	mov	r6, r0
 8008284:	10ad      	asrs	r5, r5, #2
 8008286:	d03d      	beq.n	8008304 <__pow5mult+0xa0>
 8008288:	69fc      	ldr	r4, [r7, #28]
 800828a:	b97c      	cbnz	r4, 80082ac <__pow5mult+0x48>
 800828c:	2010      	movs	r0, #16
 800828e:	f7ff fd35 	bl	8007cfc <malloc>
 8008292:	4602      	mov	r2, r0
 8008294:	61f8      	str	r0, [r7, #28]
 8008296:	b928      	cbnz	r0, 80082a4 <__pow5mult+0x40>
 8008298:	4b1d      	ldr	r3, [pc, #116]	@ (8008310 <__pow5mult+0xac>)
 800829a:	481e      	ldr	r0, [pc, #120]	@ (8008314 <__pow5mult+0xb0>)
 800829c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082a0:	f001 fb6e 	bl	8009980 <__assert_func>
 80082a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082a8:	6004      	str	r4, [r0, #0]
 80082aa:	60c4      	str	r4, [r0, #12]
 80082ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082b4:	b94c      	cbnz	r4, 80082ca <__pow5mult+0x66>
 80082b6:	f240 2171 	movw	r1, #625	@ 0x271
 80082ba:	4638      	mov	r0, r7
 80082bc:	f7ff ff12 	bl	80080e4 <__i2b>
 80082c0:	2300      	movs	r3, #0
 80082c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80082c6:	4604      	mov	r4, r0
 80082c8:	6003      	str	r3, [r0, #0]
 80082ca:	f04f 0900 	mov.w	r9, #0
 80082ce:	07eb      	lsls	r3, r5, #31
 80082d0:	d50a      	bpl.n	80082e8 <__pow5mult+0x84>
 80082d2:	4631      	mov	r1, r6
 80082d4:	4622      	mov	r2, r4
 80082d6:	4638      	mov	r0, r7
 80082d8:	f7ff ff1a 	bl	8008110 <__multiply>
 80082dc:	4631      	mov	r1, r6
 80082de:	4680      	mov	r8, r0
 80082e0:	4638      	mov	r0, r7
 80082e2:	f7ff fe01 	bl	8007ee8 <_Bfree>
 80082e6:	4646      	mov	r6, r8
 80082e8:	106d      	asrs	r5, r5, #1
 80082ea:	d00b      	beq.n	8008304 <__pow5mult+0xa0>
 80082ec:	6820      	ldr	r0, [r4, #0]
 80082ee:	b938      	cbnz	r0, 8008300 <__pow5mult+0x9c>
 80082f0:	4622      	mov	r2, r4
 80082f2:	4621      	mov	r1, r4
 80082f4:	4638      	mov	r0, r7
 80082f6:	f7ff ff0b 	bl	8008110 <__multiply>
 80082fa:	6020      	str	r0, [r4, #0]
 80082fc:	f8c0 9000 	str.w	r9, [r0]
 8008300:	4604      	mov	r4, r0
 8008302:	e7e4      	b.n	80082ce <__pow5mult+0x6a>
 8008304:	4630      	mov	r0, r6
 8008306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830a:	bf00      	nop
 800830c:	0800a9e8 	.word	0x0800a9e8
 8008310:	0800a90e 	.word	0x0800a90e
 8008314:	0800a98e 	.word	0x0800a98e

08008318 <__lshift>:
 8008318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800831c:	460c      	mov	r4, r1
 800831e:	6849      	ldr	r1, [r1, #4]
 8008320:	6923      	ldr	r3, [r4, #16]
 8008322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008326:	68a3      	ldr	r3, [r4, #8]
 8008328:	4607      	mov	r7, r0
 800832a:	4691      	mov	r9, r2
 800832c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008330:	f108 0601 	add.w	r6, r8, #1
 8008334:	42b3      	cmp	r3, r6
 8008336:	db0b      	blt.n	8008350 <__lshift+0x38>
 8008338:	4638      	mov	r0, r7
 800833a:	f7ff fd95 	bl	8007e68 <_Balloc>
 800833e:	4605      	mov	r5, r0
 8008340:	b948      	cbnz	r0, 8008356 <__lshift+0x3e>
 8008342:	4602      	mov	r2, r0
 8008344:	4b28      	ldr	r3, [pc, #160]	@ (80083e8 <__lshift+0xd0>)
 8008346:	4829      	ldr	r0, [pc, #164]	@ (80083ec <__lshift+0xd4>)
 8008348:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800834c:	f001 fb18 	bl	8009980 <__assert_func>
 8008350:	3101      	adds	r1, #1
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	e7ee      	b.n	8008334 <__lshift+0x1c>
 8008356:	2300      	movs	r3, #0
 8008358:	f100 0114 	add.w	r1, r0, #20
 800835c:	f100 0210 	add.w	r2, r0, #16
 8008360:	4618      	mov	r0, r3
 8008362:	4553      	cmp	r3, sl
 8008364:	db33      	blt.n	80083ce <__lshift+0xb6>
 8008366:	6920      	ldr	r0, [r4, #16]
 8008368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800836c:	f104 0314 	add.w	r3, r4, #20
 8008370:	f019 091f 	ands.w	r9, r9, #31
 8008374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800837c:	d02b      	beq.n	80083d6 <__lshift+0xbe>
 800837e:	f1c9 0e20 	rsb	lr, r9, #32
 8008382:	468a      	mov	sl, r1
 8008384:	2200      	movs	r2, #0
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	fa00 f009 	lsl.w	r0, r0, r9
 800838c:	4310      	orrs	r0, r2
 800838e:	f84a 0b04 	str.w	r0, [sl], #4
 8008392:	f853 2b04 	ldr.w	r2, [r3], #4
 8008396:	459c      	cmp	ip, r3
 8008398:	fa22 f20e 	lsr.w	r2, r2, lr
 800839c:	d8f3      	bhi.n	8008386 <__lshift+0x6e>
 800839e:	ebac 0304 	sub.w	r3, ip, r4
 80083a2:	3b15      	subs	r3, #21
 80083a4:	f023 0303 	bic.w	r3, r3, #3
 80083a8:	3304      	adds	r3, #4
 80083aa:	f104 0015 	add.w	r0, r4, #21
 80083ae:	4584      	cmp	ip, r0
 80083b0:	bf38      	it	cc
 80083b2:	2304      	movcc	r3, #4
 80083b4:	50ca      	str	r2, [r1, r3]
 80083b6:	b10a      	cbz	r2, 80083bc <__lshift+0xa4>
 80083b8:	f108 0602 	add.w	r6, r8, #2
 80083bc:	3e01      	subs	r6, #1
 80083be:	4638      	mov	r0, r7
 80083c0:	612e      	str	r6, [r5, #16]
 80083c2:	4621      	mov	r1, r4
 80083c4:	f7ff fd90 	bl	8007ee8 <_Bfree>
 80083c8:	4628      	mov	r0, r5
 80083ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80083d2:	3301      	adds	r3, #1
 80083d4:	e7c5      	b.n	8008362 <__lshift+0x4a>
 80083d6:	3904      	subs	r1, #4
 80083d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80083e0:	459c      	cmp	ip, r3
 80083e2:	d8f9      	bhi.n	80083d8 <__lshift+0xc0>
 80083e4:	e7ea      	b.n	80083bc <__lshift+0xa4>
 80083e6:	bf00      	nop
 80083e8:	0800a97d 	.word	0x0800a97d
 80083ec:	0800a98e 	.word	0x0800a98e

080083f0 <__mcmp>:
 80083f0:	690a      	ldr	r2, [r1, #16]
 80083f2:	4603      	mov	r3, r0
 80083f4:	6900      	ldr	r0, [r0, #16]
 80083f6:	1a80      	subs	r0, r0, r2
 80083f8:	b530      	push	{r4, r5, lr}
 80083fa:	d10e      	bne.n	800841a <__mcmp+0x2a>
 80083fc:	3314      	adds	r3, #20
 80083fe:	3114      	adds	r1, #20
 8008400:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008404:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008408:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800840c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008410:	4295      	cmp	r5, r2
 8008412:	d003      	beq.n	800841c <__mcmp+0x2c>
 8008414:	d205      	bcs.n	8008422 <__mcmp+0x32>
 8008416:	f04f 30ff 	mov.w	r0, #4294967295
 800841a:	bd30      	pop	{r4, r5, pc}
 800841c:	42a3      	cmp	r3, r4
 800841e:	d3f3      	bcc.n	8008408 <__mcmp+0x18>
 8008420:	e7fb      	b.n	800841a <__mcmp+0x2a>
 8008422:	2001      	movs	r0, #1
 8008424:	e7f9      	b.n	800841a <__mcmp+0x2a>
	...

08008428 <__mdiff>:
 8008428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	4689      	mov	r9, r1
 800842e:	4606      	mov	r6, r0
 8008430:	4611      	mov	r1, r2
 8008432:	4648      	mov	r0, r9
 8008434:	4614      	mov	r4, r2
 8008436:	f7ff ffdb 	bl	80083f0 <__mcmp>
 800843a:	1e05      	subs	r5, r0, #0
 800843c:	d112      	bne.n	8008464 <__mdiff+0x3c>
 800843e:	4629      	mov	r1, r5
 8008440:	4630      	mov	r0, r6
 8008442:	f7ff fd11 	bl	8007e68 <_Balloc>
 8008446:	4602      	mov	r2, r0
 8008448:	b928      	cbnz	r0, 8008456 <__mdiff+0x2e>
 800844a:	4b3f      	ldr	r3, [pc, #252]	@ (8008548 <__mdiff+0x120>)
 800844c:	f240 2137 	movw	r1, #567	@ 0x237
 8008450:	483e      	ldr	r0, [pc, #248]	@ (800854c <__mdiff+0x124>)
 8008452:	f001 fa95 	bl	8009980 <__assert_func>
 8008456:	2301      	movs	r3, #1
 8008458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800845c:	4610      	mov	r0, r2
 800845e:	b003      	add	sp, #12
 8008460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008464:	bfbc      	itt	lt
 8008466:	464b      	movlt	r3, r9
 8008468:	46a1      	movlt	r9, r4
 800846a:	4630      	mov	r0, r6
 800846c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008470:	bfba      	itte	lt
 8008472:	461c      	movlt	r4, r3
 8008474:	2501      	movlt	r5, #1
 8008476:	2500      	movge	r5, #0
 8008478:	f7ff fcf6 	bl	8007e68 <_Balloc>
 800847c:	4602      	mov	r2, r0
 800847e:	b918      	cbnz	r0, 8008488 <__mdiff+0x60>
 8008480:	4b31      	ldr	r3, [pc, #196]	@ (8008548 <__mdiff+0x120>)
 8008482:	f240 2145 	movw	r1, #581	@ 0x245
 8008486:	e7e3      	b.n	8008450 <__mdiff+0x28>
 8008488:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800848c:	6926      	ldr	r6, [r4, #16]
 800848e:	60c5      	str	r5, [r0, #12]
 8008490:	f109 0310 	add.w	r3, r9, #16
 8008494:	f109 0514 	add.w	r5, r9, #20
 8008498:	f104 0e14 	add.w	lr, r4, #20
 800849c:	f100 0b14 	add.w	fp, r0, #20
 80084a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	46d9      	mov	r9, fp
 80084ac:	f04f 0c00 	mov.w	ip, #0
 80084b0:	9b01      	ldr	r3, [sp, #4]
 80084b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	fa1f f38a 	uxth.w	r3, sl
 80084c0:	4619      	mov	r1, r3
 80084c2:	b283      	uxth	r3, r0
 80084c4:	1acb      	subs	r3, r1, r3
 80084c6:	0c00      	lsrs	r0, r0, #16
 80084c8:	4463      	add	r3, ip
 80084ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80084ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80084d8:	4576      	cmp	r6, lr
 80084da:	f849 3b04 	str.w	r3, [r9], #4
 80084de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80084e2:	d8e5      	bhi.n	80084b0 <__mdiff+0x88>
 80084e4:	1b33      	subs	r3, r6, r4
 80084e6:	3b15      	subs	r3, #21
 80084e8:	f023 0303 	bic.w	r3, r3, #3
 80084ec:	3415      	adds	r4, #21
 80084ee:	3304      	adds	r3, #4
 80084f0:	42a6      	cmp	r6, r4
 80084f2:	bf38      	it	cc
 80084f4:	2304      	movcc	r3, #4
 80084f6:	441d      	add	r5, r3
 80084f8:	445b      	add	r3, fp
 80084fa:	461e      	mov	r6, r3
 80084fc:	462c      	mov	r4, r5
 80084fe:	4544      	cmp	r4, r8
 8008500:	d30e      	bcc.n	8008520 <__mdiff+0xf8>
 8008502:	f108 0103 	add.w	r1, r8, #3
 8008506:	1b49      	subs	r1, r1, r5
 8008508:	f021 0103 	bic.w	r1, r1, #3
 800850c:	3d03      	subs	r5, #3
 800850e:	45a8      	cmp	r8, r5
 8008510:	bf38      	it	cc
 8008512:	2100      	movcc	r1, #0
 8008514:	440b      	add	r3, r1
 8008516:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800851a:	b191      	cbz	r1, 8008542 <__mdiff+0x11a>
 800851c:	6117      	str	r7, [r2, #16]
 800851e:	e79d      	b.n	800845c <__mdiff+0x34>
 8008520:	f854 1b04 	ldr.w	r1, [r4], #4
 8008524:	46e6      	mov	lr, ip
 8008526:	0c08      	lsrs	r0, r1, #16
 8008528:	fa1c fc81 	uxtah	ip, ip, r1
 800852c:	4471      	add	r1, lr
 800852e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008532:	b289      	uxth	r1, r1
 8008534:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008538:	f846 1b04 	str.w	r1, [r6], #4
 800853c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008540:	e7dd      	b.n	80084fe <__mdiff+0xd6>
 8008542:	3f01      	subs	r7, #1
 8008544:	e7e7      	b.n	8008516 <__mdiff+0xee>
 8008546:	bf00      	nop
 8008548:	0800a97d 	.word	0x0800a97d
 800854c:	0800a98e 	.word	0x0800a98e

08008550 <__ulp>:
 8008550:	b082      	sub	sp, #8
 8008552:	ed8d 0b00 	vstr	d0, [sp]
 8008556:	9a01      	ldr	r2, [sp, #4]
 8008558:	4b0f      	ldr	r3, [pc, #60]	@ (8008598 <__ulp+0x48>)
 800855a:	4013      	ands	r3, r2
 800855c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008560:	2b00      	cmp	r3, #0
 8008562:	dc08      	bgt.n	8008576 <__ulp+0x26>
 8008564:	425b      	negs	r3, r3
 8008566:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800856a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800856e:	da04      	bge.n	800857a <__ulp+0x2a>
 8008570:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008574:	4113      	asrs	r3, r2
 8008576:	2200      	movs	r2, #0
 8008578:	e008      	b.n	800858c <__ulp+0x3c>
 800857a:	f1a2 0314 	sub.w	r3, r2, #20
 800857e:	2b1e      	cmp	r3, #30
 8008580:	bfda      	itte	le
 8008582:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008586:	40da      	lsrle	r2, r3
 8008588:	2201      	movgt	r2, #1
 800858a:	2300      	movs	r3, #0
 800858c:	4619      	mov	r1, r3
 800858e:	4610      	mov	r0, r2
 8008590:	ec41 0b10 	vmov	d0, r0, r1
 8008594:	b002      	add	sp, #8
 8008596:	4770      	bx	lr
 8008598:	7ff00000 	.word	0x7ff00000

0800859c <__b2d>:
 800859c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a0:	6906      	ldr	r6, [r0, #16]
 80085a2:	f100 0814 	add.w	r8, r0, #20
 80085a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80085aa:	1f37      	subs	r7, r6, #4
 80085ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80085b0:	4610      	mov	r0, r2
 80085b2:	f7ff fd4b 	bl	800804c <__hi0bits>
 80085b6:	f1c0 0320 	rsb	r3, r0, #32
 80085ba:	280a      	cmp	r0, #10
 80085bc:	600b      	str	r3, [r1, #0]
 80085be:	491b      	ldr	r1, [pc, #108]	@ (800862c <__b2d+0x90>)
 80085c0:	dc15      	bgt.n	80085ee <__b2d+0x52>
 80085c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80085c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80085ca:	45b8      	cmp	r8, r7
 80085cc:	ea43 0501 	orr.w	r5, r3, r1
 80085d0:	bf34      	ite	cc
 80085d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80085d6:	2300      	movcs	r3, #0
 80085d8:	3015      	adds	r0, #21
 80085da:	fa02 f000 	lsl.w	r0, r2, r0
 80085de:	fa23 f30c 	lsr.w	r3, r3, ip
 80085e2:	4303      	orrs	r3, r0
 80085e4:	461c      	mov	r4, r3
 80085e6:	ec45 4b10 	vmov	d0, r4, r5
 80085ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ee:	45b8      	cmp	r8, r7
 80085f0:	bf3a      	itte	cc
 80085f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80085f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80085fa:	2300      	movcs	r3, #0
 80085fc:	380b      	subs	r0, #11
 80085fe:	d012      	beq.n	8008626 <__b2d+0x8a>
 8008600:	f1c0 0120 	rsb	r1, r0, #32
 8008604:	fa23 f401 	lsr.w	r4, r3, r1
 8008608:	4082      	lsls	r2, r0
 800860a:	4322      	orrs	r2, r4
 800860c:	4547      	cmp	r7, r8
 800860e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008612:	bf8c      	ite	hi
 8008614:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008618:	2200      	movls	r2, #0
 800861a:	4083      	lsls	r3, r0
 800861c:	40ca      	lsrs	r2, r1
 800861e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008622:	4313      	orrs	r3, r2
 8008624:	e7de      	b.n	80085e4 <__b2d+0x48>
 8008626:	ea42 0501 	orr.w	r5, r2, r1
 800862a:	e7db      	b.n	80085e4 <__b2d+0x48>
 800862c:	3ff00000 	.word	0x3ff00000

08008630 <__d2b>:
 8008630:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008634:	460f      	mov	r7, r1
 8008636:	2101      	movs	r1, #1
 8008638:	ec59 8b10 	vmov	r8, r9, d0
 800863c:	4616      	mov	r6, r2
 800863e:	f7ff fc13 	bl	8007e68 <_Balloc>
 8008642:	4604      	mov	r4, r0
 8008644:	b930      	cbnz	r0, 8008654 <__d2b+0x24>
 8008646:	4602      	mov	r2, r0
 8008648:	4b23      	ldr	r3, [pc, #140]	@ (80086d8 <__d2b+0xa8>)
 800864a:	4824      	ldr	r0, [pc, #144]	@ (80086dc <__d2b+0xac>)
 800864c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008650:	f001 f996 	bl	8009980 <__assert_func>
 8008654:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008658:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800865c:	b10d      	cbz	r5, 8008662 <__d2b+0x32>
 800865e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008662:	9301      	str	r3, [sp, #4]
 8008664:	f1b8 0300 	subs.w	r3, r8, #0
 8008668:	d023      	beq.n	80086b2 <__d2b+0x82>
 800866a:	4668      	mov	r0, sp
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	f7ff fd0c 	bl	800808a <__lo0bits>
 8008672:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008676:	b1d0      	cbz	r0, 80086ae <__d2b+0x7e>
 8008678:	f1c0 0320 	rsb	r3, r0, #32
 800867c:	fa02 f303 	lsl.w	r3, r2, r3
 8008680:	430b      	orrs	r3, r1
 8008682:	40c2      	lsrs	r2, r0
 8008684:	6163      	str	r3, [r4, #20]
 8008686:	9201      	str	r2, [sp, #4]
 8008688:	9b01      	ldr	r3, [sp, #4]
 800868a:	61a3      	str	r3, [r4, #24]
 800868c:	2b00      	cmp	r3, #0
 800868e:	bf0c      	ite	eq
 8008690:	2201      	moveq	r2, #1
 8008692:	2202      	movne	r2, #2
 8008694:	6122      	str	r2, [r4, #16]
 8008696:	b1a5      	cbz	r5, 80086c2 <__d2b+0x92>
 8008698:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800869c:	4405      	add	r5, r0
 800869e:	603d      	str	r5, [r7, #0]
 80086a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086a4:	6030      	str	r0, [r6, #0]
 80086a6:	4620      	mov	r0, r4
 80086a8:	b003      	add	sp, #12
 80086aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086ae:	6161      	str	r1, [r4, #20]
 80086b0:	e7ea      	b.n	8008688 <__d2b+0x58>
 80086b2:	a801      	add	r0, sp, #4
 80086b4:	f7ff fce9 	bl	800808a <__lo0bits>
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	6163      	str	r3, [r4, #20]
 80086bc:	3020      	adds	r0, #32
 80086be:	2201      	movs	r2, #1
 80086c0:	e7e8      	b.n	8008694 <__d2b+0x64>
 80086c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086ca:	6038      	str	r0, [r7, #0]
 80086cc:	6918      	ldr	r0, [r3, #16]
 80086ce:	f7ff fcbd 	bl	800804c <__hi0bits>
 80086d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086d6:	e7e5      	b.n	80086a4 <__d2b+0x74>
 80086d8:	0800a97d 	.word	0x0800a97d
 80086dc:	0800a98e 	.word	0x0800a98e

080086e0 <__ratio>:
 80086e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	b085      	sub	sp, #20
 80086e6:	e9cd 1000 	strd	r1, r0, [sp]
 80086ea:	a902      	add	r1, sp, #8
 80086ec:	f7ff ff56 	bl	800859c <__b2d>
 80086f0:	9800      	ldr	r0, [sp, #0]
 80086f2:	a903      	add	r1, sp, #12
 80086f4:	ec55 4b10 	vmov	r4, r5, d0
 80086f8:	f7ff ff50 	bl	800859c <__b2d>
 80086fc:	9b01      	ldr	r3, [sp, #4]
 80086fe:	6919      	ldr	r1, [r3, #16]
 8008700:	9b00      	ldr	r3, [sp, #0]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	1ac9      	subs	r1, r1, r3
 8008706:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800870a:	1a9b      	subs	r3, r3, r2
 800870c:	ec5b ab10 	vmov	sl, fp, d0
 8008710:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008714:	2b00      	cmp	r3, #0
 8008716:	bfce      	itee	gt
 8008718:	462a      	movgt	r2, r5
 800871a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800871e:	465a      	movle	r2, fp
 8008720:	462f      	mov	r7, r5
 8008722:	46d9      	mov	r9, fp
 8008724:	bfcc      	ite	gt
 8008726:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800872a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800872e:	464b      	mov	r3, r9
 8008730:	4652      	mov	r2, sl
 8008732:	4620      	mov	r0, r4
 8008734:	4639      	mov	r1, r7
 8008736:	f7f8 f8a9 	bl	800088c <__aeabi_ddiv>
 800873a:	ec41 0b10 	vmov	d0, r0, r1
 800873e:	b005      	add	sp, #20
 8008740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008744 <__copybits>:
 8008744:	3901      	subs	r1, #1
 8008746:	b570      	push	{r4, r5, r6, lr}
 8008748:	1149      	asrs	r1, r1, #5
 800874a:	6914      	ldr	r4, [r2, #16]
 800874c:	3101      	adds	r1, #1
 800874e:	f102 0314 	add.w	r3, r2, #20
 8008752:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008756:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800875a:	1f05      	subs	r5, r0, #4
 800875c:	42a3      	cmp	r3, r4
 800875e:	d30c      	bcc.n	800877a <__copybits+0x36>
 8008760:	1aa3      	subs	r3, r4, r2
 8008762:	3b11      	subs	r3, #17
 8008764:	f023 0303 	bic.w	r3, r3, #3
 8008768:	3211      	adds	r2, #17
 800876a:	42a2      	cmp	r2, r4
 800876c:	bf88      	it	hi
 800876e:	2300      	movhi	r3, #0
 8008770:	4418      	add	r0, r3
 8008772:	2300      	movs	r3, #0
 8008774:	4288      	cmp	r0, r1
 8008776:	d305      	bcc.n	8008784 <__copybits+0x40>
 8008778:	bd70      	pop	{r4, r5, r6, pc}
 800877a:	f853 6b04 	ldr.w	r6, [r3], #4
 800877e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008782:	e7eb      	b.n	800875c <__copybits+0x18>
 8008784:	f840 3b04 	str.w	r3, [r0], #4
 8008788:	e7f4      	b.n	8008774 <__copybits+0x30>

0800878a <__any_on>:
 800878a:	f100 0214 	add.w	r2, r0, #20
 800878e:	6900      	ldr	r0, [r0, #16]
 8008790:	114b      	asrs	r3, r1, #5
 8008792:	4298      	cmp	r0, r3
 8008794:	b510      	push	{r4, lr}
 8008796:	db11      	blt.n	80087bc <__any_on+0x32>
 8008798:	dd0a      	ble.n	80087b0 <__any_on+0x26>
 800879a:	f011 011f 	ands.w	r1, r1, #31
 800879e:	d007      	beq.n	80087b0 <__any_on+0x26>
 80087a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80087a4:	fa24 f001 	lsr.w	r0, r4, r1
 80087a8:	fa00 f101 	lsl.w	r1, r0, r1
 80087ac:	428c      	cmp	r4, r1
 80087ae:	d10b      	bne.n	80087c8 <__any_on+0x3e>
 80087b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d803      	bhi.n	80087c0 <__any_on+0x36>
 80087b8:	2000      	movs	r0, #0
 80087ba:	bd10      	pop	{r4, pc}
 80087bc:	4603      	mov	r3, r0
 80087be:	e7f7      	b.n	80087b0 <__any_on+0x26>
 80087c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087c4:	2900      	cmp	r1, #0
 80087c6:	d0f5      	beq.n	80087b4 <__any_on+0x2a>
 80087c8:	2001      	movs	r0, #1
 80087ca:	e7f6      	b.n	80087ba <__any_on+0x30>

080087cc <sulp>:
 80087cc:	b570      	push	{r4, r5, r6, lr}
 80087ce:	4604      	mov	r4, r0
 80087d0:	460d      	mov	r5, r1
 80087d2:	ec45 4b10 	vmov	d0, r4, r5
 80087d6:	4616      	mov	r6, r2
 80087d8:	f7ff feba 	bl	8008550 <__ulp>
 80087dc:	ec51 0b10 	vmov	r0, r1, d0
 80087e0:	b17e      	cbz	r6, 8008802 <sulp+0x36>
 80087e2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80087e6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	dd09      	ble.n	8008802 <sulp+0x36>
 80087ee:	051b      	lsls	r3, r3, #20
 80087f0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80087f4:	2400      	movs	r4, #0
 80087f6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80087fa:	4622      	mov	r2, r4
 80087fc:	462b      	mov	r3, r5
 80087fe:	f7f7 ff1b 	bl	8000638 <__aeabi_dmul>
 8008802:	ec41 0b10 	vmov	d0, r0, r1
 8008806:	bd70      	pop	{r4, r5, r6, pc}

08008808 <_strtod_l>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	b09f      	sub	sp, #124	@ 0x7c
 800880e:	460c      	mov	r4, r1
 8008810:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008812:	2200      	movs	r2, #0
 8008814:	921a      	str	r2, [sp, #104]	@ 0x68
 8008816:	9005      	str	r0, [sp, #20]
 8008818:	f04f 0a00 	mov.w	sl, #0
 800881c:	f04f 0b00 	mov.w	fp, #0
 8008820:	460a      	mov	r2, r1
 8008822:	9219      	str	r2, [sp, #100]	@ 0x64
 8008824:	7811      	ldrb	r1, [r2, #0]
 8008826:	292b      	cmp	r1, #43	@ 0x2b
 8008828:	d04a      	beq.n	80088c0 <_strtod_l+0xb8>
 800882a:	d838      	bhi.n	800889e <_strtod_l+0x96>
 800882c:	290d      	cmp	r1, #13
 800882e:	d832      	bhi.n	8008896 <_strtod_l+0x8e>
 8008830:	2908      	cmp	r1, #8
 8008832:	d832      	bhi.n	800889a <_strtod_l+0x92>
 8008834:	2900      	cmp	r1, #0
 8008836:	d03b      	beq.n	80088b0 <_strtod_l+0xa8>
 8008838:	2200      	movs	r2, #0
 800883a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800883c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800883e:	782a      	ldrb	r2, [r5, #0]
 8008840:	2a30      	cmp	r2, #48	@ 0x30
 8008842:	f040 80b3 	bne.w	80089ac <_strtod_l+0x1a4>
 8008846:	786a      	ldrb	r2, [r5, #1]
 8008848:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800884c:	2a58      	cmp	r2, #88	@ 0x58
 800884e:	d16e      	bne.n	800892e <_strtod_l+0x126>
 8008850:	9302      	str	r3, [sp, #8]
 8008852:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008854:	9301      	str	r3, [sp, #4]
 8008856:	ab1a      	add	r3, sp, #104	@ 0x68
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	4a8e      	ldr	r2, [pc, #568]	@ (8008a94 <_strtod_l+0x28c>)
 800885c:	9805      	ldr	r0, [sp, #20]
 800885e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008860:	a919      	add	r1, sp, #100	@ 0x64
 8008862:	f001 f927 	bl	8009ab4 <__gethex>
 8008866:	f010 060f 	ands.w	r6, r0, #15
 800886a:	4604      	mov	r4, r0
 800886c:	d005      	beq.n	800887a <_strtod_l+0x72>
 800886e:	2e06      	cmp	r6, #6
 8008870:	d128      	bne.n	80088c4 <_strtod_l+0xbc>
 8008872:	3501      	adds	r5, #1
 8008874:	2300      	movs	r3, #0
 8008876:	9519      	str	r5, [sp, #100]	@ 0x64
 8008878:	930b      	str	r3, [sp, #44]	@ 0x2c
 800887a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800887c:	2b00      	cmp	r3, #0
 800887e:	f040 858e 	bne.w	800939e <_strtod_l+0xb96>
 8008882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008884:	b1cb      	cbz	r3, 80088ba <_strtod_l+0xb2>
 8008886:	4652      	mov	r2, sl
 8008888:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800888c:	ec43 2b10 	vmov	d0, r2, r3
 8008890:	b01f      	add	sp, #124	@ 0x7c
 8008892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008896:	2920      	cmp	r1, #32
 8008898:	d1ce      	bne.n	8008838 <_strtod_l+0x30>
 800889a:	3201      	adds	r2, #1
 800889c:	e7c1      	b.n	8008822 <_strtod_l+0x1a>
 800889e:	292d      	cmp	r1, #45	@ 0x2d
 80088a0:	d1ca      	bne.n	8008838 <_strtod_l+0x30>
 80088a2:	2101      	movs	r1, #1
 80088a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80088a6:	1c51      	adds	r1, r2, #1
 80088a8:	9119      	str	r1, [sp, #100]	@ 0x64
 80088aa:	7852      	ldrb	r2, [r2, #1]
 80088ac:	2a00      	cmp	r2, #0
 80088ae:	d1c5      	bne.n	800883c <_strtod_l+0x34>
 80088b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80088b2:	9419      	str	r4, [sp, #100]	@ 0x64
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f040 8570 	bne.w	800939a <_strtod_l+0xb92>
 80088ba:	4652      	mov	r2, sl
 80088bc:	465b      	mov	r3, fp
 80088be:	e7e5      	b.n	800888c <_strtod_l+0x84>
 80088c0:	2100      	movs	r1, #0
 80088c2:	e7ef      	b.n	80088a4 <_strtod_l+0x9c>
 80088c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80088c6:	b13a      	cbz	r2, 80088d8 <_strtod_l+0xd0>
 80088c8:	2135      	movs	r1, #53	@ 0x35
 80088ca:	a81c      	add	r0, sp, #112	@ 0x70
 80088cc:	f7ff ff3a 	bl	8008744 <__copybits>
 80088d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088d2:	9805      	ldr	r0, [sp, #20]
 80088d4:	f7ff fb08 	bl	8007ee8 <_Bfree>
 80088d8:	3e01      	subs	r6, #1
 80088da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80088dc:	2e04      	cmp	r6, #4
 80088de:	d806      	bhi.n	80088ee <_strtod_l+0xe6>
 80088e0:	e8df f006 	tbb	[pc, r6]
 80088e4:	201d0314 	.word	0x201d0314
 80088e8:	14          	.byte	0x14
 80088e9:	00          	.byte	0x00
 80088ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80088ee:	05e1      	lsls	r1, r4, #23
 80088f0:	bf48      	it	mi
 80088f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80088f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088fa:	0d1b      	lsrs	r3, r3, #20
 80088fc:	051b      	lsls	r3, r3, #20
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1bb      	bne.n	800887a <_strtod_l+0x72>
 8008902:	f7fe fb31 	bl	8006f68 <__errno>
 8008906:	2322      	movs	r3, #34	@ 0x22
 8008908:	6003      	str	r3, [r0, #0]
 800890a:	e7b6      	b.n	800887a <_strtod_l+0x72>
 800890c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008910:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008914:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008918:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800891c:	e7e7      	b.n	80088ee <_strtod_l+0xe6>
 800891e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008a9c <_strtod_l+0x294>
 8008922:	e7e4      	b.n	80088ee <_strtod_l+0xe6>
 8008924:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008928:	f04f 3aff 	mov.w	sl, #4294967295
 800892c:	e7df      	b.n	80088ee <_strtod_l+0xe6>
 800892e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008930:	1c5a      	adds	r2, r3, #1
 8008932:	9219      	str	r2, [sp, #100]	@ 0x64
 8008934:	785b      	ldrb	r3, [r3, #1]
 8008936:	2b30      	cmp	r3, #48	@ 0x30
 8008938:	d0f9      	beq.n	800892e <_strtod_l+0x126>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d09d      	beq.n	800887a <_strtod_l+0x72>
 800893e:	2301      	movs	r3, #1
 8008940:	9309      	str	r3, [sp, #36]	@ 0x24
 8008942:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008944:	930c      	str	r3, [sp, #48]	@ 0x30
 8008946:	2300      	movs	r3, #0
 8008948:	9308      	str	r3, [sp, #32]
 800894a:	930a      	str	r3, [sp, #40]	@ 0x28
 800894c:	461f      	mov	r7, r3
 800894e:	220a      	movs	r2, #10
 8008950:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008952:	7805      	ldrb	r5, [r0, #0]
 8008954:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008958:	b2d9      	uxtb	r1, r3
 800895a:	2909      	cmp	r1, #9
 800895c:	d928      	bls.n	80089b0 <_strtod_l+0x1a8>
 800895e:	494e      	ldr	r1, [pc, #312]	@ (8008a98 <_strtod_l+0x290>)
 8008960:	2201      	movs	r2, #1
 8008962:	f000 ffd5 	bl	8009910 <strncmp>
 8008966:	2800      	cmp	r0, #0
 8008968:	d032      	beq.n	80089d0 <_strtod_l+0x1c8>
 800896a:	2000      	movs	r0, #0
 800896c:	462a      	mov	r2, r5
 800896e:	4681      	mov	r9, r0
 8008970:	463d      	mov	r5, r7
 8008972:	4603      	mov	r3, r0
 8008974:	2a65      	cmp	r2, #101	@ 0x65
 8008976:	d001      	beq.n	800897c <_strtod_l+0x174>
 8008978:	2a45      	cmp	r2, #69	@ 0x45
 800897a:	d114      	bne.n	80089a6 <_strtod_l+0x19e>
 800897c:	b91d      	cbnz	r5, 8008986 <_strtod_l+0x17e>
 800897e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008980:	4302      	orrs	r2, r0
 8008982:	d095      	beq.n	80088b0 <_strtod_l+0xa8>
 8008984:	2500      	movs	r5, #0
 8008986:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008988:	1c62      	adds	r2, r4, #1
 800898a:	9219      	str	r2, [sp, #100]	@ 0x64
 800898c:	7862      	ldrb	r2, [r4, #1]
 800898e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008990:	d077      	beq.n	8008a82 <_strtod_l+0x27a>
 8008992:	2a2d      	cmp	r2, #45	@ 0x2d
 8008994:	d07b      	beq.n	8008a8e <_strtod_l+0x286>
 8008996:	f04f 0c00 	mov.w	ip, #0
 800899a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800899e:	2909      	cmp	r1, #9
 80089a0:	f240 8082 	bls.w	8008aa8 <_strtod_l+0x2a0>
 80089a4:	9419      	str	r4, [sp, #100]	@ 0x64
 80089a6:	f04f 0800 	mov.w	r8, #0
 80089aa:	e0a2      	b.n	8008af2 <_strtod_l+0x2ea>
 80089ac:	2300      	movs	r3, #0
 80089ae:	e7c7      	b.n	8008940 <_strtod_l+0x138>
 80089b0:	2f08      	cmp	r7, #8
 80089b2:	bfd5      	itete	le
 80089b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80089b6:	9908      	ldrgt	r1, [sp, #32]
 80089b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80089bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80089c0:	f100 0001 	add.w	r0, r0, #1
 80089c4:	bfd4      	ite	le
 80089c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80089c8:	9308      	strgt	r3, [sp, #32]
 80089ca:	3701      	adds	r7, #1
 80089cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80089ce:	e7bf      	b.n	8008950 <_strtod_l+0x148>
 80089d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80089d6:	785a      	ldrb	r2, [r3, #1]
 80089d8:	b37f      	cbz	r7, 8008a3a <_strtod_l+0x232>
 80089da:	4681      	mov	r9, r0
 80089dc:	463d      	mov	r5, r7
 80089de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80089e2:	2b09      	cmp	r3, #9
 80089e4:	d912      	bls.n	8008a0c <_strtod_l+0x204>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e7c4      	b.n	8008974 <_strtod_l+0x16c>
 80089ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80089f0:	785a      	ldrb	r2, [r3, #1]
 80089f2:	3001      	adds	r0, #1
 80089f4:	2a30      	cmp	r2, #48	@ 0x30
 80089f6:	d0f8      	beq.n	80089ea <_strtod_l+0x1e2>
 80089f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80089fc:	2b08      	cmp	r3, #8
 80089fe:	f200 84d3 	bhi.w	80093a8 <_strtod_l+0xba0>
 8008a02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a04:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a06:	4681      	mov	r9, r0
 8008a08:	2000      	movs	r0, #0
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	3a30      	subs	r2, #48	@ 0x30
 8008a0e:	f100 0301 	add.w	r3, r0, #1
 8008a12:	d02a      	beq.n	8008a6a <_strtod_l+0x262>
 8008a14:	4499      	add	r9, r3
 8008a16:	eb00 0c05 	add.w	ip, r0, r5
 8008a1a:	462b      	mov	r3, r5
 8008a1c:	210a      	movs	r1, #10
 8008a1e:	4563      	cmp	r3, ip
 8008a20:	d10d      	bne.n	8008a3e <_strtod_l+0x236>
 8008a22:	1c69      	adds	r1, r5, #1
 8008a24:	4401      	add	r1, r0
 8008a26:	4428      	add	r0, r5
 8008a28:	2808      	cmp	r0, #8
 8008a2a:	dc16      	bgt.n	8008a5a <_strtod_l+0x252>
 8008a2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a2e:	230a      	movs	r3, #10
 8008a30:	fb03 2300 	mla	r3, r3, r0, r2
 8008a34:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a36:	2300      	movs	r3, #0
 8008a38:	e018      	b.n	8008a6c <_strtod_l+0x264>
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	e7da      	b.n	80089f4 <_strtod_l+0x1ec>
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	f103 0301 	add.w	r3, r3, #1
 8008a44:	dc03      	bgt.n	8008a4e <_strtod_l+0x246>
 8008a46:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008a48:	434e      	muls	r6, r1
 8008a4a:	960a      	str	r6, [sp, #40]	@ 0x28
 8008a4c:	e7e7      	b.n	8008a1e <_strtod_l+0x216>
 8008a4e:	2b10      	cmp	r3, #16
 8008a50:	bfde      	ittt	le
 8008a52:	9e08      	ldrle	r6, [sp, #32]
 8008a54:	434e      	mulle	r6, r1
 8008a56:	9608      	strle	r6, [sp, #32]
 8008a58:	e7e1      	b.n	8008a1e <_strtod_l+0x216>
 8008a5a:	280f      	cmp	r0, #15
 8008a5c:	dceb      	bgt.n	8008a36 <_strtod_l+0x22e>
 8008a5e:	9808      	ldr	r0, [sp, #32]
 8008a60:	230a      	movs	r3, #10
 8008a62:	fb03 2300 	mla	r3, r3, r0, r2
 8008a66:	9308      	str	r3, [sp, #32]
 8008a68:	e7e5      	b.n	8008a36 <_strtod_l+0x22e>
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a6e:	1c50      	adds	r0, r2, #1
 8008a70:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a72:	7852      	ldrb	r2, [r2, #1]
 8008a74:	4618      	mov	r0, r3
 8008a76:	460d      	mov	r5, r1
 8008a78:	e7b1      	b.n	80089de <_strtod_l+0x1d6>
 8008a7a:	f04f 0900 	mov.w	r9, #0
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e77d      	b.n	800897e <_strtod_l+0x176>
 8008a82:	f04f 0c00 	mov.w	ip, #0
 8008a86:	1ca2      	adds	r2, r4, #2
 8008a88:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a8a:	78a2      	ldrb	r2, [r4, #2]
 8008a8c:	e785      	b.n	800899a <_strtod_l+0x192>
 8008a8e:	f04f 0c01 	mov.w	ip, #1
 8008a92:	e7f8      	b.n	8008a86 <_strtod_l+0x27e>
 8008a94:	0800ab00 	.word	0x0800ab00
 8008a98:	0800aae8 	.word	0x0800aae8
 8008a9c:	7ff00000 	.word	0x7ff00000
 8008aa0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008aa2:	1c51      	adds	r1, r2, #1
 8008aa4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008aa6:	7852      	ldrb	r2, [r2, #1]
 8008aa8:	2a30      	cmp	r2, #48	@ 0x30
 8008aaa:	d0f9      	beq.n	8008aa0 <_strtod_l+0x298>
 8008aac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008ab0:	2908      	cmp	r1, #8
 8008ab2:	f63f af78 	bhi.w	80089a6 <_strtod_l+0x19e>
 8008ab6:	3a30      	subs	r2, #48	@ 0x30
 8008ab8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008aba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008abc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008abe:	f04f 080a 	mov.w	r8, #10
 8008ac2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ac4:	1c56      	adds	r6, r2, #1
 8008ac6:	9619      	str	r6, [sp, #100]	@ 0x64
 8008ac8:	7852      	ldrb	r2, [r2, #1]
 8008aca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008ace:	f1be 0f09 	cmp.w	lr, #9
 8008ad2:	d939      	bls.n	8008b48 <_strtod_l+0x340>
 8008ad4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ad6:	1a76      	subs	r6, r6, r1
 8008ad8:	2e08      	cmp	r6, #8
 8008ada:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008ade:	dc03      	bgt.n	8008ae8 <_strtod_l+0x2e0>
 8008ae0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008ae2:	4588      	cmp	r8, r1
 8008ae4:	bfa8      	it	ge
 8008ae6:	4688      	movge	r8, r1
 8008ae8:	f1bc 0f00 	cmp.w	ip, #0
 8008aec:	d001      	beq.n	8008af2 <_strtod_l+0x2ea>
 8008aee:	f1c8 0800 	rsb	r8, r8, #0
 8008af2:	2d00      	cmp	r5, #0
 8008af4:	d14e      	bne.n	8008b94 <_strtod_l+0x38c>
 8008af6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008af8:	4308      	orrs	r0, r1
 8008afa:	f47f aebe 	bne.w	800887a <_strtod_l+0x72>
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f47f aed6 	bne.w	80088b0 <_strtod_l+0xa8>
 8008b04:	2a69      	cmp	r2, #105	@ 0x69
 8008b06:	d028      	beq.n	8008b5a <_strtod_l+0x352>
 8008b08:	dc25      	bgt.n	8008b56 <_strtod_l+0x34e>
 8008b0a:	2a49      	cmp	r2, #73	@ 0x49
 8008b0c:	d025      	beq.n	8008b5a <_strtod_l+0x352>
 8008b0e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008b10:	f47f aece 	bne.w	80088b0 <_strtod_l+0xa8>
 8008b14:	499b      	ldr	r1, [pc, #620]	@ (8008d84 <_strtod_l+0x57c>)
 8008b16:	a819      	add	r0, sp, #100	@ 0x64
 8008b18:	f001 f9ee 	bl	8009ef8 <__match>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	f43f aec7 	beq.w	80088b0 <_strtod_l+0xa8>
 8008b22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2b28      	cmp	r3, #40	@ 0x28
 8008b28:	d12e      	bne.n	8008b88 <_strtod_l+0x380>
 8008b2a:	4997      	ldr	r1, [pc, #604]	@ (8008d88 <_strtod_l+0x580>)
 8008b2c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008b2e:	a819      	add	r0, sp, #100	@ 0x64
 8008b30:	f001 f9f6 	bl	8009f20 <__hexnan>
 8008b34:	2805      	cmp	r0, #5
 8008b36:	d127      	bne.n	8008b88 <_strtod_l+0x380>
 8008b38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008b3a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008b3e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008b42:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008b46:	e698      	b.n	800887a <_strtod_l+0x72>
 8008b48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008b4a:	fb08 2101 	mla	r1, r8, r1, r2
 8008b4e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008b52:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b54:	e7b5      	b.n	8008ac2 <_strtod_l+0x2ba>
 8008b56:	2a6e      	cmp	r2, #110	@ 0x6e
 8008b58:	e7da      	b.n	8008b10 <_strtod_l+0x308>
 8008b5a:	498c      	ldr	r1, [pc, #560]	@ (8008d8c <_strtod_l+0x584>)
 8008b5c:	a819      	add	r0, sp, #100	@ 0x64
 8008b5e:	f001 f9cb 	bl	8009ef8 <__match>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f43f aea4 	beq.w	80088b0 <_strtod_l+0xa8>
 8008b68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b6a:	4989      	ldr	r1, [pc, #548]	@ (8008d90 <_strtod_l+0x588>)
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	a819      	add	r0, sp, #100	@ 0x64
 8008b70:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b72:	f001 f9c1 	bl	8009ef8 <__match>
 8008b76:	b910      	cbnz	r0, 8008b7e <_strtod_l+0x376>
 8008b78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b7e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008da0 <_strtod_l+0x598>
 8008b82:	f04f 0a00 	mov.w	sl, #0
 8008b86:	e678      	b.n	800887a <_strtod_l+0x72>
 8008b88:	4882      	ldr	r0, [pc, #520]	@ (8008d94 <_strtod_l+0x58c>)
 8008b8a:	f000 fef1 	bl	8009970 <nan>
 8008b8e:	ec5b ab10 	vmov	sl, fp, d0
 8008b92:	e672      	b.n	800887a <_strtod_l+0x72>
 8008b94:	eba8 0309 	sub.w	r3, r8, r9
 8008b98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b9c:	2f00      	cmp	r7, #0
 8008b9e:	bf08      	it	eq
 8008ba0:	462f      	moveq	r7, r5
 8008ba2:	2d10      	cmp	r5, #16
 8008ba4:	462c      	mov	r4, r5
 8008ba6:	bfa8      	it	ge
 8008ba8:	2410      	movge	r4, #16
 8008baa:	f7f7 fccb 	bl	8000544 <__aeabi_ui2d>
 8008bae:	2d09      	cmp	r5, #9
 8008bb0:	4682      	mov	sl, r0
 8008bb2:	468b      	mov	fp, r1
 8008bb4:	dc13      	bgt.n	8008bde <_strtod_l+0x3d6>
 8008bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f43f ae5e 	beq.w	800887a <_strtod_l+0x72>
 8008bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc0:	dd78      	ble.n	8008cb4 <_strtod_l+0x4ac>
 8008bc2:	2b16      	cmp	r3, #22
 8008bc4:	dc5f      	bgt.n	8008c86 <_strtod_l+0x47e>
 8008bc6:	4974      	ldr	r1, [pc, #464]	@ (8008d98 <_strtod_l+0x590>)
 8008bc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bd0:	4652      	mov	r2, sl
 8008bd2:	465b      	mov	r3, fp
 8008bd4:	f7f7 fd30 	bl	8000638 <__aeabi_dmul>
 8008bd8:	4682      	mov	sl, r0
 8008bda:	468b      	mov	fp, r1
 8008bdc:	e64d      	b.n	800887a <_strtod_l+0x72>
 8008bde:	4b6e      	ldr	r3, [pc, #440]	@ (8008d98 <_strtod_l+0x590>)
 8008be0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008be4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008be8:	f7f7 fd26 	bl	8000638 <__aeabi_dmul>
 8008bec:	4682      	mov	sl, r0
 8008bee:	9808      	ldr	r0, [sp, #32]
 8008bf0:	468b      	mov	fp, r1
 8008bf2:	f7f7 fca7 	bl	8000544 <__aeabi_ui2d>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4650      	mov	r0, sl
 8008bfc:	4659      	mov	r1, fp
 8008bfe:	f7f7 fb65 	bl	80002cc <__adddf3>
 8008c02:	2d0f      	cmp	r5, #15
 8008c04:	4682      	mov	sl, r0
 8008c06:	468b      	mov	fp, r1
 8008c08:	ddd5      	ble.n	8008bb6 <_strtod_l+0x3ae>
 8008c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c0c:	1b2c      	subs	r4, r5, r4
 8008c0e:	441c      	add	r4, r3
 8008c10:	2c00      	cmp	r4, #0
 8008c12:	f340 8096 	ble.w	8008d42 <_strtod_l+0x53a>
 8008c16:	f014 030f 	ands.w	r3, r4, #15
 8008c1a:	d00a      	beq.n	8008c32 <_strtod_l+0x42a>
 8008c1c:	495e      	ldr	r1, [pc, #376]	@ (8008d98 <_strtod_l+0x590>)
 8008c1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c22:	4652      	mov	r2, sl
 8008c24:	465b      	mov	r3, fp
 8008c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c2a:	f7f7 fd05 	bl	8000638 <__aeabi_dmul>
 8008c2e:	4682      	mov	sl, r0
 8008c30:	468b      	mov	fp, r1
 8008c32:	f034 040f 	bics.w	r4, r4, #15
 8008c36:	d073      	beq.n	8008d20 <_strtod_l+0x518>
 8008c38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008c3c:	dd48      	ble.n	8008cd0 <_strtod_l+0x4c8>
 8008c3e:	2400      	movs	r4, #0
 8008c40:	46a0      	mov	r8, r4
 8008c42:	940a      	str	r4, [sp, #40]	@ 0x28
 8008c44:	46a1      	mov	r9, r4
 8008c46:	9a05      	ldr	r2, [sp, #20]
 8008c48:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008da0 <_strtod_l+0x598>
 8008c4c:	2322      	movs	r3, #34	@ 0x22
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	f04f 0a00 	mov.w	sl, #0
 8008c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f43f ae0f 	beq.w	800887a <_strtod_l+0x72>
 8008c5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c5e:	9805      	ldr	r0, [sp, #20]
 8008c60:	f7ff f942 	bl	8007ee8 <_Bfree>
 8008c64:	9805      	ldr	r0, [sp, #20]
 8008c66:	4649      	mov	r1, r9
 8008c68:	f7ff f93e 	bl	8007ee8 <_Bfree>
 8008c6c:	9805      	ldr	r0, [sp, #20]
 8008c6e:	4641      	mov	r1, r8
 8008c70:	f7ff f93a 	bl	8007ee8 <_Bfree>
 8008c74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c76:	9805      	ldr	r0, [sp, #20]
 8008c78:	f7ff f936 	bl	8007ee8 <_Bfree>
 8008c7c:	9805      	ldr	r0, [sp, #20]
 8008c7e:	4621      	mov	r1, r4
 8008c80:	f7ff f932 	bl	8007ee8 <_Bfree>
 8008c84:	e5f9      	b.n	800887a <_strtod_l+0x72>
 8008c86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	dbbc      	blt.n	8008c0a <_strtod_l+0x402>
 8008c90:	4c41      	ldr	r4, [pc, #260]	@ (8008d98 <_strtod_l+0x590>)
 8008c92:	f1c5 050f 	rsb	r5, r5, #15
 8008c96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008c9a:	4652      	mov	r2, sl
 8008c9c:	465b      	mov	r3, fp
 8008c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ca2:	f7f7 fcc9 	bl	8000638 <__aeabi_dmul>
 8008ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ca8:	1b5d      	subs	r5, r3, r5
 8008caa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008cae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008cb2:	e78f      	b.n	8008bd4 <_strtod_l+0x3cc>
 8008cb4:	3316      	adds	r3, #22
 8008cb6:	dba8      	blt.n	8008c0a <_strtod_l+0x402>
 8008cb8:	4b37      	ldr	r3, [pc, #220]	@ (8008d98 <_strtod_l+0x590>)
 8008cba:	eba9 0808 	sub.w	r8, r9, r8
 8008cbe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008cc2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008cc6:	4650      	mov	r0, sl
 8008cc8:	4659      	mov	r1, fp
 8008cca:	f7f7 fddf 	bl	800088c <__aeabi_ddiv>
 8008cce:	e783      	b.n	8008bd8 <_strtod_l+0x3d0>
 8008cd0:	4b32      	ldr	r3, [pc, #200]	@ (8008d9c <_strtod_l+0x594>)
 8008cd2:	9308      	str	r3, [sp, #32]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	1124      	asrs	r4, r4, #4
 8008cd8:	4650      	mov	r0, sl
 8008cda:	4659      	mov	r1, fp
 8008cdc:	461e      	mov	r6, r3
 8008cde:	2c01      	cmp	r4, #1
 8008ce0:	dc21      	bgt.n	8008d26 <_strtod_l+0x51e>
 8008ce2:	b10b      	cbz	r3, 8008ce8 <_strtod_l+0x4e0>
 8008ce4:	4682      	mov	sl, r0
 8008ce6:	468b      	mov	fp, r1
 8008ce8:	492c      	ldr	r1, [pc, #176]	@ (8008d9c <_strtod_l+0x594>)
 8008cea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008cee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008cf2:	4652      	mov	r2, sl
 8008cf4:	465b      	mov	r3, fp
 8008cf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cfa:	f7f7 fc9d 	bl	8000638 <__aeabi_dmul>
 8008cfe:	4b28      	ldr	r3, [pc, #160]	@ (8008da0 <_strtod_l+0x598>)
 8008d00:	460a      	mov	r2, r1
 8008d02:	400b      	ands	r3, r1
 8008d04:	4927      	ldr	r1, [pc, #156]	@ (8008da4 <_strtod_l+0x59c>)
 8008d06:	428b      	cmp	r3, r1
 8008d08:	4682      	mov	sl, r0
 8008d0a:	d898      	bhi.n	8008c3e <_strtod_l+0x436>
 8008d0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008d10:	428b      	cmp	r3, r1
 8008d12:	bf86      	itte	hi
 8008d14:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008da8 <_strtod_l+0x5a0>
 8008d18:	f04f 3aff 	movhi.w	sl, #4294967295
 8008d1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008d20:	2300      	movs	r3, #0
 8008d22:	9308      	str	r3, [sp, #32]
 8008d24:	e07a      	b.n	8008e1c <_strtod_l+0x614>
 8008d26:	07e2      	lsls	r2, r4, #31
 8008d28:	d505      	bpl.n	8008d36 <_strtod_l+0x52e>
 8008d2a:	9b08      	ldr	r3, [sp, #32]
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	f7f7 fc82 	bl	8000638 <__aeabi_dmul>
 8008d34:	2301      	movs	r3, #1
 8008d36:	9a08      	ldr	r2, [sp, #32]
 8008d38:	3208      	adds	r2, #8
 8008d3a:	3601      	adds	r6, #1
 8008d3c:	1064      	asrs	r4, r4, #1
 8008d3e:	9208      	str	r2, [sp, #32]
 8008d40:	e7cd      	b.n	8008cde <_strtod_l+0x4d6>
 8008d42:	d0ed      	beq.n	8008d20 <_strtod_l+0x518>
 8008d44:	4264      	negs	r4, r4
 8008d46:	f014 020f 	ands.w	r2, r4, #15
 8008d4a:	d00a      	beq.n	8008d62 <_strtod_l+0x55a>
 8008d4c:	4b12      	ldr	r3, [pc, #72]	@ (8008d98 <_strtod_l+0x590>)
 8008d4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d52:	4650      	mov	r0, sl
 8008d54:	4659      	mov	r1, fp
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	f7f7 fd97 	bl	800088c <__aeabi_ddiv>
 8008d5e:	4682      	mov	sl, r0
 8008d60:	468b      	mov	fp, r1
 8008d62:	1124      	asrs	r4, r4, #4
 8008d64:	d0dc      	beq.n	8008d20 <_strtod_l+0x518>
 8008d66:	2c1f      	cmp	r4, #31
 8008d68:	dd20      	ble.n	8008dac <_strtod_l+0x5a4>
 8008d6a:	2400      	movs	r4, #0
 8008d6c:	46a0      	mov	r8, r4
 8008d6e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d70:	46a1      	mov	r9, r4
 8008d72:	9a05      	ldr	r2, [sp, #20]
 8008d74:	2322      	movs	r3, #34	@ 0x22
 8008d76:	f04f 0a00 	mov.w	sl, #0
 8008d7a:	f04f 0b00 	mov.w	fp, #0
 8008d7e:	6013      	str	r3, [r2, #0]
 8008d80:	e768      	b.n	8008c54 <_strtod_l+0x44c>
 8008d82:	bf00      	nop
 8008d84:	0800a8d5 	.word	0x0800a8d5
 8008d88:	0800aaec 	.word	0x0800aaec
 8008d8c:	0800a8cd 	.word	0x0800a8cd
 8008d90:	0800a904 	.word	0x0800a904
 8008d94:	0800ac95 	.word	0x0800ac95
 8008d98:	0800aa20 	.word	0x0800aa20
 8008d9c:	0800a9f8 	.word	0x0800a9f8
 8008da0:	7ff00000 	.word	0x7ff00000
 8008da4:	7ca00000 	.word	0x7ca00000
 8008da8:	7fefffff 	.word	0x7fefffff
 8008dac:	f014 0310 	ands.w	r3, r4, #16
 8008db0:	bf18      	it	ne
 8008db2:	236a      	movne	r3, #106	@ 0x6a
 8008db4:	4ea9      	ldr	r6, [pc, #676]	@ (800905c <_strtod_l+0x854>)
 8008db6:	9308      	str	r3, [sp, #32]
 8008db8:	4650      	mov	r0, sl
 8008dba:	4659      	mov	r1, fp
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	07e2      	lsls	r2, r4, #31
 8008dc0:	d504      	bpl.n	8008dcc <_strtod_l+0x5c4>
 8008dc2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dc6:	f7f7 fc37 	bl	8000638 <__aeabi_dmul>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	1064      	asrs	r4, r4, #1
 8008dce:	f106 0608 	add.w	r6, r6, #8
 8008dd2:	d1f4      	bne.n	8008dbe <_strtod_l+0x5b6>
 8008dd4:	b10b      	cbz	r3, 8008dda <_strtod_l+0x5d2>
 8008dd6:	4682      	mov	sl, r0
 8008dd8:	468b      	mov	fp, r1
 8008dda:	9b08      	ldr	r3, [sp, #32]
 8008ddc:	b1b3      	cbz	r3, 8008e0c <_strtod_l+0x604>
 8008dde:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008de2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	4659      	mov	r1, fp
 8008dea:	dd0f      	ble.n	8008e0c <_strtod_l+0x604>
 8008dec:	2b1f      	cmp	r3, #31
 8008dee:	dd55      	ble.n	8008e9c <_strtod_l+0x694>
 8008df0:	2b34      	cmp	r3, #52	@ 0x34
 8008df2:	bfde      	ittt	le
 8008df4:	f04f 33ff 	movle.w	r3, #4294967295
 8008df8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008dfc:	4093      	lslle	r3, r2
 8008dfe:	f04f 0a00 	mov.w	sl, #0
 8008e02:	bfcc      	ite	gt
 8008e04:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008e08:	ea03 0b01 	andle.w	fp, r3, r1
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	2300      	movs	r3, #0
 8008e10:	4650      	mov	r0, sl
 8008e12:	4659      	mov	r1, fp
 8008e14:	f7f7 fe78 	bl	8000b08 <__aeabi_dcmpeq>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d1a6      	bne.n	8008d6a <_strtod_l+0x562>
 8008e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008e22:	9805      	ldr	r0, [sp, #20]
 8008e24:	462b      	mov	r3, r5
 8008e26:	463a      	mov	r2, r7
 8008e28:	f7ff f8c6 	bl	8007fb8 <__s2b>
 8008e2c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f43f af05 	beq.w	8008c3e <_strtod_l+0x436>
 8008e34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e36:	2a00      	cmp	r2, #0
 8008e38:	eba9 0308 	sub.w	r3, r9, r8
 8008e3c:	bfa8      	it	ge
 8008e3e:	2300      	movge	r3, #0
 8008e40:	9312      	str	r3, [sp, #72]	@ 0x48
 8008e42:	2400      	movs	r4, #0
 8008e44:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008e48:	9316      	str	r3, [sp, #88]	@ 0x58
 8008e4a:	46a0      	mov	r8, r4
 8008e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e4e:	9805      	ldr	r0, [sp, #20]
 8008e50:	6859      	ldr	r1, [r3, #4]
 8008e52:	f7ff f809 	bl	8007e68 <_Balloc>
 8008e56:	4681      	mov	r9, r0
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	f43f aef4 	beq.w	8008c46 <_strtod_l+0x43e>
 8008e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e60:	691a      	ldr	r2, [r3, #16]
 8008e62:	3202      	adds	r2, #2
 8008e64:	f103 010c 	add.w	r1, r3, #12
 8008e68:	0092      	lsls	r2, r2, #2
 8008e6a:	300c      	adds	r0, #12
 8008e6c:	f000 fd72 	bl	8009954 <memcpy>
 8008e70:	ec4b ab10 	vmov	d0, sl, fp
 8008e74:	9805      	ldr	r0, [sp, #20]
 8008e76:	aa1c      	add	r2, sp, #112	@ 0x70
 8008e78:	a91b      	add	r1, sp, #108	@ 0x6c
 8008e7a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008e7e:	f7ff fbd7 	bl	8008630 <__d2b>
 8008e82:	901a      	str	r0, [sp, #104]	@ 0x68
 8008e84:	2800      	cmp	r0, #0
 8008e86:	f43f aede 	beq.w	8008c46 <_strtod_l+0x43e>
 8008e8a:	9805      	ldr	r0, [sp, #20]
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	f7ff f929 	bl	80080e4 <__i2b>
 8008e92:	4680      	mov	r8, r0
 8008e94:	b948      	cbnz	r0, 8008eaa <_strtod_l+0x6a2>
 8008e96:	f04f 0800 	mov.w	r8, #0
 8008e9a:	e6d4      	b.n	8008c46 <_strtod_l+0x43e>
 8008e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ea4:	ea03 0a0a 	and.w	sl, r3, sl
 8008ea8:	e7b0      	b.n	8008e0c <_strtod_l+0x604>
 8008eaa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008eac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008eae:	2d00      	cmp	r5, #0
 8008eb0:	bfab      	itete	ge
 8008eb2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008eb4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008eb6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008eb8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008eba:	bfac      	ite	ge
 8008ebc:	18ef      	addge	r7, r5, r3
 8008ebe:	1b5e      	sublt	r6, r3, r5
 8008ec0:	9b08      	ldr	r3, [sp, #32]
 8008ec2:	1aed      	subs	r5, r5, r3
 8008ec4:	4415      	add	r5, r2
 8008ec6:	4b66      	ldr	r3, [pc, #408]	@ (8009060 <_strtod_l+0x858>)
 8008ec8:	3d01      	subs	r5, #1
 8008eca:	429d      	cmp	r5, r3
 8008ecc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008ed0:	da50      	bge.n	8008f74 <_strtod_l+0x76c>
 8008ed2:	1b5b      	subs	r3, r3, r5
 8008ed4:	2b1f      	cmp	r3, #31
 8008ed6:	eba2 0203 	sub.w	r2, r2, r3
 8008eda:	f04f 0101 	mov.w	r1, #1
 8008ede:	dc3d      	bgt.n	8008f5c <_strtod_l+0x754>
 8008ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	9310      	str	r3, [sp, #64]	@ 0x40
 8008eea:	18bd      	adds	r5, r7, r2
 8008eec:	9b08      	ldr	r3, [sp, #32]
 8008eee:	42af      	cmp	r7, r5
 8008ef0:	4416      	add	r6, r2
 8008ef2:	441e      	add	r6, r3
 8008ef4:	463b      	mov	r3, r7
 8008ef6:	bfa8      	it	ge
 8008ef8:	462b      	movge	r3, r5
 8008efa:	42b3      	cmp	r3, r6
 8008efc:	bfa8      	it	ge
 8008efe:	4633      	movge	r3, r6
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	bfc2      	ittt	gt
 8008f04:	1aed      	subgt	r5, r5, r3
 8008f06:	1af6      	subgt	r6, r6, r3
 8008f08:	1aff      	subgt	r7, r7, r3
 8008f0a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	dd16      	ble.n	8008f3e <_strtod_l+0x736>
 8008f10:	4641      	mov	r1, r8
 8008f12:	9805      	ldr	r0, [sp, #20]
 8008f14:	461a      	mov	r2, r3
 8008f16:	f7ff f9a5 	bl	8008264 <__pow5mult>
 8008f1a:	4680      	mov	r8, r0
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d0ba      	beq.n	8008e96 <_strtod_l+0x68e>
 8008f20:	4601      	mov	r1, r0
 8008f22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f24:	9805      	ldr	r0, [sp, #20]
 8008f26:	f7ff f8f3 	bl	8008110 <__multiply>
 8008f2a:	900e      	str	r0, [sp, #56]	@ 0x38
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f43f ae8a 	beq.w	8008c46 <_strtod_l+0x43e>
 8008f32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f34:	9805      	ldr	r0, [sp, #20]
 8008f36:	f7fe ffd7 	bl	8007ee8 <_Bfree>
 8008f3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f3e:	2d00      	cmp	r5, #0
 8008f40:	dc1d      	bgt.n	8008f7e <_strtod_l+0x776>
 8008f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	dd23      	ble.n	8008f90 <_strtod_l+0x788>
 8008f48:	4649      	mov	r1, r9
 8008f4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008f4c:	9805      	ldr	r0, [sp, #20]
 8008f4e:	f7ff f989 	bl	8008264 <__pow5mult>
 8008f52:	4681      	mov	r9, r0
 8008f54:	b9e0      	cbnz	r0, 8008f90 <_strtod_l+0x788>
 8008f56:	f04f 0900 	mov.w	r9, #0
 8008f5a:	e674      	b.n	8008c46 <_strtod_l+0x43e>
 8008f5c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008f60:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008f64:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008f68:	35e2      	adds	r5, #226	@ 0xe2
 8008f6a:	fa01 f305 	lsl.w	r3, r1, r5
 8008f6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f70:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008f72:	e7ba      	b.n	8008eea <_strtod_l+0x6e2>
 8008f74:	2300      	movs	r3, #0
 8008f76:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f78:	2301      	movs	r3, #1
 8008f7a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f7c:	e7b5      	b.n	8008eea <_strtod_l+0x6e2>
 8008f7e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f80:	9805      	ldr	r0, [sp, #20]
 8008f82:	462a      	mov	r2, r5
 8008f84:	f7ff f9c8 	bl	8008318 <__lshift>
 8008f88:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d1d9      	bne.n	8008f42 <_strtod_l+0x73a>
 8008f8e:	e65a      	b.n	8008c46 <_strtod_l+0x43e>
 8008f90:	2e00      	cmp	r6, #0
 8008f92:	dd07      	ble.n	8008fa4 <_strtod_l+0x79c>
 8008f94:	4649      	mov	r1, r9
 8008f96:	9805      	ldr	r0, [sp, #20]
 8008f98:	4632      	mov	r2, r6
 8008f9a:	f7ff f9bd 	bl	8008318 <__lshift>
 8008f9e:	4681      	mov	r9, r0
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d0d8      	beq.n	8008f56 <_strtod_l+0x74e>
 8008fa4:	2f00      	cmp	r7, #0
 8008fa6:	dd08      	ble.n	8008fba <_strtod_l+0x7b2>
 8008fa8:	4641      	mov	r1, r8
 8008faa:	9805      	ldr	r0, [sp, #20]
 8008fac:	463a      	mov	r2, r7
 8008fae:	f7ff f9b3 	bl	8008318 <__lshift>
 8008fb2:	4680      	mov	r8, r0
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	f43f ae46 	beq.w	8008c46 <_strtod_l+0x43e>
 8008fba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fbc:	9805      	ldr	r0, [sp, #20]
 8008fbe:	464a      	mov	r2, r9
 8008fc0:	f7ff fa32 	bl	8008428 <__mdiff>
 8008fc4:	4604      	mov	r4, r0
 8008fc6:	2800      	cmp	r0, #0
 8008fc8:	f43f ae3d 	beq.w	8008c46 <_strtod_l+0x43e>
 8008fcc:	68c3      	ldr	r3, [r0, #12]
 8008fce:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60c3      	str	r3, [r0, #12]
 8008fd4:	4641      	mov	r1, r8
 8008fd6:	f7ff fa0b 	bl	80083f0 <__mcmp>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	da46      	bge.n	800906c <_strtod_l+0x864>
 8008fde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fe0:	ea53 030a 	orrs.w	r3, r3, sl
 8008fe4:	d16c      	bne.n	80090c0 <_strtod_l+0x8b8>
 8008fe6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d168      	bne.n	80090c0 <_strtod_l+0x8b8>
 8008fee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ff2:	0d1b      	lsrs	r3, r3, #20
 8008ff4:	051b      	lsls	r3, r3, #20
 8008ff6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008ffa:	d961      	bls.n	80090c0 <_strtod_l+0x8b8>
 8008ffc:	6963      	ldr	r3, [r4, #20]
 8008ffe:	b913      	cbnz	r3, 8009006 <_strtod_l+0x7fe>
 8009000:	6923      	ldr	r3, [r4, #16]
 8009002:	2b01      	cmp	r3, #1
 8009004:	dd5c      	ble.n	80090c0 <_strtod_l+0x8b8>
 8009006:	4621      	mov	r1, r4
 8009008:	2201      	movs	r2, #1
 800900a:	9805      	ldr	r0, [sp, #20]
 800900c:	f7ff f984 	bl	8008318 <__lshift>
 8009010:	4641      	mov	r1, r8
 8009012:	4604      	mov	r4, r0
 8009014:	f7ff f9ec 	bl	80083f0 <__mcmp>
 8009018:	2800      	cmp	r0, #0
 800901a:	dd51      	ble.n	80090c0 <_strtod_l+0x8b8>
 800901c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009020:	9a08      	ldr	r2, [sp, #32]
 8009022:	0d1b      	lsrs	r3, r3, #20
 8009024:	051b      	lsls	r3, r3, #20
 8009026:	2a00      	cmp	r2, #0
 8009028:	d06b      	beq.n	8009102 <_strtod_l+0x8fa>
 800902a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800902e:	d868      	bhi.n	8009102 <_strtod_l+0x8fa>
 8009030:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009034:	f67f ae9d 	bls.w	8008d72 <_strtod_l+0x56a>
 8009038:	4b0a      	ldr	r3, [pc, #40]	@ (8009064 <_strtod_l+0x85c>)
 800903a:	4650      	mov	r0, sl
 800903c:	4659      	mov	r1, fp
 800903e:	2200      	movs	r2, #0
 8009040:	f7f7 fafa 	bl	8000638 <__aeabi_dmul>
 8009044:	4b08      	ldr	r3, [pc, #32]	@ (8009068 <_strtod_l+0x860>)
 8009046:	400b      	ands	r3, r1
 8009048:	4682      	mov	sl, r0
 800904a:	468b      	mov	fp, r1
 800904c:	2b00      	cmp	r3, #0
 800904e:	f47f ae05 	bne.w	8008c5c <_strtod_l+0x454>
 8009052:	9a05      	ldr	r2, [sp, #20]
 8009054:	2322      	movs	r3, #34	@ 0x22
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	e600      	b.n	8008c5c <_strtod_l+0x454>
 800905a:	bf00      	nop
 800905c:	0800ab18 	.word	0x0800ab18
 8009060:	fffffc02 	.word	0xfffffc02
 8009064:	39500000 	.word	0x39500000
 8009068:	7ff00000 	.word	0x7ff00000
 800906c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009070:	d165      	bne.n	800913e <_strtod_l+0x936>
 8009072:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009074:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009078:	b35a      	cbz	r2, 80090d2 <_strtod_l+0x8ca>
 800907a:	4a9f      	ldr	r2, [pc, #636]	@ (80092f8 <_strtod_l+0xaf0>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d12b      	bne.n	80090d8 <_strtod_l+0x8d0>
 8009080:	9b08      	ldr	r3, [sp, #32]
 8009082:	4651      	mov	r1, sl
 8009084:	b303      	cbz	r3, 80090c8 <_strtod_l+0x8c0>
 8009086:	4b9d      	ldr	r3, [pc, #628]	@ (80092fc <_strtod_l+0xaf4>)
 8009088:	465a      	mov	r2, fp
 800908a:	4013      	ands	r3, r2
 800908c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009090:	f04f 32ff 	mov.w	r2, #4294967295
 8009094:	d81b      	bhi.n	80090ce <_strtod_l+0x8c6>
 8009096:	0d1b      	lsrs	r3, r3, #20
 8009098:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800909c:	fa02 f303 	lsl.w	r3, r2, r3
 80090a0:	4299      	cmp	r1, r3
 80090a2:	d119      	bne.n	80090d8 <_strtod_l+0x8d0>
 80090a4:	4b96      	ldr	r3, [pc, #600]	@ (8009300 <_strtod_l+0xaf8>)
 80090a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d102      	bne.n	80090b2 <_strtod_l+0x8aa>
 80090ac:	3101      	adds	r1, #1
 80090ae:	f43f adca 	beq.w	8008c46 <_strtod_l+0x43e>
 80090b2:	4b92      	ldr	r3, [pc, #584]	@ (80092fc <_strtod_l+0xaf4>)
 80090b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090b6:	401a      	ands	r2, r3
 80090b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80090bc:	f04f 0a00 	mov.w	sl, #0
 80090c0:	9b08      	ldr	r3, [sp, #32]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1b8      	bne.n	8009038 <_strtod_l+0x830>
 80090c6:	e5c9      	b.n	8008c5c <_strtod_l+0x454>
 80090c8:	f04f 33ff 	mov.w	r3, #4294967295
 80090cc:	e7e8      	b.n	80090a0 <_strtod_l+0x898>
 80090ce:	4613      	mov	r3, r2
 80090d0:	e7e6      	b.n	80090a0 <_strtod_l+0x898>
 80090d2:	ea53 030a 	orrs.w	r3, r3, sl
 80090d6:	d0a1      	beq.n	800901c <_strtod_l+0x814>
 80090d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80090da:	b1db      	cbz	r3, 8009114 <_strtod_l+0x90c>
 80090dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090de:	4213      	tst	r3, r2
 80090e0:	d0ee      	beq.n	80090c0 <_strtod_l+0x8b8>
 80090e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090e4:	9a08      	ldr	r2, [sp, #32]
 80090e6:	4650      	mov	r0, sl
 80090e8:	4659      	mov	r1, fp
 80090ea:	b1bb      	cbz	r3, 800911c <_strtod_l+0x914>
 80090ec:	f7ff fb6e 	bl	80087cc <sulp>
 80090f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090f4:	ec53 2b10 	vmov	r2, r3, d0
 80090f8:	f7f7 f8e8 	bl	80002cc <__adddf3>
 80090fc:	4682      	mov	sl, r0
 80090fe:	468b      	mov	fp, r1
 8009100:	e7de      	b.n	80090c0 <_strtod_l+0x8b8>
 8009102:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009106:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800910a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800910e:	f04f 3aff 	mov.w	sl, #4294967295
 8009112:	e7d5      	b.n	80090c0 <_strtod_l+0x8b8>
 8009114:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009116:	ea13 0f0a 	tst.w	r3, sl
 800911a:	e7e1      	b.n	80090e0 <_strtod_l+0x8d8>
 800911c:	f7ff fb56 	bl	80087cc <sulp>
 8009120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009124:	ec53 2b10 	vmov	r2, r3, d0
 8009128:	f7f7 f8ce 	bl	80002c8 <__aeabi_dsub>
 800912c:	2200      	movs	r2, #0
 800912e:	2300      	movs	r3, #0
 8009130:	4682      	mov	sl, r0
 8009132:	468b      	mov	fp, r1
 8009134:	f7f7 fce8 	bl	8000b08 <__aeabi_dcmpeq>
 8009138:	2800      	cmp	r0, #0
 800913a:	d0c1      	beq.n	80090c0 <_strtod_l+0x8b8>
 800913c:	e619      	b.n	8008d72 <_strtod_l+0x56a>
 800913e:	4641      	mov	r1, r8
 8009140:	4620      	mov	r0, r4
 8009142:	f7ff facd 	bl	80086e0 <__ratio>
 8009146:	ec57 6b10 	vmov	r6, r7, d0
 800914a:	2200      	movs	r2, #0
 800914c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009150:	4630      	mov	r0, r6
 8009152:	4639      	mov	r1, r7
 8009154:	f7f7 fcec 	bl	8000b30 <__aeabi_dcmple>
 8009158:	2800      	cmp	r0, #0
 800915a:	d06f      	beq.n	800923c <_strtod_l+0xa34>
 800915c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800915e:	2b00      	cmp	r3, #0
 8009160:	d17a      	bne.n	8009258 <_strtod_l+0xa50>
 8009162:	f1ba 0f00 	cmp.w	sl, #0
 8009166:	d158      	bne.n	800921a <_strtod_l+0xa12>
 8009168:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800916a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800916e:	2b00      	cmp	r3, #0
 8009170:	d15a      	bne.n	8009228 <_strtod_l+0xa20>
 8009172:	4b64      	ldr	r3, [pc, #400]	@ (8009304 <_strtod_l+0xafc>)
 8009174:	2200      	movs	r2, #0
 8009176:	4630      	mov	r0, r6
 8009178:	4639      	mov	r1, r7
 800917a:	f7f7 fccf 	bl	8000b1c <__aeabi_dcmplt>
 800917e:	2800      	cmp	r0, #0
 8009180:	d159      	bne.n	8009236 <_strtod_l+0xa2e>
 8009182:	4630      	mov	r0, r6
 8009184:	4639      	mov	r1, r7
 8009186:	4b60      	ldr	r3, [pc, #384]	@ (8009308 <_strtod_l+0xb00>)
 8009188:	2200      	movs	r2, #0
 800918a:	f7f7 fa55 	bl	8000638 <__aeabi_dmul>
 800918e:	4606      	mov	r6, r0
 8009190:	460f      	mov	r7, r1
 8009192:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009196:	9606      	str	r6, [sp, #24]
 8009198:	9307      	str	r3, [sp, #28]
 800919a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800919e:	4d57      	ldr	r5, [pc, #348]	@ (80092fc <_strtod_l+0xaf4>)
 80091a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80091a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091a6:	401d      	ands	r5, r3
 80091a8:	4b58      	ldr	r3, [pc, #352]	@ (800930c <_strtod_l+0xb04>)
 80091aa:	429d      	cmp	r5, r3
 80091ac:	f040 80b2 	bne.w	8009314 <_strtod_l+0xb0c>
 80091b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80091b6:	ec4b ab10 	vmov	d0, sl, fp
 80091ba:	f7ff f9c9 	bl	8008550 <__ulp>
 80091be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091c2:	ec51 0b10 	vmov	r0, r1, d0
 80091c6:	f7f7 fa37 	bl	8000638 <__aeabi_dmul>
 80091ca:	4652      	mov	r2, sl
 80091cc:	465b      	mov	r3, fp
 80091ce:	f7f7 f87d 	bl	80002cc <__adddf3>
 80091d2:	460b      	mov	r3, r1
 80091d4:	4949      	ldr	r1, [pc, #292]	@ (80092fc <_strtod_l+0xaf4>)
 80091d6:	4a4e      	ldr	r2, [pc, #312]	@ (8009310 <_strtod_l+0xb08>)
 80091d8:	4019      	ands	r1, r3
 80091da:	4291      	cmp	r1, r2
 80091dc:	4682      	mov	sl, r0
 80091de:	d942      	bls.n	8009266 <_strtod_l+0xa5e>
 80091e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80091e2:	4b47      	ldr	r3, [pc, #284]	@ (8009300 <_strtod_l+0xaf8>)
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d103      	bne.n	80091f0 <_strtod_l+0x9e8>
 80091e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091ea:	3301      	adds	r3, #1
 80091ec:	f43f ad2b 	beq.w	8008c46 <_strtod_l+0x43e>
 80091f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009300 <_strtod_l+0xaf8>
 80091f4:	f04f 3aff 	mov.w	sl, #4294967295
 80091f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091fa:	9805      	ldr	r0, [sp, #20]
 80091fc:	f7fe fe74 	bl	8007ee8 <_Bfree>
 8009200:	9805      	ldr	r0, [sp, #20]
 8009202:	4649      	mov	r1, r9
 8009204:	f7fe fe70 	bl	8007ee8 <_Bfree>
 8009208:	9805      	ldr	r0, [sp, #20]
 800920a:	4641      	mov	r1, r8
 800920c:	f7fe fe6c 	bl	8007ee8 <_Bfree>
 8009210:	9805      	ldr	r0, [sp, #20]
 8009212:	4621      	mov	r1, r4
 8009214:	f7fe fe68 	bl	8007ee8 <_Bfree>
 8009218:	e618      	b.n	8008e4c <_strtod_l+0x644>
 800921a:	f1ba 0f01 	cmp.w	sl, #1
 800921e:	d103      	bne.n	8009228 <_strtod_l+0xa20>
 8009220:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009222:	2b00      	cmp	r3, #0
 8009224:	f43f ada5 	beq.w	8008d72 <_strtod_l+0x56a>
 8009228:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80092d8 <_strtod_l+0xad0>
 800922c:	4f35      	ldr	r7, [pc, #212]	@ (8009304 <_strtod_l+0xafc>)
 800922e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009232:	2600      	movs	r6, #0
 8009234:	e7b1      	b.n	800919a <_strtod_l+0x992>
 8009236:	4f34      	ldr	r7, [pc, #208]	@ (8009308 <_strtod_l+0xb00>)
 8009238:	2600      	movs	r6, #0
 800923a:	e7aa      	b.n	8009192 <_strtod_l+0x98a>
 800923c:	4b32      	ldr	r3, [pc, #200]	@ (8009308 <_strtod_l+0xb00>)
 800923e:	4630      	mov	r0, r6
 8009240:	4639      	mov	r1, r7
 8009242:	2200      	movs	r2, #0
 8009244:	f7f7 f9f8 	bl	8000638 <__aeabi_dmul>
 8009248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800924a:	4606      	mov	r6, r0
 800924c:	460f      	mov	r7, r1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d09f      	beq.n	8009192 <_strtod_l+0x98a>
 8009252:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009256:	e7a0      	b.n	800919a <_strtod_l+0x992>
 8009258:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80092e0 <_strtod_l+0xad8>
 800925c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009260:	ec57 6b17 	vmov	r6, r7, d7
 8009264:	e799      	b.n	800919a <_strtod_l+0x992>
 8009266:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800926a:	9b08      	ldr	r3, [sp, #32]
 800926c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1c1      	bne.n	80091f8 <_strtod_l+0x9f0>
 8009274:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009278:	0d1b      	lsrs	r3, r3, #20
 800927a:	051b      	lsls	r3, r3, #20
 800927c:	429d      	cmp	r5, r3
 800927e:	d1bb      	bne.n	80091f8 <_strtod_l+0x9f0>
 8009280:	4630      	mov	r0, r6
 8009282:	4639      	mov	r1, r7
 8009284:	f7f7 fd38 	bl	8000cf8 <__aeabi_d2lz>
 8009288:	f7f7 f9a8 	bl	80005dc <__aeabi_l2d>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4630      	mov	r0, r6
 8009292:	4639      	mov	r1, r7
 8009294:	f7f7 f818 	bl	80002c8 <__aeabi_dsub>
 8009298:	460b      	mov	r3, r1
 800929a:	4602      	mov	r2, r0
 800929c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80092a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80092a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092a6:	ea46 060a 	orr.w	r6, r6, sl
 80092aa:	431e      	orrs	r6, r3
 80092ac:	d06f      	beq.n	800938e <_strtod_l+0xb86>
 80092ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80092e8 <_strtod_l+0xae0>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f7f7 fc32 	bl	8000b1c <__aeabi_dcmplt>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	f47f accf 	bne.w	8008c5c <_strtod_l+0x454>
 80092be:	a30c      	add	r3, pc, #48	@ (adr r3, 80092f0 <_strtod_l+0xae8>)
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092c8:	f7f7 fc46 	bl	8000b58 <__aeabi_dcmpgt>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d093      	beq.n	80091f8 <_strtod_l+0x9f0>
 80092d0:	e4c4      	b.n	8008c5c <_strtod_l+0x454>
 80092d2:	bf00      	nop
 80092d4:	f3af 8000 	nop.w
 80092d8:	00000000 	.word	0x00000000
 80092dc:	bff00000 	.word	0xbff00000
 80092e0:	00000000 	.word	0x00000000
 80092e4:	3ff00000 	.word	0x3ff00000
 80092e8:	94a03595 	.word	0x94a03595
 80092ec:	3fdfffff 	.word	0x3fdfffff
 80092f0:	35afe535 	.word	0x35afe535
 80092f4:	3fe00000 	.word	0x3fe00000
 80092f8:	000fffff 	.word	0x000fffff
 80092fc:	7ff00000 	.word	0x7ff00000
 8009300:	7fefffff 	.word	0x7fefffff
 8009304:	3ff00000 	.word	0x3ff00000
 8009308:	3fe00000 	.word	0x3fe00000
 800930c:	7fe00000 	.word	0x7fe00000
 8009310:	7c9fffff 	.word	0x7c9fffff
 8009314:	9b08      	ldr	r3, [sp, #32]
 8009316:	b323      	cbz	r3, 8009362 <_strtod_l+0xb5a>
 8009318:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800931c:	d821      	bhi.n	8009362 <_strtod_l+0xb5a>
 800931e:	a328      	add	r3, pc, #160	@ (adr r3, 80093c0 <_strtod_l+0xbb8>)
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	4630      	mov	r0, r6
 8009326:	4639      	mov	r1, r7
 8009328:	f7f7 fc02 	bl	8000b30 <__aeabi_dcmple>
 800932c:	b1a0      	cbz	r0, 8009358 <_strtod_l+0xb50>
 800932e:	4639      	mov	r1, r7
 8009330:	4630      	mov	r0, r6
 8009332:	f7f7 fc59 	bl	8000be8 <__aeabi_d2uiz>
 8009336:	2801      	cmp	r0, #1
 8009338:	bf38      	it	cc
 800933a:	2001      	movcc	r0, #1
 800933c:	f7f7 f902 	bl	8000544 <__aeabi_ui2d>
 8009340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009342:	4606      	mov	r6, r0
 8009344:	460f      	mov	r7, r1
 8009346:	b9fb      	cbnz	r3, 8009388 <_strtod_l+0xb80>
 8009348:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800934c:	9014      	str	r0, [sp, #80]	@ 0x50
 800934e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009350:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009354:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009358:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800935a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800935e:	1b5b      	subs	r3, r3, r5
 8009360:	9311      	str	r3, [sp, #68]	@ 0x44
 8009362:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009366:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800936a:	f7ff f8f1 	bl	8008550 <__ulp>
 800936e:	4650      	mov	r0, sl
 8009370:	ec53 2b10 	vmov	r2, r3, d0
 8009374:	4659      	mov	r1, fp
 8009376:	f7f7 f95f 	bl	8000638 <__aeabi_dmul>
 800937a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800937e:	f7f6 ffa5 	bl	80002cc <__adddf3>
 8009382:	4682      	mov	sl, r0
 8009384:	468b      	mov	fp, r1
 8009386:	e770      	b.n	800926a <_strtod_l+0xa62>
 8009388:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800938c:	e7e0      	b.n	8009350 <_strtod_l+0xb48>
 800938e:	a30e      	add	r3, pc, #56	@ (adr r3, 80093c8 <_strtod_l+0xbc0>)
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f7f7 fbc2 	bl	8000b1c <__aeabi_dcmplt>
 8009398:	e798      	b.n	80092cc <_strtod_l+0xac4>
 800939a:	2300      	movs	r3, #0
 800939c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800939e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80093a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	f7ff ba6d 	b.w	8008882 <_strtod_l+0x7a>
 80093a8:	2a65      	cmp	r2, #101	@ 0x65
 80093aa:	f43f ab66 	beq.w	8008a7a <_strtod_l+0x272>
 80093ae:	2a45      	cmp	r2, #69	@ 0x45
 80093b0:	f43f ab63 	beq.w	8008a7a <_strtod_l+0x272>
 80093b4:	2301      	movs	r3, #1
 80093b6:	f7ff bb9e 	b.w	8008af6 <_strtod_l+0x2ee>
 80093ba:	bf00      	nop
 80093bc:	f3af 8000 	nop.w
 80093c0:	ffc00000 	.word	0xffc00000
 80093c4:	41dfffff 	.word	0x41dfffff
 80093c8:	94a03595 	.word	0x94a03595
 80093cc:	3fcfffff 	.word	0x3fcfffff

080093d0 <_strtod_r>:
 80093d0:	4b01      	ldr	r3, [pc, #4]	@ (80093d8 <_strtod_r+0x8>)
 80093d2:	f7ff ba19 	b.w	8008808 <_strtod_l>
 80093d6:	bf00      	nop
 80093d8:	20000068 	.word	0x20000068

080093dc <_strtol_l.constprop.0>:
 80093dc:	2b24      	cmp	r3, #36	@ 0x24
 80093de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e2:	4686      	mov	lr, r0
 80093e4:	4690      	mov	r8, r2
 80093e6:	d801      	bhi.n	80093ec <_strtol_l.constprop.0+0x10>
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d106      	bne.n	80093fa <_strtol_l.constprop.0+0x1e>
 80093ec:	f7fd fdbc 	bl	8006f68 <__errno>
 80093f0:	2316      	movs	r3, #22
 80093f2:	6003      	str	r3, [r0, #0]
 80093f4:	2000      	movs	r0, #0
 80093f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093fa:	4834      	ldr	r0, [pc, #208]	@ (80094cc <_strtol_l.constprop.0+0xf0>)
 80093fc:	460d      	mov	r5, r1
 80093fe:	462a      	mov	r2, r5
 8009400:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009404:	5d06      	ldrb	r6, [r0, r4]
 8009406:	f016 0608 	ands.w	r6, r6, #8
 800940a:	d1f8      	bne.n	80093fe <_strtol_l.constprop.0+0x22>
 800940c:	2c2d      	cmp	r4, #45	@ 0x2d
 800940e:	d12d      	bne.n	800946c <_strtol_l.constprop.0+0x90>
 8009410:	782c      	ldrb	r4, [r5, #0]
 8009412:	2601      	movs	r6, #1
 8009414:	1c95      	adds	r5, r2, #2
 8009416:	f033 0210 	bics.w	r2, r3, #16
 800941a:	d109      	bne.n	8009430 <_strtol_l.constprop.0+0x54>
 800941c:	2c30      	cmp	r4, #48	@ 0x30
 800941e:	d12a      	bne.n	8009476 <_strtol_l.constprop.0+0x9a>
 8009420:	782a      	ldrb	r2, [r5, #0]
 8009422:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009426:	2a58      	cmp	r2, #88	@ 0x58
 8009428:	d125      	bne.n	8009476 <_strtol_l.constprop.0+0x9a>
 800942a:	786c      	ldrb	r4, [r5, #1]
 800942c:	2310      	movs	r3, #16
 800942e:	3502      	adds	r5, #2
 8009430:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009434:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009438:	2200      	movs	r2, #0
 800943a:	fbbc f9f3 	udiv	r9, ip, r3
 800943e:	4610      	mov	r0, r2
 8009440:	fb03 ca19 	mls	sl, r3, r9, ip
 8009444:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009448:	2f09      	cmp	r7, #9
 800944a:	d81b      	bhi.n	8009484 <_strtol_l.constprop.0+0xa8>
 800944c:	463c      	mov	r4, r7
 800944e:	42a3      	cmp	r3, r4
 8009450:	dd27      	ble.n	80094a2 <_strtol_l.constprop.0+0xc6>
 8009452:	1c57      	adds	r7, r2, #1
 8009454:	d007      	beq.n	8009466 <_strtol_l.constprop.0+0x8a>
 8009456:	4581      	cmp	r9, r0
 8009458:	d320      	bcc.n	800949c <_strtol_l.constprop.0+0xc0>
 800945a:	d101      	bne.n	8009460 <_strtol_l.constprop.0+0x84>
 800945c:	45a2      	cmp	sl, r4
 800945e:	db1d      	blt.n	800949c <_strtol_l.constprop.0+0xc0>
 8009460:	fb00 4003 	mla	r0, r0, r3, r4
 8009464:	2201      	movs	r2, #1
 8009466:	f815 4b01 	ldrb.w	r4, [r5], #1
 800946a:	e7eb      	b.n	8009444 <_strtol_l.constprop.0+0x68>
 800946c:	2c2b      	cmp	r4, #43	@ 0x2b
 800946e:	bf04      	itt	eq
 8009470:	782c      	ldrbeq	r4, [r5, #0]
 8009472:	1c95      	addeq	r5, r2, #2
 8009474:	e7cf      	b.n	8009416 <_strtol_l.constprop.0+0x3a>
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1da      	bne.n	8009430 <_strtol_l.constprop.0+0x54>
 800947a:	2c30      	cmp	r4, #48	@ 0x30
 800947c:	bf0c      	ite	eq
 800947e:	2308      	moveq	r3, #8
 8009480:	230a      	movne	r3, #10
 8009482:	e7d5      	b.n	8009430 <_strtol_l.constprop.0+0x54>
 8009484:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009488:	2f19      	cmp	r7, #25
 800948a:	d801      	bhi.n	8009490 <_strtol_l.constprop.0+0xb4>
 800948c:	3c37      	subs	r4, #55	@ 0x37
 800948e:	e7de      	b.n	800944e <_strtol_l.constprop.0+0x72>
 8009490:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009494:	2f19      	cmp	r7, #25
 8009496:	d804      	bhi.n	80094a2 <_strtol_l.constprop.0+0xc6>
 8009498:	3c57      	subs	r4, #87	@ 0x57
 800949a:	e7d8      	b.n	800944e <_strtol_l.constprop.0+0x72>
 800949c:	f04f 32ff 	mov.w	r2, #4294967295
 80094a0:	e7e1      	b.n	8009466 <_strtol_l.constprop.0+0x8a>
 80094a2:	1c53      	adds	r3, r2, #1
 80094a4:	d108      	bne.n	80094b8 <_strtol_l.constprop.0+0xdc>
 80094a6:	2322      	movs	r3, #34	@ 0x22
 80094a8:	f8ce 3000 	str.w	r3, [lr]
 80094ac:	4660      	mov	r0, ip
 80094ae:	f1b8 0f00 	cmp.w	r8, #0
 80094b2:	d0a0      	beq.n	80093f6 <_strtol_l.constprop.0+0x1a>
 80094b4:	1e69      	subs	r1, r5, #1
 80094b6:	e006      	b.n	80094c6 <_strtol_l.constprop.0+0xea>
 80094b8:	b106      	cbz	r6, 80094bc <_strtol_l.constprop.0+0xe0>
 80094ba:	4240      	negs	r0, r0
 80094bc:	f1b8 0f00 	cmp.w	r8, #0
 80094c0:	d099      	beq.n	80093f6 <_strtol_l.constprop.0+0x1a>
 80094c2:	2a00      	cmp	r2, #0
 80094c4:	d1f6      	bne.n	80094b4 <_strtol_l.constprop.0+0xd8>
 80094c6:	f8c8 1000 	str.w	r1, [r8]
 80094ca:	e794      	b.n	80093f6 <_strtol_l.constprop.0+0x1a>
 80094cc:	0800ab41 	.word	0x0800ab41

080094d0 <_strtol_r>:
 80094d0:	f7ff bf84 	b.w	80093dc <_strtol_l.constprop.0>

080094d4 <__ssputs_r>:
 80094d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	688e      	ldr	r6, [r1, #8]
 80094da:	461f      	mov	r7, r3
 80094dc:	42be      	cmp	r6, r7
 80094de:	680b      	ldr	r3, [r1, #0]
 80094e0:	4682      	mov	sl, r0
 80094e2:	460c      	mov	r4, r1
 80094e4:	4690      	mov	r8, r2
 80094e6:	d82d      	bhi.n	8009544 <__ssputs_r+0x70>
 80094e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80094f0:	d026      	beq.n	8009540 <__ssputs_r+0x6c>
 80094f2:	6965      	ldr	r5, [r4, #20]
 80094f4:	6909      	ldr	r1, [r1, #16]
 80094f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094fa:	eba3 0901 	sub.w	r9, r3, r1
 80094fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009502:	1c7b      	adds	r3, r7, #1
 8009504:	444b      	add	r3, r9
 8009506:	106d      	asrs	r5, r5, #1
 8009508:	429d      	cmp	r5, r3
 800950a:	bf38      	it	cc
 800950c:	461d      	movcc	r5, r3
 800950e:	0553      	lsls	r3, r2, #21
 8009510:	d527      	bpl.n	8009562 <__ssputs_r+0x8e>
 8009512:	4629      	mov	r1, r5
 8009514:	f7fe fc1c 	bl	8007d50 <_malloc_r>
 8009518:	4606      	mov	r6, r0
 800951a:	b360      	cbz	r0, 8009576 <__ssputs_r+0xa2>
 800951c:	6921      	ldr	r1, [r4, #16]
 800951e:	464a      	mov	r2, r9
 8009520:	f000 fa18 	bl	8009954 <memcpy>
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800952a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800952e:	81a3      	strh	r3, [r4, #12]
 8009530:	6126      	str	r6, [r4, #16]
 8009532:	6165      	str	r5, [r4, #20]
 8009534:	444e      	add	r6, r9
 8009536:	eba5 0509 	sub.w	r5, r5, r9
 800953a:	6026      	str	r6, [r4, #0]
 800953c:	60a5      	str	r5, [r4, #8]
 800953e:	463e      	mov	r6, r7
 8009540:	42be      	cmp	r6, r7
 8009542:	d900      	bls.n	8009546 <__ssputs_r+0x72>
 8009544:	463e      	mov	r6, r7
 8009546:	6820      	ldr	r0, [r4, #0]
 8009548:	4632      	mov	r2, r6
 800954a:	4641      	mov	r1, r8
 800954c:	f000 f9c6 	bl	80098dc <memmove>
 8009550:	68a3      	ldr	r3, [r4, #8]
 8009552:	1b9b      	subs	r3, r3, r6
 8009554:	60a3      	str	r3, [r4, #8]
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	4433      	add	r3, r6
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	2000      	movs	r0, #0
 800955e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009562:	462a      	mov	r2, r5
 8009564:	f000 fd89 	bl	800a07a <_realloc_r>
 8009568:	4606      	mov	r6, r0
 800956a:	2800      	cmp	r0, #0
 800956c:	d1e0      	bne.n	8009530 <__ssputs_r+0x5c>
 800956e:	6921      	ldr	r1, [r4, #16]
 8009570:	4650      	mov	r0, sl
 8009572:	f7fe fb79 	bl	8007c68 <_free_r>
 8009576:	230c      	movs	r3, #12
 8009578:	f8ca 3000 	str.w	r3, [sl]
 800957c:	89a3      	ldrh	r3, [r4, #12]
 800957e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	e7e9      	b.n	800955e <__ssputs_r+0x8a>
	...

0800958c <_svfiprintf_r>:
 800958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	4698      	mov	r8, r3
 8009592:	898b      	ldrh	r3, [r1, #12]
 8009594:	061b      	lsls	r3, r3, #24
 8009596:	b09d      	sub	sp, #116	@ 0x74
 8009598:	4607      	mov	r7, r0
 800959a:	460d      	mov	r5, r1
 800959c:	4614      	mov	r4, r2
 800959e:	d510      	bpl.n	80095c2 <_svfiprintf_r+0x36>
 80095a0:	690b      	ldr	r3, [r1, #16]
 80095a2:	b973      	cbnz	r3, 80095c2 <_svfiprintf_r+0x36>
 80095a4:	2140      	movs	r1, #64	@ 0x40
 80095a6:	f7fe fbd3 	bl	8007d50 <_malloc_r>
 80095aa:	6028      	str	r0, [r5, #0]
 80095ac:	6128      	str	r0, [r5, #16]
 80095ae:	b930      	cbnz	r0, 80095be <_svfiprintf_r+0x32>
 80095b0:	230c      	movs	r3, #12
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295
 80095b8:	b01d      	add	sp, #116	@ 0x74
 80095ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095be:	2340      	movs	r3, #64	@ 0x40
 80095c0:	616b      	str	r3, [r5, #20]
 80095c2:	2300      	movs	r3, #0
 80095c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095c6:	2320      	movs	r3, #32
 80095c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80095d0:	2330      	movs	r3, #48	@ 0x30
 80095d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009770 <_svfiprintf_r+0x1e4>
 80095d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095da:	f04f 0901 	mov.w	r9, #1
 80095de:	4623      	mov	r3, r4
 80095e0:	469a      	mov	sl, r3
 80095e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095e6:	b10a      	cbz	r2, 80095ec <_svfiprintf_r+0x60>
 80095e8:	2a25      	cmp	r2, #37	@ 0x25
 80095ea:	d1f9      	bne.n	80095e0 <_svfiprintf_r+0x54>
 80095ec:	ebba 0b04 	subs.w	fp, sl, r4
 80095f0:	d00b      	beq.n	800960a <_svfiprintf_r+0x7e>
 80095f2:	465b      	mov	r3, fp
 80095f4:	4622      	mov	r2, r4
 80095f6:	4629      	mov	r1, r5
 80095f8:	4638      	mov	r0, r7
 80095fa:	f7ff ff6b 	bl	80094d4 <__ssputs_r>
 80095fe:	3001      	adds	r0, #1
 8009600:	f000 80a7 	beq.w	8009752 <_svfiprintf_r+0x1c6>
 8009604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009606:	445a      	add	r2, fp
 8009608:	9209      	str	r2, [sp, #36]	@ 0x24
 800960a:	f89a 3000 	ldrb.w	r3, [sl]
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 809f 	beq.w	8009752 <_svfiprintf_r+0x1c6>
 8009614:	2300      	movs	r3, #0
 8009616:	f04f 32ff 	mov.w	r2, #4294967295
 800961a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800961e:	f10a 0a01 	add.w	sl, sl, #1
 8009622:	9304      	str	r3, [sp, #16]
 8009624:	9307      	str	r3, [sp, #28]
 8009626:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800962a:	931a      	str	r3, [sp, #104]	@ 0x68
 800962c:	4654      	mov	r4, sl
 800962e:	2205      	movs	r2, #5
 8009630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009634:	484e      	ldr	r0, [pc, #312]	@ (8009770 <_svfiprintf_r+0x1e4>)
 8009636:	f7f6 fdeb 	bl	8000210 <memchr>
 800963a:	9a04      	ldr	r2, [sp, #16]
 800963c:	b9d8      	cbnz	r0, 8009676 <_svfiprintf_r+0xea>
 800963e:	06d0      	lsls	r0, r2, #27
 8009640:	bf44      	itt	mi
 8009642:	2320      	movmi	r3, #32
 8009644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009648:	0711      	lsls	r1, r2, #28
 800964a:	bf44      	itt	mi
 800964c:	232b      	movmi	r3, #43	@ 0x2b
 800964e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009652:	f89a 3000 	ldrb.w	r3, [sl]
 8009656:	2b2a      	cmp	r3, #42	@ 0x2a
 8009658:	d015      	beq.n	8009686 <_svfiprintf_r+0xfa>
 800965a:	9a07      	ldr	r2, [sp, #28]
 800965c:	4654      	mov	r4, sl
 800965e:	2000      	movs	r0, #0
 8009660:	f04f 0c0a 	mov.w	ip, #10
 8009664:	4621      	mov	r1, r4
 8009666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800966a:	3b30      	subs	r3, #48	@ 0x30
 800966c:	2b09      	cmp	r3, #9
 800966e:	d94b      	bls.n	8009708 <_svfiprintf_r+0x17c>
 8009670:	b1b0      	cbz	r0, 80096a0 <_svfiprintf_r+0x114>
 8009672:	9207      	str	r2, [sp, #28]
 8009674:	e014      	b.n	80096a0 <_svfiprintf_r+0x114>
 8009676:	eba0 0308 	sub.w	r3, r0, r8
 800967a:	fa09 f303 	lsl.w	r3, r9, r3
 800967e:	4313      	orrs	r3, r2
 8009680:	9304      	str	r3, [sp, #16]
 8009682:	46a2      	mov	sl, r4
 8009684:	e7d2      	b.n	800962c <_svfiprintf_r+0xa0>
 8009686:	9b03      	ldr	r3, [sp, #12]
 8009688:	1d19      	adds	r1, r3, #4
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	9103      	str	r1, [sp, #12]
 800968e:	2b00      	cmp	r3, #0
 8009690:	bfbb      	ittet	lt
 8009692:	425b      	neglt	r3, r3
 8009694:	f042 0202 	orrlt.w	r2, r2, #2
 8009698:	9307      	strge	r3, [sp, #28]
 800969a:	9307      	strlt	r3, [sp, #28]
 800969c:	bfb8      	it	lt
 800969e:	9204      	strlt	r2, [sp, #16]
 80096a0:	7823      	ldrb	r3, [r4, #0]
 80096a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80096a4:	d10a      	bne.n	80096bc <_svfiprintf_r+0x130>
 80096a6:	7863      	ldrb	r3, [r4, #1]
 80096a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80096aa:	d132      	bne.n	8009712 <_svfiprintf_r+0x186>
 80096ac:	9b03      	ldr	r3, [sp, #12]
 80096ae:	1d1a      	adds	r2, r3, #4
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	9203      	str	r2, [sp, #12]
 80096b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096b8:	3402      	adds	r4, #2
 80096ba:	9305      	str	r3, [sp, #20]
 80096bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009780 <_svfiprintf_r+0x1f4>
 80096c0:	7821      	ldrb	r1, [r4, #0]
 80096c2:	2203      	movs	r2, #3
 80096c4:	4650      	mov	r0, sl
 80096c6:	f7f6 fda3 	bl	8000210 <memchr>
 80096ca:	b138      	cbz	r0, 80096dc <_svfiprintf_r+0x150>
 80096cc:	9b04      	ldr	r3, [sp, #16]
 80096ce:	eba0 000a 	sub.w	r0, r0, sl
 80096d2:	2240      	movs	r2, #64	@ 0x40
 80096d4:	4082      	lsls	r2, r0
 80096d6:	4313      	orrs	r3, r2
 80096d8:	3401      	adds	r4, #1
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096e0:	4824      	ldr	r0, [pc, #144]	@ (8009774 <_svfiprintf_r+0x1e8>)
 80096e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096e6:	2206      	movs	r2, #6
 80096e8:	f7f6 fd92 	bl	8000210 <memchr>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d036      	beq.n	800975e <_svfiprintf_r+0x1d2>
 80096f0:	4b21      	ldr	r3, [pc, #132]	@ (8009778 <_svfiprintf_r+0x1ec>)
 80096f2:	bb1b      	cbnz	r3, 800973c <_svfiprintf_r+0x1b0>
 80096f4:	9b03      	ldr	r3, [sp, #12]
 80096f6:	3307      	adds	r3, #7
 80096f8:	f023 0307 	bic.w	r3, r3, #7
 80096fc:	3308      	adds	r3, #8
 80096fe:	9303      	str	r3, [sp, #12]
 8009700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009702:	4433      	add	r3, r6
 8009704:	9309      	str	r3, [sp, #36]	@ 0x24
 8009706:	e76a      	b.n	80095de <_svfiprintf_r+0x52>
 8009708:	fb0c 3202 	mla	r2, ip, r2, r3
 800970c:	460c      	mov	r4, r1
 800970e:	2001      	movs	r0, #1
 8009710:	e7a8      	b.n	8009664 <_svfiprintf_r+0xd8>
 8009712:	2300      	movs	r3, #0
 8009714:	3401      	adds	r4, #1
 8009716:	9305      	str	r3, [sp, #20]
 8009718:	4619      	mov	r1, r3
 800971a:	f04f 0c0a 	mov.w	ip, #10
 800971e:	4620      	mov	r0, r4
 8009720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009724:	3a30      	subs	r2, #48	@ 0x30
 8009726:	2a09      	cmp	r2, #9
 8009728:	d903      	bls.n	8009732 <_svfiprintf_r+0x1a6>
 800972a:	2b00      	cmp	r3, #0
 800972c:	d0c6      	beq.n	80096bc <_svfiprintf_r+0x130>
 800972e:	9105      	str	r1, [sp, #20]
 8009730:	e7c4      	b.n	80096bc <_svfiprintf_r+0x130>
 8009732:	fb0c 2101 	mla	r1, ip, r1, r2
 8009736:	4604      	mov	r4, r0
 8009738:	2301      	movs	r3, #1
 800973a:	e7f0      	b.n	800971e <_svfiprintf_r+0x192>
 800973c:	ab03      	add	r3, sp, #12
 800973e:	9300      	str	r3, [sp, #0]
 8009740:	462a      	mov	r2, r5
 8009742:	4b0e      	ldr	r3, [pc, #56]	@ (800977c <_svfiprintf_r+0x1f0>)
 8009744:	a904      	add	r1, sp, #16
 8009746:	4638      	mov	r0, r7
 8009748:	f7fc fcca 	bl	80060e0 <_printf_float>
 800974c:	1c42      	adds	r2, r0, #1
 800974e:	4606      	mov	r6, r0
 8009750:	d1d6      	bne.n	8009700 <_svfiprintf_r+0x174>
 8009752:	89ab      	ldrh	r3, [r5, #12]
 8009754:	065b      	lsls	r3, r3, #25
 8009756:	f53f af2d 	bmi.w	80095b4 <_svfiprintf_r+0x28>
 800975a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800975c:	e72c      	b.n	80095b8 <_svfiprintf_r+0x2c>
 800975e:	ab03      	add	r3, sp, #12
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	462a      	mov	r2, r5
 8009764:	4b05      	ldr	r3, [pc, #20]	@ (800977c <_svfiprintf_r+0x1f0>)
 8009766:	a904      	add	r1, sp, #16
 8009768:	4638      	mov	r0, r7
 800976a:	f7fc ff51 	bl	8006610 <_printf_i>
 800976e:	e7ed      	b.n	800974c <_svfiprintf_r+0x1c0>
 8009770:	0800ac41 	.word	0x0800ac41
 8009774:	0800ac4b 	.word	0x0800ac4b
 8009778:	080060e1 	.word	0x080060e1
 800977c:	080094d5 	.word	0x080094d5
 8009780:	0800ac47 	.word	0x0800ac47

08009784 <__sflush_r>:
 8009784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800978c:	0716      	lsls	r6, r2, #28
 800978e:	4605      	mov	r5, r0
 8009790:	460c      	mov	r4, r1
 8009792:	d454      	bmi.n	800983e <__sflush_r+0xba>
 8009794:	684b      	ldr	r3, [r1, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	dc02      	bgt.n	80097a0 <__sflush_r+0x1c>
 800979a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800979c:	2b00      	cmp	r3, #0
 800979e:	dd48      	ble.n	8009832 <__sflush_r+0xae>
 80097a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097a2:	2e00      	cmp	r6, #0
 80097a4:	d045      	beq.n	8009832 <__sflush_r+0xae>
 80097a6:	2300      	movs	r3, #0
 80097a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80097ac:	682f      	ldr	r7, [r5, #0]
 80097ae:	6a21      	ldr	r1, [r4, #32]
 80097b0:	602b      	str	r3, [r5, #0]
 80097b2:	d030      	beq.n	8009816 <__sflush_r+0x92>
 80097b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80097b6:	89a3      	ldrh	r3, [r4, #12]
 80097b8:	0759      	lsls	r1, r3, #29
 80097ba:	d505      	bpl.n	80097c8 <__sflush_r+0x44>
 80097bc:	6863      	ldr	r3, [r4, #4]
 80097be:	1ad2      	subs	r2, r2, r3
 80097c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80097c2:	b10b      	cbz	r3, 80097c8 <__sflush_r+0x44>
 80097c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097c6:	1ad2      	subs	r2, r2, r3
 80097c8:	2300      	movs	r3, #0
 80097ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80097cc:	6a21      	ldr	r1, [r4, #32]
 80097ce:	4628      	mov	r0, r5
 80097d0:	47b0      	blx	r6
 80097d2:	1c43      	adds	r3, r0, #1
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	d106      	bne.n	80097e6 <__sflush_r+0x62>
 80097d8:	6829      	ldr	r1, [r5, #0]
 80097da:	291d      	cmp	r1, #29
 80097dc:	d82b      	bhi.n	8009836 <__sflush_r+0xb2>
 80097de:	4a2a      	ldr	r2, [pc, #168]	@ (8009888 <__sflush_r+0x104>)
 80097e0:	410a      	asrs	r2, r1
 80097e2:	07d6      	lsls	r6, r2, #31
 80097e4:	d427      	bmi.n	8009836 <__sflush_r+0xb2>
 80097e6:	2200      	movs	r2, #0
 80097e8:	6062      	str	r2, [r4, #4]
 80097ea:	04d9      	lsls	r1, r3, #19
 80097ec:	6922      	ldr	r2, [r4, #16]
 80097ee:	6022      	str	r2, [r4, #0]
 80097f0:	d504      	bpl.n	80097fc <__sflush_r+0x78>
 80097f2:	1c42      	adds	r2, r0, #1
 80097f4:	d101      	bne.n	80097fa <__sflush_r+0x76>
 80097f6:	682b      	ldr	r3, [r5, #0]
 80097f8:	b903      	cbnz	r3, 80097fc <__sflush_r+0x78>
 80097fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80097fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097fe:	602f      	str	r7, [r5, #0]
 8009800:	b1b9      	cbz	r1, 8009832 <__sflush_r+0xae>
 8009802:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009806:	4299      	cmp	r1, r3
 8009808:	d002      	beq.n	8009810 <__sflush_r+0x8c>
 800980a:	4628      	mov	r0, r5
 800980c:	f7fe fa2c 	bl	8007c68 <_free_r>
 8009810:	2300      	movs	r3, #0
 8009812:	6363      	str	r3, [r4, #52]	@ 0x34
 8009814:	e00d      	b.n	8009832 <__sflush_r+0xae>
 8009816:	2301      	movs	r3, #1
 8009818:	4628      	mov	r0, r5
 800981a:	47b0      	blx	r6
 800981c:	4602      	mov	r2, r0
 800981e:	1c50      	adds	r0, r2, #1
 8009820:	d1c9      	bne.n	80097b6 <__sflush_r+0x32>
 8009822:	682b      	ldr	r3, [r5, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d0c6      	beq.n	80097b6 <__sflush_r+0x32>
 8009828:	2b1d      	cmp	r3, #29
 800982a:	d001      	beq.n	8009830 <__sflush_r+0xac>
 800982c:	2b16      	cmp	r3, #22
 800982e:	d11e      	bne.n	800986e <__sflush_r+0xea>
 8009830:	602f      	str	r7, [r5, #0]
 8009832:	2000      	movs	r0, #0
 8009834:	e022      	b.n	800987c <__sflush_r+0xf8>
 8009836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800983a:	b21b      	sxth	r3, r3
 800983c:	e01b      	b.n	8009876 <__sflush_r+0xf2>
 800983e:	690f      	ldr	r7, [r1, #16]
 8009840:	2f00      	cmp	r7, #0
 8009842:	d0f6      	beq.n	8009832 <__sflush_r+0xae>
 8009844:	0793      	lsls	r3, r2, #30
 8009846:	680e      	ldr	r6, [r1, #0]
 8009848:	bf08      	it	eq
 800984a:	694b      	ldreq	r3, [r1, #20]
 800984c:	600f      	str	r7, [r1, #0]
 800984e:	bf18      	it	ne
 8009850:	2300      	movne	r3, #0
 8009852:	eba6 0807 	sub.w	r8, r6, r7
 8009856:	608b      	str	r3, [r1, #8]
 8009858:	f1b8 0f00 	cmp.w	r8, #0
 800985c:	dde9      	ble.n	8009832 <__sflush_r+0xae>
 800985e:	6a21      	ldr	r1, [r4, #32]
 8009860:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009862:	4643      	mov	r3, r8
 8009864:	463a      	mov	r2, r7
 8009866:	4628      	mov	r0, r5
 8009868:	47b0      	blx	r6
 800986a:	2800      	cmp	r0, #0
 800986c:	dc08      	bgt.n	8009880 <__sflush_r+0xfc>
 800986e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009876:	81a3      	strh	r3, [r4, #12]
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009880:	4407      	add	r7, r0
 8009882:	eba8 0800 	sub.w	r8, r8, r0
 8009886:	e7e7      	b.n	8009858 <__sflush_r+0xd4>
 8009888:	dfbffffe 	.word	0xdfbffffe

0800988c <_fflush_r>:
 800988c:	b538      	push	{r3, r4, r5, lr}
 800988e:	690b      	ldr	r3, [r1, #16]
 8009890:	4605      	mov	r5, r0
 8009892:	460c      	mov	r4, r1
 8009894:	b913      	cbnz	r3, 800989c <_fflush_r+0x10>
 8009896:	2500      	movs	r5, #0
 8009898:	4628      	mov	r0, r5
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	b118      	cbz	r0, 80098a6 <_fflush_r+0x1a>
 800989e:	6a03      	ldr	r3, [r0, #32]
 80098a0:	b90b      	cbnz	r3, 80098a6 <_fflush_r+0x1a>
 80098a2:	f7fd fa75 	bl	8006d90 <__sinit>
 80098a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0f3      	beq.n	8009896 <_fflush_r+0xa>
 80098ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80098b0:	07d0      	lsls	r0, r2, #31
 80098b2:	d404      	bmi.n	80098be <_fflush_r+0x32>
 80098b4:	0599      	lsls	r1, r3, #22
 80098b6:	d402      	bmi.n	80098be <_fflush_r+0x32>
 80098b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098ba:	f7fd fb80 	bl	8006fbe <__retarget_lock_acquire_recursive>
 80098be:	4628      	mov	r0, r5
 80098c0:	4621      	mov	r1, r4
 80098c2:	f7ff ff5f 	bl	8009784 <__sflush_r>
 80098c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098c8:	07da      	lsls	r2, r3, #31
 80098ca:	4605      	mov	r5, r0
 80098cc:	d4e4      	bmi.n	8009898 <_fflush_r+0xc>
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	059b      	lsls	r3, r3, #22
 80098d2:	d4e1      	bmi.n	8009898 <_fflush_r+0xc>
 80098d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098d6:	f7fd fb73 	bl	8006fc0 <__retarget_lock_release_recursive>
 80098da:	e7dd      	b.n	8009898 <_fflush_r+0xc>

080098dc <memmove>:
 80098dc:	4288      	cmp	r0, r1
 80098de:	b510      	push	{r4, lr}
 80098e0:	eb01 0402 	add.w	r4, r1, r2
 80098e4:	d902      	bls.n	80098ec <memmove+0x10>
 80098e6:	4284      	cmp	r4, r0
 80098e8:	4623      	mov	r3, r4
 80098ea:	d807      	bhi.n	80098fc <memmove+0x20>
 80098ec:	1e43      	subs	r3, r0, #1
 80098ee:	42a1      	cmp	r1, r4
 80098f0:	d008      	beq.n	8009904 <memmove+0x28>
 80098f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098fa:	e7f8      	b.n	80098ee <memmove+0x12>
 80098fc:	4402      	add	r2, r0
 80098fe:	4601      	mov	r1, r0
 8009900:	428a      	cmp	r2, r1
 8009902:	d100      	bne.n	8009906 <memmove+0x2a>
 8009904:	bd10      	pop	{r4, pc}
 8009906:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800990a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800990e:	e7f7      	b.n	8009900 <memmove+0x24>

08009910 <strncmp>:
 8009910:	b510      	push	{r4, lr}
 8009912:	b16a      	cbz	r2, 8009930 <strncmp+0x20>
 8009914:	3901      	subs	r1, #1
 8009916:	1884      	adds	r4, r0, r2
 8009918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800991c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009920:	429a      	cmp	r2, r3
 8009922:	d103      	bne.n	800992c <strncmp+0x1c>
 8009924:	42a0      	cmp	r0, r4
 8009926:	d001      	beq.n	800992c <strncmp+0x1c>
 8009928:	2a00      	cmp	r2, #0
 800992a:	d1f5      	bne.n	8009918 <strncmp+0x8>
 800992c:	1ad0      	subs	r0, r2, r3
 800992e:	bd10      	pop	{r4, pc}
 8009930:	4610      	mov	r0, r2
 8009932:	e7fc      	b.n	800992e <strncmp+0x1e>

08009934 <_sbrk_r>:
 8009934:	b538      	push	{r3, r4, r5, lr}
 8009936:	4d06      	ldr	r5, [pc, #24]	@ (8009950 <_sbrk_r+0x1c>)
 8009938:	2300      	movs	r3, #0
 800993a:	4604      	mov	r4, r0
 800993c:	4608      	mov	r0, r1
 800993e:	602b      	str	r3, [r5, #0]
 8009940:	f7f8 fadc 	bl	8001efc <_sbrk>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d102      	bne.n	800994e <_sbrk_r+0x1a>
 8009948:	682b      	ldr	r3, [r5, #0]
 800994a:	b103      	cbz	r3, 800994e <_sbrk_r+0x1a>
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	2000052c 	.word	0x2000052c

08009954 <memcpy>:
 8009954:	440a      	add	r2, r1
 8009956:	4291      	cmp	r1, r2
 8009958:	f100 33ff 	add.w	r3, r0, #4294967295
 800995c:	d100      	bne.n	8009960 <memcpy+0xc>
 800995e:	4770      	bx	lr
 8009960:	b510      	push	{r4, lr}
 8009962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800996a:	4291      	cmp	r1, r2
 800996c:	d1f9      	bne.n	8009962 <memcpy+0xe>
 800996e:	bd10      	pop	{r4, pc}

08009970 <nan>:
 8009970:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009978 <nan+0x8>
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	00000000 	.word	0x00000000
 800997c:	7ff80000 	.word	0x7ff80000

08009980 <__assert_func>:
 8009980:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009982:	4614      	mov	r4, r2
 8009984:	461a      	mov	r2, r3
 8009986:	4b09      	ldr	r3, [pc, #36]	@ (80099ac <__assert_func+0x2c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4605      	mov	r5, r0
 800998c:	68d8      	ldr	r0, [r3, #12]
 800998e:	b954      	cbnz	r4, 80099a6 <__assert_func+0x26>
 8009990:	4b07      	ldr	r3, [pc, #28]	@ (80099b0 <__assert_func+0x30>)
 8009992:	461c      	mov	r4, r3
 8009994:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009998:	9100      	str	r1, [sp, #0]
 800999a:	462b      	mov	r3, r5
 800999c:	4905      	ldr	r1, [pc, #20]	@ (80099b4 <__assert_func+0x34>)
 800999e:	f000 fba7 	bl	800a0f0 <fiprintf>
 80099a2:	f000 fbb7 	bl	800a114 <abort>
 80099a6:	4b04      	ldr	r3, [pc, #16]	@ (80099b8 <__assert_func+0x38>)
 80099a8:	e7f4      	b.n	8009994 <__assert_func+0x14>
 80099aa:	bf00      	nop
 80099ac:	20000018 	.word	0x20000018
 80099b0:	0800ac95 	.word	0x0800ac95
 80099b4:	0800ac67 	.word	0x0800ac67
 80099b8:	0800ac5a 	.word	0x0800ac5a

080099bc <_calloc_r>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	fba1 5402 	umull	r5, r4, r1, r2
 80099c2:	b93c      	cbnz	r4, 80099d4 <_calloc_r+0x18>
 80099c4:	4629      	mov	r1, r5
 80099c6:	f7fe f9c3 	bl	8007d50 <_malloc_r>
 80099ca:	4606      	mov	r6, r0
 80099cc:	b928      	cbnz	r0, 80099da <_calloc_r+0x1e>
 80099ce:	2600      	movs	r6, #0
 80099d0:	4630      	mov	r0, r6
 80099d2:	bd70      	pop	{r4, r5, r6, pc}
 80099d4:	220c      	movs	r2, #12
 80099d6:	6002      	str	r2, [r0, #0]
 80099d8:	e7f9      	b.n	80099ce <_calloc_r+0x12>
 80099da:	462a      	mov	r2, r5
 80099dc:	4621      	mov	r1, r4
 80099de:	f7fd fa70 	bl	8006ec2 <memset>
 80099e2:	e7f5      	b.n	80099d0 <_calloc_r+0x14>

080099e4 <rshift>:
 80099e4:	6903      	ldr	r3, [r0, #16]
 80099e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80099ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 80099f2:	f100 0414 	add.w	r4, r0, #20
 80099f6:	dd45      	ble.n	8009a84 <rshift+0xa0>
 80099f8:	f011 011f 	ands.w	r1, r1, #31
 80099fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a04:	d10c      	bne.n	8009a20 <rshift+0x3c>
 8009a06:	f100 0710 	add.w	r7, r0, #16
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	42b1      	cmp	r1, r6
 8009a0e:	d334      	bcc.n	8009a7a <rshift+0x96>
 8009a10:	1a9b      	subs	r3, r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	1eea      	subs	r2, r5, #3
 8009a16:	4296      	cmp	r6, r2
 8009a18:	bf38      	it	cc
 8009a1a:	2300      	movcc	r3, #0
 8009a1c:	4423      	add	r3, r4
 8009a1e:	e015      	b.n	8009a4c <rshift+0x68>
 8009a20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a24:	f1c1 0820 	rsb	r8, r1, #32
 8009a28:	40cf      	lsrs	r7, r1
 8009a2a:	f105 0e04 	add.w	lr, r5, #4
 8009a2e:	46a1      	mov	r9, r4
 8009a30:	4576      	cmp	r6, lr
 8009a32:	46f4      	mov	ip, lr
 8009a34:	d815      	bhi.n	8009a62 <rshift+0x7e>
 8009a36:	1a9a      	subs	r2, r3, r2
 8009a38:	0092      	lsls	r2, r2, #2
 8009a3a:	3a04      	subs	r2, #4
 8009a3c:	3501      	adds	r5, #1
 8009a3e:	42ae      	cmp	r6, r5
 8009a40:	bf38      	it	cc
 8009a42:	2200      	movcc	r2, #0
 8009a44:	18a3      	adds	r3, r4, r2
 8009a46:	50a7      	str	r7, [r4, r2]
 8009a48:	b107      	cbz	r7, 8009a4c <rshift+0x68>
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	1b1a      	subs	r2, r3, r4
 8009a4e:	42a3      	cmp	r3, r4
 8009a50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a54:	bf08      	it	eq
 8009a56:	2300      	moveq	r3, #0
 8009a58:	6102      	str	r2, [r0, #16]
 8009a5a:	bf08      	it	eq
 8009a5c:	6143      	streq	r3, [r0, #20]
 8009a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a62:	f8dc c000 	ldr.w	ip, [ip]
 8009a66:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a6a:	ea4c 0707 	orr.w	r7, ip, r7
 8009a6e:	f849 7b04 	str.w	r7, [r9], #4
 8009a72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a76:	40cf      	lsrs	r7, r1
 8009a78:	e7da      	b.n	8009a30 <rshift+0x4c>
 8009a7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a82:	e7c3      	b.n	8009a0c <rshift+0x28>
 8009a84:	4623      	mov	r3, r4
 8009a86:	e7e1      	b.n	8009a4c <rshift+0x68>

08009a88 <__hexdig_fun>:
 8009a88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009a8c:	2b09      	cmp	r3, #9
 8009a8e:	d802      	bhi.n	8009a96 <__hexdig_fun+0xe>
 8009a90:	3820      	subs	r0, #32
 8009a92:	b2c0      	uxtb	r0, r0
 8009a94:	4770      	bx	lr
 8009a96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009a9a:	2b05      	cmp	r3, #5
 8009a9c:	d801      	bhi.n	8009aa2 <__hexdig_fun+0x1a>
 8009a9e:	3847      	subs	r0, #71	@ 0x47
 8009aa0:	e7f7      	b.n	8009a92 <__hexdig_fun+0xa>
 8009aa2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009aa6:	2b05      	cmp	r3, #5
 8009aa8:	d801      	bhi.n	8009aae <__hexdig_fun+0x26>
 8009aaa:	3827      	subs	r0, #39	@ 0x27
 8009aac:	e7f1      	b.n	8009a92 <__hexdig_fun+0xa>
 8009aae:	2000      	movs	r0, #0
 8009ab0:	4770      	bx	lr
	...

08009ab4 <__gethex>:
 8009ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab8:	b085      	sub	sp, #20
 8009aba:	468a      	mov	sl, r1
 8009abc:	9302      	str	r3, [sp, #8]
 8009abe:	680b      	ldr	r3, [r1, #0]
 8009ac0:	9001      	str	r0, [sp, #4]
 8009ac2:	4690      	mov	r8, r2
 8009ac4:	1c9c      	adds	r4, r3, #2
 8009ac6:	46a1      	mov	r9, r4
 8009ac8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009acc:	2830      	cmp	r0, #48	@ 0x30
 8009ace:	d0fa      	beq.n	8009ac6 <__gethex+0x12>
 8009ad0:	eba9 0303 	sub.w	r3, r9, r3
 8009ad4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009ad8:	f7ff ffd6 	bl	8009a88 <__hexdig_fun>
 8009adc:	4605      	mov	r5, r0
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	d168      	bne.n	8009bb4 <__gethex+0x100>
 8009ae2:	49a0      	ldr	r1, [pc, #640]	@ (8009d64 <__gethex+0x2b0>)
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	4648      	mov	r0, r9
 8009ae8:	f7ff ff12 	bl	8009910 <strncmp>
 8009aec:	4607      	mov	r7, r0
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d167      	bne.n	8009bc2 <__gethex+0x10e>
 8009af2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009af6:	4626      	mov	r6, r4
 8009af8:	f7ff ffc6 	bl	8009a88 <__hexdig_fun>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d062      	beq.n	8009bc6 <__gethex+0x112>
 8009b00:	4623      	mov	r3, r4
 8009b02:	7818      	ldrb	r0, [r3, #0]
 8009b04:	2830      	cmp	r0, #48	@ 0x30
 8009b06:	4699      	mov	r9, r3
 8009b08:	f103 0301 	add.w	r3, r3, #1
 8009b0c:	d0f9      	beq.n	8009b02 <__gethex+0x4e>
 8009b0e:	f7ff ffbb 	bl	8009a88 <__hexdig_fun>
 8009b12:	fab0 f580 	clz	r5, r0
 8009b16:	096d      	lsrs	r5, r5, #5
 8009b18:	f04f 0b01 	mov.w	fp, #1
 8009b1c:	464a      	mov	r2, r9
 8009b1e:	4616      	mov	r6, r2
 8009b20:	3201      	adds	r2, #1
 8009b22:	7830      	ldrb	r0, [r6, #0]
 8009b24:	f7ff ffb0 	bl	8009a88 <__hexdig_fun>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d1f8      	bne.n	8009b1e <__gethex+0x6a>
 8009b2c:	498d      	ldr	r1, [pc, #564]	@ (8009d64 <__gethex+0x2b0>)
 8009b2e:	2201      	movs	r2, #1
 8009b30:	4630      	mov	r0, r6
 8009b32:	f7ff feed 	bl	8009910 <strncmp>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d13f      	bne.n	8009bba <__gethex+0x106>
 8009b3a:	b944      	cbnz	r4, 8009b4e <__gethex+0x9a>
 8009b3c:	1c74      	adds	r4, r6, #1
 8009b3e:	4622      	mov	r2, r4
 8009b40:	4616      	mov	r6, r2
 8009b42:	3201      	adds	r2, #1
 8009b44:	7830      	ldrb	r0, [r6, #0]
 8009b46:	f7ff ff9f 	bl	8009a88 <__hexdig_fun>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d1f8      	bne.n	8009b40 <__gethex+0x8c>
 8009b4e:	1ba4      	subs	r4, r4, r6
 8009b50:	00a7      	lsls	r7, r4, #2
 8009b52:	7833      	ldrb	r3, [r6, #0]
 8009b54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009b58:	2b50      	cmp	r3, #80	@ 0x50
 8009b5a:	d13e      	bne.n	8009bda <__gethex+0x126>
 8009b5c:	7873      	ldrb	r3, [r6, #1]
 8009b5e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009b60:	d033      	beq.n	8009bca <__gethex+0x116>
 8009b62:	2b2d      	cmp	r3, #45	@ 0x2d
 8009b64:	d034      	beq.n	8009bd0 <__gethex+0x11c>
 8009b66:	1c71      	adds	r1, r6, #1
 8009b68:	2400      	movs	r4, #0
 8009b6a:	7808      	ldrb	r0, [r1, #0]
 8009b6c:	f7ff ff8c 	bl	8009a88 <__hexdig_fun>
 8009b70:	1e43      	subs	r3, r0, #1
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b18      	cmp	r3, #24
 8009b76:	d830      	bhi.n	8009bda <__gethex+0x126>
 8009b78:	f1a0 0210 	sub.w	r2, r0, #16
 8009b7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b80:	f7ff ff82 	bl	8009a88 <__hexdig_fun>
 8009b84:	f100 3cff 	add.w	ip, r0, #4294967295
 8009b88:	fa5f fc8c 	uxtb.w	ip, ip
 8009b8c:	f1bc 0f18 	cmp.w	ip, #24
 8009b90:	f04f 030a 	mov.w	r3, #10
 8009b94:	d91e      	bls.n	8009bd4 <__gethex+0x120>
 8009b96:	b104      	cbz	r4, 8009b9a <__gethex+0xe6>
 8009b98:	4252      	negs	r2, r2
 8009b9a:	4417      	add	r7, r2
 8009b9c:	f8ca 1000 	str.w	r1, [sl]
 8009ba0:	b1ed      	cbz	r5, 8009bde <__gethex+0x12a>
 8009ba2:	f1bb 0f00 	cmp.w	fp, #0
 8009ba6:	bf0c      	ite	eq
 8009ba8:	2506      	moveq	r5, #6
 8009baa:	2500      	movne	r5, #0
 8009bac:	4628      	mov	r0, r5
 8009bae:	b005      	add	sp, #20
 8009bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb4:	2500      	movs	r5, #0
 8009bb6:	462c      	mov	r4, r5
 8009bb8:	e7b0      	b.n	8009b1c <__gethex+0x68>
 8009bba:	2c00      	cmp	r4, #0
 8009bbc:	d1c7      	bne.n	8009b4e <__gethex+0x9a>
 8009bbe:	4627      	mov	r7, r4
 8009bc0:	e7c7      	b.n	8009b52 <__gethex+0x9e>
 8009bc2:	464e      	mov	r6, r9
 8009bc4:	462f      	mov	r7, r5
 8009bc6:	2501      	movs	r5, #1
 8009bc8:	e7c3      	b.n	8009b52 <__gethex+0x9e>
 8009bca:	2400      	movs	r4, #0
 8009bcc:	1cb1      	adds	r1, r6, #2
 8009bce:	e7cc      	b.n	8009b6a <__gethex+0xb6>
 8009bd0:	2401      	movs	r4, #1
 8009bd2:	e7fb      	b.n	8009bcc <__gethex+0x118>
 8009bd4:	fb03 0002 	mla	r0, r3, r2, r0
 8009bd8:	e7ce      	b.n	8009b78 <__gethex+0xc4>
 8009bda:	4631      	mov	r1, r6
 8009bdc:	e7de      	b.n	8009b9c <__gethex+0xe8>
 8009bde:	eba6 0309 	sub.w	r3, r6, r9
 8009be2:	3b01      	subs	r3, #1
 8009be4:	4629      	mov	r1, r5
 8009be6:	2b07      	cmp	r3, #7
 8009be8:	dc0a      	bgt.n	8009c00 <__gethex+0x14c>
 8009bea:	9801      	ldr	r0, [sp, #4]
 8009bec:	f7fe f93c 	bl	8007e68 <_Balloc>
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	b940      	cbnz	r0, 8009c06 <__gethex+0x152>
 8009bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8009d68 <__gethex+0x2b4>)
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	21e4      	movs	r1, #228	@ 0xe4
 8009bfa:	485c      	ldr	r0, [pc, #368]	@ (8009d6c <__gethex+0x2b8>)
 8009bfc:	f7ff fec0 	bl	8009980 <__assert_func>
 8009c00:	3101      	adds	r1, #1
 8009c02:	105b      	asrs	r3, r3, #1
 8009c04:	e7ef      	b.n	8009be6 <__gethex+0x132>
 8009c06:	f100 0a14 	add.w	sl, r0, #20
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	4655      	mov	r5, sl
 8009c0e:	469b      	mov	fp, r3
 8009c10:	45b1      	cmp	r9, r6
 8009c12:	d337      	bcc.n	8009c84 <__gethex+0x1d0>
 8009c14:	f845 bb04 	str.w	fp, [r5], #4
 8009c18:	eba5 050a 	sub.w	r5, r5, sl
 8009c1c:	10ad      	asrs	r5, r5, #2
 8009c1e:	6125      	str	r5, [r4, #16]
 8009c20:	4658      	mov	r0, fp
 8009c22:	f7fe fa13 	bl	800804c <__hi0bits>
 8009c26:	016d      	lsls	r5, r5, #5
 8009c28:	f8d8 6000 	ldr.w	r6, [r8]
 8009c2c:	1a2d      	subs	r5, r5, r0
 8009c2e:	42b5      	cmp	r5, r6
 8009c30:	dd54      	ble.n	8009cdc <__gethex+0x228>
 8009c32:	1bad      	subs	r5, r5, r6
 8009c34:	4629      	mov	r1, r5
 8009c36:	4620      	mov	r0, r4
 8009c38:	f7fe fda7 	bl	800878a <__any_on>
 8009c3c:	4681      	mov	r9, r0
 8009c3e:	b178      	cbz	r0, 8009c60 <__gethex+0x1ac>
 8009c40:	1e6b      	subs	r3, r5, #1
 8009c42:	1159      	asrs	r1, r3, #5
 8009c44:	f003 021f 	and.w	r2, r3, #31
 8009c48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009c4c:	f04f 0901 	mov.w	r9, #1
 8009c50:	fa09 f202 	lsl.w	r2, r9, r2
 8009c54:	420a      	tst	r2, r1
 8009c56:	d003      	beq.n	8009c60 <__gethex+0x1ac>
 8009c58:	454b      	cmp	r3, r9
 8009c5a:	dc36      	bgt.n	8009cca <__gethex+0x216>
 8009c5c:	f04f 0902 	mov.w	r9, #2
 8009c60:	4629      	mov	r1, r5
 8009c62:	4620      	mov	r0, r4
 8009c64:	f7ff febe 	bl	80099e4 <rshift>
 8009c68:	442f      	add	r7, r5
 8009c6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c6e:	42bb      	cmp	r3, r7
 8009c70:	da42      	bge.n	8009cf8 <__gethex+0x244>
 8009c72:	9801      	ldr	r0, [sp, #4]
 8009c74:	4621      	mov	r1, r4
 8009c76:	f7fe f937 	bl	8007ee8 <_Bfree>
 8009c7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	25a3      	movs	r5, #163	@ 0xa3
 8009c82:	e793      	b.n	8009bac <__gethex+0xf8>
 8009c84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009c88:	2a2e      	cmp	r2, #46	@ 0x2e
 8009c8a:	d012      	beq.n	8009cb2 <__gethex+0x1fe>
 8009c8c:	2b20      	cmp	r3, #32
 8009c8e:	d104      	bne.n	8009c9a <__gethex+0x1e6>
 8009c90:	f845 bb04 	str.w	fp, [r5], #4
 8009c94:	f04f 0b00 	mov.w	fp, #0
 8009c98:	465b      	mov	r3, fp
 8009c9a:	7830      	ldrb	r0, [r6, #0]
 8009c9c:	9303      	str	r3, [sp, #12]
 8009c9e:	f7ff fef3 	bl	8009a88 <__hexdig_fun>
 8009ca2:	9b03      	ldr	r3, [sp, #12]
 8009ca4:	f000 000f 	and.w	r0, r0, #15
 8009ca8:	4098      	lsls	r0, r3
 8009caa:	ea4b 0b00 	orr.w	fp, fp, r0
 8009cae:	3304      	adds	r3, #4
 8009cb0:	e7ae      	b.n	8009c10 <__gethex+0x15c>
 8009cb2:	45b1      	cmp	r9, r6
 8009cb4:	d8ea      	bhi.n	8009c8c <__gethex+0x1d8>
 8009cb6:	492b      	ldr	r1, [pc, #172]	@ (8009d64 <__gethex+0x2b0>)
 8009cb8:	9303      	str	r3, [sp, #12]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f7ff fe27 	bl	8009910 <strncmp>
 8009cc2:	9b03      	ldr	r3, [sp, #12]
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d1e1      	bne.n	8009c8c <__gethex+0x1d8>
 8009cc8:	e7a2      	b.n	8009c10 <__gethex+0x15c>
 8009cca:	1ea9      	subs	r1, r5, #2
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f7fe fd5c 	bl	800878a <__any_on>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d0c2      	beq.n	8009c5c <__gethex+0x1a8>
 8009cd6:	f04f 0903 	mov.w	r9, #3
 8009cda:	e7c1      	b.n	8009c60 <__gethex+0x1ac>
 8009cdc:	da09      	bge.n	8009cf2 <__gethex+0x23e>
 8009cde:	1b75      	subs	r5, r6, r5
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	9801      	ldr	r0, [sp, #4]
 8009ce4:	462a      	mov	r2, r5
 8009ce6:	f7fe fb17 	bl	8008318 <__lshift>
 8009cea:	1b7f      	subs	r7, r7, r5
 8009cec:	4604      	mov	r4, r0
 8009cee:	f100 0a14 	add.w	sl, r0, #20
 8009cf2:	f04f 0900 	mov.w	r9, #0
 8009cf6:	e7b8      	b.n	8009c6a <__gethex+0x1b6>
 8009cf8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009cfc:	42bd      	cmp	r5, r7
 8009cfe:	dd6f      	ble.n	8009de0 <__gethex+0x32c>
 8009d00:	1bed      	subs	r5, r5, r7
 8009d02:	42ae      	cmp	r6, r5
 8009d04:	dc34      	bgt.n	8009d70 <__gethex+0x2bc>
 8009d06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d022      	beq.n	8009d54 <__gethex+0x2a0>
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d024      	beq.n	8009d5c <__gethex+0x2a8>
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d115      	bne.n	8009d42 <__gethex+0x28e>
 8009d16:	42ae      	cmp	r6, r5
 8009d18:	d113      	bne.n	8009d42 <__gethex+0x28e>
 8009d1a:	2e01      	cmp	r6, #1
 8009d1c:	d10b      	bne.n	8009d36 <__gethex+0x282>
 8009d1e:	9a02      	ldr	r2, [sp, #8]
 8009d20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d24:	6013      	str	r3, [r2, #0]
 8009d26:	2301      	movs	r3, #1
 8009d28:	6123      	str	r3, [r4, #16]
 8009d2a:	f8ca 3000 	str.w	r3, [sl]
 8009d2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d30:	2562      	movs	r5, #98	@ 0x62
 8009d32:	601c      	str	r4, [r3, #0]
 8009d34:	e73a      	b.n	8009bac <__gethex+0xf8>
 8009d36:	1e71      	subs	r1, r6, #1
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f7fe fd26 	bl	800878a <__any_on>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d1ed      	bne.n	8009d1e <__gethex+0x26a>
 8009d42:	9801      	ldr	r0, [sp, #4]
 8009d44:	4621      	mov	r1, r4
 8009d46:	f7fe f8cf 	bl	8007ee8 <_Bfree>
 8009d4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	6013      	str	r3, [r2, #0]
 8009d50:	2550      	movs	r5, #80	@ 0x50
 8009d52:	e72b      	b.n	8009bac <__gethex+0xf8>
 8009d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1f3      	bne.n	8009d42 <__gethex+0x28e>
 8009d5a:	e7e0      	b.n	8009d1e <__gethex+0x26a>
 8009d5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1dd      	bne.n	8009d1e <__gethex+0x26a>
 8009d62:	e7ee      	b.n	8009d42 <__gethex+0x28e>
 8009d64:	0800aae8 	.word	0x0800aae8
 8009d68:	0800a97d 	.word	0x0800a97d
 8009d6c:	0800ac96 	.word	0x0800ac96
 8009d70:	1e6f      	subs	r7, r5, #1
 8009d72:	f1b9 0f00 	cmp.w	r9, #0
 8009d76:	d130      	bne.n	8009dda <__gethex+0x326>
 8009d78:	b127      	cbz	r7, 8009d84 <__gethex+0x2d0>
 8009d7a:	4639      	mov	r1, r7
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f7fe fd04 	bl	800878a <__any_on>
 8009d82:	4681      	mov	r9, r0
 8009d84:	117a      	asrs	r2, r7, #5
 8009d86:	2301      	movs	r3, #1
 8009d88:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009d8c:	f007 071f 	and.w	r7, r7, #31
 8009d90:	40bb      	lsls	r3, r7
 8009d92:	4213      	tst	r3, r2
 8009d94:	4629      	mov	r1, r5
 8009d96:	4620      	mov	r0, r4
 8009d98:	bf18      	it	ne
 8009d9a:	f049 0902 	orrne.w	r9, r9, #2
 8009d9e:	f7ff fe21 	bl	80099e4 <rshift>
 8009da2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009da6:	1b76      	subs	r6, r6, r5
 8009da8:	2502      	movs	r5, #2
 8009daa:	f1b9 0f00 	cmp.w	r9, #0
 8009dae:	d047      	beq.n	8009e40 <__gethex+0x38c>
 8009db0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d015      	beq.n	8009de4 <__gethex+0x330>
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d017      	beq.n	8009dec <__gethex+0x338>
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d109      	bne.n	8009dd4 <__gethex+0x320>
 8009dc0:	f019 0f02 	tst.w	r9, #2
 8009dc4:	d006      	beq.n	8009dd4 <__gethex+0x320>
 8009dc6:	f8da 3000 	ldr.w	r3, [sl]
 8009dca:	ea49 0903 	orr.w	r9, r9, r3
 8009dce:	f019 0f01 	tst.w	r9, #1
 8009dd2:	d10e      	bne.n	8009df2 <__gethex+0x33e>
 8009dd4:	f045 0510 	orr.w	r5, r5, #16
 8009dd8:	e032      	b.n	8009e40 <__gethex+0x38c>
 8009dda:	f04f 0901 	mov.w	r9, #1
 8009dde:	e7d1      	b.n	8009d84 <__gethex+0x2d0>
 8009de0:	2501      	movs	r5, #1
 8009de2:	e7e2      	b.n	8009daa <__gethex+0x2f6>
 8009de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009de6:	f1c3 0301 	rsb	r3, r3, #1
 8009dea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009dec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d0f0      	beq.n	8009dd4 <__gethex+0x320>
 8009df2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009df6:	f104 0314 	add.w	r3, r4, #20
 8009dfa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009dfe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e02:	f04f 0c00 	mov.w	ip, #0
 8009e06:	4618      	mov	r0, r3
 8009e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e10:	d01b      	beq.n	8009e4a <__gethex+0x396>
 8009e12:	3201      	adds	r2, #1
 8009e14:	6002      	str	r2, [r0, #0]
 8009e16:	2d02      	cmp	r5, #2
 8009e18:	f104 0314 	add.w	r3, r4, #20
 8009e1c:	d13c      	bne.n	8009e98 <__gethex+0x3e4>
 8009e1e:	f8d8 2000 	ldr.w	r2, [r8]
 8009e22:	3a01      	subs	r2, #1
 8009e24:	42b2      	cmp	r2, r6
 8009e26:	d109      	bne.n	8009e3c <__gethex+0x388>
 8009e28:	1171      	asrs	r1, r6, #5
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e30:	f006 061f 	and.w	r6, r6, #31
 8009e34:	fa02 f606 	lsl.w	r6, r2, r6
 8009e38:	421e      	tst	r6, r3
 8009e3a:	d13a      	bne.n	8009eb2 <__gethex+0x3fe>
 8009e3c:	f045 0520 	orr.w	r5, r5, #32
 8009e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e42:	601c      	str	r4, [r3, #0]
 8009e44:	9b02      	ldr	r3, [sp, #8]
 8009e46:	601f      	str	r7, [r3, #0]
 8009e48:	e6b0      	b.n	8009bac <__gethex+0xf8>
 8009e4a:	4299      	cmp	r1, r3
 8009e4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e50:	d8d9      	bhi.n	8009e06 <__gethex+0x352>
 8009e52:	68a3      	ldr	r3, [r4, #8]
 8009e54:	459b      	cmp	fp, r3
 8009e56:	db17      	blt.n	8009e88 <__gethex+0x3d4>
 8009e58:	6861      	ldr	r1, [r4, #4]
 8009e5a:	9801      	ldr	r0, [sp, #4]
 8009e5c:	3101      	adds	r1, #1
 8009e5e:	f7fe f803 	bl	8007e68 <_Balloc>
 8009e62:	4681      	mov	r9, r0
 8009e64:	b918      	cbnz	r0, 8009e6e <__gethex+0x3ba>
 8009e66:	4b1a      	ldr	r3, [pc, #104]	@ (8009ed0 <__gethex+0x41c>)
 8009e68:	4602      	mov	r2, r0
 8009e6a:	2184      	movs	r1, #132	@ 0x84
 8009e6c:	e6c5      	b.n	8009bfa <__gethex+0x146>
 8009e6e:	6922      	ldr	r2, [r4, #16]
 8009e70:	3202      	adds	r2, #2
 8009e72:	f104 010c 	add.w	r1, r4, #12
 8009e76:	0092      	lsls	r2, r2, #2
 8009e78:	300c      	adds	r0, #12
 8009e7a:	f7ff fd6b 	bl	8009954 <memcpy>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	9801      	ldr	r0, [sp, #4]
 8009e82:	f7fe f831 	bl	8007ee8 <_Bfree>
 8009e86:	464c      	mov	r4, r9
 8009e88:	6923      	ldr	r3, [r4, #16]
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e90:	6122      	str	r2, [r4, #16]
 8009e92:	2201      	movs	r2, #1
 8009e94:	615a      	str	r2, [r3, #20]
 8009e96:	e7be      	b.n	8009e16 <__gethex+0x362>
 8009e98:	6922      	ldr	r2, [r4, #16]
 8009e9a:	455a      	cmp	r2, fp
 8009e9c:	dd0b      	ble.n	8009eb6 <__gethex+0x402>
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f7ff fd9f 	bl	80099e4 <rshift>
 8009ea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009eaa:	3701      	adds	r7, #1
 8009eac:	42bb      	cmp	r3, r7
 8009eae:	f6ff aee0 	blt.w	8009c72 <__gethex+0x1be>
 8009eb2:	2501      	movs	r5, #1
 8009eb4:	e7c2      	b.n	8009e3c <__gethex+0x388>
 8009eb6:	f016 061f 	ands.w	r6, r6, #31
 8009eba:	d0fa      	beq.n	8009eb2 <__gethex+0x3fe>
 8009ebc:	4453      	add	r3, sl
 8009ebe:	f1c6 0620 	rsb	r6, r6, #32
 8009ec2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009ec6:	f7fe f8c1 	bl	800804c <__hi0bits>
 8009eca:	42b0      	cmp	r0, r6
 8009ecc:	dbe7      	blt.n	8009e9e <__gethex+0x3ea>
 8009ece:	e7f0      	b.n	8009eb2 <__gethex+0x3fe>
 8009ed0:	0800a97d 	.word	0x0800a97d

08009ed4 <L_shift>:
 8009ed4:	f1c2 0208 	rsb	r2, r2, #8
 8009ed8:	0092      	lsls	r2, r2, #2
 8009eda:	b570      	push	{r4, r5, r6, lr}
 8009edc:	f1c2 0620 	rsb	r6, r2, #32
 8009ee0:	6843      	ldr	r3, [r0, #4]
 8009ee2:	6804      	ldr	r4, [r0, #0]
 8009ee4:	fa03 f506 	lsl.w	r5, r3, r6
 8009ee8:	432c      	orrs	r4, r5
 8009eea:	40d3      	lsrs	r3, r2
 8009eec:	6004      	str	r4, [r0, #0]
 8009eee:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ef2:	4288      	cmp	r0, r1
 8009ef4:	d3f4      	bcc.n	8009ee0 <L_shift+0xc>
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}

08009ef8 <__match>:
 8009ef8:	b530      	push	{r4, r5, lr}
 8009efa:	6803      	ldr	r3, [r0, #0]
 8009efc:	3301      	adds	r3, #1
 8009efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f02:	b914      	cbnz	r4, 8009f0a <__match+0x12>
 8009f04:	6003      	str	r3, [r0, #0]
 8009f06:	2001      	movs	r0, #1
 8009f08:	bd30      	pop	{r4, r5, pc}
 8009f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009f12:	2d19      	cmp	r5, #25
 8009f14:	bf98      	it	ls
 8009f16:	3220      	addls	r2, #32
 8009f18:	42a2      	cmp	r2, r4
 8009f1a:	d0f0      	beq.n	8009efe <__match+0x6>
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	e7f3      	b.n	8009f08 <__match+0x10>

08009f20 <__hexnan>:
 8009f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f24:	680b      	ldr	r3, [r1, #0]
 8009f26:	6801      	ldr	r1, [r0, #0]
 8009f28:	115e      	asrs	r6, r3, #5
 8009f2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f2e:	f013 031f 	ands.w	r3, r3, #31
 8009f32:	b087      	sub	sp, #28
 8009f34:	bf18      	it	ne
 8009f36:	3604      	addne	r6, #4
 8009f38:	2500      	movs	r5, #0
 8009f3a:	1f37      	subs	r7, r6, #4
 8009f3c:	4682      	mov	sl, r0
 8009f3e:	4690      	mov	r8, r2
 8009f40:	9301      	str	r3, [sp, #4]
 8009f42:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f46:	46b9      	mov	r9, r7
 8009f48:	463c      	mov	r4, r7
 8009f4a:	9502      	str	r5, [sp, #8]
 8009f4c:	46ab      	mov	fp, r5
 8009f4e:	784a      	ldrb	r2, [r1, #1]
 8009f50:	1c4b      	adds	r3, r1, #1
 8009f52:	9303      	str	r3, [sp, #12]
 8009f54:	b342      	cbz	r2, 8009fa8 <__hexnan+0x88>
 8009f56:	4610      	mov	r0, r2
 8009f58:	9105      	str	r1, [sp, #20]
 8009f5a:	9204      	str	r2, [sp, #16]
 8009f5c:	f7ff fd94 	bl	8009a88 <__hexdig_fun>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d151      	bne.n	800a008 <__hexnan+0xe8>
 8009f64:	9a04      	ldr	r2, [sp, #16]
 8009f66:	9905      	ldr	r1, [sp, #20]
 8009f68:	2a20      	cmp	r2, #32
 8009f6a:	d818      	bhi.n	8009f9e <__hexnan+0x7e>
 8009f6c:	9b02      	ldr	r3, [sp, #8]
 8009f6e:	459b      	cmp	fp, r3
 8009f70:	dd13      	ble.n	8009f9a <__hexnan+0x7a>
 8009f72:	454c      	cmp	r4, r9
 8009f74:	d206      	bcs.n	8009f84 <__hexnan+0x64>
 8009f76:	2d07      	cmp	r5, #7
 8009f78:	dc04      	bgt.n	8009f84 <__hexnan+0x64>
 8009f7a:	462a      	mov	r2, r5
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f7ff ffa8 	bl	8009ed4 <L_shift>
 8009f84:	4544      	cmp	r4, r8
 8009f86:	d952      	bls.n	800a02e <__hexnan+0x10e>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	f1a4 0904 	sub.w	r9, r4, #4
 8009f8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f92:	f8cd b008 	str.w	fp, [sp, #8]
 8009f96:	464c      	mov	r4, r9
 8009f98:	461d      	mov	r5, r3
 8009f9a:	9903      	ldr	r1, [sp, #12]
 8009f9c:	e7d7      	b.n	8009f4e <__hexnan+0x2e>
 8009f9e:	2a29      	cmp	r2, #41	@ 0x29
 8009fa0:	d157      	bne.n	800a052 <__hexnan+0x132>
 8009fa2:	3102      	adds	r1, #2
 8009fa4:	f8ca 1000 	str.w	r1, [sl]
 8009fa8:	f1bb 0f00 	cmp.w	fp, #0
 8009fac:	d051      	beq.n	800a052 <__hexnan+0x132>
 8009fae:	454c      	cmp	r4, r9
 8009fb0:	d206      	bcs.n	8009fc0 <__hexnan+0xa0>
 8009fb2:	2d07      	cmp	r5, #7
 8009fb4:	dc04      	bgt.n	8009fc0 <__hexnan+0xa0>
 8009fb6:	462a      	mov	r2, r5
 8009fb8:	4649      	mov	r1, r9
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f7ff ff8a 	bl	8009ed4 <L_shift>
 8009fc0:	4544      	cmp	r4, r8
 8009fc2:	d936      	bls.n	800a032 <__hexnan+0x112>
 8009fc4:	f1a8 0204 	sub.w	r2, r8, #4
 8009fc8:	4623      	mov	r3, r4
 8009fca:	f853 1b04 	ldr.w	r1, [r3], #4
 8009fce:	f842 1f04 	str.w	r1, [r2, #4]!
 8009fd2:	429f      	cmp	r7, r3
 8009fd4:	d2f9      	bcs.n	8009fca <__hexnan+0xaa>
 8009fd6:	1b3b      	subs	r3, r7, r4
 8009fd8:	f023 0303 	bic.w	r3, r3, #3
 8009fdc:	3304      	adds	r3, #4
 8009fde:	3401      	adds	r4, #1
 8009fe0:	3e03      	subs	r6, #3
 8009fe2:	42b4      	cmp	r4, r6
 8009fe4:	bf88      	it	hi
 8009fe6:	2304      	movhi	r3, #4
 8009fe8:	4443      	add	r3, r8
 8009fea:	2200      	movs	r2, #0
 8009fec:	f843 2b04 	str.w	r2, [r3], #4
 8009ff0:	429f      	cmp	r7, r3
 8009ff2:	d2fb      	bcs.n	8009fec <__hexnan+0xcc>
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	b91b      	cbnz	r3, 800a000 <__hexnan+0xe0>
 8009ff8:	4547      	cmp	r7, r8
 8009ffa:	d128      	bne.n	800a04e <__hexnan+0x12e>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	2005      	movs	r0, #5
 800a002:	b007      	add	sp, #28
 800a004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a008:	3501      	adds	r5, #1
 800a00a:	2d08      	cmp	r5, #8
 800a00c:	f10b 0b01 	add.w	fp, fp, #1
 800a010:	dd06      	ble.n	800a020 <__hexnan+0x100>
 800a012:	4544      	cmp	r4, r8
 800a014:	d9c1      	bls.n	8009f9a <__hexnan+0x7a>
 800a016:	2300      	movs	r3, #0
 800a018:	f844 3c04 	str.w	r3, [r4, #-4]
 800a01c:	2501      	movs	r5, #1
 800a01e:	3c04      	subs	r4, #4
 800a020:	6822      	ldr	r2, [r4, #0]
 800a022:	f000 000f 	and.w	r0, r0, #15
 800a026:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a02a:	6020      	str	r0, [r4, #0]
 800a02c:	e7b5      	b.n	8009f9a <__hexnan+0x7a>
 800a02e:	2508      	movs	r5, #8
 800a030:	e7b3      	b.n	8009f9a <__hexnan+0x7a>
 800a032:	9b01      	ldr	r3, [sp, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d0dd      	beq.n	8009ff4 <__hexnan+0xd4>
 800a038:	f1c3 0320 	rsb	r3, r3, #32
 800a03c:	f04f 32ff 	mov.w	r2, #4294967295
 800a040:	40da      	lsrs	r2, r3
 800a042:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a046:	4013      	ands	r3, r2
 800a048:	f846 3c04 	str.w	r3, [r6, #-4]
 800a04c:	e7d2      	b.n	8009ff4 <__hexnan+0xd4>
 800a04e:	3f04      	subs	r7, #4
 800a050:	e7d0      	b.n	8009ff4 <__hexnan+0xd4>
 800a052:	2004      	movs	r0, #4
 800a054:	e7d5      	b.n	800a002 <__hexnan+0xe2>

0800a056 <__ascii_mbtowc>:
 800a056:	b082      	sub	sp, #8
 800a058:	b901      	cbnz	r1, 800a05c <__ascii_mbtowc+0x6>
 800a05a:	a901      	add	r1, sp, #4
 800a05c:	b142      	cbz	r2, 800a070 <__ascii_mbtowc+0x1a>
 800a05e:	b14b      	cbz	r3, 800a074 <__ascii_mbtowc+0x1e>
 800a060:	7813      	ldrb	r3, [r2, #0]
 800a062:	600b      	str	r3, [r1, #0]
 800a064:	7812      	ldrb	r2, [r2, #0]
 800a066:	1e10      	subs	r0, r2, #0
 800a068:	bf18      	it	ne
 800a06a:	2001      	movne	r0, #1
 800a06c:	b002      	add	sp, #8
 800a06e:	4770      	bx	lr
 800a070:	4610      	mov	r0, r2
 800a072:	e7fb      	b.n	800a06c <__ascii_mbtowc+0x16>
 800a074:	f06f 0001 	mvn.w	r0, #1
 800a078:	e7f8      	b.n	800a06c <__ascii_mbtowc+0x16>

0800a07a <_realloc_r>:
 800a07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a07e:	4680      	mov	r8, r0
 800a080:	4615      	mov	r5, r2
 800a082:	460c      	mov	r4, r1
 800a084:	b921      	cbnz	r1, 800a090 <_realloc_r+0x16>
 800a086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a08a:	4611      	mov	r1, r2
 800a08c:	f7fd be60 	b.w	8007d50 <_malloc_r>
 800a090:	b92a      	cbnz	r2, 800a09e <_realloc_r+0x24>
 800a092:	f7fd fde9 	bl	8007c68 <_free_r>
 800a096:	2400      	movs	r4, #0
 800a098:	4620      	mov	r0, r4
 800a09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a09e:	f000 f840 	bl	800a122 <_malloc_usable_size_r>
 800a0a2:	4285      	cmp	r5, r0
 800a0a4:	4606      	mov	r6, r0
 800a0a6:	d802      	bhi.n	800a0ae <_realloc_r+0x34>
 800a0a8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a0ac:	d8f4      	bhi.n	800a098 <_realloc_r+0x1e>
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	f7fd fe4d 	bl	8007d50 <_malloc_r>
 800a0b6:	4607      	mov	r7, r0
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d0ec      	beq.n	800a096 <_realloc_r+0x1c>
 800a0bc:	42b5      	cmp	r5, r6
 800a0be:	462a      	mov	r2, r5
 800a0c0:	4621      	mov	r1, r4
 800a0c2:	bf28      	it	cs
 800a0c4:	4632      	movcs	r2, r6
 800a0c6:	f7ff fc45 	bl	8009954 <memcpy>
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	4640      	mov	r0, r8
 800a0ce:	f7fd fdcb 	bl	8007c68 <_free_r>
 800a0d2:	463c      	mov	r4, r7
 800a0d4:	e7e0      	b.n	800a098 <_realloc_r+0x1e>

0800a0d6 <__ascii_wctomb>:
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	b141      	cbz	r1, 800a0ee <__ascii_wctomb+0x18>
 800a0dc:	2aff      	cmp	r2, #255	@ 0xff
 800a0de:	d904      	bls.n	800a0ea <__ascii_wctomb+0x14>
 800a0e0:	228a      	movs	r2, #138	@ 0x8a
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e8:	4770      	bx	lr
 800a0ea:	700a      	strb	r2, [r1, #0]
 800a0ec:	2001      	movs	r0, #1
 800a0ee:	4770      	bx	lr

0800a0f0 <fiprintf>:
 800a0f0:	b40e      	push	{r1, r2, r3}
 800a0f2:	b503      	push	{r0, r1, lr}
 800a0f4:	4601      	mov	r1, r0
 800a0f6:	ab03      	add	r3, sp, #12
 800a0f8:	4805      	ldr	r0, [pc, #20]	@ (800a110 <fiprintf+0x20>)
 800a0fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0fe:	6800      	ldr	r0, [r0, #0]
 800a100:	9301      	str	r3, [sp, #4]
 800a102:	f000 f83f 	bl	800a184 <_vfiprintf_r>
 800a106:	b002      	add	sp, #8
 800a108:	f85d eb04 	ldr.w	lr, [sp], #4
 800a10c:	b003      	add	sp, #12
 800a10e:	4770      	bx	lr
 800a110:	20000018 	.word	0x20000018

0800a114 <abort>:
 800a114:	b508      	push	{r3, lr}
 800a116:	2006      	movs	r0, #6
 800a118:	f000 fa08 	bl	800a52c <raise>
 800a11c:	2001      	movs	r0, #1
 800a11e:	f7f7 fe75 	bl	8001e0c <_exit>

0800a122 <_malloc_usable_size_r>:
 800a122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a126:	1f18      	subs	r0, r3, #4
 800a128:	2b00      	cmp	r3, #0
 800a12a:	bfbc      	itt	lt
 800a12c:	580b      	ldrlt	r3, [r1, r0]
 800a12e:	18c0      	addlt	r0, r0, r3
 800a130:	4770      	bx	lr

0800a132 <__sfputc_r>:
 800a132:	6893      	ldr	r3, [r2, #8]
 800a134:	3b01      	subs	r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	b410      	push	{r4}
 800a13a:	6093      	str	r3, [r2, #8]
 800a13c:	da08      	bge.n	800a150 <__sfputc_r+0x1e>
 800a13e:	6994      	ldr	r4, [r2, #24]
 800a140:	42a3      	cmp	r3, r4
 800a142:	db01      	blt.n	800a148 <__sfputc_r+0x16>
 800a144:	290a      	cmp	r1, #10
 800a146:	d103      	bne.n	800a150 <__sfputc_r+0x1e>
 800a148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a14c:	f000 b932 	b.w	800a3b4 <__swbuf_r>
 800a150:	6813      	ldr	r3, [r2, #0]
 800a152:	1c58      	adds	r0, r3, #1
 800a154:	6010      	str	r0, [r2, #0]
 800a156:	7019      	strb	r1, [r3, #0]
 800a158:	4608      	mov	r0, r1
 800a15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <__sfputs_r>:
 800a160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a162:	4606      	mov	r6, r0
 800a164:	460f      	mov	r7, r1
 800a166:	4614      	mov	r4, r2
 800a168:	18d5      	adds	r5, r2, r3
 800a16a:	42ac      	cmp	r4, r5
 800a16c:	d101      	bne.n	800a172 <__sfputs_r+0x12>
 800a16e:	2000      	movs	r0, #0
 800a170:	e007      	b.n	800a182 <__sfputs_r+0x22>
 800a172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a176:	463a      	mov	r2, r7
 800a178:	4630      	mov	r0, r6
 800a17a:	f7ff ffda 	bl	800a132 <__sfputc_r>
 800a17e:	1c43      	adds	r3, r0, #1
 800a180:	d1f3      	bne.n	800a16a <__sfputs_r+0xa>
 800a182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a184 <_vfiprintf_r>:
 800a184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a188:	460d      	mov	r5, r1
 800a18a:	b09d      	sub	sp, #116	@ 0x74
 800a18c:	4614      	mov	r4, r2
 800a18e:	4698      	mov	r8, r3
 800a190:	4606      	mov	r6, r0
 800a192:	b118      	cbz	r0, 800a19c <_vfiprintf_r+0x18>
 800a194:	6a03      	ldr	r3, [r0, #32]
 800a196:	b90b      	cbnz	r3, 800a19c <_vfiprintf_r+0x18>
 800a198:	f7fc fdfa 	bl	8006d90 <__sinit>
 800a19c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a19e:	07d9      	lsls	r1, r3, #31
 800a1a0:	d405      	bmi.n	800a1ae <_vfiprintf_r+0x2a>
 800a1a2:	89ab      	ldrh	r3, [r5, #12]
 800a1a4:	059a      	lsls	r2, r3, #22
 800a1a6:	d402      	bmi.n	800a1ae <_vfiprintf_r+0x2a>
 800a1a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1aa:	f7fc ff08 	bl	8006fbe <__retarget_lock_acquire_recursive>
 800a1ae:	89ab      	ldrh	r3, [r5, #12]
 800a1b0:	071b      	lsls	r3, r3, #28
 800a1b2:	d501      	bpl.n	800a1b8 <_vfiprintf_r+0x34>
 800a1b4:	692b      	ldr	r3, [r5, #16]
 800a1b6:	b99b      	cbnz	r3, 800a1e0 <_vfiprintf_r+0x5c>
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f000 f938 	bl	800a430 <__swsetup_r>
 800a1c0:	b170      	cbz	r0, 800a1e0 <_vfiprintf_r+0x5c>
 800a1c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1c4:	07dc      	lsls	r4, r3, #31
 800a1c6:	d504      	bpl.n	800a1d2 <_vfiprintf_r+0x4e>
 800a1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1cc:	b01d      	add	sp, #116	@ 0x74
 800a1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d2:	89ab      	ldrh	r3, [r5, #12]
 800a1d4:	0598      	lsls	r0, r3, #22
 800a1d6:	d4f7      	bmi.n	800a1c8 <_vfiprintf_r+0x44>
 800a1d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1da:	f7fc fef1 	bl	8006fc0 <__retarget_lock_release_recursive>
 800a1de:	e7f3      	b.n	800a1c8 <_vfiprintf_r+0x44>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1e4:	2320      	movs	r3, #32
 800a1e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ee:	2330      	movs	r3, #48	@ 0x30
 800a1f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a3a0 <_vfiprintf_r+0x21c>
 800a1f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1f8:	f04f 0901 	mov.w	r9, #1
 800a1fc:	4623      	mov	r3, r4
 800a1fe:	469a      	mov	sl, r3
 800a200:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a204:	b10a      	cbz	r2, 800a20a <_vfiprintf_r+0x86>
 800a206:	2a25      	cmp	r2, #37	@ 0x25
 800a208:	d1f9      	bne.n	800a1fe <_vfiprintf_r+0x7a>
 800a20a:	ebba 0b04 	subs.w	fp, sl, r4
 800a20e:	d00b      	beq.n	800a228 <_vfiprintf_r+0xa4>
 800a210:	465b      	mov	r3, fp
 800a212:	4622      	mov	r2, r4
 800a214:	4629      	mov	r1, r5
 800a216:	4630      	mov	r0, r6
 800a218:	f7ff ffa2 	bl	800a160 <__sfputs_r>
 800a21c:	3001      	adds	r0, #1
 800a21e:	f000 80a7 	beq.w	800a370 <_vfiprintf_r+0x1ec>
 800a222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a224:	445a      	add	r2, fp
 800a226:	9209      	str	r2, [sp, #36]	@ 0x24
 800a228:	f89a 3000 	ldrb.w	r3, [sl]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f000 809f 	beq.w	800a370 <_vfiprintf_r+0x1ec>
 800a232:	2300      	movs	r3, #0
 800a234:	f04f 32ff 	mov.w	r2, #4294967295
 800a238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a23c:	f10a 0a01 	add.w	sl, sl, #1
 800a240:	9304      	str	r3, [sp, #16]
 800a242:	9307      	str	r3, [sp, #28]
 800a244:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a248:	931a      	str	r3, [sp, #104]	@ 0x68
 800a24a:	4654      	mov	r4, sl
 800a24c:	2205      	movs	r2, #5
 800a24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a252:	4853      	ldr	r0, [pc, #332]	@ (800a3a0 <_vfiprintf_r+0x21c>)
 800a254:	f7f5 ffdc 	bl	8000210 <memchr>
 800a258:	9a04      	ldr	r2, [sp, #16]
 800a25a:	b9d8      	cbnz	r0, 800a294 <_vfiprintf_r+0x110>
 800a25c:	06d1      	lsls	r1, r2, #27
 800a25e:	bf44      	itt	mi
 800a260:	2320      	movmi	r3, #32
 800a262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a266:	0713      	lsls	r3, r2, #28
 800a268:	bf44      	itt	mi
 800a26a:	232b      	movmi	r3, #43	@ 0x2b
 800a26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a270:	f89a 3000 	ldrb.w	r3, [sl]
 800a274:	2b2a      	cmp	r3, #42	@ 0x2a
 800a276:	d015      	beq.n	800a2a4 <_vfiprintf_r+0x120>
 800a278:	9a07      	ldr	r2, [sp, #28]
 800a27a:	4654      	mov	r4, sl
 800a27c:	2000      	movs	r0, #0
 800a27e:	f04f 0c0a 	mov.w	ip, #10
 800a282:	4621      	mov	r1, r4
 800a284:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a288:	3b30      	subs	r3, #48	@ 0x30
 800a28a:	2b09      	cmp	r3, #9
 800a28c:	d94b      	bls.n	800a326 <_vfiprintf_r+0x1a2>
 800a28e:	b1b0      	cbz	r0, 800a2be <_vfiprintf_r+0x13a>
 800a290:	9207      	str	r2, [sp, #28]
 800a292:	e014      	b.n	800a2be <_vfiprintf_r+0x13a>
 800a294:	eba0 0308 	sub.w	r3, r0, r8
 800a298:	fa09 f303 	lsl.w	r3, r9, r3
 800a29c:	4313      	orrs	r3, r2
 800a29e:	9304      	str	r3, [sp, #16]
 800a2a0:	46a2      	mov	sl, r4
 800a2a2:	e7d2      	b.n	800a24a <_vfiprintf_r+0xc6>
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	1d19      	adds	r1, r3, #4
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	9103      	str	r1, [sp, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	bfbb      	ittet	lt
 800a2b0:	425b      	neglt	r3, r3
 800a2b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b6:	9307      	strge	r3, [sp, #28]
 800a2b8:	9307      	strlt	r3, [sp, #28]
 800a2ba:	bfb8      	it	lt
 800a2bc:	9204      	strlt	r2, [sp, #16]
 800a2be:	7823      	ldrb	r3, [r4, #0]
 800a2c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2c2:	d10a      	bne.n	800a2da <_vfiprintf_r+0x156>
 800a2c4:	7863      	ldrb	r3, [r4, #1]
 800a2c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2c8:	d132      	bne.n	800a330 <_vfiprintf_r+0x1ac>
 800a2ca:	9b03      	ldr	r3, [sp, #12]
 800a2cc:	1d1a      	adds	r2, r3, #4
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	9203      	str	r2, [sp, #12]
 800a2d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2d6:	3402      	adds	r4, #2
 800a2d8:	9305      	str	r3, [sp, #20]
 800a2da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3b0 <_vfiprintf_r+0x22c>
 800a2de:	7821      	ldrb	r1, [r4, #0]
 800a2e0:	2203      	movs	r2, #3
 800a2e2:	4650      	mov	r0, sl
 800a2e4:	f7f5 ff94 	bl	8000210 <memchr>
 800a2e8:	b138      	cbz	r0, 800a2fa <_vfiprintf_r+0x176>
 800a2ea:	9b04      	ldr	r3, [sp, #16]
 800a2ec:	eba0 000a 	sub.w	r0, r0, sl
 800a2f0:	2240      	movs	r2, #64	@ 0x40
 800a2f2:	4082      	lsls	r2, r0
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	3401      	adds	r4, #1
 800a2f8:	9304      	str	r3, [sp, #16]
 800a2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2fe:	4829      	ldr	r0, [pc, #164]	@ (800a3a4 <_vfiprintf_r+0x220>)
 800a300:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a304:	2206      	movs	r2, #6
 800a306:	f7f5 ff83 	bl	8000210 <memchr>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d03f      	beq.n	800a38e <_vfiprintf_r+0x20a>
 800a30e:	4b26      	ldr	r3, [pc, #152]	@ (800a3a8 <_vfiprintf_r+0x224>)
 800a310:	bb1b      	cbnz	r3, 800a35a <_vfiprintf_r+0x1d6>
 800a312:	9b03      	ldr	r3, [sp, #12]
 800a314:	3307      	adds	r3, #7
 800a316:	f023 0307 	bic.w	r3, r3, #7
 800a31a:	3308      	adds	r3, #8
 800a31c:	9303      	str	r3, [sp, #12]
 800a31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a320:	443b      	add	r3, r7
 800a322:	9309      	str	r3, [sp, #36]	@ 0x24
 800a324:	e76a      	b.n	800a1fc <_vfiprintf_r+0x78>
 800a326:	fb0c 3202 	mla	r2, ip, r2, r3
 800a32a:	460c      	mov	r4, r1
 800a32c:	2001      	movs	r0, #1
 800a32e:	e7a8      	b.n	800a282 <_vfiprintf_r+0xfe>
 800a330:	2300      	movs	r3, #0
 800a332:	3401      	adds	r4, #1
 800a334:	9305      	str	r3, [sp, #20]
 800a336:	4619      	mov	r1, r3
 800a338:	f04f 0c0a 	mov.w	ip, #10
 800a33c:	4620      	mov	r0, r4
 800a33e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a342:	3a30      	subs	r2, #48	@ 0x30
 800a344:	2a09      	cmp	r2, #9
 800a346:	d903      	bls.n	800a350 <_vfiprintf_r+0x1cc>
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d0c6      	beq.n	800a2da <_vfiprintf_r+0x156>
 800a34c:	9105      	str	r1, [sp, #20]
 800a34e:	e7c4      	b.n	800a2da <_vfiprintf_r+0x156>
 800a350:	fb0c 2101 	mla	r1, ip, r1, r2
 800a354:	4604      	mov	r4, r0
 800a356:	2301      	movs	r3, #1
 800a358:	e7f0      	b.n	800a33c <_vfiprintf_r+0x1b8>
 800a35a:	ab03      	add	r3, sp, #12
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	462a      	mov	r2, r5
 800a360:	4b12      	ldr	r3, [pc, #72]	@ (800a3ac <_vfiprintf_r+0x228>)
 800a362:	a904      	add	r1, sp, #16
 800a364:	4630      	mov	r0, r6
 800a366:	f7fb febb 	bl	80060e0 <_printf_float>
 800a36a:	4607      	mov	r7, r0
 800a36c:	1c78      	adds	r0, r7, #1
 800a36e:	d1d6      	bne.n	800a31e <_vfiprintf_r+0x19a>
 800a370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a372:	07d9      	lsls	r1, r3, #31
 800a374:	d405      	bmi.n	800a382 <_vfiprintf_r+0x1fe>
 800a376:	89ab      	ldrh	r3, [r5, #12]
 800a378:	059a      	lsls	r2, r3, #22
 800a37a:	d402      	bmi.n	800a382 <_vfiprintf_r+0x1fe>
 800a37c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a37e:	f7fc fe1f 	bl	8006fc0 <__retarget_lock_release_recursive>
 800a382:	89ab      	ldrh	r3, [r5, #12]
 800a384:	065b      	lsls	r3, r3, #25
 800a386:	f53f af1f 	bmi.w	800a1c8 <_vfiprintf_r+0x44>
 800a38a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a38c:	e71e      	b.n	800a1cc <_vfiprintf_r+0x48>
 800a38e:	ab03      	add	r3, sp, #12
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	462a      	mov	r2, r5
 800a394:	4b05      	ldr	r3, [pc, #20]	@ (800a3ac <_vfiprintf_r+0x228>)
 800a396:	a904      	add	r1, sp, #16
 800a398:	4630      	mov	r0, r6
 800a39a:	f7fc f939 	bl	8006610 <_printf_i>
 800a39e:	e7e4      	b.n	800a36a <_vfiprintf_r+0x1e6>
 800a3a0:	0800ac41 	.word	0x0800ac41
 800a3a4:	0800ac4b 	.word	0x0800ac4b
 800a3a8:	080060e1 	.word	0x080060e1
 800a3ac:	0800a161 	.word	0x0800a161
 800a3b0:	0800ac47 	.word	0x0800ac47

0800a3b4 <__swbuf_r>:
 800a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b6:	460e      	mov	r6, r1
 800a3b8:	4614      	mov	r4, r2
 800a3ba:	4605      	mov	r5, r0
 800a3bc:	b118      	cbz	r0, 800a3c6 <__swbuf_r+0x12>
 800a3be:	6a03      	ldr	r3, [r0, #32]
 800a3c0:	b90b      	cbnz	r3, 800a3c6 <__swbuf_r+0x12>
 800a3c2:	f7fc fce5 	bl	8006d90 <__sinit>
 800a3c6:	69a3      	ldr	r3, [r4, #24]
 800a3c8:	60a3      	str	r3, [r4, #8]
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	071a      	lsls	r2, r3, #28
 800a3ce:	d501      	bpl.n	800a3d4 <__swbuf_r+0x20>
 800a3d0:	6923      	ldr	r3, [r4, #16]
 800a3d2:	b943      	cbnz	r3, 800a3e6 <__swbuf_r+0x32>
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	f000 f82a 	bl	800a430 <__swsetup_r>
 800a3dc:	b118      	cbz	r0, 800a3e6 <__swbuf_r+0x32>
 800a3de:	f04f 37ff 	mov.w	r7, #4294967295
 800a3e2:	4638      	mov	r0, r7
 800a3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	6922      	ldr	r2, [r4, #16]
 800a3ea:	1a98      	subs	r0, r3, r2
 800a3ec:	6963      	ldr	r3, [r4, #20]
 800a3ee:	b2f6      	uxtb	r6, r6
 800a3f0:	4283      	cmp	r3, r0
 800a3f2:	4637      	mov	r7, r6
 800a3f4:	dc05      	bgt.n	800a402 <__swbuf_r+0x4e>
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f7ff fa47 	bl	800988c <_fflush_r>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d1ed      	bne.n	800a3de <__swbuf_r+0x2a>
 800a402:	68a3      	ldr	r3, [r4, #8]
 800a404:	3b01      	subs	r3, #1
 800a406:	60a3      	str	r3, [r4, #8]
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	1c5a      	adds	r2, r3, #1
 800a40c:	6022      	str	r2, [r4, #0]
 800a40e:	701e      	strb	r6, [r3, #0]
 800a410:	6962      	ldr	r2, [r4, #20]
 800a412:	1c43      	adds	r3, r0, #1
 800a414:	429a      	cmp	r2, r3
 800a416:	d004      	beq.n	800a422 <__swbuf_r+0x6e>
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	07db      	lsls	r3, r3, #31
 800a41c:	d5e1      	bpl.n	800a3e2 <__swbuf_r+0x2e>
 800a41e:	2e0a      	cmp	r6, #10
 800a420:	d1df      	bne.n	800a3e2 <__swbuf_r+0x2e>
 800a422:	4621      	mov	r1, r4
 800a424:	4628      	mov	r0, r5
 800a426:	f7ff fa31 	bl	800988c <_fflush_r>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d0d9      	beq.n	800a3e2 <__swbuf_r+0x2e>
 800a42e:	e7d6      	b.n	800a3de <__swbuf_r+0x2a>

0800a430 <__swsetup_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	4b29      	ldr	r3, [pc, #164]	@ (800a4d8 <__swsetup_r+0xa8>)
 800a434:	4605      	mov	r5, r0
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	460c      	mov	r4, r1
 800a43a:	b118      	cbz	r0, 800a444 <__swsetup_r+0x14>
 800a43c:	6a03      	ldr	r3, [r0, #32]
 800a43e:	b90b      	cbnz	r3, 800a444 <__swsetup_r+0x14>
 800a440:	f7fc fca6 	bl	8006d90 <__sinit>
 800a444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a448:	0719      	lsls	r1, r3, #28
 800a44a:	d422      	bmi.n	800a492 <__swsetup_r+0x62>
 800a44c:	06da      	lsls	r2, r3, #27
 800a44e:	d407      	bmi.n	800a460 <__swsetup_r+0x30>
 800a450:	2209      	movs	r2, #9
 800a452:	602a      	str	r2, [r5, #0]
 800a454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a458:	81a3      	strh	r3, [r4, #12]
 800a45a:	f04f 30ff 	mov.w	r0, #4294967295
 800a45e:	e033      	b.n	800a4c8 <__swsetup_r+0x98>
 800a460:	0758      	lsls	r0, r3, #29
 800a462:	d512      	bpl.n	800a48a <__swsetup_r+0x5a>
 800a464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a466:	b141      	cbz	r1, 800a47a <__swsetup_r+0x4a>
 800a468:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a46c:	4299      	cmp	r1, r3
 800a46e:	d002      	beq.n	800a476 <__swsetup_r+0x46>
 800a470:	4628      	mov	r0, r5
 800a472:	f7fd fbf9 	bl	8007c68 <_free_r>
 800a476:	2300      	movs	r3, #0
 800a478:	6363      	str	r3, [r4, #52]	@ 0x34
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a480:	81a3      	strh	r3, [r4, #12]
 800a482:	2300      	movs	r3, #0
 800a484:	6063      	str	r3, [r4, #4]
 800a486:	6923      	ldr	r3, [r4, #16]
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	f043 0308 	orr.w	r3, r3, #8
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	6923      	ldr	r3, [r4, #16]
 800a494:	b94b      	cbnz	r3, 800a4aa <__swsetup_r+0x7a>
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a49c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4a0:	d003      	beq.n	800a4aa <__swsetup_r+0x7a>
 800a4a2:	4621      	mov	r1, r4
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	f000 f883 	bl	800a5b0 <__smakebuf_r>
 800a4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ae:	f013 0201 	ands.w	r2, r3, #1
 800a4b2:	d00a      	beq.n	800a4ca <__swsetup_r+0x9a>
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	60a2      	str	r2, [r4, #8]
 800a4b8:	6962      	ldr	r2, [r4, #20]
 800a4ba:	4252      	negs	r2, r2
 800a4bc:	61a2      	str	r2, [r4, #24]
 800a4be:	6922      	ldr	r2, [r4, #16]
 800a4c0:	b942      	cbnz	r2, 800a4d4 <__swsetup_r+0xa4>
 800a4c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a4c6:	d1c5      	bne.n	800a454 <__swsetup_r+0x24>
 800a4c8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ca:	0799      	lsls	r1, r3, #30
 800a4cc:	bf58      	it	pl
 800a4ce:	6962      	ldrpl	r2, [r4, #20]
 800a4d0:	60a2      	str	r2, [r4, #8]
 800a4d2:	e7f4      	b.n	800a4be <__swsetup_r+0x8e>
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	e7f7      	b.n	800a4c8 <__swsetup_r+0x98>
 800a4d8:	20000018 	.word	0x20000018

0800a4dc <_raise_r>:
 800a4dc:	291f      	cmp	r1, #31
 800a4de:	b538      	push	{r3, r4, r5, lr}
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	d904      	bls.n	800a4f0 <_raise_r+0x14>
 800a4e6:	2316      	movs	r3, #22
 800a4e8:	6003      	str	r3, [r0, #0]
 800a4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a4f2:	b112      	cbz	r2, 800a4fa <_raise_r+0x1e>
 800a4f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4f8:	b94b      	cbnz	r3, 800a50e <_raise_r+0x32>
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	f000 f830 	bl	800a560 <_getpid_r>
 800a500:	4622      	mov	r2, r4
 800a502:	4601      	mov	r1, r0
 800a504:	4628      	mov	r0, r5
 800a506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a50a:	f000 b817 	b.w	800a53c <_kill_r>
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d00a      	beq.n	800a528 <_raise_r+0x4c>
 800a512:	1c59      	adds	r1, r3, #1
 800a514:	d103      	bne.n	800a51e <_raise_r+0x42>
 800a516:	2316      	movs	r3, #22
 800a518:	6003      	str	r3, [r0, #0]
 800a51a:	2001      	movs	r0, #1
 800a51c:	e7e7      	b.n	800a4ee <_raise_r+0x12>
 800a51e:	2100      	movs	r1, #0
 800a520:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a524:	4620      	mov	r0, r4
 800a526:	4798      	blx	r3
 800a528:	2000      	movs	r0, #0
 800a52a:	e7e0      	b.n	800a4ee <_raise_r+0x12>

0800a52c <raise>:
 800a52c:	4b02      	ldr	r3, [pc, #8]	@ (800a538 <raise+0xc>)
 800a52e:	4601      	mov	r1, r0
 800a530:	6818      	ldr	r0, [r3, #0]
 800a532:	f7ff bfd3 	b.w	800a4dc <_raise_r>
 800a536:	bf00      	nop
 800a538:	20000018 	.word	0x20000018

0800a53c <_kill_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	4d07      	ldr	r5, [pc, #28]	@ (800a55c <_kill_r+0x20>)
 800a540:	2300      	movs	r3, #0
 800a542:	4604      	mov	r4, r0
 800a544:	4608      	mov	r0, r1
 800a546:	4611      	mov	r1, r2
 800a548:	602b      	str	r3, [r5, #0]
 800a54a:	f7f7 fc4f 	bl	8001dec <_kill>
 800a54e:	1c43      	adds	r3, r0, #1
 800a550:	d102      	bne.n	800a558 <_kill_r+0x1c>
 800a552:	682b      	ldr	r3, [r5, #0]
 800a554:	b103      	cbz	r3, 800a558 <_kill_r+0x1c>
 800a556:	6023      	str	r3, [r4, #0]
 800a558:	bd38      	pop	{r3, r4, r5, pc}
 800a55a:	bf00      	nop
 800a55c:	2000052c 	.word	0x2000052c

0800a560 <_getpid_r>:
 800a560:	f7f7 bc3c 	b.w	8001ddc <_getpid>

0800a564 <__swhatbuf_r>:
 800a564:	b570      	push	{r4, r5, r6, lr}
 800a566:	460c      	mov	r4, r1
 800a568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a56c:	2900      	cmp	r1, #0
 800a56e:	b096      	sub	sp, #88	@ 0x58
 800a570:	4615      	mov	r5, r2
 800a572:	461e      	mov	r6, r3
 800a574:	da0d      	bge.n	800a592 <__swhatbuf_r+0x2e>
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a57c:	f04f 0100 	mov.w	r1, #0
 800a580:	bf14      	ite	ne
 800a582:	2340      	movne	r3, #64	@ 0x40
 800a584:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a588:	2000      	movs	r0, #0
 800a58a:	6031      	str	r1, [r6, #0]
 800a58c:	602b      	str	r3, [r5, #0]
 800a58e:	b016      	add	sp, #88	@ 0x58
 800a590:	bd70      	pop	{r4, r5, r6, pc}
 800a592:	466a      	mov	r2, sp
 800a594:	f000 f848 	bl	800a628 <_fstat_r>
 800a598:	2800      	cmp	r0, #0
 800a59a:	dbec      	blt.n	800a576 <__swhatbuf_r+0x12>
 800a59c:	9901      	ldr	r1, [sp, #4]
 800a59e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5a6:	4259      	negs	r1, r3
 800a5a8:	4159      	adcs	r1, r3
 800a5aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5ae:	e7eb      	b.n	800a588 <__swhatbuf_r+0x24>

0800a5b0 <__smakebuf_r>:
 800a5b0:	898b      	ldrh	r3, [r1, #12]
 800a5b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5b4:	079d      	lsls	r5, r3, #30
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	d507      	bpl.n	800a5cc <__smakebuf_r+0x1c>
 800a5bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	6123      	str	r3, [r4, #16]
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	6163      	str	r3, [r4, #20]
 800a5c8:	b003      	add	sp, #12
 800a5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5cc:	ab01      	add	r3, sp, #4
 800a5ce:	466a      	mov	r2, sp
 800a5d0:	f7ff ffc8 	bl	800a564 <__swhatbuf_r>
 800a5d4:	9f00      	ldr	r7, [sp, #0]
 800a5d6:	4605      	mov	r5, r0
 800a5d8:	4639      	mov	r1, r7
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7fd fbb8 	bl	8007d50 <_malloc_r>
 800a5e0:	b948      	cbnz	r0, 800a5f6 <__smakebuf_r+0x46>
 800a5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5e6:	059a      	lsls	r2, r3, #22
 800a5e8:	d4ee      	bmi.n	800a5c8 <__smakebuf_r+0x18>
 800a5ea:	f023 0303 	bic.w	r3, r3, #3
 800a5ee:	f043 0302 	orr.w	r3, r3, #2
 800a5f2:	81a3      	strh	r3, [r4, #12]
 800a5f4:	e7e2      	b.n	800a5bc <__smakebuf_r+0xc>
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	6020      	str	r0, [r4, #0]
 800a5fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5fe:	81a3      	strh	r3, [r4, #12]
 800a600:	9b01      	ldr	r3, [sp, #4]
 800a602:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a606:	b15b      	cbz	r3, 800a620 <__smakebuf_r+0x70>
 800a608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a60c:	4630      	mov	r0, r6
 800a60e:	f000 f81d 	bl	800a64c <_isatty_r>
 800a612:	b128      	cbz	r0, 800a620 <__smakebuf_r+0x70>
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	f023 0303 	bic.w	r3, r3, #3
 800a61a:	f043 0301 	orr.w	r3, r3, #1
 800a61e:	81a3      	strh	r3, [r4, #12]
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	431d      	orrs	r5, r3
 800a624:	81a5      	strh	r5, [r4, #12]
 800a626:	e7cf      	b.n	800a5c8 <__smakebuf_r+0x18>

0800a628 <_fstat_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	4d07      	ldr	r5, [pc, #28]	@ (800a648 <_fstat_r+0x20>)
 800a62c:	2300      	movs	r3, #0
 800a62e:	4604      	mov	r4, r0
 800a630:	4608      	mov	r0, r1
 800a632:	4611      	mov	r1, r2
 800a634:	602b      	str	r3, [r5, #0]
 800a636:	f7f7 fc39 	bl	8001eac <_fstat>
 800a63a:	1c43      	adds	r3, r0, #1
 800a63c:	d102      	bne.n	800a644 <_fstat_r+0x1c>
 800a63e:	682b      	ldr	r3, [r5, #0]
 800a640:	b103      	cbz	r3, 800a644 <_fstat_r+0x1c>
 800a642:	6023      	str	r3, [r4, #0]
 800a644:	bd38      	pop	{r3, r4, r5, pc}
 800a646:	bf00      	nop
 800a648:	2000052c 	.word	0x2000052c

0800a64c <_isatty_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4d06      	ldr	r5, [pc, #24]	@ (800a668 <_isatty_r+0x1c>)
 800a650:	2300      	movs	r3, #0
 800a652:	4604      	mov	r4, r0
 800a654:	4608      	mov	r0, r1
 800a656:	602b      	str	r3, [r5, #0]
 800a658:	f7f7 fc38 	bl	8001ecc <_isatty>
 800a65c:	1c43      	adds	r3, r0, #1
 800a65e:	d102      	bne.n	800a666 <_isatty_r+0x1a>
 800a660:	682b      	ldr	r3, [r5, #0]
 800a662:	b103      	cbz	r3, 800a666 <_isatty_r+0x1a>
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	bd38      	pop	{r3, r4, r5, pc}
 800a668:	2000052c 	.word	0x2000052c

0800a66c <sqrt>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	ed2d 8b02 	vpush	{d8}
 800a672:	ec55 4b10 	vmov	r4, r5, d0
 800a676:	f000 f825 	bl	800a6c4 <__ieee754_sqrt>
 800a67a:	4622      	mov	r2, r4
 800a67c:	462b      	mov	r3, r5
 800a67e:	4620      	mov	r0, r4
 800a680:	4629      	mov	r1, r5
 800a682:	eeb0 8a40 	vmov.f32	s16, s0
 800a686:	eef0 8a60 	vmov.f32	s17, s1
 800a68a:	f7f6 fa6f 	bl	8000b6c <__aeabi_dcmpun>
 800a68e:	b990      	cbnz	r0, 800a6b6 <sqrt+0x4a>
 800a690:	2200      	movs	r2, #0
 800a692:	2300      	movs	r3, #0
 800a694:	4620      	mov	r0, r4
 800a696:	4629      	mov	r1, r5
 800a698:	f7f6 fa40 	bl	8000b1c <__aeabi_dcmplt>
 800a69c:	b158      	cbz	r0, 800a6b6 <sqrt+0x4a>
 800a69e:	f7fc fc63 	bl	8006f68 <__errno>
 800a6a2:	2321      	movs	r3, #33	@ 0x21
 800a6a4:	6003      	str	r3, [r0, #0]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4610      	mov	r0, r2
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	f7f6 f8ed 	bl	800088c <__aeabi_ddiv>
 800a6b2:	ec41 0b18 	vmov	d8, r0, r1
 800a6b6:	eeb0 0a48 	vmov.f32	s0, s16
 800a6ba:	eef0 0a68 	vmov.f32	s1, s17
 800a6be:	ecbd 8b02 	vpop	{d8}
 800a6c2:	bd38      	pop	{r3, r4, r5, pc}

0800a6c4 <__ieee754_sqrt>:
 800a6c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c8:	4a68      	ldr	r2, [pc, #416]	@ (800a86c <__ieee754_sqrt+0x1a8>)
 800a6ca:	ec55 4b10 	vmov	r4, r5, d0
 800a6ce:	43aa      	bics	r2, r5
 800a6d0:	462b      	mov	r3, r5
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	d110      	bne.n	800a6f8 <__ieee754_sqrt+0x34>
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	4620      	mov	r0, r4
 800a6da:	4629      	mov	r1, r5
 800a6dc:	f7f5 ffac 	bl	8000638 <__aeabi_dmul>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4620      	mov	r0, r4
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	f7f5 fdf0 	bl	80002cc <__adddf3>
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	460d      	mov	r5, r1
 800a6f0:	ec45 4b10 	vmov	d0, r4, r5
 800a6f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f8:	2d00      	cmp	r5, #0
 800a6fa:	dc0e      	bgt.n	800a71a <__ieee754_sqrt+0x56>
 800a6fc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a700:	4322      	orrs	r2, r4
 800a702:	d0f5      	beq.n	800a6f0 <__ieee754_sqrt+0x2c>
 800a704:	b19d      	cbz	r5, 800a72e <__ieee754_sqrt+0x6a>
 800a706:	4622      	mov	r2, r4
 800a708:	4620      	mov	r0, r4
 800a70a:	4629      	mov	r1, r5
 800a70c:	f7f5 fddc 	bl	80002c8 <__aeabi_dsub>
 800a710:	4602      	mov	r2, r0
 800a712:	460b      	mov	r3, r1
 800a714:	f7f6 f8ba 	bl	800088c <__aeabi_ddiv>
 800a718:	e7e8      	b.n	800a6ec <__ieee754_sqrt+0x28>
 800a71a:	152a      	asrs	r2, r5, #20
 800a71c:	d115      	bne.n	800a74a <__ieee754_sqrt+0x86>
 800a71e:	2000      	movs	r0, #0
 800a720:	e009      	b.n	800a736 <__ieee754_sqrt+0x72>
 800a722:	0acb      	lsrs	r3, r1, #11
 800a724:	3a15      	subs	r2, #21
 800a726:	0549      	lsls	r1, r1, #21
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d0fa      	beq.n	800a722 <__ieee754_sqrt+0x5e>
 800a72c:	e7f7      	b.n	800a71e <__ieee754_sqrt+0x5a>
 800a72e:	462a      	mov	r2, r5
 800a730:	e7fa      	b.n	800a728 <__ieee754_sqrt+0x64>
 800a732:	005b      	lsls	r3, r3, #1
 800a734:	3001      	adds	r0, #1
 800a736:	02dc      	lsls	r4, r3, #11
 800a738:	d5fb      	bpl.n	800a732 <__ieee754_sqrt+0x6e>
 800a73a:	1e44      	subs	r4, r0, #1
 800a73c:	1b12      	subs	r2, r2, r4
 800a73e:	f1c0 0420 	rsb	r4, r0, #32
 800a742:	fa21 f404 	lsr.w	r4, r1, r4
 800a746:	4323      	orrs	r3, r4
 800a748:	4081      	lsls	r1, r0
 800a74a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a74e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a752:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a756:	07d2      	lsls	r2, r2, #31
 800a758:	bf5c      	itt	pl
 800a75a:	005b      	lslpl	r3, r3, #1
 800a75c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a760:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a764:	bf58      	it	pl
 800a766:	0049      	lslpl	r1, r1, #1
 800a768:	2600      	movs	r6, #0
 800a76a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a76e:	106d      	asrs	r5, r5, #1
 800a770:	0049      	lsls	r1, r1, #1
 800a772:	2016      	movs	r0, #22
 800a774:	4632      	mov	r2, r6
 800a776:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a77a:	1917      	adds	r7, r2, r4
 800a77c:	429f      	cmp	r7, r3
 800a77e:	bfde      	ittt	le
 800a780:	193a      	addle	r2, r7, r4
 800a782:	1bdb      	suble	r3, r3, r7
 800a784:	1936      	addle	r6, r6, r4
 800a786:	0fcf      	lsrs	r7, r1, #31
 800a788:	3801      	subs	r0, #1
 800a78a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a78e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a792:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a796:	d1f0      	bne.n	800a77a <__ieee754_sqrt+0xb6>
 800a798:	4604      	mov	r4, r0
 800a79a:	2720      	movs	r7, #32
 800a79c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	eb00 0e0c 	add.w	lr, r0, ip
 800a7a6:	db02      	blt.n	800a7ae <__ieee754_sqrt+0xea>
 800a7a8:	d113      	bne.n	800a7d2 <__ieee754_sqrt+0x10e>
 800a7aa:	458e      	cmp	lr, r1
 800a7ac:	d811      	bhi.n	800a7d2 <__ieee754_sqrt+0x10e>
 800a7ae:	f1be 0f00 	cmp.w	lr, #0
 800a7b2:	eb0e 000c 	add.w	r0, lr, ip
 800a7b6:	da42      	bge.n	800a83e <__ieee754_sqrt+0x17a>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	db40      	blt.n	800a83e <__ieee754_sqrt+0x17a>
 800a7bc:	f102 0801 	add.w	r8, r2, #1
 800a7c0:	1a9b      	subs	r3, r3, r2
 800a7c2:	458e      	cmp	lr, r1
 800a7c4:	bf88      	it	hi
 800a7c6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a7ca:	eba1 010e 	sub.w	r1, r1, lr
 800a7ce:	4464      	add	r4, ip
 800a7d0:	4642      	mov	r2, r8
 800a7d2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a7d6:	3f01      	subs	r7, #1
 800a7d8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a7dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a7e0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a7e4:	d1dc      	bne.n	800a7a0 <__ieee754_sqrt+0xdc>
 800a7e6:	4319      	orrs	r1, r3
 800a7e8:	d01b      	beq.n	800a822 <__ieee754_sqrt+0x15e>
 800a7ea:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a870 <__ieee754_sqrt+0x1ac>
 800a7ee:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a874 <__ieee754_sqrt+0x1b0>
 800a7f2:	e9da 0100 	ldrd	r0, r1, [sl]
 800a7f6:	e9db 2300 	ldrd	r2, r3, [fp]
 800a7fa:	f7f5 fd65 	bl	80002c8 <__aeabi_dsub>
 800a7fe:	e9da 8900 	ldrd	r8, r9, [sl]
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	4640      	mov	r0, r8
 800a808:	4649      	mov	r1, r9
 800a80a:	f7f6 f991 	bl	8000b30 <__aeabi_dcmple>
 800a80e:	b140      	cbz	r0, 800a822 <__ieee754_sqrt+0x15e>
 800a810:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a814:	e9da 0100 	ldrd	r0, r1, [sl]
 800a818:	e9db 2300 	ldrd	r2, r3, [fp]
 800a81c:	d111      	bne.n	800a842 <__ieee754_sqrt+0x17e>
 800a81e:	3601      	adds	r6, #1
 800a820:	463c      	mov	r4, r7
 800a822:	1072      	asrs	r2, r6, #1
 800a824:	0863      	lsrs	r3, r4, #1
 800a826:	07f1      	lsls	r1, r6, #31
 800a828:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a82c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a830:	bf48      	it	mi
 800a832:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a836:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a83a:	4618      	mov	r0, r3
 800a83c:	e756      	b.n	800a6ec <__ieee754_sqrt+0x28>
 800a83e:	4690      	mov	r8, r2
 800a840:	e7be      	b.n	800a7c0 <__ieee754_sqrt+0xfc>
 800a842:	f7f5 fd43 	bl	80002cc <__adddf3>
 800a846:	e9da 8900 	ldrd	r8, r9, [sl]
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	4640      	mov	r0, r8
 800a850:	4649      	mov	r1, r9
 800a852:	f7f6 f963 	bl	8000b1c <__aeabi_dcmplt>
 800a856:	b120      	cbz	r0, 800a862 <__ieee754_sqrt+0x19e>
 800a858:	1ca0      	adds	r0, r4, #2
 800a85a:	bf08      	it	eq
 800a85c:	3601      	addeq	r6, #1
 800a85e:	3402      	adds	r4, #2
 800a860:	e7df      	b.n	800a822 <__ieee754_sqrt+0x15e>
 800a862:	1c63      	adds	r3, r4, #1
 800a864:	f023 0401 	bic.w	r4, r3, #1
 800a868:	e7db      	b.n	800a822 <__ieee754_sqrt+0x15e>
 800a86a:	bf00      	nop
 800a86c:	7ff00000 	.word	0x7ff00000
 800a870:	200001e0 	.word	0x200001e0
 800a874:	200001d8 	.word	0x200001d8

0800a878 <_init>:
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	bf00      	nop
 800a87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87e:	bc08      	pop	{r3}
 800a880:	469e      	mov	lr, r3
 800a882:	4770      	bx	lr

0800a884 <_fini>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	bf00      	nop
 800a888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a88a:	bc08      	pop	{r3}
 800a88c:	469e      	mov	lr, r3
 800a88e:	4770      	bx	lr
