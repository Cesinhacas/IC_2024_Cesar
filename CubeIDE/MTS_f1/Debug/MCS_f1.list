
MCS_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007900  08007900  00008900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007948  08007948  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  08007948  08007948  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007948  08007948  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007948  08007948  00008948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800794c  0800794c  0000894c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007950  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034c0  2000000c  0800795c  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200034cc  0800795c  000094cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005292  00000000  00000000  00009035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001570  00000000  00000000  0000e2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0000f838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000471  00000000  00000000  0000fe48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171c2  00000000  00000000  000102b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c45  00000000  00000000  0002747b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ac0  00000000  00000000  000310c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2b80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018b4  00000000  00000000  000b2bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b4478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080078e8 	.word	0x080078e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080078e8 	.word	0x080078e8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <inverter_matriz>:
#include <math.h>
#include "calib.h"


void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f66:	e02a      	b.n	8000fbe <inverter_matriz+0x66>
        for (int j = 0; j < N; j++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
 8000f6c:	e021      	b.n	8000fb2 <inverter_matriz+0x5a>
            if (i == j) {
 8000f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d10d      	bne.n	8000f92 <inverter_matriz+0x3a>
                inversa[i][j] = 1;
 8000f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	461a      	mov	r2, r3
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	6a3a      	ldr	r2, [r7, #32]
 8000f88:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f90:	e00c      	b.n	8000fac <inverter_matriz+0x54>
            } else {
                inversa[i][j] = 0;
 8000f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	6a3a      	ldr	r2, [r7, #32]
 8000fa4:	f04f 0100 	mov.w	r1, #0
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < N; j++) {
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	623b      	str	r3, [r7, #32]
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	ddda      	ble.n	8000f6e <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fba:	3301      	adds	r3, #1
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	ddd1      	ble.n	8000f68 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	e0c7      	b.n	800115a <inverter_matriz+0x202>
    {
        float pivot = matriz[i][i];
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	e038      	b.n	800105a <inverter_matriz+0x102>
        {
            matriz[i][j] /= pivot;
 8000fe8:	69fa      	ldr	r2, [r7, #28]
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	4613      	mov	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	461a      	mov	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	189c      	adds	r4, r3, r2
 800100e:	68f9      	ldr	r1, [r7, #12]
 8001010:	f7ff ff06 	bl	8000e20 <__aeabi_fdiv>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
            inversa[i][j] /= pivot;
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	461a      	mov	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	461a      	mov	r2, r3
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	189c      	adds	r4, r3, r2
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	f7ff feeb 	bl	8000e20 <__aeabi_fdiv>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        for (int j = 0; j < N; j++)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	3301      	adds	r3, #1
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2b08      	cmp	r3, #8
 800105e:	ddc3      	ble.n	8000fe8 <inverter_matriz+0x90>
        }

        for (int k = 0; k < N; k++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e073      	b.n	800114e <inverter_matriz+0x1f6>
        {
            if (k != i)
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	429a      	cmp	r2, r3
 800106c:	d06c      	beq.n	8001148 <inverter_matriz+0x1f0>
            {
                float fator = matriz[k][i];
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	461a      	mov	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	e05a      	b.n	8001142 <inverter_matriz+0x1ea>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fdfc 	bl	8000cb8 <__aeabi_fmul>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4619      	mov	r1, r3
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	189c      	adds	r4, r3, r2
 80010d4:	4628      	mov	r0, r5
 80010d6:	f7ff fce5 	bl	8000aa4 <__aeabi_fsub>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    inversa[k][j] -= fator * inversa[i][j];
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	461a      	mov	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	461a      	mov	r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fdd0 	bl	8000cb8 <__aeabi_fmul>
 8001118:	4603      	mov	r3, r0
 800111a:	4619      	mov	r1, r3
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	461a      	mov	r2, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	189c      	adds	r4, r3, r2
 800112c:	4628      	mov	r0, r5
 800112e:	f7ff fcb9 	bl	8000aa4 <__aeabi_fsub>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                for (int j = 0; j < N; j++)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	3301      	adds	r3, #1
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	2b08      	cmp	r3, #8
 8001146:	dda1      	ble.n	800108c <inverter_matriz+0x134>
        for (int k = 0; k < N; k++)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2b08      	cmp	r3, #8
 8001152:	dd88      	ble.n	8001066 <inverter_matriz+0x10e>
    for (int i = 0; i < N; i++)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	3301      	adds	r3, #1
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	2b08      	cmp	r3, #8
 800115e:	f77f af34 	ble.w	8000fca <inverter_matriz+0x72>
                }
            }
        }
    }
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	@ 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bdb0      	pop	{r4, r5, r7, pc}
 800116c:	0000      	movs	r0, r0
	...

08001170 <NLLS>:


uint8_t NLLS(float *mx, float *my, float *mz, float *p)
{
 8001170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001174:	f5ad 4d39 	sub.w	sp, sp, #47360	@ 0xb900
 8001178:	b0b5      	sub	sp, #212	@ 0xd4
 800117a:	af00      	add	r7, sp, #0
 800117c:	f507 641d 	add.w	r4, r7, #2512	@ 0x9d0
 8001180:	f6a4 14c4 	subw	r4, r4, #2500	@ 0x9c4
 8001184:	6020      	str	r0, [r4, #0]
 8001186:	f507 601d 	add.w	r0, r7, #2512	@ 0x9d0
 800118a:	f6a0 10c8 	subw	r0, r0, #2504	@ 0x9c8
 800118e:	6001      	str	r1, [r0, #0]
 8001190:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 8001194:	f6a1 11cc 	subw	r1, r1, #2508	@ 0x9cc
 8001198:	600a      	str	r2, [r1, #0]
 800119a:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800119e:	f5a2 621d 	sub.w	r2, r2, #2512	@ 0x9d0
 80011a2:	6013      	str	r3, [r2, #0]
	uint8_t passo = 0, loop = 1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80011aa:	f102 02cf 	add.w	r2, r2, #207	@ 0xcf
 80011ae:	7013      	strb	r3, [r2, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80011b6:	f102 02ce 	add.w	r2, r2, #206	@ 0xce
 80011ba:	7013      	strb	r3, [r2, #0]
	float sf = 1;
 80011bc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011c0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80011c4:	f102 026c 	add.w	r2, r2, #108	@ 0x6c
 80011c8:	6013      	str	r3, [r2, #0]
	float p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J, mat_H[N][tam];
 80011ca:	4bb8      	ldr	r3, [pc, #736]	@ (80014ac <NLLS+0x33c>)
 80011cc:	f507 4439 	add.w	r4, r7, #47360	@ 0xb900
 80011d0:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 80011d4:	461d      	mov	r5, r3
 80011d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011de:	682b      	ldr	r3, [r5, #0]
 80011e0:	6023      	str	r3, [r4, #0]
	float sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
	float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

	for (int i=0; i < tam; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80011e8:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e01c      	b.n	800122a <NLLS+0xba>
	{
		Be[i] = 1*sf;
 80011f0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80011f4:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 80011f8:	f6a3 1354 	subw	r3, r3, #2388	@ 0x954
 80011fc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001200:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	f507 4139 	add.w	r1, r7, #47360	@ 0xb900
 800120a:	f101 016c 	add.w	r1, r1, #108	@ 0x6c
 800120e:	6809      	ldr	r1, [r1, #0]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i=0; i < tam; i++)
 8001214:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001218:	f103 039c 	add.w	r3, r3, #156	@ 0x9c
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001224:	f102 029c 	add.w	r2, r2, #156	@ 0x9c
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800122e:	f103 039c 	add.w	r3, r3, #156	@ 0x9c
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f5b3 7f0b 	cmp.w	r3, #556	@ 0x22c
 8001238:	dbda      	blt.n	80011f0 <NLLS+0x80>
	}

	while(loop == 1)
 800123a:	f004 bba6 	b.w	800598a <NLLS+0x481a>
	{
		sx = p0[0];
 800123e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001242:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800124c:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8001250:	6013      	str	r3, [r2, #0]
		sy = p0[1];
 8001252:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001256:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001260:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8001264:	6013      	str	r3, [r2, #0]
		sz = p0[2];
 8001266:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800126a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001274:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8001278:	6013      	str	r3, [r2, #0]
		bx = p0[3];
 800127a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800127e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001288:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 800128c:	6013      	str	r3, [r2, #0]
		by = p0[4];
 800128e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001292:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800129c:	f102 02b8 	add.w	r2, r2, #184	@ 0xb8
 80012a0:	6013      	str	r3, [r2, #0]
		bz = p0[5];
 80012a2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80012a6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80012b0:	f102 02b4 	add.w	r2, r2, #180	@ 0xb4
 80012b4:	6013      	str	r3, [r2, #0]
		rho = p0[6];
 80012b6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80012ba:	f103 0344 	add.w	r3, r3, #68	@ 0x44
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80012c4:	f102 02b0 	add.w	r2, r2, #176	@ 0xb0
 80012c8:	6013      	str	r3, [r2, #0]
		phi = p0[7];
 80012ca:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80012ce:	f103 0348 	add.w	r3, r3, #72	@ 0x48
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80012d8:	f102 02ac 	add.w	r2, r2, #172	@ 0xac
 80012dc:	6013      	str	r3, [r2, #0]
		lambida = p0[8];
 80012de:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80012e2:	f103 034c 	add.w	r3, r3, #76	@ 0x4c
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80012ec:	f102 02a8 	add.w	r2, r2, #168	@ 0xa8
 80012f0:	6013      	str	r3, [r2, #0]

		sin_phi = phi - (phi*phi*phi)/6;// + (phi*phi*phi*phi*phi)/120;
 80012f2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80012f6:	f103 03ac 	add.w	r3, r3, #172	@ 0xac
 80012fa:	6819      	ldr	r1, [r3, #0]
 80012fc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001300:	f103 03ac 	add.w	r3, r3, #172	@ 0xac
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	f7ff fcd7 	bl	8000cb8 <__aeabi_fmul>
 800130a:	4603      	mov	r3, r0
 800130c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001310:	f102 02ac 	add.w	r2, r2, #172	@ 0xac
 8001314:	6811      	ldr	r1, [r2, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fcce 	bl	8000cb8 <__aeabi_fmul>
 800131c:	4603      	mov	r3, r0
 800131e:	4964      	ldr	r1, [pc, #400]	@ (80014b0 <NLLS+0x340>)
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fd7d 	bl	8000e20 <__aeabi_fdiv>
 8001326:	4603      	mov	r3, r0
 8001328:	4619      	mov	r1, r3
 800132a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800132e:	f103 03ac 	add.w	r3, r3, #172	@ 0xac
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	f7ff fbb6 	bl	8000aa4 <__aeabi_fsub>
 8001338:	4603      	mov	r3, r0
 800133a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800133e:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8001342:	6013      	str	r3, [r2, #0]
		sin_rho = rho - (rho*rho*rho)/6;// + (rho*rho*rho*rho*rho)/120;
 8001344:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001348:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 800134c:	6819      	ldr	r1, [r3, #0]
 800134e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001352:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 8001356:	6818      	ldr	r0, [r3, #0]
 8001358:	f7ff fcae 	bl	8000cb8 <__aeabi_fmul>
 800135c:	4603      	mov	r3, r0
 800135e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001362:	f102 02b0 	add.w	r2, r2, #176	@ 0xb0
 8001366:	6811      	ldr	r1, [r2, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fca5 	bl	8000cb8 <__aeabi_fmul>
 800136e:	4603      	mov	r3, r0
 8001370:	494f      	ldr	r1, [pc, #316]	@ (80014b0 <NLLS+0x340>)
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fd54 	bl	8000e20 <__aeabi_fdiv>
 8001378:	4603      	mov	r3, r0
 800137a:	4619      	mov	r1, r3
 800137c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001380:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	f7ff fb8d 	bl	8000aa4 <__aeabi_fsub>
 800138a:	4603      	mov	r3, r0
 800138c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001390:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8001394:	6013      	str	r3, [r2, #0]
		sin_lambda = lambida - (lambida*lambida*lambida)/6;// + (lambida*lambida*lambida*lambida*lambida)/120;
 8001396:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800139a:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 800139e:	6819      	ldr	r1, [r3, #0]
 80013a0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80013a4:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	f7ff fc85 	bl	8000cb8 <__aeabi_fmul>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80013b4:	f102 02a8 	add.w	r2, r2, #168	@ 0xa8
 80013b8:	6811      	ldr	r1, [r2, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fc7c 	bl	8000cb8 <__aeabi_fmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	493b      	ldr	r1, [pc, #236]	@ (80014b0 <NLLS+0x340>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd2b 	bl	8000e20 <__aeabi_fdiv>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4619      	mov	r1, r3
 80013ce:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80013d2:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	f7ff fb64 	bl	8000aa4 <__aeabi_fsub>
 80013dc:	4603      	mov	r3, r0
 80013de:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80013e2:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80013e6:	6013      	str	r3, [r2, #0]
		cos_phi = 1 - (phi*phi)/2;// + (phi*phi*phi*phi)/24;
 80013e8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80013ec:	f103 03ac 	add.w	r3, r3, #172	@ 0xac
 80013f0:	6819      	ldr	r1, [r3, #0]
 80013f2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80013f6:	f103 03ac 	add.w	r3, r3, #172	@ 0xac
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	f7ff fc5c 	bl	8000cb8 <__aeabi_fmul>
 8001400:	4603      	mov	r3, r0
 8001402:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fd0a 	bl	8000e20 <__aeabi_fdiv>
 800140c:	4603      	mov	r3, r0
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001414:	f7ff fb46 	bl	8000aa4 <__aeabi_fsub>
 8001418:	4603      	mov	r3, r0
 800141a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800141e:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8001422:	6013      	str	r3, [r2, #0]
		cos_rho = 1 - (rho*rho)/2;// + (rho*rho*rho*rho)/24;
 8001424:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001428:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 800142c:	6819      	ldr	r1, [r3, #0]
 800142e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001432:	f103 03b0 	add.w	r3, r3, #176	@ 0xb0
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	f7ff fc3e 	bl	8000cb8 <__aeabi_fmul>
 800143c:	4603      	mov	r3, r0
 800143e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fcec 	bl	8000e20 <__aeabi_fdiv>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001450:	f7ff fb28 	bl	8000aa4 <__aeabi_fsub>
 8001454:	4603      	mov	r3, r0
 8001456:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800145a:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800145e:	6013      	str	r3, [r2, #0]
		cos_lambda = 1 - (lambida*lambida)/2;// + (lambida*lambida*lambida*lambida)/24;
 8001460:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001464:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800146e:	f103 03a8 	add.w	r3, r3, #168	@ 0xa8
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	f7ff fc20 	bl	8000cb8 <__aeabi_fmul>
 8001478:	4603      	mov	r3, r0
 800147a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fcce 	bl	8000e20 <__aeabi_fdiv>
 8001484:	4603      	mov	r3, r0
 8001486:	4619      	mov	r1, r3
 8001488:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800148c:	f7ff fb0a 	bl	8000aa4 <__aeabi_fsub>
 8001490:	4603      	mov	r3, r0
 8001492:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001496:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800149a:	6013      	str	r3, [r2, #0]

		for(int i=0; i < tam; i++)
 800149c:	2300      	movs	r3, #0
 800149e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80014a2:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	f003 bf2e 	b.w	8005308 <NLLS+0x4198>
 80014ac:	08007900 	.word	0x08007900
 80014b0:	40c00000 	.word	0x40c00000
		{
			f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 80014b4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80014b8:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80014c4:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80014d2:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 80014d6:	6811      	ldr	r1, [r2, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fae3 	bl	8000aa4 <__aeabi_fsub>
 80014de:	4603      	mov	r3, r0
 80014e0:	461c      	mov	r4, r3
 80014e2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80014e6:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80014f2:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	4413      	add	r3, r2
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001500:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 8001504:	6811      	ldr	r1, [r2, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff facc 	bl	8000aa4 <__aeabi_fsub>
 800150c:	4603      	mov	r3, r0
 800150e:	4619      	mov	r1, r3
 8001510:	4620      	mov	r0, r4
 8001512:	f7ff fbd1 	bl	8000cb8 <__aeabi_fmul>
 8001516:	4603      	mov	r3, r0
 8001518:	461c      	mov	r4, r3
 800151a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800151e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001522:	6819      	ldr	r1, [r3, #0]
 8001524:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001528:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	f7ff fbc3 	bl	8000cb8 <__aeabi_fmul>
 8001532:	4603      	mov	r3, r0
 8001534:	4619      	mov	r1, r3
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff fc72 	bl	8000e20 <__aeabi_fdiv>
 800153c:	4603      	mov	r3, r0
 800153e:	461c      	mov	r4, r3
 8001540:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001544:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8001550:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	4413      	add	r3, r2
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800155e:	f102 02b8 	add.w	r2, r2, #184	@ 0xb8
 8001562:	6811      	ldr	r1, [r2, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fa9d 	bl	8000aa4 <__aeabi_fsub>
 800156a:	4603      	mov	r3, r0
 800156c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001570:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8001574:	6811      	ldr	r1, [r2, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fb9e 	bl	8000cb8 <__aeabi_fmul>
 800157c:	4603      	mov	r3, r0
 800157e:	461d      	mov	r5, r3
 8001580:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001584:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8001588:	6819      	ldr	r1, [r3, #0]
 800158a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800158e:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	f7ff fb90 	bl	8000cb8 <__aeabi_fmul>
 8001598:	4603      	mov	r3, r0
 800159a:	461e      	mov	r6, r3
 800159c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80015a0:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80015ac:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80015ba:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 80015be:	6811      	ldr	r1, [r2, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fa6f 	bl	8000aa4 <__aeabi_fsub>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4630      	mov	r0, r6
 80015cc:	f7ff fb74 	bl	8000cb8 <__aeabi_fmul>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4619      	mov	r1, r3
 80015d4:	4628      	mov	r0, r5
 80015d6:	f7ff fa65 	bl	8000aa4 <__aeabi_fsub>
 80015da:	4603      	mov	r3, r0
 80015dc:	461d      	mov	r5, r3
 80015de:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80015e2:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80015ee:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80015fc:	f102 02b8 	add.w	r2, r2, #184	@ 0xb8
 8001600:	6811      	ldr	r1, [r2, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fa4e 	bl	8000aa4 <__aeabi_fsub>
 8001608:	4603      	mov	r3, r0
 800160a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800160e:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8001612:	6811      	ldr	r1, [r2, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fb4f 	bl	8000cb8 <__aeabi_fmul>
 800161a:	4603      	mov	r3, r0
 800161c:	461e      	mov	r6, r3
 800161e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001622:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800162c:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	f7ff fb41 	bl	8000cb8 <__aeabi_fmul>
 8001636:	4603      	mov	r3, r0
 8001638:	4698      	mov	r8, r3
 800163a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800163e:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800164a:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	4413      	add	r3, r2
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001658:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 800165c:	6811      	ldr	r1, [r2, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fa20 	bl	8000aa4 <__aeabi_fsub>
 8001664:	4603      	mov	r3, r0
 8001666:	4619      	mov	r1, r3
 8001668:	4640      	mov	r0, r8
 800166a:	f7ff fb25 	bl	8000cb8 <__aeabi_fmul>
 800166e:	4603      	mov	r3, r0
 8001670:	4619      	mov	r1, r3
 8001672:	4630      	mov	r0, r6
 8001674:	f7ff fa16 	bl	8000aa4 <__aeabi_fsub>
 8001678:	4603      	mov	r3, r0
 800167a:	4619      	mov	r1, r3
 800167c:	4628      	mov	r0, r5
 800167e:	f7ff fb1b 	bl	8000cb8 <__aeabi_fmul>
 8001682:	4603      	mov	r3, r0
 8001684:	461d      	mov	r5, r3
 8001686:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800168a:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001694:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	f7ff fb0d 	bl	8000cb8 <__aeabi_fmul>
 800169e:	4603      	mov	r3, r0
 80016a0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80016a4:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80016a8:	6811      	ldr	r1, [r2, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fb04 	bl	8000cb8 <__aeabi_fmul>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461e      	mov	r6, r3
 80016b4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80016b8:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 80016bc:	6819      	ldr	r1, [r3, #0]
 80016be:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80016c2:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	f7ff faf6 	bl	8000cb8 <__aeabi_fmul>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80016d2:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80016d6:	6811      	ldr	r1, [r2, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff faed 	bl	8000cb8 <__aeabi_fmul>
 80016de:	4603      	mov	r3, r0
 80016e0:	4619      	mov	r1, r3
 80016e2:	4630      	mov	r0, r6
 80016e4:	f7ff fae8 	bl	8000cb8 <__aeabi_fmul>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4619      	mov	r1, r3
 80016ec:	4628      	mov	r0, r5
 80016ee:	f7ff fb97 	bl	8000e20 <__aeabi_fdiv>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4619      	mov	r1, r3
 80016f6:	4620      	mov	r0, r4
 80016f8:	f7ff f9d6 	bl	8000aa8 <__addsf3>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461c      	mov	r4, r3
 8001700:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001704:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8001708:	6819      	ldr	r1, [r3, #0]
 800170a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800170e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001712:	6818      	ldr	r0, [r3, #0]
 8001714:	f7ff fad0 	bl	8000cb8 <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800171e:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8001722:	6811      	ldr	r1, [r2, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fac7 	bl	8000cb8 <__aeabi_fmul>
 800172a:	4603      	mov	r3, r0
 800172c:	461d      	mov	r5, r3
 800172e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001732:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800173e:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	4413      	add	r3, r2
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800174c:	f102 02b4 	add.w	r2, r2, #180	@ 0xb4
 8001750:	6811      	ldr	r1, [r2, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff f9a6 	bl	8000aa4 <__aeabi_fsub>
 8001758:	4603      	mov	r3, r0
 800175a:	4619      	mov	r1, r3
 800175c:	4628      	mov	r0, r5
 800175e:	f7ff faab 	bl	8000cb8 <__aeabi_fmul>
 8001762:	4603      	mov	r3, r0
 8001764:	461d      	mov	r5, r3
 8001766:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800176a:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001774:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	f7ff fa9d 	bl	8000cb8 <__aeabi_fmul>
 800177e:	4603      	mov	r3, r0
 8001780:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001784:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8001788:	6811      	ldr	r1, [r2, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fa94 	bl	8000cb8 <__aeabi_fmul>
 8001790:	4603      	mov	r3, r0
 8001792:	461e      	mov	r6, r3
 8001794:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001798:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80017a4:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 80017a8:	6812      	ldr	r2, [r2, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80017b2:	f102 02b8 	add.w	r2, r2, #184	@ 0xb8
 80017b6:	6811      	ldr	r1, [r2, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff f973 	bl	8000aa4 <__aeabi_fsub>
 80017be:	4603      	mov	r3, r0
 80017c0:	4619      	mov	r1, r3
 80017c2:	4630      	mov	r0, r6
 80017c4:	f7ff fa78 	bl	8000cb8 <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4628      	mov	r0, r5
 80017ce:	f7ff f969 	bl	8000aa4 <__aeabi_fsub>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461d      	mov	r5, r3
 80017d6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80017da:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 80017de:	6819      	ldr	r1, [r3, #0]
 80017e0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80017e4:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	f7ff fa65 	bl	8000cb8 <__aeabi_fmul>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461e      	mov	r6, r3
 80017f2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80017f6:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80017fa:	6819      	ldr	r1, [r3, #0]
 80017fc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001800:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8001804:	6818      	ldr	r0, [r3, #0]
 8001806:	f7ff fa57 	bl	8000cb8 <__aeabi_fmul>
 800180a:	4603      	mov	r3, r0
 800180c:	4698      	mov	r8, r3
 800180e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001812:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8001816:	6819      	ldr	r1, [r3, #0]
 8001818:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800181c:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	f7ff fa49 	bl	8000cb8 <__aeabi_fmul>
 8001826:	4603      	mov	r3, r0
 8001828:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800182c:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8001830:	6811      	ldr	r1, [r2, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa40 	bl	8000cb8 <__aeabi_fmul>
 8001838:	4603      	mov	r3, r0
 800183a:	4619      	mov	r1, r3
 800183c:	4640      	mov	r0, r8
 800183e:	f7ff f931 	bl	8000aa4 <__aeabi_fsub>
 8001842:	4603      	mov	r3, r0
 8001844:	4619      	mov	r1, r3
 8001846:	4630      	mov	r0, r6
 8001848:	f7ff fa36 	bl	8000cb8 <__aeabi_fmul>
 800184c:	4603      	mov	r3, r0
 800184e:	461e      	mov	r6, r3
 8001850:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001854:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8001860:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	4413      	add	r3, r2
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800186e:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 8001872:	6811      	ldr	r1, [r2, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff f915 	bl	8000aa4 <__aeabi_fsub>
 800187a:	4603      	mov	r3, r0
 800187c:	4619      	mov	r1, r3
 800187e:	4630      	mov	r0, r6
 8001880:	f7ff fa1a 	bl	8000cb8 <__aeabi_fmul>
 8001884:	4603      	mov	r3, r0
 8001886:	4619      	mov	r1, r3
 8001888:	4628      	mov	r0, r5
 800188a:	f7ff f90d 	bl	8000aa8 <__addsf3>
 800188e:	4603      	mov	r3, r0
 8001890:	461d      	mov	r5, r3
 8001892:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001896:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80018a0:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	f7ff fa07 	bl	8000cb8 <__aeabi_fmul>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80018b0:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80018b4:	6811      	ldr	r1, [r2, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f9fe 	bl	8000cb8 <__aeabi_fmul>
 80018bc:	4603      	mov	r3, r0
 80018be:	461e      	mov	r6, r3
 80018c0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80018c4:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80018d0:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80018de:	f102 02b4 	add.w	r2, r2, #180	@ 0xb4
 80018e2:	6811      	ldr	r1, [r2, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f8dd 	bl	8000aa4 <__aeabi_fsub>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4630      	mov	r0, r6
 80018f0:	f7ff f9e2 	bl	8000cb8 <__aeabi_fmul>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461e      	mov	r6, r3
 80018f8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80018fc:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001906:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	f7ff f9d4 	bl	8000cb8 <__aeabi_fmul>
 8001910:	4603      	mov	r3, r0
 8001912:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001916:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 800191a:	6811      	ldr	r1, [r2, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff f9cb 	bl	8000cb8 <__aeabi_fmul>
 8001922:	4603      	mov	r3, r0
 8001924:	4698      	mov	r8, r3
 8001926:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800192a:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8001936:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	4413      	add	r3, r2
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001944:	f102 02b8 	add.w	r2, r2, #184	@ 0xb8
 8001948:	6811      	ldr	r1, [r2, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f8aa 	bl	8000aa4 <__aeabi_fsub>
 8001950:	4603      	mov	r3, r0
 8001952:	4619      	mov	r1, r3
 8001954:	4640      	mov	r0, r8
 8001956:	f7ff f9af 	bl	8000cb8 <__aeabi_fmul>
 800195a:	4603      	mov	r3, r0
 800195c:	4619      	mov	r1, r3
 800195e:	4630      	mov	r0, r6
 8001960:	f7ff f8a0 	bl	8000aa4 <__aeabi_fsub>
 8001964:	4603      	mov	r3, r0
 8001966:	461e      	mov	r6, r3
 8001968:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800196c:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001976:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	f7ff f99c 	bl	8000cb8 <__aeabi_fmul>
 8001980:	4603      	mov	r3, r0
 8001982:	4698      	mov	r8, r3
 8001984:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001988:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800198c:	6819      	ldr	r1, [r3, #0]
 800198e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001992:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	f7ff f98e 	bl	8000cb8 <__aeabi_fmul>
 800199c:	4603      	mov	r3, r0
 800199e:	4699      	mov	r9, r3
 80019a0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80019a4:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80019ae:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	f7ff f980 	bl	8000cb8 <__aeabi_fmul>
 80019b8:	4603      	mov	r3, r0
 80019ba:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80019be:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80019c2:	6811      	ldr	r1, [r2, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f977 	bl	8000cb8 <__aeabi_fmul>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4619      	mov	r1, r3
 80019ce:	4648      	mov	r0, r9
 80019d0:	f7ff f868 	bl	8000aa4 <__aeabi_fsub>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4619      	mov	r1, r3
 80019d8:	4640      	mov	r0, r8
 80019da:	f7ff f96d 	bl	8000cb8 <__aeabi_fmul>
 80019de:	4603      	mov	r3, r0
 80019e0:	4698      	mov	r8, r3
 80019e2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80019e6:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80019f2:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	4413      	add	r3, r2
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001a00:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 8001a04:	6811      	ldr	r1, [r2, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f84c 	bl	8000aa4 <__aeabi_fsub>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4640      	mov	r0, r8
 8001a12:	f7ff f951 	bl	8000cb8 <__aeabi_fmul>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4630      	mov	r0, r6
 8001a1c:	f7ff f844 	bl	8000aa8 <__addsf3>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4619      	mov	r1, r3
 8001a24:	4628      	mov	r0, r5
 8001a26:	f7ff f947 	bl	8000cb8 <__aeabi_fmul>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001a32:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8001a36:	6819      	ldr	r1, [r3, #0]
 8001a38:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001a3c:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	f7ff f939 	bl	8000cb8 <__aeabi_fmul>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001a4c:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8001a50:	6811      	ldr	r1, [r2, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f930 	bl	8000cb8 <__aeabi_fmul>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001a5e:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8001a62:	6811      	ldr	r1, [r2, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff f927 	bl	8000cb8 <__aeabi_fmul>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001a70:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8001a74:	6811      	ldr	r1, [r2, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f91e 	bl	8000cb8 <__aeabi_fmul>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001a82:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8001a86:	6811      	ldr	r1, [r2, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff f915 	bl	8000cb8 <__aeabi_fmul>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461e      	mov	r6, r3
 8001a92:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001a96:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8001a9a:	6819      	ldr	r1, [r3, #0]
 8001a9c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001aa0:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	f7ff f907 	bl	8000cb8 <__aeabi_fmul>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001ab0:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8001ab4:	6811      	ldr	r1, [r2, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f8fe 	bl	8000cb8 <__aeabi_fmul>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001ac2:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8001ac6:	6811      	ldr	r1, [r2, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff f8f5 	bl	8000cb8 <__aeabi_fmul>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001ad4:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8001ad8:	6811      	ldr	r1, [r2, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f8ec 	bl	8000cb8 <__aeabi_fmul>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001ae6:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8001aea:	6811      	ldr	r1, [r2, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f8e3 	bl	8000cb8 <__aeabi_fmul>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4619      	mov	r1, r3
 8001af6:	4630      	mov	r0, r6
 8001af8:	f7ff f8de 	bl	8000cb8 <__aeabi_fmul>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4619      	mov	r1, r3
 8001b00:	4628      	mov	r0, r5
 8001b02:	f7ff f98d 	bl	8000e20 <__aeabi_fdiv>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7fe ffcc 	bl	8000aa8 <__addsf3>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4619      	mov	r1, r3
 8001b14:	f507 4329 	add.w	r3, r7, #43264	@ 0xa900
 8001b18:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8001b1c:	f6a3 23b4 	subw	r3, r3, #2740	@ 0xab4
 8001b20:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001b24:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			e[i] = (Be[i] * Be[i]) - f[i];
 8001b2e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001b32:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8001b36:	f6a3 1354 	subw	r3, r3, #2388	@ 0x954
 8001b3a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001b3e:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b48:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001b4c:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8001b50:	f6a3 1354 	subw	r3, r3, #2388	@ 0x954
 8001b54:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001b58:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8001b5c:	6812      	ldr	r2, [r2, #0]
 8001b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7ff f8a8 	bl	8000cb8 <__aeabi_fmul>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f507 4329 	add.w	r3, r7, #43264	@ 0xa900
 8001b70:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8001b74:	f6a3 23b4 	subw	r3, r3, #2740	@ 0xab4
 8001b78:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001b7c:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b86:	4619      	mov	r1, r3
 8001b88:	f7fe ff8c 	bl	8000aa4 <__aeabi_fsub>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f507 4329 	add.w	r3, r7, #43264	@ 0xa900
 8001b94:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8001b98:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b9c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001ba0:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8001baa:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001bae:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8001bba:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001bca:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	f7fe ff68 	bl	8000aa4 <__aeabi_fsub>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001bda:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8001bde:	6811      	ldr	r1, [r2, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f869 	bl	8000cb8 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461c      	mov	r4, r3
 8001bea:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001bee:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8001bf2:	6819      	ldr	r1, [r3, #0]
 8001bf4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001bf8:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	f7ff f85b 	bl	8000cb8 <__aeabi_fmul>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461d      	mov	r5, r3
 8001c06:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001c0a:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8001c16:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001c26:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8001c2a:	6818      	ldr	r0, [r3, #0]
 8001c2c:	f7fe ff3a 	bl	8000aa4 <__aeabi_fsub>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4619      	mov	r1, r3
 8001c34:	4628      	mov	r0, r5
 8001c36:	f7ff f83f 	bl	8000cb8 <__aeabi_fmul>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7fe ff30 	bl	8000aa4 <__aeabi_fsub>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4619      	mov	r1, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe ff2d 	bl	8000aa8 <__addsf3>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461c      	mov	r4, r3
 8001c52:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001c56:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8001c62:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	4413      	add	r3, r2
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001c72:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	f7fe ff14 	bl	8000aa4 <__aeabi_fsub>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff f819 	bl	8000cb8 <__aeabi_fmul>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461c      	mov	r4, r3
 8001c8a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001c8e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001c92:	6819      	ldr	r1, [r3, #0]
 8001c94:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001c98:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001c9c:	6818      	ldr	r0, [r3, #0]
 8001c9e:	f7ff f80b 	bl	8000cb8 <__aeabi_fmul>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001ca8:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8001cac:	6811      	ldr	r1, [r2, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f802 	bl	8000cb8 <__aeabi_fmul>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001cba:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8001cbe:	6811      	ldr	r1, [r2, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fff9 	bl	8000cb8 <__aeabi_fmul>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001ccc:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8001cd0:	6811      	ldr	r1, [r2, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fff0 	bl	8000cb8 <__aeabi_fmul>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001cde:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8001ce2:	6811      	ldr	r1, [r2, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe ffe7 	bl	8000cb8 <__aeabi_fmul>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4619      	mov	r1, r3
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f7ff f896 	bl	8000e20 <__aeabi_fdiv>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461c      	mov	r4, r3
 8001cf8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001cfc:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8001d08:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4619      	mov	r1, r3
 8001d14:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001d18:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	f7fe fec1 	bl	8000aa4 <__aeabi_fsub>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001d28:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8001d2c:	6811      	ldr	r1, [r2, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe ffc2 	bl	8000cb8 <__aeabi_fmul>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461d      	mov	r5, r3
 8001d38:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001d3c:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001d46:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	f7fe ffb4 	bl	8000cb8 <__aeabi_fmul>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461e      	mov	r6, r3
 8001d54:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001d58:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8001d64:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001d74:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	f7fe fe93 	bl	8000aa4 <__aeabi_fsub>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4619      	mov	r1, r3
 8001d82:	4630      	mov	r0, r6
 8001d84:	f7fe ff98 	bl	8000cb8 <__aeabi_fmul>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	f7fe fe89 	bl	8000aa4 <__aeabi_fsub>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461d      	mov	r5, r3
 8001d96:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001d9a:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8001da6:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001db6:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	f7fe fe72 	bl	8000aa4 <__aeabi_fsub>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001dc6:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8001dca:	6811      	ldr	r1, [r2, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ff73 	bl	8000cb8 <__aeabi_fmul>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461e      	mov	r6, r3
 8001dd6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001dda:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001de4:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	f7fe ff65 	bl	8000cb8 <__aeabi_fmul>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4698      	mov	r8, r3
 8001df2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001df6:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8001e02:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	4413      	add	r3, r2
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001e12:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	f7fe fe44 	bl	8000aa4 <__aeabi_fsub>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4640      	mov	r0, r8
 8001e22:	f7fe ff49 	bl	8000cb8 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4630      	mov	r0, r6
 8001e2c:	f7fe fe3a 	bl	8000aa4 <__aeabi_fsub>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4619      	mov	r1, r3
 8001e34:	4628      	mov	r0, r5
 8001e36:	f7fe ff3f 	bl	8000cb8 <__aeabi_fmul>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fe32 	bl	8000aa8 <__addsf3>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461d      	mov	r5, r3
 8001e48:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001e4c:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001e56:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	f7fe ff2c 	bl	8000cb8 <__aeabi_fmul>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001e66:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8001e6a:	6811      	ldr	r1, [r2, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe ff23 	bl	8000cb8 <__aeabi_fmul>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001e78:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8001e7c:	6811      	ldr	r1, [r2, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe ff1a 	bl	8000cb8 <__aeabi_fmul>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001e8a:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8001e8e:	6811      	ldr	r1, [r2, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe ff11 	bl	8000cb8 <__aeabi_fmul>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001e9c:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8001ea0:	6811      	ldr	r1, [r2, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe ff08 	bl	8000cb8 <__aeabi_fmul>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001eae:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8001eb2:	6811      	ldr	r1, [r2, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe feff 	bl	8000cb8 <__aeabi_fmul>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	f7fe ffae 	bl	8000e20 <__aeabi_fdiv>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7fe fdeb 	bl	8000aa4 <__aeabi_fsub>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001ed6:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8001ee2:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	4413      	add	r3, r2
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001ef2:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	f7fe fdd4 	bl	8000aa4 <__aeabi_fsub>
 8001efc:	4603      	mov	r3, r0
 8001efe:	461d      	mov	r5, r3
 8001f00:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001f04:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8001f10:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001f20:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	f7fe fdbd 	bl	8000aa4 <__aeabi_fsub>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4628      	mov	r0, r5
 8001f30:	f7fe fec2 	bl	8000cb8 <__aeabi_fmul>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4619      	mov	r1, r3
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fdb5 	bl	8000aa8 <__addsf3>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461d      	mov	r5, r3
 8001f42:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001f46:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001f50:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	f7fe feaf 	bl	8000cb8 <__aeabi_fmul>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001f60:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8001f64:	6811      	ldr	r1, [r2, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fea6 	bl	8000cb8 <__aeabi_fmul>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4628      	mov	r0, r5
 8001f72:	f7fe ff55 	bl	8000e20 <__aeabi_fdiv>
 8001f76:	4603      	mov	r3, r0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	f7fe fd92 	bl	8000aa4 <__aeabi_fsub>
 8001f80:	4603      	mov	r3, r0
 8001f82:	461c      	mov	r4, r3
 8001f84:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001f88:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8001f8c:	6819      	ldr	r1, [r3, #0]
 8001f8e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001f92:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	f7fe fe8e 	bl	8000cb8 <__aeabi_fmul>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001fa4:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8001fa8:	6819      	ldr	r1, [r3, #0]
 8001faa:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001fae:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	f7fe fe80 	bl	8000cb8 <__aeabi_fmul>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461e      	mov	r6, r3
 8001fbc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001fc0:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8001fc4:	6819      	ldr	r1, [r3, #0]
 8001fc6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8001fca:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	f7fe fe72 	bl	8000cb8 <__aeabi_fmul>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8001fda:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8001fde:	6811      	ldr	r1, [r2, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fe69 	bl	8000cb8 <__aeabi_fmul>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4630      	mov	r0, r6
 8001fec:	f7fe fd5a 	bl	8000aa4 <__aeabi_fsub>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4628      	mov	r0, r5
 8001ff6:	f7fe fe5f 	bl	8000cb8 <__aeabi_fmul>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	461d      	mov	r5, r3
 8001ffe:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002002:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800200e:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	4413      	add	r3, r2
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800201e:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	f7fe fd3e 	bl	8000aa4 <__aeabi_fsub>
 8002028:	4603      	mov	r3, r0
 800202a:	4619      	mov	r1, r3
 800202c:	4628      	mov	r0, r5
 800202e:	f7fe fe43 	bl	8000cb8 <__aeabi_fmul>
 8002032:	4603      	mov	r3, r0
 8002034:	461d      	mov	r5, r3
 8002036:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800203a:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002044:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	f7fe fe35 	bl	8000cb8 <__aeabi_fmul>
 800204e:	4603      	mov	r3, r0
 8002050:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002054:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002058:	6811      	ldr	r1, [r2, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fe2c 	bl	8000cb8 <__aeabi_fmul>
 8002060:	4603      	mov	r3, r0
 8002062:	461e      	mov	r6, r3
 8002064:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002068:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002074:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	4413      	add	r3, r2
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4619      	mov	r1, r3
 8002080:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002084:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	f7fe fd0b 	bl	8000aa4 <__aeabi_fsub>
 800208e:	4603      	mov	r3, r0
 8002090:	4619      	mov	r1, r3
 8002092:	4630      	mov	r0, r6
 8002094:	f7fe fe10 	bl	8000cb8 <__aeabi_fmul>
 8002098:	4603      	mov	r3, r0
 800209a:	4619      	mov	r1, r3
 800209c:	4628      	mov	r0, r5
 800209e:	f7fe fd03 	bl	8000aa8 <__addsf3>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461d      	mov	r5, r3
 80020a6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80020aa:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80020b4:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	f7fe fdfd 	bl	8000cb8 <__aeabi_fmul>
 80020be:	4603      	mov	r3, r0
 80020c0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80020c4:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80020c8:	6811      	ldr	r1, [r2, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fdf4 	bl	8000cb8 <__aeabi_fmul>
 80020d0:	4603      	mov	r3, r0
 80020d2:	461e      	mov	r6, r3
 80020d4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80020d8:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80020e4:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 80020e8:	6812      	ldr	r2, [r2, #0]
 80020ea:	4413      	add	r3, r2
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80020f4:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	f7fe fcd3 	bl	8000aa4 <__aeabi_fsub>
 80020fe:	4603      	mov	r3, r0
 8002100:	4619      	mov	r1, r3
 8002102:	4630      	mov	r0, r6
 8002104:	f7fe fdd8 	bl	8000cb8 <__aeabi_fmul>
 8002108:	4603      	mov	r3, r0
 800210a:	4619      	mov	r1, r3
 800210c:	4628      	mov	r0, r5
 800210e:	f7fe fcc9 	bl	8000aa4 <__aeabi_fsub>
 8002112:	4603      	mov	r3, r0
 8002114:	461d      	mov	r5, r3
 8002116:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800211a:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002124:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	f7fe fdc5 	bl	8000cb8 <__aeabi_fmul>
 800212e:	4603      	mov	r3, r0
 8002130:	461e      	mov	r6, r3
 8002132:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002136:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800213a:	6819      	ldr	r1, [r3, #0]
 800213c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002140:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	f7fe fdb7 	bl	8000cb8 <__aeabi_fmul>
 800214a:	4603      	mov	r3, r0
 800214c:	4698      	mov	r8, r3
 800214e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002152:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8002156:	6819      	ldr	r1, [r3, #0]
 8002158:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800215c:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	f7fe fda9 	bl	8000cb8 <__aeabi_fmul>
 8002166:	4603      	mov	r3, r0
 8002168:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800216c:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8002170:	6811      	ldr	r1, [r2, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fda0 	bl	8000cb8 <__aeabi_fmul>
 8002178:	4603      	mov	r3, r0
 800217a:	4619      	mov	r1, r3
 800217c:	4640      	mov	r0, r8
 800217e:	f7fe fc91 	bl	8000aa4 <__aeabi_fsub>
 8002182:	4603      	mov	r3, r0
 8002184:	4619      	mov	r1, r3
 8002186:	4630      	mov	r0, r6
 8002188:	f7fe fd96 	bl	8000cb8 <__aeabi_fmul>
 800218c:	4603      	mov	r3, r0
 800218e:	461e      	mov	r6, r3
 8002190:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002194:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80021a0:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80021b0:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	f7fe fc75 	bl	8000aa4 <__aeabi_fsub>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4619      	mov	r1, r3
 80021be:	4630      	mov	r0, r6
 80021c0:	f7fe fd7a 	bl	8000cb8 <__aeabi_fmul>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461e      	mov	r6, r3
 80021c8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80021cc:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 80021d0:	6819      	ldr	r1, [r3, #0]
 80021d2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80021d6:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	f7fe fd6c 	bl	8000cb8 <__aeabi_fmul>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80021e6:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80021ea:	6811      	ldr	r1, [r2, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fd63 	bl	8000cb8 <__aeabi_fmul>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4698      	mov	r8, r3
 80021f6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80021fa:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002206:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	4413      	add	r3, r2
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002216:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	f7fe fc42 	bl	8000aa4 <__aeabi_fsub>
 8002220:	4603      	mov	r3, r0
 8002222:	4619      	mov	r1, r3
 8002224:	4640      	mov	r0, r8
 8002226:	f7fe fd47 	bl	8000cb8 <__aeabi_fmul>
 800222a:	4603      	mov	r3, r0
 800222c:	4619      	mov	r1, r3
 800222e:	4630      	mov	r0, r6
 8002230:	f7fe fc3a 	bl	8000aa8 <__addsf3>
 8002234:	4603      	mov	r3, r0
 8002236:	461e      	mov	r6, r3
 8002238:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800223c:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8002240:	6819      	ldr	r1, [r3, #0]
 8002242:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002246:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	f7fe fd34 	bl	8000cb8 <__aeabi_fmul>
 8002250:	4603      	mov	r3, r0
 8002252:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002256:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 800225a:	6811      	ldr	r1, [r2, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe fd2b 	bl	8000cb8 <__aeabi_fmul>
 8002262:	4603      	mov	r3, r0
 8002264:	4698      	mov	r8, r3
 8002266:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800226a:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002276:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	4413      	add	r3, r2
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002286:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 800228a:	6818      	ldr	r0, [r3, #0]
 800228c:	f7fe fc0a 	bl	8000aa4 <__aeabi_fsub>
 8002290:	4603      	mov	r3, r0
 8002292:	4619      	mov	r1, r3
 8002294:	4640      	mov	r0, r8
 8002296:	f7fe fd0f 	bl	8000cb8 <__aeabi_fmul>
 800229a:	4603      	mov	r3, r0
 800229c:	4619      	mov	r1, r3
 800229e:	4630      	mov	r0, r6
 80022a0:	f7fe fc00 	bl	8000aa4 <__aeabi_fsub>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4619      	mov	r1, r3
 80022a8:	4628      	mov	r0, r5
 80022aa:	f7fe fd05 	bl	8000cb8 <__aeabi_fmul>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4619      	mov	r1, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fbf8 	bl	8000aa8 <__addsf3>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461d      	mov	r5, r3
 80022bc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80022c0:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80022c4:	6819      	ldr	r1, [r3, #0]
 80022c6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80022ca:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	f7fe fcf2 	bl	8000cb8 <__aeabi_fmul>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80022da:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 80022de:	6811      	ldr	r1, [r2, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fce9 	bl	8000cb8 <__aeabi_fmul>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80022ec:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 80022f0:	6811      	ldr	r1, [r2, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fce0 	bl	8000cb8 <__aeabi_fmul>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80022fe:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8002302:	6811      	ldr	r1, [r2, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fcd7 	bl	8000cb8 <__aeabi_fmul>
 800230a:	4603      	mov	r3, r0
 800230c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002310:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002314:	6811      	ldr	r1, [r2, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fcce 	bl	8000cb8 <__aeabi_fmul>
 800231c:	4603      	mov	r3, r0
 800231e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002322:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002326:	6811      	ldr	r1, [r2, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fcc5 	bl	8000cb8 <__aeabi_fmul>
 800232e:	4603      	mov	r3, r0
 8002330:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002334:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002338:	6811      	ldr	r1, [r2, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fcbc 	bl	8000cb8 <__aeabi_fmul>
 8002340:	4603      	mov	r3, r0
 8002342:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002346:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800234a:	6811      	ldr	r1, [r2, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe fcb3 	bl	8000cb8 <__aeabi_fmul>
 8002352:	4603      	mov	r3, r0
 8002354:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002358:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 800235c:	6811      	ldr	r1, [r2, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe fcaa 	bl	8000cb8 <__aeabi_fmul>
 8002364:	4603      	mov	r3, r0
 8002366:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800236a:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 800236e:	6811      	ldr	r1, [r2, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fca1 	bl	8000cb8 <__aeabi_fmul>
 8002376:	4603      	mov	r3, r0
 8002378:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800237c:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002380:	6811      	ldr	r1, [r2, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fc98 	bl	8000cb8 <__aeabi_fmul>
 8002388:	4603      	mov	r3, r0
 800238a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800238e:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002392:	6811      	ldr	r1, [r2, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fc8f 	bl	8000cb8 <__aeabi_fmul>
 800239a:	4603      	mov	r3, r0
 800239c:	4619      	mov	r1, r3
 800239e:	4628      	mov	r0, r5
 80023a0:	f7fe fd3e 	bl	8000e20 <__aeabi_fdiv>
 80023a4:	4603      	mov	r3, r0
 80023a6:	4619      	mov	r1, r3
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7fe fb7b 	bl	8000aa4 <__aeabi_fsub>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461c      	mov	r4, r3
 80023b2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80023b6:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80023ba:	6819      	ldr	r1, [r3, #0]
 80023bc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80023c0:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	f7fe fc77 	bl	8000cb8 <__aeabi_fmul>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461d      	mov	r5, r3
 80023ce:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80023d2:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80023de:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80023ee:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	f7fe fb56 	bl	8000aa4 <__aeabi_fsub>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4619      	mov	r1, r3
 80023fc:	4628      	mov	r0, r5
 80023fe:	f7fe fc5b 	bl	8000cb8 <__aeabi_fmul>
 8002402:	4603      	mov	r3, r0
 8002404:	461d      	mov	r5, r3
 8002406:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800240a:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 800240e:	6819      	ldr	r1, [r3, #0]
 8002410:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002414:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	f7fe fc4d 	bl	8000cb8 <__aeabi_fmul>
 800241e:	4603      	mov	r3, r0
 8002420:	461e      	mov	r6, r3
 8002422:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002426:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002432:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	4413      	add	r3, r2
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002442:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	f7fe fb2c 	bl	8000aa4 <__aeabi_fsub>
 800244c:	4603      	mov	r3, r0
 800244e:	4619      	mov	r1, r3
 8002450:	4630      	mov	r0, r6
 8002452:	f7fe fc31 	bl	8000cb8 <__aeabi_fmul>
 8002456:	4603      	mov	r3, r0
 8002458:	4619      	mov	r1, r3
 800245a:	4628      	mov	r0, r5
 800245c:	f7fe fb22 	bl	8000aa4 <__aeabi_fsub>
 8002460:	4603      	mov	r3, r0
 8002462:	4619      	mov	r1, r3
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fb1f 	bl	8000aa8 <__addsf3>
 800246a:	4603      	mov	r3, r0
 800246c:	461d      	mov	r5, r3
 800246e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002472:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800247c:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	f7fe fc19 	bl	8000cb8 <__aeabi_fmul>
 8002486:	4603      	mov	r3, r0
 8002488:	461e      	mov	r6, r3
 800248a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800248e:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8002492:	6819      	ldr	r1, [r3, #0]
 8002494:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002498:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	f7fe fc0b 	bl	8000cb8 <__aeabi_fmul>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4698      	mov	r8, r3
 80024a6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80024aa:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80024b4:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	f7fe fbfd 	bl	8000cb8 <__aeabi_fmul>
 80024be:	4603      	mov	r3, r0
 80024c0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80024c4:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80024c8:	6811      	ldr	r1, [r2, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe fbf4 	bl	8000cb8 <__aeabi_fmul>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4619      	mov	r1, r3
 80024d4:	4640      	mov	r0, r8
 80024d6:	f7fe fae5 	bl	8000aa4 <__aeabi_fsub>
 80024da:	4603      	mov	r3, r0
 80024dc:	4619      	mov	r1, r3
 80024de:	4630      	mov	r0, r6
 80024e0:	f7fe fbea 	bl	8000cb8 <__aeabi_fmul>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461e      	mov	r6, r3
 80024e8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80024ec:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80024f8:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 80024fc:	6812      	ldr	r2, [r2, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002508:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	f7fe fac9 	bl	8000aa4 <__aeabi_fsub>
 8002512:	4603      	mov	r3, r0
 8002514:	4619      	mov	r1, r3
 8002516:	4630      	mov	r0, r6
 8002518:	f7fe fbce 	bl	8000cb8 <__aeabi_fmul>
 800251c:	4603      	mov	r3, r0
 800251e:	461e      	mov	r6, r3
 8002520:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002524:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800252e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	f7fe fbc0 	bl	8000cb8 <__aeabi_fmul>
 8002538:	4603      	mov	r3, r0
 800253a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800253e:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002542:	6811      	ldr	r1, [r2, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fbb7 	bl	8000cb8 <__aeabi_fmul>
 800254a:	4603      	mov	r3, r0
 800254c:	4698      	mov	r8, r3
 800254e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002552:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800255e:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4413      	add	r3, r2
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800256e:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	f7fe fa96 	bl	8000aa4 <__aeabi_fsub>
 8002578:	4603      	mov	r3, r0
 800257a:	4619      	mov	r1, r3
 800257c:	4640      	mov	r0, r8
 800257e:	f7fe fb9b 	bl	8000cb8 <__aeabi_fmul>
 8002582:	4603      	mov	r3, r0
 8002584:	4619      	mov	r1, r3
 8002586:	4630      	mov	r0, r6
 8002588:	f7fe fa8e 	bl	8000aa8 <__addsf3>
 800258c:	4603      	mov	r3, r0
 800258e:	461e      	mov	r6, r3
 8002590:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002594:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8002598:	6819      	ldr	r1, [r3, #0]
 800259a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800259e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	f7fe fb88 	bl	8000cb8 <__aeabi_fmul>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80025ae:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80025b2:	6811      	ldr	r1, [r2, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fb7f 	bl	8000cb8 <__aeabi_fmul>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4698      	mov	r8, r3
 80025be:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80025c2:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80025ce:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	4413      	add	r3, r2
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80025de:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	f7fe fa5e 	bl	8000aa4 <__aeabi_fsub>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4619      	mov	r1, r3
 80025ec:	4640      	mov	r0, r8
 80025ee:	f7fe fb63 	bl	8000cb8 <__aeabi_fmul>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4619      	mov	r1, r3
 80025f6:	4630      	mov	r0, r6
 80025f8:	f7fe fa54 	bl	8000aa4 <__aeabi_fsub>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4619      	mov	r1, r3
 8002600:	4628      	mov	r0, r5
 8002602:	f7fe fb59 	bl	8000cb8 <__aeabi_fmul>
 8002606:	4603      	mov	r3, r0
 8002608:	461d      	mov	r5, r3
 800260a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800260e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002618:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	f7fe fb4b 	bl	8000cb8 <__aeabi_fmul>
 8002622:	4603      	mov	r3, r0
 8002624:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002628:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 800262c:	6811      	ldr	r1, [r2, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fb42 	bl	8000cb8 <__aeabi_fmul>
 8002634:	4603      	mov	r3, r0
 8002636:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800263a:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 800263e:	6811      	ldr	r1, [r2, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fb39 	bl	8000cb8 <__aeabi_fmul>
 8002646:	4603      	mov	r3, r0
 8002648:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800264c:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002650:	6811      	ldr	r1, [r2, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fb30 	bl	8000cb8 <__aeabi_fmul>
 8002658:	4603      	mov	r3, r0
 800265a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800265e:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002662:	6811      	ldr	r1, [r2, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fe fb27 	bl	8000cb8 <__aeabi_fmul>
 800266a:	4603      	mov	r3, r0
 800266c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002670:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002674:	6811      	ldr	r1, [r2, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fb1e 	bl	8000cb8 <__aeabi_fmul>
 800267c:	4603      	mov	r3, r0
 800267e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002682:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002686:	6811      	ldr	r1, [r2, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fb15 	bl	8000cb8 <__aeabi_fmul>
 800268e:	4603      	mov	r3, r0
 8002690:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002694:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002698:	6811      	ldr	r1, [r2, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fb0c 	bl	8000cb8 <__aeabi_fmul>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80026a6:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80026aa:	6811      	ldr	r1, [r2, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fb03 	bl	8000cb8 <__aeabi_fmul>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80026b8:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80026bc:	6811      	ldr	r1, [r2, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fafa 	bl	8000cb8 <__aeabi_fmul>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80026ca:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80026ce:	6811      	ldr	r1, [r2, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe faf1 	bl	8000cb8 <__aeabi_fmul>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4619      	mov	r1, r3
 80026da:	4628      	mov	r0, r5
 80026dc:	f7fe fba0 	bl	8000e20 <__aeabi_fdiv>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4619      	mov	r1, r3
 80026e4:	4620      	mov	r0, r4
 80026e6:	f7fe f9df 	bl	8000aa8 <__addsf3>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4619      	mov	r1, r3
 80026ee:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 80026f2:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80026f6:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 80026fa:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80026fe:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8002708:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800270c:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002718:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	4413      	add	r3, r2
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4619      	mov	r1, r3
 8002724:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002728:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	f7fe f9b9 	bl	8000aa4 <__aeabi_fsub>
 8002732:	4603      	mov	r3, r0
 8002734:	4619      	mov	r1, r3
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe f9b6 	bl	8000aa8 <__addsf3>
 800273c:	4603      	mov	r3, r0
 800273e:	461c      	mov	r4, r3
 8002740:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002744:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800274e:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	f7fe fab0 	bl	8000cb8 <__aeabi_fmul>
 8002758:	4603      	mov	r3, r0
 800275a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800275e:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002762:	6811      	ldr	r1, [r2, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe faa7 	bl	8000cb8 <__aeabi_fmul>
 800276a:	4603      	mov	r3, r0
 800276c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002770:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002774:	6811      	ldr	r1, [r2, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fa9e 	bl	8000cb8 <__aeabi_fmul>
 800277c:	4603      	mov	r3, r0
 800277e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002782:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002786:	6811      	ldr	r1, [r2, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fa95 	bl	8000cb8 <__aeabi_fmul>
 800278e:	4603      	mov	r3, r0
 8002790:	461d      	mov	r5, r3
 8002792:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002796:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80027a2:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	4413      	add	r3, r2
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80027b0:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 80027b4:	6811      	ldr	r1, [r2, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fa7e 	bl	8000cb8 <__aeabi_fmul>
 80027bc:	4603      	mov	r3, r0
 80027be:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80027c2:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80027c6:	6811      	ldr	r1, [r2, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fa75 	bl	8000cb8 <__aeabi_fmul>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80027d4:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80027d8:	6811      	ldr	r1, [r2, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fa6c 	bl	8000cb8 <__aeabi_fmul>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80027e6:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80027ea:	6811      	ldr	r1, [r2, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fa63 	bl	8000cb8 <__aeabi_fmul>
 80027f2:	4603      	mov	r3, r0
 80027f4:	4619      	mov	r1, r3
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7fe f954 	bl	8000aa4 <__aeabi_fsub>
 80027fc:	4603      	mov	r3, r0
 80027fe:	461d      	mov	r5, r3
 8002800:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002804:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800280e:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	f7fe fa50 	bl	8000cb8 <__aeabi_fmul>
 8002818:	4603      	mov	r3, r0
 800281a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800281e:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002822:	6811      	ldr	r1, [r2, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fa47 	bl	8000cb8 <__aeabi_fmul>
 800282a:	4603      	mov	r3, r0
 800282c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002830:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002834:	6811      	ldr	r1, [r2, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fa3e 	bl	8000cb8 <__aeabi_fmul>
 800283c:	4603      	mov	r3, r0
 800283e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002842:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002846:	6811      	ldr	r1, [r2, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fa35 	bl	8000cb8 <__aeabi_fmul>
 800284e:	4603      	mov	r3, r0
 8002850:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002854:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002858:	6811      	ldr	r1, [r2, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fa2c 	bl	8000cb8 <__aeabi_fmul>
 8002860:	4603      	mov	r3, r0
 8002862:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002866:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 800286a:	6811      	ldr	r1, [r2, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fe fa23 	bl	8000cb8 <__aeabi_fmul>
 8002872:	4603      	mov	r3, r0
 8002874:	4619      	mov	r1, r3
 8002876:	4628      	mov	r0, r5
 8002878:	f7fe f916 	bl	8000aa8 <__addsf3>
 800287c:	4603      	mov	r3, r0
 800287e:	461d      	mov	r5, r3
 8002880:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002884:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002890:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	4413      	add	r3, r2
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800289e:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 80028a2:	6811      	ldr	r1, [r2, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fa07 	bl	8000cb8 <__aeabi_fmul>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80028b0:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80028b4:	6811      	ldr	r1, [r2, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe f9fe 	bl	8000cb8 <__aeabi_fmul>
 80028bc:	4603      	mov	r3, r0
 80028be:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80028c2:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80028c6:	6811      	ldr	r1, [r2, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe f9f5 	bl	8000cb8 <__aeabi_fmul>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80028d4:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80028d8:	6811      	ldr	r1, [r2, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe f9ec 	bl	8000cb8 <__aeabi_fmul>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80028e6:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80028ea:	6811      	ldr	r1, [r2, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe f9e3 	bl	8000cb8 <__aeabi_fmul>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80028f8:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80028fc:	6811      	ldr	r1, [r2, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe f9da 	bl	8000cb8 <__aeabi_fmul>
 8002904:	4603      	mov	r3, r0
 8002906:	4619      	mov	r1, r3
 8002908:	4628      	mov	r0, r5
 800290a:	f7fe f8cb 	bl	8000aa4 <__aeabi_fsub>
 800290e:	4603      	mov	r3, r0
 8002910:	461d      	mov	r5, r3
 8002912:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002916:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 800291a:	6819      	ldr	r1, [r3, #0]
 800291c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002920:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	f7fe f9c7 	bl	8000cb8 <__aeabi_fmul>
 800292a:	4603      	mov	r3, r0
 800292c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002930:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8002934:	6811      	ldr	r1, [r2, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe f9be 	bl	8000cb8 <__aeabi_fmul>
 800293c:	4603      	mov	r3, r0
 800293e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002942:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002946:	6811      	ldr	r1, [r2, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe f9b5 	bl	8000cb8 <__aeabi_fmul>
 800294e:	4603      	mov	r3, r0
 8002950:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002954:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002958:	6811      	ldr	r1, [r2, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe f9ac 	bl	8000cb8 <__aeabi_fmul>
 8002960:	4603      	mov	r3, r0
 8002962:	4619      	mov	r1, r3
 8002964:	4628      	mov	r0, r5
 8002966:	f7fe f89d 	bl	8000aa4 <__aeabi_fsub>
 800296a:	4603      	mov	r3, r0
 800296c:	461d      	mov	r5, r3
 800296e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002972:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800297e:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	4413      	add	r3, r2
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800298c:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8002990:	6811      	ldr	r1, [r2, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe f990 	bl	8000cb8 <__aeabi_fmul>
 8002998:	4603      	mov	r3, r0
 800299a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800299e:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 80029a2:	6811      	ldr	r1, [r2, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe f987 	bl	8000cb8 <__aeabi_fmul>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80029b0:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80029b4:	6811      	ldr	r1, [r2, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe f97e 	bl	8000cb8 <__aeabi_fmul>
 80029bc:	4603      	mov	r3, r0
 80029be:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80029c2:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80029c6:	6811      	ldr	r1, [r2, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe f975 	bl	8000cb8 <__aeabi_fmul>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4619      	mov	r1, r3
 80029d2:	4628      	mov	r0, r5
 80029d4:	f7fe f868 	bl	8000aa8 <__addsf3>
 80029d8:	4603      	mov	r3, r0
 80029da:	461d      	mov	r5, r3
 80029dc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80029e0:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80029ea:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 80029ee:	6818      	ldr	r0, [r3, #0]
 80029f0:	f7fe f962 	bl	8000cb8 <__aeabi_fmul>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80029fa:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80029fe:	6811      	ldr	r1, [r2, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe f959 	bl	8000cb8 <__aeabi_fmul>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002a0c:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002a10:	6811      	ldr	r1, [r2, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe f950 	bl	8000cb8 <__aeabi_fmul>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002a1e:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002a22:	6811      	ldr	r1, [r2, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe f947 	bl	8000cb8 <__aeabi_fmul>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002a30:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8002a34:	6811      	ldr	r1, [r2, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe f93e 	bl	8000cb8 <__aeabi_fmul>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4628      	mov	r0, r5
 8002a42:	f7fe f82f 	bl	8000aa4 <__aeabi_fsub>
 8002a46:	4603      	mov	r3, r0
 8002a48:	461d      	mov	r5, r3
 8002a4a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002a4e:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002a5a:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002a68:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8002a6c:	6811      	ldr	r1, [r2, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe f922 	bl	8000cb8 <__aeabi_fmul>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002a7a:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002a7e:	6811      	ldr	r1, [r2, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe f919 	bl	8000cb8 <__aeabi_fmul>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002a8c:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002a90:	6811      	ldr	r1, [r2, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f910 	bl	8000cb8 <__aeabi_fmul>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002a9e:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002aa2:	6811      	ldr	r1, [r2, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe f907 	bl	8000cb8 <__aeabi_fmul>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002ab0:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8002ab4:	6811      	ldr	r1, [r2, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe f8fe 	bl	8000cb8 <__aeabi_fmul>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	f7fd fff1 	bl	8000aa8 <__addsf3>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461d      	mov	r5, r3
 8002aca:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002ace:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8002ad2:	6819      	ldr	r1, [r3, #0]
 8002ad4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002ad8:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	f7fe f8eb 	bl	8000cb8 <__aeabi_fmul>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002ae8:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002aec:	6811      	ldr	r1, [r2, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe f8e2 	bl	8000cb8 <__aeabi_fmul>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002afa:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002afe:	6811      	ldr	r1, [r2, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe f8d9 	bl	8000cb8 <__aeabi_fmul>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002b0c:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002b10:	6811      	ldr	r1, [r2, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe f8d0 	bl	8000cb8 <__aeabi_fmul>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002b1e:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002b22:	6811      	ldr	r1, [r2, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fe f8c7 	bl	8000cb8 <__aeabi_fmul>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002b30:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002b34:	6811      	ldr	r1, [r2, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe f8be 	bl	8000cb8 <__aeabi_fmul>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002b42:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8002b46:	6811      	ldr	r1, [r2, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe f8b5 	bl	8000cb8 <__aeabi_fmul>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4619      	mov	r1, r3
 8002b52:	4628      	mov	r0, r5
 8002b54:	f7fd ffa6 	bl	8000aa4 <__aeabi_fsub>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461d      	mov	r5, r3
 8002b5c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002b60:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002b6c:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002b7a:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8002b7e:	6811      	ldr	r1, [r2, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe f899 	bl	8000cb8 <__aeabi_fmul>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002b8c:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002b90:	6811      	ldr	r1, [r2, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe f890 	bl	8000cb8 <__aeabi_fmul>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002b9e:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002ba2:	6811      	ldr	r1, [r2, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe f887 	bl	8000cb8 <__aeabi_fmul>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002bb0:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002bb4:	6811      	ldr	r1, [r2, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe f87e 	bl	8000cb8 <__aeabi_fmul>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002bc2:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002bc6:	6811      	ldr	r1, [r2, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe f875 	bl	8000cb8 <__aeabi_fmul>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002bd4:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002bd8:	6811      	ldr	r1, [r2, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe f86c 	bl	8000cb8 <__aeabi_fmul>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002be6:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8002bea:	6811      	ldr	r1, [r2, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe f863 	bl	8000cb8 <__aeabi_fmul>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f7fd ff56 	bl	8000aa8 <__addsf3>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	461d      	mov	r5, r3
 8002c00:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002c04:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8002c08:	6819      	ldr	r1, [r3, #0]
 8002c0a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002c0e:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	f7fe f850 	bl	8000cb8 <__aeabi_fmul>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002c1e:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002c22:	6811      	ldr	r1, [r2, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe f847 	bl	8000cb8 <__aeabi_fmul>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002c30:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002c34:	6811      	ldr	r1, [r2, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe f83e 	bl	8000cb8 <__aeabi_fmul>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002c42:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002c46:	6811      	ldr	r1, [r2, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe f835 	bl	8000cb8 <__aeabi_fmul>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002c54:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002c58:	6811      	ldr	r1, [r2, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe f82c 	bl	8000cb8 <__aeabi_fmul>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002c66:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8002c6a:	6811      	ldr	r1, [r2, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe f823 	bl	8000cb8 <__aeabi_fmul>
 8002c72:	4603      	mov	r3, r0
 8002c74:	4619      	mov	r1, r3
 8002c76:	4628      	mov	r0, r5
 8002c78:	f7fd ff16 	bl	8000aa8 <__addsf3>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	461d      	mov	r5, r3
 8002c80:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002c84:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002c90:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002c9e:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8002ca2:	6811      	ldr	r1, [r2, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe f807 	bl	8000cb8 <__aeabi_fmul>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002cb0:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002cb4:	6811      	ldr	r1, [r2, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fffe 	bl	8000cb8 <__aeabi_fmul>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002cc2:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002cc6:	6811      	ldr	r1, [r2, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fff5 	bl	8000cb8 <__aeabi_fmul>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002cd4:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002cd8:	6811      	ldr	r1, [r2, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd ffec 	bl	8000cb8 <__aeabi_fmul>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002ce6:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002cea:	6811      	ldr	r1, [r2, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd ffe3 	bl	8000cb8 <__aeabi_fmul>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002cf8:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8002cfc:	6811      	ldr	r1, [r2, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd ffda 	bl	8000cb8 <__aeabi_fmul>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4619      	mov	r1, r3
 8002d08:	4628      	mov	r0, r5
 8002d0a:	f7fd fecb 	bl	8000aa4 <__aeabi_fsub>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4619      	mov	r1, r3
 8002d12:	4620      	mov	r0, r4
 8002d14:	f7fd ffd0 	bl	8000cb8 <__aeabi_fmul>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8002d1e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002d22:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8002d26:	6819      	ldr	r1, [r3, #0]
 8002d28:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002d2c:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	f7fd ffc1 	bl	8000cb8 <__aeabi_fmul>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002d3c:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8002d40:	6811      	ldr	r1, [r2, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd ffb8 	bl	8000cb8 <__aeabi_fmul>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002d4e:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8002d52:	6811      	ldr	r1, [r2, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd ffaf 	bl	8000cb8 <__aeabi_fmul>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002d60:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002d64:	6811      	ldr	r1, [r2, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd ffa6 	bl	8000cb8 <__aeabi_fmul>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002d72:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002d76:	6811      	ldr	r1, [r2, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd ff9d 	bl	8000cb8 <__aeabi_fmul>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002d84:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8002d88:	6811      	ldr	r1, [r2, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd ff94 	bl	8000cb8 <__aeabi_fmul>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002d96:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002d9a:	6811      	ldr	r1, [r2, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd ff8b 	bl	8000cb8 <__aeabi_fmul>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002da8:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8002dac:	6811      	ldr	r1, [r2, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd ff82 	bl	8000cb8 <__aeabi_fmul>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002dba:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002dbe:	6811      	ldr	r1, [r2, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd ff79 	bl	8000cb8 <__aeabi_fmul>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002dcc:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002dd0:	6811      	ldr	r1, [r2, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd ff70 	bl	8000cb8 <__aeabi_fmul>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f7fe f81f 	bl	8000e20 <__aeabi_fdiv>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4619      	mov	r1, r3
 8002de6:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 8002dea:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8002dee:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 8002df2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002df6:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	f502 720b 	add.w	r2, r2, #556	@ 0x22c
 8002e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002e04:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002e08:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002e14:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002e24:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	f7fd fe3b 	bl	8000aa4 <__aeabi_fsub>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	4619      	mov	r1, r3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fe38 	bl	8000aa8 <__addsf3>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461c      	mov	r4, r3
 8002e3c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002e40:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002e4a:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	f7fd ff32 	bl	8000cb8 <__aeabi_fmul>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002e5a:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8002e5e:	6811      	ldr	r1, [r2, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd ff29 	bl	8000cb8 <__aeabi_fmul>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002e6c:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002e70:	6811      	ldr	r1, [r2, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fd ff20 	bl	8000cb8 <__aeabi_fmul>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461d      	mov	r5, r3
 8002e7c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002e80:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8002e84:	6819      	ldr	r1, [r3, #0]
 8002e86:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002e8a:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	f7fd ff12 	bl	8000cb8 <__aeabi_fmul>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002e9a:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002e9e:	6811      	ldr	r1, [r2, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fd ff09 	bl	8000cb8 <__aeabi_fmul>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002eac:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002eb0:	6811      	ldr	r1, [r2, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd ff00 	bl	8000cb8 <__aeabi_fmul>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	f7fd fdf1 	bl	8000aa4 <__aeabi_fsub>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461d      	mov	r5, r3
 8002ec6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002eca:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002ed6:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002ee4:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8002ee8:	6811      	ldr	r1, [r2, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd fee4 	bl	8000cb8 <__aeabi_fmul>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002ef6:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8002efa:	6811      	ldr	r1, [r2, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fedb 	bl	8000cb8 <__aeabi_fmul>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002f08:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8002f0c:	6811      	ldr	r1, [r2, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fed2 	bl	8000cb8 <__aeabi_fmul>
 8002f14:	4603      	mov	r3, r0
 8002f16:	4619      	mov	r1, r3
 8002f18:	4628      	mov	r0, r5
 8002f1a:	f7fd fdc3 	bl	8000aa4 <__aeabi_fsub>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	461d      	mov	r5, r3
 8002f22:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002f26:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002f32:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	4413      	add	r3, r2
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002f40:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8002f44:	6811      	ldr	r1, [r2, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd feb6 	bl	8000cb8 <__aeabi_fmul>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002f52:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002f56:	6811      	ldr	r1, [r2, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd fead 	bl	8000cb8 <__aeabi_fmul>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002f64:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002f68:	6811      	ldr	r1, [r2, #0]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fea4 	bl	8000cb8 <__aeabi_fmul>
 8002f70:	4603      	mov	r3, r0
 8002f72:	4619      	mov	r1, r3
 8002f74:	4628      	mov	r0, r5
 8002f76:	f7fd fd97 	bl	8000aa8 <__addsf3>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	461d      	mov	r5, r3
 8002f7e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002f82:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002f8c:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	f7fd fe91 	bl	8000cb8 <__aeabi_fmul>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002f9c:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8002fa0:	6811      	ldr	r1, [r2, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd fe88 	bl	8000cb8 <__aeabi_fmul>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002fae:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8002fb2:	6811      	ldr	r1, [r2, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fe7f 	bl	8000cb8 <__aeabi_fmul>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002fc0:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8002fc4:	6811      	ldr	r1, [r2, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fe76 	bl	8000cb8 <__aeabi_fmul>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f7fd fd69 	bl	8000aa8 <__addsf3>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461d      	mov	r5, r3
 8002fda:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8002fde:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8002fea:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8002ff8:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8002ffc:	6811      	ldr	r1, [r2, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fe5a 	bl	8000cb8 <__aeabi_fmul>
 8003004:	4603      	mov	r3, r0
 8003006:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800300a:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 800300e:	6811      	ldr	r1, [r2, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd fe51 	bl	8000cb8 <__aeabi_fmul>
 8003016:	4603      	mov	r3, r0
 8003018:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800301c:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003020:	6811      	ldr	r1, [r2, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd fe48 	bl	8000cb8 <__aeabi_fmul>
 8003028:	4603      	mov	r3, r0
 800302a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800302e:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003032:	6811      	ldr	r1, [r2, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fe3f 	bl	8000cb8 <__aeabi_fmul>
 800303a:	4603      	mov	r3, r0
 800303c:	4619      	mov	r1, r3
 800303e:	4628      	mov	r0, r5
 8003040:	f7fd fd30 	bl	8000aa4 <__aeabi_fsub>
 8003044:	4603      	mov	r3, r0
 8003046:	461d      	mov	r5, r3
 8003048:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800304c:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003056:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	f7fd fe2c 	bl	8000cb8 <__aeabi_fmul>
 8003060:	4603      	mov	r3, r0
 8003062:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003066:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 800306a:	6811      	ldr	r1, [r2, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fe23 	bl	8000cb8 <__aeabi_fmul>
 8003072:	4603      	mov	r3, r0
 8003074:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003078:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800307c:	6811      	ldr	r1, [r2, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd fe1a 	bl	8000cb8 <__aeabi_fmul>
 8003084:	4603      	mov	r3, r0
 8003086:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800308a:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800308e:	6811      	ldr	r1, [r2, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fd fe11 	bl	8000cb8 <__aeabi_fmul>
 8003096:	4603      	mov	r3, r0
 8003098:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800309c:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80030a0:	6811      	ldr	r1, [r2, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fe08 	bl	8000cb8 <__aeabi_fmul>
 80030a8:	4603      	mov	r3, r0
 80030aa:	4619      	mov	r1, r3
 80030ac:	4628      	mov	r0, r5
 80030ae:	f7fd fcf9 	bl	8000aa4 <__aeabi_fsub>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461d      	mov	r5, r3
 80030b6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80030ba:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80030c6:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	4413      	add	r3, r2
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80030d4:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 80030d8:	6811      	ldr	r1, [r2, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd fdec 	bl	8000cb8 <__aeabi_fmul>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80030e6:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80030ea:	6811      	ldr	r1, [r2, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fde3 	bl	8000cb8 <__aeabi_fmul>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80030f8:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80030fc:	6811      	ldr	r1, [r2, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd fdda 	bl	8000cb8 <__aeabi_fmul>
 8003104:	4603      	mov	r3, r0
 8003106:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800310a:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800310e:	6811      	ldr	r1, [r2, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd fdd1 	bl	8000cb8 <__aeabi_fmul>
 8003116:	4603      	mov	r3, r0
 8003118:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800311c:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003120:	6811      	ldr	r1, [r2, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fdc8 	bl	8000cb8 <__aeabi_fmul>
 8003128:	4603      	mov	r3, r0
 800312a:	4619      	mov	r1, r3
 800312c:	4628      	mov	r0, r5
 800312e:	f7fd fcbb 	bl	8000aa8 <__addsf3>
 8003132:	4603      	mov	r3, r0
 8003134:	4619      	mov	r1, r3
 8003136:	4620      	mov	r0, r4
 8003138:	f7fd fdbe 	bl	8000cb8 <__aeabi_fmul>
 800313c:	4603      	mov	r3, r0
 800313e:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8003142:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003146:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 800314a:	6819      	ldr	r1, [r3, #0]
 800314c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003150:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	f7fd fdaf 	bl	8000cb8 <__aeabi_fmul>
 800315a:	4603      	mov	r3, r0
 800315c:	461d      	mov	r5, r3
 800315e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003162:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800316c:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	f7fd fda1 	bl	8000cb8 <__aeabi_fmul>
 8003176:	4603      	mov	r3, r0
 8003178:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800317c:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8003180:	6811      	ldr	r1, [r2, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd fd98 	bl	8000cb8 <__aeabi_fmul>
 8003188:	4603      	mov	r3, r0
 800318a:	4619      	mov	r1, r3
 800318c:	4628      	mov	r0, r5
 800318e:	f7fd fd93 	bl	8000cb8 <__aeabi_fmul>
 8003192:	4603      	mov	r3, r0
 8003194:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003198:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800319c:	6811      	ldr	r1, [r2, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fd fd8a 	bl	8000cb8 <__aeabi_fmul>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80031aa:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80031ae:	6811      	ldr	r1, [r2, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd fd81 	bl	8000cb8 <__aeabi_fmul>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80031bc:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80031c0:	6811      	ldr	r1, [r2, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd fd78 	bl	8000cb8 <__aeabi_fmul>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80031ce:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80031d2:	6811      	ldr	r1, [r2, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd fd6f 	bl	8000cb8 <__aeabi_fmul>
 80031da:	4603      	mov	r3, r0
 80031dc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80031e0:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80031e4:	6811      	ldr	r1, [r2, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd fd66 	bl	8000cb8 <__aeabi_fmul>
 80031ec:	4603      	mov	r3, r0
 80031ee:	4619      	mov	r1, r3
 80031f0:	4620      	mov	r0, r4
 80031f2:	f7fd fe15 	bl	8000e20 <__aeabi_fdiv>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4619      	mov	r1, r3
 80031fa:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 80031fe:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8003202:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 8003206:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800320a:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	f502 628b 	add.w	r2, r2, #1112	@ 0x458
 8003214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 8003218:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800321c:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4619      	mov	r1, r3
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd fc3f 	bl	8000aa8 <__addsf3>
 800322a:	4603      	mov	r3, r0
 800322c:	461c      	mov	r4, r3
 800322e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003232:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800323e:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	4413      	add	r3, r2
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4619      	mov	r1, r3
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd fc2c 	bl	8000aa8 <__addsf3>
 8003250:	4603      	mov	r3, r0
 8003252:	4619      	mov	r1, r3
 8003254:	4620      	mov	r0, r4
 8003256:	f7fd fc25 	bl	8000aa4 <__aeabi_fsub>
 800325a:	4603      	mov	r3, r0
 800325c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003260:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8003264:	6811      	ldr	r1, [r2, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fdda 	bl	8000e20 <__aeabi_fdiv>
 800326c:	4603      	mov	r3, r0
 800326e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003272:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8003276:	6811      	ldr	r1, [r2, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd fd1d 	bl	8000cb8 <__aeabi_fmul>
 800327e:	4603      	mov	r3, r0
 8003280:	461c      	mov	r4, r3
 8003282:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003286:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd fc0a 	bl	8000aa8 <__addsf3>
 8003294:	4603      	mov	r3, r0
 8003296:	461d      	mov	r5, r3
 8003298:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800329c:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80032a8:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80032b8:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	f7fd fbf1 	bl	8000aa4 <__aeabi_fsub>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80032c8:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 80032cc:	6811      	ldr	r1, [r2, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd fcf2 	bl	8000cb8 <__aeabi_fmul>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461e      	mov	r6, r3
 80032d8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80032dc:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80032e0:	6819      	ldr	r1, [r3, #0]
 80032e2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80032e6:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	f7fd fce4 	bl	8000cb8 <__aeabi_fmul>
 80032f0:	4603      	mov	r3, r0
 80032f2:	4698      	mov	r8, r3
 80032f4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80032f8:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003304:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	4413      	add	r3, r2
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4619      	mov	r1, r3
 8003310:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003314:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	f7fd fbc3 	bl	8000aa4 <__aeabi_fsub>
 800331e:	4603      	mov	r3, r0
 8003320:	4619      	mov	r1, r3
 8003322:	4640      	mov	r0, r8
 8003324:	f7fd fcc8 	bl	8000cb8 <__aeabi_fmul>
 8003328:	4603      	mov	r3, r0
 800332a:	4619      	mov	r1, r3
 800332c:	4630      	mov	r0, r6
 800332e:	f7fd fbb9 	bl	8000aa4 <__aeabi_fsub>
 8003332:	4603      	mov	r3, r0
 8003334:	4619      	mov	r1, r3
 8003336:	4628      	mov	r0, r5
 8003338:	f7fd fcbe 	bl	8000cb8 <__aeabi_fmul>
 800333c:	4603      	mov	r3, r0
 800333e:	461d      	mov	r5, r3
 8003340:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003344:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003348:	6819      	ldr	r1, [r3, #0]
 800334a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800334e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	f7fd fcb0 	bl	8000cb8 <__aeabi_fmul>
 8003358:	4603      	mov	r3, r0
 800335a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800335e:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8003362:	6811      	ldr	r1, [r2, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd fca7 	bl	8000cb8 <__aeabi_fmul>
 800336a:	4603      	mov	r3, r0
 800336c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003370:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003374:	6811      	ldr	r1, [r2, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fc9e 	bl	8000cb8 <__aeabi_fmul>
 800337c:	4603      	mov	r3, r0
 800337e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003382:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003386:	6811      	ldr	r1, [r2, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd fc95 	bl	8000cb8 <__aeabi_fmul>
 800338e:	4603      	mov	r3, r0
 8003390:	4619      	mov	r1, r3
 8003392:	4628      	mov	r0, r5
 8003394:	f7fd fd44 	bl	8000e20 <__aeabi_fdiv>
 8003398:	4603      	mov	r3, r0
 800339a:	4619      	mov	r1, r3
 800339c:	4620      	mov	r0, r4
 800339e:	f7fd fb81 	bl	8000aa4 <__aeabi_fsub>
 80033a2:	4603      	mov	r3, r0
 80033a4:	461c      	mov	r4, r3
 80033a6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80033aa:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80033b4:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	f7fd fc7d 	bl	8000cb8 <__aeabi_fmul>
 80033be:	4603      	mov	r3, r0
 80033c0:	461d      	mov	r5, r3
 80033c2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80033c6:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80033ca:	6819      	ldr	r1, [r3, #0]
 80033cc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80033d0:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 80033d4:	6818      	ldr	r0, [r3, #0]
 80033d6:	f7fd fc6f 	bl	8000cb8 <__aeabi_fmul>
 80033da:	4603      	mov	r3, r0
 80033dc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80033e0:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80033e4:	6811      	ldr	r1, [r2, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fc66 	bl	8000cb8 <__aeabi_fmul>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4619      	mov	r1, r3
 80033f0:	4628      	mov	r0, r5
 80033f2:	f7fd fb57 	bl	8000aa4 <__aeabi_fsub>
 80033f6:	4603      	mov	r3, r0
 80033f8:	4619      	mov	r1, r3
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fb54 	bl	8000aa8 <__addsf3>
 8003400:	4603      	mov	r3, r0
 8003402:	461d      	mov	r5, r3
 8003404:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003408:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 800340c:	6819      	ldr	r1, [r3, #0]
 800340e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003412:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	f7fd fc4e 	bl	8000cb8 <__aeabi_fmul>
 800341c:	4603      	mov	r3, r0
 800341e:	461e      	mov	r6, r3
 8003420:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003424:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8003428:	6819      	ldr	r1, [r3, #0]
 800342a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800342e:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003432:	6818      	ldr	r0, [r3, #0]
 8003434:	f7fd fc40 	bl	8000cb8 <__aeabi_fmul>
 8003438:	4603      	mov	r3, r0
 800343a:	4698      	mov	r8, r3
 800343c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003440:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8003444:	6819      	ldr	r1, [r3, #0]
 8003446:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800344a:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	f7fd fc32 	bl	8000cb8 <__aeabi_fmul>
 8003454:	4603      	mov	r3, r0
 8003456:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800345a:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 800345e:	6811      	ldr	r1, [r2, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7fd fc29 	bl	8000cb8 <__aeabi_fmul>
 8003466:	4603      	mov	r3, r0
 8003468:	4619      	mov	r1, r3
 800346a:	4640      	mov	r0, r8
 800346c:	f7fd fb1a 	bl	8000aa4 <__aeabi_fsub>
 8003470:	4603      	mov	r3, r0
 8003472:	4619      	mov	r1, r3
 8003474:	4630      	mov	r0, r6
 8003476:	f7fd fc1f 	bl	8000cb8 <__aeabi_fmul>
 800347a:	4603      	mov	r3, r0
 800347c:	461e      	mov	r6, r3
 800347e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003482:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800348e:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	4413      	add	r3, r2
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4619      	mov	r1, r3
 800349a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800349e:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	f7fd fafe 	bl	8000aa4 <__aeabi_fsub>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4619      	mov	r1, r3
 80034ac:	4630      	mov	r0, r6
 80034ae:	f7fd fc03 	bl	8000cb8 <__aeabi_fmul>
 80034b2:	4603      	mov	r3, r0
 80034b4:	461e      	mov	r6, r3
 80034b6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80034ba:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 80034be:	6819      	ldr	r1, [r3, #0]
 80034c0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80034c4:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	f7fd fbf5 	bl	8000cb8 <__aeabi_fmul>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80034d4:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80034d8:	6811      	ldr	r1, [r2, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd fbec 	bl	8000cb8 <__aeabi_fmul>
 80034e0:	4603      	mov	r3, r0
 80034e2:	4698      	mov	r8, r3
 80034e4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80034e8:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80034f4:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4619      	mov	r1, r3
 8003500:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003504:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	f7fd facb 	bl	8000aa4 <__aeabi_fsub>
 800350e:	4603      	mov	r3, r0
 8003510:	4619      	mov	r1, r3
 8003512:	4640      	mov	r0, r8
 8003514:	f7fd fbd0 	bl	8000cb8 <__aeabi_fmul>
 8003518:	4603      	mov	r3, r0
 800351a:	4619      	mov	r1, r3
 800351c:	4630      	mov	r0, r6
 800351e:	f7fd fac3 	bl	8000aa8 <__addsf3>
 8003522:	4603      	mov	r3, r0
 8003524:	461e      	mov	r6, r3
 8003526:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800352a:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 800352e:	6819      	ldr	r1, [r3, #0]
 8003530:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003534:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	f7fd fbbd 	bl	8000cb8 <__aeabi_fmul>
 800353e:	4603      	mov	r3, r0
 8003540:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003544:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003548:	6811      	ldr	r1, [r2, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd fbb4 	bl	8000cb8 <__aeabi_fmul>
 8003550:	4603      	mov	r3, r0
 8003552:	4698      	mov	r8, r3
 8003554:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003558:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003564:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	4413      	add	r3, r2
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4619      	mov	r1, r3
 8003570:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003574:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	f7fd fa93 	bl	8000aa4 <__aeabi_fsub>
 800357e:	4603      	mov	r3, r0
 8003580:	4619      	mov	r1, r3
 8003582:	4640      	mov	r0, r8
 8003584:	f7fd fb98 	bl	8000cb8 <__aeabi_fmul>
 8003588:	4603      	mov	r3, r0
 800358a:	4619      	mov	r1, r3
 800358c:	4630      	mov	r0, r6
 800358e:	f7fd fa89 	bl	8000aa4 <__aeabi_fsub>
 8003592:	4603      	mov	r3, r0
 8003594:	4619      	mov	r1, r3
 8003596:	4628      	mov	r0, r5
 8003598:	f7fd fb8e 	bl	8000cb8 <__aeabi_fmul>
 800359c:	4603      	mov	r3, r0
 800359e:	461d      	mov	r5, r3
 80035a0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80035a4:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80035ae:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	f7fd fb80 	bl	8000cb8 <__aeabi_fmul>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80035be:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 80035c2:	6811      	ldr	r1, [r2, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fb77 	bl	8000cb8 <__aeabi_fmul>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80035d0:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80035d4:	6811      	ldr	r1, [r2, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd fb6e 	bl	8000cb8 <__aeabi_fmul>
 80035dc:	4603      	mov	r3, r0
 80035de:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80035e2:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80035e6:	6811      	ldr	r1, [r2, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fb65 	bl	8000cb8 <__aeabi_fmul>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80035f4:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80035f8:	6811      	ldr	r1, [r2, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fd fb5c 	bl	8000cb8 <__aeabi_fmul>
 8003600:	4603      	mov	r3, r0
 8003602:	4619      	mov	r1, r3
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fa4f 	bl	8000aa8 <__addsf3>
 800360a:	4603      	mov	r3, r0
 800360c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003610:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8003614:	6811      	ldr	r1, [r2, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fd fb4e 	bl	8000cb8 <__aeabi_fmul>
 800361c:	4603      	mov	r3, r0
 800361e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003622:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8003626:	6811      	ldr	r1, [r2, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fb45 	bl	8000cb8 <__aeabi_fmul>
 800362e:	4603      	mov	r3, r0
 8003630:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003634:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003638:	6811      	ldr	r1, [r2, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fd fb3c 	bl	8000cb8 <__aeabi_fmul>
 8003640:	4603      	mov	r3, r0
 8003642:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003646:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800364a:	6811      	ldr	r1, [r2, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7fd fb33 	bl	8000cb8 <__aeabi_fmul>
 8003652:	4603      	mov	r3, r0
 8003654:	4619      	mov	r1, r3
 8003656:	4628      	mov	r0, r5
 8003658:	f7fd fbe2 	bl	8000e20 <__aeabi_fdiv>
 800365c:	4603      	mov	r3, r0
 800365e:	4619      	mov	r1, r3
 8003660:	4620      	mov	r0, r4
 8003662:	f7fd fa21 	bl	8000aa8 <__addsf3>
 8003666:	4603      	mov	r3, r0
 8003668:	4619      	mov	r1, r3
 800366a:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 800366e:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8003672:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 8003676:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800367a:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	f202 6284 	addw	r2, r2, #1668	@ 0x684
 8003684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8003688:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800368c:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003698:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	4413      	add	r3, r2
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4619      	mov	r1, r3
 80036a4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80036a8:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	f7fd f9f9 	bl	8000aa4 <__aeabi_fsub>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80036b8:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 80036bc:	6811      	ldr	r1, [r2, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fafa 	bl	8000cb8 <__aeabi_fmul>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461c      	mov	r4, r3
 80036c8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80036cc:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80036d6:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	f7fd faec 	bl	8000cb8 <__aeabi_fmul>
 80036e0:	4603      	mov	r3, r0
 80036e2:	461d      	mov	r5, r3
 80036e4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80036e8:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80036f4:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	4413      	add	r3, r2
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4619      	mov	r1, r3
 8003700:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003704:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	f7fd f9cb 	bl	8000aa4 <__aeabi_fsub>
 800370e:	4603      	mov	r3, r0
 8003710:	4619      	mov	r1, r3
 8003712:	4628      	mov	r0, r5
 8003714:	f7fd fad0 	bl	8000cb8 <__aeabi_fmul>
 8003718:	4603      	mov	r3, r0
 800371a:	4619      	mov	r1, r3
 800371c:	4620      	mov	r0, r4
 800371e:	f7fd f9c1 	bl	8000aa4 <__aeabi_fsub>
 8003722:	4603      	mov	r3, r0
 8003724:	4619      	mov	r1, r3
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd f9be 	bl	8000aa8 <__addsf3>
 800372c:	4603      	mov	r3, r0
 800372e:	461c      	mov	r4, r3
 8003730:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003734:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800373e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	f7fd fab8 	bl	8000cb8 <__aeabi_fmul>
 8003748:	4603      	mov	r3, r0
 800374a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800374e:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8003752:	6811      	ldr	r1, [r2, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd faaf 	bl	8000cb8 <__aeabi_fmul>
 800375a:	4603      	mov	r3, r0
 800375c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003760:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003764:	6811      	ldr	r1, [r2, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd faa6 	bl	8000cb8 <__aeabi_fmul>
 800376c:	4603      	mov	r3, r0
 800376e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003772:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003776:	6811      	ldr	r1, [r2, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd fa9d 	bl	8000cb8 <__aeabi_fmul>
 800377e:	4603      	mov	r3, r0
 8003780:	4619      	mov	r1, r3
 8003782:	4620      	mov	r0, r4
 8003784:	f7fd fb4c 	bl	8000e20 <__aeabi_fdiv>
 8003788:	4603      	mov	r3, r0
 800378a:	461c      	mov	r4, r3
 800378c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003790:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4619      	mov	r1, r3
 8003798:	4618      	mov	r0, r3
 800379a:	f7fd f985 	bl	8000aa8 <__addsf3>
 800379e:	4603      	mov	r3, r0
 80037a0:	461d      	mov	r5, r3
 80037a2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80037a6:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 80037aa:	6819      	ldr	r1, [r3, #0]
 80037ac:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80037b0:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	f7fd fa7f 	bl	8000cb8 <__aeabi_fmul>
 80037ba:	4603      	mov	r3, r0
 80037bc:	461e      	mov	r6, r3
 80037be:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80037c2:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80037c6:	6819      	ldr	r1, [r3, #0]
 80037c8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80037cc:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	f7fd fa71 	bl	8000cb8 <__aeabi_fmul>
 80037d6:	4603      	mov	r3, r0
 80037d8:	4698      	mov	r8, r3
 80037da:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80037de:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80037e8:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	f7fd fa63 	bl	8000cb8 <__aeabi_fmul>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80037f8:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80037fc:	6811      	ldr	r1, [r2, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd fa5a 	bl	8000cb8 <__aeabi_fmul>
 8003804:	4603      	mov	r3, r0
 8003806:	4619      	mov	r1, r3
 8003808:	4640      	mov	r0, r8
 800380a:	f7fd f94b 	bl	8000aa4 <__aeabi_fsub>
 800380e:	4603      	mov	r3, r0
 8003810:	4619      	mov	r1, r3
 8003812:	4630      	mov	r0, r6
 8003814:	f7fd fa50 	bl	8000cb8 <__aeabi_fmul>
 8003818:	4603      	mov	r3, r0
 800381a:	461e      	mov	r6, r3
 800381c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003820:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800382c:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	4413      	add	r3, r2
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4619      	mov	r1, r3
 8003838:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800383c:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	f7fd f92f 	bl	8000aa4 <__aeabi_fsub>
 8003846:	4603      	mov	r3, r0
 8003848:	4619      	mov	r1, r3
 800384a:	4630      	mov	r0, r6
 800384c:	f7fd fa34 	bl	8000cb8 <__aeabi_fmul>
 8003850:	4603      	mov	r3, r0
 8003852:	461e      	mov	r6, r3
 8003854:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003858:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003862:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003866:	6818      	ldr	r0, [r3, #0]
 8003868:	f7fd fa26 	bl	8000cb8 <__aeabi_fmul>
 800386c:	4603      	mov	r3, r0
 800386e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003872:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003876:	6811      	ldr	r1, [r2, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fd fa1d 	bl	8000cb8 <__aeabi_fmul>
 800387e:	4603      	mov	r3, r0
 8003880:	4698      	mov	r8, r3
 8003882:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003886:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003892:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	4413      	add	r3, r2
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4619      	mov	r1, r3
 800389e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80038a2:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	f7fd f8fc 	bl	8000aa4 <__aeabi_fsub>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4619      	mov	r1, r3
 80038b0:	4640      	mov	r0, r8
 80038b2:	f7fd fa01 	bl	8000cb8 <__aeabi_fmul>
 80038b6:	4603      	mov	r3, r0
 80038b8:	4619      	mov	r1, r3
 80038ba:	4630      	mov	r0, r6
 80038bc:	f7fd f8f4 	bl	8000aa8 <__addsf3>
 80038c0:	4603      	mov	r3, r0
 80038c2:	461e      	mov	r6, r3
 80038c4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80038c8:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 80038cc:	6819      	ldr	r1, [r3, #0]
 80038ce:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80038d2:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80038d6:	6818      	ldr	r0, [r3, #0]
 80038d8:	f7fd f9ee 	bl	8000cb8 <__aeabi_fmul>
 80038dc:	4603      	mov	r3, r0
 80038de:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80038e2:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80038e6:	6811      	ldr	r1, [r2, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fd f9e5 	bl	8000cb8 <__aeabi_fmul>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4698      	mov	r8, r3
 80038f2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80038f6:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003902:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	4413      	add	r3, r2
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4619      	mov	r1, r3
 800390e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003912:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	f7fd f8c4 	bl	8000aa4 <__aeabi_fsub>
 800391c:	4603      	mov	r3, r0
 800391e:	4619      	mov	r1, r3
 8003920:	4640      	mov	r0, r8
 8003922:	f7fd f9c9 	bl	8000cb8 <__aeabi_fmul>
 8003926:	4603      	mov	r3, r0
 8003928:	4619      	mov	r1, r3
 800392a:	4630      	mov	r0, r6
 800392c:	f7fd f8ba 	bl	8000aa4 <__aeabi_fsub>
 8003930:	4603      	mov	r3, r0
 8003932:	4619      	mov	r1, r3
 8003934:	4628      	mov	r0, r5
 8003936:	f7fd f9bf 	bl	8000cb8 <__aeabi_fmul>
 800393a:	4603      	mov	r3, r0
 800393c:	461d      	mov	r5, r3
 800393e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003942:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800394c:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	f7fd f9b1 	bl	8000cb8 <__aeabi_fmul>
 8003956:	4603      	mov	r3, r0
 8003958:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800395c:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8003960:	6811      	ldr	r1, [r2, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd f9a8 	bl	8000cb8 <__aeabi_fmul>
 8003968:	4603      	mov	r3, r0
 800396a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800396e:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8003972:	6811      	ldr	r1, [r2, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd f99f 	bl	8000cb8 <__aeabi_fmul>
 800397a:	4603      	mov	r3, r0
 800397c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003980:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8003984:	6811      	ldr	r1, [r2, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fd f996 	bl	8000cb8 <__aeabi_fmul>
 800398c:	4603      	mov	r3, r0
 800398e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003992:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8003996:	6811      	ldr	r1, [r2, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fd f98d 	bl	8000cb8 <__aeabi_fmul>
 800399e:	4603      	mov	r3, r0
 80039a0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80039a4:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80039a8:	6811      	ldr	r1, [r2, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd f984 	bl	8000cb8 <__aeabi_fmul>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80039b6:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80039ba:	6811      	ldr	r1, [r2, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd f97b 	bl	8000cb8 <__aeabi_fmul>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80039c8:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80039cc:	6811      	ldr	r1, [r2, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fd f972 	bl	8000cb8 <__aeabi_fmul>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80039da:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80039de:	6811      	ldr	r1, [r2, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd f969 	bl	8000cb8 <__aeabi_fmul>
 80039e6:	4603      	mov	r3, r0
 80039e8:	4619      	mov	r1, r3
 80039ea:	4628      	mov	r0, r5
 80039ec:	f7fd fa18 	bl	8000e20 <__aeabi_fdiv>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4619      	mov	r1, r3
 80039f4:	4620      	mov	r0, r4
 80039f6:	f7fd f855 	bl	8000aa4 <__aeabi_fsub>
 80039fa:	4603      	mov	r3, r0
 80039fc:	4619      	mov	r1, r3
 80039fe:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 8003a02:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8003a06:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 8003a0a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003a0e:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	f502 620b 	add.w	r2, r2, #2224	@ 0x8b0
 8003a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8003a1c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003a20:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8003a24:	6819      	ldr	r1, [r3, #0]
 8003a26:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003a2a:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	f7fd f942 	bl	8000cb8 <__aeabi_fmul>
 8003a34:	4603      	mov	r3, r0
 8003a36:	461c      	mov	r4, r3
 8003a38:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003a3c:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003a46:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	f7fd f934 	bl	8000cb8 <__aeabi_fmul>
 8003a50:	4603      	mov	r3, r0
 8003a52:	461d      	mov	r5, r3
 8003a54:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003a58:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003a62:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	f7fd f926 	bl	8000cb8 <__aeabi_fmul>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003a72:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8003a76:	6811      	ldr	r1, [r2, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fd f91d 	bl	8000cb8 <__aeabi_fmul>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4619      	mov	r1, r3
 8003a82:	4628      	mov	r0, r5
 8003a84:	f7fd f80e 	bl	8000aa4 <__aeabi_fsub>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f7fd f913 	bl	8000cb8 <__aeabi_fmul>
 8003a92:	4603      	mov	r3, r0
 8003a94:	461c      	mov	r4, r3
 8003a96:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003a9a:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003aa6:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	4413      	add	r3, r2
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003ab6:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	f7fc fff2 	bl	8000aa4 <__aeabi_fsub>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7fd f8f7 	bl	8000cb8 <__aeabi_fmul>
 8003aca:	4603      	mov	r3, r0
 8003acc:	461c      	mov	r4, r3
 8003ace:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003ad2:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8003ad6:	6819      	ldr	r1, [r3, #0]
 8003ad8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003adc:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003ae0:	6818      	ldr	r0, [r3, #0]
 8003ae2:	f7fd f8e9 	bl	8000cb8 <__aeabi_fmul>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003aec:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003af0:	6811      	ldr	r1, [r2, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd f8e0 	bl	8000cb8 <__aeabi_fmul>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461d      	mov	r5, r3
 8003afc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003b00:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003b0c:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4619      	mov	r1, r3
 8003b18:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003b1c:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	f7fc ffbf 	bl	8000aa4 <__aeabi_fsub>
 8003b26:	4603      	mov	r3, r0
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f7fd f8c4 	bl	8000cb8 <__aeabi_fmul>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4619      	mov	r1, r3
 8003b34:	4620      	mov	r0, r4
 8003b36:	f7fc ffb7 	bl	8000aa8 <__addsf3>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	461c      	mov	r4, r3
 8003b3e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003b42:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003b4c:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	f7fd f8b1 	bl	8000cb8 <__aeabi_fmul>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003b5c:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003b60:	6811      	ldr	r1, [r2, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd f8a8 	bl	8000cb8 <__aeabi_fmul>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003b70:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003b7c:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	4413      	add	r3, r2
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4619      	mov	r1, r3
 8003b88:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003b8c:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	f7fc ff87 	bl	8000aa4 <__aeabi_fsub>
 8003b96:	4603      	mov	r3, r0
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f7fd f88c 	bl	8000cb8 <__aeabi_fmul>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f7fc ff7d 	bl	8000aa4 <__aeabi_fsub>
 8003baa:	4603      	mov	r3, r0
 8003bac:	4619      	mov	r1, r3
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fc ff7a 	bl	8000aa8 <__addsf3>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	461c      	mov	r4, r3
 8003bb8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003bbc:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8003bc0:	6819      	ldr	r1, [r3, #0]
 8003bc2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003bc6:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	f7fd f874 	bl	8000cb8 <__aeabi_fmul>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003bd6:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8003bda:	6811      	ldr	r1, [r2, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fd f86b 	bl	8000cb8 <__aeabi_fmul>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003be8:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8003bec:	6811      	ldr	r1, [r2, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd f862 	bl	8000cb8 <__aeabi_fmul>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003bfa:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8003bfe:	6811      	ldr	r1, [r2, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fd f859 	bl	8000cb8 <__aeabi_fmul>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003c0c:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8003c10:	6811      	ldr	r1, [r2, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fd f850 	bl	8000cb8 <__aeabi_fmul>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003c1e:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8003c22:	6811      	ldr	r1, [r2, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fd f847 	bl	8000cb8 <__aeabi_fmul>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003c30:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8003c34:	6811      	ldr	r1, [r2, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd f83e 	bl	8000cb8 <__aeabi_fmul>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003c42:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003c46:	6811      	ldr	r1, [r2, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fd f835 	bl	8000cb8 <__aeabi_fmul>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4619      	mov	r1, r3
 8003c52:	4620      	mov	r0, r4
 8003c54:	f7fd f8e4 	bl	8000e20 <__aeabi_fdiv>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 8003c60:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8003c64:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 8003c68:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003c6c:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	f602 22dc 	addw	r2, r2, #2780	@ 0xadc
 8003c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 8003c7a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003c7e:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8003c82:	6819      	ldr	r1, [r3, #0]
 8003c84:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003c88:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	f7fd f813 	bl	8000cb8 <__aeabi_fmul>
 8003c92:	4603      	mov	r3, r0
 8003c94:	461c      	mov	r4, r3
 8003c96:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003c9a:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003ca6:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003cb4:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8003cb8:	6811      	ldr	r1, [r2, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fc fffc 	bl	8000cb8 <__aeabi_fmul>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f7fc feed 	bl	8000aa4 <__aeabi_fsub>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	461c      	mov	r4, r3
 8003cce:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003cd2:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003cdc:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	f7fc ffe9 	bl	8000cb8 <__aeabi_fmul>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003cec:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003cf0:	6811      	ldr	r1, [r2, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fc ffe0 	bl	8000cb8 <__aeabi_fmul>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f7fc fed1 	bl	8000aa4 <__aeabi_fsub>
 8003d02:	4603      	mov	r3, r0
 8003d04:	461c      	mov	r4, r3
 8003d06:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003d0a:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003d16:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003d24:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8003d28:	6811      	ldr	r1, [r2, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fc ffc4 	bl	8000cb8 <__aeabi_fmul>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003d36:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8003d3a:	6811      	ldr	r1, [r2, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fc ffbb 	bl	8000cb8 <__aeabi_fmul>
 8003d42:	4603      	mov	r3, r0
 8003d44:	4619      	mov	r1, r3
 8003d46:	4620      	mov	r0, r4
 8003d48:	f7fc feae 	bl	8000aa8 <__addsf3>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fc fea9 	bl	8000aa8 <__addsf3>
 8003d56:	4603      	mov	r3, r0
 8003d58:	461c      	mov	r4, r3
 8003d5a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003d5e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003d68:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	f7fc ffa3 	bl	8000cb8 <__aeabi_fmul>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003d78:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8003d7c:	6811      	ldr	r1, [r2, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fc ff9a 	bl	8000cb8 <__aeabi_fmul>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003d8a:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003d8e:	6811      	ldr	r1, [r2, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fc ff91 	bl	8000cb8 <__aeabi_fmul>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003d9c:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003da0:	6811      	ldr	r1, [r2, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fc ff88 	bl	8000cb8 <__aeabi_fmul>
 8003da8:	4603      	mov	r3, r0
 8003daa:	461d      	mov	r5, r3
 8003dac:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003db0:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003dbc:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003dca:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8003dce:	6811      	ldr	r1, [r2, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fc ff71 	bl	8000cb8 <__aeabi_fmul>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003ddc:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8003de0:	6811      	ldr	r1, [r2, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc ff68 	bl	8000cb8 <__aeabi_fmul>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003dee:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003df2:	6811      	ldr	r1, [r2, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fc ff5f 	bl	8000cb8 <__aeabi_fmul>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003e00:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003e04:	6811      	ldr	r1, [r2, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc ff56 	bl	8000cb8 <__aeabi_fmul>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4628      	mov	r0, r5
 8003e12:	f7fc fe47 	bl	8000aa4 <__aeabi_fsub>
 8003e16:	4603      	mov	r3, r0
 8003e18:	461d      	mov	r5, r3
 8003e1a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003e1e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003e28:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	f7fc ff43 	bl	8000cb8 <__aeabi_fmul>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003e38:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8003e3c:	6811      	ldr	r1, [r2, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc ff3a 	bl	8000cb8 <__aeabi_fmul>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003e4a:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8003e4e:	6811      	ldr	r1, [r2, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fc ff31 	bl	8000cb8 <__aeabi_fmul>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003e5c:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8003e60:	6811      	ldr	r1, [r2, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc ff28 	bl	8000cb8 <__aeabi_fmul>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003e6e:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8003e72:	6811      	ldr	r1, [r2, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fc ff1f 	bl	8000cb8 <__aeabi_fmul>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003e80:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8003e84:	6811      	ldr	r1, [r2, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc ff16 	bl	8000cb8 <__aeabi_fmul>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4628      	mov	r0, r5
 8003e92:	f7fc fe09 	bl	8000aa8 <__addsf3>
 8003e96:	4603      	mov	r3, r0
 8003e98:	461d      	mov	r5, r3
 8003e9a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003e9e:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003eaa:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003eb8:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8003ebc:	6811      	ldr	r1, [r2, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc fefa 	bl	8000cb8 <__aeabi_fmul>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003eca:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8003ece:	6811      	ldr	r1, [r2, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc fef1 	bl	8000cb8 <__aeabi_fmul>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003edc:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8003ee0:	6811      	ldr	r1, [r2, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc fee8 	bl	8000cb8 <__aeabi_fmul>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003eee:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8003ef2:	6811      	ldr	r1, [r2, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fc fedf 	bl	8000cb8 <__aeabi_fmul>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003f00:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8003f04:	6811      	ldr	r1, [r2, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fc fed6 	bl	8000cb8 <__aeabi_fmul>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003f12:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8003f16:	6811      	ldr	r1, [r2, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fc fecd 	bl	8000cb8 <__aeabi_fmul>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4619      	mov	r1, r3
 8003f22:	4628      	mov	r0, r5
 8003f24:	f7fc fdbe 	bl	8000aa4 <__aeabi_fsub>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461d      	mov	r5, r3
 8003f2c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003f30:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003f3a:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	f7fc feba 	bl	8000cb8 <__aeabi_fmul>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003f4a:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8003f4e:	6811      	ldr	r1, [r2, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc feb1 	bl	8000cb8 <__aeabi_fmul>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003f5c:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003f60:	6811      	ldr	r1, [r2, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc fea8 	bl	8000cb8 <__aeabi_fmul>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003f6e:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003f72:	6811      	ldr	r1, [r2, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fc fe9f 	bl	8000cb8 <__aeabi_fmul>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f7fc fd90 	bl	8000aa4 <__aeabi_fsub>
 8003f84:	4603      	mov	r3, r0
 8003f86:	461d      	mov	r5, r3
 8003f88:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003f8c:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8003f98:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003fa6:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 8003faa:	6811      	ldr	r1, [r2, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc fe83 	bl	8000cb8 <__aeabi_fmul>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003fb8:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8003fbc:	6811      	ldr	r1, [r2, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fe7a 	bl	8000cb8 <__aeabi_fmul>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003fca:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8003fce:	6811      	ldr	r1, [r2, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fc fe71 	bl	8000cb8 <__aeabi_fmul>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8003fdc:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8003fe0:	6811      	ldr	r1, [r2, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc fe68 	bl	8000cb8 <__aeabi_fmul>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	4619      	mov	r1, r3
 8003fec:	4628      	mov	r0, r5
 8003fee:	f7fc fd5b 	bl	8000aa8 <__addsf3>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	461d      	mov	r5, r3
 8003ff6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8003ffa:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004004:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	f7fc fe55 	bl	8000cb8 <__aeabi_fmul>
 800400e:	4603      	mov	r3, r0
 8004010:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004014:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8004018:	6811      	ldr	r1, [r2, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fc fe4c 	bl	8000cb8 <__aeabi_fmul>
 8004020:	4603      	mov	r3, r0
 8004022:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004026:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 800402a:	6811      	ldr	r1, [r2, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7fc fe43 	bl	8000cb8 <__aeabi_fmul>
 8004032:	4603      	mov	r3, r0
 8004034:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004038:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 800403c:	6811      	ldr	r1, [r2, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc fe3a 	bl	8000cb8 <__aeabi_fmul>
 8004044:	4603      	mov	r3, r0
 8004046:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800404a:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 800404e:	6811      	ldr	r1, [r2, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc fe31 	bl	8000cb8 <__aeabi_fmul>
 8004056:	4603      	mov	r3, r0
 8004058:	4619      	mov	r1, r3
 800405a:	4628      	mov	r0, r5
 800405c:	f7fc fd22 	bl	8000aa4 <__aeabi_fsub>
 8004060:	4603      	mov	r3, r0
 8004062:	461d      	mov	r5, r3
 8004064:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004068:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004074:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	4413      	add	r3, r2
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004082:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8004086:	6811      	ldr	r1, [r2, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc fe15 	bl	8000cb8 <__aeabi_fmul>
 800408e:	4603      	mov	r3, r0
 8004090:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004094:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8004098:	6811      	ldr	r1, [r2, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc fe0c 	bl	8000cb8 <__aeabi_fmul>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80040a6:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80040aa:	6811      	ldr	r1, [r2, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fc fe03 	bl	8000cb8 <__aeabi_fmul>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80040b8:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80040bc:	6811      	ldr	r1, [r2, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc fdfa 	bl	8000cb8 <__aeabi_fmul>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80040ca:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 80040ce:	6811      	ldr	r1, [r2, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fc fdf1 	bl	8000cb8 <__aeabi_fmul>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4619      	mov	r1, r3
 80040da:	4628      	mov	r0, r5
 80040dc:	f7fc fce4 	bl	8000aa8 <__addsf3>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461d      	mov	r5, r3
 80040e4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80040e8:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 80040ec:	6819      	ldr	r1, [r3, #0]
 80040ee:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80040f2:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	f7fc fdde 	bl	8000cb8 <__aeabi_fmul>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004102:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8004106:	6811      	ldr	r1, [r2, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc fdd5 	bl	8000cb8 <__aeabi_fmul>
 800410e:	4603      	mov	r3, r0
 8004110:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004114:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8004118:	6811      	ldr	r1, [r2, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc fdcc 	bl	8000cb8 <__aeabi_fmul>
 8004120:	4603      	mov	r3, r0
 8004122:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004126:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800412a:	6811      	ldr	r1, [r2, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fc fdc3 	bl	8000cb8 <__aeabi_fmul>
 8004132:	4603      	mov	r3, r0
 8004134:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004138:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 800413c:	6811      	ldr	r1, [r2, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc fdba 	bl	8000cb8 <__aeabi_fmul>
 8004144:	4603      	mov	r3, r0
 8004146:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800414a:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 800414e:	6811      	ldr	r1, [r2, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc fdb1 	bl	8000cb8 <__aeabi_fmul>
 8004156:	4603      	mov	r3, r0
 8004158:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800415c:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8004160:	6811      	ldr	r1, [r2, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fc fda8 	bl	8000cb8 <__aeabi_fmul>
 8004168:	4603      	mov	r3, r0
 800416a:	4619      	mov	r1, r3
 800416c:	4628      	mov	r0, r5
 800416e:	f7fc fc99 	bl	8000aa4 <__aeabi_fsub>
 8004172:	4603      	mov	r3, r0
 8004174:	461d      	mov	r5, r3
 8004176:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800417a:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004186:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	4413      	add	r3, r2
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004194:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8004198:	6811      	ldr	r1, [r2, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fc fd8c 	bl	8000cb8 <__aeabi_fmul>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80041a6:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80041aa:	6811      	ldr	r1, [r2, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fc fd83 	bl	8000cb8 <__aeabi_fmul>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80041b8:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80041bc:	6811      	ldr	r1, [r2, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc fd7a 	bl	8000cb8 <__aeabi_fmul>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80041ca:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80041ce:	6811      	ldr	r1, [r2, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fc fd71 	bl	8000cb8 <__aeabi_fmul>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80041dc:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80041e0:	6811      	ldr	r1, [r2, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc fd68 	bl	8000cb8 <__aeabi_fmul>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80041ee:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80041f2:	6811      	ldr	r1, [r2, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fc fd5f 	bl	8000cb8 <__aeabi_fmul>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004200:	f102 0264 	add.w	r2, r2, #100	@ 0x64
 8004204:	6811      	ldr	r1, [r2, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc fd56 	bl	8000cb8 <__aeabi_fmul>
 800420c:	4603      	mov	r3, r0
 800420e:	4619      	mov	r1, r3
 8004210:	4628      	mov	r0, r5
 8004212:	f7fc fc49 	bl	8000aa8 <__addsf3>
 8004216:	4603      	mov	r3, r0
 8004218:	461d      	mov	r5, r3
 800421a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800421e:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004228:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	f7fc fd43 	bl	8000cb8 <__aeabi_fmul>
 8004232:	4603      	mov	r3, r0
 8004234:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004238:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 800423c:	6811      	ldr	r1, [r2, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7fc fd3a 	bl	8000cb8 <__aeabi_fmul>
 8004244:	4603      	mov	r3, r0
 8004246:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800424a:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800424e:	6811      	ldr	r1, [r2, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7fc fd31 	bl	8000cb8 <__aeabi_fmul>
 8004256:	4603      	mov	r3, r0
 8004258:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800425c:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8004260:	6811      	ldr	r1, [r2, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc fd28 	bl	8000cb8 <__aeabi_fmul>
 8004268:	4603      	mov	r3, r0
 800426a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800426e:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8004272:	6811      	ldr	r1, [r2, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fc fd1f 	bl	8000cb8 <__aeabi_fmul>
 800427a:	4603      	mov	r3, r0
 800427c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004280:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8004284:	6811      	ldr	r1, [r2, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fc fd16 	bl	8000cb8 <__aeabi_fmul>
 800428c:	4603      	mov	r3, r0
 800428e:	4619      	mov	r1, r3
 8004290:	4628      	mov	r0, r5
 8004292:	f7fc fc09 	bl	8000aa8 <__addsf3>
 8004296:	4603      	mov	r3, r0
 8004298:	461d      	mov	r5, r3
 800429a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800429e:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80042aa:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	4413      	add	r3, r2
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80042b8:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 80042bc:	6811      	ldr	r1, [r2, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc fcfa 	bl	8000cb8 <__aeabi_fmul>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80042ca:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80042ce:	6811      	ldr	r1, [r2, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fc fcf1 	bl	8000cb8 <__aeabi_fmul>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80042dc:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80042e0:	6811      	ldr	r1, [r2, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fc fce8 	bl	8000cb8 <__aeabi_fmul>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80042ee:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80042f2:	6811      	ldr	r1, [r2, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fc fcdf 	bl	8000cb8 <__aeabi_fmul>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004300:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8004304:	6811      	ldr	r1, [r2, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f7fc fcd6 	bl	8000cb8 <__aeabi_fmul>
 800430c:	4603      	mov	r3, r0
 800430e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004312:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8004316:	6811      	ldr	r1, [r2, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7fc fccd 	bl	8000cb8 <__aeabi_fmul>
 800431e:	4603      	mov	r3, r0
 8004320:	4619      	mov	r1, r3
 8004322:	4628      	mov	r0, r5
 8004324:	f7fc fbbe 	bl	8000aa4 <__aeabi_fsub>
 8004328:	4603      	mov	r3, r0
 800432a:	4619      	mov	r1, r3
 800432c:	4620      	mov	r0, r4
 800432e:	f7fc fcc3 	bl	8000cb8 <__aeabi_fmul>
 8004332:	4603      	mov	r3, r0
 8004334:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8004338:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800433c:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004346:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	f7fc fcb4 	bl	8000cb8 <__aeabi_fmul>
 8004350:	4603      	mov	r3, r0
 8004352:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004356:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 800435a:	6811      	ldr	r1, [r2, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fc fcab 	bl	8000cb8 <__aeabi_fmul>
 8004362:	4603      	mov	r3, r0
 8004364:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004368:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 800436c:	6811      	ldr	r1, [r2, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f7fc fca2 	bl	8000cb8 <__aeabi_fmul>
 8004374:	4603      	mov	r3, r0
 8004376:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800437a:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 800437e:	6811      	ldr	r1, [r2, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7fc fc99 	bl	8000cb8 <__aeabi_fmul>
 8004386:	4603      	mov	r3, r0
 8004388:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800438c:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8004390:	6811      	ldr	r1, [r2, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7fc fc90 	bl	8000cb8 <__aeabi_fmul>
 8004398:	4603      	mov	r3, r0
 800439a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800439e:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80043a2:	6811      	ldr	r1, [r2, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fc fc87 	bl	8000cb8 <__aeabi_fmul>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80043b0:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80043b4:	6811      	ldr	r1, [r2, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fc fc7e 	bl	8000cb8 <__aeabi_fmul>
 80043bc:	4603      	mov	r3, r0
 80043be:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80043c2:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 80043c6:	6811      	ldr	r1, [r2, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc fc75 	bl	8000cb8 <__aeabi_fmul>
 80043ce:	4603      	mov	r3, r0
 80043d0:	461d      	mov	r5, r3
 80043d2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80043d6:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80043e0:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	f7fc fc67 	bl	8000cb8 <__aeabi_fmul>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80043f0:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80043f4:	6811      	ldr	r1, [r2, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fc fc5e 	bl	8000cb8 <__aeabi_fmul>
 80043fc:	4603      	mov	r3, r0
 80043fe:	4619      	mov	r1, r3
 8004400:	4628      	mov	r0, r5
 8004402:	f7fc fc59 	bl	8000cb8 <__aeabi_fmul>
 8004406:	4603      	mov	r3, r0
 8004408:	4619      	mov	r1, r3
 800440a:	4620      	mov	r0, r4
 800440c:	f7fc fd08 	bl	8000e20 <__aeabi_fdiv>
 8004410:	4603      	mov	r3, r0
 8004412:	4619      	mov	r1, r3
 8004414:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 8004418:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 800441c:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 8004420:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004424:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	f602 5208 	addw	r2, r2, #3336	@ 0xd08
 800442e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 8004432:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004436:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4619      	mov	r1, r3
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc fb32 	bl	8000aa8 <__addsf3>
 8004444:	4603      	mov	r3, r0
 8004446:	461c      	mov	r4, r3
 8004448:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800444c:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8004450:	6819      	ldr	r1, [r3, #0]
 8004452:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004456:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	f7fc fc2c 	bl	8000cb8 <__aeabi_fmul>
 8004460:	4603      	mov	r3, r0
 8004462:	461d      	mov	r5, r3
 8004464:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004468:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 800446c:	6819      	ldr	r1, [r3, #0]
 800446e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004472:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	f7fc fc1e 	bl	8000cb8 <__aeabi_fmul>
 800447c:	4603      	mov	r3, r0
 800447e:	461e      	mov	r6, r3
 8004480:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004484:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8004488:	6819      	ldr	r1, [r3, #0]
 800448a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800448e:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	f7fc fc10 	bl	8000cb8 <__aeabi_fmul>
 8004498:	4603      	mov	r3, r0
 800449a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800449e:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80044a2:	6811      	ldr	r1, [r2, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fc fc07 	bl	8000cb8 <__aeabi_fmul>
 80044aa:	4603      	mov	r3, r0
 80044ac:	4619      	mov	r1, r3
 80044ae:	4630      	mov	r0, r6
 80044b0:	f7fc faf8 	bl	8000aa4 <__aeabi_fsub>
 80044b4:	4603      	mov	r3, r0
 80044b6:	4619      	mov	r1, r3
 80044b8:	4628      	mov	r0, r5
 80044ba:	f7fc fbfd 	bl	8000cb8 <__aeabi_fmul>
 80044be:	4603      	mov	r3, r0
 80044c0:	461d      	mov	r5, r3
 80044c2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80044c6:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80044d2:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	4413      	add	r3, r2
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4619      	mov	r1, r3
 80044de:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80044e2:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	f7fc fadc 	bl	8000aa4 <__aeabi_fsub>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4619      	mov	r1, r3
 80044f0:	4628      	mov	r0, r5
 80044f2:	f7fc fbe1 	bl	8000cb8 <__aeabi_fmul>
 80044f6:	4603      	mov	r3, r0
 80044f8:	461d      	mov	r5, r3
 80044fa:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80044fe:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8004502:	6819      	ldr	r1, [r3, #0]
 8004504:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004508:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	f7fc fbd3 	bl	8000cb8 <__aeabi_fmul>
 8004512:	4603      	mov	r3, r0
 8004514:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004518:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800451c:	6811      	ldr	r1, [r2, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fc fbca 	bl	8000cb8 <__aeabi_fmul>
 8004524:	4603      	mov	r3, r0
 8004526:	461e      	mov	r6, r3
 8004528:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800452c:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004538:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	4413      	add	r3, r2
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4619      	mov	r1, r3
 8004544:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004548:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f7fc faa9 	bl	8000aa4 <__aeabi_fsub>
 8004552:	4603      	mov	r3, r0
 8004554:	4619      	mov	r1, r3
 8004556:	4630      	mov	r0, r6
 8004558:	f7fc fbae 	bl	8000cb8 <__aeabi_fmul>
 800455c:	4603      	mov	r3, r0
 800455e:	4619      	mov	r1, r3
 8004560:	4628      	mov	r0, r5
 8004562:	f7fc faa1 	bl	8000aa8 <__addsf3>
 8004566:	4603      	mov	r3, r0
 8004568:	461d      	mov	r5, r3
 800456a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800456e:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8004572:	6819      	ldr	r1, [r3, #0]
 8004574:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004578:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	f7fc fb9b 	bl	8000cb8 <__aeabi_fmul>
 8004582:	4603      	mov	r3, r0
 8004584:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004588:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 800458c:	6811      	ldr	r1, [r2, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fc fb92 	bl	8000cb8 <__aeabi_fmul>
 8004594:	4603      	mov	r3, r0
 8004596:	461e      	mov	r6, r3
 8004598:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800459c:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80045a8:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	4413      	add	r3, r2
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4619      	mov	r1, r3
 80045b4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80045b8:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	f7fc fa71 	bl	8000aa4 <__aeabi_fsub>
 80045c2:	4603      	mov	r3, r0
 80045c4:	4619      	mov	r1, r3
 80045c6:	4630      	mov	r0, r6
 80045c8:	f7fc fb76 	bl	8000cb8 <__aeabi_fmul>
 80045cc:	4603      	mov	r3, r0
 80045ce:	4619      	mov	r1, r3
 80045d0:	4628      	mov	r0, r5
 80045d2:	f7fc fa67 	bl	8000aa4 <__aeabi_fsub>
 80045d6:	4603      	mov	r3, r0
 80045d8:	461d      	mov	r5, r3
 80045da:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80045de:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80045e8:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	f7fc fb63 	bl	8000cb8 <__aeabi_fmul>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461e      	mov	r6, r3
 80045f6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80045fa:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80045fe:	6819      	ldr	r1, [r3, #0]
 8004600:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004604:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	f7fc fb55 	bl	8000cb8 <__aeabi_fmul>
 800460e:	4603      	mov	r3, r0
 8004610:	4698      	mov	r8, r3
 8004612:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004616:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 800461a:	6819      	ldr	r1, [r3, #0]
 800461c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004620:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	f7fc fb47 	bl	8000cb8 <__aeabi_fmul>
 800462a:	4603      	mov	r3, r0
 800462c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004630:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8004634:	6811      	ldr	r1, [r2, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7fc fb3e 	bl	8000cb8 <__aeabi_fmul>
 800463c:	4603      	mov	r3, r0
 800463e:	4619      	mov	r1, r3
 8004640:	4640      	mov	r0, r8
 8004642:	f7fc fa2f 	bl	8000aa4 <__aeabi_fsub>
 8004646:	4603      	mov	r3, r0
 8004648:	4619      	mov	r1, r3
 800464a:	4630      	mov	r0, r6
 800464c:	f7fc fb34 	bl	8000cb8 <__aeabi_fmul>
 8004650:	4603      	mov	r3, r0
 8004652:	461e      	mov	r6, r3
 8004654:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004658:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004664:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	4413      	add	r3, r2
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4619      	mov	r1, r3
 8004670:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004674:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	f7fc fa13 	bl	8000aa4 <__aeabi_fsub>
 800467e:	4603      	mov	r3, r0
 8004680:	4619      	mov	r1, r3
 8004682:	4630      	mov	r0, r6
 8004684:	f7fc fb18 	bl	8000cb8 <__aeabi_fmul>
 8004688:	4603      	mov	r3, r0
 800468a:	461e      	mov	r6, r3
 800468c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004690:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8004694:	6819      	ldr	r1, [r3, #0]
 8004696:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800469a:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	f7fc fb0a 	bl	8000cb8 <__aeabi_fmul>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80046aa:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80046ae:	6811      	ldr	r1, [r2, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fc fb01 	bl	8000cb8 <__aeabi_fmul>
 80046b6:	4603      	mov	r3, r0
 80046b8:	4698      	mov	r8, r3
 80046ba:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80046be:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80046ca:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	4413      	add	r3, r2
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4619      	mov	r1, r3
 80046d6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80046da:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	f7fc f9e0 	bl	8000aa4 <__aeabi_fsub>
 80046e4:	4603      	mov	r3, r0
 80046e6:	4619      	mov	r1, r3
 80046e8:	4640      	mov	r0, r8
 80046ea:	f7fc fae5 	bl	8000cb8 <__aeabi_fmul>
 80046ee:	4603      	mov	r3, r0
 80046f0:	4619      	mov	r1, r3
 80046f2:	4630      	mov	r0, r6
 80046f4:	f7fc f9d8 	bl	8000aa8 <__addsf3>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461e      	mov	r6, r3
 80046fc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004700:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8004704:	6819      	ldr	r1, [r3, #0]
 8004706:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800470a:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	f7fc fad2 	bl	8000cb8 <__aeabi_fmul>
 8004714:	4603      	mov	r3, r0
 8004716:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800471a:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 800471e:	6811      	ldr	r1, [r2, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7fc fac9 	bl	8000cb8 <__aeabi_fmul>
 8004726:	4603      	mov	r3, r0
 8004728:	4698      	mov	r8, r3
 800472a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800472e:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800473a:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	4413      	add	r3, r2
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4619      	mov	r1, r3
 8004746:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800474a:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	f7fc f9a8 	bl	8000aa4 <__aeabi_fsub>
 8004754:	4603      	mov	r3, r0
 8004756:	4619      	mov	r1, r3
 8004758:	4640      	mov	r0, r8
 800475a:	f7fc faad 	bl	8000cb8 <__aeabi_fmul>
 800475e:	4603      	mov	r3, r0
 8004760:	4619      	mov	r1, r3
 8004762:	4630      	mov	r0, r6
 8004764:	f7fc f99e 	bl	8000aa4 <__aeabi_fsub>
 8004768:	4603      	mov	r3, r0
 800476a:	4619      	mov	r1, r3
 800476c:	4628      	mov	r0, r5
 800476e:	f7fc faa3 	bl	8000cb8 <__aeabi_fmul>
 8004772:	4603      	mov	r3, r0
 8004774:	4619      	mov	r1, r3
 8004776:	4620      	mov	r0, r4
 8004778:	f7fc fa9e 	bl	8000cb8 <__aeabi_fmul>
 800477c:	4603      	mov	r3, r0
 800477e:	461c      	mov	r4, r3
 8004780:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004784:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800478e:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8004792:	6818      	ldr	r0, [r3, #0]
 8004794:	f7fc fa90 	bl	8000cb8 <__aeabi_fmul>
 8004798:	4603      	mov	r3, r0
 800479a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800479e:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 80047a2:	6811      	ldr	r1, [r2, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fc fa87 	bl	8000cb8 <__aeabi_fmul>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80047b0:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 80047b4:	6811      	ldr	r1, [r2, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fc fa7e 	bl	8000cb8 <__aeabi_fmul>
 80047bc:	4603      	mov	r3, r0
 80047be:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80047c2:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80047c6:	6811      	ldr	r1, [r2, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fc fa75 	bl	8000cb8 <__aeabi_fmul>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80047d4:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80047d8:	6811      	ldr	r1, [r2, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fc fa6c 	bl	8000cb8 <__aeabi_fmul>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80047e6:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80047ea:	6811      	ldr	r1, [r2, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fc fa63 	bl	8000cb8 <__aeabi_fmul>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80047f8:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 80047fc:	6811      	ldr	r1, [r2, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fc fa5a 	bl	8000cb8 <__aeabi_fmul>
 8004804:	4603      	mov	r3, r0
 8004806:	461d      	mov	r5, r3
 8004808:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800480c:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 8004810:	6819      	ldr	r1, [r3, #0]
 8004812:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004816:	f103 035c 	add.w	r3, r3, #92	@ 0x5c
 800481a:	6818      	ldr	r0, [r3, #0]
 800481c:	f7fc fa4c 	bl	8000cb8 <__aeabi_fmul>
 8004820:	4603      	mov	r3, r0
 8004822:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004826:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 800482a:	6811      	ldr	r1, [r2, #0]
 800482c:	4618      	mov	r0, r3
 800482e:	f7fc fa43 	bl	8000cb8 <__aeabi_fmul>
 8004832:	4603      	mov	r3, r0
 8004834:	4619      	mov	r1, r3
 8004836:	4628      	mov	r0, r5
 8004838:	f7fc fa3e 	bl	8000cb8 <__aeabi_fmul>
 800483c:	4603      	mov	r3, r0
 800483e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004842:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8004846:	6811      	ldr	r1, [r2, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7fc fa35 	bl	8000cb8 <__aeabi_fmul>
 800484e:	4603      	mov	r3, r0
 8004850:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004854:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8004858:	6811      	ldr	r1, [r2, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7fc fa2c 	bl	8000cb8 <__aeabi_fmul>
 8004860:	4603      	mov	r3, r0
 8004862:	4619      	mov	r1, r3
 8004864:	4620      	mov	r0, r4
 8004866:	f7fc fadb 	bl	8000e20 <__aeabi_fdiv>
 800486a:	4603      	mov	r3, r0
 800486c:	461c      	mov	r4, r3
 800486e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004872:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800487e:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8004882:	6812      	ldr	r2, [r2, #0]
 8004884:	4413      	add	r3, r2
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4619      	mov	r1, r3
 800488a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800488e:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	f7fc f906 	bl	8000aa4 <__aeabi_fsub>
 8004898:	4603      	mov	r3, r0
 800489a:	4619      	mov	r1, r3
 800489c:	4618      	mov	r0, r3
 800489e:	f7fc f903 	bl	8000aa8 <__addsf3>
 80048a2:	4603      	mov	r3, r0
 80048a4:	461d      	mov	r5, r3
 80048a6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80048aa:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 80048ae:	6819      	ldr	r1, [r3, #0]
 80048b0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80048b4:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	f7fc f9fd 	bl	8000cb8 <__aeabi_fmul>
 80048be:	4603      	mov	r3, r0
 80048c0:	461e      	mov	r6, r3
 80048c2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80048c6:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 80048ca:	6819      	ldr	r1, [r3, #0]
 80048cc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80048d0:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	f7fc f9ef 	bl	8000cb8 <__aeabi_fmul>
 80048da:	4603      	mov	r3, r0
 80048dc:	4698      	mov	r8, r3
 80048de:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80048e2:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80048ec:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	f7fc f9e1 	bl	8000cb8 <__aeabi_fmul>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80048fc:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8004900:	6811      	ldr	r1, [r2, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7fc f9d8 	bl	8000cb8 <__aeabi_fmul>
 8004908:	4603      	mov	r3, r0
 800490a:	4619      	mov	r1, r3
 800490c:	4640      	mov	r0, r8
 800490e:	f7fc f8c9 	bl	8000aa4 <__aeabi_fsub>
 8004912:	4603      	mov	r3, r0
 8004914:	4619      	mov	r1, r3
 8004916:	4630      	mov	r0, r6
 8004918:	f7fc f9ce 	bl	8000cb8 <__aeabi_fmul>
 800491c:	4603      	mov	r3, r0
 800491e:	461e      	mov	r6, r3
 8004920:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004924:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004930:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8004934:	6812      	ldr	r2, [r2, #0]
 8004936:	4413      	add	r3, r2
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4619      	mov	r1, r3
 800493c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004940:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	f7fc f8ad 	bl	8000aa4 <__aeabi_fsub>
 800494a:	4603      	mov	r3, r0
 800494c:	4619      	mov	r1, r3
 800494e:	4630      	mov	r0, r6
 8004950:	f7fc f9b2 	bl	8000cb8 <__aeabi_fmul>
 8004954:	4603      	mov	r3, r0
 8004956:	461e      	mov	r6, r3
 8004958:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800495c:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8004960:	6819      	ldr	r1, [r3, #0]
 8004962:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004966:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	f7fc f9a4 	bl	8000cb8 <__aeabi_fmul>
 8004970:	4603      	mov	r3, r0
 8004972:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004976:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 800497a:	6811      	ldr	r1, [r2, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7fc f99b 	bl	8000cb8 <__aeabi_fmul>
 8004982:	4603      	mov	r3, r0
 8004984:	4698      	mov	r8, r3
 8004986:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800498a:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004996:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	4413      	add	r3, r2
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4619      	mov	r1, r3
 80049a2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80049a6:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	f7fc f87a 	bl	8000aa4 <__aeabi_fsub>
 80049b0:	4603      	mov	r3, r0
 80049b2:	4619      	mov	r1, r3
 80049b4:	4640      	mov	r0, r8
 80049b6:	f7fc f97f 	bl	8000cb8 <__aeabi_fmul>
 80049ba:	4603      	mov	r3, r0
 80049bc:	4619      	mov	r1, r3
 80049be:	4630      	mov	r0, r6
 80049c0:	f7fc f872 	bl	8000aa8 <__addsf3>
 80049c4:	4603      	mov	r3, r0
 80049c6:	461e      	mov	r6, r3
 80049c8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80049cc:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 80049d0:	6819      	ldr	r1, [r3, #0]
 80049d2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80049d6:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	f7fc f96c 	bl	8000cb8 <__aeabi_fmul>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80049e6:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 80049ea:	6811      	ldr	r1, [r2, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fc f963 	bl	8000cb8 <__aeabi_fmul>
 80049f2:	4603      	mov	r3, r0
 80049f4:	4698      	mov	r8, r3
 80049f6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80049fa:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004a06:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4619      	mov	r1, r3
 8004a12:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004a16:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	f7fc f842 	bl	8000aa4 <__aeabi_fsub>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4619      	mov	r1, r3
 8004a24:	4640      	mov	r0, r8
 8004a26:	f7fc f947 	bl	8000cb8 <__aeabi_fmul>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4630      	mov	r0, r6
 8004a30:	f7fc f838 	bl	8000aa4 <__aeabi_fsub>
 8004a34:	4603      	mov	r3, r0
 8004a36:	4619      	mov	r1, r3
 8004a38:	4628      	mov	r0, r5
 8004a3a:	f7fc f93d 	bl	8000cb8 <__aeabi_fmul>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	461d      	mov	r5, r3
 8004a42:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004a46:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004a50:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	f7fc f92f 	bl	8000cb8 <__aeabi_fmul>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004a60:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8004a64:	6811      	ldr	r1, [r2, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fc f926 	bl	8000cb8 <__aeabi_fmul>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004a72:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8004a76:	6811      	ldr	r1, [r2, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fc f91d 	bl	8000cb8 <__aeabi_fmul>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004a84:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8004a88:	6811      	ldr	r1, [r2, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fc f914 	bl	8000cb8 <__aeabi_fmul>
 8004a90:	4603      	mov	r3, r0
 8004a92:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004a96:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8004a9a:	6811      	ldr	r1, [r2, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fc f90b 	bl	8000cb8 <__aeabi_fmul>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004aa8:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8004aac:	6811      	ldr	r1, [r2, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc f902 	bl	8000cb8 <__aeabi_fmul>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f7fc f9b1 	bl	8000e20 <__aeabi_fdiv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f7fb ffee 	bl	8000aa4 <__aeabi_fsub>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4619      	mov	r1, r3
 8004acc:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 8004ad0:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8004ad4:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 8004ad8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004adc:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	f602 7234 	addw	r2, r2, #3892	@ 0xf34
 8004ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8004aea:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004aee:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4619      	mov	r1, r3
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fb ffd6 	bl	8000aa8 <__addsf3>
 8004afc:	4603      	mov	r3, r0
 8004afe:	461c      	mov	r4, r3
 8004b00:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004b04:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8004b08:	6819      	ldr	r1, [r3, #0]
 8004b0a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004b0e:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	f7fc f8d0 	bl	8000cb8 <__aeabi_fmul>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	461d      	mov	r5, r3
 8004b1c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004b20:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8004b24:	6819      	ldr	r1, [r3, #0]
 8004b26:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004b2a:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	f7fc f8c2 	bl	8000cb8 <__aeabi_fmul>
 8004b34:	4603      	mov	r3, r0
 8004b36:	461e      	mov	r6, r3
 8004b38:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004b3c:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8004b40:	6819      	ldr	r1, [r3, #0]
 8004b42:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004b46:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	f7fc f8b4 	bl	8000cb8 <__aeabi_fmul>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004b56:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8004b5a:	6811      	ldr	r1, [r2, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fc f8ab 	bl	8000cb8 <__aeabi_fmul>
 8004b62:	4603      	mov	r3, r0
 8004b64:	4619      	mov	r1, r3
 8004b66:	4630      	mov	r0, r6
 8004b68:	f7fb ff9c 	bl	8000aa4 <__aeabi_fsub>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4628      	mov	r0, r5
 8004b72:	f7fc f8a1 	bl	8000cb8 <__aeabi_fmul>
 8004b76:	4603      	mov	r3, r0
 8004b78:	461d      	mov	r5, r3
 8004b7a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004b7e:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004b8a:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	4413      	add	r3, r2
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4619      	mov	r1, r3
 8004b96:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004b9a:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	f7fb ff80 	bl	8000aa4 <__aeabi_fsub>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f7fc f885 	bl	8000cb8 <__aeabi_fmul>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	461d      	mov	r5, r3
 8004bb2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004bb6:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8004bba:	6819      	ldr	r1, [r3, #0]
 8004bbc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004bc0:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	f7fc f877 	bl	8000cb8 <__aeabi_fmul>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004bd0:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8004bd4:	6811      	ldr	r1, [r2, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fc f86e 	bl	8000cb8 <__aeabi_fmul>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461e      	mov	r6, r3
 8004be0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004be4:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004bf0:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004c00:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	f7fb ff4d 	bl	8000aa4 <__aeabi_fsub>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f7fc f852 	bl	8000cb8 <__aeabi_fmul>
 8004c14:	4603      	mov	r3, r0
 8004c16:	4619      	mov	r1, r3
 8004c18:	4628      	mov	r0, r5
 8004c1a:	f7fb ff45 	bl	8000aa8 <__addsf3>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	461d      	mov	r5, r3
 8004c22:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004c26:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8004c2a:	6819      	ldr	r1, [r3, #0]
 8004c2c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004c30:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	f7fc f83f 	bl	8000cb8 <__aeabi_fmul>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004c40:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8004c44:	6811      	ldr	r1, [r2, #0]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fc f836 	bl	8000cb8 <__aeabi_fmul>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	461e      	mov	r6, r3
 8004c50:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004c54:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004c60:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	4413      	add	r3, r2
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004c70:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	f7fb ff15 	bl	8000aa4 <__aeabi_fsub>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4630      	mov	r0, r6
 8004c80:	f7fc f81a 	bl	8000cb8 <__aeabi_fmul>
 8004c84:	4603      	mov	r3, r0
 8004c86:	4619      	mov	r1, r3
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f7fb ff0b 	bl	8000aa4 <__aeabi_fsub>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	461d      	mov	r5, r3
 8004c92:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004c96:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8004c9a:	6819      	ldr	r1, [r3, #0]
 8004c9c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004ca0:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	f7fc f807 	bl	8000cb8 <__aeabi_fmul>
 8004caa:	4603      	mov	r3, r0
 8004cac:	461e      	mov	r6, r3
 8004cae:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004cb2:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8004cb6:	6819      	ldr	r1, [r3, #0]
 8004cb8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004cbc:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	f7fb fff9 	bl	8000cb8 <__aeabi_fmul>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4698      	mov	r8, r3
 8004cca:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004cce:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8004cd2:	6819      	ldr	r1, [r3, #0]
 8004cd4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004cd8:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	f7fb ffeb 	bl	8000cb8 <__aeabi_fmul>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004ce8:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8004cec:	6811      	ldr	r1, [r2, #0]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb ffe2 	bl	8000cb8 <__aeabi_fmul>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	f7fb fed3 	bl	8000aa4 <__aeabi_fsub>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4619      	mov	r1, r3
 8004d02:	4630      	mov	r0, r6
 8004d04:	f7fb ffd8 	bl	8000cb8 <__aeabi_fmul>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	461e      	mov	r6, r3
 8004d0c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004d10:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004d1c:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	4413      	add	r3, r2
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4619      	mov	r1, r3
 8004d28:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004d2c:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	f7fb feb7 	bl	8000aa4 <__aeabi_fsub>
 8004d36:	4603      	mov	r3, r0
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	f7fb ffbc 	bl	8000cb8 <__aeabi_fmul>
 8004d40:	4603      	mov	r3, r0
 8004d42:	461e      	mov	r6, r3
 8004d44:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004d48:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8004d4c:	6819      	ldr	r1, [r3, #0]
 8004d4e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004d52:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	f7fb ffae 	bl	8000cb8 <__aeabi_fmul>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004d62:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8004d66:	6811      	ldr	r1, [r2, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fb ffa5 	bl	8000cb8 <__aeabi_fmul>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	4698      	mov	r8, r3
 8004d72:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004d76:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004d82:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	4413      	add	r3, r2
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004d92:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8004d96:	6818      	ldr	r0, [r3, #0]
 8004d98:	f7fb fe84 	bl	8000aa4 <__aeabi_fsub>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4640      	mov	r0, r8
 8004da2:	f7fb ff89 	bl	8000cb8 <__aeabi_fmul>
 8004da6:	4603      	mov	r3, r0
 8004da8:	4619      	mov	r1, r3
 8004daa:	4630      	mov	r0, r6
 8004dac:	f7fb fe7c 	bl	8000aa8 <__addsf3>
 8004db0:	4603      	mov	r3, r0
 8004db2:	461e      	mov	r6, r3
 8004db4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004db8:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8004dbc:	6819      	ldr	r1, [r3, #0]
 8004dbe:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004dc2:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	f7fb ff76 	bl	8000cb8 <__aeabi_fmul>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004dd2:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8004dd6:	6811      	ldr	r1, [r2, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fb ff6d 	bl	8000cb8 <__aeabi_fmul>
 8004dde:	4603      	mov	r3, r0
 8004de0:	4698      	mov	r8, r3
 8004de2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004de6:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004df2:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	4413      	add	r3, r2
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004e02:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	f7fb fe4c 	bl	8000aa4 <__aeabi_fsub>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4640      	mov	r0, r8
 8004e12:	f7fb ff51 	bl	8000cb8 <__aeabi_fmul>
 8004e16:	4603      	mov	r3, r0
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4630      	mov	r0, r6
 8004e1c:	f7fb fe42 	bl	8000aa4 <__aeabi_fsub>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4619      	mov	r1, r3
 8004e24:	4628      	mov	r0, r5
 8004e26:	f7fb ff47 	bl	8000cb8 <__aeabi_fmul>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f7fb ff42 	bl	8000cb8 <__aeabi_fmul>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461c      	mov	r4, r3
 8004e38:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004e3c:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8004e40:	6819      	ldr	r1, [r3, #0]
 8004e42:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004e46:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	f7fb ff34 	bl	8000cb8 <__aeabi_fmul>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004e56:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8004e5a:	6811      	ldr	r1, [r2, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fb ff2b 	bl	8000cb8 <__aeabi_fmul>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004e68:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8004e6c:	6811      	ldr	r1, [r2, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fb ff22 	bl	8000cb8 <__aeabi_fmul>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004e7a:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8004e7e:	6811      	ldr	r1, [r2, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fb ff19 	bl	8000cb8 <__aeabi_fmul>
 8004e86:	4603      	mov	r3, r0
 8004e88:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004e8c:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8004e90:	6811      	ldr	r1, [r2, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fb ff10 	bl	8000cb8 <__aeabi_fmul>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	461d      	mov	r5, r3
 8004e9c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004ea0:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004eaa:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	f7fb ff02 	bl	8000cb8 <__aeabi_fmul>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004eba:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8004ebe:	6811      	ldr	r1, [r2, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fb fef9 	bl	8000cb8 <__aeabi_fmul>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f7fb fef4 	bl	8000cb8 <__aeabi_fmul>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004ed6:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8004eda:	6811      	ldr	r1, [r2, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fb feeb 	bl	8000cb8 <__aeabi_fmul>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004ee8:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8004eec:	6811      	ldr	r1, [r2, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fb fee2 	bl	8000cb8 <__aeabi_fmul>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	461d      	mov	r5, r3
 8004ef8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004efc:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8004f00:	6819      	ldr	r1, [r3, #0]
 8004f02:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004f06:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	f7fb fed4 	bl	8000cb8 <__aeabi_fmul>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4619      	mov	r1, r3
 8004f14:	4628      	mov	r0, r5
 8004f16:	f7fb fecf 	bl	8000cb8 <__aeabi_fmul>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4620      	mov	r0, r4
 8004f20:	f7fb ff7e 	bl	8000e20 <__aeabi_fdiv>
 8004f24:	4603      	mov	r3, r0
 8004f26:	461c      	mov	r4, r3
 8004f28:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004f2c:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8004f30:	6819      	ldr	r1, [r3, #0]
 8004f32:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004f36:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	f7fb febc 	bl	8000cb8 <__aeabi_fmul>
 8004f40:	4603      	mov	r3, r0
 8004f42:	461d      	mov	r5, r3
 8004f44:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004f48:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8004f4c:	6819      	ldr	r1, [r3, #0]
 8004f4e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004f52:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	f7fb feae 	bl	8000cb8 <__aeabi_fmul>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	461e      	mov	r6, r3
 8004f60:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004f64:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8004f68:	6819      	ldr	r1, [r3, #0]
 8004f6a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004f6e:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8004f72:	6818      	ldr	r0, [r3, #0]
 8004f74:	f7fb fea0 	bl	8000cb8 <__aeabi_fmul>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004f7e:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 8004f82:	6811      	ldr	r1, [r2, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fb fe97 	bl	8000cb8 <__aeabi_fmul>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f7fb fd8a 	bl	8000aa8 <__addsf3>
 8004f94:	4603      	mov	r3, r0
 8004f96:	4619      	mov	r1, r3
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f7fb fe8d 	bl	8000cb8 <__aeabi_fmul>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461d      	mov	r5, r3
 8004fa2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004fa6:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8004fb2:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	4413      	add	r3, r2
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004fc2:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	f7fb fd6c 	bl	8000aa4 <__aeabi_fsub>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	f7fb fe71 	bl	8000cb8 <__aeabi_fmul>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	461d      	mov	r5, r3
 8004fda:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004fde:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8004fe8:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	f7fb fe63 	bl	8000cb8 <__aeabi_fmul>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8004ff8:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8004ffc:	6811      	ldr	r1, [r2, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb fe5a 	bl	8000cb8 <__aeabi_fmul>
 8005004:	4603      	mov	r3, r0
 8005006:	461e      	mov	r6, r3
 8005008:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800500c:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8005018:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	4413      	add	r3, r2
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4619      	mov	r1, r3
 8005024:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005028:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	f7fb fd39 	bl	8000aa4 <__aeabi_fsub>
 8005032:	4603      	mov	r3, r0
 8005034:	4619      	mov	r1, r3
 8005036:	4630      	mov	r0, r6
 8005038:	f7fb fe3e 	bl	8000cb8 <__aeabi_fmul>
 800503c:	4603      	mov	r3, r0
 800503e:	4619      	mov	r1, r3
 8005040:	4628      	mov	r0, r5
 8005042:	f7fb fd2f 	bl	8000aa4 <__aeabi_fsub>
 8005046:	4603      	mov	r3, r0
 8005048:	4619      	mov	r1, r3
 800504a:	4618      	mov	r0, r3
 800504c:	f7fb fd2c 	bl	8000aa8 <__addsf3>
 8005050:	4603      	mov	r3, r0
 8005052:	461d      	mov	r5, r3
 8005054:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005058:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 800505c:	6819      	ldr	r1, [r3, #0]
 800505e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005062:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	f7fb fe26 	bl	8000cb8 <__aeabi_fmul>
 800506c:	4603      	mov	r3, r0
 800506e:	461e      	mov	r6, r3
 8005070:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005074:	f103 0364 	add.w	r3, r3, #100	@ 0x64
 8005078:	6819      	ldr	r1, [r3, #0]
 800507a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800507e:	f103 0360 	add.w	r3, r3, #96	@ 0x60
 8005082:	6818      	ldr	r0, [r3, #0]
 8005084:	f7fb fe18 	bl	8000cb8 <__aeabi_fmul>
 8005088:	4603      	mov	r3, r0
 800508a:	4698      	mov	r8, r3
 800508c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005090:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 8005094:	6819      	ldr	r1, [r3, #0]
 8005096:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800509a:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	f7fb fe0a 	bl	8000cb8 <__aeabi_fmul>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80050aa:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80050ae:	6811      	ldr	r1, [r2, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fb fe01 	bl	8000cb8 <__aeabi_fmul>
 80050b6:	4603      	mov	r3, r0
 80050b8:	4619      	mov	r1, r3
 80050ba:	4640      	mov	r0, r8
 80050bc:	f7fb fcf2 	bl	8000aa4 <__aeabi_fsub>
 80050c0:	4603      	mov	r3, r0
 80050c2:	4619      	mov	r1, r3
 80050c4:	4630      	mov	r0, r6
 80050c6:	f7fb fdf7 	bl	8000cb8 <__aeabi_fmul>
 80050ca:	4603      	mov	r3, r0
 80050cc:	461e      	mov	r6, r3
 80050ce:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80050d2:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80050de:	f6a2 12c4 	subw	r2, r2, #2500	@ 0x9c4
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	4413      	add	r3, r2
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4619      	mov	r1, r3
 80050ea:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80050ee:	f103 03bc 	add.w	r3, r3, #188	@ 0xbc
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	f7fb fcd6 	bl	8000aa4 <__aeabi_fsub>
 80050f8:	4603      	mov	r3, r0
 80050fa:	4619      	mov	r1, r3
 80050fc:	4630      	mov	r0, r6
 80050fe:	f7fb fddb 	bl	8000cb8 <__aeabi_fmul>
 8005102:	4603      	mov	r3, r0
 8005104:	461e      	mov	r6, r3
 8005106:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800510a:	f103 03c4 	add.w	r3, r3, #196	@ 0xc4
 800510e:	6819      	ldr	r1, [r3, #0]
 8005110:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005114:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	f7fb fdcd 	bl	8000cb8 <__aeabi_fmul>
 800511e:	4603      	mov	r3, r0
 8005120:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005124:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 8005128:	6811      	ldr	r1, [r2, #0]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fb fdc4 	bl	8000cb8 <__aeabi_fmul>
 8005130:	4603      	mov	r3, r0
 8005132:	4698      	mov	r8, r3
 8005134:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005138:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8005144:	f6a2 12cc 	subw	r2, r2, #2508	@ 0x9cc
 8005148:	6812      	ldr	r2, [r2, #0]
 800514a:	4413      	add	r3, r2
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4619      	mov	r1, r3
 8005150:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005154:	f103 03b4 	add.w	r3, r3, #180	@ 0xb4
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	f7fb fca3 	bl	8000aa4 <__aeabi_fsub>
 800515e:	4603      	mov	r3, r0
 8005160:	4619      	mov	r1, r3
 8005162:	4640      	mov	r0, r8
 8005164:	f7fb fda8 	bl	8000cb8 <__aeabi_fmul>
 8005168:	4603      	mov	r3, r0
 800516a:	4619      	mov	r1, r3
 800516c:	4630      	mov	r0, r6
 800516e:	f7fb fc9b 	bl	8000aa8 <__addsf3>
 8005172:	4603      	mov	r3, r0
 8005174:	461e      	mov	r6, r3
 8005176:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800517a:	f103 03c0 	add.w	r3, r3, #192	@ 0xc0
 800517e:	6819      	ldr	r1, [r3, #0]
 8005180:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005184:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	f7fb fd95 	bl	8000cb8 <__aeabi_fmul>
 800518e:	4603      	mov	r3, r0
 8005190:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005194:	f102 0260 	add.w	r2, r2, #96	@ 0x60
 8005198:	6811      	ldr	r1, [r2, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fb fd8c 	bl	8000cb8 <__aeabi_fmul>
 80051a0:	4603      	mov	r3, r0
 80051a2:	4698      	mov	r8, r3
 80051a4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80051a8:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 80051b4:	f6a2 12c8 	subw	r2, r2, #2504	@ 0x9c8
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	4413      	add	r3, r2
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4619      	mov	r1, r3
 80051c0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80051c4:	f103 03b8 	add.w	r3, r3, #184	@ 0xb8
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	f7fb fc6b 	bl	8000aa4 <__aeabi_fsub>
 80051ce:	4603      	mov	r3, r0
 80051d0:	4619      	mov	r1, r3
 80051d2:	4640      	mov	r0, r8
 80051d4:	f7fb fd70 	bl	8000cb8 <__aeabi_fmul>
 80051d8:	4603      	mov	r3, r0
 80051da:	4619      	mov	r1, r3
 80051dc:	4630      	mov	r0, r6
 80051de:	f7fb fc61 	bl	8000aa4 <__aeabi_fsub>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4619      	mov	r1, r3
 80051e6:	4628      	mov	r0, r5
 80051e8:	f7fb fd66 	bl	8000cb8 <__aeabi_fmul>
 80051ec:	4603      	mov	r3, r0
 80051ee:	461d      	mov	r5, r3
 80051f0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80051f4:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 80051f8:	6819      	ldr	r1, [r3, #0]
 80051fa:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80051fe:	f103 03c8 	add.w	r3, r3, #200	@ 0xc8
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	f7fb fd58 	bl	8000cb8 <__aeabi_fmul>
 8005208:	4603      	mov	r3, r0
 800520a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800520e:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8005212:	6811      	ldr	r1, [r2, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f7fb fd4f 	bl	8000cb8 <__aeabi_fmul>
 800521a:	4603      	mov	r3, r0
 800521c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005220:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 8005224:	6811      	ldr	r1, [r2, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fb fd46 	bl	8000cb8 <__aeabi_fmul>
 800522c:	4603      	mov	r3, r0
 800522e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005232:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8005236:	6811      	ldr	r1, [r2, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f7fb fd3d 	bl	8000cb8 <__aeabi_fmul>
 800523e:	4603      	mov	r3, r0
 8005240:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005244:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 8005248:	6811      	ldr	r1, [r2, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f7fb fd34 	bl	8000cb8 <__aeabi_fmul>
 8005250:	4603      	mov	r3, r0
 8005252:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005256:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800525a:	6811      	ldr	r1, [r2, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7fb fd2b 	bl	8000cb8 <__aeabi_fmul>
 8005262:	4603      	mov	r3, r0
 8005264:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005268:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 800526c:	6811      	ldr	r1, [r2, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f7fb fd22 	bl	8000cb8 <__aeabi_fmul>
 8005274:	4603      	mov	r3, r0
 8005276:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800527a:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 800527e:	6811      	ldr	r1, [r2, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f7fb fd19 	bl	8000cb8 <__aeabi_fmul>
 8005286:	4603      	mov	r3, r0
 8005288:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800528c:	f102 025c 	add.w	r2, r2, #92	@ 0x5c
 8005290:	6811      	ldr	r1, [r2, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7fb fd10 	bl	8000cb8 <__aeabi_fmul>
 8005298:	4603      	mov	r3, r0
 800529a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800529e:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80052a2:	6811      	ldr	r1, [r2, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fb fd07 	bl	8000cb8 <__aeabi_fmul>
 80052aa:	4603      	mov	r3, r0
 80052ac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80052b0:	f102 0258 	add.w	r2, r2, #88	@ 0x58
 80052b4:	6811      	ldr	r1, [r2, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fb fcfe 	bl	8000cb8 <__aeabi_fmul>
 80052bc:	4603      	mov	r3, r0
 80052be:	4619      	mov	r1, r3
 80052c0:	4628      	mov	r0, r5
 80052c2:	f7fb fdad 	bl	8000e20 <__aeabi_fdiv>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4619      	mov	r1, r3
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7fb fbec 	bl	8000aa8 <__addsf3>
 80052d0:	4603      	mov	r3, r0
 80052d2:	4619      	mov	r1, r3
 80052d4:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 80052d8:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80052dc:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 80052e0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80052e4:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 80052e8:	6812      	ldr	r2, [r2, #0]
 80052ea:	f502 528b 	add.w	r2, r2, #4448	@ 0x1160
 80052ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int i=0; i < tam; i++)
 80052f2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80052f6:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3301      	adds	r3, #1
 80052fe:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005302:	f102 0298 	add.w	r2, r2, #152	@ 0x98
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800530c:	f103 0398 	add.w	r3, r3, #152	@ 0x98
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f5b3 7f0b 	cmp.w	r3, #556	@ 0x22c
 8005316:	f6fc a8cd 	blt.w	80014b4 <NLLS+0x344>
		}

		J = 0;
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005322:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 8005326:	6013      	str	r3, [r2, #0]

		for(int i=0; i < tam; i++)
 8005328:	2300      	movs	r3, #0
 800532a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800532e:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	e03c      	b.n	80053b0 <NLLS+0x4240>
		{
			J += (e[i] * e[i])/2;
 8005336:	f507 4329 	add.w	r3, r7, #43264	@ 0xa900
 800533a:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 800533e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005342:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005346:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 800534a:	6812      	ldr	r2, [r2, #0]
 800534c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005350:	f507 4329 	add.w	r3, r7, #43264	@ 0xa900
 8005354:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8005358:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800535c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005360:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536a:	4619      	mov	r1, r3
 800536c:	f7fb fca4 	bl	8000cb8 <__aeabi_fmul>
 8005370:	4603      	mov	r3, r0
 8005372:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005376:	4618      	mov	r0, r3
 8005378:	f7fb fd52 	bl	8000e20 <__aeabi_fdiv>
 800537c:	4603      	mov	r3, r0
 800537e:	4619      	mov	r1, r3
 8005380:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005384:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	f7fb fb8d 	bl	8000aa8 <__addsf3>
 800538e:	4603      	mov	r3, r0
 8005390:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005394:	f102 02a0 	add.w	r2, r2, #160	@ 0xa0
 8005398:	6013      	str	r3, [r2, #0]
		for(int i=0; i < tam; i++)
 800539a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800539e:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3301      	adds	r3, #1
 80053a6:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80053aa:	f102 0294 	add.w	r2, r2, #148	@ 0x94
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80053b4:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f5b3 7f0b 	cmp.w	r3, #556	@ 0x22c
 80053be:	dbba      	blt.n	8005336 <NLLS+0x41c6>
		}

		if(passo < 2)
 80053c0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80053c4:	f103 03cf 	add.w	r3, r3, #207	@ 0xcf
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d80a      	bhi.n	80053e4 <NLLS+0x4274>
		{
			error_ant = J;
 80053ce:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80053d2:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80053dc:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	e052      	b.n	800548a <NLLS+0x431a>
		}
		else
		{
			delta_J = 100*fabs(J-error_ant)/J;
 80053e4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80053e8:	f103 03a4 	add.w	r3, r3, #164	@ 0xa4
 80053ec:	6819      	ldr	r1, [r3, #0]
 80053ee:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80053f2:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	f7fb fb54 	bl	8000aa4 <__aeabi_fsub>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005402:	4618      	mov	r0, r3
 8005404:	f7fb f808 	bl	8000418 <__aeabi_f2d>
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	4ba4      	ldr	r3, [pc, #656]	@ (80056a0 <NLLS+0x4530>)
 800540e:	f7fb f85b 	bl	80004c8 <__aeabi_dmul>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4614      	mov	r4, r2
 8005418:	461d      	mov	r5, r3
 800541a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800541e:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	f7fa fff8 	bl	8000418 <__aeabi_f2d>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4620      	mov	r0, r4
 800542e:	4629      	mov	r1, r5
 8005430:	f7fb f974 	bl	800071c <__aeabi_ddiv>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4610      	mov	r0, r2
 800543a:	4619      	mov	r1, r3
 800543c:	f7fb fade 	bl	80009fc <__aeabi_d2f>
 8005440:	4603      	mov	r3, r0
 8005442:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005446:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 800544a:	6013      	str	r3, [r2, #0]
			if(delta_J < 0.05)
 800544c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005450:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	f7fa ffdf 	bl	8000418 <__aeabi_f2d>
 800545a:	a38f      	add	r3, pc, #572	@ (adr r3, 8005698 <NLLS+0x4528>)
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f7fb faa4 	bl	80009ac <__aeabi_dcmplt>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <NLLS+0x4306>
			{
				loop = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005470:	f102 02ce 	add.w	r2, r2, #206	@ 0xce
 8005474:	7013      	strb	r3, [r2, #0]
			}
			error_ant = J;
 8005476:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800547a:	f103 03a0 	add.w	r3, r3, #160	@ 0xa0
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005484:	f102 02a4 	add.w	r2, r2, #164	@ 0xa4
 8005488:	6013      	str	r3, [r2, #0]
		}

		for(int i = 0; i < N; i++)
 800548a:	2300      	movs	r3, #0
 800548c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005490:	f102 0290 	add.w	r2, r2, #144	@ 0x90
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e0ba      	b.n	800560e <NLLS+0x449e>
		{
			for(int j = 0; j < N; j++)
 8005498:	2300      	movs	r3, #0
 800549a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800549e:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	e0a0      	b.n	80055e8 <NLLS+0x4478>
			{
				Ht_H[i][j] = 0;
 80054a6:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 80054aa:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80054ae:	f6a3 2128 	subw	r1, r3, #2600	@ 0xa28
 80054b2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80054b6:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4413      	add	r3, r2
 80054c2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80054c6:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	4413      	add	r3, r2
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int k = 0; k < tam; k++)
 80054d6:	2300      	movs	r3, #0
 80054d8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80054dc:	f102 0288 	add.w	r2, r2, #136	@ 0x88
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e06e      	b.n	80055c2 <NLLS+0x4452>
				{
					Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 80054e4:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 80054e8:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80054ec:	f6a3 2128 	subw	r1, r3, #2600	@ 0xa28
 80054f0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80054f4:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	4413      	add	r3, r2
 8005500:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005504:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 8005508:	6812      	ldr	r2, [r2, #0]
 800550a:	4413      	add	r3, r2
 800550c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8005510:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 8005514:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8005518:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 800551c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005520:	f102 0290 	add.w	r2, r2, #144	@ 0x90
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 800552a:	fb02 f101 	mul.w	r1, r2, r1
 800552e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005532:	f102 0288 	add.w	r2, r2, #136	@ 0x88
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	440a      	add	r2, r1
 800553a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800553e:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 8005542:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8005546:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 800554a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800554e:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8005558:	fb02 f101 	mul.w	r1, r2, r1
 800555c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005560:	f102 0288 	add.w	r2, r2, #136	@ 0x88
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	440a      	add	r2, r1
 8005568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556c:	4619      	mov	r1, r3
 800556e:	f7fb fba3 	bl	8000cb8 <__aeabi_fmul>
 8005572:	4603      	mov	r3, r0
 8005574:	4619      	mov	r1, r3
 8005576:	4620      	mov	r0, r4
 8005578:	f7fb fa96 	bl	8000aa8 <__addsf3>
 800557c:	4603      	mov	r3, r0
 800557e:	4618      	mov	r0, r3
 8005580:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 8005584:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8005588:	f6a3 2128 	subw	r1, r3, #2600	@ 0xa28
 800558c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005590:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4613      	mov	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	4413      	add	r3, r2
 800559c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80055a0:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 80055a4:	6812      	ldr	r2, [r2, #0]
 80055a6:	4413      	add	r3, r2
 80055a8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for(int k = 0; k < tam; k++)
 80055ac:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80055b0:	f103 0388 	add.w	r3, r3, #136	@ 0x88
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3301      	adds	r3, #1
 80055b8:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80055bc:	f102 0288 	add.w	r2, r2, #136	@ 0x88
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80055c6:	f103 0388 	add.w	r3, r3, #136	@ 0x88
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f5b3 7f0b 	cmp.w	r3, #556	@ 0x22c
 80055d0:	db88      	blt.n	80054e4 <NLLS+0x4374>
			for(int j = 0; j < N; j++)
 80055d2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80055d6:	f103 038c 	add.w	r3, r3, #140	@ 0x8c
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80055e2:	f102 028c 	add.w	r2, r2, #140	@ 0x8c
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80055ec:	f103 038c 	add.w	r3, r3, #140	@ 0x8c
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	f77f af57 	ble.w	80054a6 <NLLS+0x4336>
		for(int i = 0; i < N; i++)
 80055f8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80055fc:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3301      	adds	r3, #1
 8005604:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005608:	f102 0290 	add.w	r2, r2, #144	@ 0x90
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005612:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b08      	cmp	r3, #8
 800561a:	f77f af3d 	ble.w	8005498 <NLLS+0x4328>
				}
			}
		}

		inverter_matriz(Ht_H, inv);
 800561e:	f507 429c 	add.w	r2, r7, #19968	@ 0x4e00
 8005622:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8005626:	3a10      	subs	r2, #16
 8005628:	f507 439f 	add.w	r3, r7, #20352	@ 0x4f80
 800562c:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8005630:	3b28      	subs	r3, #40	@ 0x28
 8005632:	4611      	mov	r1, r2
 8005634:	4618      	mov	r0, r3
 8005636:	f7fb fc8f 	bl	8000f58 <inverter_matriz>

		for(int i = 0; i < N; i++)
 800563a:	2300      	movs	r3, #0
 800563c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005640:	f102 0284 	add.w	r2, r2, #132	@ 0x84
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	e0bf      	b.n	80057c8 <NLLS+0x4658>
		{
			for(int j = 0; j < tam; j++)
 8005648:	2300      	movs	r3, #0
 800564a:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800564e:	f102 0280 	add.w	r2, r2, #128	@ 0x80
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	e0a4      	b.n	80057a0 <NLLS+0x4630>
			{
				mul_mat[i][j] = 0;
 8005656:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800565a:	f5a3 631c 	sub.w	r3, r3, #2496	@ 0x9c0
 800565e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005662:	f102 0284 	add.w	r2, r2, #132	@ 0x84
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 800566c:	fb02 f101 	mul.w	r1, r2, r1
 8005670:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005674:	f102 0280 	add.w	r2, r2, #128	@ 0x80
 8005678:	6812      	ldr	r2, [r2, #0]
 800567a:	440a      	add	r2, r1
 800567c:	f04f 0100 	mov.w	r1, #0
 8005680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for(int k = 0; k < N; k++)
 8005684:	2300      	movs	r3, #0
 8005686:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800568a:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	e074      	b.n	800577c <NLLS+0x460c>
 8005692:	bf00      	nop
 8005694:	f3af 8000 	nop.w
 8005698:	9999999a 	.word	0x9999999a
 800569c:	3fa99999 	.word	0x3fa99999
 80056a0:	40590000 	.word	0x40590000
				{
					mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 80056a4:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80056a8:	f5a3 631c 	sub.w	r3, r3, #2496	@ 0x9c0
 80056ac:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80056b0:	f102 0284 	add.w	r2, r2, #132	@ 0x84
 80056b4:	6812      	ldr	r2, [r2, #0]
 80056b6:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 80056ba:	fb02 f101 	mul.w	r1, r2, r1
 80056be:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80056c2:	f102 0280 	add.w	r2, r2, #128	@ 0x80
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	440a      	add	r2, r1
 80056ca:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80056ce:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 80056d2:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80056d6:	f5a3 6139 	sub.w	r1, r3, #2960	@ 0xb90
 80056da:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80056de:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	4413      	add	r3, r2
 80056ea:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80056ee:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	4413      	add	r3, r2
 80056f6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80056fa:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 80056fe:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8005702:	f6a3 03e4 	subw	r3, r3, #2276	@ 0x8e4
 8005706:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800570a:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8005714:	fb02 f101 	mul.w	r1, r2, r1
 8005718:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800571c:	f102 0280 	add.w	r2, r2, #128	@ 0x80
 8005720:	6812      	ldr	r2, [r2, #0]
 8005722:	440a      	add	r2, r1
 8005724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005728:	4619      	mov	r1, r3
 800572a:	f7fb fac5 	bl	8000cb8 <__aeabi_fmul>
 800572e:	4603      	mov	r3, r0
 8005730:	4619      	mov	r1, r3
 8005732:	4620      	mov	r0, r4
 8005734:	f7fb f9b8 	bl	8000aa8 <__addsf3>
 8005738:	4603      	mov	r3, r0
 800573a:	4618      	mov	r0, r3
 800573c:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8005740:	f5a3 631c 	sub.w	r3, r3, #2496	@ 0x9c0
 8005744:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005748:	f102 0284 	add.w	r2, r2, #132	@ 0x84
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8005752:	fb02 f101 	mul.w	r1, r2, r1
 8005756:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800575a:	f102 0280 	add.w	r2, r2, #128	@ 0x80
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	440a      	add	r2, r1
 8005762:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
				for(int k = 0; k < N; k++)
 8005766:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800576a:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3301      	adds	r3, #1
 8005772:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005776:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005780:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b08      	cmp	r3, #8
 8005788:	dd8c      	ble.n	80056a4 <NLLS+0x4534>
			for(int j = 0; j < tam; j++)
 800578a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800578e:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3301      	adds	r3, #1
 8005796:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800579a:	f102 0280 	add.w	r2, r2, #128	@ 0x80
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80057a4:	f103 0380 	add.w	r3, r3, #128	@ 0x80
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f5b3 7f0b 	cmp.w	r3, #556	@ 0x22c
 80057ae:	f6ff af52 	blt.w	8005656 <NLLS+0x44e6>
		for(int i = 0; i < N; i++)
 80057b2:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80057b6:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3301      	adds	r3, #1
 80057be:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80057c2:	f102 0284 	add.w	r2, r2, #132	@ 0x84
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80057cc:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	f77f af38 	ble.w	8005648 <NLLS+0x44d8>
				}
			}
		}

		for(int i = 0; i < N; i++)
 80057d8:	2300      	movs	r3, #0
 80057da:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80057de:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	e079      	b.n	80058da <NLLS+0x476a>
		{
			Ht_e[i] = 0;
 80057e6:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 80057ea:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 80057ee:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 80057f2:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80057f6:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 80057fa:	6812      	ldr	r2, [r2, #0]
 80057fc:	f04f 0100 	mov.w	r1, #0
 8005800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int j = 0; j < tam; j++)
 8005804:	2300      	movs	r3, #0
 8005806:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800580a:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	e050      	b.n	80058b4 <NLLS+0x4744>
			{
				Ht_e[i] += mul_mat[i][j]*e[j];
 8005812:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 8005816:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 800581a:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800581e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005822:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800582c:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8005830:	f5a3 631c 	sub.w	r3, r3, #2496	@ 0x9c0
 8005834:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005838:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 800583c:	6812      	ldr	r2, [r2, #0]
 800583e:	f44f 710b 	mov.w	r1, #556	@ 0x22c
 8005842:	fb02 f101 	mul.w	r1, r2, r1
 8005846:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 800584a:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	440a      	add	r2, r1
 8005852:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005856:	f507 4329 	add.w	r3, r7, #43264	@ 0xa900
 800585a:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 800585e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005862:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005866:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005870:	4619      	mov	r1, r3
 8005872:	f7fb fa21 	bl	8000cb8 <__aeabi_fmul>
 8005876:	4603      	mov	r3, r0
 8005878:	4619      	mov	r1, r3
 800587a:	4620      	mov	r0, r4
 800587c:	f7fb f914 	bl	8000aa8 <__addsf3>
 8005880:	4603      	mov	r3, r0
 8005882:	4619      	mov	r1, r3
 8005884:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 8005888:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 800588c:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 8005890:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005894:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int j = 0; j < tam; j++)
 800589e:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80058a2:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80058ae:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80058b8:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f5b3 7f0b 	cmp.w	r3, #556	@ 0x22c
 80058c2:	dba6      	blt.n	8005812 <NLLS+0x46a2>
		for(int i = 0; i < N; i++)
 80058c4:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80058c8:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3301      	adds	r3, #1
 80058d0:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80058d4:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80058de:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	f77f af7e 	ble.w	80057e6 <NLLS+0x4676>
			}
		}

		for(int i = 0; i < N; i++)
 80058ea:	2300      	movs	r3, #0
 80058ec:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80058f0:	f102 0270 	add.w	r2, r2, #112	@ 0x70
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	e036      	b.n	8005966 <NLLS+0x47f6>
		{
			p0[i] += Ht_e[i];
 80058f8:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 80058fc:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	f503 4339 	add.w	r3, r3, #47360	@ 0xb900
 8005908:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 800590c:	443b      	add	r3, r7
 800590e:	f853 0ca4 	ldr.w	r0, [r3, #-164]
 8005912:	f507 43b3 	add.w	r3, r7, #22912	@ 0x5980
 8005916:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 800591a:	f6a3 234c 	subw	r3, r3, #2636	@ 0xa4c
 800591e:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005922:	f102 0270 	add.w	r2, r2, #112	@ 0x70
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800592c:	4619      	mov	r1, r3
 800592e:	f7fb f8bb 	bl	8000aa8 <__addsf3>
 8005932:	4603      	mov	r3, r0
 8005934:	461a      	mov	r2, r3
 8005936:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800593a:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	f503 4339 	add.w	r3, r3, #47360	@ 0xb900
 8005946:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 800594a:	443b      	add	r3, r7
 800594c:	f843 2ca4 	str.w	r2, [r3, #-164]
		for(int i = 0; i < N; i++)
 8005950:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005954:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005960:	f102 0270 	add.w	r2, r2, #112	@ 0x70
 8005964:	6013      	str	r3, [r2, #0]
 8005966:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800596a:	f103 0370 	add.w	r3, r3, #112	@ 0x70
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b08      	cmp	r3, #8
 8005972:	ddc1      	ble.n	80058f8 <NLLS+0x4788>
		}

		passo++;
 8005974:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005978:	f103 03cf 	add.w	r3, r3, #207	@ 0xcf
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	3301      	adds	r3, #1
 8005980:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005984:	f102 02cf 	add.w	r2, r2, #207	@ 0xcf
 8005988:	7013      	strb	r3, [r2, #0]
	while(loop == 1)
 800598a:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 800598e:	f103 03ce 	add.w	r3, r3, #206	@ 0xce
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b01      	cmp	r3, #1
 8005996:	f43b ac52 	beq.w	800123e <NLLS+0xce>
	}
    p[0] = sx;
 800599a:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800599e:	f5a3 631d 	sub.w	r3, r3, #2512	@ 0x9d0
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80059a8:	f102 02c8 	add.w	r2, r2, #200	@ 0xc8
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 80059b0:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80059b4:	f5a3 631d 	sub.w	r3, r3, #2512	@ 0x9d0
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3304      	adds	r3, #4
 80059bc:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80059c0:	f102 02c4 	add.w	r2, r2, #196	@ 0xc4
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 80059c8:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80059cc:	f5a3 631d 	sub.w	r3, r3, #2512	@ 0x9d0
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3308      	adds	r3, #8
 80059d4:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80059d8:	f102 02c0 	add.w	r2, r2, #192	@ 0xc0
 80059dc:	6812      	ldr	r2, [r2, #0]
 80059de:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 80059e0:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80059e4:	f5a3 631d 	sub.w	r3, r3, #2512	@ 0x9d0
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	330c      	adds	r3, #12
 80059ec:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 80059f0:	f102 02bc 	add.w	r2, r2, #188	@ 0xbc
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	601a      	str	r2, [r3, #0]
    p[4] = by;
 80059f8:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80059fc:	f5a3 631d 	sub.w	r3, r3, #2512	@ 0x9d0
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3310      	adds	r3, #16
 8005a04:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005a08:	f102 02b8 	add.w	r2, r2, #184	@ 0xb8
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 8005a10:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8005a14:	f5a3 631d 	sub.w	r3, r3, #2512	@ 0x9d0
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	3314      	adds	r3, #20
 8005a1c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005a20:	f102 02b4 	add.w	r2, r2, #180	@ 0xb4
 8005a24:	6812      	ldr	r2, [r2, #0]
 8005a26:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 8005a28:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8005a2c:	f5a3 631d 	sub.w	r3, r3, #2512	@ 0x9d0
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3318      	adds	r3, #24
 8005a34:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005a38:	f102 02b0 	add.w	r2, r2, #176	@ 0xb0
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 8005a40:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8005a44:	f5a3 631d 	sub.w	r3, r3, #2512	@ 0x9d0
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	331c      	adds	r3, #28
 8005a4c:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005a50:	f102 02ac 	add.w	r2, r2, #172	@ 0xac
 8005a54:	6812      	ldr	r2, [r2, #0]
 8005a56:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 8005a58:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8005a5c:	f5a3 631d 	sub.w	r3, r3, #2512	@ 0x9d0
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3320      	adds	r3, #32
 8005a64:	f507 4239 	add.w	r2, r7, #47360	@ 0xb900
 8005a68:	f102 02a8 	add.w	r2, r2, #168	@ 0xa8
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	601a      	str	r2, [r3, #0]

    return passo;
 8005a70:	f507 4339 	add.w	r3, r7, #47360	@ 0xb900
 8005a74:	f103 03cf 	add.w	r3, r3, #207	@ 0xcf
 8005a78:	781b      	ldrb	r3, [r3, #0]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f507 4739 	add.w	r7, r7, #47360	@ 0xb900
 8005a80:	37d4      	adds	r7, #212	@ 0xd4
 8005a82:	46bd      	mov	sp, r7
 8005a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a8e:	f107 0308 	add.w	r3, r7, #8
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	605a      	str	r2, [r3, #4]
 8005a98:	609a      	str	r2, [r3, #8]
 8005a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8005b18 <MX_GPIO_Init+0x90>)
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b18 <MX_GPIO_Init+0x90>)
 8005aa2:	f043 0320 	orr.w	r3, r3, #32
 8005aa6:	6193      	str	r3, [r2, #24]
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b18 <MX_GPIO_Init+0x90>)
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ab4:	4b18      	ldr	r3, [pc, #96]	@ (8005b18 <MX_GPIO_Init+0x90>)
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	4a17      	ldr	r2, [pc, #92]	@ (8005b18 <MX_GPIO_Init+0x90>)
 8005aba:	f043 0304 	orr.w	r3, r3, #4
 8005abe:	6193      	str	r3, [r2, #24]
 8005ac0:	4b15      	ldr	r3, [pc, #84]	@ (8005b18 <MX_GPIO_Init+0x90>)
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f003 0304 	and.w	r3, r3, #4
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SINC_slave_GPIO_Port, SINC_slave_Pin, GPIO_PIN_RESET);
 8005acc:	2200      	movs	r2, #0
 8005ace:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005ad2:	4812      	ldr	r0, [pc, #72]	@ (8005b1c <MX_GPIO_Init+0x94>)
 8005ad4:	f000 fd4f 	bl	8006576 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_slave_Pin;
 8005ad8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005adc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SINC_slave_GPIO_Port, &GPIO_InitStruct);
 8005aea:	f107 0308 	add.w	r3, r7, #8
 8005aee:	4619      	mov	r1, r3
 8005af0:	480a      	ldr	r0, [pc, #40]	@ (8005b1c <MX_GPIO_Init+0x94>)
 8005af2:	f000 fba5 	bl	8006240 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_mater_Pin;
 8005af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005afa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b00:	2302      	movs	r3, #2
 8005b02:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SINC_mater_GPIO_Port, &GPIO_InitStruct);
 8005b04:	f107 0308 	add.w	r3, r7, #8
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4804      	ldr	r0, [pc, #16]	@ (8005b1c <MX_GPIO_Init+0x94>)
 8005b0c:	f000 fb98 	bl	8006240 <HAL_GPIO_Init>

}
 8005b10:	bf00      	nop
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	40010800 	.word	0x40010800

08005b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08e      	sub	sp, #56	@ 0x38
 8005b24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b26:	f000 fa45 	bl	8005fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b2a:	f000 f8f1 	bl	8005d10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b2e:	f7ff ffab 	bl	8005a88 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005b32:	f000 f939 	bl	8005da8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  union calib_t param[9], time;
  uint32_t start_time = 0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 8005b3a:	bf00      	nop
 8005b3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b40:	4869      	ldr	r0, [pc, #420]	@ (8005ce8 <main+0x1c8>)
 8005b42:	f000 fd01 	bl	8006548 <HAL_GPIO_ReadPin>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f7      	beq.n	8005b3c <main+0x1c>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b52:	4865      	ldr	r0, [pc, #404]	@ (8005ce8 <main+0x1c8>)
 8005b54:	f000 fd0f 	bl	8006576 <HAL_GPIO_WritePin>

	  for(uint16_t i = 0; i<=1111; i++)
 8005b58:	2300      	movs	r3, #0
 8005b5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005b5c:	e00c      	b.n	8005b78 <main+0x58>
	  {
		  HAL_SPI_Receive(&hspi1, mx_[i].inteiro, 4, HAL_MAX_DELAY);
 8005b5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4a62      	ldr	r2, [pc, #392]	@ (8005cec <main+0x1cc>)
 8005b64:	1899      	adds	r1, r3, r2
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	4860      	ldr	r0, [pc, #384]	@ (8005cf0 <main+0x1d0>)
 8005b6e:	f001 fac1 	bl	80070f4 <HAL_SPI_Receive>
	  for(uint16_t i = 0; i<=1111; i++)
 8005b72:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b74:	3301      	adds	r3, #1
 8005b76:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005b78:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b7a:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005b7e:	d3ee      	bcc.n	8005b5e <main+0x3e>
	  }
	  for(uint16_t i = 0; i<=1111; i++)
 8005b80:	2300      	movs	r3, #0
 8005b82:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005b84:	e00c      	b.n	8005ba0 <main+0x80>
	  {
		  HAL_SPI_Receive(&hspi1, my_[i].inteiro, 4, HAL_MAX_DELAY);
 8005b86:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4a5a      	ldr	r2, [pc, #360]	@ (8005cf4 <main+0x1d4>)
 8005b8c:	1899      	adds	r1, r3, r2
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b92:	2204      	movs	r2, #4
 8005b94:	4856      	ldr	r0, [pc, #344]	@ (8005cf0 <main+0x1d0>)
 8005b96:	f001 faad 	bl	80070f4 <HAL_SPI_Receive>
	  for(uint16_t i = 0; i<=1111; i++)
 8005b9a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005ba0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005ba2:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005ba6:	d3ee      	bcc.n	8005b86 <main+0x66>
	  }
	  for(uint16_t i = 0; i<=1111; i++)
 8005ba8:	2300      	movs	r3, #0
 8005baa:	867b      	strh	r3, [r7, #50]	@ 0x32
 8005bac:	e00c      	b.n	8005bc8 <main+0xa8>
	  {
		  HAL_SPI_Receive(&hspi1, mz_[i].inteiro, 4, HAL_MAX_DELAY);
 8005bae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4a51      	ldr	r2, [pc, #324]	@ (8005cf8 <main+0x1d8>)
 8005bb4:	1899      	adds	r1, r3, r2
 8005bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bba:	2204      	movs	r2, #4
 8005bbc:	484c      	ldr	r0, [pc, #304]	@ (8005cf0 <main+0x1d0>)
 8005bbe:	f001 fa99 	bl	80070f4 <HAL_SPI_Receive>
	  for(uint16_t i = 0; i<=1111; i++)
 8005bc2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	867b      	strh	r3, [r7, #50]	@ 0x32
 8005bc8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005bca:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005bce:	d3ee      	bcc.n	8005bae <main+0x8e>
	  }
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005bd6:	4844      	ldr	r0, [pc, #272]	@ (8005ce8 <main+0x1c8>)
 8005bd8:	f000 fccd 	bl	8006576 <HAL_GPIO_WritePin>

	  for(uint16_t i = 0; i<=1111; i++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	863b      	strh	r3, [r7, #48]	@ 0x30
 8005be0:	e01a      	b.n	8005c18 <main+0xf8>
	  {
		  mx[i] = mx_[i].flutuante;
 8005be2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005be4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005be6:	4941      	ldr	r1, [pc, #260]	@ (8005cec <main+0x1cc>)
 8005be8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bec:	4943      	ldr	r1, [pc, #268]	@ (8005cfc <main+0x1dc>)
 8005bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  my[i] = my_[i].flutuante;
 8005bf2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005bf4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005bf6:	493f      	ldr	r1, [pc, #252]	@ (8005cf4 <main+0x1d4>)
 8005bf8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bfc:	4940      	ldr	r1, [pc, #256]	@ (8005d00 <main+0x1e0>)
 8005bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  mz[i] = mz_[i].flutuante;
 8005c02:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005c04:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005c06:	493c      	ldr	r1, [pc, #240]	@ (8005cf8 <main+0x1d8>)
 8005c08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c0c:	493d      	ldr	r1, [pc, #244]	@ (8005d04 <main+0x1e4>)
 8005c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(uint16_t i = 0; i<=1111; i++)
 8005c12:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005c14:	3301      	adds	r3, #1
 8005c16:	863b      	strh	r3, [r7, #48]	@ 0x30
 8005c18:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005c1a:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005c1e:	d3e0      	bcc.n	8005be2 <main+0xc2>

	  /*start_time = HAL_GetTick();
	  ETS(mx, my, mz, p1);
	  ETS_time = HAL_GetTick() - start_time;*/

	  start_time = HAL_GetTick();
 8005c20:	f000 fa20 	bl	8006064 <HAL_GetTick>
 8005c24:	62b8      	str	r0, [r7, #40]	@ 0x28
	  passos_NLLS = NLLS(mx, my, mz, p1);
 8005c26:	4b38      	ldr	r3, [pc, #224]	@ (8005d08 <main+0x1e8>)
 8005c28:	4a36      	ldr	r2, [pc, #216]	@ (8005d04 <main+0x1e4>)
 8005c2a:	4935      	ldr	r1, [pc, #212]	@ (8005d00 <main+0x1e0>)
 8005c2c:	4833      	ldr	r0, [pc, #204]	@ (8005cfc <main+0x1dc>)
 8005c2e:	f7fb fa9f 	bl	8001170 <NLLS>
 8005c32:	4603      	mov	r3, r0
 8005c34:	461a      	mov	r2, r3
 8005c36:	4b35      	ldr	r3, [pc, #212]	@ (8005d0c <main+0x1ec>)
 8005c38:	701a      	strb	r2, [r3, #0]
	  time.flutuante = HAL_GetTick() - start_time;
 8005c3a:	f000 fa13 	bl	8006064 <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fa ffdf 	bl	8000c08 <__aeabi_ui2f>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	603b      	str	r3, [r7, #0]

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c54:	4824      	ldr	r0, [pc, #144]	@ (8005ce8 <main+0x1c8>)
 8005c56:	f000 fc8e 	bl	8006576 <HAL_GPIO_WritePin>

	  for(uint8_t i = 0; i < 10; i++)
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005c60:	e010      	b.n	8005c84 <main+0x164>
	  {
		  param[i].flutuante = p1[i];
 8005c62:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005c66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c6a:	4927      	ldr	r1, [pc, #156]	@ (8005d08 <main+0x1e8>)
 8005c6c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	3338      	adds	r3, #56	@ 0x38
 8005c74:	443b      	add	r3, r7
 8005c76:	f843 2c34 	str.w	r2, [r3, #-52]
	  for(uint8_t i = 0; i < 10; i++)
 8005c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c7e:	3301      	adds	r3, #1
 8005c80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005c84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c88:	2b09      	cmp	r3, #9
 8005c8a:	d9ea      	bls.n	8005c62 <main+0x142>
	  }


	  for(uint8_t i = 0; i < 10; i++)
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005c92:	e00f      	b.n	8005cb4 <main+0x194>
	  {
		  HAL_SPI_Transmit(&hspi1, param[i].inteiro, 4, HAL_MAX_DELAY);
 8005c94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c98:	1d3a      	adds	r2, r7, #4
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	18d1      	adds	r1, r2, r3
 8005c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca2:	2204      	movs	r2, #4
 8005ca4:	4812      	ldr	r0, [pc, #72]	@ (8005cf0 <main+0x1d0>)
 8005ca6:	f001 f8e1 	bl	8006e6c <HAL_SPI_Transmit>
	  for(uint8_t i = 0; i < 10; i++)
 8005caa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cae:	3301      	adds	r3, #1
 8005cb0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005cb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cb8:	2b09      	cmp	r3, #9
 8005cba:	d9eb      	bls.n	8005c94 <main+0x174>
	  }
	  HAL_SPI_Transmit(&hspi1, time.inteiro, 4, HAL_MAX_DELAY);
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc2:	2204      	movs	r2, #4
 8005cc4:	480a      	ldr	r0, [pc, #40]	@ (8005cf0 <main+0x1d0>)
 8005cc6:	f001 f8d1 	bl	8006e6c <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &passos_NLLS, 1, HAL_MAX_DELAY);
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295
 8005cce:	2201      	movs	r2, #1
 8005cd0:	490e      	ldr	r1, [pc, #56]	@ (8005d0c <main+0x1ec>)
 8005cd2:	4807      	ldr	r0, [pc, #28]	@ (8005cf0 <main+0x1d0>)
 8005cd4:	f001 f8ca 	bl	8006e6c <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005cde:	4802      	ldr	r0, [pc, #8]	@ (8005ce8 <main+0x1c8>)
 8005ce0:	f000 fc49 	bl	8006576 <HAL_GPIO_WritePin>
	  while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 8005ce4:	e729      	b.n	8005b3a <main+0x1a>
 8005ce6:	bf00      	nop
 8005ce8:	40010800 	.word	0x40010800
 8005cec:	20001a38 	.word	0x20001a38
 8005cf0:	20003470 	.word	0x20003470
 8005cf4:	200022e8 	.word	0x200022e8
 8005cf8:	20002b98 	.word	0x20002b98
 8005cfc:	20000028 	.word	0x20000028
 8005d00:	200008d8 	.word	0x200008d8
 8005d04:	20001188 	.word	0x20001188
 8005d08:	20003448 	.word	0x20003448
 8005d0c:	2000346c 	.word	0x2000346c

08005d10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b090      	sub	sp, #64	@ 0x40
 8005d14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d16:	f107 0318 	add.w	r3, r7, #24
 8005d1a:	2228      	movs	r2, #40	@ 0x28
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 fdb5 	bl	800788e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d24:	1d3b      	adds	r3, r7, #4
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	605a      	str	r2, [r3, #4]
 8005d2c:	609a      	str	r2, [r3, #8]
 8005d2e:	60da      	str	r2, [r3, #12]
 8005d30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d32:	2301      	movs	r3, #1
 8005d34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005d40:	2301      	movs	r3, #1
 8005d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d44:	2302      	movs	r3, #2
 8005d46:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005d4e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8005d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d54:	f107 0318 	add.w	r3, r7, #24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fc25 	bl	80065a8 <HAL_RCC_OscConfig>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005d64:	f000 f819 	bl	8005d9a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d68:	230f      	movs	r3, #15
 8005d6a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005d74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005d7e:	1d3b      	adds	r3, r7, #4
 8005d80:	2102      	movs	r1, #2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fe92 	bl	8006aac <HAL_RCC_ClockConfig>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005d8e:	f000 f804 	bl	8005d9a <Error_Handler>
  }
}
 8005d92:	bf00      	nop
 8005d94:	3740      	adds	r7, #64	@ 0x40
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d9e:	b672      	cpsid	i
}
 8005da0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005da2:	bf00      	nop
 8005da4:	e7fd      	b.n	8005da2 <Error_Handler+0x8>
	...

08005da8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005dac:	4b15      	ldr	r3, [pc, #84]	@ (8005e04 <MX_SPI1_Init+0x5c>)
 8005dae:	4a16      	ldr	r2, [pc, #88]	@ (8005e08 <MX_SPI1_Init+0x60>)
 8005db0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8005db2:	4b14      	ldr	r3, [pc, #80]	@ (8005e04 <MX_SPI1_Init+0x5c>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005db8:	4b12      	ldr	r3, [pc, #72]	@ (8005e04 <MX_SPI1_Init+0x5c>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005dbe:	4b11      	ldr	r3, [pc, #68]	@ (8005e04 <MX_SPI1_Init+0x5c>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e04 <MX_SPI1_Init+0x5c>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005dca:	4b0e      	ldr	r3, [pc, #56]	@ (8005e04 <MX_SPI1_Init+0x5c>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e04 <MX_SPI1_Init+0x5c>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <MX_SPI1_Init+0x5c>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ddc:	4b09      	ldr	r3, [pc, #36]	@ (8005e04 <MX_SPI1_Init+0x5c>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005de2:	4b08      	ldr	r3, [pc, #32]	@ (8005e04 <MX_SPI1_Init+0x5c>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005de8:	4b06      	ldr	r3, [pc, #24]	@ (8005e04 <MX_SPI1_Init+0x5c>)
 8005dea:	220a      	movs	r2, #10
 8005dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005dee:	4805      	ldr	r0, [pc, #20]	@ (8005e04 <MX_SPI1_Init+0x5c>)
 8005df0:	f000 ffb8 	bl	8006d64 <HAL_SPI_Init>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8005dfa:	f7ff ffce 	bl	8005d9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005dfe:	bf00      	nop
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20003470 	.word	0x20003470
 8005e08:	40013000 	.word	0x40013000

08005e0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e14:	f107 0310 	add.w	r3, r7, #16
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	609a      	str	r2, [r3, #8]
 8005e20:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1b      	ldr	r2, [pc, #108]	@ (8005e94 <HAL_SPI_MspInit+0x88>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d12f      	bne.n	8005e8c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005e98 <HAL_SPI_MspInit+0x8c>)
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	4a19      	ldr	r2, [pc, #100]	@ (8005e98 <HAL_SPI_MspInit+0x8c>)
 8005e32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005e36:	6193      	str	r3, [r2, #24]
 8005e38:	4b17      	ldr	r3, [pc, #92]	@ (8005e98 <HAL_SPI_MspInit+0x8c>)
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e44:	4b14      	ldr	r3, [pc, #80]	@ (8005e98 <HAL_SPI_MspInit+0x8c>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	4a13      	ldr	r2, [pc, #76]	@ (8005e98 <HAL_SPI_MspInit+0x8c>)
 8005e4a:	f043 0304 	orr.w	r3, r3, #4
 8005e4e:	6193      	str	r3, [r2, #24]
 8005e50:	4b11      	ldr	r3, [pc, #68]	@ (8005e98 <HAL_SPI_MspInit+0x8c>)
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f003 0304 	and.w	r3, r3, #4
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8005e5c:	23b0      	movs	r3, #176	@ 0xb0
 8005e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e68:	f107 0310 	add.w	r3, r7, #16
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	480b      	ldr	r0, [pc, #44]	@ (8005e9c <HAL_SPI_MspInit+0x90>)
 8005e70:	f000 f9e6 	bl	8006240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005e74:	2340      	movs	r3, #64	@ 0x40
 8005e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e78:	2302      	movs	r3, #2
 8005e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e80:	f107 0310 	add.w	r3, r7, #16
 8005e84:	4619      	mov	r1, r3
 8005e86:	4805      	ldr	r0, [pc, #20]	@ (8005e9c <HAL_SPI_MspInit+0x90>)
 8005e88:	f000 f9da 	bl	8006240 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	3720      	adds	r7, #32
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40013000 	.word	0x40013000
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	40010800 	.word	0x40010800

08005ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005ea6:	4b15      	ldr	r3, [pc, #84]	@ (8005efc <HAL_MspInit+0x5c>)
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	4a14      	ldr	r2, [pc, #80]	@ (8005efc <HAL_MspInit+0x5c>)
 8005eac:	f043 0301 	orr.w	r3, r3, #1
 8005eb0:	6193      	str	r3, [r2, #24]
 8005eb2:	4b12      	ldr	r3, [pc, #72]	@ (8005efc <HAL_MspInit+0x5c>)
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	60bb      	str	r3, [r7, #8]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8005efc <HAL_MspInit+0x5c>)
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8005efc <HAL_MspInit+0x5c>)
 8005ec4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ec8:	61d3      	str	r3, [r2, #28]
 8005eca:	4b0c      	ldr	r3, [pc, #48]	@ (8005efc <HAL_MspInit+0x5c>)
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ed2:	607b      	str	r3, [r7, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8005f00 <HAL_MspInit+0x60>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	4a04      	ldr	r2, [pc, #16]	@ (8005f00 <HAL_MspInit+0x60>)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ef2:	bf00      	nop
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bc80      	pop	{r7}
 8005efa:	4770      	bx	lr
 8005efc:	40021000 	.word	0x40021000
 8005f00:	40010000 	.word	0x40010000

08005f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <NMI_Handler+0x4>

08005f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f10:	bf00      	nop
 8005f12:	e7fd      	b.n	8005f10 <HardFault_Handler+0x4>

08005f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <MemManage_Handler+0x4>

08005f1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f20:	bf00      	nop
 8005f22:	e7fd      	b.n	8005f20 <BusFault_Handler+0x4>

08005f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f28:	bf00      	nop
 8005f2a:	e7fd      	b.n	8005f28 <UsageFault_Handler+0x4>

08005f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f30:	bf00      	nop
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f3c:	bf00      	nop
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr

08005f44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f48:	bf00      	nop
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f54:	f000 f874 	bl	8006040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f58:	bf00      	nop
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f60:	bf00      	nop
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr

08005f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f68:	f7ff fff8 	bl	8005f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f6c:	480b      	ldr	r0, [pc, #44]	@ (8005f9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005f6e:	490c      	ldr	r1, [pc, #48]	@ (8005fa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005f70:	4a0c      	ldr	r2, [pc, #48]	@ (8005fa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f74:	e002      	b.n	8005f7c <LoopCopyDataInit>

08005f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f7a:	3304      	adds	r3, #4

08005f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f80:	d3f9      	bcc.n	8005f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f82:	4a09      	ldr	r2, [pc, #36]	@ (8005fa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005f84:	4c09      	ldr	r4, [pc, #36]	@ (8005fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f88:	e001      	b.n	8005f8e <LoopFillZerobss>

08005f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f8c:	3204      	adds	r2, #4

08005f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f90:	d3fb      	bcc.n	8005f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f92:	f001 fc85 	bl	80078a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005f96:	f7ff fdc3 	bl	8005b20 <main>
  bx lr
 8005f9a:	4770      	bx	lr
  ldr r0, =_sdata
 8005f9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005fa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8005fa4:	08007950 	.word	0x08007950
  ldr r2, =_sbss
 8005fa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8005fac:	200034cc 	.word	0x200034cc

08005fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fb0:	e7fe      	b.n	8005fb0 <ADC1_2_IRQHandler>
	...

08005fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fb8:	4b08      	ldr	r3, [pc, #32]	@ (8005fdc <HAL_Init+0x28>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a07      	ldr	r2, [pc, #28]	@ (8005fdc <HAL_Init+0x28>)
 8005fbe:	f043 0310 	orr.w	r3, r3, #16
 8005fc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fc4:	2003      	movs	r0, #3
 8005fc6:	f000 f907 	bl	80061d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fca:	200f      	movs	r0, #15
 8005fcc:	f000 f808 	bl	8005fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fd0:	f7ff ff66 	bl	8005ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	40022000 	.word	0x40022000

08005fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005fe8:	4b12      	ldr	r3, [pc, #72]	@ (8006034 <HAL_InitTick+0x54>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	4b12      	ldr	r3, [pc, #72]	@ (8006038 <HAL_InitTick+0x58>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 f911 	bl	8006226 <HAL_SYSTICK_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e00e      	b.n	800602c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b0f      	cmp	r3, #15
 8006012:	d80a      	bhi.n	800602a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006014:	2200      	movs	r2, #0
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	f000 f8e7 	bl	80061ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006020:	4a06      	ldr	r2, [pc, #24]	@ (800603c <HAL_InitTick+0x5c>)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	e000      	b.n	800602c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20000000 	.word	0x20000000
 8006038:	20000008 	.word	0x20000008
 800603c:	20000004 	.word	0x20000004

08006040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006040:	b480      	push	{r7}
 8006042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006044:	4b05      	ldr	r3, [pc, #20]	@ (800605c <HAL_IncTick+0x1c>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <HAL_IncTick+0x20>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4413      	add	r3, r2
 8006050:	4a03      	ldr	r2, [pc, #12]	@ (8006060 <HAL_IncTick+0x20>)
 8006052:	6013      	str	r3, [r2, #0]
}
 8006054:	bf00      	nop
 8006056:	46bd      	mov	sp, r7
 8006058:	bc80      	pop	{r7}
 800605a:	4770      	bx	lr
 800605c:	20000008 	.word	0x20000008
 8006060:	200034c8 	.word	0x200034c8

08006064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  return uwTick;
 8006068:	4b02      	ldr	r3, [pc, #8]	@ (8006074 <HAL_GetTick+0x10>)
 800606a:	681b      	ldr	r3, [r3, #0]
}
 800606c:	4618      	mov	r0, r3
 800606e:	46bd      	mov	sp, r7
 8006070:	bc80      	pop	{r7}
 8006072:	4770      	bx	lr
 8006074:	200034c8 	.word	0x200034c8

08006078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006088:	4b0c      	ldr	r3, [pc, #48]	@ (80060bc <__NVIC_SetPriorityGrouping+0x44>)
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006094:	4013      	ands	r3, r2
 8006096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80060a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060aa:	4a04      	ldr	r2, [pc, #16]	@ (80060bc <__NVIC_SetPriorityGrouping+0x44>)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	60d3      	str	r3, [r2, #12]
}
 80060b0:	bf00      	nop
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	e000ed00 	.word	0xe000ed00

080060c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060c4:	4b04      	ldr	r3, [pc, #16]	@ (80060d8 <__NVIC_GetPriorityGrouping+0x18>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	f003 0307 	and.w	r3, r3, #7
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	e000ed00 	.word	0xe000ed00

080060dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	6039      	str	r1, [r7, #0]
 80060e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	db0a      	blt.n	8006106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	490c      	ldr	r1, [pc, #48]	@ (8006128 <__NVIC_SetPriority+0x4c>)
 80060f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fa:	0112      	lsls	r2, r2, #4
 80060fc:	b2d2      	uxtb	r2, r2
 80060fe:	440b      	add	r3, r1
 8006100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006104:	e00a      	b.n	800611c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	b2da      	uxtb	r2, r3
 800610a:	4908      	ldr	r1, [pc, #32]	@ (800612c <__NVIC_SetPriority+0x50>)
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	3b04      	subs	r3, #4
 8006114:	0112      	lsls	r2, r2, #4
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	440b      	add	r3, r1
 800611a:	761a      	strb	r2, [r3, #24]
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	bc80      	pop	{r7}
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	e000e100 	.word	0xe000e100
 800612c:	e000ed00 	.word	0xe000ed00

08006130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006130:	b480      	push	{r7}
 8006132:	b089      	sub	sp, #36	@ 0x24
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f1c3 0307 	rsb	r3, r3, #7
 800614a:	2b04      	cmp	r3, #4
 800614c:	bf28      	it	cs
 800614e:	2304      	movcs	r3, #4
 8006150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	3304      	adds	r3, #4
 8006156:	2b06      	cmp	r3, #6
 8006158:	d902      	bls.n	8006160 <NVIC_EncodePriority+0x30>
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	3b03      	subs	r3, #3
 800615e:	e000      	b.n	8006162 <NVIC_EncodePriority+0x32>
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006164:	f04f 32ff 	mov.w	r2, #4294967295
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	43da      	mvns	r2, r3
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	401a      	ands	r2, r3
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006178:	f04f 31ff 	mov.w	r1, #4294967295
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	fa01 f303 	lsl.w	r3, r1, r3
 8006182:	43d9      	mvns	r1, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006188:	4313      	orrs	r3, r2
         );
}
 800618a:	4618      	mov	r0, r3
 800618c:	3724      	adds	r7, #36	@ 0x24
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3b01      	subs	r3, #1
 80061a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061a4:	d301      	bcc.n	80061aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061a6:	2301      	movs	r3, #1
 80061a8:	e00f      	b.n	80061ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061aa:	4a0a      	ldr	r2, [pc, #40]	@ (80061d4 <SysTick_Config+0x40>)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061b2:	210f      	movs	r1, #15
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	f7ff ff90 	bl	80060dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061bc:	4b05      	ldr	r3, [pc, #20]	@ (80061d4 <SysTick_Config+0x40>)
 80061be:	2200      	movs	r2, #0
 80061c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061c2:	4b04      	ldr	r3, [pc, #16]	@ (80061d4 <SysTick_Config+0x40>)
 80061c4:	2207      	movs	r2, #7
 80061c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	e000e010 	.word	0xe000e010

080061d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff ff49 	bl	8006078 <__NVIC_SetPriorityGrouping>
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b086      	sub	sp, #24
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	4603      	mov	r3, r0
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
 80061fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006200:	f7ff ff5e 	bl	80060c0 <__NVIC_GetPriorityGrouping>
 8006204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	6978      	ldr	r0, [r7, #20]
 800620c:	f7ff ff90 	bl	8006130 <NVIC_EncodePriority>
 8006210:	4602      	mov	r2, r0
 8006212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006216:	4611      	mov	r1, r2
 8006218:	4618      	mov	r0, r3
 800621a:	f7ff ff5f 	bl	80060dc <__NVIC_SetPriority>
}
 800621e:	bf00      	nop
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff ffb0 	bl	8006194 <SysTick_Config>
 8006234:	4603      	mov	r3, r0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006240:	b480      	push	{r7}
 8006242:	b08b      	sub	sp, #44	@ 0x2c
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800624a:	2300      	movs	r3, #0
 800624c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800624e:	2300      	movs	r3, #0
 8006250:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006252:	e169      	b.n	8006528 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006254:	2201      	movs	r2, #1
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	4013      	ands	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	429a      	cmp	r2, r3
 800626e:	f040 8158 	bne.w	8006522 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4a9a      	ldr	r2, [pc, #616]	@ (80064e0 <HAL_GPIO_Init+0x2a0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d05e      	beq.n	800633a <HAL_GPIO_Init+0xfa>
 800627c:	4a98      	ldr	r2, [pc, #608]	@ (80064e0 <HAL_GPIO_Init+0x2a0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d875      	bhi.n	800636e <HAL_GPIO_Init+0x12e>
 8006282:	4a98      	ldr	r2, [pc, #608]	@ (80064e4 <HAL_GPIO_Init+0x2a4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d058      	beq.n	800633a <HAL_GPIO_Init+0xfa>
 8006288:	4a96      	ldr	r2, [pc, #600]	@ (80064e4 <HAL_GPIO_Init+0x2a4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d86f      	bhi.n	800636e <HAL_GPIO_Init+0x12e>
 800628e:	4a96      	ldr	r2, [pc, #600]	@ (80064e8 <HAL_GPIO_Init+0x2a8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d052      	beq.n	800633a <HAL_GPIO_Init+0xfa>
 8006294:	4a94      	ldr	r2, [pc, #592]	@ (80064e8 <HAL_GPIO_Init+0x2a8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d869      	bhi.n	800636e <HAL_GPIO_Init+0x12e>
 800629a:	4a94      	ldr	r2, [pc, #592]	@ (80064ec <HAL_GPIO_Init+0x2ac>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d04c      	beq.n	800633a <HAL_GPIO_Init+0xfa>
 80062a0:	4a92      	ldr	r2, [pc, #584]	@ (80064ec <HAL_GPIO_Init+0x2ac>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d863      	bhi.n	800636e <HAL_GPIO_Init+0x12e>
 80062a6:	4a92      	ldr	r2, [pc, #584]	@ (80064f0 <HAL_GPIO_Init+0x2b0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d046      	beq.n	800633a <HAL_GPIO_Init+0xfa>
 80062ac:	4a90      	ldr	r2, [pc, #576]	@ (80064f0 <HAL_GPIO_Init+0x2b0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d85d      	bhi.n	800636e <HAL_GPIO_Init+0x12e>
 80062b2:	2b12      	cmp	r3, #18
 80062b4:	d82a      	bhi.n	800630c <HAL_GPIO_Init+0xcc>
 80062b6:	2b12      	cmp	r3, #18
 80062b8:	d859      	bhi.n	800636e <HAL_GPIO_Init+0x12e>
 80062ba:	a201      	add	r2, pc, #4	@ (adr r2, 80062c0 <HAL_GPIO_Init+0x80>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	0800633b 	.word	0x0800633b
 80062c4:	08006315 	.word	0x08006315
 80062c8:	08006327 	.word	0x08006327
 80062cc:	08006369 	.word	0x08006369
 80062d0:	0800636f 	.word	0x0800636f
 80062d4:	0800636f 	.word	0x0800636f
 80062d8:	0800636f 	.word	0x0800636f
 80062dc:	0800636f 	.word	0x0800636f
 80062e0:	0800636f 	.word	0x0800636f
 80062e4:	0800636f 	.word	0x0800636f
 80062e8:	0800636f 	.word	0x0800636f
 80062ec:	0800636f 	.word	0x0800636f
 80062f0:	0800636f 	.word	0x0800636f
 80062f4:	0800636f 	.word	0x0800636f
 80062f8:	0800636f 	.word	0x0800636f
 80062fc:	0800636f 	.word	0x0800636f
 8006300:	0800636f 	.word	0x0800636f
 8006304:	0800631d 	.word	0x0800631d
 8006308:	08006331 	.word	0x08006331
 800630c:	4a79      	ldr	r2, [pc, #484]	@ (80064f4 <HAL_GPIO_Init+0x2b4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d013      	beq.n	800633a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006312:	e02c      	b.n	800636e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	623b      	str	r3, [r7, #32]
          break;
 800631a:	e029      	b.n	8006370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	3304      	adds	r3, #4
 8006322:	623b      	str	r3, [r7, #32]
          break;
 8006324:	e024      	b.n	8006370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	3308      	adds	r3, #8
 800632c:	623b      	str	r3, [r7, #32]
          break;
 800632e:	e01f      	b.n	8006370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	330c      	adds	r3, #12
 8006336:	623b      	str	r3, [r7, #32]
          break;
 8006338:	e01a      	b.n	8006370 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d102      	bne.n	8006348 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006342:	2304      	movs	r3, #4
 8006344:	623b      	str	r3, [r7, #32]
          break;
 8006346:	e013      	b.n	8006370 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d105      	bne.n	800635c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006350:	2308      	movs	r3, #8
 8006352:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69fa      	ldr	r2, [r7, #28]
 8006358:	611a      	str	r2, [r3, #16]
          break;
 800635a:	e009      	b.n	8006370 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800635c:	2308      	movs	r3, #8
 800635e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	615a      	str	r2, [r3, #20]
          break;
 8006366:	e003      	b.n	8006370 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006368:	2300      	movs	r3, #0
 800636a:	623b      	str	r3, [r7, #32]
          break;
 800636c:	e000      	b.n	8006370 <HAL_GPIO_Init+0x130>
          break;
 800636e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	2bff      	cmp	r3, #255	@ 0xff
 8006374:	d801      	bhi.n	800637a <HAL_GPIO_Init+0x13a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	e001      	b.n	800637e <HAL_GPIO_Init+0x13e>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3304      	adds	r3, #4
 800637e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2bff      	cmp	r3, #255	@ 0xff
 8006384:	d802      	bhi.n	800638c <HAL_GPIO_Init+0x14c>
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	e002      	b.n	8006392 <HAL_GPIO_Init+0x152>
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	3b08      	subs	r3, #8
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	210f      	movs	r1, #15
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	fa01 f303 	lsl.w	r3, r1, r3
 80063a0:	43db      	mvns	r3, r3
 80063a2:	401a      	ands	r2, r3
 80063a4:	6a39      	ldr	r1, [r7, #32]
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	fa01 f303 	lsl.w	r3, r1, r3
 80063ac:	431a      	orrs	r2, r3
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 80b1 	beq.w	8006522 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80063c0:	4b4d      	ldr	r3, [pc, #308]	@ (80064f8 <HAL_GPIO_Init+0x2b8>)
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	4a4c      	ldr	r2, [pc, #304]	@ (80064f8 <HAL_GPIO_Init+0x2b8>)
 80063c6:	f043 0301 	orr.w	r3, r3, #1
 80063ca:	6193      	str	r3, [r2, #24]
 80063cc:	4b4a      	ldr	r3, [pc, #296]	@ (80064f8 <HAL_GPIO_Init+0x2b8>)
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	60bb      	str	r3, [r7, #8]
 80063d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80063d8:	4a48      	ldr	r2, [pc, #288]	@ (80064fc <HAL_GPIO_Init+0x2bc>)
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	089b      	lsrs	r3, r3, #2
 80063de:	3302      	adds	r3, #2
 80063e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80063e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e8:	f003 0303 	and.w	r3, r3, #3
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	220f      	movs	r2, #15
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	43db      	mvns	r3, r3
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4013      	ands	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a40      	ldr	r2, [pc, #256]	@ (8006500 <HAL_GPIO_Init+0x2c0>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d013      	beq.n	800642c <HAL_GPIO_Init+0x1ec>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a3f      	ldr	r2, [pc, #252]	@ (8006504 <HAL_GPIO_Init+0x2c4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00d      	beq.n	8006428 <HAL_GPIO_Init+0x1e8>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a3e      	ldr	r2, [pc, #248]	@ (8006508 <HAL_GPIO_Init+0x2c8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d007      	beq.n	8006424 <HAL_GPIO_Init+0x1e4>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a3d      	ldr	r2, [pc, #244]	@ (800650c <HAL_GPIO_Init+0x2cc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d101      	bne.n	8006420 <HAL_GPIO_Init+0x1e0>
 800641c:	2303      	movs	r3, #3
 800641e:	e006      	b.n	800642e <HAL_GPIO_Init+0x1ee>
 8006420:	2304      	movs	r3, #4
 8006422:	e004      	b.n	800642e <HAL_GPIO_Init+0x1ee>
 8006424:	2302      	movs	r3, #2
 8006426:	e002      	b.n	800642e <HAL_GPIO_Init+0x1ee>
 8006428:	2301      	movs	r3, #1
 800642a:	e000      	b.n	800642e <HAL_GPIO_Init+0x1ee>
 800642c:	2300      	movs	r3, #0
 800642e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006430:	f002 0203 	and.w	r2, r2, #3
 8006434:	0092      	lsls	r2, r2, #2
 8006436:	4093      	lsls	r3, r2
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800643e:	492f      	ldr	r1, [pc, #188]	@ (80064fc <HAL_GPIO_Init+0x2bc>)
 8006440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006442:	089b      	lsrs	r3, r3, #2
 8006444:	3302      	adds	r3, #2
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d006      	beq.n	8006466 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006458:	4b2d      	ldr	r3, [pc, #180]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	492c      	ldr	r1, [pc, #176]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	4313      	orrs	r3, r2
 8006462:	608b      	str	r3, [r1, #8]
 8006464:	e006      	b.n	8006474 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006466:	4b2a      	ldr	r3, [pc, #168]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	43db      	mvns	r3, r3
 800646e:	4928      	ldr	r1, [pc, #160]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 8006470:	4013      	ands	r3, r2
 8006472:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d006      	beq.n	800648e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006480:	4b23      	ldr	r3, [pc, #140]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	4922      	ldr	r1, [pc, #136]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	4313      	orrs	r3, r2
 800648a:	60cb      	str	r3, [r1, #12]
 800648c:	e006      	b.n	800649c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800648e:	4b20      	ldr	r3, [pc, #128]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	43db      	mvns	r3, r3
 8006496:	491e      	ldr	r1, [pc, #120]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 8006498:	4013      	ands	r3, r2
 800649a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d006      	beq.n	80064b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80064a8:	4b19      	ldr	r3, [pc, #100]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	4918      	ldr	r1, [pc, #96]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	604b      	str	r3, [r1, #4]
 80064b4:	e006      	b.n	80064c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80064b6:	4b16      	ldr	r3, [pc, #88]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	43db      	mvns	r3, r3
 80064be:	4914      	ldr	r1, [pc, #80]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d021      	beq.n	8006514 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80064d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	490e      	ldr	r1, [pc, #56]	@ (8006510 <HAL_GPIO_Init+0x2d0>)
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	4313      	orrs	r3, r2
 80064da:	600b      	str	r3, [r1, #0]
 80064dc:	e021      	b.n	8006522 <HAL_GPIO_Init+0x2e2>
 80064de:	bf00      	nop
 80064e0:	10320000 	.word	0x10320000
 80064e4:	10310000 	.word	0x10310000
 80064e8:	10220000 	.word	0x10220000
 80064ec:	10210000 	.word	0x10210000
 80064f0:	10120000 	.word	0x10120000
 80064f4:	10110000 	.word	0x10110000
 80064f8:	40021000 	.word	0x40021000
 80064fc:	40010000 	.word	0x40010000
 8006500:	40010800 	.word	0x40010800
 8006504:	40010c00 	.word	0x40010c00
 8006508:	40011000 	.word	0x40011000
 800650c:	40011400 	.word	0x40011400
 8006510:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006514:	4b0b      	ldr	r3, [pc, #44]	@ (8006544 <HAL_GPIO_Init+0x304>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	43db      	mvns	r3, r3
 800651c:	4909      	ldr	r1, [pc, #36]	@ (8006544 <HAL_GPIO_Init+0x304>)
 800651e:	4013      	ands	r3, r2
 8006520:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006524:	3301      	adds	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652e:	fa22 f303 	lsr.w	r3, r2, r3
 8006532:	2b00      	cmp	r3, #0
 8006534:	f47f ae8e 	bne.w	8006254 <HAL_GPIO_Init+0x14>
  }
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	372c      	adds	r7, #44	@ 0x2c
 800653e:	46bd      	mov	sp, r7
 8006540:	bc80      	pop	{r7}
 8006542:	4770      	bx	lr
 8006544:	40010400 	.word	0x40010400

08006548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	887b      	ldrh	r3, [r7, #2]
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006560:	2301      	movs	r3, #1
 8006562:	73fb      	strb	r3, [r7, #15]
 8006564:	e001      	b.n	800656a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800656a:	7bfb      	ldrb	r3, [r7, #15]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr

08006576 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	460b      	mov	r3, r1
 8006580:	807b      	strh	r3, [r7, #2]
 8006582:	4613      	mov	r3, r2
 8006584:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006586:	787b      	ldrb	r3, [r7, #1]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800658c:	887a      	ldrh	r2, [r7, #2]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006592:	e003      	b.n	800659c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006594:	887b      	ldrh	r3, [r7, #2]
 8006596:	041a      	lsls	r2, r3, #16
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	611a      	str	r2, [r3, #16]
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr
	...

080065a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e272      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 8087 	beq.w	80066d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065c8:	4b92      	ldr	r3, [pc, #584]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f003 030c 	and.w	r3, r3, #12
 80065d0:	2b04      	cmp	r3, #4
 80065d2:	d00c      	beq.n	80065ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065d4:	4b8f      	ldr	r3, [pc, #572]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f003 030c 	and.w	r3, r3, #12
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d112      	bne.n	8006606 <HAL_RCC_OscConfig+0x5e>
 80065e0:	4b8c      	ldr	r3, [pc, #560]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ec:	d10b      	bne.n	8006606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ee:	4b89      	ldr	r3, [pc, #548]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d06c      	beq.n	80066d4 <HAL_RCC_OscConfig+0x12c>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d168      	bne.n	80066d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e24c      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800660e:	d106      	bne.n	800661e <HAL_RCC_OscConfig+0x76>
 8006610:	4b80      	ldr	r3, [pc, #512]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a7f      	ldr	r2, [pc, #508]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006616:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	e02e      	b.n	800667c <HAL_RCC_OscConfig+0xd4>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10c      	bne.n	8006640 <HAL_RCC_OscConfig+0x98>
 8006626:	4b7b      	ldr	r3, [pc, #492]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a7a      	ldr	r2, [pc, #488]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 800662c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	4b78      	ldr	r3, [pc, #480]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a77      	ldr	r2, [pc, #476]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006638:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	e01d      	b.n	800667c <HAL_RCC_OscConfig+0xd4>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006648:	d10c      	bne.n	8006664 <HAL_RCC_OscConfig+0xbc>
 800664a:	4b72      	ldr	r3, [pc, #456]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a71      	ldr	r2, [pc, #452]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	4b6f      	ldr	r3, [pc, #444]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a6e      	ldr	r2, [pc, #440]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 800665c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	e00b      	b.n	800667c <HAL_RCC_OscConfig+0xd4>
 8006664:	4b6b      	ldr	r3, [pc, #428]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a6a      	ldr	r2, [pc, #424]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 800666a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800666e:	6013      	str	r3, [r2, #0]
 8006670:	4b68      	ldr	r3, [pc, #416]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a67      	ldr	r2, [pc, #412]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800667a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d013      	beq.n	80066ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006684:	f7ff fcee 	bl	8006064 <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800668c:	f7ff fcea 	bl	8006064 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b64      	cmp	r3, #100	@ 0x64
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e200      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800669e:	4b5d      	ldr	r3, [pc, #372]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0f0      	beq.n	800668c <HAL_RCC_OscConfig+0xe4>
 80066aa:	e014      	b.n	80066d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ac:	f7ff fcda 	bl	8006064 <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066b4:	f7ff fcd6 	bl	8006064 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b64      	cmp	r3, #100	@ 0x64
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e1ec      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066c6:	4b53      	ldr	r3, [pc, #332]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1f0      	bne.n	80066b4 <HAL_RCC_OscConfig+0x10c>
 80066d2:	e000      	b.n	80066d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d063      	beq.n	80067aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f003 030c 	and.w	r3, r3, #12
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00b      	beq.n	8006706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80066ee:	4b49      	ldr	r3, [pc, #292]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f003 030c 	and.w	r3, r3, #12
 80066f6:	2b08      	cmp	r3, #8
 80066f8:	d11c      	bne.n	8006734 <HAL_RCC_OscConfig+0x18c>
 80066fa:	4b46      	ldr	r3, [pc, #280]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d116      	bne.n	8006734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006706:	4b43      	ldr	r3, [pc, #268]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d005      	beq.n	800671e <HAL_RCC_OscConfig+0x176>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d001      	beq.n	800671e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e1c0      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800671e:	4b3d      	ldr	r3, [pc, #244]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	4939      	ldr	r1, [pc, #228]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 800672e:	4313      	orrs	r3, r2
 8006730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006732:	e03a      	b.n	80067aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d020      	beq.n	800677e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800673c:	4b36      	ldr	r3, [pc, #216]	@ (8006818 <HAL_RCC_OscConfig+0x270>)
 800673e:	2201      	movs	r2, #1
 8006740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006742:	f7ff fc8f 	bl	8006064 <HAL_GetTick>
 8006746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006748:	e008      	b.n	800675c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800674a:	f7ff fc8b 	bl	8006064 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e1a1      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800675c:	4b2d      	ldr	r3, [pc, #180]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0f0      	beq.n	800674a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006768:	4b2a      	ldr	r3, [pc, #168]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	4927      	ldr	r1, [pc, #156]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 8006778:	4313      	orrs	r3, r2
 800677a:	600b      	str	r3, [r1, #0]
 800677c:	e015      	b.n	80067aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800677e:	4b26      	ldr	r3, [pc, #152]	@ (8006818 <HAL_RCC_OscConfig+0x270>)
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006784:	f7ff fc6e 	bl	8006064 <HAL_GetTick>
 8006788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800678c:	f7ff fc6a 	bl	8006064 <HAL_GetTick>
 8006790:	4602      	mov	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b02      	cmp	r3, #2
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e180      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800679e:	4b1d      	ldr	r3, [pc, #116]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1f0      	bne.n	800678c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d03a      	beq.n	800682c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d019      	beq.n	80067f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067be:	4b17      	ldr	r3, [pc, #92]	@ (800681c <HAL_RCC_OscConfig+0x274>)
 80067c0:	2201      	movs	r2, #1
 80067c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067c4:	f7ff fc4e 	bl	8006064 <HAL_GetTick>
 80067c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067cc:	f7ff fc4a 	bl	8006064 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e160      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067de:	4b0d      	ldr	r3, [pc, #52]	@ (8006814 <HAL_RCC_OscConfig+0x26c>)
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0f0      	beq.n	80067cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80067ea:	2001      	movs	r0, #1
 80067ec:	f000 fa9c 	bl	8006d28 <RCC_Delay>
 80067f0:	e01c      	b.n	800682c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067f2:	4b0a      	ldr	r3, [pc, #40]	@ (800681c <HAL_RCC_OscConfig+0x274>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f8:	f7ff fc34 	bl	8006064 <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067fe:	e00f      	b.n	8006820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006800:	f7ff fc30 	bl	8006064 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d908      	bls.n	8006820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e146      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
 8006812:	bf00      	nop
 8006814:	40021000 	.word	0x40021000
 8006818:	42420000 	.word	0x42420000
 800681c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006820:	4b92      	ldr	r3, [pc, #584]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 8006822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1e9      	bne.n	8006800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80a6 	beq.w	8006986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800683a:	2300      	movs	r3, #0
 800683c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800683e:	4b8b      	ldr	r3, [pc, #556]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10d      	bne.n	8006866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800684a:	4b88      	ldr	r3, [pc, #544]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	4a87      	ldr	r2, [pc, #540]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 8006850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006854:	61d3      	str	r3, [r2, #28]
 8006856:	4b85      	ldr	r3, [pc, #532]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800685e:	60bb      	str	r3, [r7, #8]
 8006860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006862:	2301      	movs	r3, #1
 8006864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006866:	4b82      	ldr	r3, [pc, #520]	@ (8006a70 <HAL_RCC_OscConfig+0x4c8>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686e:	2b00      	cmp	r3, #0
 8006870:	d118      	bne.n	80068a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006872:	4b7f      	ldr	r3, [pc, #508]	@ (8006a70 <HAL_RCC_OscConfig+0x4c8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a7e      	ldr	r2, [pc, #504]	@ (8006a70 <HAL_RCC_OscConfig+0x4c8>)
 8006878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800687c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800687e:	f7ff fbf1 	bl	8006064 <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006884:	e008      	b.n	8006898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006886:	f7ff fbed 	bl	8006064 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b64      	cmp	r3, #100	@ 0x64
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e103      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006898:	4b75      	ldr	r3, [pc, #468]	@ (8006a70 <HAL_RCC_OscConfig+0x4c8>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f0      	beq.n	8006886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d106      	bne.n	80068ba <HAL_RCC_OscConfig+0x312>
 80068ac:	4b6f      	ldr	r3, [pc, #444]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	4a6e      	ldr	r2, [pc, #440]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80068b2:	f043 0301 	orr.w	r3, r3, #1
 80068b6:	6213      	str	r3, [r2, #32]
 80068b8:	e02d      	b.n	8006916 <HAL_RCC_OscConfig+0x36e>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10c      	bne.n	80068dc <HAL_RCC_OscConfig+0x334>
 80068c2:	4b6a      	ldr	r3, [pc, #424]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	4a69      	ldr	r2, [pc, #420]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	6213      	str	r3, [r2, #32]
 80068ce:	4b67      	ldr	r3, [pc, #412]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	4a66      	ldr	r2, [pc, #408]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80068d4:	f023 0304 	bic.w	r3, r3, #4
 80068d8:	6213      	str	r3, [r2, #32]
 80068da:	e01c      	b.n	8006916 <HAL_RCC_OscConfig+0x36e>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	2b05      	cmp	r3, #5
 80068e2:	d10c      	bne.n	80068fe <HAL_RCC_OscConfig+0x356>
 80068e4:	4b61      	ldr	r3, [pc, #388]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	4a60      	ldr	r2, [pc, #384]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80068ea:	f043 0304 	orr.w	r3, r3, #4
 80068ee:	6213      	str	r3, [r2, #32]
 80068f0:	4b5e      	ldr	r3, [pc, #376]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	4a5d      	ldr	r2, [pc, #372]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80068f6:	f043 0301 	orr.w	r3, r3, #1
 80068fa:	6213      	str	r3, [r2, #32]
 80068fc:	e00b      	b.n	8006916 <HAL_RCC_OscConfig+0x36e>
 80068fe:	4b5b      	ldr	r3, [pc, #364]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	4a5a      	ldr	r2, [pc, #360]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	6213      	str	r3, [r2, #32]
 800690a:	4b58      	ldr	r3, [pc, #352]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	4a57      	ldr	r2, [pc, #348]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 8006910:	f023 0304 	bic.w	r3, r3, #4
 8006914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d015      	beq.n	800694a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800691e:	f7ff fba1 	bl	8006064 <HAL_GetTick>
 8006922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006924:	e00a      	b.n	800693c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006926:	f7ff fb9d 	bl	8006064 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006934:	4293      	cmp	r3, r2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e0b1      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800693c:	4b4b      	ldr	r3, [pc, #300]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f003 0302 	and.w	r3, r3, #2
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0ee      	beq.n	8006926 <HAL_RCC_OscConfig+0x37e>
 8006948:	e014      	b.n	8006974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800694a:	f7ff fb8b 	bl	8006064 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006950:	e00a      	b.n	8006968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006952:	f7ff fb87 	bl	8006064 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006960:	4293      	cmp	r3, r2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e09b      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006968:	4b40      	ldr	r3, [pc, #256]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1ee      	bne.n	8006952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006974:	7dfb      	ldrb	r3, [r7, #23]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d105      	bne.n	8006986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800697a:	4b3c      	ldr	r3, [pc, #240]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	4a3b      	ldr	r2, [pc, #236]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 8006980:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 8087 	beq.w	8006a9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006990:	4b36      	ldr	r3, [pc, #216]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f003 030c 	and.w	r3, r3, #12
 8006998:	2b08      	cmp	r3, #8
 800699a:	d061      	beq.n	8006a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d146      	bne.n	8006a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069a4:	4b33      	ldr	r3, [pc, #204]	@ (8006a74 <HAL_RCC_OscConfig+0x4cc>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069aa:	f7ff fb5b 	bl	8006064 <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069b0:	e008      	b.n	80069c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b2:	f7ff fb57 	bl	8006064 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e06d      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069c4:	4b29      	ldr	r3, [pc, #164]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1f0      	bne.n	80069b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069d8:	d108      	bne.n	80069ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80069da:	4b24      	ldr	r3, [pc, #144]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	4921      	ldr	r1, [pc, #132]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ec:	4b1f      	ldr	r3, [pc, #124]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a19      	ldr	r1, [r3, #32]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fc:	430b      	orrs	r3, r1
 80069fe:	491b      	ldr	r1, [pc, #108]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a04:	4b1b      	ldr	r3, [pc, #108]	@ (8006a74 <HAL_RCC_OscConfig+0x4cc>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0a:	f7ff fb2b 	bl	8006064 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a12:	f7ff fb27 	bl	8006064 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e03d      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a24:	4b11      	ldr	r3, [pc, #68]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCC_OscConfig+0x46a>
 8006a30:	e035      	b.n	8006a9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a32:	4b10      	ldr	r3, [pc, #64]	@ (8006a74 <HAL_RCC_OscConfig+0x4cc>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a38:	f7ff fb14 	bl	8006064 <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a40:	f7ff fb10 	bl	8006064 <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e026      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a52:	4b06      	ldr	r3, [pc, #24]	@ (8006a6c <HAL_RCC_OscConfig+0x4c4>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f0      	bne.n	8006a40 <HAL_RCC_OscConfig+0x498>
 8006a5e:	e01e      	b.n	8006a9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d107      	bne.n	8006a78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e019      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	40007000 	.word	0x40007000
 8006a74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a78:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <HAL_RCC_OscConfig+0x500>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d106      	bne.n	8006a9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d001      	beq.n	8006a9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40021000 	.word	0x40021000

08006aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0d0      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ac0:	4b6a      	ldr	r3, [pc, #424]	@ (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0307 	and.w	r3, r3, #7
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d910      	bls.n	8006af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ace:	4b67      	ldr	r3, [pc, #412]	@ (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f023 0207 	bic.w	r2, r3, #7
 8006ad6:	4965      	ldr	r1, [pc, #404]	@ (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ade:	4b63      	ldr	r3, [pc, #396]	@ (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d001      	beq.n	8006af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e0b8      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d020      	beq.n	8006b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b08:	4b59      	ldr	r3, [pc, #356]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	4a58      	ldr	r2, [pc, #352]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b20:	4b53      	ldr	r3, [pc, #332]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	4a52      	ldr	r2, [pc, #328]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b2c:	4b50      	ldr	r3, [pc, #320]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	494d      	ldr	r1, [pc, #308]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d040      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d107      	bne.n	8006b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b52:	4b47      	ldr	r3, [pc, #284]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d115      	bne.n	8006b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e07f      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d107      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b6a:	4b41      	ldr	r3, [pc, #260]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e073      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e06b      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b8a:	4b39      	ldr	r3, [pc, #228]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f023 0203 	bic.w	r2, r3, #3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	4936      	ldr	r1, [pc, #216]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b9c:	f7ff fa62 	bl	8006064 <HAL_GetTick>
 8006ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ba2:	e00a      	b.n	8006bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ba4:	f7ff fa5e 	bl	8006064 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e053      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bba:	4b2d      	ldr	r3, [pc, #180]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f003 020c 	and.w	r2, r3, #12
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d1eb      	bne.n	8006ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bcc:	4b27      	ldr	r3, [pc, #156]	@ (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d210      	bcs.n	8006bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bda:	4b24      	ldr	r3, [pc, #144]	@ (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f023 0207 	bic.w	r2, r3, #7
 8006be2:	4922      	ldr	r1, [pc, #136]	@ (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bea:	4b20      	ldr	r3, [pc, #128]	@ (8006c6c <HAL_RCC_ClockConfig+0x1c0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d001      	beq.n	8006bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e032      	b.n	8006c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0304 	and.w	r3, r3, #4
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d008      	beq.n	8006c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c08:	4b19      	ldr	r3, [pc, #100]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	4916      	ldr	r1, [pc, #88]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d009      	beq.n	8006c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c26:	4b12      	ldr	r3, [pc, #72]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	490e      	ldr	r1, [pc, #56]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c3a:	f000 f821 	bl	8006c80 <HAL_RCC_GetSysClockFreq>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	4b0b      	ldr	r3, [pc, #44]	@ (8006c70 <HAL_RCC_ClockConfig+0x1c4>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	091b      	lsrs	r3, r3, #4
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	490a      	ldr	r1, [pc, #40]	@ (8006c74 <HAL_RCC_ClockConfig+0x1c8>)
 8006c4c:	5ccb      	ldrb	r3, [r1, r3]
 8006c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c52:	4a09      	ldr	r2, [pc, #36]	@ (8006c78 <HAL_RCC_ClockConfig+0x1cc>)
 8006c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c56:	4b09      	ldr	r3, [pc, #36]	@ (8006c7c <HAL_RCC_ClockConfig+0x1d0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff f9c0 	bl	8005fe0 <HAL_InitTick>

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	40022000 	.word	0x40022000
 8006c70:	40021000 	.word	0x40021000
 8006c74:	08007924 	.word	0x08007924
 8006c78:	20000000 	.word	0x20000000
 8006c7c:	20000004 	.word	0x20000004

08006c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60bb      	str	r3, [r7, #8]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	617b      	str	r3, [r7, #20]
 8006c92:	2300      	movs	r3, #0
 8006c94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f003 030c 	and.w	r3, r3, #12
 8006ca6:	2b04      	cmp	r3, #4
 8006ca8:	d002      	beq.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x30>
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d003      	beq.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x36>
 8006cae:	e027      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cb0:	4b19      	ldr	r3, [pc, #100]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8006cb2:	613b      	str	r3, [r7, #16]
      break;
 8006cb4:	e027      	b.n	8006d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	0c9b      	lsrs	r3, r3, #18
 8006cba:	f003 030f 	and.w	r3, r3, #15
 8006cbe:	4a17      	ldr	r2, [pc, #92]	@ (8006d1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006cc0:	5cd3      	ldrb	r3, [r2, r3]
 8006cc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d010      	beq.n	8006cf0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006cce:	4b11      	ldr	r3, [pc, #68]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x94>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	0c5b      	lsrs	r3, r3, #17
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	4a11      	ldr	r2, [pc, #68]	@ (8006d20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006cda:	5cd3      	ldrb	r3, [r2, r3]
 8006cdc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8006ce2:	fb03 f202 	mul.w	r2, r3, r2
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	e004      	b.n	8006cfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8006d24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006cf4:	fb02 f303 	mul.w	r3, r2, r3
 8006cf8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	613b      	str	r3, [r7, #16]
      break;
 8006cfe:	e002      	b.n	8006d06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d00:	4b05      	ldr	r3, [pc, #20]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x98>)
 8006d02:	613b      	str	r3, [r7, #16]
      break;
 8006d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d06:	693b      	ldr	r3, [r7, #16]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40021000 	.word	0x40021000
 8006d18:	007a1200 	.word	0x007a1200
 8006d1c:	08007934 	.word	0x08007934
 8006d20:	08007944 	.word	0x08007944
 8006d24:	003d0900 	.word	0x003d0900

08006d28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006d30:	4b0a      	ldr	r3, [pc, #40]	@ (8006d5c <RCC_Delay+0x34>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a0a      	ldr	r2, [pc, #40]	@ (8006d60 <RCC_Delay+0x38>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	0a5b      	lsrs	r3, r3, #9
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	fb02 f303 	mul.w	r3, r2, r3
 8006d42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006d44:	bf00      	nop
  }
  while (Delay --);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1e5a      	subs	r2, r3, #1
 8006d4a:	60fa      	str	r2, [r7, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f9      	bne.n	8006d44 <RCC_Delay+0x1c>
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr
 8006d5c:	20000000 	.word	0x20000000
 8006d60:	10624dd3 	.word	0x10624dd3

08006d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e076      	b.n	8006e64 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d108      	bne.n	8006d90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d86:	d009      	beq.n	8006d9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	61da      	str	r2, [r3, #28]
 8006d8e:	e005      	b.n	8006d9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff f828 	bl	8005e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e20:	ea42 0103 	orr.w	r1, r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	0c1a      	lsrs	r2, r3, #16
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f002 0204 	and.w	r2, r2, #4
 8006e42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	69da      	ldr	r2, [r3, #28]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e7c:	f7ff f8f2 	bl	8006064 <HAL_GetTick>
 8006e80:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006e82:	88fb      	ldrh	r3, [r7, #6]
 8006e84:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d001      	beq.n	8006e96 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006e92:	2302      	movs	r3, #2
 8006e94:	e12a      	b.n	80070ec <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <HAL_SPI_Transmit+0x36>
 8006e9c:	88fb      	ldrh	r3, [r7, #6]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e122      	b.n	80070ec <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d101      	bne.n	8006eb4 <HAL_SPI_Transmit+0x48>
 8006eb0:	2302      	movs	r3, #2
 8006eb2:	e11b      	b.n	80070ec <HAL_SPI_Transmit+0x280>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2203      	movs	r2, #3
 8006ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	88fa      	ldrh	r2, [r7, #6]
 8006ed4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	88fa      	ldrh	r2, [r7, #6]
 8006eda:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f02:	d10f      	bne.n	8006f24 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f2e:	2b40      	cmp	r3, #64	@ 0x40
 8006f30:	d007      	beq.n	8006f42 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f4a:	d152      	bne.n	8006ff2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <HAL_SPI_Transmit+0xee>
 8006f54:	8b7b      	ldrh	r3, [r7, #26]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d145      	bne.n	8006fe6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5e:	881a      	ldrh	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6a:	1c9a      	adds	r2, r3, #2
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f7e:	e032      	b.n	8006fe6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d112      	bne.n	8006fb4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f92:	881a      	ldrh	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f9e:	1c9a      	adds	r2, r3, #2
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006fb2:	e018      	b.n	8006fe6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb4:	f7ff f856 	bl	8006064 <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d803      	bhi.n	8006fcc <HAL_SPI_Transmit+0x160>
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d102      	bne.n	8006fd2 <HAL_SPI_Transmit+0x166>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d109      	bne.n	8006fe6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e082      	b.n	80070ec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1c7      	bne.n	8006f80 <HAL_SPI_Transmit+0x114>
 8006ff0:	e053      	b.n	800709a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <HAL_SPI_Transmit+0x194>
 8006ffa:	8b7b      	ldrh	r3, [r7, #26]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d147      	bne.n	8007090 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007012:	1c5a      	adds	r2, r3, #1
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007026:	e033      	b.n	8007090 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b02      	cmp	r3, #2
 8007034:	d113      	bne.n	800705e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	330c      	adds	r3, #12
 8007040:	7812      	ldrb	r2, [r2, #0]
 8007042:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007048:	1c5a      	adds	r2, r3, #1
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800705c:	e018      	b.n	8007090 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800705e:	f7ff f801 	bl	8006064 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d803      	bhi.n	8007076 <HAL_SPI_Transmit+0x20a>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d102      	bne.n	800707c <HAL_SPI_Transmit+0x210>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d109      	bne.n	8007090 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e02d      	b.n	80070ec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1c6      	bne.n	8007028 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 fbc4 	bl	800782c <SPI_EndRxTxTransaction>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2220      	movs	r2, #32
 80070ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10a      	bne.n	80070ce <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80070ea:	2300      	movs	r3, #0
  }
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3720      	adds	r7, #32
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b088      	sub	sp, #32
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	4613      	mov	r3, r2
 8007102:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b01      	cmp	r3, #1
 800710e:	d001      	beq.n	8007114 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007110:	2302      	movs	r3, #2
 8007112:	e104      	b.n	800731e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800711c:	d112      	bne.n	8007144 <HAL_SPI_Receive+0x50>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10e      	bne.n	8007144 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2204      	movs	r2, #4
 800712a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800712e:	88fa      	ldrh	r2, [r7, #6]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	4613      	mov	r3, r2
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 f8f3 	bl	8007326 <HAL_SPI_TransmitReceive>
 8007140:	4603      	mov	r3, r0
 8007142:	e0ec      	b.n	800731e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007144:	f7fe ff8e 	bl	8006064 <HAL_GetTick>
 8007148:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <HAL_SPI_Receive+0x62>
 8007150:	88fb      	ldrh	r3, [r7, #6]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e0e1      	b.n	800731e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007160:	2b01      	cmp	r3, #1
 8007162:	d101      	bne.n	8007168 <HAL_SPI_Receive+0x74>
 8007164:	2302      	movs	r3, #2
 8007166:	e0da      	b.n	800731e <HAL_SPI_Receive+0x22a>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2204      	movs	r2, #4
 8007174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	88fa      	ldrh	r2, [r7, #6]
 8007188:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	88fa      	ldrh	r2, [r7, #6]
 800718e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071b6:	d10f      	bne.n	80071d8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80071d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e2:	2b40      	cmp	r3, #64	@ 0x40
 80071e4:	d007      	beq.n	80071f6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d170      	bne.n	80072e0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071fe:	e035      	b.n	800726c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b01      	cmp	r3, #1
 800720c:	d115      	bne.n	800723a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f103 020c 	add.w	r2, r3, #12
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721a:	7812      	ldrb	r2, [r2, #0]
 800721c:	b2d2      	uxtb	r2, r2
 800721e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800722e:	b29b      	uxth	r3, r3
 8007230:	3b01      	subs	r3, #1
 8007232:	b29a      	uxth	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007238:	e018      	b.n	800726c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800723a:	f7fe ff13 	bl	8006064 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d803      	bhi.n	8007252 <HAL_SPI_Receive+0x15e>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d102      	bne.n	8007258 <HAL_SPI_Receive+0x164>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d109      	bne.n	800726c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e058      	b.n	800731e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007270:	b29b      	uxth	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1c4      	bne.n	8007200 <HAL_SPI_Receive+0x10c>
 8007276:	e038      	b.n	80072ea <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b01      	cmp	r3, #1
 8007284:	d113      	bne.n	80072ae <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68da      	ldr	r2, [r3, #12]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007290:	b292      	uxth	r2, r2
 8007292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007298:	1c9a      	adds	r2, r3, #2
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	3b01      	subs	r3, #1
 80072a6:	b29a      	uxth	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072ac:	e018      	b.n	80072e0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072ae:	f7fe fed9 	bl	8006064 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d803      	bhi.n	80072c6 <HAL_SPI_Receive+0x1d2>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d102      	bne.n	80072cc <HAL_SPI_Receive+0x1d8>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d109      	bne.n	80072e0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e01e      	b.n	800731e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1c6      	bne.n	8007278 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fa4a 	bl	8007788 <SPI_EndRxTransaction>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e000      	b.n	800731e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800731c:	2300      	movs	r3, #0
  }
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b08a      	sub	sp, #40	@ 0x28
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
 8007332:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007334:	2301      	movs	r3, #1
 8007336:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007338:	f7fe fe94 	bl	8006064 <HAL_GetTick>
 800733c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007344:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800734c:	887b      	ldrh	r3, [r7, #2]
 800734e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007350:	7ffb      	ldrb	r3, [r7, #31]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d00c      	beq.n	8007370 <HAL_SPI_TransmitReceive+0x4a>
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800735c:	d106      	bne.n	800736c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <HAL_SPI_TransmitReceive+0x46>
 8007366:	7ffb      	ldrb	r3, [r7, #31]
 8007368:	2b04      	cmp	r3, #4
 800736a:	d001      	beq.n	8007370 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800736c:	2302      	movs	r3, #2
 800736e:	e17f      	b.n	8007670 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d005      	beq.n	8007382 <HAL_SPI_TransmitReceive+0x5c>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_SPI_TransmitReceive+0x5c>
 800737c:	887b      	ldrh	r3, [r7, #2]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e174      	b.n	8007670 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_SPI_TransmitReceive+0x6e>
 8007390:	2302      	movs	r3, #2
 8007392:	e16d      	b.n	8007670 <HAL_SPI_TransmitReceive+0x34a>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b04      	cmp	r3, #4
 80073a6:	d003      	beq.n	80073b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2205      	movs	r2, #5
 80073ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	887a      	ldrh	r2, [r7, #2]
 80073c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	887a      	ldrh	r2, [r7, #2]
 80073c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	887a      	ldrh	r2, [r7, #2]
 80073d2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	887a      	ldrh	r2, [r7, #2]
 80073d8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073f0:	2b40      	cmp	r3, #64	@ 0x40
 80073f2:	d007      	beq.n	8007404 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007402:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800740c:	d17e      	bne.n	800750c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <HAL_SPI_TransmitReceive+0xf6>
 8007416:	8afb      	ldrh	r3, [r7, #22]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d16c      	bne.n	80074f6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007420:	881a      	ldrh	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742c:	1c9a      	adds	r2, r3, #2
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007436:	b29b      	uxth	r3, r3
 8007438:	3b01      	subs	r3, #1
 800743a:	b29a      	uxth	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007440:	e059      	b.n	80074f6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b02      	cmp	r3, #2
 800744e:	d11b      	bne.n	8007488 <HAL_SPI_TransmitReceive+0x162>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007454:	b29b      	uxth	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d016      	beq.n	8007488 <HAL_SPI_TransmitReceive+0x162>
 800745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745c:	2b01      	cmp	r3, #1
 800745e:	d113      	bne.n	8007488 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007464:	881a      	ldrh	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007470:	1c9a      	adds	r2, r3, #2
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800747a:	b29b      	uxth	r3, r3
 800747c:	3b01      	subs	r3, #1
 800747e:	b29a      	uxth	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b01      	cmp	r3, #1
 8007494:	d119      	bne.n	80074ca <HAL_SPI_TransmitReceive+0x1a4>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800749a:	b29b      	uxth	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	d014      	beq.n	80074ca <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68da      	ldr	r2, [r3, #12]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074aa:	b292      	uxth	r2, r2
 80074ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b2:	1c9a      	adds	r2, r3, #2
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074c6:	2301      	movs	r3, #1
 80074c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074ca:	f7fe fdcb 	bl	8006064 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d80d      	bhi.n	80074f6 <HAL_SPI_TransmitReceive+0x1d0>
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e0:	d009      	beq.n	80074f6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e0bc      	b.n	8007670 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1a0      	bne.n	8007442 <HAL_SPI_TransmitReceive+0x11c>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d19b      	bne.n	8007442 <HAL_SPI_TransmitReceive+0x11c>
 800750a:	e082      	b.n	8007612 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <HAL_SPI_TransmitReceive+0x1f4>
 8007514:	8afb      	ldrh	r3, [r7, #22]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d171      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	330c      	adds	r3, #12
 8007524:	7812      	ldrb	r2, [r2, #0]
 8007526:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007536:	b29b      	uxth	r3, r3
 8007538:	3b01      	subs	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007540:	e05d      	b.n	80075fe <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b02      	cmp	r3, #2
 800754e:	d11c      	bne.n	800758a <HAL_SPI_TransmitReceive+0x264>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d017      	beq.n	800758a <HAL_SPI_TransmitReceive+0x264>
 800755a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755c:	2b01      	cmp	r3, #1
 800755e:	d114      	bne.n	800758a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	330c      	adds	r3, #12
 800756a:	7812      	ldrb	r2, [r2, #0]
 800756c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b01      	cmp	r3, #1
 8007596:	d119      	bne.n	80075cc <HAL_SPI_TransmitReceive+0x2a6>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d014      	beq.n	80075cc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075c8:	2301      	movs	r3, #1
 80075ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075cc:	f7fe fd4a 	bl	8006064 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075d8:	429a      	cmp	r2, r3
 80075da:	d803      	bhi.n	80075e4 <HAL_SPI_TransmitReceive+0x2be>
 80075dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e2:	d102      	bne.n	80075ea <HAL_SPI_TransmitReceive+0x2c4>
 80075e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e038      	b.n	8007670 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d19c      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x21c>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d197      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007612:	6a3a      	ldr	r2, [r7, #32]
 8007614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 f908 	bl	800782c <SPI_EndRxTxTransaction>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d008      	beq.n	8007634 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2220      	movs	r2, #32
 8007626:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e01d      	b.n	8007670 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800763c:	2300      	movs	r3, #0
 800763e:	613b      	str	r3, [r7, #16]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e000      	b.n	8007670 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800766e:	2300      	movs	r3, #0
  }
}
 8007670:	4618      	mov	r0, r3
 8007672:	3728      	adds	r7, #40	@ 0x28
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	4613      	mov	r3, r2
 8007686:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007688:	f7fe fcec 	bl	8006064 <HAL_GetTick>
 800768c:	4602      	mov	r2, r0
 800768e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007690:	1a9b      	subs	r3, r3, r2
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	4413      	add	r3, r2
 8007696:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007698:	f7fe fce4 	bl	8006064 <HAL_GetTick>
 800769c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800769e:	4b39      	ldr	r3, [pc, #228]	@ (8007784 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	015b      	lsls	r3, r3, #5
 80076a4:	0d1b      	lsrs	r3, r3, #20
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	fb02 f303 	mul.w	r3, r2, r3
 80076ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ae:	e054      	b.n	800775a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d050      	beq.n	800775a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076b8:	f7fe fcd4 	bl	8006064 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	69fa      	ldr	r2, [r7, #28]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d902      	bls.n	80076ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d13d      	bne.n	800774a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076e6:	d111      	bne.n	800770c <SPI_WaitFlagStateUntilTimeout+0x94>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076f0:	d004      	beq.n	80076fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076fa:	d107      	bne.n	800770c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800770a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007710:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007714:	d10f      	bne.n	8007736 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007734:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e017      	b.n	800777a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007750:	2300      	movs	r3, #0
 8007752:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	3b01      	subs	r3, #1
 8007758:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	4013      	ands	r3, r2
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	429a      	cmp	r2, r3
 8007768:	bf0c      	ite	eq
 800776a:	2301      	moveq	r3, #1
 800776c:	2300      	movne	r3, #0
 800776e:	b2db      	uxtb	r3, r3
 8007770:	461a      	mov	r2, r3
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	429a      	cmp	r2, r3
 8007776:	d19b      	bne.n	80076b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3720      	adds	r7, #32
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20000000 	.word	0x20000000

08007788 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af02      	add	r7, sp, #8
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800779c:	d111      	bne.n	80077c2 <SPI_EndRxTransaction+0x3a>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077a6:	d004      	beq.n	80077b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077b0:	d107      	bne.n	80077c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077c0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077ca:	d117      	bne.n	80077fc <SPI_EndRxTransaction+0x74>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077d4:	d112      	bne.n	80077fc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2200      	movs	r2, #0
 80077de:	2101      	movs	r1, #1
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f7ff ff49 	bl	8007678 <SPI_WaitFlagStateUntilTimeout>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01a      	beq.n	8007822 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f0:	f043 0220 	orr.w	r2, r3, #32
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e013      	b.n	8007824 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2200      	movs	r2, #0
 8007804:	2180      	movs	r1, #128	@ 0x80
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f7ff ff36 	bl	8007678 <SPI_WaitFlagStateUntilTimeout>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007816:	f043 0220 	orr.w	r2, r3, #32
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e000      	b.n	8007824 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b086      	sub	sp, #24
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2201      	movs	r2, #1
 8007840:	2102      	movs	r1, #2
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f7ff ff18 	bl	8007678 <SPI_WaitFlagStateUntilTimeout>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d007      	beq.n	800785e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007852:	f043 0220 	orr.w	r2, r3, #32
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e013      	b.n	8007886 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2200      	movs	r2, #0
 8007866:	2180      	movs	r1, #128	@ 0x80
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f7ff ff05 	bl	8007678 <SPI_WaitFlagStateUntilTimeout>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007878:	f043 0220 	orr.w	r2, r3, #32
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e000      	b.n	8007886 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <memset>:
 800788e:	4603      	mov	r3, r0
 8007890:	4402      	add	r2, r0
 8007892:	4293      	cmp	r3, r2
 8007894:	d100      	bne.n	8007898 <memset+0xa>
 8007896:	4770      	bx	lr
 8007898:	f803 1b01 	strb.w	r1, [r3], #1
 800789c:	e7f9      	b.n	8007892 <memset+0x4>
	...

080078a0 <__libc_init_array>:
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	2600      	movs	r6, #0
 80078a4:	4d0c      	ldr	r5, [pc, #48]	@ (80078d8 <__libc_init_array+0x38>)
 80078a6:	4c0d      	ldr	r4, [pc, #52]	@ (80078dc <__libc_init_array+0x3c>)
 80078a8:	1b64      	subs	r4, r4, r5
 80078aa:	10a4      	asrs	r4, r4, #2
 80078ac:	42a6      	cmp	r6, r4
 80078ae:	d109      	bne.n	80078c4 <__libc_init_array+0x24>
 80078b0:	f000 f81a 	bl	80078e8 <_init>
 80078b4:	2600      	movs	r6, #0
 80078b6:	4d0a      	ldr	r5, [pc, #40]	@ (80078e0 <__libc_init_array+0x40>)
 80078b8:	4c0a      	ldr	r4, [pc, #40]	@ (80078e4 <__libc_init_array+0x44>)
 80078ba:	1b64      	subs	r4, r4, r5
 80078bc:	10a4      	asrs	r4, r4, #2
 80078be:	42a6      	cmp	r6, r4
 80078c0:	d105      	bne.n	80078ce <__libc_init_array+0x2e>
 80078c2:	bd70      	pop	{r4, r5, r6, pc}
 80078c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c8:	4798      	blx	r3
 80078ca:	3601      	adds	r6, #1
 80078cc:	e7ee      	b.n	80078ac <__libc_init_array+0xc>
 80078ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80078d2:	4798      	blx	r3
 80078d4:	3601      	adds	r6, #1
 80078d6:	e7f2      	b.n	80078be <__libc_init_array+0x1e>
 80078d8:	08007948 	.word	0x08007948
 80078dc:	08007948 	.word	0x08007948
 80078e0:	08007948 	.word	0x08007948
 80078e4:	0800794c 	.word	0x0800794c

080078e8 <_init>:
 80078e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ea:	bf00      	nop
 80078ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ee:	bc08      	pop	{r3}
 80078f0:	469e      	mov	lr, r3
 80078f2:	4770      	bx	lr

080078f4 <_fini>:
 80078f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f6:	bf00      	nop
 80078f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078fa:	bc08      	pop	{r3}
 80078fc:	469e      	mov	lr, r3
 80078fe:	4770      	bx	lr
