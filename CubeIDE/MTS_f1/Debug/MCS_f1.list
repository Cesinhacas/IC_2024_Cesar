
MCS_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b70  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cc8  08005cc8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005cc8  08005cc8  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cc8  08005cc8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cc8  08005cc8  00006cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ccc  08005ccc  00006ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005cd0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004660  2000000c  08005cdc  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000466c  08005cdc  0000766c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005354  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a9  00000000  00000000  0000c389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0000d938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000470  00000000  00000000  0000df48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171c2  00000000  00000000  0000e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c38  00000000  00000000  0002557a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ac0  00000000  00000000  0002f1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0c72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018ac  00000000  00000000  000b0cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b2564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c68 	.word	0x08005c68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08005c68 	.word	0x08005c68

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <inverter_matriz>:
#include "calib.h"

extern float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f66:	e02a      	b.n	8000fbe <inverter_matriz+0x66>
        for (int j = 0; j < N; j++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
 8000f6c:	e021      	b.n	8000fb2 <inverter_matriz+0x5a>
            if (i == j) {
 8000f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d10d      	bne.n	8000f92 <inverter_matriz+0x3a>
                inversa[i][j] = 1;
 8000f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	461a      	mov	r2, r3
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	6a3a      	ldr	r2, [r7, #32]
 8000f88:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f90:	e00c      	b.n	8000fac <inverter_matriz+0x54>
            } else {
                inversa[i][j] = 0;
 8000f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	6a3a      	ldr	r2, [r7, #32]
 8000fa4:	f04f 0100 	mov.w	r1, #0
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < N; j++) {
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	623b      	str	r3, [r7, #32]
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	ddda      	ble.n	8000f6e <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fba:	3301      	adds	r3, #1
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	ddd1      	ble.n	8000f68 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	e0c7      	b.n	800115a <inverter_matriz+0x202>
    {
        float pivot = matriz[i][i];
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	e038      	b.n	800105a <inverter_matriz+0x102>
        {
            matriz[i][j] /= pivot;
 8000fe8:	69fa      	ldr	r2, [r7, #28]
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	4613      	mov	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	461a      	mov	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	189c      	adds	r4, r3, r2
 800100e:	68f9      	ldr	r1, [r7, #12]
 8001010:	f7ff ff06 	bl	8000e20 <__aeabi_fdiv>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
            inversa[i][j] /= pivot;
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	461a      	mov	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	461a      	mov	r2, r3
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	189c      	adds	r4, r3, r2
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	f7ff feeb 	bl	8000e20 <__aeabi_fdiv>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        for (int j = 0; j < N; j++)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	3301      	adds	r3, #1
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2b08      	cmp	r3, #8
 800105e:	ddc3      	ble.n	8000fe8 <inverter_matriz+0x90>
        }

        for (int k = 0; k < N; k++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e073      	b.n	800114e <inverter_matriz+0x1f6>
        {
            if (k != i)
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	429a      	cmp	r2, r3
 800106c:	d06c      	beq.n	8001148 <inverter_matriz+0x1f0>
            {
                float fator = matriz[k][i];
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	461a      	mov	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	e05a      	b.n	8001142 <inverter_matriz+0x1ea>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fdfc 	bl	8000cb8 <__aeabi_fmul>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4619      	mov	r1, r3
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	189c      	adds	r4, r3, r2
 80010d4:	4628      	mov	r0, r5
 80010d6:	f7ff fce5 	bl	8000aa4 <__aeabi_fsub>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    inversa[k][j] -= fator * inversa[i][j];
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	461a      	mov	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	461a      	mov	r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fdd0 	bl	8000cb8 <__aeabi_fmul>
 8001118:	4603      	mov	r3, r0
 800111a:	4619      	mov	r1, r3
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	461a      	mov	r2, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	189c      	adds	r4, r3, r2
 800112c:	4628      	mov	r0, r5
 800112e:	f7ff fcb9 	bl	8000aa4 <__aeabi_fsub>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                for (int j = 0; j < N; j++)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	3301      	adds	r3, #1
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	2b08      	cmp	r3, #8
 8001146:	dda1      	ble.n	800108c <inverter_matriz+0x134>
        for (int k = 0; k < N; k++)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2b08      	cmp	r3, #8
 8001152:	dd88      	ble.n	8001066 <inverter_matriz+0x10e>
    for (int i = 0; i < N; i++)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	3301      	adds	r3, #1
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	2b08      	cmp	r3, #8
 800115e:	f77f af34 	ble.w	8000fca <inverter_matriz+0x72>
                }
            }
        }
    }
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	@ 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bdb0      	pop	{r4, r5, r7, pc}
 800116c:	0000      	movs	r0, r0
	...

08001170 <NLLS>:


uint8_t NLLS(float *mx, float *my, float *mz, float *p)
{
 8001170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001174:	b0af      	sub	sp, #188	@ 0xbc
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	603b      	str	r3, [r7, #0]
	uint8_t passo = 0, loop = 1;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
 8001186:	2301      	movs	r3, #1
 8001188:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
	float sf = 1;
 800118c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001190:	657b      	str	r3, [r7, #84]	@ 0x54
	float p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J;
 8001192:	4b63      	ldr	r3, [pc, #396]	@ (8001320 <NLLS+0x1b0>)
 8001194:	f107 0414 	add.w	r4, r7, #20
 8001198:	461d      	mov	r5, r3
 800119a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	682b      	ldr	r3, [r5, #0]
 80011a4:	6023      	str	r3, [r4, #0]
	float sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
	//float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam], Be[tam], e[tam], f[tam], mat_H[N][tam];

	for (int i=0; i < tam; i++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80011ac:	e00a      	b.n	80011c4 <NLLS+0x54>
	{
		Be[i] = 1*sf;
 80011ae:	495d      	ldr	r1, [pc, #372]	@ (8001324 <NLLS+0x1b4>)
 80011b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i < tam; i++)
 80011ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011be:	3301      	adds	r3, #1
 80011c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80011c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011c8:	2b9e      	cmp	r3, #158	@ 0x9e
 80011ca:	ddf0      	ble.n	80011ae <NLLS+0x3e>
	}

	while(loop == 1)
 80011cc:	f002 bdd4 	b.w	8003d78 <NLLS+0x2c08>
	{
		sx = p0[0];
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		sy = p0[1];
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		sz = p0[2];
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		bx = p0[3];
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		by = p0[4];
 80011e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		bz = p0[5];
 80011ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		rho = p0[6];
 80011f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		phi = p0[7];
 80011fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		lambida = p0[8];
 8001200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001202:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

		sin_phi = phi - (phi*phi*phi)/6;// + (phi*phi*phi*phi*phi)/120;
 8001206:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800120a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800120e:	f7ff fd53 	bl	8000cb8 <__aeabi_fmul>
 8001212:	4603      	mov	r3, r0
 8001214:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd4d 	bl	8000cb8 <__aeabi_fmul>
 800121e:	4603      	mov	r3, r0
 8001220:	4941      	ldr	r1, [pc, #260]	@ (8001328 <NLLS+0x1b8>)
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fdfc 	bl	8000e20 <__aeabi_fdiv>
 8001228:	4603      	mov	r3, r0
 800122a:	4619      	mov	r1, r3
 800122c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001230:	f7ff fc38 	bl	8000aa4 <__aeabi_fsub>
 8001234:	4603      	mov	r3, r0
 8001236:	653b      	str	r3, [r7, #80]	@ 0x50
		sin_rho = rho - (rho*rho*rho)/6;// + (rho*rho*rho*rho*rho)/120;
 8001238:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800123c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8001240:	f7ff fd3a 	bl	8000cb8 <__aeabi_fmul>
 8001244:	4603      	mov	r3, r0
 8001246:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fd34 	bl	8000cb8 <__aeabi_fmul>
 8001250:	4603      	mov	r3, r0
 8001252:	4935      	ldr	r1, [pc, #212]	@ (8001328 <NLLS+0x1b8>)
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fde3 	bl	8000e20 <__aeabi_fdiv>
 800125a:	4603      	mov	r3, r0
 800125c:	4619      	mov	r1, r3
 800125e:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8001262:	f7ff fc1f 	bl	8000aa4 <__aeabi_fsub>
 8001266:	4603      	mov	r3, r0
 8001268:	64fb      	str	r3, [r7, #76]	@ 0x4c
		sin_lambda = lambida - (lambida*lambida*lambida)/6;// + (lambida*lambida*lambida*lambida*lambida)/120;
 800126a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800126e:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001272:	f7ff fd21 	bl	8000cb8 <__aeabi_fmul>
 8001276:	4603      	mov	r3, r0
 8001278:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fd1b 	bl	8000cb8 <__aeabi_fmul>
 8001282:	4603      	mov	r3, r0
 8001284:	4928      	ldr	r1, [pc, #160]	@ (8001328 <NLLS+0x1b8>)
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fdca 	bl	8000e20 <__aeabi_fdiv>
 800128c:	4603      	mov	r3, r0
 800128e:	4619      	mov	r1, r3
 8001290:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8001294:	f7ff fc06 	bl	8000aa4 <__aeabi_fsub>
 8001298:	4603      	mov	r3, r0
 800129a:	64bb      	str	r3, [r7, #72]	@ 0x48
		cos_phi = 1 - (phi*phi)/2;// + (phi*phi*phi*phi)/24;
 800129c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80012a0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80012a4:	f7ff fd08 	bl	8000cb8 <__aeabi_fmul>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fdb6 	bl	8000e20 <__aeabi_fdiv>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80012bc:	f7ff fbf2 	bl	8000aa4 <__aeabi_fsub>
 80012c0:	4603      	mov	r3, r0
 80012c2:	647b      	str	r3, [r7, #68]	@ 0x44
		cos_rho = 1 - (rho*rho)/2;// + (rho*rho*rho*rho)/24;
 80012c4:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80012c8:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80012cc:	f7ff fcf4 	bl	8000cb8 <__aeabi_fmul>
 80012d0:	4603      	mov	r3, r0
 80012d2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fda2 	bl	8000e20 <__aeabi_fdiv>
 80012dc:	4603      	mov	r3, r0
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80012e4:	f7ff fbde 	bl	8000aa4 <__aeabi_fsub>
 80012e8:	4603      	mov	r3, r0
 80012ea:	643b      	str	r3, [r7, #64]	@ 0x40
		cos_lambda = 1 - (lambida*lambida)/2;// + (lambida*lambida*lambida*lambida)/24;
 80012ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80012f0:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80012f4:	f7ff fce0 	bl	8000cb8 <__aeabi_fmul>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fd8e 	bl	8000e20 <__aeabi_fdiv>
 8001304:	4603      	mov	r3, r0
 8001306:	4619      	mov	r1, r3
 8001308:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800130c:	f7ff fbca 	bl	8000aa4 <__aeabi_fsub>
 8001310:	4603      	mov	r3, r0
 8001312:	63fb      	str	r3, [r7, #60]	@ 0x3c

		for(int i=0; i < tam; i++)
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800131a:	f002 bb94 	b.w	8003a46 <NLLS+0x28d6>
 800131e:	bf00      	nop
 8001320:	08005c80 	.word	0x08005c80
 8001324:	20002818 	.word	0x20002818
 8001328:	40c00000 	.word	0x40c00000
		{
			f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 800132c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fbb1 	bl	8000aa4 <__aeabi_fsub>
 8001342:	4603      	mov	r3, r0
 8001344:	461c      	mov	r4, r3
 8001346:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4413      	add	r3, r2
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fba4 	bl	8000aa4 <__aeabi_fsub>
 800135c:	4603      	mov	r3, r0
 800135e:	4619      	mov	r1, r3
 8001360:	4620      	mov	r0, r4
 8001362:	f7ff fca9 	bl	8000cb8 <__aeabi_fmul>
 8001366:	4603      	mov	r3, r0
 8001368:	461c      	mov	r4, r3
 800136a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800136e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001372:	f7ff fca1 	bl	8000cb8 <__aeabi_fmul>
 8001376:	4603      	mov	r3, r0
 8001378:	4619      	mov	r1, r3
 800137a:	4620      	mov	r0, r4
 800137c:	f7ff fd50 	bl	8000e20 <__aeabi_fdiv>
 8001380:	4603      	mov	r3, r0
 8001382:	461c      	mov	r4, r3
 8001384:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fb85 	bl	8000aa4 <__aeabi_fsub>
 800139a:	4603      	mov	r3, r0
 800139c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fc89 	bl	8000cb8 <__aeabi_fmul>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461d      	mov	r5, r3
 80013aa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80013ac:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80013b0:	f7ff fc82 	bl	8000cb8 <__aeabi_fmul>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461e      	mov	r6, r3
 80013b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fb6b 	bl	8000aa4 <__aeabi_fsub>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4619      	mov	r1, r3
 80013d2:	4630      	mov	r0, r6
 80013d4:	f7ff fc70 	bl	8000cb8 <__aeabi_fmul>
 80013d8:	4603      	mov	r3, r0
 80013da:	4619      	mov	r1, r3
 80013dc:	4628      	mov	r0, r5
 80013de:	f7ff fb61 	bl	8000aa4 <__aeabi_fsub>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461d      	mov	r5, r3
 80013e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	4413      	add	r3, r2
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fb54 	bl	8000aa4 <__aeabi_fsub>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fc58 	bl	8000cb8 <__aeabi_fmul>
 8001408:	4603      	mov	r3, r0
 800140a:	461e      	mov	r6, r3
 800140c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800140e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001412:	f7ff fc51 	bl	8000cb8 <__aeabi_fmul>
 8001416:	4603      	mov	r3, r0
 8001418:	4698      	mov	r8, r3
 800141a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4413      	add	r3, r2
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fb3a 	bl	8000aa4 <__aeabi_fsub>
 8001430:	4603      	mov	r3, r0
 8001432:	4619      	mov	r1, r3
 8001434:	4640      	mov	r0, r8
 8001436:	f7ff fc3f 	bl	8000cb8 <__aeabi_fmul>
 800143a:	4603      	mov	r3, r0
 800143c:	4619      	mov	r1, r3
 800143e:	4630      	mov	r0, r6
 8001440:	f7ff fb30 	bl	8000aa4 <__aeabi_fsub>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	4628      	mov	r0, r5
 800144a:	f7ff fc35 	bl	8000cb8 <__aeabi_fmul>
 800144e:	4603      	mov	r3, r0
 8001450:	461d      	mov	r5, r3
 8001452:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001456:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800145a:	f7ff fc2d 	bl	8000cb8 <__aeabi_fmul>
 800145e:	4603      	mov	r3, r0
 8001460:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fc28 	bl	8000cb8 <__aeabi_fmul>
 8001468:	4603      	mov	r3, r0
 800146a:	461e      	mov	r6, r3
 800146c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001470:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001474:	f7ff fc20 	bl	8000cb8 <__aeabi_fmul>
 8001478:	4603      	mov	r3, r0
 800147a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fc1b 	bl	8000cb8 <__aeabi_fmul>
 8001482:	4603      	mov	r3, r0
 8001484:	4619      	mov	r1, r3
 8001486:	4630      	mov	r0, r6
 8001488:	f7ff fc16 	bl	8000cb8 <__aeabi_fmul>
 800148c:	4603      	mov	r3, r0
 800148e:	4619      	mov	r1, r3
 8001490:	4628      	mov	r0, r5
 8001492:	f7ff fcc5 	bl	8000e20 <__aeabi_fdiv>
 8001496:	4603      	mov	r3, r0
 8001498:	4619      	mov	r1, r3
 800149a:	4620      	mov	r0, r4
 800149c:	f7ff fb04 	bl	8000aa8 <__addsf3>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461c      	mov	r4, r3
 80014a4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80014a8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80014ac:	f7ff fc04 	bl	8000cb8 <__aeabi_fmul>
 80014b0:	4603      	mov	r3, r0
 80014b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fbff 	bl	8000cb8 <__aeabi_fmul>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461d      	mov	r5, r3
 80014be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fae8 	bl	8000aa4 <__aeabi_fsub>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4619      	mov	r1, r3
 80014d8:	4628      	mov	r0, r5
 80014da:	f7ff fbed 	bl	8000cb8 <__aeabi_fmul>
 80014de:	4603      	mov	r3, r0
 80014e0:	461d      	mov	r5, r3
 80014e2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80014e6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80014ea:	f7ff fbe5 	bl	8000cb8 <__aeabi_fmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fbe0 	bl	8000cb8 <__aeabi_fmul>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461e      	mov	r6, r3
 80014fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	4413      	add	r3, r2
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fac9 	bl	8000aa4 <__aeabi_fsub>
 8001512:	4603      	mov	r3, r0
 8001514:	4619      	mov	r1, r3
 8001516:	4630      	mov	r0, r6
 8001518:	f7ff fbce 	bl	8000cb8 <__aeabi_fmul>
 800151c:	4603      	mov	r3, r0
 800151e:	4619      	mov	r1, r3
 8001520:	4628      	mov	r0, r5
 8001522:	f7ff fabf 	bl	8000aa4 <__aeabi_fsub>
 8001526:	4603      	mov	r3, r0
 8001528:	461d      	mov	r5, r3
 800152a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800152e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001532:	f7ff fbc1 	bl	8000cb8 <__aeabi_fmul>
 8001536:	4603      	mov	r3, r0
 8001538:	461e      	mov	r6, r3
 800153a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800153c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800153e:	f7ff fbbb 	bl	8000cb8 <__aeabi_fmul>
 8001542:	4603      	mov	r3, r0
 8001544:	4698      	mov	r8, r3
 8001546:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001548:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800154a:	f7ff fbb5 	bl	8000cb8 <__aeabi_fmul>
 800154e:	4603      	mov	r3, r0
 8001550:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fbb0 	bl	8000cb8 <__aeabi_fmul>
 8001558:	4603      	mov	r3, r0
 800155a:	4619      	mov	r1, r3
 800155c:	4640      	mov	r0, r8
 800155e:	f7ff faa1 	bl	8000aa4 <__aeabi_fsub>
 8001562:	4603      	mov	r3, r0
 8001564:	4619      	mov	r1, r3
 8001566:	4630      	mov	r0, r6
 8001568:	f7ff fba6 	bl	8000cb8 <__aeabi_fmul>
 800156c:	4603      	mov	r3, r0
 800156e:	461e      	mov	r6, r3
 8001570:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fa8f 	bl	8000aa4 <__aeabi_fsub>
 8001586:	4603      	mov	r3, r0
 8001588:	4619      	mov	r1, r3
 800158a:	4630      	mov	r0, r6
 800158c:	f7ff fb94 	bl	8000cb8 <__aeabi_fmul>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	4628      	mov	r0, r5
 8001596:	f7ff fa87 	bl	8000aa8 <__addsf3>
 800159a:	4603      	mov	r3, r0
 800159c:	461d      	mov	r5, r3
 800159e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80015a2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80015a6:	f7ff fb87 	bl	8000cb8 <__aeabi_fmul>
 80015aa:	4603      	mov	r3, r0
 80015ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fb82 	bl	8000cb8 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461e      	mov	r6, r3
 80015b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fa6b 	bl	8000aa4 <__aeabi_fsub>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4619      	mov	r1, r3
 80015d2:	4630      	mov	r0, r6
 80015d4:	f7ff fb70 	bl	8000cb8 <__aeabi_fmul>
 80015d8:	4603      	mov	r3, r0
 80015da:	461e      	mov	r6, r3
 80015dc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80015e0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80015e4:	f7ff fb68 	bl	8000cb8 <__aeabi_fmul>
 80015e8:	4603      	mov	r3, r0
 80015ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fb63 	bl	8000cb8 <__aeabi_fmul>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4698      	mov	r8, r3
 80015f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff fa4c 	bl	8000aa4 <__aeabi_fsub>
 800160c:	4603      	mov	r3, r0
 800160e:	4619      	mov	r1, r3
 8001610:	4640      	mov	r0, r8
 8001612:	f7ff fb51 	bl	8000cb8 <__aeabi_fmul>
 8001616:	4603      	mov	r3, r0
 8001618:	4619      	mov	r1, r3
 800161a:	4630      	mov	r0, r6
 800161c:	f7ff fa42 	bl	8000aa4 <__aeabi_fsub>
 8001620:	4603      	mov	r3, r0
 8001622:	461e      	mov	r6, r3
 8001624:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001628:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800162c:	f7ff fb44 	bl	8000cb8 <__aeabi_fmul>
 8001630:	4603      	mov	r3, r0
 8001632:	4698      	mov	r8, r3
 8001634:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001636:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001638:	f7ff fb3e 	bl	8000cb8 <__aeabi_fmul>
 800163c:	4603      	mov	r3, r0
 800163e:	4699      	mov	r9, r3
 8001640:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001642:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001644:	f7ff fb38 	bl	8000cb8 <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
 800164a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fb33 	bl	8000cb8 <__aeabi_fmul>
 8001652:	4603      	mov	r3, r0
 8001654:	4619      	mov	r1, r3
 8001656:	4648      	mov	r0, r9
 8001658:	f7ff fa24 	bl	8000aa4 <__aeabi_fsub>
 800165c:	4603      	mov	r3, r0
 800165e:	4619      	mov	r1, r3
 8001660:	4640      	mov	r0, r8
 8001662:	f7ff fb29 	bl	8000cb8 <__aeabi_fmul>
 8001666:	4603      	mov	r3, r0
 8001668:	4698      	mov	r8, r3
 800166a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fa12 	bl	8000aa4 <__aeabi_fsub>
 8001680:	4603      	mov	r3, r0
 8001682:	4619      	mov	r1, r3
 8001684:	4640      	mov	r0, r8
 8001686:	f7ff fb17 	bl	8000cb8 <__aeabi_fmul>
 800168a:	4603      	mov	r3, r0
 800168c:	4619      	mov	r1, r3
 800168e:	4630      	mov	r0, r6
 8001690:	f7ff fa0a 	bl	8000aa8 <__addsf3>
 8001694:	4603      	mov	r3, r0
 8001696:	4619      	mov	r1, r3
 8001698:	4628      	mov	r0, r5
 800169a:	f7ff fb0d 	bl	8000cb8 <__aeabi_fmul>
 800169e:	4603      	mov	r3, r0
 80016a0:	461d      	mov	r5, r3
 80016a2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80016a6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80016aa:	f7ff fb05 	bl	8000cb8 <__aeabi_fmul>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff faff 	bl	8000cb8 <__aeabi_fmul>
 80016ba:	4603      	mov	r3, r0
 80016bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fafa 	bl	8000cb8 <__aeabi_fmul>
 80016c4:	4603      	mov	r3, r0
 80016c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff faf5 	bl	8000cb8 <__aeabi_fmul>
 80016ce:	4603      	mov	r3, r0
 80016d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff faf0 	bl	8000cb8 <__aeabi_fmul>
 80016d8:	4603      	mov	r3, r0
 80016da:	461e      	mov	r6, r3
 80016dc:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80016e0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80016e4:	f7ff fae8 	bl	8000cb8 <__aeabi_fmul>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fae2 	bl	8000cb8 <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fadd 	bl	8000cb8 <__aeabi_fmul>
 80016fe:	4603      	mov	r3, r0
 8001700:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fad8 	bl	8000cb8 <__aeabi_fmul>
 8001708:	4603      	mov	r3, r0
 800170a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fad3 	bl	8000cb8 <__aeabi_fmul>
 8001712:	4603      	mov	r3, r0
 8001714:	4619      	mov	r1, r3
 8001716:	4630      	mov	r0, r6
 8001718:	f7ff face 	bl	8000cb8 <__aeabi_fmul>
 800171c:	4603      	mov	r3, r0
 800171e:	4619      	mov	r1, r3
 8001720:	4628      	mov	r0, r5
 8001722:	f7ff fb7d 	bl	8000e20 <__aeabi_fdiv>
 8001726:	4603      	mov	r3, r0
 8001728:	4619      	mov	r1, r3
 800172a:	4620      	mov	r0, r4
 800172c:	f7ff f9bc 	bl	8000aa8 <__addsf3>
 8001730:	4603      	mov	r3, r0
 8001732:	4619      	mov	r1, r3
 8001734:	4ab1      	ldr	r2, [pc, #708]	@ (80019fc <NLLS+0x88c>)
 8001736:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800173a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			e[i] = (Be[i] * Be[i]) - f[i];
 800173e:	4ab0      	ldr	r2, [pc, #704]	@ (8001a00 <NLLS+0x890>)
 8001740:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001744:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001748:	49ad      	ldr	r1, [pc, #692]	@ (8001a00 <NLLS+0x890>)
 800174a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800174e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001752:	4619      	mov	r1, r3
 8001754:	4610      	mov	r0, r2
 8001756:	f7ff faaf 	bl	8000cb8 <__aeabi_fmul>
 800175a:	4603      	mov	r3, r0
 800175c:	4618      	mov	r0, r3
 800175e:	4aa7      	ldr	r2, [pc, #668]	@ (80019fc <NLLS+0x88c>)
 8001760:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff f99b 	bl	8000aa4 <__aeabi_fsub>
 800176e:	4603      	mov	r3, r0
 8001770:	4619      	mov	r1, r3
 8001772:	4aa4      	ldr	r2, [pc, #656]	@ (8001a04 <NLLS+0x894>)
 8001774:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 800177c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	4413      	add	r3, r2
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800178e:	f7ff f989 	bl	8000aa4 <__aeabi_fsub>
 8001792:	4603      	mov	r3, r0
 8001794:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fa8d 	bl	8000cb8 <__aeabi_fmul>
 800179e:	4603      	mov	r3, r0
 80017a0:	461c      	mov	r4, r3
 80017a2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80017a4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80017a8:	f7ff fa86 	bl	8000cb8 <__aeabi_fmul>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461d      	mov	r5, r3
 80017b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4413      	add	r3, r2
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80017c2:	f7ff f96f 	bl	8000aa4 <__aeabi_fsub>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4619      	mov	r1, r3
 80017ca:	4628      	mov	r0, r5
 80017cc:	f7ff fa74 	bl	8000cb8 <__aeabi_fmul>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4619      	mov	r1, r3
 80017d4:	4620      	mov	r0, r4
 80017d6:	f7ff f965 	bl	8000aa4 <__aeabi_fsub>
 80017da:	4603      	mov	r3, r0
 80017dc:	4619      	mov	r1, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff f962 	bl	8000aa8 <__addsf3>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461c      	mov	r4, r3
 80017e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	4413      	add	r3, r2
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80017fa:	f7ff f953 	bl	8000aa4 <__aeabi_fsub>
 80017fe:	4603      	mov	r3, r0
 8001800:	4619      	mov	r1, r3
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff fa58 	bl	8000cb8 <__aeabi_fmul>
 8001808:	4603      	mov	r3, r0
 800180a:	461c      	mov	r4, r3
 800180c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001810:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001814:	f7ff fa50 	bl	8000cb8 <__aeabi_fmul>
 8001818:	4603      	mov	r3, r0
 800181a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fa4a 	bl	8000cb8 <__aeabi_fmul>
 8001824:	4603      	mov	r3, r0
 8001826:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fa44 	bl	8000cb8 <__aeabi_fmul>
 8001830:	4603      	mov	r3, r0
 8001832:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fa3f 	bl	8000cb8 <__aeabi_fmul>
 800183a:	4603      	mov	r3, r0
 800183c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fa3a 	bl	8000cb8 <__aeabi_fmul>
 8001844:	4603      	mov	r3, r0
 8001846:	4619      	mov	r1, r3
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff fae9 	bl	8000e20 <__aeabi_fdiv>
 800184e:	4603      	mov	r3, r0
 8001850:	461c      	mov	r4, r3
 8001852:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	4413      	add	r3, r2
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4619      	mov	r1, r3
 8001860:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001864:	f7ff f91e 	bl	8000aa4 <__aeabi_fsub>
 8001868:	4603      	mov	r3, r0
 800186a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fa22 	bl	8000cb8 <__aeabi_fmul>
 8001874:	4603      	mov	r3, r0
 8001876:	461d      	mov	r5, r3
 8001878:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800187a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800187e:	f7ff fa1b 	bl	8000cb8 <__aeabi_fmul>
 8001882:	4603      	mov	r3, r0
 8001884:	461e      	mov	r6, r3
 8001886:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	68fa      	ldr	r2, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001898:	f7ff f904 	bl	8000aa4 <__aeabi_fsub>
 800189c:	4603      	mov	r3, r0
 800189e:	4619      	mov	r1, r3
 80018a0:	4630      	mov	r0, r6
 80018a2:	f7ff fa09 	bl	8000cb8 <__aeabi_fmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4619      	mov	r1, r3
 80018aa:	4628      	mov	r0, r5
 80018ac:	f7ff f8fa 	bl	8000aa4 <__aeabi_fsub>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461d      	mov	r5, r3
 80018b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	4413      	add	r3, r2
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80018c6:	f7ff f8ed 	bl	8000aa4 <__aeabi_fsub>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f9f1 	bl	8000cb8 <__aeabi_fmul>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461e      	mov	r6, r3
 80018da:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80018dc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80018e0:	f7ff f9ea 	bl	8000cb8 <__aeabi_fmul>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4698      	mov	r8, r3
 80018e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80018fa:	f7ff f8d3 	bl	8000aa4 <__aeabi_fsub>
 80018fe:	4603      	mov	r3, r0
 8001900:	4619      	mov	r1, r3
 8001902:	4640      	mov	r0, r8
 8001904:	f7ff f9d8 	bl	8000cb8 <__aeabi_fmul>
 8001908:	4603      	mov	r3, r0
 800190a:	4619      	mov	r1, r3
 800190c:	4630      	mov	r0, r6
 800190e:	f7ff f8c9 	bl	8000aa4 <__aeabi_fsub>
 8001912:	4603      	mov	r3, r0
 8001914:	4619      	mov	r1, r3
 8001916:	4628      	mov	r0, r5
 8001918:	f7ff f9ce 	bl	8000cb8 <__aeabi_fmul>
 800191c:	4603      	mov	r3, r0
 800191e:	4619      	mov	r1, r3
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff f8c1 	bl	8000aa8 <__addsf3>
 8001926:	4603      	mov	r3, r0
 8001928:	461d      	mov	r5, r3
 800192a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800192e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001932:	f7ff f9c1 	bl	8000cb8 <__aeabi_fmul>
 8001936:	4603      	mov	r3, r0
 8001938:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f9bb 	bl	8000cb8 <__aeabi_fmul>
 8001942:	4603      	mov	r3, r0
 8001944:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f9b5 	bl	8000cb8 <__aeabi_fmul>
 800194e:	4603      	mov	r3, r0
 8001950:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff f9af 	bl	8000cb8 <__aeabi_fmul>
 800195a:	4603      	mov	r3, r0
 800195c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f9aa 	bl	8000cb8 <__aeabi_fmul>
 8001964:	4603      	mov	r3, r0
 8001966:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff f9a5 	bl	8000cb8 <__aeabi_fmul>
 800196e:	4603      	mov	r3, r0
 8001970:	4619      	mov	r1, r3
 8001972:	4628      	mov	r0, r5
 8001974:	f7ff fa54 	bl	8000e20 <__aeabi_fdiv>
 8001978:	4603      	mov	r3, r0
 800197a:	4619      	mov	r1, r3
 800197c:	4620      	mov	r0, r4
 800197e:	f7ff f891 	bl	8000aa4 <__aeabi_fsub>
 8001982:	4603      	mov	r3, r0
 8001984:	461c      	mov	r4, r3
 8001986:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4619      	mov	r1, r3
 8001994:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001998:	f7ff f884 	bl	8000aa4 <__aeabi_fsub>
 800199c:	4603      	mov	r3, r0
 800199e:	461d      	mov	r5, r3
 80019a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	4413      	add	r3, r2
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80019b2:	f7ff f877 	bl	8000aa4 <__aeabi_fsub>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4619      	mov	r1, r3
 80019ba:	4628      	mov	r0, r5
 80019bc:	f7ff f97c 	bl	8000cb8 <__aeabi_fmul>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4619      	mov	r1, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff f86f 	bl	8000aa8 <__addsf3>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461d      	mov	r5, r3
 80019ce:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80019d2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80019d6:	f7ff f96f 	bl	8000cb8 <__aeabi_fmul>
 80019da:	4603      	mov	r3, r0
 80019dc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f969 	bl	8000cb8 <__aeabi_fmul>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4619      	mov	r1, r3
 80019ea:	4628      	mov	r0, r5
 80019ec:	f7ff fa18 	bl	8000e20 <__aeabi_fdiv>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4619      	mov	r1, r3
 80019f4:	4620      	mov	r0, r4
 80019f6:	f7ff f855 	bl	8000aa4 <__aeabi_fsub>
 80019fa:	e005      	b.n	8001a08 <NLLS+0x898>
 80019fc:	20002d10 	.word	0x20002d10
 8001a00:	20002818 	.word	0x20002818
 8001a04:	20002a94 	.word	0x20002a94
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461c      	mov	r4, r3
 8001a0c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001a10:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001a14:	f7ff f950 	bl	8000cb8 <__aeabi_fmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001a1e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001a20:	f7ff f94a 	bl	8000cb8 <__aeabi_fmul>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461e      	mov	r6, r3
 8001a28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001a2a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001a2c:	f7ff f944 	bl	8000cb8 <__aeabi_fmul>
 8001a30:	4603      	mov	r3, r0
 8001a32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f93f 	bl	8000cb8 <__aeabi_fmul>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4630      	mov	r0, r6
 8001a40:	f7ff f830 	bl	8000aa4 <__aeabi_fsub>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4619      	mov	r1, r3
 8001a48:	4628      	mov	r0, r5
 8001a4a:	f7ff f935 	bl	8000cb8 <__aeabi_fmul>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461d      	mov	r5, r3
 8001a52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001a64:	f7ff f81e 	bl	8000aa4 <__aeabi_fsub>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	f7ff f923 	bl	8000cb8 <__aeabi_fmul>
 8001a72:	4603      	mov	r3, r0
 8001a74:	461d      	mov	r5, r3
 8001a76:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001a7a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001a7e:	f7ff f91b 	bl	8000cb8 <__aeabi_fmul>
 8001a82:	4603      	mov	r3, r0
 8001a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f916 	bl	8000cb8 <__aeabi_fmul>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461e      	mov	r6, r3
 8001a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001aa2:	f7fe ffff 	bl	8000aa4 <__aeabi_fsub>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4630      	mov	r0, r6
 8001aac:	f7ff f904 	bl	8000cb8 <__aeabi_fmul>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4628      	mov	r0, r5
 8001ab6:	f7fe fff7 	bl	8000aa8 <__addsf3>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461d      	mov	r5, r3
 8001abe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001ac2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001ac6:	f7ff f8f7 	bl	8000cb8 <__aeabi_fmul>
 8001aca:	4603      	mov	r3, r0
 8001acc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f8f2 	bl	8000cb8 <__aeabi_fmul>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461e      	mov	r6, r3
 8001ad8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001aea:	f7fe ffdb 	bl	8000aa4 <__aeabi_fsub>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4630      	mov	r0, r6
 8001af4:	f7ff f8e0 	bl	8000cb8 <__aeabi_fmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4619      	mov	r1, r3
 8001afc:	4628      	mov	r0, r5
 8001afe:	f7fe ffd1 	bl	8000aa4 <__aeabi_fsub>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461d      	mov	r5, r3
 8001b06:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001b0a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001b0e:	f7ff f8d3 	bl	8000cb8 <__aeabi_fmul>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461e      	mov	r6, r3
 8001b16:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001b18:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001b1a:	f7ff f8cd 	bl	8000cb8 <__aeabi_fmul>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	4698      	mov	r8, r3
 8001b22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001b24:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001b26:	f7ff f8c7 	bl	8000cb8 <__aeabi_fmul>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f8c2 	bl	8000cb8 <__aeabi_fmul>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4619      	mov	r1, r3
 8001b38:	4640      	mov	r0, r8
 8001b3a:	f7fe ffb3 	bl	8000aa4 <__aeabi_fsub>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4619      	mov	r1, r3
 8001b42:	4630      	mov	r0, r6
 8001b44:	f7ff f8b8 	bl	8000cb8 <__aeabi_fmul>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461e      	mov	r6, r3
 8001b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	4413      	add	r3, r2
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001b5e:	f7fe ffa1 	bl	8000aa4 <__aeabi_fsub>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4619      	mov	r1, r3
 8001b66:	4630      	mov	r0, r6
 8001b68:	f7ff f8a6 	bl	8000cb8 <__aeabi_fmul>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461e      	mov	r6, r3
 8001b70:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001b74:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001b78:	f7ff f89e 	bl	8000cb8 <__aeabi_fmul>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f899 	bl	8000cb8 <__aeabi_fmul>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4698      	mov	r8, r3
 8001b8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	4413      	add	r3, r2
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4619      	mov	r1, r3
 8001b98:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001b9c:	f7fe ff82 	bl	8000aa4 <__aeabi_fsub>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4640      	mov	r0, r8
 8001ba6:	f7ff f887 	bl	8000cb8 <__aeabi_fmul>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4619      	mov	r1, r3
 8001bae:	4630      	mov	r0, r6
 8001bb0:	f7fe ff7a 	bl	8000aa8 <__addsf3>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461e      	mov	r6, r3
 8001bb8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001bbc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001bc0:	f7ff f87a 	bl	8000cb8 <__aeabi_fmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f875 	bl	8000cb8 <__aeabi_fmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4698      	mov	r8, r3
 8001bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	4413      	add	r3, r2
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4619      	mov	r1, r3
 8001be0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001be4:	f7fe ff5e 	bl	8000aa4 <__aeabi_fsub>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4619      	mov	r1, r3
 8001bec:	4640      	mov	r0, r8
 8001bee:	f7ff f863 	bl	8000cb8 <__aeabi_fmul>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4630      	mov	r0, r6
 8001bf8:	f7fe ff54 	bl	8000aa4 <__aeabi_fsub>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4628      	mov	r0, r5
 8001c02:	f7ff f859 	bl	8000cb8 <__aeabi_fmul>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe ff4c 	bl	8000aa8 <__addsf3>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461d      	mov	r5, r3
 8001c14:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001c18:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001c1c:	f7ff f84c 	bl	8000cb8 <__aeabi_fmul>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f846 	bl	8000cb8 <__aeabi_fmul>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f840 	bl	8000cb8 <__aeabi_fmul>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f83a 	bl	8000cb8 <__aeabi_fmul>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f834 	bl	8000cb8 <__aeabi_fmul>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f82e 	bl	8000cb8 <__aeabi_fmul>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f829 	bl	8000cb8 <__aeabi_fmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f824 	bl	8000cb8 <__aeabi_fmul>
 8001c70:	4603      	mov	r3, r0
 8001c72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f81f 	bl	8000cb8 <__aeabi_fmul>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f81a 	bl	8000cb8 <__aeabi_fmul>
 8001c84:	4603      	mov	r3, r0
 8001c86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f815 	bl	8000cb8 <__aeabi_fmul>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f810 	bl	8000cb8 <__aeabi_fmul>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4628      	mov	r0, r5
 8001c9e:	f7ff f8bf 	bl	8000e20 <__aeabi_fdiv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f7fe fefc 	bl	8000aa4 <__aeabi_fsub>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461c      	mov	r4, r3
 8001cb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001cb2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001cb6:	f7fe ffff 	bl	8000cb8 <__aeabi_fmul>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461d      	mov	r5, r3
 8001cbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001cd0:	f7fe fee8 	bl	8000aa4 <__aeabi_fsub>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4628      	mov	r0, r5
 8001cda:	f7fe ffed 	bl	8000cb8 <__aeabi_fmul>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461d      	mov	r5, r3
 8001ce2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001ce4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8001ce8:	f7fe ffe6 	bl	8000cb8 <__aeabi_fmul>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461e      	mov	r6, r3
 8001cf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001d02:	f7fe fecf 	bl	8000aa4 <__aeabi_fsub>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	f7fe ffd4 	bl	8000cb8 <__aeabi_fmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4619      	mov	r1, r3
 8001d14:	4628      	mov	r0, r5
 8001d16:	f7fe fec5 	bl	8000aa4 <__aeabi_fsub>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fec2 	bl	8000aa8 <__addsf3>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461d      	mov	r5, r3
 8001d28:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001d2c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8001d30:	f7fe ffc2 	bl	8000cb8 <__aeabi_fmul>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461e      	mov	r6, r3
 8001d38:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001d3a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001d3c:	f7fe ffbc 	bl	8000cb8 <__aeabi_fmul>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4698      	mov	r8, r3
 8001d44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001d46:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001d48:	f7fe ffb6 	bl	8000cb8 <__aeabi_fmul>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe ffb1 	bl	8000cb8 <__aeabi_fmul>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	f7fe fea2 	bl	8000aa4 <__aeabi_fsub>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4619      	mov	r1, r3
 8001d64:	4630      	mov	r0, r6
 8001d66:	f7fe ffa7 	bl	8000cb8 <__aeabi_fmul>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	461e      	mov	r6, r3
 8001d6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001d80:	f7fe fe90 	bl	8000aa4 <__aeabi_fsub>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4619      	mov	r1, r3
 8001d88:	4630      	mov	r0, r6
 8001d8a:	f7fe ff95 	bl	8000cb8 <__aeabi_fmul>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	461e      	mov	r6, r3
 8001d92:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001d96:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001d9a:	f7fe ff8d 	bl	8000cb8 <__aeabi_fmul>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe ff88 	bl	8000cb8 <__aeabi_fmul>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4698      	mov	r8, r3
 8001dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001dbe:	f7fe fe71 	bl	8000aa4 <__aeabi_fsub>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4640      	mov	r0, r8
 8001dc8:	f7fe ff76 	bl	8000cb8 <__aeabi_fmul>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4630      	mov	r0, r6
 8001dd2:	f7fe fe69 	bl	8000aa8 <__addsf3>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461e      	mov	r6, r3
 8001dda:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001dde:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001de2:	f7fe ff69 	bl	8000cb8 <__aeabi_fmul>
 8001de6:	4603      	mov	r3, r0
 8001de8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe ff64 	bl	8000cb8 <__aeabi_fmul>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4698      	mov	r8, r3
 8001df4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001e06:	f7fe fe4d 	bl	8000aa4 <__aeabi_fsub>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4640      	mov	r0, r8
 8001e10:	f7fe ff52 	bl	8000cb8 <__aeabi_fmul>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4619      	mov	r1, r3
 8001e18:	4630      	mov	r0, r6
 8001e1a:	f7fe fe43 	bl	8000aa4 <__aeabi_fsub>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	4619      	mov	r1, r3
 8001e22:	4628      	mov	r0, r5
 8001e24:	f7fe ff48 	bl	8000cb8 <__aeabi_fmul>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461d      	mov	r5, r3
 8001e2c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001e30:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001e34:	f7fe ff40 	bl	8000cb8 <__aeabi_fmul>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe ff3a 	bl	8000cb8 <__aeabi_fmul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe ff34 	bl	8000cb8 <__aeabi_fmul>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe ff2e 	bl	8000cb8 <__aeabi_fmul>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe ff28 	bl	8000cb8 <__aeabi_fmul>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe ff23 	bl	8000cb8 <__aeabi_fmul>
 8001e72:	4603      	mov	r3, r0
 8001e74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe ff1e 	bl	8000cb8 <__aeabi_fmul>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe ff19 	bl	8000cb8 <__aeabi_fmul>
 8001e86:	4603      	mov	r3, r0
 8001e88:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe ff14 	bl	8000cb8 <__aeabi_fmul>
 8001e90:	4603      	mov	r3, r0
 8001e92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe ff0f 	bl	8000cb8 <__aeabi_fmul>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe ff0a 	bl	8000cb8 <__aeabi_fmul>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	f7fe ffb9 	bl	8000e20 <__aeabi_fdiv>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f7fe fdf8 	bl	8000aa8 <__addsf3>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4aac      	ldr	r2, [pc, #688]	@ (8002170 <NLLS+0x1000>)
 8001ebe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ec2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8001ec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	4413      	add	r3, r2
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001ed8:	f7fe fde4 	bl	8000aa4 <__aeabi_fsub>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fde1 	bl	8000aa8 <__addsf3>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461c      	mov	r4, r3
 8001eea:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001eee:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001ef2:	f7fe fee1 	bl	8000cb8 <__aeabi_fmul>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fedb 	bl	8000cb8 <__aeabi_fmul>
 8001f02:	4603      	mov	r3, r0
 8001f04:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fed6 	bl	8000cb8 <__aeabi_fmul>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fed1 	bl	8000cb8 <__aeabi_fmul>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461d      	mov	r5, r3
 8001f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	4413      	add	r3, r2
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fec4 	bl	8000cb8 <__aeabi_fmul>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe febe 	bl	8000cb8 <__aeabi_fmul>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe feb9 	bl	8000cb8 <__aeabi_fmul>
 8001f46:	4603      	mov	r3, r0
 8001f48:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe feb4 	bl	8000cb8 <__aeabi_fmul>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4619      	mov	r1, r3
 8001f54:	4628      	mov	r0, r5
 8001f56:	f7fe fda5 	bl	8000aa4 <__aeabi_fsub>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001f62:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8001f66:	f7fe fea7 	bl	8000cb8 <__aeabi_fmul>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fea1 	bl	8000cb8 <__aeabi_fmul>
 8001f76:	4603      	mov	r3, r0
 8001f78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fe9c 	bl	8000cb8 <__aeabi_fmul>
 8001f80:	4603      	mov	r3, r0
 8001f82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fe97 	bl	8000cb8 <__aeabi_fmul>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fe92 	bl	8000cb8 <__aeabi_fmul>
 8001f94:	4603      	mov	r3, r0
 8001f96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fe8d 	bl	8000cb8 <__aeabi_fmul>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4628      	mov	r0, r5
 8001fa4:	f7fe fd80 	bl	8000aa8 <__addsf3>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461d      	mov	r5, r3
 8001fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fe7b 	bl	8000cb8 <__aeabi_fmul>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fe75 	bl	8000cb8 <__aeabi_fmul>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fe70 	bl	8000cb8 <__aeabi_fmul>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fe6b 	bl	8000cb8 <__aeabi_fmul>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fe66 	bl	8000cb8 <__aeabi_fmul>
 8001fec:	4603      	mov	r3, r0
 8001fee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fe61 	bl	8000cb8 <__aeabi_fmul>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4628      	mov	r0, r5
 8001ffc:	f7fe fd52 	bl	8000aa4 <__aeabi_fsub>
 8002000:	4603      	mov	r3, r0
 8002002:	461d      	mov	r5, r3
 8002004:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002008:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800200c:	f7fe fe54 	bl	8000cb8 <__aeabi_fmul>
 8002010:	4603      	mov	r3, r0
 8002012:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fe4e 	bl	8000cb8 <__aeabi_fmul>
 800201c:	4603      	mov	r3, r0
 800201e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fe49 	bl	8000cb8 <__aeabi_fmul>
 8002026:	4603      	mov	r3, r0
 8002028:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fe44 	bl	8000cb8 <__aeabi_fmul>
 8002030:	4603      	mov	r3, r0
 8002032:	4619      	mov	r1, r3
 8002034:	4628      	mov	r0, r5
 8002036:	f7fe fd35 	bl	8000aa4 <__aeabi_fsub>
 800203a:	4603      	mov	r3, r0
 800203c:	461d      	mov	r5, r3
 800203e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fe32 	bl	8000cb8 <__aeabi_fmul>
 8002054:	4603      	mov	r3, r0
 8002056:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fe2c 	bl	8000cb8 <__aeabi_fmul>
 8002060:	4603      	mov	r3, r0
 8002062:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fe27 	bl	8000cb8 <__aeabi_fmul>
 800206a:	4603      	mov	r3, r0
 800206c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fe22 	bl	8000cb8 <__aeabi_fmul>
 8002074:	4603      	mov	r3, r0
 8002076:	4619      	mov	r1, r3
 8002078:	4628      	mov	r0, r5
 800207a:	f7fe fd15 	bl	8000aa8 <__addsf3>
 800207e:	4603      	mov	r3, r0
 8002080:	461d      	mov	r5, r3
 8002082:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002086:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800208a:	f7fe fe15 	bl	8000cb8 <__aeabi_fmul>
 800208e:	4603      	mov	r3, r0
 8002090:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fe0f 	bl	8000cb8 <__aeabi_fmul>
 800209a:	4603      	mov	r3, r0
 800209c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fe0a 	bl	8000cb8 <__aeabi_fmul>
 80020a4:	4603      	mov	r3, r0
 80020a6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fe05 	bl	8000cb8 <__aeabi_fmul>
 80020ae:	4603      	mov	r3, r0
 80020b0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fe00 	bl	8000cb8 <__aeabi_fmul>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4619      	mov	r1, r3
 80020bc:	4628      	mov	r0, r5
 80020be:	f7fe fcf1 	bl	8000aa4 <__aeabi_fsub>
 80020c2:	4603      	mov	r3, r0
 80020c4:	461d      	mov	r5, r3
 80020c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fdee 	bl	8000cb8 <__aeabi_fmul>
 80020dc:	4603      	mov	r3, r0
 80020de:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fde8 	bl	8000cb8 <__aeabi_fmul>
 80020e8:	4603      	mov	r3, r0
 80020ea:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fde3 	bl	8000cb8 <__aeabi_fmul>
 80020f2:	4603      	mov	r3, r0
 80020f4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe fdde 	bl	8000cb8 <__aeabi_fmul>
 80020fc:	4603      	mov	r3, r0
 80020fe:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fdd9 	bl	8000cb8 <__aeabi_fmul>
 8002106:	4603      	mov	r3, r0
 8002108:	4619      	mov	r1, r3
 800210a:	4628      	mov	r0, r5
 800210c:	f7fe fccc 	bl	8000aa8 <__addsf3>
 8002110:	4603      	mov	r3, r0
 8002112:	461d      	mov	r5, r3
 8002114:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002118:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800211c:	f7fe fdcc 	bl	8000cb8 <__aeabi_fmul>
 8002120:	4603      	mov	r3, r0
 8002122:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fdc6 	bl	8000cb8 <__aeabi_fmul>
 800212c:	4603      	mov	r3, r0
 800212e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fdc1 	bl	8000cb8 <__aeabi_fmul>
 8002136:	4603      	mov	r3, r0
 8002138:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fdbc 	bl	8000cb8 <__aeabi_fmul>
 8002140:	4603      	mov	r3, r0
 8002142:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fdb7 	bl	8000cb8 <__aeabi_fmul>
 800214a:	4603      	mov	r3, r0
 800214c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fdb2 	bl	8000cb8 <__aeabi_fmul>
 8002154:	4603      	mov	r3, r0
 8002156:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fdad 	bl	8000cb8 <__aeabi_fmul>
 800215e:	4603      	mov	r3, r0
 8002160:	4619      	mov	r1, r3
 8002162:	4628      	mov	r0, r5
 8002164:	f7fe fc9e 	bl	8000aa4 <__aeabi_fsub>
 8002168:	4603      	mov	r3, r0
 800216a:	461d      	mov	r5, r3
 800216c:	e002      	b.n	8002174 <NLLS+0x1004>
 800216e:	bf00      	nop
 8002170:	20002f8c 	.word	0x20002f8c
 8002174:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4413      	add	r3, r2
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe fd97 	bl	8000cb8 <__aeabi_fmul>
 800218a:	4603      	mov	r3, r0
 800218c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fd91 	bl	8000cb8 <__aeabi_fmul>
 8002196:	4603      	mov	r3, r0
 8002198:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fd8c 	bl	8000cb8 <__aeabi_fmul>
 80021a0:	4603      	mov	r3, r0
 80021a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe fd87 	bl	8000cb8 <__aeabi_fmul>
 80021aa:	4603      	mov	r3, r0
 80021ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fd82 	bl	8000cb8 <__aeabi_fmul>
 80021b4:	4603      	mov	r3, r0
 80021b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fd7d 	bl	8000cb8 <__aeabi_fmul>
 80021be:	4603      	mov	r3, r0
 80021c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fd78 	bl	8000cb8 <__aeabi_fmul>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4619      	mov	r1, r3
 80021cc:	4628      	mov	r0, r5
 80021ce:	f7fe fc6b 	bl	8000aa8 <__addsf3>
 80021d2:	4603      	mov	r3, r0
 80021d4:	461d      	mov	r5, r3
 80021d6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80021da:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80021de:	f7fe fd6b 	bl	8000cb8 <__aeabi_fmul>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fd65 	bl	8000cb8 <__aeabi_fmul>
 80021ee:	4603      	mov	r3, r0
 80021f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fd60 	bl	8000cb8 <__aeabi_fmul>
 80021f8:	4603      	mov	r3, r0
 80021fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fd5b 	bl	8000cb8 <__aeabi_fmul>
 8002202:	4603      	mov	r3, r0
 8002204:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fd56 	bl	8000cb8 <__aeabi_fmul>
 800220c:	4603      	mov	r3, r0
 800220e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe fd51 	bl	8000cb8 <__aeabi_fmul>
 8002216:	4603      	mov	r3, r0
 8002218:	4619      	mov	r1, r3
 800221a:	4628      	mov	r0, r5
 800221c:	f7fe fc44 	bl	8000aa8 <__addsf3>
 8002220:	4603      	mov	r3, r0
 8002222:	461d      	mov	r5, r3
 8002224:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	4413      	add	r3, r2
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002234:	4618      	mov	r0, r3
 8002236:	f7fe fd3f 	bl	8000cb8 <__aeabi_fmul>
 800223a:	4603      	mov	r3, r0
 800223c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fd39 	bl	8000cb8 <__aeabi_fmul>
 8002246:	4603      	mov	r3, r0
 8002248:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fd34 	bl	8000cb8 <__aeabi_fmul>
 8002250:	4603      	mov	r3, r0
 8002252:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fd2f 	bl	8000cb8 <__aeabi_fmul>
 800225a:	4603      	mov	r3, r0
 800225c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fd2a 	bl	8000cb8 <__aeabi_fmul>
 8002264:	4603      	mov	r3, r0
 8002266:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe fd25 	bl	8000cb8 <__aeabi_fmul>
 800226e:	4603      	mov	r3, r0
 8002270:	4619      	mov	r1, r3
 8002272:	4628      	mov	r0, r5
 8002274:	f7fe fc16 	bl	8000aa4 <__aeabi_fsub>
 8002278:	4603      	mov	r3, r0
 800227a:	4619      	mov	r1, r3
 800227c:	4620      	mov	r0, r4
 800227e:	f7fe fd1b 	bl	8000cb8 <__aeabi_fmul>
 8002282:	4603      	mov	r3, r0
 8002284:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8002288:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800228c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002290:	f7fe fd12 	bl	8000cb8 <__aeabi_fmul>
 8002294:	4603      	mov	r3, r0
 8002296:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fd0c 	bl	8000cb8 <__aeabi_fmul>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fd06 	bl	8000cb8 <__aeabi_fmul>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fd00 	bl	8000cb8 <__aeabi_fmul>
 80022b8:	4603      	mov	r3, r0
 80022ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fcfb 	bl	8000cb8 <__aeabi_fmul>
 80022c2:	4603      	mov	r3, r0
 80022c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fcf6 	bl	8000cb8 <__aeabi_fmul>
 80022cc:	4603      	mov	r3, r0
 80022ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fcf1 	bl	8000cb8 <__aeabi_fmul>
 80022d6:	4603      	mov	r3, r0
 80022d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fcec 	bl	8000cb8 <__aeabi_fmul>
 80022e0:	4603      	mov	r3, r0
 80022e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe fce7 	bl	8000cb8 <__aeabi_fmul>
 80022ea:	4603      	mov	r3, r0
 80022ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe fce2 	bl	8000cb8 <__aeabi_fmul>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4619      	mov	r1, r3
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7fe fd91 	bl	8000e20 <__aeabi_fdiv>
 80022fe:	4603      	mov	r3, r0
 8002300:	4619      	mov	r1, r3
 8002302:	4aaf      	ldr	r2, [pc, #700]	@ (80025c0 <NLLS+0x1450>)
 8002304:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002308:	339f      	adds	r3, #159	@ 0x9f
 800230a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 800230e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8002320:	f7fe fbc0 	bl	8000aa4 <__aeabi_fsub>
 8002324:	4603      	mov	r3, r0
 8002326:	4619      	mov	r1, r3
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fbbd 	bl	8000aa8 <__addsf3>
 800232e:	4603      	mov	r3, r0
 8002330:	461c      	mov	r4, r3
 8002332:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002336:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800233a:	f7fe fcbd 	bl	8000cb8 <__aeabi_fmul>
 800233e:	4603      	mov	r3, r0
 8002340:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fcb7 	bl	8000cb8 <__aeabi_fmul>
 800234a:	4603      	mov	r3, r0
 800234c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fcb2 	bl	8000cb8 <__aeabi_fmul>
 8002354:	4603      	mov	r3, r0
 8002356:	461d      	mov	r5, r3
 8002358:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800235c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002360:	f7fe fcaa 	bl	8000cb8 <__aeabi_fmul>
 8002364:	4603      	mov	r3, r0
 8002366:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fca4 	bl	8000cb8 <__aeabi_fmul>
 8002370:	4603      	mov	r3, r0
 8002372:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fc9f 	bl	8000cb8 <__aeabi_fmul>
 800237a:	4603      	mov	r3, r0
 800237c:	4619      	mov	r1, r3
 800237e:	4628      	mov	r0, r5
 8002380:	f7fe fb90 	bl	8000aa4 <__aeabi_fsub>
 8002384:	4603      	mov	r3, r0
 8002386:	461d      	mov	r5, r3
 8002388:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe fc8d 	bl	8000cb8 <__aeabi_fmul>
 800239e:	4603      	mov	r3, r0
 80023a0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fc87 	bl	8000cb8 <__aeabi_fmul>
 80023aa:	4603      	mov	r3, r0
 80023ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fc82 	bl	8000cb8 <__aeabi_fmul>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4619      	mov	r1, r3
 80023b8:	4628      	mov	r0, r5
 80023ba:	f7fe fb73 	bl	8000aa4 <__aeabi_fsub>
 80023be:	4603      	mov	r3, r0
 80023c0:	461d      	mov	r5, r3
 80023c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	4413      	add	r3, r2
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe fc70 	bl	8000cb8 <__aeabi_fmul>
 80023d8:	4603      	mov	r3, r0
 80023da:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fc6a 	bl	8000cb8 <__aeabi_fmul>
 80023e4:	4603      	mov	r3, r0
 80023e6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fc65 	bl	8000cb8 <__aeabi_fmul>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4619      	mov	r1, r3
 80023f2:	4628      	mov	r0, r5
 80023f4:	f7fe fb58 	bl	8000aa8 <__addsf3>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461d      	mov	r5, r3
 80023fc:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002400:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002404:	f7fe fc58 	bl	8000cb8 <__aeabi_fmul>
 8002408:	4603      	mov	r3, r0
 800240a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fc52 	bl	8000cb8 <__aeabi_fmul>
 8002414:	4603      	mov	r3, r0
 8002416:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fc4d 	bl	8000cb8 <__aeabi_fmul>
 800241e:	4603      	mov	r3, r0
 8002420:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fc48 	bl	8000cb8 <__aeabi_fmul>
 8002428:	4603      	mov	r3, r0
 800242a:	4619      	mov	r1, r3
 800242c:	4628      	mov	r0, r5
 800242e:	f7fe fb3b 	bl	8000aa8 <__addsf3>
 8002432:	4603      	mov	r3, r0
 8002434:	461d      	mov	r5, r3
 8002436:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fc36 	bl	8000cb8 <__aeabi_fmul>
 800244c:	4603      	mov	r3, r0
 800244e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fc30 	bl	8000cb8 <__aeabi_fmul>
 8002458:	4603      	mov	r3, r0
 800245a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe fc2b 	bl	8000cb8 <__aeabi_fmul>
 8002462:	4603      	mov	r3, r0
 8002464:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fc26 	bl	8000cb8 <__aeabi_fmul>
 800246c:	4603      	mov	r3, r0
 800246e:	4619      	mov	r1, r3
 8002470:	4628      	mov	r0, r5
 8002472:	f7fe fb17 	bl	8000aa4 <__aeabi_fsub>
 8002476:	4603      	mov	r3, r0
 8002478:	461d      	mov	r5, r3
 800247a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800247e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002482:	f7fe fc19 	bl	8000cb8 <__aeabi_fmul>
 8002486:	4603      	mov	r3, r0
 8002488:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fc13 	bl	8000cb8 <__aeabi_fmul>
 8002492:	4603      	mov	r3, r0
 8002494:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fc0e 	bl	8000cb8 <__aeabi_fmul>
 800249c:	4603      	mov	r3, r0
 800249e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe fc09 	bl	8000cb8 <__aeabi_fmul>
 80024a6:	4603      	mov	r3, r0
 80024a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fc04 	bl	8000cb8 <__aeabi_fmul>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4619      	mov	r1, r3
 80024b4:	4628      	mov	r0, r5
 80024b6:	f7fe faf5 	bl	8000aa4 <__aeabi_fsub>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461d      	mov	r5, r3
 80024be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4413      	add	r3, r2
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fbf2 	bl	8000cb8 <__aeabi_fmul>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fbec 	bl	8000cb8 <__aeabi_fmul>
 80024e0:	4603      	mov	r3, r0
 80024e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fbe7 	bl	8000cb8 <__aeabi_fmul>
 80024ea:	4603      	mov	r3, r0
 80024ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fbe2 	bl	8000cb8 <__aeabi_fmul>
 80024f4:	4603      	mov	r3, r0
 80024f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fbdd 	bl	8000cb8 <__aeabi_fmul>
 80024fe:	4603      	mov	r3, r0
 8002500:	4619      	mov	r1, r3
 8002502:	4628      	mov	r0, r5
 8002504:	f7fe fad0 	bl	8000aa8 <__addsf3>
 8002508:	4603      	mov	r3, r0
 800250a:	4619      	mov	r1, r3
 800250c:	4620      	mov	r0, r4
 800250e:	f7fe fbd3 	bl	8000cb8 <__aeabi_fmul>
 8002512:	4603      	mov	r3, r0
 8002514:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8002518:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800251c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8002520:	f7fe fbca 	bl	8000cb8 <__aeabi_fmul>
 8002524:	4603      	mov	r3, r0
 8002526:	461d      	mov	r5, r3
 8002528:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800252c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8002530:	f7fe fbc2 	bl	8000cb8 <__aeabi_fmul>
 8002534:	4603      	mov	r3, r0
 8002536:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fbbc 	bl	8000cb8 <__aeabi_fmul>
 8002540:	4603      	mov	r3, r0
 8002542:	4619      	mov	r1, r3
 8002544:	4628      	mov	r0, r5
 8002546:	f7fe fbb7 	bl	8000cb8 <__aeabi_fmul>
 800254a:	4603      	mov	r3, r0
 800254c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fbb2 	bl	8000cb8 <__aeabi_fmul>
 8002554:	4603      	mov	r3, r0
 8002556:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fbad 	bl	8000cb8 <__aeabi_fmul>
 800255e:	4603      	mov	r3, r0
 8002560:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fba8 	bl	8000cb8 <__aeabi_fmul>
 8002568:	4603      	mov	r3, r0
 800256a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fba3 	bl	8000cb8 <__aeabi_fmul>
 8002572:	4603      	mov	r3, r0
 8002574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fb9e 	bl	8000cb8 <__aeabi_fmul>
 800257c:	4603      	mov	r3, r0
 800257e:	4619      	mov	r1, r3
 8002580:	4620      	mov	r0, r4
 8002582:	f7fe fc4d 	bl	8000e20 <__aeabi_fdiv>
 8002586:	4603      	mov	r3, r0
 8002588:	4619      	mov	r1, r3
 800258a:	4a0d      	ldr	r2, [pc, #52]	@ (80025c0 <NLLS+0x1450>)
 800258c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002590:	f503 739f 	add.w	r3, r3, #318	@ 0x13e
 8002594:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 8002598:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800259c:	4619      	mov	r1, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fa82 	bl	8000aa8 <__addsf3>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461c      	mov	r4, r3
 80025a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4413      	add	r3, r2
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4619      	mov	r1, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fa76 	bl	8000aa8 <__addsf3>
 80025bc:	4603      	mov	r3, r0
 80025be:	e001      	b.n	80025c4 <NLLS+0x1454>
 80025c0:	20002f8c 	.word	0x20002f8c
 80025c4:	4619      	mov	r1, r3
 80025c6:	4620      	mov	r0, r4
 80025c8:	f7fe fa6c 	bl	8000aa4 <__aeabi_fsub>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fc24 	bl	8000e20 <__aeabi_fdiv>
 80025d8:	4603      	mov	r3, r0
 80025da:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fb6a 	bl	8000cb8 <__aeabi_fmul>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461c      	mov	r4, r3
 80025e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025ea:	4619      	mov	r1, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fa5b 	bl	8000aa8 <__addsf3>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461d      	mov	r5, r3
 80025f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	4413      	add	r3, r2
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002608:	f7fe fa4c 	bl	8000aa4 <__aeabi_fsub>
 800260c:	4603      	mov	r3, r0
 800260e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fb50 	bl	8000cb8 <__aeabi_fmul>
 8002618:	4603      	mov	r3, r0
 800261a:	461e      	mov	r6, r3
 800261c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800261e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002622:	f7fe fb49 	bl	8000cb8 <__aeabi_fmul>
 8002626:	4603      	mov	r3, r0
 8002628:	4698      	mov	r8, r3
 800262a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4619      	mov	r1, r3
 8002638:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800263c:	f7fe fa32 	bl	8000aa4 <__aeabi_fsub>
 8002640:	4603      	mov	r3, r0
 8002642:	4619      	mov	r1, r3
 8002644:	4640      	mov	r0, r8
 8002646:	f7fe fb37 	bl	8000cb8 <__aeabi_fmul>
 800264a:	4603      	mov	r3, r0
 800264c:	4619      	mov	r1, r3
 800264e:	4630      	mov	r0, r6
 8002650:	f7fe fa28 	bl	8000aa4 <__aeabi_fsub>
 8002654:	4603      	mov	r3, r0
 8002656:	4619      	mov	r1, r3
 8002658:	4628      	mov	r0, r5
 800265a:	f7fe fb2d 	bl	8000cb8 <__aeabi_fmul>
 800265e:	4603      	mov	r3, r0
 8002660:	461d      	mov	r5, r3
 8002662:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002666:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800266a:	f7fe fb25 	bl	8000cb8 <__aeabi_fmul>
 800266e:	4603      	mov	r3, r0
 8002670:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fb1f 	bl	8000cb8 <__aeabi_fmul>
 800267a:	4603      	mov	r3, r0
 800267c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fb1a 	bl	8000cb8 <__aeabi_fmul>
 8002684:	4603      	mov	r3, r0
 8002686:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fb15 	bl	8000cb8 <__aeabi_fmul>
 800268e:	4603      	mov	r3, r0
 8002690:	4619      	mov	r1, r3
 8002692:	4628      	mov	r0, r5
 8002694:	f7fe fbc4 	bl	8000e20 <__aeabi_fdiv>
 8002698:	4603      	mov	r3, r0
 800269a:	4619      	mov	r1, r3
 800269c:	4620      	mov	r0, r4
 800269e:	f7fe fa01 	bl	8000aa4 <__aeabi_fsub>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461c      	mov	r4, r3
 80026a6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80026a8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80026aa:	f7fe fb05 	bl	8000cb8 <__aeabi_fmul>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461d      	mov	r5, r3
 80026b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80026b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80026b6:	f7fe faff 	bl	8000cb8 <__aeabi_fmul>
 80026ba:	4603      	mov	r3, r0
 80026bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fafa 	bl	8000cb8 <__aeabi_fmul>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4619      	mov	r1, r3
 80026c8:	4628      	mov	r0, r5
 80026ca:	f7fe f9eb 	bl	8000aa4 <__aeabi_fsub>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4619      	mov	r1, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe f9e8 	bl	8000aa8 <__addsf3>
 80026d8:	4603      	mov	r3, r0
 80026da:	461d      	mov	r5, r3
 80026dc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80026e0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80026e4:	f7fe fae8 	bl	8000cb8 <__aeabi_fmul>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461e      	mov	r6, r3
 80026ec:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80026ee:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80026f0:	f7fe fae2 	bl	8000cb8 <__aeabi_fmul>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4698      	mov	r8, r3
 80026f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80026fa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80026fc:	f7fe fadc 	bl	8000cb8 <__aeabi_fmul>
 8002700:	4603      	mov	r3, r0
 8002702:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fad7 	bl	8000cb8 <__aeabi_fmul>
 800270a:	4603      	mov	r3, r0
 800270c:	4619      	mov	r1, r3
 800270e:	4640      	mov	r0, r8
 8002710:	f7fe f9c8 	bl	8000aa4 <__aeabi_fsub>
 8002714:	4603      	mov	r3, r0
 8002716:	4619      	mov	r1, r3
 8002718:	4630      	mov	r0, r6
 800271a:	f7fe facd 	bl	8000cb8 <__aeabi_fmul>
 800271e:	4603      	mov	r3, r0
 8002720:	461e      	mov	r6, r3
 8002722:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4619      	mov	r1, r3
 8002730:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002734:	f7fe f9b6 	bl	8000aa4 <__aeabi_fsub>
 8002738:	4603      	mov	r3, r0
 800273a:	4619      	mov	r1, r3
 800273c:	4630      	mov	r0, r6
 800273e:	f7fe fabb 	bl	8000cb8 <__aeabi_fmul>
 8002742:	4603      	mov	r3, r0
 8002744:	461e      	mov	r6, r3
 8002746:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800274a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800274e:	f7fe fab3 	bl	8000cb8 <__aeabi_fmul>
 8002752:	4603      	mov	r3, r0
 8002754:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe faae 	bl	8000cb8 <__aeabi_fmul>
 800275c:	4603      	mov	r3, r0
 800275e:	4698      	mov	r8, r3
 8002760:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8002772:	f7fe f997 	bl	8000aa4 <__aeabi_fsub>
 8002776:	4603      	mov	r3, r0
 8002778:	4619      	mov	r1, r3
 800277a:	4640      	mov	r0, r8
 800277c:	f7fe fa9c 	bl	8000cb8 <__aeabi_fmul>
 8002780:	4603      	mov	r3, r0
 8002782:	4619      	mov	r1, r3
 8002784:	4630      	mov	r0, r6
 8002786:	f7fe f98f 	bl	8000aa8 <__addsf3>
 800278a:	4603      	mov	r3, r0
 800278c:	461e      	mov	r6, r3
 800278e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002792:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8002796:	f7fe fa8f 	bl	8000cb8 <__aeabi_fmul>
 800279a:	4603      	mov	r3, r0
 800279c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fa8a 	bl	8000cb8 <__aeabi_fmul>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4698      	mov	r8, r3
 80027a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	4413      	add	r3, r2
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4619      	mov	r1, r3
 80027b6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80027ba:	f7fe f973 	bl	8000aa4 <__aeabi_fsub>
 80027be:	4603      	mov	r3, r0
 80027c0:	4619      	mov	r1, r3
 80027c2:	4640      	mov	r0, r8
 80027c4:	f7fe fa78 	bl	8000cb8 <__aeabi_fmul>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4619      	mov	r1, r3
 80027cc:	4630      	mov	r0, r6
 80027ce:	f7fe f969 	bl	8000aa4 <__aeabi_fsub>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4619      	mov	r1, r3
 80027d6:	4628      	mov	r0, r5
 80027d8:	f7fe fa6e 	bl	8000cb8 <__aeabi_fmul>
 80027dc:	4603      	mov	r3, r0
 80027de:	461d      	mov	r5, r3
 80027e0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80027e4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80027e8:	f7fe fa66 	bl	8000cb8 <__aeabi_fmul>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fa60 	bl	8000cb8 <__aeabi_fmul>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fa5a 	bl	8000cb8 <__aeabi_fmul>
 8002804:	4603      	mov	r3, r0
 8002806:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fa55 	bl	8000cb8 <__aeabi_fmul>
 800280e:	4603      	mov	r3, r0
 8002810:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fa50 	bl	8000cb8 <__aeabi_fmul>
 8002818:	4603      	mov	r3, r0
 800281a:	4619      	mov	r1, r3
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe f943 	bl	8000aa8 <__addsf3>
 8002822:	4603      	mov	r3, r0
 8002824:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fa46 	bl	8000cb8 <__aeabi_fmul>
 800282c:	4603      	mov	r3, r0
 800282e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fa41 	bl	8000cb8 <__aeabi_fmul>
 8002836:	4603      	mov	r3, r0
 8002838:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fa3c 	bl	8000cb8 <__aeabi_fmul>
 8002840:	4603      	mov	r3, r0
 8002842:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002844:	4618      	mov	r0, r3
 8002846:	f7fe fa37 	bl	8000cb8 <__aeabi_fmul>
 800284a:	4603      	mov	r3, r0
 800284c:	4619      	mov	r1, r3
 800284e:	4628      	mov	r0, r5
 8002850:	f7fe fae6 	bl	8000e20 <__aeabi_fdiv>
 8002854:	4603      	mov	r3, r0
 8002856:	4619      	mov	r1, r3
 8002858:	4620      	mov	r0, r4
 800285a:	f7fe f925 	bl	8000aa8 <__addsf3>
 800285e:	4603      	mov	r3, r0
 8002860:	4619      	mov	r1, r3
 8002862:	4aad      	ldr	r2, [pc, #692]	@ (8002b18 <NLLS+0x19a8>)
 8002864:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002868:	f203 13dd 	addw	r3, r3, #477	@ 0x1dd
 800286c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8002870:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	4413      	add	r3, r2
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4619      	mov	r1, r3
 800287e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002882:	f7fe f90f 	bl	8000aa4 <__aeabi_fsub>
 8002886:	4603      	mov	r3, r0
 8002888:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fa13 	bl	8000cb8 <__aeabi_fmul>
 8002892:	4603      	mov	r3, r0
 8002894:	461c      	mov	r4, r3
 8002896:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002898:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800289c:	f7fe fa0c 	bl	8000cb8 <__aeabi_fmul>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461d      	mov	r5, r3
 80028a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	4413      	add	r3, r2
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4619      	mov	r1, r3
 80028b2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80028b6:	f7fe f8f5 	bl	8000aa4 <__aeabi_fsub>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4619      	mov	r1, r3
 80028be:	4628      	mov	r0, r5
 80028c0:	f7fe f9fa 	bl	8000cb8 <__aeabi_fmul>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4619      	mov	r1, r3
 80028c8:	4620      	mov	r0, r4
 80028ca:	f7fe f8eb 	bl	8000aa4 <__aeabi_fsub>
 80028ce:	4603      	mov	r3, r0
 80028d0:	4619      	mov	r1, r3
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe f8e8 	bl	8000aa8 <__addsf3>
 80028d8:	4603      	mov	r3, r0
 80028da:	461c      	mov	r4, r3
 80028dc:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80028e0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80028e4:	f7fe f9e8 	bl	8000cb8 <__aeabi_fmul>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe f9e2 	bl	8000cb8 <__aeabi_fmul>
 80028f4:	4603      	mov	r3, r0
 80028f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe f9dd 	bl	8000cb8 <__aeabi_fmul>
 80028fe:	4603      	mov	r3, r0
 8002900:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe f9d8 	bl	8000cb8 <__aeabi_fmul>
 8002908:	4603      	mov	r3, r0
 800290a:	4619      	mov	r1, r3
 800290c:	4620      	mov	r0, r4
 800290e:	f7fe fa87 	bl	8000e20 <__aeabi_fdiv>
 8002912:	4603      	mov	r3, r0
 8002914:	461c      	mov	r4, r3
 8002916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002918:	4619      	mov	r1, r3
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f8c4 	bl	8000aa8 <__addsf3>
 8002920:	4603      	mov	r3, r0
 8002922:	461d      	mov	r5, r3
 8002924:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002928:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800292c:	f7fe f9c4 	bl	8000cb8 <__aeabi_fmul>
 8002930:	4603      	mov	r3, r0
 8002932:	461e      	mov	r6, r3
 8002934:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002936:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002938:	f7fe f9be 	bl	8000cb8 <__aeabi_fmul>
 800293c:	4603      	mov	r3, r0
 800293e:	4698      	mov	r8, r3
 8002940:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002942:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002944:	f7fe f9b8 	bl	8000cb8 <__aeabi_fmul>
 8002948:	4603      	mov	r3, r0
 800294a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe f9b3 	bl	8000cb8 <__aeabi_fmul>
 8002952:	4603      	mov	r3, r0
 8002954:	4619      	mov	r1, r3
 8002956:	4640      	mov	r0, r8
 8002958:	f7fe f8a4 	bl	8000aa4 <__aeabi_fsub>
 800295c:	4603      	mov	r3, r0
 800295e:	4619      	mov	r1, r3
 8002960:	4630      	mov	r0, r6
 8002962:	f7fe f9a9 	bl	8000cb8 <__aeabi_fmul>
 8002966:	4603      	mov	r3, r0
 8002968:	461e      	mov	r6, r3
 800296a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4413      	add	r3, r2
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4619      	mov	r1, r3
 8002978:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800297c:	f7fe f892 	bl	8000aa4 <__aeabi_fsub>
 8002980:	4603      	mov	r3, r0
 8002982:	4619      	mov	r1, r3
 8002984:	4630      	mov	r0, r6
 8002986:	f7fe f997 	bl	8000cb8 <__aeabi_fmul>
 800298a:	4603      	mov	r3, r0
 800298c:	461e      	mov	r6, r3
 800298e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002992:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8002996:	f7fe f98f 	bl	8000cb8 <__aeabi_fmul>
 800299a:	4603      	mov	r3, r0
 800299c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe f98a 	bl	8000cb8 <__aeabi_fmul>
 80029a4:	4603      	mov	r3, r0
 80029a6:	4698      	mov	r8, r3
 80029a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80029ba:	f7fe f873 	bl	8000aa4 <__aeabi_fsub>
 80029be:	4603      	mov	r3, r0
 80029c0:	4619      	mov	r1, r3
 80029c2:	4640      	mov	r0, r8
 80029c4:	f7fe f978 	bl	8000cb8 <__aeabi_fmul>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4619      	mov	r1, r3
 80029cc:	4630      	mov	r0, r6
 80029ce:	f7fe f86b 	bl	8000aa8 <__addsf3>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461e      	mov	r6, r3
 80029d6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80029da:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80029de:	f7fe f96b 	bl	8000cb8 <__aeabi_fmul>
 80029e2:	4603      	mov	r3, r0
 80029e4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe f966 	bl	8000cb8 <__aeabi_fmul>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4698      	mov	r8, r3
 80029f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	4413      	add	r3, r2
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4619      	mov	r1, r3
 80029fe:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002a02:	f7fe f84f 	bl	8000aa4 <__aeabi_fsub>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f7fe f954 	bl	8000cb8 <__aeabi_fmul>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4619      	mov	r1, r3
 8002a14:	4630      	mov	r0, r6
 8002a16:	f7fe f845 	bl	8000aa4 <__aeabi_fsub>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4628      	mov	r0, r5
 8002a20:	f7fe f94a 	bl	8000cb8 <__aeabi_fmul>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461d      	mov	r5, r3
 8002a28:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002a2c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8002a30:	f7fe f942 	bl	8000cb8 <__aeabi_fmul>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe f93c 	bl	8000cb8 <__aeabi_fmul>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe f936 	bl	8000cb8 <__aeabi_fmul>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe f931 	bl	8000cb8 <__aeabi_fmul>
 8002a56:	4603      	mov	r3, r0
 8002a58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe f92c 	bl	8000cb8 <__aeabi_fmul>
 8002a60:	4603      	mov	r3, r0
 8002a62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe f927 	bl	8000cb8 <__aeabi_fmul>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe f922 	bl	8000cb8 <__aeabi_fmul>
 8002a74:	4603      	mov	r3, r0
 8002a76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe f91d 	bl	8000cb8 <__aeabi_fmul>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe f918 	bl	8000cb8 <__aeabi_fmul>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	f7fe f9c7 	bl	8000e20 <__aeabi_fdiv>
 8002a92:	4603      	mov	r3, r0
 8002a94:	4619      	mov	r1, r3
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7fe f804 	bl	8000aa4 <__aeabi_fsub>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b18 <NLLS+0x19a8>)
 8002aa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aa6:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002aaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002aae:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002ab2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8002ab6:	f7fe f8ff 	bl	8000cb8 <__aeabi_fmul>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461c      	mov	r4, r3
 8002abe:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002ac0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002ac2:	f7fe f8f9 	bl	8000cb8 <__aeabi_fmul>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461d      	mov	r5, r3
 8002aca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002acc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ace:	f7fe f8f3 	bl	8000cb8 <__aeabi_fmul>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe f8ee 	bl	8000cb8 <__aeabi_fmul>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f7fd ffdf 	bl	8000aa4 <__aeabi_fsub>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4620      	mov	r0, r4
 8002aec:	f7fe f8e4 	bl	8000cb8 <__aeabi_fmul>
 8002af0:	4603      	mov	r3, r0
 8002af2:	461c      	mov	r4, r3
 8002af4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4413      	add	r3, r2
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002b06:	f7fd ffcd 	bl	8000aa4 <__aeabi_fsub>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4620      	mov	r0, r4
 8002b10:	f7fe f8d2 	bl	8000cb8 <__aeabi_fmul>
 8002b14:	e002      	b.n	8002b1c <NLLS+0x19ac>
 8002b16:	bf00      	nop
 8002b18:	20002f8c 	.word	0x20002f8c
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461c      	mov	r4, r3
 8002b20:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002b24:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8002b28:	f7fe f8c6 	bl	8000cb8 <__aeabi_fmul>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe f8c1 	bl	8000cb8 <__aeabi_fmul>
 8002b36:	4603      	mov	r3, r0
 8002b38:	461d      	mov	r5, r3
 8002b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	4413      	add	r3, r2
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4619      	mov	r1, r3
 8002b48:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8002b4c:	f7fd ffaa 	bl	8000aa4 <__aeabi_fsub>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4619      	mov	r1, r3
 8002b54:	4628      	mov	r0, r5
 8002b56:	f7fe f8af 	bl	8000cb8 <__aeabi_fmul>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f7fd ffa2 	bl	8000aa8 <__addsf3>
 8002b64:	4603      	mov	r3, r0
 8002b66:	461c      	mov	r4, r3
 8002b68:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002b6c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8002b70:	f7fe f8a2 	bl	8000cb8 <__aeabi_fmul>
 8002b74:	4603      	mov	r3, r0
 8002b76:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe f89d 	bl	8000cb8 <__aeabi_fmul>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461d      	mov	r5, r3
 8002b82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002b94:	f7fd ff86 	bl	8000aa4 <__aeabi_fsub>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	f7fe f88b 	bl	8000cb8 <__aeabi_fmul>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f7fd ff7c 	bl	8000aa4 <__aeabi_fsub>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd ff79 	bl	8000aa8 <__addsf3>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461c      	mov	r4, r3
 8002bba:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002bbe:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8002bc2:	f7fe f879 	bl	8000cb8 <__aeabi_fmul>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe f873 	bl	8000cb8 <__aeabi_fmul>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe f86d 	bl	8000cb8 <__aeabi_fmul>
 8002bde:	4603      	mov	r3, r0
 8002be0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f868 	bl	8000cb8 <__aeabi_fmul>
 8002be8:	4603      	mov	r3, r0
 8002bea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fe f863 	bl	8000cb8 <__aeabi_fmul>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe f85e 	bl	8000cb8 <__aeabi_fmul>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe f859 	bl	8000cb8 <__aeabi_fmul>
 8002c06:	4603      	mov	r3, r0
 8002c08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe f854 	bl	8000cb8 <__aeabi_fmul>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4619      	mov	r1, r3
 8002c14:	4620      	mov	r0, r4
 8002c16:	f7fe f903 	bl	8000e20 <__aeabi_fdiv>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4aae      	ldr	r2, [pc, #696]	@ (8002ed8 <NLLS+0x1d68>)
 8002c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c24:	f203 331b 	addw	r3, r3, #795	@ 0x31b
 8002c28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 8002c2c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002c30:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002c34:	f7fe f840 	bl	8000cb8 <__aeabi_fmul>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	461c      	mov	r4, r3
 8002c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4413      	add	r3, r2
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f833 	bl	8000cb8 <__aeabi_fmul>
 8002c52:	4603      	mov	r3, r0
 8002c54:	4619      	mov	r1, r3
 8002c56:	4620      	mov	r0, r4
 8002c58:	f7fd ff24 	bl	8000aa4 <__aeabi_fsub>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461c      	mov	r4, r3
 8002c60:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002c64:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002c68:	f7fe f826 	bl	8000cb8 <__aeabi_fmul>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe f821 	bl	8000cb8 <__aeabi_fmul>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f7fd ff12 	bl	8000aa4 <__aeabi_fsub>
 8002c80:	4603      	mov	r3, r0
 8002c82:	461c      	mov	r4, r3
 8002c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fe f80f 	bl	8000cb8 <__aeabi_fmul>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe f80a 	bl	8000cb8 <__aeabi_fmul>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7fd fefd 	bl	8000aa8 <__addsf3>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fef8 	bl	8000aa8 <__addsf3>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461c      	mov	r4, r3
 8002cbc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002cc0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002cc4:	f7fd fff8 	bl	8000cb8 <__aeabi_fmul>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fff2 	bl	8000cb8 <__aeabi_fmul>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd ffed 	bl	8000cb8 <__aeabi_fmul>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd ffe8 	bl	8000cb8 <__aeabi_fmul>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	461d      	mov	r5, r3
 8002cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fd ffdb 	bl	8000cb8 <__aeabi_fmul>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd ffd5 	bl	8000cb8 <__aeabi_fmul>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd ffd0 	bl	8000cb8 <__aeabi_fmul>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd ffcb 	bl	8000cb8 <__aeabi_fmul>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4619      	mov	r1, r3
 8002d26:	4628      	mov	r0, r5
 8002d28:	f7fd febc 	bl	8000aa4 <__aeabi_fsub>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	461d      	mov	r5, r3
 8002d30:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002d34:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8002d38:	f7fd ffbe 	bl	8000cb8 <__aeabi_fmul>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd ffb8 	bl	8000cb8 <__aeabi_fmul>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd ffb3 	bl	8000cb8 <__aeabi_fmul>
 8002d52:	4603      	mov	r3, r0
 8002d54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd ffae 	bl	8000cb8 <__aeabi_fmul>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd ffa9 	bl	8000cb8 <__aeabi_fmul>
 8002d66:	4603      	mov	r3, r0
 8002d68:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd ffa4 	bl	8000cb8 <__aeabi_fmul>
 8002d70:	4603      	mov	r3, r0
 8002d72:	4619      	mov	r1, r3
 8002d74:	4628      	mov	r0, r5
 8002d76:	f7fd fe97 	bl	8000aa8 <__addsf3>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	461d      	mov	r5, r3
 8002d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	4413      	add	r3, r2
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd ff92 	bl	8000cb8 <__aeabi_fmul>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd ff8c 	bl	8000cb8 <__aeabi_fmul>
 8002da0:	4603      	mov	r3, r0
 8002da2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd ff87 	bl	8000cb8 <__aeabi_fmul>
 8002daa:	4603      	mov	r3, r0
 8002dac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd ff82 	bl	8000cb8 <__aeabi_fmul>
 8002db4:	4603      	mov	r3, r0
 8002db6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd ff7d 	bl	8000cb8 <__aeabi_fmul>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd ff78 	bl	8000cb8 <__aeabi_fmul>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f7fd fe69 	bl	8000aa4 <__aeabi_fsub>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461d      	mov	r5, r3
 8002dd6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002dda:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8002dde:	f7fd ff6b 	bl	8000cb8 <__aeabi_fmul>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd ff65 	bl	8000cb8 <__aeabi_fmul>
 8002dee:	4603      	mov	r3, r0
 8002df0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd ff60 	bl	8000cb8 <__aeabi_fmul>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fd ff5b 	bl	8000cb8 <__aeabi_fmul>
 8002e02:	4603      	mov	r3, r0
 8002e04:	4619      	mov	r1, r3
 8002e06:	4628      	mov	r0, r5
 8002e08:	f7fd fe4c 	bl	8000aa4 <__aeabi_fsub>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461d      	mov	r5, r3
 8002e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd ff49 	bl	8000cb8 <__aeabi_fmul>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd ff43 	bl	8000cb8 <__aeabi_fmul>
 8002e32:	4603      	mov	r3, r0
 8002e34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd ff3e 	bl	8000cb8 <__aeabi_fmul>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd ff39 	bl	8000cb8 <__aeabi_fmul>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f7fd fe2c 	bl	8000aa8 <__addsf3>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461d      	mov	r5, r3
 8002e54:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002e58:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002e5c:	f7fd ff2c 	bl	8000cb8 <__aeabi_fmul>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd ff26 	bl	8000cb8 <__aeabi_fmul>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd ff21 	bl	8000cb8 <__aeabi_fmul>
 8002e76:	4603      	mov	r3, r0
 8002e78:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd ff1c 	bl	8000cb8 <__aeabi_fmul>
 8002e80:	4603      	mov	r3, r0
 8002e82:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd ff17 	bl	8000cb8 <__aeabi_fmul>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4628      	mov	r0, r5
 8002e90:	f7fd fe08 	bl	8000aa4 <__aeabi_fsub>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461d      	mov	r5, r3
 8002e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd ff05 	bl	8000cb8 <__aeabi_fmul>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd feff 	bl	8000cb8 <__aeabi_fmul>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fefa 	bl	8000cb8 <__aeabi_fmul>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd fef5 	bl	8000cb8 <__aeabi_fmul>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	e002      	b.n	8002edc <NLLS+0x1d6c>
 8002ed6:	bf00      	nop
 8002ed8:	20002f8c 	.word	0x20002f8c
 8002edc:	f7fd feec 	bl	8000cb8 <__aeabi_fmul>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4628      	mov	r0, r5
 8002ee6:	f7fd fddf 	bl	8000aa8 <__addsf3>
 8002eea:	4603      	mov	r3, r0
 8002eec:	461d      	mov	r5, r3
 8002eee:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002ef2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002ef6:	f7fd fedf 	bl	8000cb8 <__aeabi_fmul>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fed9 	bl	8000cb8 <__aeabi_fmul>
 8002f06:	4603      	mov	r3, r0
 8002f08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd fed4 	bl	8000cb8 <__aeabi_fmul>
 8002f10:	4603      	mov	r3, r0
 8002f12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd fecf 	bl	8000cb8 <__aeabi_fmul>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd feca 	bl	8000cb8 <__aeabi_fmul>
 8002f24:	4603      	mov	r3, r0
 8002f26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fec5 	bl	8000cb8 <__aeabi_fmul>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fec0 	bl	8000cb8 <__aeabi_fmul>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	f7fd fdb1 	bl	8000aa4 <__aeabi_fsub>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461d      	mov	r5, r3
 8002f46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd feae 	bl	8000cb8 <__aeabi_fmul>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd fea8 	bl	8000cb8 <__aeabi_fmul>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fea3 	bl	8000cb8 <__aeabi_fmul>
 8002f72:	4603      	mov	r3, r0
 8002f74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fe9e 	bl	8000cb8 <__aeabi_fmul>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd fe99 	bl	8000cb8 <__aeabi_fmul>
 8002f86:	4603      	mov	r3, r0
 8002f88:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fe94 	bl	8000cb8 <__aeabi_fmul>
 8002f90:	4603      	mov	r3, r0
 8002f92:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fe8f 	bl	8000cb8 <__aeabi_fmul>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	f7fd fd82 	bl	8000aa8 <__addsf3>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461d      	mov	r5, r3
 8002fa8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8002fac:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8002fb0:	f7fd fe82 	bl	8000cb8 <__aeabi_fmul>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fe7c 	bl	8000cb8 <__aeabi_fmul>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd fe77 	bl	8000cb8 <__aeabi_fmul>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd fe72 	bl	8000cb8 <__aeabi_fmul>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fe6d 	bl	8000cb8 <__aeabi_fmul>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd fe68 	bl	8000cb8 <__aeabi_fmul>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4619      	mov	r1, r3
 8002fec:	4628      	mov	r0, r5
 8002fee:	f7fd fd5b 	bl	8000aa8 <__addsf3>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461d      	mov	r5, r3
 8002ff6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fe56 	bl	8000cb8 <__aeabi_fmul>
 800300c:	4603      	mov	r3, r0
 800300e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fe50 	bl	8000cb8 <__aeabi_fmul>
 8003018:	4603      	mov	r3, r0
 800301a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fe4b 	bl	8000cb8 <__aeabi_fmul>
 8003022:	4603      	mov	r3, r0
 8003024:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fe46 	bl	8000cb8 <__aeabi_fmul>
 800302c:	4603      	mov	r3, r0
 800302e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fe41 	bl	8000cb8 <__aeabi_fmul>
 8003036:	4603      	mov	r3, r0
 8003038:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fe3c 	bl	8000cb8 <__aeabi_fmul>
 8003040:	4603      	mov	r3, r0
 8003042:	4619      	mov	r1, r3
 8003044:	4628      	mov	r0, r5
 8003046:	f7fd fd2d 	bl	8000aa4 <__aeabi_fsub>
 800304a:	4603      	mov	r3, r0
 800304c:	4619      	mov	r1, r3
 800304e:	4620      	mov	r0, r4
 8003050:	f7fd fe32 	bl	8000cb8 <__aeabi_fmul>
 8003054:	4603      	mov	r3, r0
 8003056:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 800305a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800305e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8003062:	f7fd fe29 	bl	8000cb8 <__aeabi_fmul>
 8003066:	4603      	mov	r3, r0
 8003068:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fe23 	bl	8000cb8 <__aeabi_fmul>
 8003072:	4603      	mov	r3, r0
 8003074:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fe1d 	bl	8000cb8 <__aeabi_fmul>
 800307e:	4603      	mov	r3, r0
 8003080:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd fe17 	bl	8000cb8 <__aeabi_fmul>
 800308a:	4603      	mov	r3, r0
 800308c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fe12 	bl	8000cb8 <__aeabi_fmul>
 8003094:	4603      	mov	r3, r0
 8003096:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fe0d 	bl	8000cb8 <__aeabi_fmul>
 800309e:	4603      	mov	r3, r0
 80030a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fe08 	bl	8000cb8 <__aeabi_fmul>
 80030a8:	4603      	mov	r3, r0
 80030aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd fe03 	bl	8000cb8 <__aeabi_fmul>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461d      	mov	r5, r3
 80030b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030b8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80030ba:	f7fd fdfd 	bl	8000cb8 <__aeabi_fmul>
 80030be:	4603      	mov	r3, r0
 80030c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fdf8 	bl	8000cb8 <__aeabi_fmul>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4619      	mov	r1, r3
 80030cc:	4628      	mov	r0, r5
 80030ce:	f7fd fdf3 	bl	8000cb8 <__aeabi_fmul>
 80030d2:	4603      	mov	r3, r0
 80030d4:	4619      	mov	r1, r3
 80030d6:	4620      	mov	r0, r4
 80030d8:	f7fd fea2 	bl	8000e20 <__aeabi_fdiv>
 80030dc:	4603      	mov	r3, r0
 80030de:	4619      	mov	r1, r3
 80030e0:	4aab      	ldr	r2, [pc, #684]	@ (8003390 <NLLS+0x2220>)
 80030e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030e6:	f203 33ba 	addw	r3, r3, #954	@ 0x3ba
 80030ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 80030ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030f0:	4619      	mov	r1, r3
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd fcd8 	bl	8000aa8 <__addsf3>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461c      	mov	r4, r3
 80030fc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8003100:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003104:	f7fd fdd8 	bl	8000cb8 <__aeabi_fmul>
 8003108:	4603      	mov	r3, r0
 800310a:	461d      	mov	r5, r3
 800310c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800310e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003110:	f7fd fdd2 	bl	8000cb8 <__aeabi_fmul>
 8003114:	4603      	mov	r3, r0
 8003116:	461e      	mov	r6, r3
 8003118:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800311a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800311c:	f7fd fdcc 	bl	8000cb8 <__aeabi_fmul>
 8003120:	4603      	mov	r3, r0
 8003122:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd fdc7 	bl	8000cb8 <__aeabi_fmul>
 800312a:	4603      	mov	r3, r0
 800312c:	4619      	mov	r1, r3
 800312e:	4630      	mov	r0, r6
 8003130:	f7fd fcb8 	bl	8000aa4 <__aeabi_fsub>
 8003134:	4603      	mov	r3, r0
 8003136:	4619      	mov	r1, r3
 8003138:	4628      	mov	r0, r5
 800313a:	f7fd fdbd 	bl	8000cb8 <__aeabi_fmul>
 800313e:	4603      	mov	r3, r0
 8003140:	461d      	mov	r5, r3
 8003142:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4619      	mov	r1, r3
 8003150:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003154:	f7fd fca6 	bl	8000aa4 <__aeabi_fsub>
 8003158:	4603      	mov	r3, r0
 800315a:	4619      	mov	r1, r3
 800315c:	4628      	mov	r0, r5
 800315e:	f7fd fdab 	bl	8000cb8 <__aeabi_fmul>
 8003162:	4603      	mov	r3, r0
 8003164:	461d      	mov	r5, r3
 8003166:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800316a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800316e:	f7fd fda3 	bl	8000cb8 <__aeabi_fmul>
 8003172:	4603      	mov	r3, r0
 8003174:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd fd9e 	bl	8000cb8 <__aeabi_fmul>
 800317c:	4603      	mov	r3, r0
 800317e:	461e      	mov	r6, r3
 8003180:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003192:	f7fd fc87 	bl	8000aa4 <__aeabi_fsub>
 8003196:	4603      	mov	r3, r0
 8003198:	4619      	mov	r1, r3
 800319a:	4630      	mov	r0, r6
 800319c:	f7fd fd8c 	bl	8000cb8 <__aeabi_fmul>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4619      	mov	r1, r3
 80031a4:	4628      	mov	r0, r5
 80031a6:	f7fd fc7f 	bl	8000aa8 <__addsf3>
 80031aa:	4603      	mov	r3, r0
 80031ac:	461d      	mov	r5, r3
 80031ae:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80031b2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80031b6:	f7fd fd7f 	bl	8000cb8 <__aeabi_fmul>
 80031ba:	4603      	mov	r3, r0
 80031bc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fd7a 	bl	8000cb8 <__aeabi_fmul>
 80031c4:	4603      	mov	r3, r0
 80031c6:	461e      	mov	r6, r3
 80031c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	4413      	add	r3, r2
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4619      	mov	r1, r3
 80031d6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80031da:	f7fd fc63 	bl	8000aa4 <__aeabi_fsub>
 80031de:	4603      	mov	r3, r0
 80031e0:	4619      	mov	r1, r3
 80031e2:	4630      	mov	r0, r6
 80031e4:	f7fd fd68 	bl	8000cb8 <__aeabi_fmul>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4619      	mov	r1, r3
 80031ec:	4628      	mov	r0, r5
 80031ee:	f7fd fc59 	bl	8000aa4 <__aeabi_fsub>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461d      	mov	r5, r3
 80031f6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80031fa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80031fe:	f7fd fd5b 	bl	8000cb8 <__aeabi_fmul>
 8003202:	4603      	mov	r3, r0
 8003204:	461e      	mov	r6, r3
 8003206:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003208:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800320a:	f7fd fd55 	bl	8000cb8 <__aeabi_fmul>
 800320e:	4603      	mov	r3, r0
 8003210:	4698      	mov	r8, r3
 8003212:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003214:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003216:	f7fd fd4f 	bl	8000cb8 <__aeabi_fmul>
 800321a:	4603      	mov	r3, r0
 800321c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd fd4a 	bl	8000cb8 <__aeabi_fmul>
 8003224:	4603      	mov	r3, r0
 8003226:	4619      	mov	r1, r3
 8003228:	4640      	mov	r0, r8
 800322a:	f7fd fc3b 	bl	8000aa4 <__aeabi_fsub>
 800322e:	4603      	mov	r3, r0
 8003230:	4619      	mov	r1, r3
 8003232:	4630      	mov	r0, r6
 8003234:	f7fd fd40 	bl	8000cb8 <__aeabi_fmul>
 8003238:	4603      	mov	r3, r0
 800323a:	461e      	mov	r6, r3
 800323c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4413      	add	r3, r2
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4619      	mov	r1, r3
 800324a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800324e:	f7fd fc29 	bl	8000aa4 <__aeabi_fsub>
 8003252:	4603      	mov	r3, r0
 8003254:	4619      	mov	r1, r3
 8003256:	4630      	mov	r0, r6
 8003258:	f7fd fd2e 	bl	8000cb8 <__aeabi_fmul>
 800325c:	4603      	mov	r3, r0
 800325e:	461e      	mov	r6, r3
 8003260:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8003264:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8003268:	f7fd fd26 	bl	8000cb8 <__aeabi_fmul>
 800326c:	4603      	mov	r3, r0
 800326e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fd21 	bl	8000cb8 <__aeabi_fmul>
 8003276:	4603      	mov	r3, r0
 8003278:	4698      	mov	r8, r3
 800327a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4413      	add	r3, r2
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800328c:	f7fd fc0a 	bl	8000aa4 <__aeabi_fsub>
 8003290:	4603      	mov	r3, r0
 8003292:	4619      	mov	r1, r3
 8003294:	4640      	mov	r0, r8
 8003296:	f7fd fd0f 	bl	8000cb8 <__aeabi_fmul>
 800329a:	4603      	mov	r3, r0
 800329c:	4619      	mov	r1, r3
 800329e:	4630      	mov	r0, r6
 80032a0:	f7fd fc02 	bl	8000aa8 <__addsf3>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461e      	mov	r6, r3
 80032a8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80032ac:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80032b0:	f7fd fd02 	bl	8000cb8 <__aeabi_fmul>
 80032b4:	4603      	mov	r3, r0
 80032b6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd fcfd 	bl	8000cb8 <__aeabi_fmul>
 80032be:	4603      	mov	r3, r0
 80032c0:	4698      	mov	r8, r3
 80032c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	4413      	add	r3, r2
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4619      	mov	r1, r3
 80032d0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80032d4:	f7fd fbe6 	bl	8000aa4 <__aeabi_fsub>
 80032d8:	4603      	mov	r3, r0
 80032da:	4619      	mov	r1, r3
 80032dc:	4640      	mov	r0, r8
 80032de:	f7fd fceb 	bl	8000cb8 <__aeabi_fmul>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4619      	mov	r1, r3
 80032e6:	4630      	mov	r0, r6
 80032e8:	f7fd fbdc 	bl	8000aa4 <__aeabi_fsub>
 80032ec:	4603      	mov	r3, r0
 80032ee:	4619      	mov	r1, r3
 80032f0:	4628      	mov	r0, r5
 80032f2:	f7fd fce1 	bl	8000cb8 <__aeabi_fmul>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4619      	mov	r1, r3
 80032fa:	4620      	mov	r0, r4
 80032fc:	f7fd fcdc 	bl	8000cb8 <__aeabi_fmul>
 8003300:	4603      	mov	r3, r0
 8003302:	461c      	mov	r4, r3
 8003304:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8003308:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800330c:	f7fd fcd4 	bl	8000cb8 <__aeabi_fmul>
 8003310:	4603      	mov	r3, r0
 8003312:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd fcce 	bl	8000cb8 <__aeabi_fmul>
 800331c:	4603      	mov	r3, r0
 800331e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd fcc8 	bl	8000cb8 <__aeabi_fmul>
 8003328:	4603      	mov	r3, r0
 800332a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd fcc2 	bl	8000cb8 <__aeabi_fmul>
 8003334:	4603      	mov	r3, r0
 8003336:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd fcbc 	bl	8000cb8 <__aeabi_fmul>
 8003340:	4603      	mov	r3, r0
 8003342:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003344:	4618      	mov	r0, r3
 8003346:	f7fd fcb7 	bl	8000cb8 <__aeabi_fmul>
 800334a:	4603      	mov	r3, r0
 800334c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd fcb2 	bl	8000cb8 <__aeabi_fmul>
 8003354:	4603      	mov	r3, r0
 8003356:	461d      	mov	r5, r3
 8003358:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800335a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800335c:	f7fd fcac 	bl	8000cb8 <__aeabi_fmul>
 8003360:	4603      	mov	r3, r0
 8003362:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003364:	4618      	mov	r0, r3
 8003366:	f7fd fca7 	bl	8000cb8 <__aeabi_fmul>
 800336a:	4603      	mov	r3, r0
 800336c:	4619      	mov	r1, r3
 800336e:	4628      	mov	r0, r5
 8003370:	f7fd fca2 	bl	8000cb8 <__aeabi_fmul>
 8003374:	4603      	mov	r3, r0
 8003376:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd fc9d 	bl	8000cb8 <__aeabi_fmul>
 800337e:	4603      	mov	r3, r0
 8003380:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fc98 	bl	8000cb8 <__aeabi_fmul>
 8003388:	4603      	mov	r3, r0
 800338a:	4619      	mov	r1, r3
 800338c:	4620      	mov	r0, r4
 800338e:	e001      	b.n	8003394 <NLLS+0x2224>
 8003390:	20002f8c 	.word	0x20002f8c
 8003394:	f7fd fd44 	bl	8000e20 <__aeabi_fdiv>
 8003398:	4603      	mov	r3, r0
 800339a:	461c      	mov	r4, r3
 800339c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4619      	mov	r1, r3
 80033aa:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80033ae:	f7fd fb79 	bl	8000aa4 <__aeabi_fsub>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4619      	mov	r1, r3
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fb76 	bl	8000aa8 <__addsf3>
 80033bc:	4603      	mov	r3, r0
 80033be:	461d      	mov	r5, r3
 80033c0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80033c4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80033c8:	f7fd fc76 	bl	8000cb8 <__aeabi_fmul>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461e      	mov	r6, r3
 80033d0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80033d2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80033d4:	f7fd fc70 	bl	8000cb8 <__aeabi_fmul>
 80033d8:	4603      	mov	r3, r0
 80033da:	4698      	mov	r8, r3
 80033dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033de:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80033e0:	f7fd fc6a 	bl	8000cb8 <__aeabi_fmul>
 80033e4:	4603      	mov	r3, r0
 80033e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd fc65 	bl	8000cb8 <__aeabi_fmul>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4619      	mov	r1, r3
 80033f2:	4640      	mov	r0, r8
 80033f4:	f7fd fb56 	bl	8000aa4 <__aeabi_fsub>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4619      	mov	r1, r3
 80033fc:	4630      	mov	r0, r6
 80033fe:	f7fd fc5b 	bl	8000cb8 <__aeabi_fmul>
 8003402:	4603      	mov	r3, r0
 8003404:	461e      	mov	r6, r3
 8003406:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003418:	f7fd fb44 	bl	8000aa4 <__aeabi_fsub>
 800341c:	4603      	mov	r3, r0
 800341e:	4619      	mov	r1, r3
 8003420:	4630      	mov	r0, r6
 8003422:	f7fd fc49 	bl	8000cb8 <__aeabi_fmul>
 8003426:	4603      	mov	r3, r0
 8003428:	461e      	mov	r6, r3
 800342a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800342e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8003432:	f7fd fc41 	bl	8000cb8 <__aeabi_fmul>
 8003436:	4603      	mov	r3, r0
 8003438:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd fc3c 	bl	8000cb8 <__aeabi_fmul>
 8003440:	4603      	mov	r3, r0
 8003442:	4698      	mov	r8, r3
 8003444:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4619      	mov	r1, r3
 8003452:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003456:	f7fd fb25 	bl	8000aa4 <__aeabi_fsub>
 800345a:	4603      	mov	r3, r0
 800345c:	4619      	mov	r1, r3
 800345e:	4640      	mov	r0, r8
 8003460:	f7fd fc2a 	bl	8000cb8 <__aeabi_fmul>
 8003464:	4603      	mov	r3, r0
 8003466:	4619      	mov	r1, r3
 8003468:	4630      	mov	r0, r6
 800346a:	f7fd fb1d 	bl	8000aa8 <__addsf3>
 800346e:	4603      	mov	r3, r0
 8003470:	461e      	mov	r6, r3
 8003472:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8003476:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800347a:	f7fd fc1d 	bl	8000cb8 <__aeabi_fmul>
 800347e:	4603      	mov	r3, r0
 8003480:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd fc18 	bl	8000cb8 <__aeabi_fmul>
 8003488:	4603      	mov	r3, r0
 800348a:	4698      	mov	r8, r3
 800348c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	4413      	add	r3, r2
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4619      	mov	r1, r3
 800349a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 800349e:	f7fd fb01 	bl	8000aa4 <__aeabi_fsub>
 80034a2:	4603      	mov	r3, r0
 80034a4:	4619      	mov	r1, r3
 80034a6:	4640      	mov	r0, r8
 80034a8:	f7fd fc06 	bl	8000cb8 <__aeabi_fmul>
 80034ac:	4603      	mov	r3, r0
 80034ae:	4619      	mov	r1, r3
 80034b0:	4630      	mov	r0, r6
 80034b2:	f7fd faf7 	bl	8000aa4 <__aeabi_fsub>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4619      	mov	r1, r3
 80034ba:	4628      	mov	r0, r5
 80034bc:	f7fd fbfc 	bl	8000cb8 <__aeabi_fmul>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461d      	mov	r5, r3
 80034c4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80034c8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80034cc:	f7fd fbf4 	bl	8000cb8 <__aeabi_fmul>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd fbee 	bl	8000cb8 <__aeabi_fmul>
 80034dc:	4603      	mov	r3, r0
 80034de:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd fbe8 	bl	8000cb8 <__aeabi_fmul>
 80034e8:	4603      	mov	r3, r0
 80034ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd fbe3 	bl	8000cb8 <__aeabi_fmul>
 80034f2:	4603      	mov	r3, r0
 80034f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd fbde 	bl	8000cb8 <__aeabi_fmul>
 80034fc:	4603      	mov	r3, r0
 80034fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd fbd9 	bl	8000cb8 <__aeabi_fmul>
 8003506:	4603      	mov	r3, r0
 8003508:	4619      	mov	r1, r3
 800350a:	4628      	mov	r0, r5
 800350c:	f7fd fc88 	bl	8000e20 <__aeabi_fdiv>
 8003510:	4603      	mov	r3, r0
 8003512:	4619      	mov	r1, r3
 8003514:	4620      	mov	r0, r4
 8003516:	f7fd fac5 	bl	8000aa4 <__aeabi_fsub>
 800351a:	4603      	mov	r3, r0
 800351c:	4619      	mov	r1, r3
 800351e:	4aac      	ldr	r2, [pc, #688]	@ (80037d0 <NLLS+0x2660>)
 8003520:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003524:	f203 4359 	addw	r3, r3, #1113	@ 0x459
 8003528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 800352c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800352e:	4619      	mov	r1, r3
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd fab9 	bl	8000aa8 <__addsf3>
 8003536:	4603      	mov	r3, r0
 8003538:	461c      	mov	r4, r3
 800353a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800353e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003542:	f7fd fbb9 	bl	8000cb8 <__aeabi_fmul>
 8003546:	4603      	mov	r3, r0
 8003548:	461d      	mov	r5, r3
 800354a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800354c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800354e:	f7fd fbb3 	bl	8000cb8 <__aeabi_fmul>
 8003552:	4603      	mov	r3, r0
 8003554:	461e      	mov	r6, r3
 8003556:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003558:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800355a:	f7fd fbad 	bl	8000cb8 <__aeabi_fmul>
 800355e:	4603      	mov	r3, r0
 8003560:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd fba8 	bl	8000cb8 <__aeabi_fmul>
 8003568:	4603      	mov	r3, r0
 800356a:	4619      	mov	r1, r3
 800356c:	4630      	mov	r0, r6
 800356e:	f7fd fa99 	bl	8000aa4 <__aeabi_fsub>
 8003572:	4603      	mov	r3, r0
 8003574:	4619      	mov	r1, r3
 8003576:	4628      	mov	r0, r5
 8003578:	f7fd fb9e 	bl	8000cb8 <__aeabi_fmul>
 800357c:	4603      	mov	r3, r0
 800357e:	461d      	mov	r5, r3
 8003580:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4413      	add	r3, r2
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4619      	mov	r1, r3
 800358e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003592:	f7fd fa87 	bl	8000aa4 <__aeabi_fsub>
 8003596:	4603      	mov	r3, r0
 8003598:	4619      	mov	r1, r3
 800359a:	4628      	mov	r0, r5
 800359c:	f7fd fb8c 	bl	8000cb8 <__aeabi_fmul>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461d      	mov	r5, r3
 80035a4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80035a8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80035ac:	f7fd fb84 	bl	8000cb8 <__aeabi_fmul>
 80035b0:	4603      	mov	r3, r0
 80035b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd fb7f 	bl	8000cb8 <__aeabi_fmul>
 80035ba:	4603      	mov	r3, r0
 80035bc:	461e      	mov	r6, r3
 80035be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4413      	add	r3, r2
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4619      	mov	r1, r3
 80035cc:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80035d0:	f7fd fa68 	bl	8000aa4 <__aeabi_fsub>
 80035d4:	4603      	mov	r3, r0
 80035d6:	4619      	mov	r1, r3
 80035d8:	4630      	mov	r0, r6
 80035da:	f7fd fb6d 	bl	8000cb8 <__aeabi_fmul>
 80035de:	4603      	mov	r3, r0
 80035e0:	4619      	mov	r1, r3
 80035e2:	4628      	mov	r0, r5
 80035e4:	f7fd fa60 	bl	8000aa8 <__addsf3>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461d      	mov	r5, r3
 80035ec:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80035f0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80035f4:	f7fd fb60 	bl	8000cb8 <__aeabi_fmul>
 80035f8:	4603      	mov	r3, r0
 80035fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fd fb5b 	bl	8000cb8 <__aeabi_fmul>
 8003602:	4603      	mov	r3, r0
 8003604:	461e      	mov	r6, r3
 8003606:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	4413      	add	r3, r2
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4619      	mov	r1, r3
 8003614:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003618:	f7fd fa44 	bl	8000aa4 <__aeabi_fsub>
 800361c:	4603      	mov	r3, r0
 800361e:	4619      	mov	r1, r3
 8003620:	4630      	mov	r0, r6
 8003622:	f7fd fb49 	bl	8000cb8 <__aeabi_fmul>
 8003626:	4603      	mov	r3, r0
 8003628:	4619      	mov	r1, r3
 800362a:	4628      	mov	r0, r5
 800362c:	f7fd fa3a 	bl	8000aa4 <__aeabi_fsub>
 8003630:	4603      	mov	r3, r0
 8003632:	461d      	mov	r5, r3
 8003634:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8003638:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 800363c:	f7fd fb3c 	bl	8000cb8 <__aeabi_fmul>
 8003640:	4603      	mov	r3, r0
 8003642:	461e      	mov	r6, r3
 8003644:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003646:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003648:	f7fd fb36 	bl	8000cb8 <__aeabi_fmul>
 800364c:	4603      	mov	r3, r0
 800364e:	4698      	mov	r8, r3
 8003650:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003652:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003654:	f7fd fb30 	bl	8000cb8 <__aeabi_fmul>
 8003658:	4603      	mov	r3, r0
 800365a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800365c:	4618      	mov	r0, r3
 800365e:	f7fd fb2b 	bl	8000cb8 <__aeabi_fmul>
 8003662:	4603      	mov	r3, r0
 8003664:	4619      	mov	r1, r3
 8003666:	4640      	mov	r0, r8
 8003668:	f7fd fa1c 	bl	8000aa4 <__aeabi_fsub>
 800366c:	4603      	mov	r3, r0
 800366e:	4619      	mov	r1, r3
 8003670:	4630      	mov	r0, r6
 8003672:	f7fd fb21 	bl	8000cb8 <__aeabi_fmul>
 8003676:	4603      	mov	r3, r0
 8003678:	461e      	mov	r6, r3
 800367a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4619      	mov	r1, r3
 8003688:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800368c:	f7fd fa0a 	bl	8000aa4 <__aeabi_fsub>
 8003690:	4603      	mov	r3, r0
 8003692:	4619      	mov	r1, r3
 8003694:	4630      	mov	r0, r6
 8003696:	f7fd fb0f 	bl	8000cb8 <__aeabi_fmul>
 800369a:	4603      	mov	r3, r0
 800369c:	461e      	mov	r6, r3
 800369e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80036a2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80036a6:	f7fd fb07 	bl	8000cb8 <__aeabi_fmul>
 80036aa:	4603      	mov	r3, r0
 80036ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fb02 	bl	8000cb8 <__aeabi_fmul>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4698      	mov	r8, r3
 80036b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4619      	mov	r1, r3
 80036c6:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80036ca:	f7fd f9eb 	bl	8000aa4 <__aeabi_fsub>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4619      	mov	r1, r3
 80036d2:	4640      	mov	r0, r8
 80036d4:	f7fd faf0 	bl	8000cb8 <__aeabi_fmul>
 80036d8:	4603      	mov	r3, r0
 80036da:	4619      	mov	r1, r3
 80036dc:	4630      	mov	r0, r6
 80036de:	f7fd f9e3 	bl	8000aa8 <__addsf3>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461e      	mov	r6, r3
 80036e6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80036ea:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80036ee:	f7fd fae3 	bl	8000cb8 <__aeabi_fmul>
 80036f2:	4603      	mov	r3, r0
 80036f4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fade 	bl	8000cb8 <__aeabi_fmul>
 80036fc:	4603      	mov	r3, r0
 80036fe:	4698      	mov	r8, r3
 8003700:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	4413      	add	r3, r2
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4619      	mov	r1, r3
 800370e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003712:	f7fd f9c7 	bl	8000aa4 <__aeabi_fsub>
 8003716:	4603      	mov	r3, r0
 8003718:	4619      	mov	r1, r3
 800371a:	4640      	mov	r0, r8
 800371c:	f7fd facc 	bl	8000cb8 <__aeabi_fmul>
 8003720:	4603      	mov	r3, r0
 8003722:	4619      	mov	r1, r3
 8003724:	4630      	mov	r0, r6
 8003726:	f7fd f9bd 	bl	8000aa4 <__aeabi_fsub>
 800372a:	4603      	mov	r3, r0
 800372c:	4619      	mov	r1, r3
 800372e:	4628      	mov	r0, r5
 8003730:	f7fd fac2 	bl	8000cb8 <__aeabi_fmul>
 8003734:	4603      	mov	r3, r0
 8003736:	4619      	mov	r1, r3
 8003738:	4620      	mov	r0, r4
 800373a:	f7fd fabd 	bl	8000cb8 <__aeabi_fmul>
 800373e:	4603      	mov	r3, r0
 8003740:	461c      	mov	r4, r3
 8003742:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8003746:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800374a:	f7fd fab5 	bl	8000cb8 <__aeabi_fmul>
 800374e:	4603      	mov	r3, r0
 8003750:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8003754:	4618      	mov	r0, r3
 8003756:	f7fd faaf 	bl	8000cb8 <__aeabi_fmul>
 800375a:	4603      	mov	r3, r0
 800375c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd faa9 	bl	8000cb8 <__aeabi_fmul>
 8003766:	4603      	mov	r3, r0
 8003768:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd faa3 	bl	8000cb8 <__aeabi_fmul>
 8003772:	4603      	mov	r3, r0
 8003774:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8003778:	4618      	mov	r0, r3
 800377a:	f7fd fa9d 	bl	8000cb8 <__aeabi_fmul>
 800377e:	4603      	mov	r3, r0
 8003780:	461d      	mov	r5, r3
 8003782:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003784:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003786:	f7fd fa97 	bl	8000cb8 <__aeabi_fmul>
 800378a:	4603      	mov	r3, r0
 800378c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800378e:	4618      	mov	r0, r3
 8003790:	f7fd fa92 	bl	8000cb8 <__aeabi_fmul>
 8003794:	4603      	mov	r3, r0
 8003796:	4619      	mov	r1, r3
 8003798:	4628      	mov	r0, r5
 800379a:	f7fd fa8d 	bl	8000cb8 <__aeabi_fmul>
 800379e:	4603      	mov	r3, r0
 80037a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fd fa88 	bl	8000cb8 <__aeabi_fmul>
 80037a8:	4603      	mov	r3, r0
 80037aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fd fa83 	bl	8000cb8 <__aeabi_fmul>
 80037b2:	4603      	mov	r3, r0
 80037b4:	461d      	mov	r5, r3
 80037b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037b8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80037ba:	f7fd fa7d 	bl	8000cb8 <__aeabi_fmul>
 80037be:	4603      	mov	r3, r0
 80037c0:	4619      	mov	r1, r3
 80037c2:	4628      	mov	r0, r5
 80037c4:	f7fd fa78 	bl	8000cb8 <__aeabi_fmul>
 80037c8:	4603      	mov	r3, r0
 80037ca:	4619      	mov	r1, r3
 80037cc:	e002      	b.n	80037d4 <NLLS+0x2664>
 80037ce:	bf00      	nop
 80037d0:	20002f8c 	.word	0x20002f8c
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7fd fb23 	bl	8000e20 <__aeabi_fdiv>
 80037da:	4603      	mov	r3, r0
 80037dc:	461c      	mov	r4, r3
 80037de:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80037e2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80037e6:	f7fd fa67 	bl	8000cb8 <__aeabi_fmul>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461d      	mov	r5, r3
 80037ee:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80037f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80037f2:	f7fd fa61 	bl	8000cb8 <__aeabi_fmul>
 80037f6:	4603      	mov	r3, r0
 80037f8:	461e      	mov	r6, r3
 80037fa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80037fc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80037fe:	f7fd fa5b 	bl	8000cb8 <__aeabi_fmul>
 8003802:	4603      	mov	r3, r0
 8003804:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd fa56 	bl	8000cb8 <__aeabi_fmul>
 800380c:	4603      	mov	r3, r0
 800380e:	4619      	mov	r1, r3
 8003810:	4630      	mov	r0, r6
 8003812:	f7fd f949 	bl	8000aa8 <__addsf3>
 8003816:	4603      	mov	r3, r0
 8003818:	4619      	mov	r1, r3
 800381a:	4628      	mov	r0, r5
 800381c:	f7fd fa4c 	bl	8000cb8 <__aeabi_fmul>
 8003820:	4603      	mov	r3, r0
 8003822:	461d      	mov	r5, r3
 8003824:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4413      	add	r3, r2
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4619      	mov	r1, r3
 8003832:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003836:	f7fd f935 	bl	8000aa4 <__aeabi_fsub>
 800383a:	4603      	mov	r3, r0
 800383c:	4619      	mov	r1, r3
 800383e:	4628      	mov	r0, r5
 8003840:	f7fd fa3a 	bl	8000cb8 <__aeabi_fmul>
 8003844:	4603      	mov	r3, r0
 8003846:	461d      	mov	r5, r3
 8003848:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800384c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8003850:	f7fd fa32 	bl	8000cb8 <__aeabi_fmul>
 8003854:	4603      	mov	r3, r0
 8003856:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003858:	4618      	mov	r0, r3
 800385a:	f7fd fa2d 	bl	8000cb8 <__aeabi_fmul>
 800385e:	4603      	mov	r3, r0
 8003860:	461e      	mov	r6, r3
 8003862:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	4413      	add	r3, r2
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4619      	mov	r1, r3
 8003870:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003874:	f7fd f916 	bl	8000aa4 <__aeabi_fsub>
 8003878:	4603      	mov	r3, r0
 800387a:	4619      	mov	r1, r3
 800387c:	4630      	mov	r0, r6
 800387e:	f7fd fa1b 	bl	8000cb8 <__aeabi_fmul>
 8003882:	4603      	mov	r3, r0
 8003884:	4619      	mov	r1, r3
 8003886:	4628      	mov	r0, r5
 8003888:	f7fd f90c 	bl	8000aa4 <__aeabi_fsub>
 800388c:	4603      	mov	r3, r0
 800388e:	4619      	mov	r1, r3
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd f909 	bl	8000aa8 <__addsf3>
 8003896:	4603      	mov	r3, r0
 8003898:	461d      	mov	r5, r3
 800389a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800389e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80038a2:	f7fd fa09 	bl	8000cb8 <__aeabi_fmul>
 80038a6:	4603      	mov	r3, r0
 80038a8:	461e      	mov	r6, r3
 80038aa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80038ac:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80038ae:	f7fd fa03 	bl	8000cb8 <__aeabi_fmul>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4698      	mov	r8, r3
 80038b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80038ba:	f7fd f9fd 	bl	8000cb8 <__aeabi_fmul>
 80038be:	4603      	mov	r3, r0
 80038c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd f9f8 	bl	8000cb8 <__aeabi_fmul>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4619      	mov	r1, r3
 80038cc:	4640      	mov	r0, r8
 80038ce:	f7fd f8e9 	bl	8000aa4 <__aeabi_fsub>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4619      	mov	r1, r3
 80038d6:	4630      	mov	r0, r6
 80038d8:	f7fd f9ee 	bl	8000cb8 <__aeabi_fmul>
 80038dc:	4603      	mov	r3, r0
 80038de:	461e      	mov	r6, r3
 80038e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4413      	add	r3, r2
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4619      	mov	r1, r3
 80038ee:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80038f2:	f7fd f8d7 	bl	8000aa4 <__aeabi_fsub>
 80038f6:	4603      	mov	r3, r0
 80038f8:	4619      	mov	r1, r3
 80038fa:	4630      	mov	r0, r6
 80038fc:	f7fd f9dc 	bl	8000cb8 <__aeabi_fmul>
 8003900:	4603      	mov	r3, r0
 8003902:	461e      	mov	r6, r3
 8003904:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8003908:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800390c:	f7fd f9d4 	bl	8000cb8 <__aeabi_fmul>
 8003910:	4603      	mov	r3, r0
 8003912:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd f9cf 	bl	8000cb8 <__aeabi_fmul>
 800391a:	4603      	mov	r3, r0
 800391c:	4698      	mov	r8, r3
 800391e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4619      	mov	r1, r3
 800392c:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003930:	f7fd f8b8 	bl	8000aa4 <__aeabi_fsub>
 8003934:	4603      	mov	r3, r0
 8003936:	4619      	mov	r1, r3
 8003938:	4640      	mov	r0, r8
 800393a:	f7fd f9bd 	bl	8000cb8 <__aeabi_fmul>
 800393e:	4603      	mov	r3, r0
 8003940:	4619      	mov	r1, r3
 8003942:	4630      	mov	r0, r6
 8003944:	f7fd f8b0 	bl	8000aa8 <__addsf3>
 8003948:	4603      	mov	r3, r0
 800394a:	461e      	mov	r6, r3
 800394c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8003950:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8003954:	f7fd f9b0 	bl	8000cb8 <__aeabi_fmul>
 8003958:	4603      	mov	r3, r0
 800395a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800395c:	4618      	mov	r0, r3
 800395e:	f7fd f9ab 	bl	8000cb8 <__aeabi_fmul>
 8003962:	4603      	mov	r3, r0
 8003964:	4698      	mov	r8, r3
 8003966:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	4413      	add	r3, r2
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4619      	mov	r1, r3
 8003974:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003978:	f7fd f894 	bl	8000aa4 <__aeabi_fsub>
 800397c:	4603      	mov	r3, r0
 800397e:	4619      	mov	r1, r3
 8003980:	4640      	mov	r0, r8
 8003982:	f7fd f999 	bl	8000cb8 <__aeabi_fmul>
 8003986:	4603      	mov	r3, r0
 8003988:	4619      	mov	r1, r3
 800398a:	4630      	mov	r0, r6
 800398c:	f7fd f88a 	bl	8000aa4 <__aeabi_fsub>
 8003990:	4603      	mov	r3, r0
 8003992:	4619      	mov	r1, r3
 8003994:	4628      	mov	r0, r5
 8003996:	f7fd f98f 	bl	8000cb8 <__aeabi_fmul>
 800399a:	4603      	mov	r3, r0
 800399c:	461d      	mov	r5, r3
 800399e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80039a2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80039a6:	f7fd f987 	bl	8000cb8 <__aeabi_fmul>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fd f981 	bl	8000cb8 <__aeabi_fmul>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd f97b 	bl	8000cb8 <__aeabi_fmul>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd f975 	bl	8000cb8 <__aeabi_fmul>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fd f96f 	bl	8000cb8 <__aeabi_fmul>
 80039da:	4603      	mov	r3, r0
 80039dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd f96a 	bl	8000cb8 <__aeabi_fmul>
 80039e4:	4603      	mov	r3, r0
 80039e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fd f965 	bl	8000cb8 <__aeabi_fmul>
 80039ee:	4603      	mov	r3, r0
 80039f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd f960 	bl	8000cb8 <__aeabi_fmul>
 80039f8:	4603      	mov	r3, r0
 80039fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fd f95b 	bl	8000cb8 <__aeabi_fmul>
 8003a02:	4603      	mov	r3, r0
 8003a04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd f956 	bl	8000cb8 <__aeabi_fmul>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fd f951 	bl	8000cb8 <__aeabi_fmul>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f7fd fa00 	bl	8000e20 <__aeabi_fdiv>
 8003a20:	4603      	mov	r3, r0
 8003a22:	4619      	mov	r1, r3
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7fd f83f 	bl	8000aa8 <__addsf3>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4aa2      	ldr	r2, [pc, #648]	@ (8003cb8 <NLLS+0x2b48>)
 8003a30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a34:	f503 639f 	add.w	r3, r3, #1272	@ 0x4f8
 8003a38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i < tam; i++)
 8003a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a40:	3301      	adds	r3, #1
 8003a42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003a4a:	2b9e      	cmp	r3, #158	@ 0x9e
 8003a4c:	f77d ac6e 	ble.w	800132c <NLLS+0x1bc>
		}

		J = 0;
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

		for(int i=0; i < tam; i++)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a5c:	e01d      	b.n	8003a9a <NLLS+0x292a>
		{
			J += (e[i] * e[i])/2;
 8003a5e:	4a97      	ldr	r2, [pc, #604]	@ (8003cbc <NLLS+0x2b4c>)
 8003a60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a66:	4995      	ldr	r1, [pc, #596]	@ (8003cbc <NLLS+0x2b4c>)
 8003a68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f7fd f921 	bl	8000cb8 <__aeabi_fmul>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fd f9cf 	bl	8000e20 <__aeabi_fdiv>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4619      	mov	r1, r3
 8003a86:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003a8a:	f7fd f80d 	bl	8000aa8 <__addsf3>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		for(int i=0; i < tam; i++)
 8003a94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a96:	3301      	adds	r3, #1
 8003a98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a9c:	2b9e      	cmp	r3, #158	@ 0x9e
 8003a9e:	ddde      	ble.n	8003a5e <NLLS+0x28ee>
		}

		if(passo < 2)
 8003aa0:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d804      	bhi.n	8003ab2 <NLLS+0x2942>
		{
			error_ant = J;
 8003aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003aac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ab0:	e038      	b.n	8003b24 <NLLS+0x29b4>
		}
		else
		{
			delta_J = 100*fabs(J-error_ant)/J;
 8003ab2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8003ab6:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003aba:	f7fc fff3 	bl	8000aa4 <__aeabi_fsub>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fc fca7 	bl	8000418 <__aeabi_f2d>
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	4b7c      	ldr	r3, [pc, #496]	@ (8003cc0 <NLLS+0x2b50>)
 8003ad0:	f7fc fcfa 	bl	80004c8 <__aeabi_dmul>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4614      	mov	r4, r2
 8003ada:	461d      	mov	r5, r3
 8003adc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8003ae0:	f7fc fc9a 	bl	8000418 <__aeabi_f2d>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4620      	mov	r0, r4
 8003aea:	4629      	mov	r1, r5
 8003aec:	f7fc fe16 	bl	800071c <__aeabi_ddiv>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	f7fc ff80 	bl	80009fc <__aeabi_d2f>
 8003afc:	4603      	mov	r3, r0
 8003afe:	63bb      	str	r3, [r7, #56]	@ 0x38
			if(delta_J < 0.05)
 8003b00:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003b02:	f7fc fc89 	bl	8000418 <__aeabi_f2d>
 8003b06:	a36a      	add	r3, pc, #424	@ (adr r3, 8003cb0 <NLLS+0x2b40>)
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f7fc ff4e 	bl	80009ac <__aeabi_dcmplt>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <NLLS+0x29ac>
			{
				loop = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
			}
			error_ant = J;
 8003b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		}

		for(int i = 0; i < N; i++)
 8003b24:	2300      	movs	r3, #0
 8003b26:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b28:	e051      	b.n	8003bce <NLLS+0x2a5e>
		{
			for(int j = 0; j < N; j++)
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b2e:	e048      	b.n	8003bc2 <NLLS+0x2a52>
			{
				Ht_H[i][j] = 0;
 8003b30:	4964      	ldr	r1, [pc, #400]	@ (8003cc4 <NLLS+0x2b54>)
 8003b32:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int k = 0; k < tam; k++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b4a:	e034      	b.n	8003bb6 <NLLS+0x2a46>
				{
					Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 8003b4c:	495d      	ldr	r1, [pc, #372]	@ (8003cc4 <NLLS+0x2b54>)
 8003b4e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b58:	4413      	add	r3, r2
 8003b5a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003b5e:	4956      	ldr	r1, [pc, #344]	@ (8003cb8 <NLLS+0x2b48>)
 8003b60:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	015b      	lsls	r3, r3, #5
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003b6e:	4413      	add	r3, r2
 8003b70:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8003b74:	4950      	ldr	r1, [pc, #320]	@ (8003cb8 <NLLS+0x2b48>)
 8003b76:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	015b      	lsls	r3, r3, #5
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003b84:	4413      	add	r3, r2
 8003b86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	f7fd f894 	bl	8000cb8 <__aeabi_fmul>
 8003b90:	4603      	mov	r3, r0
 8003b92:	4619      	mov	r1, r3
 8003b94:	4620      	mov	r0, r4
 8003b96:	f7fc ff87 	bl	8000aa8 <__addsf3>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	4949      	ldr	r1, [pc, #292]	@ (8003cc4 <NLLS+0x2b54>)
 8003ba0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003baa:	4413      	add	r3, r2
 8003bac:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for(int k = 0; k < tam; k++)
 8003bb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bb8:	2b9e      	cmp	r3, #158	@ 0x9e
 8003bba:	ddc7      	ble.n	8003b4c <NLLS+0x29dc>
			for(int j = 0; j < N; j++)
 8003bbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	677b      	str	r3, [r7, #116]	@ 0x74
 8003bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	ddb3      	ble.n	8003b30 <NLLS+0x29c0>
		for(int i = 0; i < N; i++)
 8003bc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bca:	3301      	adds	r3, #1
 8003bcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	ddaa      	ble.n	8003b2a <NLLS+0x29ba>
				}
			}
		}

		inverter_matriz(Ht_H, inv);
 8003bd4:	493c      	ldr	r1, [pc, #240]	@ (8003cc8 <NLLS+0x2b58>)
 8003bd6:	483b      	ldr	r0, [pc, #236]	@ (8003cc4 <NLLS+0x2b54>)
 8003bd8:	f7fd f9be 	bl	8000f58 <inverter_matriz>

		for(int i = 0; i < N; i++)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003be0:	e055      	b.n	8003c8e <NLLS+0x2b1e>
		{
			for(int j = 0; j < tam; j++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003be6:	e04c      	b.n	8003c82 <NLLS+0x2b12>
			{
				mul_mat[i][j] = 0;
 8003be8:	4938      	ldr	r1, [pc, #224]	@ (8003ccc <NLLS+0x2b5c>)
 8003bea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	015b      	lsls	r3, r3, #5
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int k = 0; k < N; k++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c06:	e036      	b.n	8003c76 <NLLS+0x2b06>
				{
					mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8003c08:	4930      	ldr	r1, [pc, #192]	@ (8003ccc <NLLS+0x2b5c>)
 8003c0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	015b      	lsls	r3, r3, #5
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c18:	4413      	add	r3, r2
 8003c1a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003c1e:	492a      	ldr	r1, [pc, #168]	@ (8003cc8 <NLLS+0x2b58>)
 8003c20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8003c30:	4921      	ldr	r1, [pc, #132]	@ (8003cb8 <NLLS+0x2b48>)
 8003c32:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	015b      	lsls	r3, r3, #5
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c40:	4413      	add	r3, r2
 8003c42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c46:	4619      	mov	r1, r3
 8003c48:	f7fd f836 	bl	8000cb8 <__aeabi_fmul>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4620      	mov	r0, r4
 8003c52:	f7fc ff29 	bl	8000aa8 <__addsf3>
 8003c56:	4603      	mov	r3, r0
 8003c58:	4618      	mov	r0, r3
 8003c5a:	491c      	ldr	r1, [pc, #112]	@ (8003ccc <NLLS+0x2b5c>)
 8003c5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	015b      	lsls	r3, r3, #5
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for(int k = 0; k < N; k++)
 8003c70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c72:	3301      	adds	r3, #1
 8003c74:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	ddc5      	ble.n	8003c08 <NLLS+0x2a98>
			for(int j = 0; j < tam; j++)
 8003c7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c7e:	3301      	adds	r3, #1
 8003c80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c84:	2b9e      	cmp	r3, #158	@ 0x9e
 8003c86:	ddaf      	ble.n	8003be8 <NLLS+0x2a78>
		for(int i = 0; i < N; i++)
 8003c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	dda6      	ble.n	8003be2 <NLLS+0x2a72>
				}
			}
		}

		for(int i = 0; i < N; i++)
 8003c94:	2300      	movs	r3, #0
 8003c96:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c98:	e047      	b.n	8003d2a <NLLS+0x2bba>
		{
			Ht_e[i] = 0;
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd0 <NLLS+0x2b60>)
 8003c9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c9e:	f04f 0100 	mov.w	r1, #0
 8003ca2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 0; j < tam; j++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003caa:	e038      	b.n	8003d1e <NLLS+0x2bae>
 8003cac:	f3af 8000 	nop.w
 8003cb0:	9999999a 	.word	0x9999999a
 8003cb4:	3fa99999 	.word	0x3fa99999
 8003cb8:	20002f8c 	.word	0x20002f8c
 8003cbc:	20002a94 	.word	0x20002a94
 8003cc0:	40590000 	.word	0x40590000
 8003cc4:	20000f10 	.word	0x20000f10
 8003cc8:	20001078 	.word	0x20001078
 8003ccc:	200011bc 	.word	0x200011bc
 8003cd0:	20001054 	.word	0x20001054
			{
				Ht_e[i] += mul_mat[i][j]*e[j];
 8003cd4:	4a44      	ldr	r2, [pc, #272]	@ (8003de8 <NLLS+0x2c78>)
 8003cd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cd8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003cdc:	4943      	ldr	r1, [pc, #268]	@ (8003dec <NLLS+0x2c7c>)
 8003cde:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	015b      	lsls	r3, r3, #5
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003cec:	4413      	add	r3, r2
 8003cee:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8003cf2:	493f      	ldr	r1, [pc, #252]	@ (8003df0 <NLLS+0x2c80>)
 8003cf4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f7fc ffdb 	bl	8000cb8 <__aeabi_fmul>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4619      	mov	r1, r3
 8003d06:	4620      	mov	r0, r4
 8003d08:	f7fc fece 	bl	8000aa8 <__addsf3>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4a35      	ldr	r2, [pc, #212]	@ (8003de8 <NLLS+0x2c78>)
 8003d12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 0; j < tam; j++)
 8003d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d20:	2b9e      	cmp	r3, #158	@ 0x9e
 8003d22:	ddd7      	ble.n	8003cd4 <NLLS+0x2b64>
		for(int i = 0; i < N; i++)
 8003d24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d26:	3301      	adds	r3, #1
 8003d28:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	ddb4      	ble.n	8003c9a <NLLS+0x2b2a>
			}
		}

		for(int i = 0; i < N; i++)
 8003d30:	2300      	movs	r3, #0
 8003d32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d34:	e018      	b.n	8003d68 <NLLS+0x2bf8>
		{
			p0[i] += Ht_e[i];
 8003d36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	33b8      	adds	r3, #184	@ 0xb8
 8003d3c:	443b      	add	r3, r7
 8003d3e:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 8003d42:	4929      	ldr	r1, [pc, #164]	@ (8003de8 <NLLS+0x2c78>)
 8003d44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	f7fc feab 	bl	8000aa8 <__addsf3>
 8003d52:	4603      	mov	r3, r0
 8003d54:	461a      	mov	r2, r3
 8003d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	33b8      	adds	r3, #184	@ 0xb8
 8003d5c:	443b      	add	r3, r7
 8003d5e:	f843 2ca4 	str.w	r2, [r3, #-164]
		for(int i = 0; i < N; i++)
 8003d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d64:	3301      	adds	r3, #1
 8003d66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	dde3      	ble.n	8003d36 <NLLS+0x2bc6>
		}

		passo++;
 8003d6e:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8003d72:	3301      	adds	r3, #1
 8003d74:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	while(loop == 1)
 8003d78:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	f43d aa27 	beq.w	80011d0 <NLLS+0x60>
	}
    p[0] = sx;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d88:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d92:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d9c:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003da6:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	3310      	adds	r3, #16
 8003dac:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003db0:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	3314      	adds	r3, #20
 8003db6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8003dba:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	3318      	adds	r3, #24
 8003dc0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003dc4:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	331c      	adds	r3, #28
 8003dca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dce:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	3320      	adds	r3, #32
 8003dd4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003dd8:	601a      	str	r2, [r3, #0]

    return passo;
 8003dda:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	37bc      	adds	r7, #188	@ 0xbc
 8003de2:	46bd      	mov	sp, r7
 8003de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003de8:	20001054 	.word	0x20001054
 8003dec:	200011bc 	.word	0x200011bc
 8003df0:	20002a94 	.word	0x20002a94

08003df4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfa:	f107 0310 	add.w	r3, r7, #16
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e08:	4b24      	ldr	r3, [pc, #144]	@ (8003e9c <MX_GPIO_Init+0xa8>)
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	4a23      	ldr	r2, [pc, #140]	@ (8003e9c <MX_GPIO_Init+0xa8>)
 8003e0e:	f043 0320 	orr.w	r3, r3, #32
 8003e12:	6193      	str	r3, [r2, #24]
 8003e14:	4b21      	ldr	r3, [pc, #132]	@ (8003e9c <MX_GPIO_Init+0xa8>)
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e20:	4b1e      	ldr	r3, [pc, #120]	@ (8003e9c <MX_GPIO_Init+0xa8>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	4a1d      	ldr	r2, [pc, #116]	@ (8003e9c <MX_GPIO_Init+0xa8>)
 8003e26:	f043 0308 	orr.w	r3, r3, #8
 8003e2a:	6193      	str	r3, [r2, #24]
 8003e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e9c <MX_GPIO_Init+0xa8>)
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e38:	4b18      	ldr	r3, [pc, #96]	@ (8003e9c <MX_GPIO_Init+0xa8>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	@ (8003e9c <MX_GPIO_Init+0xa8>)
 8003e3e:	f043 0304 	orr.w	r3, r3, #4
 8003e42:	6193      	str	r3, [r2, #24]
 8003e44:	4b15      	ldr	r3, [pc, #84]	@ (8003e9c <MX_GPIO_Init+0xa8>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	607b      	str	r3, [r7, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SINC_slave_GPIO_Port, SINC_slave_Pin, GPIO_PIN_RESET);
 8003e50:	2200      	movs	r2, #0
 8003e52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e56:	4812      	ldr	r0, [pc, #72]	@ (8003ea0 <MX_GPIO_Init+0xac>)
 8003e58:	f000 fd4d 	bl	80048f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_slave_Pin;
 8003e5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e62:	2301      	movs	r3, #1
 8003e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e66:	2302      	movs	r3, #2
 8003e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SINC_slave_GPIO_Port, &GPIO_InitStruct);
 8003e6e:	f107 0310 	add.w	r3, r7, #16
 8003e72:	4619      	mov	r1, r3
 8003e74:	480a      	ldr	r0, [pc, #40]	@ (8003ea0 <MX_GPIO_Init+0xac>)
 8003e76:	f000 fba3 	bl	80045c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_mater_Pin;
 8003e7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e84:	2302      	movs	r3, #2
 8003e86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SINC_mater_GPIO_Port, &GPIO_InitStruct);
 8003e88:	f107 0310 	add.w	r3, r7, #16
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4804      	ldr	r0, [pc, #16]	@ (8003ea0 <MX_GPIO_Init+0xac>)
 8003e90:	f000 fb96 	bl	80045c0 <HAL_GPIO_Init>

}
 8003e94:	bf00      	nop
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40010800 	.word	0x40010800

08003ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08e      	sub	sp, #56	@ 0x38
 8003ea8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003eaa:	f000 fa43 	bl	8004334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003eae:	f000 f8ed 	bl	800408c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003eb2:	f7ff ff9f 	bl	8003df4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8003eb6:	f000 f935 	bl	8004124 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  union calib_t param[9], time;
  uint32_t start_time = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 8003ebe:	bf00      	nop
 8003ec0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ec4:	4867      	ldr	r0, [pc, #412]	@ (8004064 <main+0x1c0>)
 8003ec6:	f000 fcff 	bl	80048c8 <HAL_GPIO_ReadPin>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f7      	beq.n	8003ec0 <main+0x1c>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ed6:	4863      	ldr	r0, [pc, #396]	@ (8004064 <main+0x1c0>)
 8003ed8:	f000 fd0d 	bl	80048f6 <HAL_GPIO_WritePin>

	  for(uint16_t i = 0; i<=tam; i++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003ee0:	e00c      	b.n	8003efc <main+0x58>
	  {
		  HAL_SPI_Receive(&hspi2, mx_[i].inteiro, 4, 1000);
 8003ee2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4a60      	ldr	r2, [pc, #384]	@ (8004068 <main+0x1c4>)
 8003ee8:	1899      	adds	r1, r3, r2
 8003eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eee:	2204      	movs	r2, #4
 8003ef0:	485e      	ldr	r0, [pc, #376]	@ (800406c <main+0x1c8>)
 8003ef2:	f001 fabf 	bl	8005474 <HAL_SPI_Receive>
	  for(uint16_t i = 0; i<=tam; i++)
 8003ef6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003ef8:	3301      	adds	r3, #1
 8003efa:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003efc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003efe:	2b9f      	cmp	r3, #159	@ 0x9f
 8003f00:	d9ef      	bls.n	8003ee2 <main+0x3e>
	  }
	  for(uint16_t i = 0; i<=tam; i++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003f06:	e00c      	b.n	8003f22 <main+0x7e>
	  {
		  HAL_SPI_Receive(&hspi2, my_[i].inteiro, 4, 1000);
 8003f08:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4a58      	ldr	r2, [pc, #352]	@ (8004070 <main+0x1cc>)
 8003f0e:	1899      	adds	r1, r3, r2
 8003f10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f14:	2204      	movs	r2, #4
 8003f16:	4855      	ldr	r0, [pc, #340]	@ (800406c <main+0x1c8>)
 8003f18:	f001 faac 	bl	8005474 <HAL_SPI_Receive>
	  for(uint16_t i = 0; i<=tam; i++)
 8003f1c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003f1e:	3301      	adds	r3, #1
 8003f20:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003f22:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003f24:	2b9f      	cmp	r3, #159	@ 0x9f
 8003f26:	d9ef      	bls.n	8003f08 <main+0x64>
	  }
	  for(uint16_t i = 0; i<=tam; i++)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	867b      	strh	r3, [r7, #50]	@ 0x32
 8003f2c:	e00c      	b.n	8003f48 <main+0xa4>
	  {
		  HAL_SPI_Receive(&hspi2, mz_[i].inteiro, 4, 1000);
 8003f2e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4a50      	ldr	r2, [pc, #320]	@ (8004074 <main+0x1d0>)
 8003f34:	1899      	adds	r1, r3, r2
 8003f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	484b      	ldr	r0, [pc, #300]	@ (800406c <main+0x1c8>)
 8003f3e:	f001 fa99 	bl	8005474 <HAL_SPI_Receive>
	  for(uint16_t i = 0; i<=tam; i++)
 8003f42:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003f44:	3301      	adds	r3, #1
 8003f46:	867b      	strh	r3, [r7, #50]	@ 0x32
 8003f48:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003f4a:	2b9f      	cmp	r3, #159	@ 0x9f
 8003f4c:	d9ef      	bls.n	8003f2e <main+0x8a>
	  }
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003f54:	4843      	ldr	r0, [pc, #268]	@ (8004064 <main+0x1c0>)
 8003f56:	f000 fcce 	bl	80048f6 <HAL_GPIO_WritePin>

	  for(uint16_t i = 0; i<=tam; i++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	863b      	strh	r3, [r7, #48]	@ 0x30
 8003f5e:	e01a      	b.n	8003f96 <main+0xf2>
	  {
		  mx[i] = mx_[i].flutuante;
 8003f60:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003f62:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003f64:	4940      	ldr	r1, [pc, #256]	@ (8004068 <main+0x1c4>)
 8003f66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003f6a:	4943      	ldr	r1, [pc, #268]	@ (8004078 <main+0x1d4>)
 8003f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  my[i] = my_[i].flutuante;
 8003f70:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003f72:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003f74:	493e      	ldr	r1, [pc, #248]	@ (8004070 <main+0x1cc>)
 8003f76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003f7a:	4940      	ldr	r1, [pc, #256]	@ (800407c <main+0x1d8>)
 8003f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  mz[i] = mz_[i].flutuante;
 8003f80:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003f82:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003f84:	493b      	ldr	r1, [pc, #236]	@ (8004074 <main+0x1d0>)
 8003f86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003f8a:	493d      	ldr	r1, [pc, #244]	@ (8004080 <main+0x1dc>)
 8003f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(uint16_t i = 0; i<=tam; i++)
 8003f90:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003f92:	3301      	adds	r3, #1
 8003f94:	863b      	strh	r3, [r7, #48]	@ 0x30
 8003f96:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003f98:	2b9f      	cmp	r3, #159	@ 0x9f
 8003f9a:	d9e1      	bls.n	8003f60 <main+0xbc>

	  /*start_time = HAL_GetTick();
	  ETS(mx, my, mz, p1);
	  time.flutuante = HAL_GetTick() - start_time;*/

	  start_time = HAL_GetTick();
 8003f9c:	f000 fa22 	bl	80043e4 <HAL_GetTick>
 8003fa0:	62b8      	str	r0, [r7, #40]	@ 0x28
	  passos_NLLS = NLLS(mx, my, mz, p1);
 8003fa2:	4b38      	ldr	r3, [pc, #224]	@ (8004084 <main+0x1e0>)
 8003fa4:	4a36      	ldr	r2, [pc, #216]	@ (8004080 <main+0x1dc>)
 8003fa6:	4935      	ldr	r1, [pc, #212]	@ (800407c <main+0x1d8>)
 8003fa8:	4833      	ldr	r0, [pc, #204]	@ (8004078 <main+0x1d4>)
 8003faa:	f7fd f8e1 	bl	8001170 <NLLS>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b35      	ldr	r3, [pc, #212]	@ (8004088 <main+0x1e4>)
 8003fb4:	701a      	strb	r2, [r3, #0]
	  time.flutuante = HAL_GetTick() - start_time;
 8003fb6:	f000 fa15 	bl	80043e4 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fc fe21 	bl	8000c08 <__aeabi_ui2f>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	603b      	str	r3, [r7, #0]



	  for(uint8_t i = 0; i < 10; i++)
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003fd0:	e010      	b.n	8003ff4 <main+0x150>
	  {
		  param[i].flutuante = p1[i];
 8003fd2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fda:	492a      	ldr	r1, [pc, #168]	@ (8004084 <main+0x1e0>)
 8003fdc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	3338      	adds	r3, #56	@ 0x38
 8003fe4:	443b      	add	r3, r7
 8003fe6:	f843 2c34 	str.w	r2, [r3, #-52]
	  for(uint8_t i = 0; i < 10; i++)
 8003fea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fee:	3301      	adds	r3, #1
 8003ff0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ff8:	2b09      	cmp	r3, #9
 8003ffa:	d9ea      	bls.n	8003fd2 <main+0x12e>
	  }

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004002:	4818      	ldr	r0, [pc, #96]	@ (8004064 <main+0x1c0>)
 8004004:	f000 fc77 	bl	80048f6 <HAL_GPIO_WritePin>

	  for(uint8_t i = 0; i < 10; i++)
 8004008:	2300      	movs	r3, #0
 800400a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800400e:	e00f      	b.n	8004030 <main+0x18c>
	  {
		  HAL_SPI_Transmit(&hspi2, param[i].inteiro, 4, HAL_MAX_DELAY);
 8004010:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004014:	1d3a      	adds	r2, r7, #4
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	18d1      	adds	r1, r2, r3
 800401a:	f04f 33ff 	mov.w	r3, #4294967295
 800401e:	2204      	movs	r2, #4
 8004020:	4812      	ldr	r0, [pc, #72]	@ (800406c <main+0x1c8>)
 8004022:	f001 f8e3 	bl	80051ec <HAL_SPI_Transmit>
	  for(uint8_t i = 0; i < 10; i++)
 8004026:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800402a:	3301      	adds	r3, #1
 800402c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004030:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004034:	2b09      	cmp	r3, #9
 8004036:	d9eb      	bls.n	8004010 <main+0x16c>
	  }
	  HAL_SPI_Transmit(&hspi2, time.inteiro, 4, HAL_MAX_DELAY);
 8004038:	4639      	mov	r1, r7
 800403a:	f04f 33ff 	mov.w	r3, #4294967295
 800403e:	2204      	movs	r2, #4
 8004040:	480a      	ldr	r0, [pc, #40]	@ (800406c <main+0x1c8>)
 8004042:	f001 f8d3 	bl	80051ec <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, &passos_NLLS, 1, HAL_MAX_DELAY);
 8004046:	f04f 33ff 	mov.w	r3, #4294967295
 800404a:	2201      	movs	r2, #1
 800404c:	490e      	ldr	r1, [pc, #56]	@ (8004088 <main+0x1e4>)
 800404e:	4807      	ldr	r0, [pc, #28]	@ (800406c <main+0x1c8>)
 8004050:	f001 f8cc 	bl	80051ec <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8004054:	2200      	movs	r2, #0
 8004056:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800405a:	4802      	ldr	r0, [pc, #8]	@ (8004064 <main+0x1c0>)
 800405c:	f000 fc4b 	bl	80048f6 <HAL_GPIO_WritePin>
	  while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 8004060:	e72d      	b.n	8003ebe <main+0x1a>
 8004062:	bf00      	nop
 8004064:	40010800 	.word	0x40010800
 8004068:	2000079c 	.word	0x2000079c
 800406c:	20004610 	.word	0x20004610
 8004070:	20000a18 	.word	0x20000a18
 8004074:	20000c94 	.word	0x20000c94
 8004078:	20000028 	.word	0x20000028
 800407c:	200002a4 	.word	0x200002a4
 8004080:	20000520 	.word	0x20000520
 8004084:	200045e8 	.word	0x200045e8
 8004088:	2000460c 	.word	0x2000460c

0800408c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b090      	sub	sp, #64	@ 0x40
 8004090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004092:	f107 0318 	add.w	r3, r7, #24
 8004096:	2228      	movs	r2, #40	@ 0x28
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f001 fdb7 	bl	8005c0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	609a      	str	r2, [r3, #8]
 80040aa:	60da      	str	r2, [r3, #12]
 80040ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80040ae:	2301      	movs	r3, #1
 80040b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80040b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80040b8:	2300      	movs	r3, #0
 80040ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040bc:	2301      	movs	r3, #1
 80040be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040c0:	2302      	movs	r3, #2
 80040c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80040c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80040ca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80040ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040d0:	f107 0318 	add.w	r3, r7, #24
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fc27 	bl	8004928 <HAL_RCC_OscConfig>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80040e0:	f000 f819 	bl	8004116 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040e4:	230f      	movs	r3, #15
 80040e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040e8:	2302      	movs	r3, #2
 80040ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040fa:	1d3b      	adds	r3, r7, #4
 80040fc:	2102      	movs	r1, #2
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fe94 	bl	8004e2c <HAL_RCC_ClockConfig>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800410a:	f000 f804 	bl	8004116 <Error_Handler>
  }
}
 800410e:	bf00      	nop
 8004110:	3740      	adds	r7, #64	@ 0x40
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004116:	b480      	push	{r7}
 8004118:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800411a:	b672      	cpsid	i
}
 800411c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800411e:	bf00      	nop
 8004120:	e7fd      	b.n	800411e <Error_Handler+0x8>
	...

08004124 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004128:	4b15      	ldr	r3, [pc, #84]	@ (8004180 <MX_SPI2_Init+0x5c>)
 800412a:	4a16      	ldr	r2, [pc, #88]	@ (8004184 <MX_SPI2_Init+0x60>)
 800412c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800412e:	4b14      	ldr	r3, [pc, #80]	@ (8004180 <MX_SPI2_Init+0x5c>)
 8004130:	2200      	movs	r2, #0
 8004132:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004134:	4b12      	ldr	r3, [pc, #72]	@ (8004180 <MX_SPI2_Init+0x5c>)
 8004136:	2200      	movs	r2, #0
 8004138:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800413a:	4b11      	ldr	r3, [pc, #68]	@ (8004180 <MX_SPI2_Init+0x5c>)
 800413c:	2200      	movs	r2, #0
 800413e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004140:	4b0f      	ldr	r3, [pc, #60]	@ (8004180 <MX_SPI2_Init+0x5c>)
 8004142:	2200      	movs	r2, #0
 8004144:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004146:	4b0e      	ldr	r3, [pc, #56]	@ (8004180 <MX_SPI2_Init+0x5c>)
 8004148:	2200      	movs	r2, #0
 800414a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800414c:	4b0c      	ldr	r3, [pc, #48]	@ (8004180 <MX_SPI2_Init+0x5c>)
 800414e:	2200      	movs	r2, #0
 8004150:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004152:	4b0b      	ldr	r3, [pc, #44]	@ (8004180 <MX_SPI2_Init+0x5c>)
 8004154:	2200      	movs	r2, #0
 8004156:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004158:	4b09      	ldr	r3, [pc, #36]	@ (8004180 <MX_SPI2_Init+0x5c>)
 800415a:	2200      	movs	r2, #0
 800415c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800415e:	4b08      	ldr	r3, [pc, #32]	@ (8004180 <MX_SPI2_Init+0x5c>)
 8004160:	2200      	movs	r2, #0
 8004162:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004164:	4b06      	ldr	r3, [pc, #24]	@ (8004180 <MX_SPI2_Init+0x5c>)
 8004166:	220a      	movs	r2, #10
 8004168:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800416a:	4805      	ldr	r0, [pc, #20]	@ (8004180 <MX_SPI2_Init+0x5c>)
 800416c:	f000 ffba 	bl	80050e4 <HAL_SPI_Init>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8004176:	f7ff ffce 	bl	8004116 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20004610 	.word	0x20004610
 8004184:	40003800 	.word	0x40003800

08004188 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004190:	f107 0310 	add.w	r3, r7, #16
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	605a      	str	r2, [r3, #4]
 800419a:	609a      	str	r2, [r3, #8]
 800419c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004214 <HAL_SPI_MspInit+0x8c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d131      	bne.n	800420c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80041a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <HAL_SPI_MspInit+0x90>)
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004218 <HAL_SPI_MspInit+0x90>)
 80041ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80041b2:	61d3      	str	r3, [r2, #28]
 80041b4:	4b18      	ldr	r3, [pc, #96]	@ (8004218 <HAL_SPI_MspInit+0x90>)
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041c0:	4b15      	ldr	r3, [pc, #84]	@ (8004218 <HAL_SPI_MspInit+0x90>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	4a14      	ldr	r2, [pc, #80]	@ (8004218 <HAL_SPI_MspInit+0x90>)
 80041c6:	f043 0308 	orr.w	r3, r3, #8
 80041ca:	6193      	str	r3, [r2, #24]
 80041cc:	4b12      	ldr	r3, [pc, #72]	@ (8004218 <HAL_SPI_MspInit+0x90>)
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80041d8:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80041dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e6:	f107 0310 	add.w	r3, r7, #16
 80041ea:	4619      	mov	r1, r3
 80041ec:	480b      	ldr	r0, [pc, #44]	@ (800421c <HAL_SPI_MspInit+0x94>)
 80041ee:	f000 f9e7 	bl	80045c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80041f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f8:	2302      	movs	r3, #2
 80041fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041fc:	2303      	movs	r3, #3
 80041fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	4619      	mov	r1, r3
 8004206:	4805      	ldr	r0, [pc, #20]	@ (800421c <HAL_SPI_MspInit+0x94>)
 8004208:	f000 f9da 	bl	80045c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800420c:	bf00      	nop
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40003800 	.word	0x40003800
 8004218:	40021000 	.word	0x40021000
 800421c:	40010c00 	.word	0x40010c00

08004220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004226:	4b15      	ldr	r3, [pc, #84]	@ (800427c <HAL_MspInit+0x5c>)
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	4a14      	ldr	r2, [pc, #80]	@ (800427c <HAL_MspInit+0x5c>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6193      	str	r3, [r2, #24]
 8004232:	4b12      	ldr	r3, [pc, #72]	@ (800427c <HAL_MspInit+0x5c>)
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	4b0f      	ldr	r3, [pc, #60]	@ (800427c <HAL_MspInit+0x5c>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4a0e      	ldr	r2, [pc, #56]	@ (800427c <HAL_MspInit+0x5c>)
 8004244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004248:	61d3      	str	r3, [r2, #28]
 800424a:	4b0c      	ldr	r3, [pc, #48]	@ (800427c <HAL_MspInit+0x5c>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004256:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <HAL_MspInit+0x60>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	4a04      	ldr	r2, [pc, #16]	@ (8004280 <HAL_MspInit+0x60>)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	40021000 	.word	0x40021000
 8004280:	40010000 	.word	0x40010000

08004284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004288:	bf00      	nop
 800428a:	e7fd      	b.n	8004288 <NMI_Handler+0x4>

0800428c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004290:	bf00      	nop
 8004292:	e7fd      	b.n	8004290 <HardFault_Handler+0x4>

08004294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004298:	bf00      	nop
 800429a:	e7fd      	b.n	8004298 <MemManage_Handler+0x4>

0800429c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042a0:	bf00      	nop
 80042a2:	e7fd      	b.n	80042a0 <BusFault_Handler+0x4>

080042a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <UsageFault_Handler+0x4>

080042ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80042b0:	bf00      	nop
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042bc:	bf00      	nop
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bc80      	pop	{r7}
 80042ce:	4770      	bx	lr

080042d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042d4:	f000 f874 	bl	80043c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042d8:	bf00      	nop
 80042da:	bd80      	pop	{r7, pc}

080042dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042e8:	f7ff fff8 	bl	80042dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042ec:	480b      	ldr	r0, [pc, #44]	@ (800431c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80042ee:	490c      	ldr	r1, [pc, #48]	@ (8004320 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80042f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004324 <LoopFillZerobss+0x16>)
  movs r3, #0
 80042f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042f4:	e002      	b.n	80042fc <LoopCopyDataInit>

080042f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042fa:	3304      	adds	r3, #4

080042fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004300:	d3f9      	bcc.n	80042f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004302:	4a09      	ldr	r2, [pc, #36]	@ (8004328 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004304:	4c09      	ldr	r4, [pc, #36]	@ (800432c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004308:	e001      	b.n	800430e <LoopFillZerobss>

0800430a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800430a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800430c:	3204      	adds	r2, #4

0800430e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800430e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004310:	d3fb      	bcc.n	800430a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004312:	f001 fc85 	bl	8005c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004316:	f7ff fdc5 	bl	8003ea4 <main>
  bx lr
 800431a:	4770      	bx	lr
  ldr r0, =_sdata
 800431c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004320:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004324:	08005cd0 	.word	0x08005cd0
  ldr r2, =_sbss
 8004328:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800432c:	2000466c 	.word	0x2000466c

08004330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004330:	e7fe      	b.n	8004330 <ADC1_2_IRQHandler>
	...

08004334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004338:	4b08      	ldr	r3, [pc, #32]	@ (800435c <HAL_Init+0x28>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a07      	ldr	r2, [pc, #28]	@ (800435c <HAL_Init+0x28>)
 800433e:	f043 0310 	orr.w	r3, r3, #16
 8004342:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004344:	2003      	movs	r0, #3
 8004346:	f000 f907 	bl	8004558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800434a:	200f      	movs	r0, #15
 800434c:	f000 f808 	bl	8004360 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004350:	f7ff ff66 	bl	8004220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40022000 	.word	0x40022000

08004360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004368:	4b12      	ldr	r3, [pc, #72]	@ (80043b4 <HAL_InitTick+0x54>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <HAL_InitTick+0x58>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	4619      	mov	r1, r3
 8004372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004376:	fbb3 f3f1 	udiv	r3, r3, r1
 800437a:	fbb2 f3f3 	udiv	r3, r2, r3
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f911 	bl	80045a6 <HAL_SYSTICK_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e00e      	b.n	80043ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b0f      	cmp	r3, #15
 8004392:	d80a      	bhi.n	80043aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004394:	2200      	movs	r2, #0
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	f000 f8e7 	bl	800456e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a0:	4a06      	ldr	r2, [pc, #24]	@ (80043bc <HAL_InitTick+0x5c>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e000      	b.n	80043ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000000 	.word	0x20000000
 80043b8:	20000008 	.word	0x20000008
 80043bc:	20000004 	.word	0x20000004

080043c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043c4:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <HAL_IncTick+0x1c>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <HAL_IncTick+0x20>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4413      	add	r3, r2
 80043d0:	4a03      	ldr	r2, [pc, #12]	@ (80043e0 <HAL_IncTick+0x20>)
 80043d2:	6013      	str	r3, [r2, #0]
}
 80043d4:	bf00      	nop
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr
 80043dc:	20000008 	.word	0x20000008
 80043e0:	20004668 	.word	0x20004668

080043e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return uwTick;
 80043e8:	4b02      	ldr	r3, [pc, #8]	@ (80043f4 <HAL_GetTick+0x10>)
 80043ea:	681b      	ldr	r3, [r3, #0]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	20004668 	.word	0x20004668

080043f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004408:	4b0c      	ldr	r3, [pc, #48]	@ (800443c <__NVIC_SetPriorityGrouping+0x44>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004414:	4013      	ands	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004420:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800442a:	4a04      	ldr	r2, [pc, #16]	@ (800443c <__NVIC_SetPriorityGrouping+0x44>)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	60d3      	str	r3, [r2, #12]
}
 8004430:	bf00      	nop
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004444:	4b04      	ldr	r3, [pc, #16]	@ (8004458 <__NVIC_GetPriorityGrouping+0x18>)
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	0a1b      	lsrs	r3, r3, #8
 800444a:	f003 0307 	and.w	r3, r3, #7
}
 800444e:	4618      	mov	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	e000ed00 	.word	0xe000ed00

0800445c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	6039      	str	r1, [r7, #0]
 8004466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446c:	2b00      	cmp	r3, #0
 800446e:	db0a      	blt.n	8004486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	b2da      	uxtb	r2, r3
 8004474:	490c      	ldr	r1, [pc, #48]	@ (80044a8 <__NVIC_SetPriority+0x4c>)
 8004476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447a:	0112      	lsls	r2, r2, #4
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	440b      	add	r3, r1
 8004480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004484:	e00a      	b.n	800449c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4908      	ldr	r1, [pc, #32]	@ (80044ac <__NVIC_SetPriority+0x50>)
 800448c:	79fb      	ldrb	r3, [r7, #7]
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	3b04      	subs	r3, #4
 8004494:	0112      	lsls	r2, r2, #4
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	440b      	add	r3, r1
 800449a:	761a      	strb	r2, [r3, #24]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	e000e100 	.word	0xe000e100
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b089      	sub	sp, #36	@ 0x24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f1c3 0307 	rsb	r3, r3, #7
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	bf28      	it	cs
 80044ce:	2304      	movcs	r3, #4
 80044d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3304      	adds	r3, #4
 80044d6:	2b06      	cmp	r3, #6
 80044d8:	d902      	bls.n	80044e0 <NVIC_EncodePriority+0x30>
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	3b03      	subs	r3, #3
 80044de:	e000      	b.n	80044e2 <NVIC_EncodePriority+0x32>
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e4:	f04f 32ff 	mov.w	r2, #4294967295
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43da      	mvns	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	401a      	ands	r2, r3
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044f8:	f04f 31ff 	mov.w	r1, #4294967295
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004502:	43d9      	mvns	r1, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004508:	4313      	orrs	r3, r2
         );
}
 800450a:	4618      	mov	r0, r3
 800450c:	3724      	adds	r7, #36	@ 0x24
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr

08004514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3b01      	subs	r3, #1
 8004520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004524:	d301      	bcc.n	800452a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004526:	2301      	movs	r3, #1
 8004528:	e00f      	b.n	800454a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800452a:	4a0a      	ldr	r2, [pc, #40]	@ (8004554 <SysTick_Config+0x40>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3b01      	subs	r3, #1
 8004530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004532:	210f      	movs	r1, #15
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	f7ff ff90 	bl	800445c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800453c:	4b05      	ldr	r3, [pc, #20]	@ (8004554 <SysTick_Config+0x40>)
 800453e:	2200      	movs	r2, #0
 8004540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004542:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <SysTick_Config+0x40>)
 8004544:	2207      	movs	r2, #7
 8004546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	e000e010 	.word	0xe000e010

08004558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff ff49 	bl	80043f8 <__NVIC_SetPriorityGrouping>
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	4603      	mov	r3, r0
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004580:	f7ff ff5e 	bl	8004440 <__NVIC_GetPriorityGrouping>
 8004584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	6978      	ldr	r0, [r7, #20]
 800458c:	f7ff ff90 	bl	80044b0 <NVIC_EncodePriority>
 8004590:	4602      	mov	r2, r0
 8004592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff ff5f 	bl	800445c <__NVIC_SetPriority>
}
 800459e:	bf00      	nop
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff ffb0 	bl	8004514 <SysTick_Config>
 80045b4:	4603      	mov	r3, r0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b08b      	sub	sp, #44	@ 0x2c
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045ca:	2300      	movs	r3, #0
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80045ce:	2300      	movs	r3, #0
 80045d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045d2:	e169      	b.n	80048a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80045d4:	2201      	movs	r2, #1
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	f040 8158 	bne.w	80048a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4a9a      	ldr	r2, [pc, #616]	@ (8004860 <HAL_GPIO_Init+0x2a0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d05e      	beq.n	80046ba <HAL_GPIO_Init+0xfa>
 80045fc:	4a98      	ldr	r2, [pc, #608]	@ (8004860 <HAL_GPIO_Init+0x2a0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d875      	bhi.n	80046ee <HAL_GPIO_Init+0x12e>
 8004602:	4a98      	ldr	r2, [pc, #608]	@ (8004864 <HAL_GPIO_Init+0x2a4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d058      	beq.n	80046ba <HAL_GPIO_Init+0xfa>
 8004608:	4a96      	ldr	r2, [pc, #600]	@ (8004864 <HAL_GPIO_Init+0x2a4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d86f      	bhi.n	80046ee <HAL_GPIO_Init+0x12e>
 800460e:	4a96      	ldr	r2, [pc, #600]	@ (8004868 <HAL_GPIO_Init+0x2a8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d052      	beq.n	80046ba <HAL_GPIO_Init+0xfa>
 8004614:	4a94      	ldr	r2, [pc, #592]	@ (8004868 <HAL_GPIO_Init+0x2a8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d869      	bhi.n	80046ee <HAL_GPIO_Init+0x12e>
 800461a:	4a94      	ldr	r2, [pc, #592]	@ (800486c <HAL_GPIO_Init+0x2ac>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d04c      	beq.n	80046ba <HAL_GPIO_Init+0xfa>
 8004620:	4a92      	ldr	r2, [pc, #584]	@ (800486c <HAL_GPIO_Init+0x2ac>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d863      	bhi.n	80046ee <HAL_GPIO_Init+0x12e>
 8004626:	4a92      	ldr	r2, [pc, #584]	@ (8004870 <HAL_GPIO_Init+0x2b0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d046      	beq.n	80046ba <HAL_GPIO_Init+0xfa>
 800462c:	4a90      	ldr	r2, [pc, #576]	@ (8004870 <HAL_GPIO_Init+0x2b0>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d85d      	bhi.n	80046ee <HAL_GPIO_Init+0x12e>
 8004632:	2b12      	cmp	r3, #18
 8004634:	d82a      	bhi.n	800468c <HAL_GPIO_Init+0xcc>
 8004636:	2b12      	cmp	r3, #18
 8004638:	d859      	bhi.n	80046ee <HAL_GPIO_Init+0x12e>
 800463a:	a201      	add	r2, pc, #4	@ (adr r2, 8004640 <HAL_GPIO_Init+0x80>)
 800463c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004640:	080046bb 	.word	0x080046bb
 8004644:	08004695 	.word	0x08004695
 8004648:	080046a7 	.word	0x080046a7
 800464c:	080046e9 	.word	0x080046e9
 8004650:	080046ef 	.word	0x080046ef
 8004654:	080046ef 	.word	0x080046ef
 8004658:	080046ef 	.word	0x080046ef
 800465c:	080046ef 	.word	0x080046ef
 8004660:	080046ef 	.word	0x080046ef
 8004664:	080046ef 	.word	0x080046ef
 8004668:	080046ef 	.word	0x080046ef
 800466c:	080046ef 	.word	0x080046ef
 8004670:	080046ef 	.word	0x080046ef
 8004674:	080046ef 	.word	0x080046ef
 8004678:	080046ef 	.word	0x080046ef
 800467c:	080046ef 	.word	0x080046ef
 8004680:	080046ef 	.word	0x080046ef
 8004684:	0800469d 	.word	0x0800469d
 8004688:	080046b1 	.word	0x080046b1
 800468c:	4a79      	ldr	r2, [pc, #484]	@ (8004874 <HAL_GPIO_Init+0x2b4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d013      	beq.n	80046ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004692:	e02c      	b.n	80046ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	623b      	str	r3, [r7, #32]
          break;
 800469a:	e029      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	3304      	adds	r3, #4
 80046a2:	623b      	str	r3, [r7, #32]
          break;
 80046a4:	e024      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	3308      	adds	r3, #8
 80046ac:	623b      	str	r3, [r7, #32]
          break;
 80046ae:	e01f      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	330c      	adds	r3, #12
 80046b6:	623b      	str	r3, [r7, #32]
          break;
 80046b8:	e01a      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046c2:	2304      	movs	r3, #4
 80046c4:	623b      	str	r3, [r7, #32]
          break;
 80046c6:	e013      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d105      	bne.n	80046dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046d0:	2308      	movs	r3, #8
 80046d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	611a      	str	r2, [r3, #16]
          break;
 80046da:	e009      	b.n	80046f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046dc:	2308      	movs	r3, #8
 80046de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	615a      	str	r2, [r3, #20]
          break;
 80046e6:	e003      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80046e8:	2300      	movs	r3, #0
 80046ea:	623b      	str	r3, [r7, #32]
          break;
 80046ec:	e000      	b.n	80046f0 <HAL_GPIO_Init+0x130>
          break;
 80046ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2bff      	cmp	r3, #255	@ 0xff
 80046f4:	d801      	bhi.n	80046fa <HAL_GPIO_Init+0x13a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	e001      	b.n	80046fe <HAL_GPIO_Init+0x13e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3304      	adds	r3, #4
 80046fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2bff      	cmp	r3, #255	@ 0xff
 8004704:	d802      	bhi.n	800470c <HAL_GPIO_Init+0x14c>
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	e002      	b.n	8004712 <HAL_GPIO_Init+0x152>
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	3b08      	subs	r3, #8
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	210f      	movs	r1, #15
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	fa01 f303 	lsl.w	r3, r1, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	401a      	ands	r2, r3
 8004724:	6a39      	ldr	r1, [r7, #32]
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	431a      	orrs	r2, r3
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 80b1 	beq.w	80048a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004740:	4b4d      	ldr	r3, [pc, #308]	@ (8004878 <HAL_GPIO_Init+0x2b8>)
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	4a4c      	ldr	r2, [pc, #304]	@ (8004878 <HAL_GPIO_Init+0x2b8>)
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	6193      	str	r3, [r2, #24]
 800474c:	4b4a      	ldr	r3, [pc, #296]	@ (8004878 <HAL_GPIO_Init+0x2b8>)
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004758:	4a48      	ldr	r2, [pc, #288]	@ (800487c <HAL_GPIO_Init+0x2bc>)
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	3302      	adds	r3, #2
 8004760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004764:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	f003 0303 	and.w	r3, r3, #3
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	220f      	movs	r2, #15
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a40      	ldr	r2, [pc, #256]	@ (8004880 <HAL_GPIO_Init+0x2c0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_GPIO_Init+0x1ec>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a3f      	ldr	r2, [pc, #252]	@ (8004884 <HAL_GPIO_Init+0x2c4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00d      	beq.n	80047a8 <HAL_GPIO_Init+0x1e8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a3e      	ldr	r2, [pc, #248]	@ (8004888 <HAL_GPIO_Init+0x2c8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d007      	beq.n	80047a4 <HAL_GPIO_Init+0x1e4>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a3d      	ldr	r2, [pc, #244]	@ (800488c <HAL_GPIO_Init+0x2cc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d101      	bne.n	80047a0 <HAL_GPIO_Init+0x1e0>
 800479c:	2303      	movs	r3, #3
 800479e:	e006      	b.n	80047ae <HAL_GPIO_Init+0x1ee>
 80047a0:	2304      	movs	r3, #4
 80047a2:	e004      	b.n	80047ae <HAL_GPIO_Init+0x1ee>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e002      	b.n	80047ae <HAL_GPIO_Init+0x1ee>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <HAL_GPIO_Init+0x1ee>
 80047ac:	2300      	movs	r3, #0
 80047ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b0:	f002 0203 	and.w	r2, r2, #3
 80047b4:	0092      	lsls	r2, r2, #2
 80047b6:	4093      	lsls	r3, r2
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80047be:	492f      	ldr	r1, [pc, #188]	@ (800487c <HAL_GPIO_Init+0x2bc>)
 80047c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c2:	089b      	lsrs	r3, r3, #2
 80047c4:	3302      	adds	r3, #2
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d006      	beq.n	80047e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	492c      	ldr	r1, [pc, #176]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	608b      	str	r3, [r1, #8]
 80047e4:	e006      	b.n	80047f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	43db      	mvns	r3, r3
 80047ee:	4928      	ldr	r1, [pc, #160]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d006      	beq.n	800480e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004800:	4b23      	ldr	r3, [pc, #140]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	4922      	ldr	r1, [pc, #136]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	4313      	orrs	r3, r2
 800480a:	60cb      	str	r3, [r1, #12]
 800480c:	e006      	b.n	800481c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800480e:	4b20      	ldr	r3, [pc, #128]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	43db      	mvns	r3, r3
 8004816:	491e      	ldr	r1, [pc, #120]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 8004818:	4013      	ands	r3, r2
 800481a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d006      	beq.n	8004836 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004828:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4918      	ldr	r1, [pc, #96]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
 8004834:	e006      	b.n	8004844 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004836:	4b16      	ldr	r3, [pc, #88]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	43db      	mvns	r3, r3
 800483e:	4914      	ldr	r1, [pc, #80]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 8004840:	4013      	ands	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d021      	beq.n	8004894 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004850:	4b0f      	ldr	r3, [pc, #60]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	490e      	ldr	r1, [pc, #56]	@ (8004890 <HAL_GPIO_Init+0x2d0>)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	4313      	orrs	r3, r2
 800485a:	600b      	str	r3, [r1, #0]
 800485c:	e021      	b.n	80048a2 <HAL_GPIO_Init+0x2e2>
 800485e:	bf00      	nop
 8004860:	10320000 	.word	0x10320000
 8004864:	10310000 	.word	0x10310000
 8004868:	10220000 	.word	0x10220000
 800486c:	10210000 	.word	0x10210000
 8004870:	10120000 	.word	0x10120000
 8004874:	10110000 	.word	0x10110000
 8004878:	40021000 	.word	0x40021000
 800487c:	40010000 	.word	0x40010000
 8004880:	40010800 	.word	0x40010800
 8004884:	40010c00 	.word	0x40010c00
 8004888:	40011000 	.word	0x40011000
 800488c:	40011400 	.word	0x40011400
 8004890:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004894:	4b0b      	ldr	r3, [pc, #44]	@ (80048c4 <HAL_GPIO_Init+0x304>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	43db      	mvns	r3, r3
 800489c:	4909      	ldr	r1, [pc, #36]	@ (80048c4 <HAL_GPIO_Init+0x304>)
 800489e:	4013      	ands	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	3301      	adds	r3, #1
 80048a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ae:	fa22 f303 	lsr.w	r3, r2, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f47f ae8e 	bne.w	80045d4 <HAL_GPIO_Init+0x14>
  }
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	372c      	adds	r7, #44	@ 0x2c
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	40010400 	.word	0x40010400

080048c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	887b      	ldrh	r3, [r7, #2]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
 80048e4:	e001      	b.n	80048ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	807b      	strh	r3, [r7, #2]
 8004902:	4613      	mov	r3, r2
 8004904:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004906:	787b      	ldrb	r3, [r7, #1]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800490c:	887a      	ldrh	r2, [r7, #2]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004912:	e003      	b.n	800491c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004914:	887b      	ldrh	r3, [r7, #2]
 8004916:	041a      	lsls	r2, r3, #16
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	611a      	str	r2, [r3, #16]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr
	...

08004928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e272      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8087 	beq.w	8004a56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004948:	4b92      	ldr	r3, [pc, #584]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f003 030c 	and.w	r3, r3, #12
 8004950:	2b04      	cmp	r3, #4
 8004952:	d00c      	beq.n	800496e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004954:	4b8f      	ldr	r3, [pc, #572]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 030c 	and.w	r3, r3, #12
 800495c:	2b08      	cmp	r3, #8
 800495e:	d112      	bne.n	8004986 <HAL_RCC_OscConfig+0x5e>
 8004960:	4b8c      	ldr	r3, [pc, #560]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800496c:	d10b      	bne.n	8004986 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800496e:	4b89      	ldr	r3, [pc, #548]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d06c      	beq.n	8004a54 <HAL_RCC_OscConfig+0x12c>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d168      	bne.n	8004a54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e24c      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800498e:	d106      	bne.n	800499e <HAL_RCC_OscConfig+0x76>
 8004990:	4b80      	ldr	r3, [pc, #512]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a7f      	ldr	r2, [pc, #508]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	e02e      	b.n	80049fc <HAL_RCC_OscConfig+0xd4>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCC_OscConfig+0x98>
 80049a6:	4b7b      	ldr	r3, [pc, #492]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a7a      	ldr	r2, [pc, #488]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	4b78      	ldr	r3, [pc, #480]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a77      	ldr	r2, [pc, #476]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e01d      	b.n	80049fc <HAL_RCC_OscConfig+0xd4>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049c8:	d10c      	bne.n	80049e4 <HAL_RCC_OscConfig+0xbc>
 80049ca:	4b72      	ldr	r3, [pc, #456]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a71      	ldr	r2, [pc, #452]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	4b6f      	ldr	r3, [pc, #444]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a6e      	ldr	r2, [pc, #440]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e00b      	b.n	80049fc <HAL_RCC_OscConfig+0xd4>
 80049e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a6a      	ldr	r2, [pc, #424]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	4b68      	ldr	r3, [pc, #416]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a67      	ldr	r2, [pc, #412]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 80049f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d013      	beq.n	8004a2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7ff fcee 	bl	80043e4 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a0c:	f7ff fcea 	bl	80043e4 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b64      	cmp	r3, #100	@ 0x64
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e200      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0xe4>
 8004a2a:	e014      	b.n	8004a56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7ff fcda 	bl	80043e4 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a34:	f7ff fcd6 	bl	80043e4 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e1ec      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a46:	4b53      	ldr	r3, [pc, #332]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0x10c>
 8004a52:	e000      	b.n	8004a56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d063      	beq.n	8004b2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a62:	4b4c      	ldr	r3, [pc, #304]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a6e:	4b49      	ldr	r3, [pc, #292]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d11c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x18c>
 8004a7a:	4b46      	ldr	r3, [pc, #280]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d116      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a86:	4b43      	ldr	r3, [pc, #268]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_RCC_OscConfig+0x176>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e1c0      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4939      	ldr	r1, [pc, #228]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ab2:	e03a      	b.n	8004b2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d020      	beq.n	8004afe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004abc:	4b36      	ldr	r3, [pc, #216]	@ (8004b98 <HAL_RCC_OscConfig+0x270>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac2:	f7ff fc8f 	bl	80043e4 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aca:	f7ff fc8b 	bl	80043e4 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e1a1      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004adc:	4b2d      	ldr	r3, [pc, #180]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0f0      	beq.n	8004aca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	4927      	ldr	r1, [pc, #156]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	600b      	str	r3, [r1, #0]
 8004afc:	e015      	b.n	8004b2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004afe:	4b26      	ldr	r3, [pc, #152]	@ (8004b98 <HAL_RCC_OscConfig+0x270>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7ff fc6e 	bl	80043e4 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0c:	f7ff fc6a 	bl	80043e4 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e180      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d03a      	beq.n	8004bac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d019      	beq.n	8004b72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b3e:	4b17      	ldr	r3, [pc, #92]	@ (8004b9c <HAL_RCC_OscConfig+0x274>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b44:	f7ff fc4e 	bl	80043e4 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b4c:	f7ff fc4a 	bl	80043e4 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e160      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b94 <HAL_RCC_OscConfig+0x26c>)
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b6a:	2001      	movs	r0, #1
 8004b6c:	f000 fa9c 	bl	80050a8 <RCC_Delay>
 8004b70:	e01c      	b.n	8004bac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b72:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <HAL_RCC_OscConfig+0x274>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b78:	f7ff fc34 	bl	80043e4 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b7e:	e00f      	b.n	8004ba0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b80:	f7ff fc30 	bl	80043e4 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d908      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e146      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000
 8004b98:	42420000 	.word	0x42420000
 8004b9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba0:	4b92      	ldr	r3, [pc, #584]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e9      	bne.n	8004b80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 80a6 	beq.w	8004d06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bbe:	4b8b      	ldr	r3, [pc, #556]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10d      	bne.n	8004be6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	4b88      	ldr	r3, [pc, #544]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	4a87      	ldr	r2, [pc, #540]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd4:	61d3      	str	r3, [r2, #28]
 8004bd6:	4b85      	ldr	r3, [pc, #532]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be2:	2301      	movs	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be6:	4b82      	ldr	r3, [pc, #520]	@ (8004df0 <HAL_RCC_OscConfig+0x4c8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d118      	bne.n	8004c24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8004df0 <HAL_RCC_OscConfig+0x4c8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a7e      	ldr	r2, [pc, #504]	@ (8004df0 <HAL_RCC_OscConfig+0x4c8>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfe:	f7ff fbf1 	bl	80043e4 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c06:	f7ff fbed 	bl	80043e4 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b64      	cmp	r3, #100	@ 0x64
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e103      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c18:	4b75      	ldr	r3, [pc, #468]	@ (8004df0 <HAL_RCC_OscConfig+0x4c8>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCC_OscConfig+0x312>
 8004c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	4a6e      	ldr	r2, [pc, #440]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c32:	f043 0301 	orr.w	r3, r3, #1
 8004c36:	6213      	str	r3, [r2, #32]
 8004c38:	e02d      	b.n	8004c96 <HAL_RCC_OscConfig+0x36e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x334>
 8004c42:	4b6a      	ldr	r3, [pc, #424]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	4a69      	ldr	r2, [pc, #420]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c48:	f023 0301 	bic.w	r3, r3, #1
 8004c4c:	6213      	str	r3, [r2, #32]
 8004c4e:	4b67      	ldr	r3, [pc, #412]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	4a66      	ldr	r2, [pc, #408]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c54:	f023 0304 	bic.w	r3, r3, #4
 8004c58:	6213      	str	r3, [r2, #32]
 8004c5a:	e01c      	b.n	8004c96 <HAL_RCC_OscConfig+0x36e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b05      	cmp	r3, #5
 8004c62:	d10c      	bne.n	8004c7e <HAL_RCC_OscConfig+0x356>
 8004c64:	4b61      	ldr	r3, [pc, #388]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	4a60      	ldr	r2, [pc, #384]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c6a:	f043 0304 	orr.w	r3, r3, #4
 8004c6e:	6213      	str	r3, [r2, #32]
 8004c70:	4b5e      	ldr	r3, [pc, #376]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	4a5d      	ldr	r2, [pc, #372]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	6213      	str	r3, [r2, #32]
 8004c7c:	e00b      	b.n	8004c96 <HAL_RCC_OscConfig+0x36e>
 8004c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	4a5a      	ldr	r2, [pc, #360]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	6213      	str	r3, [r2, #32]
 8004c8a:	4b58      	ldr	r3, [pc, #352]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	4a57      	ldr	r2, [pc, #348]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d015      	beq.n	8004cca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9e:	f7ff fba1 	bl	80043e4 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca4:	e00a      	b.n	8004cbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca6:	f7ff fb9d 	bl	80043e4 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e0b1      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbc:	4b4b      	ldr	r3, [pc, #300]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ee      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x37e>
 8004cc8:	e014      	b.n	8004cf4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cca:	f7ff fb8b 	bl	80043e4 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cd0:	e00a      	b.n	8004ce8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd2:	f7ff fb87 	bl	80043e4 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e09b      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce8:	4b40      	ldr	r3, [pc, #256]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1ee      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cf4:	7dfb      	ldrb	r3, [r7, #23]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d105      	bne.n	8004d06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	4a3b      	ldr	r2, [pc, #236]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8087 	beq.w	8004e1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d10:	4b36      	ldr	r3, [pc, #216]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 030c 	and.w	r3, r3, #12
 8004d18:	2b08      	cmp	r3, #8
 8004d1a:	d061      	beq.n	8004de0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d146      	bne.n	8004db2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d24:	4b33      	ldr	r3, [pc, #204]	@ (8004df4 <HAL_RCC_OscConfig+0x4cc>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2a:	f7ff fb5b 	bl	80043e4 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d32:	f7ff fb57 	bl	80043e4 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e06d      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d44:	4b29      	ldr	r3, [pc, #164]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d58:	d108      	bne.n	8004d6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d5a:	4b24      	ldr	r3, [pc, #144]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	4921      	ldr	r1, [pc, #132]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a19      	ldr	r1, [r3, #32]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	491b      	ldr	r1, [pc, #108]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d84:	4b1b      	ldr	r3, [pc, #108]	@ (8004df4 <HAL_RCC_OscConfig+0x4cc>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d8a:	f7ff fb2b 	bl	80043e4 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d92:	f7ff fb27 	bl	80043e4 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e03d      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004da4:	4b11      	ldr	r3, [pc, #68]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x46a>
 8004db0:	e035      	b.n	8004e1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004db2:	4b10      	ldr	r3, [pc, #64]	@ (8004df4 <HAL_RCC_OscConfig+0x4cc>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db8:	f7ff fb14 	bl	80043e4 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc0:	f7ff fb10 	bl	80043e4 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e026      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dd2:	4b06      	ldr	r3, [pc, #24]	@ (8004dec <HAL_RCC_OscConfig+0x4c4>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1f0      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x498>
 8004dde:	e01e      	b.n	8004e1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d107      	bne.n	8004df8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e019      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40007000 	.word	0x40007000
 8004df4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004df8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e28 <HAL_RCC_OscConfig+0x500>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d106      	bne.n	8004e1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d001      	beq.n	8004e1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40021000 	.word	0x40021000

08004e2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e0d0      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e40:	4b6a      	ldr	r3, [pc, #424]	@ (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d910      	bls.n	8004e70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4e:	4b67      	ldr	r3, [pc, #412]	@ (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f023 0207 	bic.w	r2, r3, #7
 8004e56:	4965      	ldr	r1, [pc, #404]	@ (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5e:	4b63      	ldr	r3, [pc, #396]	@ (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0b8      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d020      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d005      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e88:	4b59      	ldr	r3, [pc, #356]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4a58      	ldr	r2, [pc, #352]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004e92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ea0:	4b53      	ldr	r3, [pc, #332]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4a52      	ldr	r2, [pc, #328]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004eaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eac:	4b50      	ldr	r3, [pc, #320]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	494d      	ldr	r1, [pc, #308]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d040      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d107      	bne.n	8004ee2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed2:	4b47      	ldr	r3, [pc, #284]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d115      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e07f      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d107      	bne.n	8004efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eea:	4b41      	ldr	r3, [pc, #260]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e073      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efa:	4b3d      	ldr	r3, [pc, #244]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e06b      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f0a:	4b39      	ldr	r3, [pc, #228]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f023 0203 	bic.w	r2, r3, #3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4936      	ldr	r1, [pc, #216]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f1c:	f7ff fa62 	bl	80043e4 <HAL_GetTick>
 8004f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f24:	f7ff fa5e 	bl	80043e4 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e053      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 020c 	and.w	r2, r3, #12
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d1eb      	bne.n	8004f24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f4c:	4b27      	ldr	r3, [pc, #156]	@ (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d210      	bcs.n	8004f7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5a:	4b24      	ldr	r3, [pc, #144]	@ (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 0207 	bic.w	r2, r3, #7
 8004f62:	4922      	ldr	r1, [pc, #136]	@ (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6a:	4b20      	ldr	r3, [pc, #128]	@ (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e032      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f88:	4b19      	ldr	r3, [pc, #100]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4916      	ldr	r1, [pc, #88]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fa6:	4b12      	ldr	r3, [pc, #72]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	490e      	ldr	r1, [pc, #56]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fba:	f000 f821 	bl	8005000 <HAL_RCC_GetSysClockFreq>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	490a      	ldr	r1, [pc, #40]	@ (8004ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fcc:	5ccb      	ldrb	r3, [r1, r3]
 8004fce:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd2:	4a09      	ldr	r2, [pc, #36]	@ (8004ff8 <HAL_RCC_ClockConfig+0x1cc>)
 8004fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fd6:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <HAL_RCC_ClockConfig+0x1d0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff f9c0 	bl	8004360 <HAL_InitTick>

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40022000 	.word	0x40022000
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	08005ca4 	.word	0x08005ca4
 8004ff8:	20000000 	.word	0x20000000
 8004ffc:	20000004 	.word	0x20000004

08005000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005000:	b480      	push	{r7}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	2300      	movs	r3, #0
 8005014:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800501a:	4b1e      	ldr	r3, [pc, #120]	@ (8005094 <HAL_RCC_GetSysClockFreq+0x94>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b04      	cmp	r3, #4
 8005028:	d002      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0x30>
 800502a:	2b08      	cmp	r3, #8
 800502c:	d003      	beq.n	8005036 <HAL_RCC_GetSysClockFreq+0x36>
 800502e:	e027      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005030:	4b19      	ldr	r3, [pc, #100]	@ (8005098 <HAL_RCC_GetSysClockFreq+0x98>)
 8005032:	613b      	str	r3, [r7, #16]
      break;
 8005034:	e027      	b.n	8005086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	0c9b      	lsrs	r3, r3, #18
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	4a17      	ldr	r2, [pc, #92]	@ (800509c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005040:	5cd3      	ldrb	r3, [r2, r3]
 8005042:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d010      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800504e:	4b11      	ldr	r3, [pc, #68]	@ (8005094 <HAL_RCC_GetSysClockFreq+0x94>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	0c5b      	lsrs	r3, r3, #17
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	4a11      	ldr	r2, [pc, #68]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800505a:	5cd3      	ldrb	r3, [r2, r3]
 800505c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a0d      	ldr	r2, [pc, #52]	@ (8005098 <HAL_RCC_GetSysClockFreq+0x98>)
 8005062:	fb03 f202 	mul.w	r2, r3, r2
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	617b      	str	r3, [r7, #20]
 800506e:	e004      	b.n	800507a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a0c      	ldr	r2, [pc, #48]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005074:	fb02 f303 	mul.w	r3, r2, r3
 8005078:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	613b      	str	r3, [r7, #16]
      break;
 800507e:	e002      	b.n	8005086 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005080:	4b05      	ldr	r3, [pc, #20]	@ (8005098 <HAL_RCC_GetSysClockFreq+0x98>)
 8005082:	613b      	str	r3, [r7, #16]
      break;
 8005084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005086:	693b      	ldr	r3, [r7, #16]
}
 8005088:	4618      	mov	r0, r3
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000
 8005098:	007a1200 	.word	0x007a1200
 800509c:	08005cb4 	.word	0x08005cb4
 80050a0:	08005cc4 	.word	0x08005cc4
 80050a4:	003d0900 	.word	0x003d0900

080050a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050b0:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <RCC_Delay+0x34>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a0a      	ldr	r2, [pc, #40]	@ (80050e0 <RCC_Delay+0x38>)
 80050b6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ba:	0a5b      	lsrs	r3, r3, #9
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050c4:	bf00      	nop
  }
  while (Delay --);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1e5a      	subs	r2, r3, #1
 80050ca:	60fa      	str	r2, [r7, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1f9      	bne.n	80050c4 <RCC_Delay+0x1c>
}
 80050d0:	bf00      	nop
 80050d2:	bf00      	nop
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr
 80050dc:	20000000 	.word	0x20000000
 80050e0:	10624dd3 	.word	0x10624dd3

080050e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e076      	b.n	80051e4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d108      	bne.n	8005110 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005106:	d009      	beq.n	800511c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	61da      	str	r2, [r3, #28]
 800510e:	e005      	b.n	800511c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff f826 	bl	8004188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005152:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800516e:	431a      	orrs	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	431a      	orrs	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a0:	ea42 0103 	orr.w	r1, r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	0c1a      	lsrs	r2, r3, #16
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f002 0204 	and.w	r2, r2, #4
 80051c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69da      	ldr	r2, [r3, #28]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	603b      	str	r3, [r7, #0]
 80051f8:	4613      	mov	r3, r2
 80051fa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051fc:	f7ff f8f2 	bl	80043e4 <HAL_GetTick>
 8005200:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b01      	cmp	r3, #1
 8005210:	d001      	beq.n	8005216 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005212:	2302      	movs	r3, #2
 8005214:	e12a      	b.n	800546c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <HAL_SPI_Transmit+0x36>
 800521c:	88fb      	ldrh	r3, [r7, #6]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e122      	b.n	800546c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_SPI_Transmit+0x48>
 8005230:	2302      	movs	r3, #2
 8005232:	e11b      	b.n	800546c <HAL_SPI_Transmit+0x280>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2203      	movs	r2, #3
 8005240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005282:	d10f      	bne.n	80052a4 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005292:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ae:	2b40      	cmp	r3, #64	@ 0x40
 80052b0:	d007      	beq.n	80052c2 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052ca:	d152      	bne.n	8005372 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_SPI_Transmit+0xee>
 80052d4:	8b7b      	ldrh	r3, [r7, #26]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d145      	bne.n	8005366 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052de:	881a      	ldrh	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ea:	1c9a      	adds	r2, r3, #2
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052fe:	e032      	b.n	8005366 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	d112      	bne.n	8005334 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005312:	881a      	ldrh	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531e:	1c9a      	adds	r2, r3, #2
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005332:	e018      	b.n	8005366 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005334:	f7ff f856 	bl	80043e4 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d803      	bhi.n	800534c <HAL_SPI_Transmit+0x160>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d102      	bne.n	8005352 <HAL_SPI_Transmit+0x166>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e082      	b.n	800546c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1c7      	bne.n	8005300 <HAL_SPI_Transmit+0x114>
 8005370:	e053      	b.n	800541a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_SPI_Transmit+0x194>
 800537a:	8b7b      	ldrh	r3, [r7, #26]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d147      	bne.n	8005410 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	330c      	adds	r3, #12
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053a6:	e033      	b.n	8005410 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d113      	bne.n	80053de <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	330c      	adds	r3, #12
 80053c0:	7812      	ldrb	r2, [r2, #0]
 80053c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053dc:	e018      	b.n	8005410 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053de:	f7ff f801 	bl	80043e4 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d803      	bhi.n	80053f6 <HAL_SPI_Transmit+0x20a>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f4:	d102      	bne.n	80053fc <HAL_SPI_Transmit+0x210>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e02d      	b.n	800546c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1c6      	bne.n	80053a8 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 fbc4 	bl	8005bac <SPI_EndRxTxTransaction>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800546a:	2300      	movs	r3, #0
  }
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b01      	cmp	r3, #1
 800548e:	d001      	beq.n	8005494 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005490:	2302      	movs	r3, #2
 8005492:	e104      	b.n	800569e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800549c:	d112      	bne.n	80054c4 <HAL_SPI_Receive+0x50>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10e      	bne.n	80054c4 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2204      	movs	r2, #4
 80054aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054ae:	88fa      	ldrh	r2, [r7, #6]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f8f3 	bl	80056a6 <HAL_SPI_TransmitReceive>
 80054c0:	4603      	mov	r3, r0
 80054c2:	e0ec      	b.n	800569e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054c4:	f7fe ff8e 	bl	80043e4 <HAL_GetTick>
 80054c8:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_SPI_Receive+0x62>
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e0e1      	b.n	800569e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_SPI_Receive+0x74>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e0da      	b.n	800569e <HAL_SPI_Receive+0x22a>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2204      	movs	r2, #4
 80054f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	88fa      	ldrh	r2, [r7, #6]
 800550e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005536:	d10f      	bne.n	8005558 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005546:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005556:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005562:	2b40      	cmp	r3, #64	@ 0x40
 8005564:	d007      	beq.n	8005576 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005574:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d170      	bne.n	8005660 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800557e:	e035      	b.n	80055ec <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b01      	cmp	r3, #1
 800558c:	d115      	bne.n	80055ba <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f103 020c 	add.w	r2, r3, #12
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559a:	7812      	ldrb	r2, [r2, #0]
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055b8:	e018      	b.n	80055ec <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ba:	f7fe ff13 	bl	80043e4 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d803      	bhi.n	80055d2 <HAL_SPI_Receive+0x15e>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d102      	bne.n	80055d8 <HAL_SPI_Receive+0x164>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e058      	b.n	800569e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1c4      	bne.n	8005580 <HAL_SPI_Receive+0x10c>
 80055f6:	e038      	b.n	800566a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b01      	cmp	r3, #1
 8005604:	d113      	bne.n	800562e <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005610:	b292      	uxth	r2, r2
 8005612:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005618:	1c9a      	adds	r2, r3, #2
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800562c:	e018      	b.n	8005660 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800562e:	f7fe fed9 	bl	80043e4 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d803      	bhi.n	8005646 <HAL_SPI_Receive+0x1d2>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d102      	bne.n	800564c <HAL_SPI_Receive+0x1d8>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e01e      	b.n	800569e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1c6      	bne.n	80055f8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	6839      	ldr	r1, [r7, #0]
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 fa4a 	bl	8005b08 <SPI_EndRxTransaction>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2220      	movs	r2, #32
 800567e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800569c:	2300      	movs	r3, #0
  }
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b08a      	sub	sp, #40	@ 0x28
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056b4:	2301      	movs	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056b8:	f7fe fe94 	bl	80043e4 <HAL_GetTick>
 80056bc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056c4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80056cc:	887b      	ldrh	r3, [r7, #2]
 80056ce:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056d0:	7ffb      	ldrb	r3, [r7, #31]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d00c      	beq.n	80056f0 <HAL_SPI_TransmitReceive+0x4a>
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056dc:	d106      	bne.n	80056ec <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d102      	bne.n	80056ec <HAL_SPI_TransmitReceive+0x46>
 80056e6:	7ffb      	ldrb	r3, [r7, #31]
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d001      	beq.n	80056f0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80056ec:	2302      	movs	r3, #2
 80056ee:	e17f      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_SPI_TransmitReceive+0x5c>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_SPI_TransmitReceive+0x5c>
 80056fc:	887b      	ldrh	r3, [r7, #2]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e174      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800570c:	2b01      	cmp	r3, #1
 800570e:	d101      	bne.n	8005714 <HAL_SPI_TransmitReceive+0x6e>
 8005710:	2302      	movs	r3, #2
 8005712:	e16d      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x34a>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b04      	cmp	r3, #4
 8005726:	d003      	beq.n	8005730 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2205      	movs	r2, #5
 800572c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	887a      	ldrh	r2, [r7, #2]
 8005740:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	887a      	ldrh	r2, [r7, #2]
 8005746:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	887a      	ldrh	r2, [r7, #2]
 8005752:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	887a      	ldrh	r2, [r7, #2]
 8005758:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005770:	2b40      	cmp	r3, #64	@ 0x40
 8005772:	d007      	beq.n	8005784 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005782:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800578c:	d17e      	bne.n	800588c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <HAL_SPI_TransmitReceive+0xf6>
 8005796:	8afb      	ldrh	r3, [r7, #22]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d16c      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a0:	881a      	ldrh	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ac:	1c9a      	adds	r2, r3, #2
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	3b01      	subs	r3, #1
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057c0:	e059      	b.n	8005876 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d11b      	bne.n	8005808 <HAL_SPI_TransmitReceive+0x162>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d016      	beq.n	8005808 <HAL_SPI_TransmitReceive+0x162>
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d113      	bne.n	8005808 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e4:	881a      	ldrh	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f0:	1c9a      	adds	r2, r3, #2
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b01      	cmp	r3, #1
 8005814:	d119      	bne.n	800584a <HAL_SPI_TransmitReceive+0x1a4>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800581a:	b29b      	uxth	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d014      	beq.n	800584a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582a:	b292      	uxth	r2, r2
 800582c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005832:	1c9a      	adds	r2, r3, #2
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005846:	2301      	movs	r3, #1
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800584a:	f7fe fdcb 	bl	80043e4 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005856:	429a      	cmp	r2, r3
 8005858:	d80d      	bhi.n	8005876 <HAL_SPI_TransmitReceive+0x1d0>
 800585a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005860:	d009      	beq.n	8005876 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2201      	movs	r2, #1
 8005866:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e0bc      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800587a:	b29b      	uxth	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1a0      	bne.n	80057c2 <HAL_SPI_TransmitReceive+0x11c>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d19b      	bne.n	80057c2 <HAL_SPI_TransmitReceive+0x11c>
 800588a:	e082      	b.n	8005992 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_SPI_TransmitReceive+0x1f4>
 8005894:	8afb      	ldrh	r3, [r7, #22]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d171      	bne.n	800597e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	330c      	adds	r3, #12
 80058a4:	7812      	ldrb	r2, [r2, #0]
 80058a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c0:	e05d      	b.n	800597e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d11c      	bne.n	800590a <HAL_SPI_TransmitReceive+0x264>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d017      	beq.n	800590a <HAL_SPI_TransmitReceive+0x264>
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d114      	bne.n	800590a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	7812      	ldrb	r2, [r2, #0]
 80058ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b01      	cmp	r3, #1
 8005916:	d119      	bne.n	800594c <HAL_SPI_TransmitReceive+0x2a6>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d014      	beq.n	800594c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800593e:	b29b      	uxth	r3, r3
 8005940:	3b01      	subs	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005948:	2301      	movs	r3, #1
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800594c:	f7fe fd4a 	bl	80043e4 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005958:	429a      	cmp	r2, r3
 800595a:	d803      	bhi.n	8005964 <HAL_SPI_TransmitReceive+0x2be>
 800595c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005962:	d102      	bne.n	800596a <HAL_SPI_TransmitReceive+0x2c4>
 8005964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e038      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005982:	b29b      	uxth	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d19c      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x21c>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d197      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005992:	6a3a      	ldr	r2, [r7, #32]
 8005994:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f908 	bl	8005bac <SPI_EndRxTxTransaction>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d008      	beq.n	80059b4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e01d      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10a      	bne.n	80059d2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059bc:	2300      	movs	r3, #0
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80059ee:	2300      	movs	r3, #0
  }
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3728      	adds	r7, #40	@ 0x28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a08:	f7fe fcec 	bl	80043e4 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a10:	1a9b      	subs	r3, r3, r2
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	4413      	add	r3, r2
 8005a16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a18:	f7fe fce4 	bl	80043e4 <HAL_GetTick>
 8005a1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a1e:	4b39      	ldr	r3, [pc, #228]	@ (8005b04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	015b      	lsls	r3, r3, #5
 8005a24:	0d1b      	lsrs	r3, r3, #20
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	fb02 f303 	mul.w	r3, r2, r3
 8005a2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a2e:	e054      	b.n	8005ada <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d050      	beq.n	8005ada <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a38:	f7fe fcd4 	bl	80043e4 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d902      	bls.n	8005a4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d13d      	bne.n	8005aca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a66:	d111      	bne.n	8005a8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a70:	d004      	beq.n	8005a7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a7a:	d107      	bne.n	8005a8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a94:	d10f      	bne.n	8005ab6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ab4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e017      	b.n	8005afa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d19b      	bne.n	8005a30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000000 	.word	0x20000000

08005b08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b1c:	d111      	bne.n	8005b42 <SPI_EndRxTransaction+0x3a>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b26:	d004      	beq.n	8005b32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b30:	d107      	bne.n	8005b42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b40:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b4a:	d117      	bne.n	8005b7c <SPI_EndRxTransaction+0x74>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b54:	d112      	bne.n	8005b7c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2101      	movs	r1, #1
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f7ff ff49 	bl	80059f8 <SPI_WaitFlagStateUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01a      	beq.n	8005ba2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b70:	f043 0220 	orr.w	r2, r3, #32
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e013      	b.n	8005ba4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2200      	movs	r2, #0
 8005b84:	2180      	movs	r1, #128	@ 0x80
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff ff36 	bl	80059f8 <SPI_WaitFlagStateUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e000      	b.n	8005ba4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	2102      	movs	r1, #2
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f7ff ff18 	bl	80059f8 <SPI_WaitFlagStateUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d007      	beq.n	8005bde <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd2:	f043 0220 	orr.w	r2, r3, #32
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e013      	b.n	8005c06 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2200      	movs	r2, #0
 8005be6:	2180      	movs	r1, #128	@ 0x80
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff ff05 	bl	80059f8 <SPI_WaitFlagStateUntilTimeout>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d007      	beq.n	8005c04 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf8:	f043 0220 	orr.w	r2, r3, #32
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e000      	b.n	8005c06 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <memset>:
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4402      	add	r2, r0
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d100      	bne.n	8005c18 <memset+0xa>
 8005c16:	4770      	bx	lr
 8005c18:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1c:	e7f9      	b.n	8005c12 <memset+0x4>
	...

08005c20 <__libc_init_array>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	2600      	movs	r6, #0
 8005c24:	4d0c      	ldr	r5, [pc, #48]	@ (8005c58 <__libc_init_array+0x38>)
 8005c26:	4c0d      	ldr	r4, [pc, #52]	@ (8005c5c <__libc_init_array+0x3c>)
 8005c28:	1b64      	subs	r4, r4, r5
 8005c2a:	10a4      	asrs	r4, r4, #2
 8005c2c:	42a6      	cmp	r6, r4
 8005c2e:	d109      	bne.n	8005c44 <__libc_init_array+0x24>
 8005c30:	f000 f81a 	bl	8005c68 <_init>
 8005c34:	2600      	movs	r6, #0
 8005c36:	4d0a      	ldr	r5, [pc, #40]	@ (8005c60 <__libc_init_array+0x40>)
 8005c38:	4c0a      	ldr	r4, [pc, #40]	@ (8005c64 <__libc_init_array+0x44>)
 8005c3a:	1b64      	subs	r4, r4, r5
 8005c3c:	10a4      	asrs	r4, r4, #2
 8005c3e:	42a6      	cmp	r6, r4
 8005c40:	d105      	bne.n	8005c4e <__libc_init_array+0x2e>
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c48:	4798      	blx	r3
 8005c4a:	3601      	adds	r6, #1
 8005c4c:	e7ee      	b.n	8005c2c <__libc_init_array+0xc>
 8005c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c52:	4798      	blx	r3
 8005c54:	3601      	adds	r6, #1
 8005c56:	e7f2      	b.n	8005c3e <__libc_init_array+0x1e>
 8005c58:	08005cc8 	.word	0x08005cc8
 8005c5c:	08005cc8 	.word	0x08005cc8
 8005c60:	08005cc8 	.word	0x08005cc8
 8005c64:	08005ccc 	.word	0x08005ccc

08005c68 <_init>:
 8005c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6a:	bf00      	nop
 8005c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c6e:	bc08      	pop	{r3}
 8005c70:	469e      	mov	lr, r3
 8005c72:	4770      	bx	lr

08005c74 <_fini>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr
