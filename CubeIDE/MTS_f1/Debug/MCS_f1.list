
MCS_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080077e4  080077e4  000087e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800782c  0800782c  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  0800782c  0800782c  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800782c  0800782c  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800782c  0800782c  0000882c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007830  08007830  00008830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007834  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004474  2000000c  08007840  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004480  08007840  00009480  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005323  00000000  00000000  00009035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015bc  00000000  00000000  0000e358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0000f918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000471  00000000  00000000  0000ff28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171c2  00000000  00000000  00010399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c44  00000000  00000000  0002755b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ac0  00000000  00000000  0003119f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2c5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018b0  00000000  00000000  000b2ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000b4554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080077cc 	.word	0x080077cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080077cc 	.word	0x080077cc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_fmul>:
 8000cb8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cc6:	ea92 0f0c 	teqne	r2, ip
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d06f      	beq.n	8000db0 <__aeabi_fmul+0xf8>
 8000cd0:	441a      	add	r2, r3
 8000cd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd6:	0240      	lsls	r0, r0, #9
 8000cd8:	bf18      	it	ne
 8000cda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cde:	d01e      	beq.n	8000d1e <__aeabi_fmul+0x66>
 8000ce0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ce4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ce8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cec:	fba0 3101 	umull	r3, r1, r0, r1
 8000cf0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cf4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cf8:	bf3e      	ittt	cc
 8000cfa:	0049      	lslcc	r1, r1, #1
 8000cfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d00:	005b      	lslcc	r3, r3, #1
 8000d02:	ea40 0001 	orr.w	r0, r0, r1
 8000d06:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d0a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d0c:	d81d      	bhi.n	8000d4a <__aeabi_fmul+0x92>
 8000d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d16:	bf08      	it	eq
 8000d18:	f020 0001 	biceq.w	r0, r0, #1
 8000d1c:	4770      	bx	lr
 8000d1e:	f090 0f00 	teq	r0, #0
 8000d22:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d26:	bf08      	it	eq
 8000d28:	0249      	lsleq	r1, r1, #9
 8000d2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d32:	3a7f      	subs	r2, #127	@ 0x7f
 8000d34:	bfc2      	ittt	gt
 8000d36:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d3e:	4770      	bxgt	lr
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	dc5d      	bgt.n	8000e08 <__aeabi_fmul+0x150>
 8000d4c:	f112 0f19 	cmn.w	r2, #25
 8000d50:	bfdc      	itt	le
 8000d52:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d56:	4770      	bxle	lr
 8000d58:	f1c2 0200 	rsb	r2, r2, #0
 8000d5c:	0041      	lsls	r1, r0, #1
 8000d5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d62:	f1c2 0220 	rsb	r2, r2, #32
 8000d66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d6e:	f140 0000 	adc.w	r0, r0, #0
 8000d72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d76:	bf08      	it	eq
 8000d78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7c:	4770      	bx	lr
 8000d7e:	f092 0f00 	teq	r2, #0
 8000d82:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0040      	lsleq	r0, r0, #1
 8000d8a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d8e:	3a01      	subeq	r2, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xce>
 8000d92:	ea40 000c 	orr.w	r0, r0, ip
 8000d96:	f093 0f00 	teq	r3, #0
 8000d9a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0049      	lsleq	r1, r1, #1
 8000da2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000da6:	3b01      	subeq	r3, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xe6>
 8000daa:	ea41 010c 	orr.w	r1, r1, ip
 8000dae:	e78f      	b.n	8000cd0 <__aeabi_fmul+0x18>
 8000db0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	bf18      	it	ne
 8000dba:	ea93 0f0c 	teqne	r3, ip
 8000dbe:	d00a      	beq.n	8000dd6 <__aeabi_fmul+0x11e>
 8000dc0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000dc4:	bf18      	it	ne
 8000dc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	d1d8      	bne.n	8000d7e <__aeabi_fmul+0xc6>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f090 0f00 	teq	r0, #0
 8000dda:	bf17      	itett	ne
 8000ddc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000de0:	4608      	moveq	r0, r1
 8000de2:	f091 0f00 	teqne	r1, #0
 8000de6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dea:	d014      	beq.n	8000e16 <__aeabi_fmul+0x15e>
 8000dec:	ea92 0f0c 	teq	r2, ip
 8000df0:	d101      	bne.n	8000df6 <__aeabi_fmul+0x13e>
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	d10f      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000df6:	ea93 0f0c 	teq	r3, ip
 8000dfa:	d103      	bne.n	8000e04 <__aeabi_fmul+0x14c>
 8000dfc:	024b      	lsls	r3, r1, #9
 8000dfe:	bf18      	it	ne
 8000e00:	4608      	movne	r0, r1
 8000e02:	d108      	bne.n	8000e16 <__aeabi_fmul+0x15e>
 8000e04:	ea80 0001 	eor.w	r0, r0, r1
 8000e08:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bx	lr
 8000e16:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e1a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e1e:	4770      	bx	lr

08000e20 <__aeabi_fdiv>:
 8000e20:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e28:	bf1e      	ittt	ne
 8000e2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e2e:	ea92 0f0c 	teqne	r2, ip
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d069      	beq.n	8000f0c <__aeabi_fdiv+0xec>
 8000e38:	eba2 0203 	sub.w	r2, r2, r3
 8000e3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e40:	0249      	lsls	r1, r1, #9
 8000e42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e46:	d037      	beq.n	8000eb8 <__aeabi_fdiv+0x98>
 8000e48:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	bf38      	it	cc
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e62:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e66:	428b      	cmp	r3, r1
 8000e68:	bf24      	itt	cs
 8000e6a:	1a5b      	subcs	r3, r3, r1
 8000e6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e74:	bf24      	itt	cs
 8000e76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e82:	bf24      	itt	cs
 8000e84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	bf18      	it	ne
 8000e9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ea2:	d1e0      	bne.n	8000e66 <__aeabi_fdiv+0x46>
 8000ea4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ea6:	f63f af50 	bhi.w	8000d4a <__aeabi_fmul+0x92>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb0:	bf08      	it	eq
 8000eb2:	f020 0001 	biceq.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ebc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ec0:	327f      	adds	r2, #127	@ 0x7f
 8000ec2:	bfc2      	ittt	gt
 8000ec4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ec8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ecc:	4770      	bxgt	lr
 8000ece:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ed2:	f04f 0300 	mov.w	r3, #0
 8000ed6:	3a01      	subs	r2, #1
 8000ed8:	e737      	b.n	8000d4a <__aeabi_fmul+0x92>
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xc2>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xda>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e795      	b.n	8000e38 <__aeabi_fdiv+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	d108      	bne.n	8000f28 <__aeabi_fdiv+0x108>
 8000f16:	0242      	lsls	r2, r0, #9
 8000f18:	f47f af7d 	bne.w	8000e16 <__aeabi_fmul+0x15e>
 8000f1c:	ea93 0f0c 	teq	r3, ip
 8000f20:	f47f af70 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f24:	4608      	mov	r0, r1
 8000f26:	e776      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f28:	ea93 0f0c 	teq	r3, ip
 8000f2c:	d104      	bne.n	8000f38 <__aeabi_fdiv+0x118>
 8000f2e:	024b      	lsls	r3, r1, #9
 8000f30:	f43f af4c 	beq.w	8000dcc <__aeabi_fmul+0x114>
 8000f34:	4608      	mov	r0, r1
 8000f36:	e76e      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f3c:	bf18      	it	ne
 8000f3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f42:	d1ca      	bne.n	8000eda <__aeabi_fdiv+0xba>
 8000f44:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f48:	f47f af5c 	bne.w	8000e04 <__aeabi_fmul+0x14c>
 8000f4c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f50:	f47f af3c 	bne.w	8000dcc <__aeabi_fmul+0x114>
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0x15e>
 8000f56:	bf00      	nop

08000f58 <inverter_matriz>:
#include "calib.h"

extern float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 8000f58:	b5b0      	push	{r4, r5, r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f66:	e02a      	b.n	8000fbe <inverter_matriz+0x66>
        for (int j = 0; j < N; j++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
 8000f6c:	e021      	b.n	8000fb2 <inverter_matriz+0x5a>
            if (i == j) {
 8000f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d10d      	bne.n	8000f92 <inverter_matriz+0x3a>
                inversa[i][j] = 1;
 8000f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	461a      	mov	r2, r3
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	6a3a      	ldr	r2, [r7, #32]
 8000f88:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000f90:	e00c      	b.n	8000fac <inverter_matriz+0x54>
            } else {
                inversa[i][j] = 0;
 8000f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	6a3a      	ldr	r2, [r7, #32]
 8000fa4:	f04f 0100 	mov.w	r1, #0
 8000fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (int j = 0; j < N; j++) {
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	623b      	str	r3, [r7, #32]
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	ddda      	ble.n	8000f6e <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fba:	3301      	adds	r3, #1
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	ddd1      	ble.n	8000f68 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	e0c7      	b.n	800115a <inverter_matriz+0x202>
    {
        float pivot = matriz[i][i];
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe0:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	e038      	b.n	800105a <inverter_matriz+0x102>
        {
            matriz[i][j] /= pivot;
 8000fe8:	69fa      	ldr	r2, [r7, #28]
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	4413      	add	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	4613      	mov	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	461a      	mov	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	189c      	adds	r4, r3, r2
 800100e:	68f9      	ldr	r1, [r7, #12]
 8001010:	f7ff ff06 	bl	8000e20 <__aeabi_fdiv>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
            inversa[i][j] /= pivot;
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	461a      	mov	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	461a      	mov	r2, r3
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	189c      	adds	r4, r3, r2
 8001044:	68f9      	ldr	r1, [r7, #12]
 8001046:	f7ff feeb 	bl	8000e20 <__aeabi_fdiv>
 800104a:	4603      	mov	r3, r0
 800104c:	461a      	mov	r2, r3
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
        for (int j = 0; j < N; j++)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	3301      	adds	r3, #1
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2b08      	cmp	r3, #8
 800105e:	ddc3      	ble.n	8000fe8 <inverter_matriz+0x90>
        }

        for (int k = 0; k < N; k++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e073      	b.n	800114e <inverter_matriz+0x1f6>
        {
            if (k != i)
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	429a      	cmp	r2, r3
 800106c:	d06c      	beq.n	8001148 <inverter_matriz+0x1f0>
            {
                float fator = matriz[k][i];
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4613      	mov	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	461a      	mov	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001084:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	e05a      	b.n	8001142 <inverter_matriz+0x1ea>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	461a      	mov	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	461a      	mov	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fdfc 	bl	8000cb8 <__aeabi_fmul>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4619      	mov	r1, r3
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4413      	add	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	189c      	adds	r4, r3, r2
 80010d4:	4628      	mov	r0, r5
 80010d6:	f7ff fce5 	bl	8000aa4 <__aeabi_fsub>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                    inversa[k][j] -= fator * inversa[i][j];
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	461a      	mov	r2, r3
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	461a      	mov	r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fdd0 	bl	8000cb8 <__aeabi_fmul>
 8001118:	4603      	mov	r3, r0
 800111a:	4619      	mov	r1, r3
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	4613      	mov	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	461a      	mov	r2, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	189c      	adds	r4, r3, r2
 800112c:	4628      	mov	r0, r5
 800112e:	f7ff fcb9 	bl	8000aa4 <__aeabi_fsub>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
                for (int j = 0; j < N; j++)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	3301      	adds	r3, #1
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	2b08      	cmp	r3, #8
 8001146:	dda1      	ble.n	800108c <inverter_matriz+0x134>
        for (int k = 0; k < N; k++)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2b08      	cmp	r3, #8
 8001152:	dd88      	ble.n	8001066 <inverter_matriz+0x10e>
    for (int i = 0; i < N; i++)
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	3301      	adds	r3, #1
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	2b08      	cmp	r3, #8
 800115e:	f77f af34 	ble.w	8000fca <inverter_matriz+0x72>
                }
            }
        }
    }
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	@ 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bdb0      	pop	{r4, r5, r7, pc}
 800116c:	0000      	movs	r0, r0
	...

08001170 <NLLS>:


uint8_t NLLS(float *mx, float *my, float *mz, float *p)
{
 8001170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001174:	f5ad 5d53 	sub.w	sp, sp, #13504	@ 0x34c0
 8001178:	b087      	sub	sp, #28
 800117a:	af00      	add	r7, sp, #0
 800117c:	f507 649b 	add.w	r4, r7, #1240	@ 0x4d8
 8001180:	f2a4 44cc 	subw	r4, r4, #1228	@ 0x4cc
 8001184:	6020      	str	r0, [r4, #0]
 8001186:	f507 609b 	add.w	r0, r7, #1240	@ 0x4d8
 800118a:	f5a0 609a 	sub.w	r0, r0, #1232	@ 0x4d0
 800118e:	6001      	str	r1, [r0, #0]
 8001190:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 8001194:	f2a1 41d4 	subw	r1, r1, #1236	@ 0x4d4
 8001198:	600a      	str	r2, [r1, #0]
 800119a:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800119e:	f5a2 629b 	sub.w	r2, r2, #1240	@ 0x4d8
 80011a2:	6013      	str	r3, [r2, #0]
	uint8_t passo = 0, loop = 1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80011aa:	f102 0217 	add.w	r2, r2, #23
 80011ae:	7013      	strb	r3, [r2, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80011b6:	f102 0216 	add.w	r2, r2, #22
 80011ba:	7013      	strb	r3, [r2, #0]
	float sf = 1;
 80011bc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011c0:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80011c4:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80011c8:	6013      	str	r3, [r2, #0]
	float p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J, mat_H[N][tam];
 80011ca:	4bb6      	ldr	r3, [pc, #728]	@ (80014a4 <NLLS+0x334>)
 80011cc:	f507 5450 	add.w	r4, r7, #13312	@ 0x3400
 80011d0:	f104 0434 	add.w	r4, r4, #52	@ 0x34
 80011d4:	461d      	mov	r5, r3
 80011d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011de:	682b      	ldr	r3, [r5, #0]
 80011e0:	6023      	str	r3, [r4, #0]
	float sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
	//float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

	for (int i=0; i < tam; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80011e8:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e01c      	b.n	800122a <NLLS+0xba>
	{
		Be[i] = 1*sf;
 80011f0:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80011f4:	f103 0318 	add.w	r3, r3, #24
 80011f8:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 80011fc:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8001200:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	f507 5151 	add.w	r1, r7, #13376	@ 0x3440
 800120a:	f101 0134 	add.w	r1, r1, #52	@ 0x34
 800120e:	6809      	ldr	r1, [r1, #0]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i=0; i < tam; i++)
 8001214:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001218:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8001224:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800122e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8001238:	dbda      	blt.n	80011f0 <NLLS+0x80>
	}

	while(loop == 1)
 800123a:	f004 bb0a 	b.w	8005852 <NLLS+0x46e2>
	{
		sx = p0[0];
 800123e:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8001242:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800124c:	f102 0210 	add.w	r2, r2, #16
 8001250:	6013      	str	r3, [r2, #0]
		sy = p0[1];
 8001252:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 8001256:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001260:	f102 020c 	add.w	r2, r2, #12
 8001264:	6013      	str	r3, [r2, #0]
		sz = p0[2];
 8001266:	f507 5350 	add.w	r3, r7, #13312	@ 0x3400
 800126a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001274:	f102 0208 	add.w	r2, r2, #8
 8001278:	6013      	str	r3, [r2, #0]
		bx = p0[3];
 800127a:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001284:	f102 0204 	add.w	r2, r2, #4
 8001288:	6013      	str	r3, [r2, #0]
		by = p0[4];
 800128a:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800128e:	f103 0304 	add.w	r3, r3, #4
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001298:	6013      	str	r3, [r2, #0]
		bz = p0[5];
 800129a:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800129e:	f103 0308 	add.w	r3, r3, #8
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80012a8:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80012ac:	6013      	str	r3, [r2, #0]
		rho = p0[6];
 80012ae:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80012b2:	f103 030c 	add.w	r3, r3, #12
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80012bc:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80012c0:	6013      	str	r3, [r2, #0]
		phi = p0[7];
 80012c2:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80012c6:	f103 0310 	add.w	r3, r3, #16
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80012d0:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 80012d4:	6013      	str	r3, [r2, #0]
		lambida = p0[8];
 80012d6:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80012da:	f103 0314 	add.w	r3, r3, #20
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80012e4:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80012e8:	6013      	str	r3, [r2, #0]

		sin_phi = phi - (phi*phi*phi)/6;// + (phi*phi*phi*phi*phi)/120;
 80012ea:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80012ee:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80012f8:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	f7ff fcdb 	bl	8000cb8 <__aeabi_fmul>
 8001302:	4603      	mov	r3, r0
 8001304:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8001308:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800130c:	6811      	ldr	r1, [r2, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fcd2 	bl	8000cb8 <__aeabi_fmul>
 8001314:	4603      	mov	r3, r0
 8001316:	4964      	ldr	r1, [pc, #400]	@ (80014a8 <NLLS+0x338>)
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fd81 	bl	8000e20 <__aeabi_fdiv>
 800131e:	4603      	mov	r3, r0
 8001320:	4619      	mov	r1, r3
 8001322:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001326:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	f7ff fbba 	bl	8000aa4 <__aeabi_fsub>
 8001330:	4603      	mov	r3, r0
 8001332:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001336:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800133a:	6013      	str	r3, [r2, #0]
		sin_rho = rho - (rho*rho*rho)/6;// + (rho*rho*rho*rho*rho)/120;
 800133c:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001340:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001344:	6819      	ldr	r1, [r3, #0]
 8001346:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800134a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	f7ff fcb2 	bl	8000cb8 <__aeabi_fmul>
 8001354:	4603      	mov	r3, r0
 8001356:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800135a:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800135e:	6811      	ldr	r1, [r2, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fca9 	bl	8000cb8 <__aeabi_fmul>
 8001366:	4603      	mov	r3, r0
 8001368:	494f      	ldr	r1, [pc, #316]	@ (80014a8 <NLLS+0x338>)
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fd58 	bl	8000e20 <__aeabi_fdiv>
 8001370:	4603      	mov	r3, r0
 8001372:	4619      	mov	r1, r3
 8001374:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001378:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	f7ff fb91 	bl	8000aa4 <__aeabi_fsub>
 8001382:	4603      	mov	r3, r0
 8001384:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001388:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800138c:	6013      	str	r3, [r2, #0]
		sin_lambda = lambida - (lambida*lambida*lambida)/6;// + (lambida*lambida*lambida*lambida*lambida)/120;
 800138e:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001392:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001396:	6819      	ldr	r1, [r3, #0]
 8001398:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800139c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	f7ff fc89 	bl	8000cb8 <__aeabi_fmul>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80013ac:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80013b0:	6811      	ldr	r1, [r2, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fc80 	bl	8000cb8 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	493b      	ldr	r1, [pc, #236]	@ (80014a8 <NLLS+0x338>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fd2f 	bl	8000e20 <__aeabi_fdiv>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4619      	mov	r1, r3
 80013c6:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80013ca:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	f7ff fb68 	bl	8000aa4 <__aeabi_fsub>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80013da:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80013de:	6013      	str	r3, [r2, #0]
		cos_phi = 1 - (phi*phi)/2;// + (phi*phi*phi*phi)/24;
 80013e0:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80013e4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80013e8:	6819      	ldr	r1, [r3, #0]
 80013ea:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80013ee:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	f7ff fc60 	bl	8000cb8 <__aeabi_fmul>
 80013f8:	4603      	mov	r3, r0
 80013fa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fd0e 	bl	8000e20 <__aeabi_fdiv>
 8001404:	4603      	mov	r3, r0
 8001406:	4619      	mov	r1, r3
 8001408:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800140c:	f7ff fb4a 	bl	8000aa4 <__aeabi_fsub>
 8001410:	4603      	mov	r3, r0
 8001412:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001416:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800141a:	6013      	str	r3, [r2, #0]
		cos_rho = 1 - (rho*rho)/2;// + (rho*rho*rho*rho)/24;
 800141c:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001420:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001424:	6819      	ldr	r1, [r3, #0]
 8001426:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800142a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	f7ff fc42 	bl	8000cb8 <__aeabi_fmul>
 8001434:	4603      	mov	r3, r0
 8001436:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fcf0 	bl	8000e20 <__aeabi_fdiv>
 8001440:	4603      	mov	r3, r0
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001448:	f7ff fb2c 	bl	8000aa4 <__aeabi_fsub>
 800144c:	4603      	mov	r3, r0
 800144e:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001452:	f102 0220 	add.w	r2, r2, #32
 8001456:	6013      	str	r3, [r2, #0]
		cos_lambda = 1 - (lambida*lambida)/2;// + (lambida*lambida*lambida*lambida)/24;
 8001458:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800145c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001460:	6819      	ldr	r1, [r3, #0]
 8001462:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001466:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	f7ff fc24 	bl	8000cb8 <__aeabi_fmul>
 8001470:	4603      	mov	r3, r0
 8001472:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fcd2 	bl	8000e20 <__aeabi_fdiv>
 800147c:	4603      	mov	r3, r0
 800147e:	4619      	mov	r1, r3
 8001480:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001484:	f7ff fb0e 	bl	8000aa4 <__aeabi_fsub>
 8001488:	4603      	mov	r3, r0
 800148a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800148e:	f102 021c 	add.w	r2, r2, #28
 8001492:	6013      	str	r3, [r2, #0]

		for(int i=0; i < tam; i++)
 8001494:	2300      	movs	r3, #0
 8001496:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800149a:	f102 0220 	add.w	r2, r2, #32
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	f003 bede 	b.w	8005260 <NLLS+0x40f0>
 80014a4:	080077e4 	.word	0x080077e4
 80014a8:	40c00000 	.word	0x40c00000
		{
			f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 80014ac:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80014b0:	f103 0320 	add.w	r3, r3, #32
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80014bc:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80014ca:	f102 0204 	add.w	r2, r2, #4
 80014ce:	6811      	ldr	r1, [r2, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fae7 	bl	8000aa4 <__aeabi_fsub>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461c      	mov	r4, r3
 80014da:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80014de:	f103 0320 	add.w	r3, r3, #32
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80014ea:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80014ee:	6812      	ldr	r2, [r2, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80014f8:	f102 0204 	add.w	r2, r2, #4
 80014fc:	6811      	ldr	r1, [r2, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fad0 	bl	8000aa4 <__aeabi_fsub>
 8001504:	4603      	mov	r3, r0
 8001506:	4619      	mov	r1, r3
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff fbd5 	bl	8000cb8 <__aeabi_fmul>
 800150e:	4603      	mov	r3, r0
 8001510:	461c      	mov	r4, r3
 8001512:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001516:	f103 0310 	add.w	r3, r3, #16
 800151a:	6819      	ldr	r1, [r3, #0]
 800151c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001520:	f103 0310 	add.w	r3, r3, #16
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	f7ff fbc7 	bl	8000cb8 <__aeabi_fmul>
 800152a:	4603      	mov	r3, r0
 800152c:	4619      	mov	r1, r3
 800152e:	4620      	mov	r0, r4
 8001530:	f7ff fc76 	bl	8000e20 <__aeabi_fdiv>
 8001534:	4603      	mov	r3, r0
 8001536:	461c      	mov	r4, r3
 8001538:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800153c:	f103 0320 	add.w	r3, r3, #32
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001548:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	4413      	add	r3, r2
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001556:	6811      	ldr	r1, [r2, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff faa3 	bl	8000aa4 <__aeabi_fsub>
 800155e:	4603      	mov	r3, r0
 8001560:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001564:	f102 0210 	add.w	r2, r2, #16
 8001568:	6811      	ldr	r1, [r2, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fba4 	bl	8000cb8 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	461d      	mov	r5, r3
 8001574:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8001578:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001582:	f103 030c 	add.w	r3, r3, #12
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	f7ff fb96 	bl	8000cb8 <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
 800158e:	461e      	mov	r6, r3
 8001590:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001594:	f103 0320 	add.w	r3, r3, #32
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80015a0:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80015ae:	f102 0204 	add.w	r2, r2, #4
 80015b2:	6811      	ldr	r1, [r2, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fa75 	bl	8000aa4 <__aeabi_fsub>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4619      	mov	r1, r3
 80015be:	4630      	mov	r0, r6
 80015c0:	f7ff fb7a 	bl	8000cb8 <__aeabi_fmul>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4619      	mov	r1, r3
 80015c8:	4628      	mov	r0, r5
 80015ca:	f7ff fa6b 	bl	8000aa4 <__aeabi_fsub>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461d      	mov	r5, r3
 80015d2:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80015d6:	f103 0320 	add.w	r3, r3, #32
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80015e2:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80015f0:	6811      	ldr	r1, [r2, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fa56 	bl	8000aa4 <__aeabi_fsub>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80015fe:	f102 0210 	add.w	r2, r2, #16
 8001602:	6811      	ldr	r1, [r2, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fb57 	bl	8000cb8 <__aeabi_fmul>
 800160a:	4603      	mov	r3, r0
 800160c:	461e      	mov	r6, r3
 800160e:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8001612:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001616:	6819      	ldr	r1, [r3, #0]
 8001618:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800161c:	f103 030c 	add.w	r3, r3, #12
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	f7ff fb49 	bl	8000cb8 <__aeabi_fmul>
 8001626:	4603      	mov	r3, r0
 8001628:	4698      	mov	r8, r3
 800162a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800162e:	f103 0320 	add.w	r3, r3, #32
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800163a:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	4413      	add	r3, r2
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001648:	f102 0204 	add.w	r2, r2, #4
 800164c:	6811      	ldr	r1, [r2, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fa28 	bl	8000aa4 <__aeabi_fsub>
 8001654:	4603      	mov	r3, r0
 8001656:	4619      	mov	r1, r3
 8001658:	4640      	mov	r0, r8
 800165a:	f7ff fb2d 	bl	8000cb8 <__aeabi_fmul>
 800165e:	4603      	mov	r3, r0
 8001660:	4619      	mov	r1, r3
 8001662:	4630      	mov	r0, r6
 8001664:	f7ff fa1e 	bl	8000aa4 <__aeabi_fsub>
 8001668:	4603      	mov	r3, r0
 800166a:	4619      	mov	r1, r3
 800166c:	4628      	mov	r0, r5
 800166e:	f7ff fb23 	bl	8000cb8 <__aeabi_fmul>
 8001672:	4603      	mov	r3, r0
 8001674:	461d      	mov	r5, r3
 8001676:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800167a:	f103 030c 	add.w	r3, r3, #12
 800167e:	6819      	ldr	r1, [r3, #0]
 8001680:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001684:	f103 0310 	add.w	r3, r3, #16
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	f7ff fb15 	bl	8000cb8 <__aeabi_fmul>
 800168e:	4603      	mov	r3, r0
 8001690:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001694:	f102 0220 	add.w	r2, r2, #32
 8001698:	6811      	ldr	r1, [r2, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fb0c 	bl	8000cb8 <__aeabi_fmul>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461e      	mov	r6, r3
 80016a4:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80016a8:	f103 030c 	add.w	r3, r3, #12
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80016b2:	f103 0310 	add.w	r3, r3, #16
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	f7ff fafe 	bl	8000cb8 <__aeabi_fmul>
 80016bc:	4603      	mov	r3, r0
 80016be:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80016c2:	f102 0220 	add.w	r2, r2, #32
 80016c6:	6811      	ldr	r1, [r2, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff faf5 	bl	8000cb8 <__aeabi_fmul>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4630      	mov	r0, r6
 80016d4:	f7ff faf0 	bl	8000cb8 <__aeabi_fmul>
 80016d8:	4603      	mov	r3, r0
 80016da:	4619      	mov	r1, r3
 80016dc:	4628      	mov	r0, r5
 80016de:	f7ff fb9f 	bl	8000e20 <__aeabi_fdiv>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4619      	mov	r1, r3
 80016e6:	4620      	mov	r0, r4
 80016e8:	f7ff f9de 	bl	8000aa8 <__addsf3>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461c      	mov	r4, r3
 80016f0:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80016f4:	f103 030c 	add.w	r3, r3, #12
 80016f8:	6819      	ldr	r1, [r3, #0]
 80016fa:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80016fe:	f103 0310 	add.w	r3, r3, #16
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	f7ff fad8 	bl	8000cb8 <__aeabi_fmul>
 8001708:	4603      	mov	r3, r0
 800170a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800170e:	f102 0220 	add.w	r2, r2, #32
 8001712:	6811      	ldr	r1, [r2, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff facf 	bl	8000cb8 <__aeabi_fmul>
 800171a:	4603      	mov	r3, r0
 800171c:	461d      	mov	r5, r3
 800171e:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001722:	f103 0320 	add.w	r3, r3, #32
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800172e:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	4413      	add	r3, r2
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800173c:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8001740:	6811      	ldr	r1, [r2, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f9ae 	bl	8000aa4 <__aeabi_fsub>
 8001748:	4603      	mov	r3, r0
 800174a:	4619      	mov	r1, r3
 800174c:	4628      	mov	r0, r5
 800174e:	f7ff fab3 	bl	8000cb8 <__aeabi_fmul>
 8001752:	4603      	mov	r3, r0
 8001754:	461d      	mov	r5, r3
 8001756:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800175a:	f103 0308 	add.w	r3, r3, #8
 800175e:	6819      	ldr	r1, [r3, #0]
 8001760:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001764:	f103 0310 	add.w	r3, r3, #16
 8001768:	6818      	ldr	r0, [r3, #0]
 800176a:	f7ff faa5 	bl	8000cb8 <__aeabi_fmul>
 800176e:	4603      	mov	r3, r0
 8001770:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001774:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001778:	6811      	ldr	r1, [r2, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fa9c 	bl	8000cb8 <__aeabi_fmul>
 8001780:	4603      	mov	r3, r0
 8001782:	461e      	mov	r6, r3
 8001784:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001788:	f103 0320 	add.w	r3, r3, #32
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001794:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8001798:	6812      	ldr	r2, [r2, #0]
 800179a:	4413      	add	r3, r2
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80017a2:	6811      	ldr	r1, [r2, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff f97d 	bl	8000aa4 <__aeabi_fsub>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4619      	mov	r1, r3
 80017ae:	4630      	mov	r0, r6
 80017b0:	f7ff fa82 	bl	8000cb8 <__aeabi_fmul>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4619      	mov	r1, r3
 80017b8:	4628      	mov	r0, r5
 80017ba:	f7ff f973 	bl	8000aa4 <__aeabi_fsub>
 80017be:	4603      	mov	r3, r0
 80017c0:	461d      	mov	r5, r3
 80017c2:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80017c6:	f103 0308 	add.w	r3, r3, #8
 80017ca:	6819      	ldr	r1, [r3, #0]
 80017cc:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80017d0:	f103 030c 	add.w	r3, r3, #12
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	f7ff fa6f 	bl	8000cb8 <__aeabi_fmul>
 80017da:	4603      	mov	r3, r0
 80017dc:	461e      	mov	r6, r3
 80017de:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80017e2:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80017e6:	6819      	ldr	r1, [r3, #0]
 80017e8:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80017ec:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	f7ff fa61 	bl	8000cb8 <__aeabi_fmul>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80017fe:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001802:	6819      	ldr	r1, [r3, #0]
 8001804:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8001808:	f103 0320 	add.w	r3, r3, #32
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	f7ff fa53 	bl	8000cb8 <__aeabi_fmul>
 8001812:	4603      	mov	r3, r0
 8001814:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001818:	f102 021c 	add.w	r2, r2, #28
 800181c:	6811      	ldr	r1, [r2, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fa4a 	bl	8000cb8 <__aeabi_fmul>
 8001824:	4603      	mov	r3, r0
 8001826:	4619      	mov	r1, r3
 8001828:	4640      	mov	r0, r8
 800182a:	f7ff f93b 	bl	8000aa4 <__aeabi_fsub>
 800182e:	4603      	mov	r3, r0
 8001830:	4619      	mov	r1, r3
 8001832:	4630      	mov	r0, r6
 8001834:	f7ff fa40 	bl	8000cb8 <__aeabi_fmul>
 8001838:	4603      	mov	r3, r0
 800183a:	461e      	mov	r6, r3
 800183c:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001840:	f103 0320 	add.w	r3, r3, #32
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800184c:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	4413      	add	r3, r2
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800185a:	f102 0204 	add.w	r2, r2, #4
 800185e:	6811      	ldr	r1, [r2, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff f91f 	bl	8000aa4 <__aeabi_fsub>
 8001866:	4603      	mov	r3, r0
 8001868:	4619      	mov	r1, r3
 800186a:	4630      	mov	r0, r6
 800186c:	f7ff fa24 	bl	8000cb8 <__aeabi_fmul>
 8001870:	4603      	mov	r3, r0
 8001872:	4619      	mov	r1, r3
 8001874:	4628      	mov	r0, r5
 8001876:	f7ff f917 	bl	8000aa8 <__addsf3>
 800187a:	4603      	mov	r3, r0
 800187c:	461d      	mov	r5, r3
 800187e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001882:	f103 030c 	add.w	r3, r3, #12
 8001886:	6819      	ldr	r1, [r3, #0]
 8001888:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800188c:	f103 0310 	add.w	r3, r3, #16
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	f7ff fa11 	bl	8000cb8 <__aeabi_fmul>
 8001896:	4603      	mov	r3, r0
 8001898:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800189c:	f102 0220 	add.w	r2, r2, #32
 80018a0:	6811      	ldr	r1, [r2, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fa08 	bl	8000cb8 <__aeabi_fmul>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461e      	mov	r6, r3
 80018ac:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80018b0:	f103 0320 	add.w	r3, r3, #32
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80018bc:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	4413      	add	r3, r2
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80018ca:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80018ce:	6811      	ldr	r1, [r2, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f8e7 	bl	8000aa4 <__aeabi_fsub>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4619      	mov	r1, r3
 80018da:	4630      	mov	r0, r6
 80018dc:	f7ff f9ec 	bl	8000cb8 <__aeabi_fmul>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461e      	mov	r6, r3
 80018e4:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80018e8:	f103 0308 	add.w	r3, r3, #8
 80018ec:	6819      	ldr	r1, [r3, #0]
 80018ee:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80018f2:	f103 0310 	add.w	r3, r3, #16
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	f7ff f9de 	bl	8000cb8 <__aeabi_fmul>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001902:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8001906:	6811      	ldr	r1, [r2, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f9d5 	bl	8000cb8 <__aeabi_fmul>
 800190e:	4603      	mov	r3, r0
 8001910:	4698      	mov	r8, r3
 8001912:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001916:	f103 0320 	add.w	r3, r3, #32
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001922:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	4413      	add	r3, r2
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001930:	6811      	ldr	r1, [r2, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f8b6 	bl	8000aa4 <__aeabi_fsub>
 8001938:	4603      	mov	r3, r0
 800193a:	4619      	mov	r1, r3
 800193c:	4640      	mov	r0, r8
 800193e:	f7ff f9bb 	bl	8000cb8 <__aeabi_fmul>
 8001942:	4603      	mov	r3, r0
 8001944:	4619      	mov	r1, r3
 8001946:	4630      	mov	r0, r6
 8001948:	f7ff f8ac 	bl	8000aa4 <__aeabi_fsub>
 800194c:	4603      	mov	r3, r0
 800194e:	461e      	mov	r6, r3
 8001950:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001954:	f103 0308 	add.w	r3, r3, #8
 8001958:	6819      	ldr	r1, [r3, #0]
 800195a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800195e:	f103 030c 	add.w	r3, r3, #12
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	f7ff f9a8 	bl	8000cb8 <__aeabi_fmul>
 8001968:	4603      	mov	r3, r0
 800196a:	4698      	mov	r8, r3
 800196c:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8001970:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800197a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	f7ff f99a 	bl	8000cb8 <__aeabi_fmul>
 8001984:	4603      	mov	r3, r0
 8001986:	4699      	mov	r9, r3
 8001988:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800198c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8001996:	f103 0320 	add.w	r3, r3, #32
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	f7ff f98c 	bl	8000cb8 <__aeabi_fmul>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80019a6:	f102 021c 	add.w	r2, r2, #28
 80019aa:	6811      	ldr	r1, [r2, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f983 	bl	8000cb8 <__aeabi_fmul>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4619      	mov	r1, r3
 80019b6:	4648      	mov	r0, r9
 80019b8:	f7ff f874 	bl	8000aa4 <__aeabi_fsub>
 80019bc:	4603      	mov	r3, r0
 80019be:	4619      	mov	r1, r3
 80019c0:	4640      	mov	r0, r8
 80019c2:	f7ff f979 	bl	8000cb8 <__aeabi_fmul>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4698      	mov	r8, r3
 80019ca:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80019ce:	f103 0320 	add.w	r3, r3, #32
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80019da:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	4413      	add	r3, r2
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80019e8:	f102 0204 	add.w	r2, r2, #4
 80019ec:	6811      	ldr	r1, [r2, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f858 	bl	8000aa4 <__aeabi_fsub>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4619      	mov	r1, r3
 80019f8:	4640      	mov	r0, r8
 80019fa:	f7ff f95d 	bl	8000cb8 <__aeabi_fmul>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4630      	mov	r0, r6
 8001a04:	f7ff f850 	bl	8000aa8 <__addsf3>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	f7ff f953 	bl	8000cb8 <__aeabi_fmul>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461d      	mov	r5, r3
 8001a16:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001a1a:	f103 030c 	add.w	r3, r3, #12
 8001a1e:	6819      	ldr	r1, [r3, #0]
 8001a20:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001a24:	f103 0310 	add.w	r3, r3, #16
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	f7ff f945 	bl	8000cb8 <__aeabi_fmul>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001a34:	f102 0208 	add.w	r2, r2, #8
 8001a38:	6811      	ldr	r1, [r2, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f93c 	bl	8000cb8 <__aeabi_fmul>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001a46:	f102 0220 	add.w	r2, r2, #32
 8001a4a:	6811      	ldr	r1, [r2, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f933 	bl	8000cb8 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001a58:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001a5c:	6811      	ldr	r1, [r2, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f92a 	bl	8000cb8 <__aeabi_fmul>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001a6a:	f102 021c 	add.w	r2, r2, #28
 8001a6e:	6811      	ldr	r1, [r2, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f921 	bl	8000cb8 <__aeabi_fmul>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461e      	mov	r6, r3
 8001a7a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001a7e:	f103 030c 	add.w	r3, r3, #12
 8001a82:	6819      	ldr	r1, [r3, #0]
 8001a84:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001a88:	f103 0310 	add.w	r3, r3, #16
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	f7ff f913 	bl	8000cb8 <__aeabi_fmul>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001a98:	f102 0208 	add.w	r2, r2, #8
 8001a9c:	6811      	ldr	r1, [r2, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f90a 	bl	8000cb8 <__aeabi_fmul>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001aaa:	f102 0220 	add.w	r2, r2, #32
 8001aae:	6811      	ldr	r1, [r2, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f901 	bl	8000cb8 <__aeabi_fmul>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001abc:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8001ac0:	6811      	ldr	r1, [r2, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f8f8 	bl	8000cb8 <__aeabi_fmul>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001ace:	f102 021c 	add.w	r2, r2, #28
 8001ad2:	6811      	ldr	r1, [r2, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff f8ef 	bl	8000cb8 <__aeabi_fmul>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4619      	mov	r1, r3
 8001ade:	4630      	mov	r0, r6
 8001ae0:	f7ff f8ea 	bl	8000cb8 <__aeabi_fmul>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f7ff f999 	bl	8000e20 <__aeabi_fdiv>
 8001aee:	4603      	mov	r3, r0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7fe ffd8 	bl	8000aa8 <__addsf3>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4619      	mov	r1, r3
 8001afc:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001b00:	f103 0318 	add.w	r3, r3, #24
 8001b04:	f6a3 53ac 	subw	r3, r3, #3500	@ 0xdac
 8001b08:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8001b0c:	f102 0220 	add.w	r2, r2, #32
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			e[i] = (Be[i] * Be[i]) - f[i];
 8001b16:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001b1a:	f103 0318 	add.w	r3, r3, #24
 8001b1e:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 8001b22:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8001b26:	f102 0220 	add.w	r2, r2, #32
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b30:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001b34:	f103 0318 	add.w	r3, r3, #24
 8001b38:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 8001b3c:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8001b40:	f102 0220 	add.w	r2, r2, #32
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff f8b4 	bl	8000cb8 <__aeabi_fmul>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001b58:	f103 0318 	add.w	r3, r3, #24
 8001b5c:	f6a3 53ac 	subw	r3, r3, #3500	@ 0xdac
 8001b60:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8001b64:	f102 0220 	add.w	r2, r2, #32
 8001b68:	6812      	ldr	r2, [r2, #0]
 8001b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7fe ff98 	bl	8000aa4 <__aeabi_fsub>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4619      	mov	r1, r3
 8001b78:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001b7c:	f103 0318 	add.w	r3, r3, #24
 8001b80:	f6a3 1354 	subw	r3, r3, #2388	@ 0x954
 8001b84:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8001b88:	f102 0220 	add.w	r2, r2, #32
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8001b92:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001b96:	f103 0320 	add.w	r3, r3, #32
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001ba2:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	4413      	add	r3, r2
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	f7fe ff76 	bl	8000aa4 <__aeabi_fsub>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001bbe:	f102 0210 	add.w	r2, r2, #16
 8001bc2:	6811      	ldr	r1, [r2, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f877 	bl	8000cb8 <__aeabi_fmul>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461c      	mov	r4, r3
 8001bce:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8001bd2:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001bd6:	6819      	ldr	r1, [r3, #0]
 8001bd8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001bdc:	f103 030c 	add.w	r3, r3, #12
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	f7ff f869 	bl	8000cb8 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461d      	mov	r5, r3
 8001bea:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001bee:	f103 0320 	add.w	r3, r3, #32
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001bfa:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001c0a:	f103 0304 	add.w	r3, r3, #4
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	f7fe ff48 	bl	8000aa4 <__aeabi_fsub>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4619      	mov	r1, r3
 8001c18:	4628      	mov	r0, r5
 8001c1a:	f7ff f84d 	bl	8000cb8 <__aeabi_fmul>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4619      	mov	r1, r3
 8001c22:	4620      	mov	r0, r4
 8001c24:	f7fe ff3e 	bl	8000aa4 <__aeabi_fsub>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe ff3b 	bl	8000aa8 <__addsf3>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461c      	mov	r4, r3
 8001c36:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001c3a:	f103 0320 	add.w	r3, r3, #32
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001c46:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	f7fe ff24 	bl	8000aa4 <__aeabi_fsub>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7ff f829 	bl	8000cb8 <__aeabi_fmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461c      	mov	r4, r3
 8001c6a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001c6e:	f103 0310 	add.w	r3, r3, #16
 8001c72:	6819      	ldr	r1, [r3, #0]
 8001c74:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001c78:	f103 0310 	add.w	r3, r3, #16
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	f7ff f81b 	bl	8000cb8 <__aeabi_fmul>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001c88:	f102 020c 	add.w	r2, r2, #12
 8001c8c:	6811      	ldr	r1, [r2, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f812 	bl	8000cb8 <__aeabi_fmul>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001c9a:	f102 020c 	add.w	r2, r2, #12
 8001c9e:	6811      	ldr	r1, [r2, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff f809 	bl	8000cb8 <__aeabi_fmul>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001cac:	f102 0220 	add.w	r2, r2, #32
 8001cb0:	6811      	ldr	r1, [r2, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff f800 	bl	8000cb8 <__aeabi_fmul>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001cbe:	f102 0220 	add.w	r2, r2, #32
 8001cc2:	6811      	ldr	r1, [r2, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fff7 	bl	8000cb8 <__aeabi_fmul>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7ff f8a6 	bl	8000e20 <__aeabi_fdiv>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461c      	mov	r4, r3
 8001cd8:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001cdc:	f103 0320 	add.w	r3, r3, #32
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001ce8:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	f7fe fed3 	bl	8000aa4 <__aeabi_fsub>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001d04:	f102 0210 	add.w	r2, r2, #16
 8001d08:	6811      	ldr	r1, [r2, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe ffd4 	bl	8000cb8 <__aeabi_fmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461d      	mov	r5, r3
 8001d14:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8001d18:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001d1c:	6819      	ldr	r1, [r3, #0]
 8001d1e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001d22:	f103 030c 	add.w	r3, r3, #12
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	f7fe ffc6 	bl	8000cb8 <__aeabi_fmul>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461e      	mov	r6, r3
 8001d30:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001d34:	f103 0320 	add.w	r3, r3, #32
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001d40:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001d50:	f103 0304 	add.w	r3, r3, #4
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	f7fe fea5 	bl	8000aa4 <__aeabi_fsub>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4630      	mov	r0, r6
 8001d60:	f7fe ffaa 	bl	8000cb8 <__aeabi_fmul>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4619      	mov	r1, r3
 8001d68:	4628      	mov	r0, r5
 8001d6a:	f7fe fe9b 	bl	8000aa4 <__aeabi_fsub>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461d      	mov	r5, r3
 8001d72:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001d76:	f103 0320 	add.w	r3, r3, #32
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001d82:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	f7fe fe86 	bl	8000aa4 <__aeabi_fsub>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001d9e:	f102 0210 	add.w	r2, r2, #16
 8001da2:	6811      	ldr	r1, [r2, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe ff87 	bl	8000cb8 <__aeabi_fmul>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461e      	mov	r6, r3
 8001dae:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8001db2:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001db6:	6819      	ldr	r1, [r3, #0]
 8001db8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001dbc:	f103 030c 	add.w	r3, r3, #12
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	f7fe ff79 	bl	8000cb8 <__aeabi_fmul>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4698      	mov	r8, r3
 8001dca:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001dce:	f103 0320 	add.w	r3, r3, #32
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001dda:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	4413      	add	r3, r2
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001dea:	f103 0304 	add.w	r3, r3, #4
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	f7fe fe58 	bl	8000aa4 <__aeabi_fsub>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4619      	mov	r1, r3
 8001df8:	4640      	mov	r0, r8
 8001dfa:	f7fe ff5d 	bl	8000cb8 <__aeabi_fmul>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4619      	mov	r1, r3
 8001e02:	4630      	mov	r0, r6
 8001e04:	f7fe fe4e 	bl	8000aa4 <__aeabi_fsub>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4628      	mov	r0, r5
 8001e0e:	f7fe ff53 	bl	8000cb8 <__aeabi_fmul>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4619      	mov	r1, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fe46 	bl	8000aa8 <__addsf3>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461d      	mov	r5, r3
 8001e20:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001e24:	f103 0310 	add.w	r3, r3, #16
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001e2e:	f103 0310 	add.w	r3, r3, #16
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	f7fe ff40 	bl	8000cb8 <__aeabi_fmul>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001e3e:	f102 0210 	add.w	r2, r2, #16
 8001e42:	6811      	ldr	r1, [r2, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ff37 	bl	8000cb8 <__aeabi_fmul>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001e50:	f102 020c 	add.w	r2, r2, #12
 8001e54:	6811      	ldr	r1, [r2, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe ff2e 	bl	8000cb8 <__aeabi_fmul>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001e62:	f102 020c 	add.w	r2, r2, #12
 8001e66:	6811      	ldr	r1, [r2, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe ff25 	bl	8000cb8 <__aeabi_fmul>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001e74:	f102 0220 	add.w	r2, r2, #32
 8001e78:	6811      	ldr	r1, [r2, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe ff1c 	bl	8000cb8 <__aeabi_fmul>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001e86:	f102 0220 	add.w	r2, r2, #32
 8001e8a:	6811      	ldr	r1, [r2, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe ff13 	bl	8000cb8 <__aeabi_fmul>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4619      	mov	r1, r3
 8001e96:	4628      	mov	r0, r5
 8001e98:	f7fe ffc2 	bl	8000e20 <__aeabi_fdiv>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7fe fdff 	bl	8000aa4 <__aeabi_fsub>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461c      	mov	r4, r3
 8001eaa:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001eae:	f103 0320 	add.w	r3, r3, #32
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001eba:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001eca:	f103 0304 	add.w	r3, r3, #4
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	f7fe fde8 	bl	8000aa4 <__aeabi_fsub>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461d      	mov	r5, r3
 8001ed8:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001edc:	f103 0320 	add.w	r3, r3, #32
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001ee8:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001ef8:	f103 0304 	add.w	r3, r3, #4
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	f7fe fdd1 	bl	8000aa4 <__aeabi_fsub>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4619      	mov	r1, r3
 8001f06:	4628      	mov	r0, r5
 8001f08:	f7fe fed6 	bl	8000cb8 <__aeabi_fmul>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fdc9 	bl	8000aa8 <__addsf3>
 8001f16:	4603      	mov	r3, r0
 8001f18:	461d      	mov	r5, r3
 8001f1a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001f1e:	f103 0310 	add.w	r3, r3, #16
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001f28:	f103 0310 	add.w	r3, r3, #16
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	f7fe fec3 	bl	8000cb8 <__aeabi_fmul>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8001f38:	f102 0210 	add.w	r2, r2, #16
 8001f3c:	6811      	ldr	r1, [r2, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe feba 	bl	8000cb8 <__aeabi_fmul>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4619      	mov	r1, r3
 8001f48:	4628      	mov	r0, r5
 8001f4a:	f7fe ff69 	bl	8000e20 <__aeabi_fdiv>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4619      	mov	r1, r3
 8001f52:	4620      	mov	r0, r4
 8001f54:	f7fe fda6 	bl	8000aa4 <__aeabi_fsub>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461c      	mov	r4, r3
 8001f5c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001f60:	f103 0308 	add.w	r3, r3, #8
 8001f64:	6819      	ldr	r1, [r3, #0]
 8001f66:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001f6a:	f103 030c 	add.w	r3, r3, #12
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	f7fe fea2 	bl	8000cb8 <__aeabi_fmul>
 8001f74:	4603      	mov	r3, r0
 8001f76:	461d      	mov	r5, r3
 8001f78:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8001f7c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001f80:	6819      	ldr	r1, [r3, #0]
 8001f82:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8001f86:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	f7fe fe94 	bl	8000cb8 <__aeabi_fmul>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461e      	mov	r6, r3
 8001f94:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8001f98:	f103 0320 	add.w	r3, r3, #32
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8001fa2:	f103 031c 	add.w	r3, r3, #28
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	f7fe fe86 	bl	8000cb8 <__aeabi_fmul>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8001fb2:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001fb6:	6811      	ldr	r1, [r2, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fe7d 	bl	8000cb8 <__aeabi_fmul>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4630      	mov	r0, r6
 8001fc4:	f7fe fd6e 	bl	8000aa4 <__aeabi_fsub>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4628      	mov	r0, r5
 8001fce:	f7fe fe73 	bl	8000cb8 <__aeabi_fmul>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461d      	mov	r5, r3
 8001fd6:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8001fda:	f103 0320 	add.w	r3, r3, #32
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8001fe6:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8001ff6:	f103 0304 	add.w	r3, r3, #4
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	f7fe fd52 	bl	8000aa4 <__aeabi_fsub>
 8002000:	4603      	mov	r3, r0
 8002002:	4619      	mov	r1, r3
 8002004:	4628      	mov	r0, r5
 8002006:	f7fe fe57 	bl	8000cb8 <__aeabi_fmul>
 800200a:	4603      	mov	r3, r0
 800200c:	461d      	mov	r5, r3
 800200e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002012:	f103 030c 	add.w	r3, r3, #12
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800201c:	f103 0310 	add.w	r3, r3, #16
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	f7fe fe49 	bl	8000cb8 <__aeabi_fmul>
 8002026:	4603      	mov	r3, r0
 8002028:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800202c:	f102 0220 	add.w	r2, r2, #32
 8002030:	6811      	ldr	r1, [r2, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fe40 	bl	8000cb8 <__aeabi_fmul>
 8002038:	4603      	mov	r3, r0
 800203a:	461e      	mov	r6, r3
 800203c:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8002040:	f103 0320 	add.w	r3, r3, #32
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800204c:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	4413      	add	r3, r2
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800205c:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	f7fe fd1f 	bl	8000aa4 <__aeabi_fsub>
 8002066:	4603      	mov	r3, r0
 8002068:	4619      	mov	r1, r3
 800206a:	4630      	mov	r0, r6
 800206c:	f7fe fe24 	bl	8000cb8 <__aeabi_fmul>
 8002070:	4603      	mov	r3, r0
 8002072:	4619      	mov	r1, r3
 8002074:	4628      	mov	r0, r5
 8002076:	f7fe fd17 	bl	8000aa8 <__addsf3>
 800207a:	4603      	mov	r3, r0
 800207c:	461d      	mov	r5, r3
 800207e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002082:	f103 0308 	add.w	r3, r3, #8
 8002086:	6819      	ldr	r1, [r3, #0]
 8002088:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800208c:	f103 0310 	add.w	r3, r3, #16
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	f7fe fe11 	bl	8000cb8 <__aeabi_fmul>
 8002096:	4603      	mov	r3, r0
 8002098:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800209c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80020a0:	6811      	ldr	r1, [r2, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fe08 	bl	8000cb8 <__aeabi_fmul>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461e      	mov	r6, r3
 80020ac:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80020b0:	f103 0320 	add.w	r3, r3, #32
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80020bc:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4619      	mov	r1, r3
 80020c8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	f7fe fce9 	bl	8000aa4 <__aeabi_fsub>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4619      	mov	r1, r3
 80020d6:	4630      	mov	r0, r6
 80020d8:	f7fe fdee 	bl	8000cb8 <__aeabi_fmul>
 80020dc:	4603      	mov	r3, r0
 80020de:	4619      	mov	r1, r3
 80020e0:	4628      	mov	r0, r5
 80020e2:	f7fe fcdf 	bl	8000aa4 <__aeabi_fsub>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461d      	mov	r5, r3
 80020ea:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80020ee:	f103 0308 	add.w	r3, r3, #8
 80020f2:	6819      	ldr	r1, [r3, #0]
 80020f4:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80020f8:	f103 030c 	add.w	r3, r3, #12
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	f7fe fddb 	bl	8000cb8 <__aeabi_fmul>
 8002102:	4603      	mov	r3, r0
 8002104:	461e      	mov	r6, r3
 8002106:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800210a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800210e:	6819      	ldr	r1, [r3, #0]
 8002110:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8002114:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	f7fe fdcd 	bl	8000cb8 <__aeabi_fmul>
 800211e:	4603      	mov	r3, r0
 8002120:	4698      	mov	r8, r3
 8002122:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8002126:	f103 0320 	add.w	r3, r3, #32
 800212a:	6819      	ldr	r1, [r3, #0]
 800212c:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8002130:	f103 031c 	add.w	r3, r3, #28
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	f7fe fdbf 	bl	8000cb8 <__aeabi_fmul>
 800213a:	4603      	mov	r3, r0
 800213c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002140:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002144:	6811      	ldr	r1, [r2, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fdb6 	bl	8000cb8 <__aeabi_fmul>
 800214c:	4603      	mov	r3, r0
 800214e:	4619      	mov	r1, r3
 8002150:	4640      	mov	r0, r8
 8002152:	f7fe fca7 	bl	8000aa4 <__aeabi_fsub>
 8002156:	4603      	mov	r3, r0
 8002158:	4619      	mov	r1, r3
 800215a:	4630      	mov	r0, r6
 800215c:	f7fe fdac 	bl	8000cb8 <__aeabi_fmul>
 8002160:	4603      	mov	r3, r0
 8002162:	461e      	mov	r6, r3
 8002164:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8002168:	f103 0320 	add.w	r3, r3, #32
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8002174:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	4413      	add	r3, r2
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4619      	mov	r1, r3
 8002180:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002184:	f103 0304 	add.w	r3, r3, #4
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	f7fe fc8b 	bl	8000aa4 <__aeabi_fsub>
 800218e:	4603      	mov	r3, r0
 8002190:	4619      	mov	r1, r3
 8002192:	4630      	mov	r0, r6
 8002194:	f7fe fd90 	bl	8000cb8 <__aeabi_fmul>
 8002198:	4603      	mov	r3, r0
 800219a:	461e      	mov	r6, r3
 800219c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80021a0:	f103 030c 	add.w	r3, r3, #12
 80021a4:	6819      	ldr	r1, [r3, #0]
 80021a6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80021aa:	f103 0310 	add.w	r3, r3, #16
 80021ae:	6818      	ldr	r0, [r3, #0]
 80021b0:	f7fe fd82 	bl	8000cb8 <__aeabi_fmul>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80021ba:	f102 0220 	add.w	r2, r2, #32
 80021be:	6811      	ldr	r1, [r2, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fd79 	bl	8000cb8 <__aeabi_fmul>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4698      	mov	r8, r3
 80021ca:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80021ce:	f103 0320 	add.w	r3, r3, #32
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80021da:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 80021de:	6812      	ldr	r2, [r2, #0]
 80021e0:	4413      	add	r3, r2
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80021ea:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	f7fe fc58 	bl	8000aa4 <__aeabi_fsub>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4619      	mov	r1, r3
 80021f8:	4640      	mov	r0, r8
 80021fa:	f7fe fd5d 	bl	8000cb8 <__aeabi_fmul>
 80021fe:	4603      	mov	r3, r0
 8002200:	4619      	mov	r1, r3
 8002202:	4630      	mov	r0, r6
 8002204:	f7fe fc50 	bl	8000aa8 <__addsf3>
 8002208:	4603      	mov	r3, r0
 800220a:	461e      	mov	r6, r3
 800220c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002210:	f103 0308 	add.w	r3, r3, #8
 8002214:	6819      	ldr	r1, [r3, #0]
 8002216:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800221a:	f103 0310 	add.w	r3, r3, #16
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	f7fe fd4a 	bl	8000cb8 <__aeabi_fmul>
 8002224:	4603      	mov	r3, r0
 8002226:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800222a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800222e:	6811      	ldr	r1, [r2, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fd41 	bl	8000cb8 <__aeabi_fmul>
 8002236:	4603      	mov	r3, r0
 8002238:	4698      	mov	r8, r3
 800223a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800223e:	f103 0320 	add.w	r3, r3, #32
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800224a:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	4413      	add	r3, r2
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	f7fe fc22 	bl	8000aa4 <__aeabi_fsub>
 8002260:	4603      	mov	r3, r0
 8002262:	4619      	mov	r1, r3
 8002264:	4640      	mov	r0, r8
 8002266:	f7fe fd27 	bl	8000cb8 <__aeabi_fmul>
 800226a:	4603      	mov	r3, r0
 800226c:	4619      	mov	r1, r3
 800226e:	4630      	mov	r0, r6
 8002270:	f7fe fc18 	bl	8000aa4 <__aeabi_fsub>
 8002274:	4603      	mov	r3, r0
 8002276:	4619      	mov	r1, r3
 8002278:	4628      	mov	r0, r5
 800227a:	f7fe fd1d 	bl	8000cb8 <__aeabi_fmul>
 800227e:	4603      	mov	r3, r0
 8002280:	4619      	mov	r1, r3
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fc10 	bl	8000aa8 <__addsf3>
 8002288:	4603      	mov	r3, r0
 800228a:	461d      	mov	r5, r3
 800228c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002290:	f103 0310 	add.w	r3, r3, #16
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800229a:	f103 0310 	add.w	r3, r3, #16
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	f7fe fd0a 	bl	8000cb8 <__aeabi_fmul>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80022aa:	f102 0210 	add.w	r2, r2, #16
 80022ae:	6811      	ldr	r1, [r2, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fd01 	bl	8000cb8 <__aeabi_fmul>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80022bc:	f102 020c 	add.w	r2, r2, #12
 80022c0:	6811      	ldr	r1, [r2, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe fcf8 	bl	8000cb8 <__aeabi_fmul>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80022ce:	f102 020c 	add.w	r2, r2, #12
 80022d2:	6811      	ldr	r1, [r2, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe fcef 	bl	8000cb8 <__aeabi_fmul>
 80022da:	4603      	mov	r3, r0
 80022dc:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80022e0:	f102 0208 	add.w	r2, r2, #8
 80022e4:	6811      	ldr	r1, [r2, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fce6 	bl	8000cb8 <__aeabi_fmul>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80022f2:	f102 0208 	add.w	r2, r2, #8
 80022f6:	6811      	ldr	r1, [r2, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fcdd 	bl	8000cb8 <__aeabi_fmul>
 80022fe:	4603      	mov	r3, r0
 8002300:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002304:	f102 021c 	add.w	r2, r2, #28
 8002308:	6811      	ldr	r1, [r2, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fcd4 	bl	8000cb8 <__aeabi_fmul>
 8002310:	4603      	mov	r3, r0
 8002312:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002316:	f102 021c 	add.w	r2, r2, #28
 800231a:	6811      	ldr	r1, [r2, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe fccb 	bl	8000cb8 <__aeabi_fmul>
 8002322:	4603      	mov	r3, r0
 8002324:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002328:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800232c:	6811      	ldr	r1, [r2, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fcc2 	bl	8000cb8 <__aeabi_fmul>
 8002334:	4603      	mov	r3, r0
 8002336:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800233a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800233e:	6811      	ldr	r1, [r2, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fcb9 	bl	8000cb8 <__aeabi_fmul>
 8002346:	4603      	mov	r3, r0
 8002348:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800234c:	f102 0220 	add.w	r2, r2, #32
 8002350:	6811      	ldr	r1, [r2, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe fcb0 	bl	8000cb8 <__aeabi_fmul>
 8002358:	4603      	mov	r3, r0
 800235a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800235e:	f102 0220 	add.w	r2, r2, #32
 8002362:	6811      	ldr	r1, [r2, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fca7 	bl	8000cb8 <__aeabi_fmul>
 800236a:	4603      	mov	r3, r0
 800236c:	4619      	mov	r1, r3
 800236e:	4628      	mov	r0, r5
 8002370:	f7fe fd56 	bl	8000e20 <__aeabi_fdiv>
 8002374:	4603      	mov	r3, r0
 8002376:	4619      	mov	r1, r3
 8002378:	4620      	mov	r0, r4
 800237a:	f7fe fb93 	bl	8000aa4 <__aeabi_fsub>
 800237e:	4603      	mov	r3, r0
 8002380:	461c      	mov	r4, r3
 8002382:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8002386:	f103 0320 	add.w	r3, r3, #32
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002390:	f103 030c 	add.w	r3, r3, #12
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	f7fe fc8f 	bl	8000cb8 <__aeabi_fmul>
 800239a:	4603      	mov	r3, r0
 800239c:	461d      	mov	r5, r3
 800239e:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80023a2:	f103 0320 	add.w	r3, r3, #32
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80023ae:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	4413      	add	r3, r2
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80023be:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	f7fe fb6e 	bl	8000aa4 <__aeabi_fsub>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4619      	mov	r1, r3
 80023cc:	4628      	mov	r0, r5
 80023ce:	f7fe fc73 	bl	8000cb8 <__aeabi_fmul>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461d      	mov	r5, r3
 80023d6:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80023da:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80023de:	6819      	ldr	r1, [r3, #0]
 80023e0:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80023e4:	f103 0308 	add.w	r3, r3, #8
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	f7fe fc65 	bl	8000cb8 <__aeabi_fmul>
 80023ee:	4603      	mov	r3, r0
 80023f0:	461e      	mov	r6, r3
 80023f2:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80023f6:	f103 0320 	add.w	r3, r3, #32
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8002402:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	4413      	add	r3, r2
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	f7fe fb46 	bl	8000aa4 <__aeabi_fsub>
 8002418:	4603      	mov	r3, r0
 800241a:	4619      	mov	r1, r3
 800241c:	4630      	mov	r0, r6
 800241e:	f7fe fc4b 	bl	8000cb8 <__aeabi_fmul>
 8002422:	4603      	mov	r3, r0
 8002424:	4619      	mov	r1, r3
 8002426:	4628      	mov	r0, r5
 8002428:	f7fe fb3c 	bl	8000aa4 <__aeabi_fsub>
 800242c:	4603      	mov	r3, r0
 800242e:	4619      	mov	r1, r3
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fb39 	bl	8000aa8 <__addsf3>
 8002436:	4603      	mov	r3, r0
 8002438:	461d      	mov	r5, r3
 800243a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800243e:	f103 0308 	add.w	r3, r3, #8
 8002442:	6819      	ldr	r1, [r3, #0]
 8002444:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002448:	f103 030c 	add.w	r3, r3, #12
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	f7fe fc33 	bl	8000cb8 <__aeabi_fmul>
 8002452:	4603      	mov	r3, r0
 8002454:	461e      	mov	r6, r3
 8002456:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800245a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800245e:	6819      	ldr	r1, [r3, #0]
 8002460:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8002464:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	f7fe fc25 	bl	8000cb8 <__aeabi_fmul>
 800246e:	4603      	mov	r3, r0
 8002470:	4698      	mov	r8, r3
 8002472:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8002476:	f103 0320 	add.w	r3, r3, #32
 800247a:	6819      	ldr	r1, [r3, #0]
 800247c:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8002480:	f103 031c 	add.w	r3, r3, #28
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	f7fe fc17 	bl	8000cb8 <__aeabi_fmul>
 800248a:	4603      	mov	r3, r0
 800248c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002490:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002494:	6811      	ldr	r1, [r2, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe fc0e 	bl	8000cb8 <__aeabi_fmul>
 800249c:	4603      	mov	r3, r0
 800249e:	4619      	mov	r1, r3
 80024a0:	4640      	mov	r0, r8
 80024a2:	f7fe faff 	bl	8000aa4 <__aeabi_fsub>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4619      	mov	r1, r3
 80024aa:	4630      	mov	r0, r6
 80024ac:	f7fe fc04 	bl	8000cb8 <__aeabi_fmul>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461e      	mov	r6, r3
 80024b4:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80024b8:	f103 0320 	add.w	r3, r3, #32
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80024c4:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4619      	mov	r1, r3
 80024d0:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80024d4:	f103 0304 	add.w	r3, r3, #4
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	f7fe fae3 	bl	8000aa4 <__aeabi_fsub>
 80024de:	4603      	mov	r3, r0
 80024e0:	4619      	mov	r1, r3
 80024e2:	4630      	mov	r0, r6
 80024e4:	f7fe fbe8 	bl	8000cb8 <__aeabi_fmul>
 80024e8:	4603      	mov	r3, r0
 80024ea:	461e      	mov	r6, r3
 80024ec:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80024f0:	f103 030c 	add.w	r3, r3, #12
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80024fa:	f103 0310 	add.w	r3, r3, #16
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	f7fe fbda 	bl	8000cb8 <__aeabi_fmul>
 8002504:	4603      	mov	r3, r0
 8002506:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800250a:	f102 0220 	add.w	r2, r2, #32
 800250e:	6811      	ldr	r1, [r2, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fbd1 	bl	8000cb8 <__aeabi_fmul>
 8002516:	4603      	mov	r3, r0
 8002518:	4698      	mov	r8, r3
 800251a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800251e:	f103 0320 	add.w	r3, r3, #32
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800252a:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	4413      	add	r3, r2
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800253a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	f7fe fab0 	bl	8000aa4 <__aeabi_fsub>
 8002544:	4603      	mov	r3, r0
 8002546:	4619      	mov	r1, r3
 8002548:	4640      	mov	r0, r8
 800254a:	f7fe fbb5 	bl	8000cb8 <__aeabi_fmul>
 800254e:	4603      	mov	r3, r0
 8002550:	4619      	mov	r1, r3
 8002552:	4630      	mov	r0, r6
 8002554:	f7fe faa8 	bl	8000aa8 <__addsf3>
 8002558:	4603      	mov	r3, r0
 800255a:	461e      	mov	r6, r3
 800255c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002560:	f103 0308 	add.w	r3, r3, #8
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800256a:	f103 0310 	add.w	r3, r3, #16
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	f7fe fba2 	bl	8000cb8 <__aeabi_fmul>
 8002574:	4603      	mov	r3, r0
 8002576:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800257a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800257e:	6811      	ldr	r1, [r2, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fb99 	bl	8000cb8 <__aeabi_fmul>
 8002586:	4603      	mov	r3, r0
 8002588:	4698      	mov	r8, r3
 800258a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800258e:	f103 0320 	add.w	r3, r3, #32
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800259a:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	4413      	add	r3, r2
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	f7fe fa7a 	bl	8000aa4 <__aeabi_fsub>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4619      	mov	r1, r3
 80025b4:	4640      	mov	r0, r8
 80025b6:	f7fe fb7f 	bl	8000cb8 <__aeabi_fmul>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4619      	mov	r1, r3
 80025be:	4630      	mov	r0, r6
 80025c0:	f7fe fa70 	bl	8000aa4 <__aeabi_fsub>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4619      	mov	r1, r3
 80025c8:	4628      	mov	r0, r5
 80025ca:	f7fe fb75 	bl	8000cb8 <__aeabi_fmul>
 80025ce:	4603      	mov	r3, r0
 80025d0:	461d      	mov	r5, r3
 80025d2:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80025d6:	f103 0310 	add.w	r3, r3, #16
 80025da:	6819      	ldr	r1, [r3, #0]
 80025dc:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80025e0:	f103 0310 	add.w	r3, r3, #16
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	f7fe fb67 	bl	8000cb8 <__aeabi_fmul>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80025f0:	f102 020c 	add.w	r2, r2, #12
 80025f4:	6811      	ldr	r1, [r2, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fb5e 	bl	8000cb8 <__aeabi_fmul>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002602:	f102 020c 	add.w	r2, r2, #12
 8002606:	6811      	ldr	r1, [r2, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7fe fb55 	bl	8000cb8 <__aeabi_fmul>
 800260e:	4603      	mov	r3, r0
 8002610:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002614:	f102 0208 	add.w	r2, r2, #8
 8002618:	6811      	ldr	r1, [r2, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fb4c 	bl	8000cb8 <__aeabi_fmul>
 8002620:	4603      	mov	r3, r0
 8002622:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002626:	f102 0208 	add.w	r2, r2, #8
 800262a:	6811      	ldr	r1, [r2, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fb43 	bl	8000cb8 <__aeabi_fmul>
 8002632:	4603      	mov	r3, r0
 8002634:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002638:	f102 021c 	add.w	r2, r2, #28
 800263c:	6811      	ldr	r1, [r2, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe fb3a 	bl	8000cb8 <__aeabi_fmul>
 8002644:	4603      	mov	r3, r0
 8002646:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800264a:	f102 021c 	add.w	r2, r2, #28
 800264e:	6811      	ldr	r1, [r2, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fe fb31 	bl	8000cb8 <__aeabi_fmul>
 8002656:	4603      	mov	r3, r0
 8002658:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800265c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002660:	6811      	ldr	r1, [r2, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fb28 	bl	8000cb8 <__aeabi_fmul>
 8002668:	4603      	mov	r3, r0
 800266a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800266e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002672:	6811      	ldr	r1, [r2, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fb1f 	bl	8000cb8 <__aeabi_fmul>
 800267a:	4603      	mov	r3, r0
 800267c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002680:	f102 0220 	add.w	r2, r2, #32
 8002684:	6811      	ldr	r1, [r2, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fb16 	bl	8000cb8 <__aeabi_fmul>
 800268c:	4603      	mov	r3, r0
 800268e:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002692:	f102 0220 	add.w	r2, r2, #32
 8002696:	6811      	ldr	r1, [r2, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fb0d 	bl	8000cb8 <__aeabi_fmul>
 800269e:	4603      	mov	r3, r0
 80026a0:	4619      	mov	r1, r3
 80026a2:	4628      	mov	r0, r5
 80026a4:	f7fe fbbc 	bl	8000e20 <__aeabi_fdiv>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4619      	mov	r1, r3
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7fe f9fb 	bl	8000aa8 <__addsf3>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4619      	mov	r1, r3
 80026b6:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80026ba:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80026be:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80026c2:	f102 0220 	add.w	r2, r2, #32
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 80026cc:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80026d0:	f103 0320 	add.w	r3, r3, #32
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80026dc:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4619      	mov	r1, r3
 80026e8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	f7fe f9d9 	bl	8000aa4 <__aeabi_fsub>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4619      	mov	r1, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe f9d6 	bl	8000aa8 <__addsf3>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461c      	mov	r4, r3
 8002700:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002704:	f103 0310 	add.w	r3, r3, #16
 8002708:	6819      	ldr	r1, [r3, #0]
 800270a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800270e:	6818      	ldr	r0, [r3, #0]
 8002710:	f7fe fad2 	bl	8000cb8 <__aeabi_fmul>
 8002714:	4603      	mov	r3, r0
 8002716:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800271a:	f102 0208 	add.w	r2, r2, #8
 800271e:	6811      	ldr	r1, [r2, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe fac9 	bl	8000cb8 <__aeabi_fmul>
 8002726:	4603      	mov	r3, r0
 8002728:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800272c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002730:	6811      	ldr	r1, [r2, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fac0 	bl	8000cb8 <__aeabi_fmul>
 8002738:	4603      	mov	r3, r0
 800273a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800273e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002742:	6811      	ldr	r1, [r2, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fab7 	bl	8000cb8 <__aeabi_fmul>
 800274a:	4603      	mov	r3, r0
 800274c:	461d      	mov	r5, r3
 800274e:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8002752:	f103 0320 	add.w	r3, r3, #32
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800275e:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	4413      	add	r3, r2
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800276c:	f102 0210 	add.w	r2, r2, #16
 8002770:	6811      	ldr	r1, [r2, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe faa0 	bl	8000cb8 <__aeabi_fmul>
 8002778:	4603      	mov	r3, r0
 800277a:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800277e:	f102 0208 	add.w	r2, r2, #8
 8002782:	6811      	ldr	r1, [r2, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fa97 	bl	8000cb8 <__aeabi_fmul>
 800278a:	4603      	mov	r3, r0
 800278c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002790:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002794:	6811      	ldr	r1, [r2, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fa8e 	bl	8000cb8 <__aeabi_fmul>
 800279c:	4603      	mov	r3, r0
 800279e:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80027a2:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80027a6:	6811      	ldr	r1, [r2, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fa85 	bl	8000cb8 <__aeabi_fmul>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4619      	mov	r1, r3
 80027b2:	4628      	mov	r0, r5
 80027b4:	f7fe f976 	bl	8000aa4 <__aeabi_fsub>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461d      	mov	r5, r3
 80027bc:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80027c0:	f103 0310 	add.w	r3, r3, #16
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	f7fe fa74 	bl	8000cb8 <__aeabi_fmul>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80027d6:	f102 0208 	add.w	r2, r2, #8
 80027da:	6811      	ldr	r1, [r2, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fa6b 	bl	8000cb8 <__aeabi_fmul>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80027e8:	f102 021c 	add.w	r2, r2, #28
 80027ec:	6811      	ldr	r1, [r2, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fe fa62 	bl	8000cb8 <__aeabi_fmul>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80027fa:	f102 021c 	add.w	r2, r2, #28
 80027fe:	6811      	ldr	r1, [r2, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fa59 	bl	8000cb8 <__aeabi_fmul>
 8002806:	4603      	mov	r3, r0
 8002808:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800280c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002810:	6811      	ldr	r1, [r2, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fa50 	bl	8000cb8 <__aeabi_fmul>
 8002818:	4603      	mov	r3, r0
 800281a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800281e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002822:	6811      	ldr	r1, [r2, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fa47 	bl	8000cb8 <__aeabi_fmul>
 800282a:	4603      	mov	r3, r0
 800282c:	4619      	mov	r1, r3
 800282e:	4628      	mov	r0, r5
 8002830:	f7fe f93a 	bl	8000aa8 <__addsf3>
 8002834:	4603      	mov	r3, r0
 8002836:	461d      	mov	r5, r3
 8002838:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800283c:	f103 0320 	add.w	r3, r3, #32
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8002848:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	4413      	add	r3, r2
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002856:	f102 0210 	add.w	r2, r2, #16
 800285a:	6811      	ldr	r1, [r2, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe fa2b 	bl	8000cb8 <__aeabi_fmul>
 8002862:	4603      	mov	r3, r0
 8002864:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002868:	f102 0208 	add.w	r2, r2, #8
 800286c:	6811      	ldr	r1, [r2, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fa22 	bl	8000cb8 <__aeabi_fmul>
 8002874:	4603      	mov	r3, r0
 8002876:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800287a:	f102 021c 	add.w	r2, r2, #28
 800287e:	6811      	ldr	r1, [r2, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fa19 	bl	8000cb8 <__aeabi_fmul>
 8002886:	4603      	mov	r3, r0
 8002888:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800288c:	f102 021c 	add.w	r2, r2, #28
 8002890:	6811      	ldr	r1, [r2, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fa10 	bl	8000cb8 <__aeabi_fmul>
 8002898:	4603      	mov	r3, r0
 800289a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800289e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80028a2:	6811      	ldr	r1, [r2, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fa07 	bl	8000cb8 <__aeabi_fmul>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80028b0:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80028b4:	6811      	ldr	r1, [r2, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe f9fe 	bl	8000cb8 <__aeabi_fmul>
 80028bc:	4603      	mov	r3, r0
 80028be:	4619      	mov	r1, r3
 80028c0:	4628      	mov	r0, r5
 80028c2:	f7fe f8ef 	bl	8000aa4 <__aeabi_fsub>
 80028c6:	4603      	mov	r3, r0
 80028c8:	461d      	mov	r5, r3
 80028ca:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80028ce:	f103 0310 	add.w	r3, r3, #16
 80028d2:	6819      	ldr	r1, [r3, #0]
 80028d4:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80028d8:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	f7fe f9eb 	bl	8000cb8 <__aeabi_fmul>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80028e8:	f102 020c 	add.w	r2, r2, #12
 80028ec:	6811      	ldr	r1, [r2, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe f9e2 	bl	8000cb8 <__aeabi_fmul>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80028fa:	f102 0220 	add.w	r2, r2, #32
 80028fe:	6811      	ldr	r1, [r2, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fe f9d9 	bl	8000cb8 <__aeabi_fmul>
 8002906:	4603      	mov	r3, r0
 8002908:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800290c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002910:	6811      	ldr	r1, [r2, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe f9d0 	bl	8000cb8 <__aeabi_fmul>
 8002918:	4603      	mov	r3, r0
 800291a:	4619      	mov	r1, r3
 800291c:	4628      	mov	r0, r5
 800291e:	f7fe f8c1 	bl	8000aa4 <__aeabi_fsub>
 8002922:	4603      	mov	r3, r0
 8002924:	461d      	mov	r5, r3
 8002926:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800292a:	f103 0320 	add.w	r3, r3, #32
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8002936:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	4413      	add	r3, r2
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002944:	f102 0210 	add.w	r2, r2, #16
 8002948:	6811      	ldr	r1, [r2, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe f9b4 	bl	8000cb8 <__aeabi_fmul>
 8002950:	4603      	mov	r3, r0
 8002952:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002956:	f102 020c 	add.w	r2, r2, #12
 800295a:	6811      	ldr	r1, [r2, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe f9ab 	bl	8000cb8 <__aeabi_fmul>
 8002962:	4603      	mov	r3, r0
 8002964:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002968:	f102 0220 	add.w	r2, r2, #32
 800296c:	6811      	ldr	r1, [r2, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe f9a2 	bl	8000cb8 <__aeabi_fmul>
 8002974:	4603      	mov	r3, r0
 8002976:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800297a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800297e:	6811      	ldr	r1, [r2, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe f999 	bl	8000cb8 <__aeabi_fmul>
 8002986:	4603      	mov	r3, r0
 8002988:	4619      	mov	r1, r3
 800298a:	4628      	mov	r0, r5
 800298c:	f7fe f88c 	bl	8000aa8 <__addsf3>
 8002990:	4603      	mov	r3, r0
 8002992:	461d      	mov	r5, r3
 8002994:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002998:	f103 030c 	add.w	r3, r3, #12
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80029a2:	f103 0304 	add.w	r3, r3, #4
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	f7fe f986 	bl	8000cb8 <__aeabi_fmul>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80029b2:	f102 0208 	add.w	r2, r2, #8
 80029b6:	6811      	ldr	r1, [r2, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe f97d 	bl	8000cb8 <__aeabi_fmul>
 80029be:	4603      	mov	r3, r0
 80029c0:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80029c4:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80029c8:	6811      	ldr	r1, [r2, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe f974 	bl	8000cb8 <__aeabi_fmul>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80029d6:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80029da:	6811      	ldr	r1, [r2, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe f96b 	bl	8000cb8 <__aeabi_fmul>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80029e8:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80029ec:	6811      	ldr	r1, [r2, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f962 	bl	8000cb8 <__aeabi_fmul>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4619      	mov	r1, r3
 80029f8:	4628      	mov	r0, r5
 80029fa:	f7fe f853 	bl	8000aa4 <__aeabi_fsub>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461d      	mov	r5, r3
 8002a02:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8002a06:	f103 0320 	add.w	r3, r3, #32
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8002a12:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	4413      	add	r3, r2
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002a20:	f102 020c 	add.w	r2, r2, #12
 8002a24:	6811      	ldr	r1, [r2, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe f946 	bl	8000cb8 <__aeabi_fmul>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002a32:	f102 0208 	add.w	r2, r2, #8
 8002a36:	6811      	ldr	r1, [r2, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe f93d 	bl	8000cb8 <__aeabi_fmul>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002a44:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002a48:	6811      	ldr	r1, [r2, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe f934 	bl	8000cb8 <__aeabi_fmul>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002a56:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002a5a:	6811      	ldr	r1, [r2, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe f92b 	bl	8000cb8 <__aeabi_fmul>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002a68:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002a6c:	6811      	ldr	r1, [r2, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe f922 	bl	8000cb8 <__aeabi_fmul>
 8002a74:	4603      	mov	r3, r0
 8002a76:	4619      	mov	r1, r3
 8002a78:	4628      	mov	r0, r5
 8002a7a:	f7fe f815 	bl	8000aa8 <__addsf3>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	461d      	mov	r5, r3
 8002a82:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002a86:	f103 030c 	add.w	r3, r3, #12
 8002a8a:	6819      	ldr	r1, [r3, #0]
 8002a8c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002a90:	f103 0304 	add.w	r3, r3, #4
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	f7fe f90f 	bl	8000cb8 <__aeabi_fmul>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002aa0:	f102 0208 	add.w	r2, r2, #8
 8002aa4:	6811      	ldr	r1, [r2, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe f906 	bl	8000cb8 <__aeabi_fmul>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002ab2:	f102 021c 	add.w	r2, r2, #28
 8002ab6:	6811      	ldr	r1, [r2, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe f8fd 	bl	8000cb8 <__aeabi_fmul>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002ac4:	f102 021c 	add.w	r2, r2, #28
 8002ac8:	6811      	ldr	r1, [r2, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe f8f4 	bl	8000cb8 <__aeabi_fmul>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002ad6:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002ada:	6811      	ldr	r1, [r2, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe f8eb 	bl	8000cb8 <__aeabi_fmul>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002ae8:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002aec:	6811      	ldr	r1, [r2, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe f8e2 	bl	8000cb8 <__aeabi_fmul>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002afa:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002afe:	6811      	ldr	r1, [r2, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe f8d9 	bl	8000cb8 <__aeabi_fmul>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	f7fd ffca 	bl	8000aa4 <__aeabi_fsub>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461d      	mov	r5, r3
 8002b14:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8002b18:	f103 0320 	add.w	r3, r3, #32
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8002b24:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002b32:	f102 020c 	add.w	r2, r2, #12
 8002b36:	6811      	ldr	r1, [r2, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe f8bd 	bl	8000cb8 <__aeabi_fmul>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002b44:	f102 0208 	add.w	r2, r2, #8
 8002b48:	6811      	ldr	r1, [r2, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe f8b4 	bl	8000cb8 <__aeabi_fmul>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002b56:	f102 021c 	add.w	r2, r2, #28
 8002b5a:	6811      	ldr	r1, [r2, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe f8ab 	bl	8000cb8 <__aeabi_fmul>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002b68:	f102 021c 	add.w	r2, r2, #28
 8002b6c:	6811      	ldr	r1, [r2, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe f8a2 	bl	8000cb8 <__aeabi_fmul>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002b7a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002b7e:	6811      	ldr	r1, [r2, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe f899 	bl	8000cb8 <__aeabi_fmul>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002b8c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002b90:	6811      	ldr	r1, [r2, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe f890 	bl	8000cb8 <__aeabi_fmul>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002b9e:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002ba2:	6811      	ldr	r1, [r2, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe f887 	bl	8000cb8 <__aeabi_fmul>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4619      	mov	r1, r3
 8002bae:	4628      	mov	r0, r5
 8002bb0:	f7fd ff7a 	bl	8000aa8 <__addsf3>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461d      	mov	r5, r3
 8002bb8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002bbc:	f103 030c 	add.w	r3, r3, #12
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002bc6:	f103 0304 	add.w	r3, r3, #4
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	f7fe f874 	bl	8000cb8 <__aeabi_fmul>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002bd6:	f102 0208 	add.w	r2, r2, #8
 8002bda:	6811      	ldr	r1, [r2, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe f86b 	bl	8000cb8 <__aeabi_fmul>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002be8:	f102 021c 	add.w	r2, r2, #28
 8002bec:	6811      	ldr	r1, [r2, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe f862 	bl	8000cb8 <__aeabi_fmul>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002bfa:	f102 0220 	add.w	r2, r2, #32
 8002bfe:	6811      	ldr	r1, [r2, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe f859 	bl	8000cb8 <__aeabi_fmul>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002c0c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002c10:	6811      	ldr	r1, [r2, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe f850 	bl	8000cb8 <__aeabi_fmul>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002c1e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002c22:	6811      	ldr	r1, [r2, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe f847 	bl	8000cb8 <__aeabi_fmul>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4628      	mov	r0, r5
 8002c30:	f7fd ff3a 	bl	8000aa8 <__addsf3>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461d      	mov	r5, r3
 8002c38:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8002c3c:	f103 0320 	add.w	r3, r3, #32
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8002c48:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002c56:	f102 020c 	add.w	r2, r2, #12
 8002c5a:	6811      	ldr	r1, [r2, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe f82b 	bl	8000cb8 <__aeabi_fmul>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002c68:	f102 0208 	add.w	r2, r2, #8
 8002c6c:	6811      	ldr	r1, [r2, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe f822 	bl	8000cb8 <__aeabi_fmul>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002c7a:	f102 021c 	add.w	r2, r2, #28
 8002c7e:	6811      	ldr	r1, [r2, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe f819 	bl	8000cb8 <__aeabi_fmul>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002c8c:	f102 0220 	add.w	r2, r2, #32
 8002c90:	6811      	ldr	r1, [r2, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe f810 	bl	8000cb8 <__aeabi_fmul>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002c9e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002ca2:	6811      	ldr	r1, [r2, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe f807 	bl	8000cb8 <__aeabi_fmul>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002cb0:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8002cb4:	6811      	ldr	r1, [r2, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fffe 	bl	8000cb8 <__aeabi_fmul>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4628      	mov	r0, r5
 8002cc2:	f7fd feef 	bl	8000aa4 <__aeabi_fsub>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f7fd fff4 	bl	8000cb8 <__aeabi_fmul>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8002cd6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002cda:	f103 030c 	add.w	r3, r3, #12
 8002cde:	6819      	ldr	r1, [r3, #0]
 8002ce0:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002ce4:	f103 030c 	add.w	r3, r3, #12
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	f7fd ffe5 	bl	8000cb8 <__aeabi_fmul>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002cf4:	f102 020c 	add.w	r2, r2, #12
 8002cf8:	6811      	ldr	r1, [r2, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd ffdc 	bl	8000cb8 <__aeabi_fmul>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002d06:	f102 0210 	add.w	r2, r2, #16
 8002d0a:	6811      	ldr	r1, [r2, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd ffd3 	bl	8000cb8 <__aeabi_fmul>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002d18:	f102 0208 	add.w	r2, r2, #8
 8002d1c:	6811      	ldr	r1, [r2, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd ffca 	bl	8000cb8 <__aeabi_fmul>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002d2a:	f102 021c 	add.w	r2, r2, #28
 8002d2e:	6811      	ldr	r1, [r2, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd ffc1 	bl	8000cb8 <__aeabi_fmul>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002d3c:	f102 021c 	add.w	r2, r2, #28
 8002d40:	6811      	ldr	r1, [r2, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd ffb8 	bl	8000cb8 <__aeabi_fmul>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002d4e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002d52:	6811      	ldr	r1, [r2, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd ffaf 	bl	8000cb8 <__aeabi_fmul>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002d60:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8002d64:	6811      	ldr	r1, [r2, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd ffa6 	bl	8000cb8 <__aeabi_fmul>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002d72:	f102 0220 	add.w	r2, r2, #32
 8002d76:	6811      	ldr	r1, [r2, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd ff9d 	bl	8000cb8 <__aeabi_fmul>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002d84:	f102 0220 	add.w	r2, r2, #32
 8002d88:	6811      	ldr	r1, [r2, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd ff94 	bl	8000cb8 <__aeabi_fmul>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4619      	mov	r1, r3
 8002d94:	4620      	mov	r0, r4
 8002d96:	f7fe f843 	bl	8000e20 <__aeabi_fdiv>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8002da2:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8002da6:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8002daa:	f102 0220 	add.w	r2, r2, #32
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	f502 728b 	add.w	r2, r2, #278	@ 0x116
 8002db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002db8:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8002dbc:	f103 0320 	add.w	r3, r3, #32
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8002dc8:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	4413      	add	r3, r2
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8002dd8:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	f7fd fe61 	bl	8000aa4 <__aeabi_fsub>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4619      	mov	r1, r3
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd fe5e 	bl	8000aa8 <__addsf3>
 8002dec:	4603      	mov	r3, r0
 8002dee:	461c      	mov	r4, r3
 8002df0:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002df4:	f103 0310 	add.w	r3, r3, #16
 8002df8:	6819      	ldr	r1, [r3, #0]
 8002dfa:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8002dfe:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	f7fd ff58 	bl	8000cb8 <__aeabi_fmul>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002e0e:	f102 020c 	add.w	r2, r2, #12
 8002e12:	6811      	ldr	r1, [r2, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd ff4f 	bl	8000cb8 <__aeabi_fmul>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002e20:	f102 0220 	add.w	r2, r2, #32
 8002e24:	6811      	ldr	r1, [r2, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd ff46 	bl	8000cb8 <__aeabi_fmul>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461d      	mov	r5, r3
 8002e30:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002e34:	f103 0310 	add.w	r3, r3, #16
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	f7fd ff3a 	bl	8000cb8 <__aeabi_fmul>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002e4a:	f102 0208 	add.w	r2, r2, #8
 8002e4e:	6811      	ldr	r1, [r2, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fd ff31 	bl	8000cb8 <__aeabi_fmul>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002e5c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002e60:	6811      	ldr	r1, [r2, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd ff28 	bl	8000cb8 <__aeabi_fmul>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f7fd fe19 	bl	8000aa4 <__aeabi_fsub>
 8002e72:	4603      	mov	r3, r0
 8002e74:	461d      	mov	r5, r3
 8002e76:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8002e7a:	f103 0320 	add.w	r3, r3, #32
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8002e86:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002e94:	f102 0210 	add.w	r2, r2, #16
 8002e98:	6811      	ldr	r1, [r2, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd ff0c 	bl	8000cb8 <__aeabi_fmul>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002ea6:	f102 020c 	add.w	r2, r2, #12
 8002eaa:	6811      	ldr	r1, [r2, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd ff03 	bl	8000cb8 <__aeabi_fmul>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002eb8:	f102 0220 	add.w	r2, r2, #32
 8002ebc:	6811      	ldr	r1, [r2, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fefa 	bl	8000cb8 <__aeabi_fmul>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4628      	mov	r0, r5
 8002eca:	f7fd fdeb 	bl	8000aa4 <__aeabi_fsub>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461d      	mov	r5, r3
 8002ed2:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8002ed6:	f103 0320 	add.w	r3, r3, #32
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8002ee2:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	4413      	add	r3, r2
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002ef0:	f102 0210 	add.w	r2, r2, #16
 8002ef4:	6811      	ldr	r1, [r2, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fede 	bl	8000cb8 <__aeabi_fmul>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002f02:	f102 0208 	add.w	r2, r2, #8
 8002f06:	6811      	ldr	r1, [r2, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd fed5 	bl	8000cb8 <__aeabi_fmul>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002f14:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002f18:	6811      	ldr	r1, [r2, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fecc 	bl	8000cb8 <__aeabi_fmul>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4619      	mov	r1, r3
 8002f24:	4628      	mov	r0, r5
 8002f26:	f7fd fdbf 	bl	8000aa8 <__addsf3>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002f32:	f103 030c 	add.w	r3, r3, #12
 8002f36:	6819      	ldr	r1, [r3, #0]
 8002f38:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002f3c:	f103 0304 	add.w	r3, r3, #4
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	f7fd feb9 	bl	8000cb8 <__aeabi_fmul>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002f4c:	f102 0208 	add.w	r2, r2, #8
 8002f50:	6811      	ldr	r1, [r2, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd feb0 	bl	8000cb8 <__aeabi_fmul>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002f5e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002f62:	6811      	ldr	r1, [r2, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd fea7 	bl	8000cb8 <__aeabi_fmul>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002f70:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002f74:	6811      	ldr	r1, [r2, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fe9e 	bl	8000cb8 <__aeabi_fmul>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4628      	mov	r0, r5
 8002f82:	f7fd fd91 	bl	8000aa8 <__addsf3>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461d      	mov	r5, r3
 8002f8a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8002f8e:	f103 0320 	add.w	r3, r3, #32
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8002f9a:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002fa8:	f102 020c 	add.w	r2, r2, #12
 8002fac:	6811      	ldr	r1, [r2, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fd fe82 	bl	8000cb8 <__aeabi_fmul>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8002fba:	f102 0208 	add.w	r2, r2, #8
 8002fbe:	6811      	ldr	r1, [r2, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fe79 	bl	8000cb8 <__aeabi_fmul>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002fcc:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002fd0:	6811      	ldr	r1, [r2, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd fe70 	bl	8000cb8 <__aeabi_fmul>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8002fde:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8002fe2:	6811      	ldr	r1, [r2, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd fe67 	bl	8000cb8 <__aeabi_fmul>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4619      	mov	r1, r3
 8002fee:	4628      	mov	r0, r5
 8002ff0:	f7fd fd58 	bl	8000aa4 <__aeabi_fsub>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	461d      	mov	r5, r3
 8002ff8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8002ffc:	f103 030c 	add.w	r3, r3, #12
 8003000:	6819      	ldr	r1, [r3, #0]
 8003002:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003006:	f103 0304 	add.w	r3, r3, #4
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	f7fd fe54 	bl	8000cb8 <__aeabi_fmul>
 8003010:	4603      	mov	r3, r0
 8003012:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003016:	f102 0208 	add.w	r2, r2, #8
 800301a:	6811      	ldr	r1, [r2, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fe4b 	bl	8000cb8 <__aeabi_fmul>
 8003022:	4603      	mov	r3, r0
 8003024:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003028:	f102 021c 	add.w	r2, r2, #28
 800302c:	6811      	ldr	r1, [r2, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd fe42 	bl	8000cb8 <__aeabi_fmul>
 8003034:	4603      	mov	r3, r0
 8003036:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800303a:	f102 0220 	add.w	r2, r2, #32
 800303e:	6811      	ldr	r1, [r2, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd fe39 	bl	8000cb8 <__aeabi_fmul>
 8003046:	4603      	mov	r3, r0
 8003048:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800304c:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003050:	6811      	ldr	r1, [r2, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fe30 	bl	8000cb8 <__aeabi_fmul>
 8003058:	4603      	mov	r3, r0
 800305a:	4619      	mov	r1, r3
 800305c:	4628      	mov	r0, r5
 800305e:	f7fd fd21 	bl	8000aa4 <__aeabi_fsub>
 8003062:	4603      	mov	r3, r0
 8003064:	461d      	mov	r5, r3
 8003066:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800306a:	f103 0320 	add.w	r3, r3, #32
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003076:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	4413      	add	r3, r2
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003084:	f102 020c 	add.w	r2, r2, #12
 8003088:	6811      	ldr	r1, [r2, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fe14 	bl	8000cb8 <__aeabi_fmul>
 8003090:	4603      	mov	r3, r0
 8003092:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003096:	f102 0208 	add.w	r2, r2, #8
 800309a:	6811      	ldr	r1, [r2, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd fe0b 	bl	8000cb8 <__aeabi_fmul>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80030a8:	f102 021c 	add.w	r2, r2, #28
 80030ac:	6811      	ldr	r1, [r2, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fe02 	bl	8000cb8 <__aeabi_fmul>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80030ba:	f102 0220 	add.w	r2, r2, #32
 80030be:	6811      	ldr	r1, [r2, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd fdf9 	bl	8000cb8 <__aeabi_fmul>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80030cc:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80030d0:	6811      	ldr	r1, [r2, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fdf0 	bl	8000cb8 <__aeabi_fmul>
 80030d8:	4603      	mov	r3, r0
 80030da:	4619      	mov	r1, r3
 80030dc:	4628      	mov	r0, r5
 80030de:	f7fd fce3 	bl	8000aa8 <__addsf3>
 80030e2:	4603      	mov	r3, r0
 80030e4:	4619      	mov	r1, r3
 80030e6:	4620      	mov	r0, r4
 80030e8:	f7fd fde6 	bl	8000cb8 <__aeabi_fmul>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80030f2:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80030f6:	f103 030c 	add.w	r3, r3, #12
 80030fa:	6819      	ldr	r1, [r3, #0]
 80030fc:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003100:	f103 0310 	add.w	r3, r3, #16
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	f7fd fdd7 	bl	8000cb8 <__aeabi_fmul>
 800310a:	4603      	mov	r3, r0
 800310c:	461d      	mov	r5, r3
 800310e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003112:	f103 0308 	add.w	r3, r3, #8
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800311c:	f103 0308 	add.w	r3, r3, #8
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	f7fd fdc9 	bl	8000cb8 <__aeabi_fmul>
 8003126:	4603      	mov	r3, r0
 8003128:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800312c:	f102 0208 	add.w	r2, r2, #8
 8003130:	6811      	ldr	r1, [r2, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fd fdc0 	bl	8000cb8 <__aeabi_fmul>
 8003138:	4603      	mov	r3, r0
 800313a:	4619      	mov	r1, r3
 800313c:	4628      	mov	r0, r5
 800313e:	f7fd fdbb 	bl	8000cb8 <__aeabi_fmul>
 8003142:	4603      	mov	r3, r0
 8003144:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003148:	f102 021c 	add.w	r2, r2, #28
 800314c:	6811      	ldr	r1, [r2, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd fdb2 	bl	8000cb8 <__aeabi_fmul>
 8003154:	4603      	mov	r3, r0
 8003156:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800315a:	f102 021c 	add.w	r2, r2, #28
 800315e:	6811      	ldr	r1, [r2, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd fda9 	bl	8000cb8 <__aeabi_fmul>
 8003166:	4603      	mov	r3, r0
 8003168:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800316c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003170:	6811      	ldr	r1, [r2, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd fda0 	bl	8000cb8 <__aeabi_fmul>
 8003178:	4603      	mov	r3, r0
 800317a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800317e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003182:	6811      	ldr	r1, [r2, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd fd97 	bl	8000cb8 <__aeabi_fmul>
 800318a:	4603      	mov	r3, r0
 800318c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003190:	f102 0220 	add.w	r2, r2, #32
 8003194:	6811      	ldr	r1, [r2, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7fd fd8e 	bl	8000cb8 <__aeabi_fmul>
 800319c:	4603      	mov	r3, r0
 800319e:	4619      	mov	r1, r3
 80031a0:	4620      	mov	r0, r4
 80031a2:	f7fd fe3d 	bl	8000e20 <__aeabi_fdiv>
 80031a6:	4603      	mov	r3, r0
 80031a8:	4619      	mov	r1, r3
 80031aa:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80031ae:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80031b2:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80031b6:	f102 0220 	add.w	r2, r2, #32
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	f502 720b 	add.w	r2, r2, #556	@ 0x22c
 80031c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 80031c4:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80031c8:	f103 0304 	add.w	r3, r3, #4
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4619      	mov	r1, r3
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fc69 	bl	8000aa8 <__addsf3>
 80031d6:	4603      	mov	r3, r0
 80031d8:	461c      	mov	r4, r3
 80031da:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80031de:	f103 0320 	add.w	r3, r3, #32
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80031ea:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	4413      	add	r3, r2
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4619      	mov	r1, r3
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd fc56 	bl	8000aa8 <__addsf3>
 80031fc:	4603      	mov	r3, r0
 80031fe:	4619      	mov	r1, r3
 8003200:	4620      	mov	r0, r4
 8003202:	f7fd fc4f 	bl	8000aa4 <__aeabi_fsub>
 8003206:	4603      	mov	r3, r0
 8003208:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800320c:	f102 0210 	add.w	r2, r2, #16
 8003210:	6811      	ldr	r1, [r2, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fe04 	bl	8000e20 <__aeabi_fdiv>
 8003218:	4603      	mov	r3, r0
 800321a:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800321e:	f102 0210 	add.w	r2, r2, #16
 8003222:	6811      	ldr	r1, [r2, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd fd47 	bl	8000cb8 <__aeabi_fmul>
 800322a:	4603      	mov	r3, r0
 800322c:	461c      	mov	r4, r3
 800322e:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8003232:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4619      	mov	r1, r3
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fc34 	bl	8000aa8 <__addsf3>
 8003240:	4603      	mov	r3, r0
 8003242:	461d      	mov	r5, r3
 8003244:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003248:	f103 0320 	add.w	r3, r3, #32
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003254:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	4413      	add	r3, r2
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4619      	mov	r1, r3
 8003260:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	f7fd fc1d 	bl	8000aa4 <__aeabi_fsub>
 800326a:	4603      	mov	r3, r0
 800326c:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003270:	f102 0210 	add.w	r2, r2, #16
 8003274:	6811      	ldr	r1, [r2, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd fd1e 	bl	8000cb8 <__aeabi_fmul>
 800327c:	4603      	mov	r3, r0
 800327e:	461e      	mov	r6, r3
 8003280:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8003284:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003288:	6819      	ldr	r1, [r3, #0]
 800328a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800328e:	f103 030c 	add.w	r3, r3, #12
 8003292:	6818      	ldr	r0, [r3, #0]
 8003294:	f7fd fd10 	bl	8000cb8 <__aeabi_fmul>
 8003298:	4603      	mov	r3, r0
 800329a:	4698      	mov	r8, r3
 800329c:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80032a0:	f103 0320 	add.w	r3, r3, #32
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80032ac:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	4413      	add	r3, r2
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4619      	mov	r1, r3
 80032b8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80032bc:	f103 0304 	add.w	r3, r3, #4
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	f7fd fbef 	bl	8000aa4 <__aeabi_fsub>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4619      	mov	r1, r3
 80032ca:	4640      	mov	r0, r8
 80032cc:	f7fd fcf4 	bl	8000cb8 <__aeabi_fmul>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4619      	mov	r1, r3
 80032d4:	4630      	mov	r0, r6
 80032d6:	f7fd fbe5 	bl	8000aa4 <__aeabi_fsub>
 80032da:	4603      	mov	r3, r0
 80032dc:	4619      	mov	r1, r3
 80032de:	4628      	mov	r0, r5
 80032e0:	f7fd fcea 	bl	8000cb8 <__aeabi_fmul>
 80032e4:	4603      	mov	r3, r0
 80032e6:	461d      	mov	r5, r3
 80032e8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80032ec:	f103 0310 	add.w	r3, r3, #16
 80032f0:	6819      	ldr	r1, [r3, #0]
 80032f2:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80032f6:	f103 0310 	add.w	r3, r3, #16
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	f7fd fcdc 	bl	8000cb8 <__aeabi_fmul>
 8003300:	4603      	mov	r3, r0
 8003302:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003306:	f102 020c 	add.w	r2, r2, #12
 800330a:	6811      	ldr	r1, [r2, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd fcd3 	bl	8000cb8 <__aeabi_fmul>
 8003312:	4603      	mov	r3, r0
 8003314:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003318:	f102 0220 	add.w	r2, r2, #32
 800331c:	6811      	ldr	r1, [r2, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd fcca 	bl	8000cb8 <__aeabi_fmul>
 8003324:	4603      	mov	r3, r0
 8003326:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800332a:	f102 0220 	add.w	r2, r2, #32
 800332e:	6811      	ldr	r1, [r2, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd fcc1 	bl	8000cb8 <__aeabi_fmul>
 8003336:	4603      	mov	r3, r0
 8003338:	4619      	mov	r1, r3
 800333a:	4628      	mov	r0, r5
 800333c:	f7fd fd70 	bl	8000e20 <__aeabi_fdiv>
 8003340:	4603      	mov	r3, r0
 8003342:	4619      	mov	r1, r3
 8003344:	4620      	mov	r0, r4
 8003346:	f7fd fbad 	bl	8000aa4 <__aeabi_fsub>
 800334a:	4603      	mov	r3, r0
 800334c:	461c      	mov	r4, r3
 800334e:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8003352:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003356:	6819      	ldr	r1, [r3, #0]
 8003358:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800335c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	f7fd fca9 	bl	8000cb8 <__aeabi_fmul>
 8003366:	4603      	mov	r3, r0
 8003368:	461d      	mov	r5, r3
 800336a:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800336e:	f103 0320 	add.w	r3, r3, #32
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8003378:	f103 031c 	add.w	r3, r3, #28
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	f7fd fc9b 	bl	8000cb8 <__aeabi_fmul>
 8003382:	4603      	mov	r3, r0
 8003384:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003388:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800338c:	6811      	ldr	r1, [r2, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd fc92 	bl	8000cb8 <__aeabi_fmul>
 8003394:	4603      	mov	r3, r0
 8003396:	4619      	mov	r1, r3
 8003398:	4628      	mov	r0, r5
 800339a:	f7fd fb83 	bl	8000aa4 <__aeabi_fsub>
 800339e:	4603      	mov	r3, r0
 80033a0:	4619      	mov	r1, r3
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd fb80 	bl	8000aa8 <__addsf3>
 80033a8:	4603      	mov	r3, r0
 80033aa:	461d      	mov	r5, r3
 80033ac:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80033b0:	f103 0308 	add.w	r3, r3, #8
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80033ba:	f103 030c 	add.w	r3, r3, #12
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	f7fd fc7a 	bl	8000cb8 <__aeabi_fmul>
 80033c4:	4603      	mov	r3, r0
 80033c6:	461e      	mov	r6, r3
 80033c8:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80033cc:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80033d0:	6819      	ldr	r1, [r3, #0]
 80033d2:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80033d6:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	f7fd fc6c 	bl	8000cb8 <__aeabi_fmul>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4698      	mov	r8, r3
 80033e4:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80033e8:	f103 0320 	add.w	r3, r3, #32
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80033f2:	f103 031c 	add.w	r3, r3, #28
 80033f6:	6818      	ldr	r0, [r3, #0]
 80033f8:	f7fd fc5e 	bl	8000cb8 <__aeabi_fmul>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003402:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003406:	6811      	ldr	r1, [r2, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7fd fc55 	bl	8000cb8 <__aeabi_fmul>
 800340e:	4603      	mov	r3, r0
 8003410:	4619      	mov	r1, r3
 8003412:	4640      	mov	r0, r8
 8003414:	f7fd fb46 	bl	8000aa4 <__aeabi_fsub>
 8003418:	4603      	mov	r3, r0
 800341a:	4619      	mov	r1, r3
 800341c:	4630      	mov	r0, r6
 800341e:	f7fd fc4b 	bl	8000cb8 <__aeabi_fmul>
 8003422:	4603      	mov	r3, r0
 8003424:	461e      	mov	r6, r3
 8003426:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800342a:	f103 0320 	add.w	r3, r3, #32
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003436:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	4413      	add	r3, r2
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4619      	mov	r1, r3
 8003442:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003446:	f103 0304 	add.w	r3, r3, #4
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	f7fd fb2a 	bl	8000aa4 <__aeabi_fsub>
 8003450:	4603      	mov	r3, r0
 8003452:	4619      	mov	r1, r3
 8003454:	4630      	mov	r0, r6
 8003456:	f7fd fc2f 	bl	8000cb8 <__aeabi_fmul>
 800345a:	4603      	mov	r3, r0
 800345c:	461e      	mov	r6, r3
 800345e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003462:	f103 030c 	add.w	r3, r3, #12
 8003466:	6819      	ldr	r1, [r3, #0]
 8003468:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800346c:	f103 0310 	add.w	r3, r3, #16
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	f7fd fc21 	bl	8000cb8 <__aeabi_fmul>
 8003476:	4603      	mov	r3, r0
 8003478:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800347c:	f102 0220 	add.w	r2, r2, #32
 8003480:	6811      	ldr	r1, [r2, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd fc18 	bl	8000cb8 <__aeabi_fmul>
 8003488:	4603      	mov	r3, r0
 800348a:	4698      	mov	r8, r3
 800348c:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003490:	f103 0320 	add.w	r3, r3, #32
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800349c:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4619      	mov	r1, r3
 80034a8:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80034ac:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	f7fd faf7 	bl	8000aa4 <__aeabi_fsub>
 80034b6:	4603      	mov	r3, r0
 80034b8:	4619      	mov	r1, r3
 80034ba:	4640      	mov	r0, r8
 80034bc:	f7fd fbfc 	bl	8000cb8 <__aeabi_fmul>
 80034c0:	4603      	mov	r3, r0
 80034c2:	4619      	mov	r1, r3
 80034c4:	4630      	mov	r0, r6
 80034c6:	f7fd faef 	bl	8000aa8 <__addsf3>
 80034ca:	4603      	mov	r3, r0
 80034cc:	461e      	mov	r6, r3
 80034ce:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80034d2:	f103 0308 	add.w	r3, r3, #8
 80034d6:	6819      	ldr	r1, [r3, #0]
 80034d8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80034dc:	f103 0310 	add.w	r3, r3, #16
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	f7fd fbe9 	bl	8000cb8 <__aeabi_fmul>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80034ec:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80034f0:	6811      	ldr	r1, [r2, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fbe0 	bl	8000cb8 <__aeabi_fmul>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4698      	mov	r8, r3
 80034fc:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003500:	f103 0320 	add.w	r3, r3, #32
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800350c:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	4413      	add	r3, r2
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4619      	mov	r1, r3
 8003518:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800351c:	6818      	ldr	r0, [r3, #0]
 800351e:	f7fd fac1 	bl	8000aa4 <__aeabi_fsub>
 8003522:	4603      	mov	r3, r0
 8003524:	4619      	mov	r1, r3
 8003526:	4640      	mov	r0, r8
 8003528:	f7fd fbc6 	bl	8000cb8 <__aeabi_fmul>
 800352c:	4603      	mov	r3, r0
 800352e:	4619      	mov	r1, r3
 8003530:	4630      	mov	r0, r6
 8003532:	f7fd fab7 	bl	8000aa4 <__aeabi_fsub>
 8003536:	4603      	mov	r3, r0
 8003538:	4619      	mov	r1, r3
 800353a:	4628      	mov	r0, r5
 800353c:	f7fd fbbc 	bl	8000cb8 <__aeabi_fmul>
 8003540:	4603      	mov	r3, r0
 8003542:	461d      	mov	r5, r3
 8003544:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003548:	f103 0310 	add.w	r3, r3, #16
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003552:	f103 0310 	add.w	r3, r3, #16
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	f7fd fbae 	bl	8000cb8 <__aeabi_fmul>
 800355c:	4603      	mov	r3, r0
 800355e:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003562:	f102 020c 	add.w	r2, r2, #12
 8003566:	6811      	ldr	r1, [r2, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7fd fba5 	bl	8000cb8 <__aeabi_fmul>
 800356e:	4603      	mov	r3, r0
 8003570:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003574:	f102 0208 	add.w	r2, r2, #8
 8003578:	6811      	ldr	r1, [r2, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd fb9c 	bl	8000cb8 <__aeabi_fmul>
 8003580:	4603      	mov	r3, r0
 8003582:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003586:	f102 021c 	add.w	r2, r2, #28
 800358a:	6811      	ldr	r1, [r2, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fd fb93 	bl	8000cb8 <__aeabi_fmul>
 8003592:	4603      	mov	r3, r0
 8003594:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003598:	f102 021c 	add.w	r2, r2, #28
 800359c:	6811      	ldr	r1, [r2, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd fb8a 	bl	8000cb8 <__aeabi_fmul>
 80035a4:	4603      	mov	r3, r0
 80035a6:	4619      	mov	r1, r3
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fd fa7d 	bl	8000aa8 <__addsf3>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80035b4:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80035b8:	6811      	ldr	r1, [r2, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fd fb7c 	bl	8000cb8 <__aeabi_fmul>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80035c6:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80035ca:	6811      	ldr	r1, [r2, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fd fb73 	bl	8000cb8 <__aeabi_fmul>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80035d8:	f102 0220 	add.w	r2, r2, #32
 80035dc:	6811      	ldr	r1, [r2, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd fb6a 	bl	8000cb8 <__aeabi_fmul>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80035ea:	f102 0220 	add.w	r2, r2, #32
 80035ee:	6811      	ldr	r1, [r2, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fd fb61 	bl	8000cb8 <__aeabi_fmul>
 80035f6:	4603      	mov	r3, r0
 80035f8:	4619      	mov	r1, r3
 80035fa:	4628      	mov	r0, r5
 80035fc:	f7fd fc10 	bl	8000e20 <__aeabi_fdiv>
 8003600:	4603      	mov	r3, r0
 8003602:	4619      	mov	r1, r3
 8003604:	4620      	mov	r0, r4
 8003606:	f7fd fa4f 	bl	8000aa8 <__addsf3>
 800360a:	4603      	mov	r3, r0
 800360c:	4619      	mov	r1, r3
 800360e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8003612:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8003616:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800361a:	f102 0220 	add.w	r2, r2, #32
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	f202 3242 	addw	r2, r2, #834	@ 0x342
 8003624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8003628:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800362c:	f103 0320 	add.w	r3, r3, #32
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003638:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	4413      	add	r3, r2
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4619      	mov	r1, r3
 8003644:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	f7fd fa2b 	bl	8000aa4 <__aeabi_fsub>
 800364e:	4603      	mov	r3, r0
 8003650:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003654:	f102 0210 	add.w	r2, r2, #16
 8003658:	6811      	ldr	r1, [r2, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fd fb2c 	bl	8000cb8 <__aeabi_fmul>
 8003660:	4603      	mov	r3, r0
 8003662:	461c      	mov	r4, r3
 8003664:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8003668:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003672:	f103 030c 	add.w	r3, r3, #12
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	f7fd fb1e 	bl	8000cb8 <__aeabi_fmul>
 800367c:	4603      	mov	r3, r0
 800367e:	461d      	mov	r5, r3
 8003680:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003684:	f103 0320 	add.w	r3, r3, #32
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003690:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	4413      	add	r3, r2
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4619      	mov	r1, r3
 800369c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80036a0:	f103 0304 	add.w	r3, r3, #4
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	f7fd f9fd 	bl	8000aa4 <__aeabi_fsub>
 80036aa:	4603      	mov	r3, r0
 80036ac:	4619      	mov	r1, r3
 80036ae:	4628      	mov	r0, r5
 80036b0:	f7fd fb02 	bl	8000cb8 <__aeabi_fmul>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4619      	mov	r1, r3
 80036b8:	4620      	mov	r0, r4
 80036ba:	f7fd f9f3 	bl	8000aa4 <__aeabi_fsub>
 80036be:	4603      	mov	r3, r0
 80036c0:	4619      	mov	r1, r3
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fd f9f0 	bl	8000aa8 <__addsf3>
 80036c8:	4603      	mov	r3, r0
 80036ca:	461c      	mov	r4, r3
 80036cc:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80036d0:	f103 030c 	add.w	r3, r3, #12
 80036d4:	6819      	ldr	r1, [r3, #0]
 80036d6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80036da:	f103 0310 	add.w	r3, r3, #16
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	f7fd faea 	bl	8000cb8 <__aeabi_fmul>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80036ea:	f102 020c 	add.w	r2, r2, #12
 80036ee:	6811      	ldr	r1, [r2, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd fae1 	bl	8000cb8 <__aeabi_fmul>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80036fc:	f102 0220 	add.w	r2, r2, #32
 8003700:	6811      	ldr	r1, [r2, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7fd fad8 	bl	8000cb8 <__aeabi_fmul>
 8003708:	4603      	mov	r3, r0
 800370a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800370e:	f102 0220 	add.w	r2, r2, #32
 8003712:	6811      	ldr	r1, [r2, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f7fd facf 	bl	8000cb8 <__aeabi_fmul>
 800371a:	4603      	mov	r3, r0
 800371c:	4619      	mov	r1, r3
 800371e:	4620      	mov	r0, r4
 8003720:	f7fd fb7e 	bl	8000e20 <__aeabi_fdiv>
 8003724:	4603      	mov	r3, r0
 8003726:	461c      	mov	r4, r3
 8003728:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800372c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4619      	mov	r1, r3
 8003734:	4618      	mov	r0, r3
 8003736:	f7fd f9b7 	bl	8000aa8 <__addsf3>
 800373a:	4603      	mov	r3, r0
 800373c:	461d      	mov	r5, r3
 800373e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003742:	f103 0308 	add.w	r3, r3, #8
 8003746:	6819      	ldr	r1, [r3, #0]
 8003748:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800374c:	f103 030c 	add.w	r3, r3, #12
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	f7fd fab1 	bl	8000cb8 <__aeabi_fmul>
 8003756:	4603      	mov	r3, r0
 8003758:	461e      	mov	r6, r3
 800375a:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800375e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003762:	6819      	ldr	r1, [r3, #0]
 8003764:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8003768:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	f7fd faa3 	bl	8000cb8 <__aeabi_fmul>
 8003772:	4603      	mov	r3, r0
 8003774:	4698      	mov	r8, r3
 8003776:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800377a:	f103 0320 	add.w	r3, r3, #32
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8003784:	f103 031c 	add.w	r3, r3, #28
 8003788:	6818      	ldr	r0, [r3, #0]
 800378a:	f7fd fa95 	bl	8000cb8 <__aeabi_fmul>
 800378e:	4603      	mov	r3, r0
 8003790:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003794:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003798:	6811      	ldr	r1, [r2, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd fa8c 	bl	8000cb8 <__aeabi_fmul>
 80037a0:	4603      	mov	r3, r0
 80037a2:	4619      	mov	r1, r3
 80037a4:	4640      	mov	r0, r8
 80037a6:	f7fd f97d 	bl	8000aa4 <__aeabi_fsub>
 80037aa:	4603      	mov	r3, r0
 80037ac:	4619      	mov	r1, r3
 80037ae:	4630      	mov	r0, r6
 80037b0:	f7fd fa82 	bl	8000cb8 <__aeabi_fmul>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461e      	mov	r6, r3
 80037b8:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80037bc:	f103 0320 	add.w	r3, r3, #32
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80037c8:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	4413      	add	r3, r2
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4619      	mov	r1, r3
 80037d4:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80037d8:	f103 0304 	add.w	r3, r3, #4
 80037dc:	6818      	ldr	r0, [r3, #0]
 80037de:	f7fd f961 	bl	8000aa4 <__aeabi_fsub>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4619      	mov	r1, r3
 80037e6:	4630      	mov	r0, r6
 80037e8:	f7fd fa66 	bl	8000cb8 <__aeabi_fmul>
 80037ec:	4603      	mov	r3, r0
 80037ee:	461e      	mov	r6, r3
 80037f0:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80037f4:	f103 030c 	add.w	r3, r3, #12
 80037f8:	6819      	ldr	r1, [r3, #0]
 80037fa:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80037fe:	f103 0310 	add.w	r3, r3, #16
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	f7fd fa58 	bl	8000cb8 <__aeabi_fmul>
 8003808:	4603      	mov	r3, r0
 800380a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800380e:	f102 0220 	add.w	r2, r2, #32
 8003812:	6811      	ldr	r1, [r2, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fa4f 	bl	8000cb8 <__aeabi_fmul>
 800381a:	4603      	mov	r3, r0
 800381c:	4698      	mov	r8, r3
 800381e:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003822:	f103 0320 	add.w	r3, r3, #32
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800382e:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	4413      	add	r3, r2
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800383e:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	f7fd f92e 	bl	8000aa4 <__aeabi_fsub>
 8003848:	4603      	mov	r3, r0
 800384a:	4619      	mov	r1, r3
 800384c:	4640      	mov	r0, r8
 800384e:	f7fd fa33 	bl	8000cb8 <__aeabi_fmul>
 8003852:	4603      	mov	r3, r0
 8003854:	4619      	mov	r1, r3
 8003856:	4630      	mov	r0, r6
 8003858:	f7fd f926 	bl	8000aa8 <__addsf3>
 800385c:	4603      	mov	r3, r0
 800385e:	461e      	mov	r6, r3
 8003860:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003864:	f103 0308 	add.w	r3, r3, #8
 8003868:	6819      	ldr	r1, [r3, #0]
 800386a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800386e:	f103 0310 	add.w	r3, r3, #16
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	f7fd fa20 	bl	8000cb8 <__aeabi_fmul>
 8003878:	4603      	mov	r3, r0
 800387a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800387e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003882:	6811      	ldr	r1, [r2, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fd fa17 	bl	8000cb8 <__aeabi_fmul>
 800388a:	4603      	mov	r3, r0
 800388c:	4698      	mov	r8, r3
 800388e:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003892:	f103 0320 	add.w	r3, r3, #32
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800389e:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	4413      	add	r3, r2
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4619      	mov	r1, r3
 80038aa:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	f7fd f8f8 	bl	8000aa4 <__aeabi_fsub>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4619      	mov	r1, r3
 80038b8:	4640      	mov	r0, r8
 80038ba:	f7fd f9fd 	bl	8000cb8 <__aeabi_fmul>
 80038be:	4603      	mov	r3, r0
 80038c0:	4619      	mov	r1, r3
 80038c2:	4630      	mov	r0, r6
 80038c4:	f7fd f8ee 	bl	8000aa4 <__aeabi_fsub>
 80038c8:	4603      	mov	r3, r0
 80038ca:	4619      	mov	r1, r3
 80038cc:	4628      	mov	r0, r5
 80038ce:	f7fd f9f3 	bl	8000cb8 <__aeabi_fmul>
 80038d2:	4603      	mov	r3, r0
 80038d4:	461d      	mov	r5, r3
 80038d6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80038da:	f103 030c 	add.w	r3, r3, #12
 80038de:	6819      	ldr	r1, [r3, #0]
 80038e0:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80038e4:	f103 0310 	add.w	r3, r3, #16
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	f7fd f9e5 	bl	8000cb8 <__aeabi_fmul>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80038f4:	f102 020c 	add.w	r2, r2, #12
 80038f8:	6811      	ldr	r1, [r2, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd f9dc 	bl	8000cb8 <__aeabi_fmul>
 8003900:	4603      	mov	r3, r0
 8003902:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003906:	f102 0208 	add.w	r2, r2, #8
 800390a:	6811      	ldr	r1, [r2, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fd f9d3 	bl	8000cb8 <__aeabi_fmul>
 8003912:	4603      	mov	r3, r0
 8003914:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003918:	f102 021c 	add.w	r2, r2, #28
 800391c:	6811      	ldr	r1, [r2, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd f9ca 	bl	8000cb8 <__aeabi_fmul>
 8003924:	4603      	mov	r3, r0
 8003926:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800392a:	f102 021c 	add.w	r2, r2, #28
 800392e:	6811      	ldr	r1, [r2, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd f9c1 	bl	8000cb8 <__aeabi_fmul>
 8003936:	4603      	mov	r3, r0
 8003938:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800393c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003940:	6811      	ldr	r1, [r2, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd f9b8 	bl	8000cb8 <__aeabi_fmul>
 8003948:	4603      	mov	r3, r0
 800394a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800394e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003952:	6811      	ldr	r1, [r2, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7fd f9af 	bl	8000cb8 <__aeabi_fmul>
 800395a:	4603      	mov	r3, r0
 800395c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003960:	f102 0220 	add.w	r2, r2, #32
 8003964:	6811      	ldr	r1, [r2, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fd f9a6 	bl	8000cb8 <__aeabi_fmul>
 800396c:	4603      	mov	r3, r0
 800396e:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003972:	f102 0220 	add.w	r2, r2, #32
 8003976:	6811      	ldr	r1, [r2, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fd f99d 	bl	8000cb8 <__aeabi_fmul>
 800397e:	4603      	mov	r3, r0
 8003980:	4619      	mov	r1, r3
 8003982:	4628      	mov	r0, r5
 8003984:	f7fd fa4c 	bl	8000e20 <__aeabi_fdiv>
 8003988:	4603      	mov	r3, r0
 800398a:	4619      	mov	r1, r3
 800398c:	4620      	mov	r0, r4
 800398e:	f7fd f889 	bl	8000aa4 <__aeabi_fsub>
 8003992:	4603      	mov	r3, r0
 8003994:	4619      	mov	r1, r3
 8003996:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 800399a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800399e:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80039a2:	f102 0220 	add.w	r2, r2, #32
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	f502 628b 	add.w	r2, r2, #1112	@ 0x458
 80039ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 80039b0:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80039b4:	f103 0308 	add.w	r3, r3, #8
 80039b8:	6819      	ldr	r1, [r3, #0]
 80039ba:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80039be:	f103 030c 	add.w	r3, r3, #12
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	f7fd f978 	bl	8000cb8 <__aeabi_fmul>
 80039c8:	4603      	mov	r3, r0
 80039ca:	461c      	mov	r4, r3
 80039cc:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80039d0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80039d4:	6819      	ldr	r1, [r3, #0]
 80039d6:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80039da:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	f7fd f96a 	bl	8000cb8 <__aeabi_fmul>
 80039e4:	4603      	mov	r3, r0
 80039e6:	461d      	mov	r5, r3
 80039e8:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80039ec:	f103 0320 	add.w	r3, r3, #32
 80039f0:	6819      	ldr	r1, [r3, #0]
 80039f2:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80039f6:	f103 031c 	add.w	r3, r3, #28
 80039fa:	6818      	ldr	r0, [r3, #0]
 80039fc:	f7fd f95c 	bl	8000cb8 <__aeabi_fmul>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003a06:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003a0a:	6811      	ldr	r1, [r2, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd f953 	bl	8000cb8 <__aeabi_fmul>
 8003a12:	4603      	mov	r3, r0
 8003a14:	4619      	mov	r1, r3
 8003a16:	4628      	mov	r0, r5
 8003a18:	f7fd f844 	bl	8000aa4 <__aeabi_fsub>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7fd f949 	bl	8000cb8 <__aeabi_fmul>
 8003a26:	4603      	mov	r3, r0
 8003a28:	461c      	mov	r4, r3
 8003a2a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003a2e:	f103 0320 	add.w	r3, r3, #32
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003a3a:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	4413      	add	r3, r2
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4619      	mov	r1, r3
 8003a46:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003a4a:	f103 0304 	add.w	r3, r3, #4
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	f7fd f828 	bl	8000aa4 <__aeabi_fsub>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4619      	mov	r1, r3
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7fd f92d 	bl	8000cb8 <__aeabi_fmul>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461c      	mov	r4, r3
 8003a62:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003a66:	f103 030c 	add.w	r3, r3, #12
 8003a6a:	6819      	ldr	r1, [r3, #0]
 8003a6c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003a70:	f103 0310 	add.w	r3, r3, #16
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	f7fd f91f 	bl	8000cb8 <__aeabi_fmul>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003a80:	f102 0220 	add.w	r2, r2, #32
 8003a84:	6811      	ldr	r1, [r2, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fd f916 	bl	8000cb8 <__aeabi_fmul>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	461d      	mov	r5, r3
 8003a90:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003a94:	f103 0320 	add.w	r3, r3, #32
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003aa0:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003ab0:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	f7fc fff5 	bl	8000aa4 <__aeabi_fsub>
 8003aba:	4603      	mov	r3, r0
 8003abc:	4619      	mov	r1, r3
 8003abe:	4628      	mov	r0, r5
 8003ac0:	f7fd f8fa 	bl	8000cb8 <__aeabi_fmul>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4620      	mov	r0, r4
 8003aca:	f7fc ffed 	bl	8000aa8 <__addsf3>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	461c      	mov	r4, r3
 8003ad2:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003ad6:	f103 0308 	add.w	r3, r3, #8
 8003ada:	6819      	ldr	r1, [r3, #0]
 8003adc:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003ae0:	f103 0310 	add.w	r3, r3, #16
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	f7fd f8e7 	bl	8000cb8 <__aeabi_fmul>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003af0:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003af4:	6811      	ldr	r1, [r2, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd f8de 	bl	8000cb8 <__aeabi_fmul>
 8003afc:	4603      	mov	r3, r0
 8003afe:	461d      	mov	r5, r3
 8003b00:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003b04:	f103 0320 	add.w	r3, r3, #32
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003b10:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	4413      	add	r3, r2
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	f7fc ffbf 	bl	8000aa4 <__aeabi_fsub>
 8003b26:	4603      	mov	r3, r0
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f7fd f8c4 	bl	8000cb8 <__aeabi_fmul>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4619      	mov	r1, r3
 8003b34:	4620      	mov	r0, r4
 8003b36:	f7fc ffb5 	bl	8000aa4 <__aeabi_fsub>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fc ffb2 	bl	8000aa8 <__addsf3>
 8003b44:	4603      	mov	r3, r0
 8003b46:	461c      	mov	r4, r3
 8003b48:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003b4c:	f103 030c 	add.w	r3, r3, #12
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003b56:	f103 0310 	add.w	r3, r3, #16
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	f7fd f8ac 	bl	8000cb8 <__aeabi_fmul>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003b66:	f102 0208 	add.w	r2, r2, #8
 8003b6a:	6811      	ldr	r1, [r2, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fd f8a3 	bl	8000cb8 <__aeabi_fmul>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003b78:	f102 0208 	add.w	r2, r2, #8
 8003b7c:	6811      	ldr	r1, [r2, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd f89a 	bl	8000cb8 <__aeabi_fmul>
 8003b84:	4603      	mov	r3, r0
 8003b86:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003b8a:	f102 021c 	add.w	r2, r2, #28
 8003b8e:	6811      	ldr	r1, [r2, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fd f891 	bl	8000cb8 <__aeabi_fmul>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003b9c:	f102 021c 	add.w	r2, r2, #28
 8003ba0:	6811      	ldr	r1, [r2, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fd f888 	bl	8000cb8 <__aeabi_fmul>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003bae:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003bb2:	6811      	ldr	r1, [r2, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fd f87f 	bl	8000cb8 <__aeabi_fmul>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003bc0:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003bc4:	6811      	ldr	r1, [r2, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd f876 	bl	8000cb8 <__aeabi_fmul>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003bd2:	f102 0220 	add.w	r2, r2, #32
 8003bd6:	6811      	ldr	r1, [r2, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd f86d 	bl	8000cb8 <__aeabi_fmul>
 8003bde:	4603      	mov	r3, r0
 8003be0:	4619      	mov	r1, r3
 8003be2:	4620      	mov	r0, r4
 8003be4:	f7fd f91c 	bl	8000e20 <__aeabi_fdiv>
 8003be8:	4603      	mov	r3, r0
 8003bea:	4619      	mov	r1, r3
 8003bec:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8003bf0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8003bf4:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8003bf8:	f102 0220 	add.w	r2, r2, #32
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	f202 526e 	addw	r2, r2, #1390	@ 0x56e
 8003c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 8003c06:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003c0a:	f103 030c 	add.w	r3, r3, #12
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003c14:	f103 0304 	add.w	r3, r3, #4
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	f7fd f84d 	bl	8000cb8 <__aeabi_fmul>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461c      	mov	r4, r3
 8003c22:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003c26:	f103 0320 	add.w	r3, r3, #32
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003c32:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	4413      	add	r3, r2
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003c40:	f102 020c 	add.w	r2, r2, #12
 8003c44:	6811      	ldr	r1, [r2, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fd f836 	bl	8000cb8 <__aeabi_fmul>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4620      	mov	r0, r4
 8003c52:	f7fc ff27 	bl	8000aa4 <__aeabi_fsub>
 8003c56:	4603      	mov	r3, r0
 8003c58:	461c      	mov	r4, r3
 8003c5a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003c5e:	f103 0310 	add.w	r3, r3, #16
 8003c62:	6819      	ldr	r1, [r3, #0]
 8003c64:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	f7fd f825 	bl	8000cb8 <__aeabi_fmul>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003c74:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8003c78:	6811      	ldr	r1, [r2, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fd f81c 	bl	8000cb8 <__aeabi_fmul>
 8003c80:	4603      	mov	r3, r0
 8003c82:	4619      	mov	r1, r3
 8003c84:	4620      	mov	r0, r4
 8003c86:	f7fc ff0d 	bl	8000aa4 <__aeabi_fsub>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	461c      	mov	r4, r3
 8003c8e:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003c92:	f103 0320 	add.w	r3, r3, #32
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003c9e:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003cac:	f102 0210 	add.w	r2, r2, #16
 8003cb0:	6811      	ldr	r1, [r2, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd f800 	bl	8000cb8 <__aeabi_fmul>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003cbe:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8003cc2:	6811      	ldr	r1, [r2, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fc fff7 	bl	8000cb8 <__aeabi_fmul>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f7fc feea 	bl	8000aa8 <__addsf3>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fc fee5 	bl	8000aa8 <__addsf3>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	461c      	mov	r4, r3
 8003ce2:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003ce6:	f103 0310 	add.w	r3, r3, #16
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	f7fc ffe1 	bl	8000cb8 <__aeabi_fmul>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003cfc:	f102 0208 	add.w	r2, r2, #8
 8003d00:	6811      	ldr	r1, [r2, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc ffd8 	bl	8000cb8 <__aeabi_fmul>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003d0e:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003d12:	6811      	ldr	r1, [r2, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fc ffcf 	bl	8000cb8 <__aeabi_fmul>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003d20:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003d24:	6811      	ldr	r1, [r2, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc ffc6 	bl	8000cb8 <__aeabi_fmul>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	461d      	mov	r5, r3
 8003d30:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003d34:	f103 0320 	add.w	r3, r3, #32
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003d40:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	4413      	add	r3, r2
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003d4e:	f102 0210 	add.w	r2, r2, #16
 8003d52:	6811      	ldr	r1, [r2, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fc ffaf 	bl	8000cb8 <__aeabi_fmul>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003d60:	f102 0208 	add.w	r2, r2, #8
 8003d64:	6811      	ldr	r1, [r2, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc ffa6 	bl	8000cb8 <__aeabi_fmul>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003d72:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003d76:	6811      	ldr	r1, [r2, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fc ff9d 	bl	8000cb8 <__aeabi_fmul>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003d84:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003d88:	6811      	ldr	r1, [r2, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc ff94 	bl	8000cb8 <__aeabi_fmul>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4619      	mov	r1, r3
 8003d94:	4628      	mov	r0, r5
 8003d96:	f7fc fe85 	bl	8000aa4 <__aeabi_fsub>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461d      	mov	r5, r3
 8003d9e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003da2:	f103 0310 	add.w	r3, r3, #16
 8003da6:	6819      	ldr	r1, [r3, #0]
 8003da8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	f7fc ff83 	bl	8000cb8 <__aeabi_fmul>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003db8:	f102 0208 	add.w	r2, r2, #8
 8003dbc:	6811      	ldr	r1, [r2, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fc ff7a 	bl	8000cb8 <__aeabi_fmul>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003dca:	f102 021c 	add.w	r2, r2, #28
 8003dce:	6811      	ldr	r1, [r2, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fc ff71 	bl	8000cb8 <__aeabi_fmul>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003ddc:	f102 021c 	add.w	r2, r2, #28
 8003de0:	6811      	ldr	r1, [r2, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc ff68 	bl	8000cb8 <__aeabi_fmul>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003dee:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003df2:	6811      	ldr	r1, [r2, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fc ff5f 	bl	8000cb8 <__aeabi_fmul>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003e00:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003e04:	6811      	ldr	r1, [r2, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc ff56 	bl	8000cb8 <__aeabi_fmul>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4628      	mov	r0, r5
 8003e12:	f7fc fe49 	bl	8000aa8 <__addsf3>
 8003e16:	4603      	mov	r3, r0
 8003e18:	461d      	mov	r5, r3
 8003e1a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003e1e:	f103 0320 	add.w	r3, r3, #32
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003e2a:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	4413      	add	r3, r2
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003e38:	f102 0210 	add.w	r2, r2, #16
 8003e3c:	6811      	ldr	r1, [r2, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc ff3a 	bl	8000cb8 <__aeabi_fmul>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003e4a:	f102 0208 	add.w	r2, r2, #8
 8003e4e:	6811      	ldr	r1, [r2, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fc ff31 	bl	8000cb8 <__aeabi_fmul>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003e5c:	f102 021c 	add.w	r2, r2, #28
 8003e60:	6811      	ldr	r1, [r2, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc ff28 	bl	8000cb8 <__aeabi_fmul>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003e6e:	f102 021c 	add.w	r2, r2, #28
 8003e72:	6811      	ldr	r1, [r2, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fc ff1f 	bl	8000cb8 <__aeabi_fmul>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003e80:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003e84:	6811      	ldr	r1, [r2, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc ff16 	bl	8000cb8 <__aeabi_fmul>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003e92:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8003e96:	6811      	ldr	r1, [r2, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fc ff0d 	bl	8000cb8 <__aeabi_fmul>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	f7fc fdfe 	bl	8000aa4 <__aeabi_fsub>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	461d      	mov	r5, r3
 8003eac:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003eb0:	f103 0310 	add.w	r3, r3, #16
 8003eb4:	6819      	ldr	r1, [r3, #0]
 8003eb6:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003eba:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	f7fc fefa 	bl	8000cb8 <__aeabi_fmul>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003eca:	f102 020c 	add.w	r2, r2, #12
 8003ece:	6811      	ldr	r1, [r2, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc fef1 	bl	8000cb8 <__aeabi_fmul>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003edc:	f102 0220 	add.w	r2, r2, #32
 8003ee0:	6811      	ldr	r1, [r2, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fc fee8 	bl	8000cb8 <__aeabi_fmul>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003eee:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003ef2:	6811      	ldr	r1, [r2, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fc fedf 	bl	8000cb8 <__aeabi_fmul>
 8003efa:	4603      	mov	r3, r0
 8003efc:	4619      	mov	r1, r3
 8003efe:	4628      	mov	r0, r5
 8003f00:	f7fc fdd0 	bl	8000aa4 <__aeabi_fsub>
 8003f04:	4603      	mov	r3, r0
 8003f06:	461d      	mov	r5, r3
 8003f08:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003f0c:	f103 0320 	add.w	r3, r3, #32
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003f18:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003f26:	f102 0210 	add.w	r2, r2, #16
 8003f2a:	6811      	ldr	r1, [r2, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fc fec3 	bl	8000cb8 <__aeabi_fmul>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003f38:	f102 020c 	add.w	r2, r2, #12
 8003f3c:	6811      	ldr	r1, [r2, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc feba 	bl	8000cb8 <__aeabi_fmul>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003f4a:	f102 0220 	add.w	r2, r2, #32
 8003f4e:	6811      	ldr	r1, [r2, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fc feb1 	bl	8000cb8 <__aeabi_fmul>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003f5c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003f60:	6811      	ldr	r1, [r2, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc fea8 	bl	8000cb8 <__aeabi_fmul>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f7fc fd9b 	bl	8000aa8 <__addsf3>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461d      	mov	r5, r3
 8003f76:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003f7a:	f103 030c 	add.w	r3, r3, #12
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8003f84:	f103 0304 	add.w	r3, r3, #4
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	f7fc fe95 	bl	8000cb8 <__aeabi_fmul>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8003f94:	f102 0208 	add.w	r2, r2, #8
 8003f98:	6811      	ldr	r1, [r2, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc fe8c 	bl	8000cb8 <__aeabi_fmul>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003fa6:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003faa:	6811      	ldr	r1, [r2, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc fe83 	bl	8000cb8 <__aeabi_fmul>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003fb8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8003fbc:	6811      	ldr	r1, [r2, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fe7a 	bl	8000cb8 <__aeabi_fmul>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8003fca:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8003fce:	6811      	ldr	r1, [r2, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fc fe71 	bl	8000cb8 <__aeabi_fmul>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f7fc fd62 	bl	8000aa4 <__aeabi_fsub>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461d      	mov	r5, r3
 8003fe4:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8003fe8:	f103 0320 	add.w	r3, r3, #32
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8003ff4:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004002:	f102 020c 	add.w	r2, r2, #12
 8004006:	6811      	ldr	r1, [r2, #0]
 8004008:	4618      	mov	r0, r3
 800400a:	f7fc fe55 	bl	8000cb8 <__aeabi_fmul>
 800400e:	4603      	mov	r3, r0
 8004010:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004014:	f102 0208 	add.w	r2, r2, #8
 8004018:	6811      	ldr	r1, [r2, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fc fe4c 	bl	8000cb8 <__aeabi_fmul>
 8004020:	4603      	mov	r3, r0
 8004022:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004026:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800402a:	6811      	ldr	r1, [r2, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7fc fe43 	bl	8000cb8 <__aeabi_fmul>
 8004032:	4603      	mov	r3, r0
 8004034:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004038:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800403c:	6811      	ldr	r1, [r2, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc fe3a 	bl	8000cb8 <__aeabi_fmul>
 8004044:	4603      	mov	r3, r0
 8004046:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800404a:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800404e:	6811      	ldr	r1, [r2, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc fe31 	bl	8000cb8 <__aeabi_fmul>
 8004056:	4603      	mov	r3, r0
 8004058:	4619      	mov	r1, r3
 800405a:	4628      	mov	r0, r5
 800405c:	f7fc fd24 	bl	8000aa8 <__addsf3>
 8004060:	4603      	mov	r3, r0
 8004062:	461d      	mov	r5, r3
 8004064:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004068:	f103 030c 	add.w	r3, r3, #12
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004072:	f103 0304 	add.w	r3, r3, #4
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	f7fc fe1e 	bl	8000cb8 <__aeabi_fmul>
 800407c:	4603      	mov	r3, r0
 800407e:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004082:	f102 0208 	add.w	r2, r2, #8
 8004086:	6811      	ldr	r1, [r2, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fc fe15 	bl	8000cb8 <__aeabi_fmul>
 800408e:	4603      	mov	r3, r0
 8004090:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004094:	f102 021c 	add.w	r2, r2, #28
 8004098:	6811      	ldr	r1, [r2, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc fe0c 	bl	8000cb8 <__aeabi_fmul>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80040a6:	f102 021c 	add.w	r2, r2, #28
 80040aa:	6811      	ldr	r1, [r2, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fc fe03 	bl	8000cb8 <__aeabi_fmul>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80040b8:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80040bc:	6811      	ldr	r1, [r2, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fc fdfa 	bl	8000cb8 <__aeabi_fmul>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80040ca:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80040ce:	6811      	ldr	r1, [r2, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fc fdf1 	bl	8000cb8 <__aeabi_fmul>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80040dc:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80040e0:	6811      	ldr	r1, [r2, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fc fde8 	bl	8000cb8 <__aeabi_fmul>
 80040e8:	4603      	mov	r3, r0
 80040ea:	4619      	mov	r1, r3
 80040ec:	4628      	mov	r0, r5
 80040ee:	f7fc fcd9 	bl	8000aa4 <__aeabi_fsub>
 80040f2:	4603      	mov	r3, r0
 80040f4:	461d      	mov	r5, r3
 80040f6:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80040fa:	f103 0320 	add.w	r3, r3, #32
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8004106:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	4413      	add	r3, r2
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004114:	f102 020c 	add.w	r2, r2, #12
 8004118:	6811      	ldr	r1, [r2, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc fdcc 	bl	8000cb8 <__aeabi_fmul>
 8004120:	4603      	mov	r3, r0
 8004122:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004126:	f102 0208 	add.w	r2, r2, #8
 800412a:	6811      	ldr	r1, [r2, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fc fdc3 	bl	8000cb8 <__aeabi_fmul>
 8004132:	4603      	mov	r3, r0
 8004134:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004138:	f102 021c 	add.w	r2, r2, #28
 800413c:	6811      	ldr	r1, [r2, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc fdba 	bl	8000cb8 <__aeabi_fmul>
 8004144:	4603      	mov	r3, r0
 8004146:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800414a:	f102 021c 	add.w	r2, r2, #28
 800414e:	6811      	ldr	r1, [r2, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f7fc fdb1 	bl	8000cb8 <__aeabi_fmul>
 8004156:	4603      	mov	r3, r0
 8004158:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800415c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8004160:	6811      	ldr	r1, [r2, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fc fda8 	bl	8000cb8 <__aeabi_fmul>
 8004168:	4603      	mov	r3, r0
 800416a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800416e:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8004172:	6811      	ldr	r1, [r2, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f7fc fd9f 	bl	8000cb8 <__aeabi_fmul>
 800417a:	4603      	mov	r3, r0
 800417c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004180:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8004184:	6811      	ldr	r1, [r2, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc fd96 	bl	8000cb8 <__aeabi_fmul>
 800418c:	4603      	mov	r3, r0
 800418e:	4619      	mov	r1, r3
 8004190:	4628      	mov	r0, r5
 8004192:	f7fc fc89 	bl	8000aa8 <__addsf3>
 8004196:	4603      	mov	r3, r0
 8004198:	461d      	mov	r5, r3
 800419a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800419e:	f103 030c 	add.w	r3, r3, #12
 80041a2:	6819      	ldr	r1, [r3, #0]
 80041a4:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80041a8:	f103 0304 	add.w	r3, r3, #4
 80041ac:	6818      	ldr	r0, [r3, #0]
 80041ae:	f7fc fd83 	bl	8000cb8 <__aeabi_fmul>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80041b8:	f102 0208 	add.w	r2, r2, #8
 80041bc:	6811      	ldr	r1, [r2, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7fc fd7a 	bl	8000cb8 <__aeabi_fmul>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80041ca:	f102 021c 	add.w	r2, r2, #28
 80041ce:	6811      	ldr	r1, [r2, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fc fd71 	bl	8000cb8 <__aeabi_fmul>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80041dc:	f102 0220 	add.w	r2, r2, #32
 80041e0:	6811      	ldr	r1, [r2, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fc fd68 	bl	8000cb8 <__aeabi_fmul>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80041ee:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80041f2:	6811      	ldr	r1, [r2, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fc fd5f 	bl	8000cb8 <__aeabi_fmul>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004200:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004204:	6811      	ldr	r1, [r2, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7fc fd56 	bl	8000cb8 <__aeabi_fmul>
 800420c:	4603      	mov	r3, r0
 800420e:	4619      	mov	r1, r3
 8004210:	4628      	mov	r0, r5
 8004212:	f7fc fc49 	bl	8000aa8 <__addsf3>
 8004216:	4603      	mov	r3, r0
 8004218:	461d      	mov	r5, r3
 800421a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800421e:	f103 0320 	add.w	r3, r3, #32
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800422a:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	4413      	add	r3, r2
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004238:	f102 020c 	add.w	r2, r2, #12
 800423c:	6811      	ldr	r1, [r2, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7fc fd3a 	bl	8000cb8 <__aeabi_fmul>
 8004244:	4603      	mov	r3, r0
 8004246:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800424a:	f102 0208 	add.w	r2, r2, #8
 800424e:	6811      	ldr	r1, [r2, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7fc fd31 	bl	8000cb8 <__aeabi_fmul>
 8004256:	4603      	mov	r3, r0
 8004258:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800425c:	f102 021c 	add.w	r2, r2, #28
 8004260:	6811      	ldr	r1, [r2, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7fc fd28 	bl	8000cb8 <__aeabi_fmul>
 8004268:	4603      	mov	r3, r0
 800426a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800426e:	f102 0220 	add.w	r2, r2, #32
 8004272:	6811      	ldr	r1, [r2, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fc fd1f 	bl	8000cb8 <__aeabi_fmul>
 800427a:	4603      	mov	r3, r0
 800427c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004280:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8004284:	6811      	ldr	r1, [r2, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7fc fd16 	bl	8000cb8 <__aeabi_fmul>
 800428c:	4603      	mov	r3, r0
 800428e:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004292:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004296:	6811      	ldr	r1, [r2, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f7fc fd0d 	bl	8000cb8 <__aeabi_fmul>
 800429e:	4603      	mov	r3, r0
 80042a0:	4619      	mov	r1, r3
 80042a2:	4628      	mov	r0, r5
 80042a4:	f7fc fbfe 	bl	8000aa4 <__aeabi_fsub>
 80042a8:	4603      	mov	r3, r0
 80042aa:	4619      	mov	r1, r3
 80042ac:	4620      	mov	r0, r4
 80042ae:	f7fc fd03 	bl	8000cb8 <__aeabi_fmul>
 80042b2:	4603      	mov	r3, r0
 80042b4:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80042b8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80042bc:	f103 0310 	add.w	r3, r3, #16
 80042c0:	6819      	ldr	r1, [r3, #0]
 80042c2:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80042c6:	f103 0310 	add.w	r3, r3, #16
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	f7fc fcf4 	bl	8000cb8 <__aeabi_fmul>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80042d6:	f102 020c 	add.w	r2, r2, #12
 80042da:	6811      	ldr	r1, [r2, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fc fceb 	bl	8000cb8 <__aeabi_fmul>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80042e8:	f102 020c 	add.w	r2, r2, #12
 80042ec:	6811      	ldr	r1, [r2, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fc fce2 	bl	8000cb8 <__aeabi_fmul>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80042fa:	f102 0208 	add.w	r2, r2, #8
 80042fe:	6811      	ldr	r1, [r2, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7fc fcd9 	bl	8000cb8 <__aeabi_fmul>
 8004306:	4603      	mov	r3, r0
 8004308:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800430c:	f102 021c 	add.w	r2, r2, #28
 8004310:	6811      	ldr	r1, [r2, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fc fcd0 	bl	8000cb8 <__aeabi_fmul>
 8004318:	4603      	mov	r3, r0
 800431a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800431e:	f102 021c 	add.w	r2, r2, #28
 8004322:	6811      	ldr	r1, [r2, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc fcc7 	bl	8000cb8 <__aeabi_fmul>
 800432a:	4603      	mov	r3, r0
 800432c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004330:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8004334:	6811      	ldr	r1, [r2, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc fcbe 	bl	8000cb8 <__aeabi_fmul>
 800433c:	4603      	mov	r3, r0
 800433e:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004342:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8004346:	6811      	ldr	r1, [r2, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc fcb5 	bl	8000cb8 <__aeabi_fmul>
 800434e:	4603      	mov	r3, r0
 8004350:	461d      	mov	r5, r3
 8004352:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004356:	f103 0320 	add.w	r3, r3, #32
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004360:	f103 0320 	add.w	r3, r3, #32
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	f7fc fca7 	bl	8000cb8 <__aeabi_fmul>
 800436a:	4603      	mov	r3, r0
 800436c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004370:	f102 0220 	add.w	r2, r2, #32
 8004374:	6811      	ldr	r1, [r2, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fc fc9e 	bl	8000cb8 <__aeabi_fmul>
 800437c:	4603      	mov	r3, r0
 800437e:	4619      	mov	r1, r3
 8004380:	4628      	mov	r0, r5
 8004382:	f7fc fc99 	bl	8000cb8 <__aeabi_fmul>
 8004386:	4603      	mov	r3, r0
 8004388:	4619      	mov	r1, r3
 800438a:	4620      	mov	r0, r4
 800438c:	f7fc fd48 	bl	8000e20 <__aeabi_fdiv>
 8004390:	4603      	mov	r3, r0
 8004392:	4619      	mov	r1, r3
 8004394:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8004398:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800439c:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80043a0:	f102 0220 	add.w	r2, r2, #32
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	f202 6284 	addw	r2, r2, #1668	@ 0x684
 80043aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 80043ae:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80043b2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4619      	mov	r1, r3
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fc fb74 	bl	8000aa8 <__addsf3>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461c      	mov	r4, r3
 80043c4:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80043c8:	f103 0308 	add.w	r3, r3, #8
 80043cc:	6819      	ldr	r1, [r3, #0]
 80043ce:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80043d2:	f103 030c 	add.w	r3, r3, #12
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	f7fc fc6e 	bl	8000cb8 <__aeabi_fmul>
 80043dc:	4603      	mov	r3, r0
 80043de:	461d      	mov	r5, r3
 80043e0:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80043e4:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80043e8:	6819      	ldr	r1, [r3, #0]
 80043ea:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80043ee:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	f7fc fc60 	bl	8000cb8 <__aeabi_fmul>
 80043f8:	4603      	mov	r3, r0
 80043fa:	461e      	mov	r6, r3
 80043fc:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004400:	f103 0320 	add.w	r3, r3, #32
 8004404:	6819      	ldr	r1, [r3, #0]
 8004406:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800440a:	f103 031c 	add.w	r3, r3, #28
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	f7fc fc52 	bl	8000cb8 <__aeabi_fmul>
 8004414:	4603      	mov	r3, r0
 8004416:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800441a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800441e:	6811      	ldr	r1, [r2, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7fc fc49 	bl	8000cb8 <__aeabi_fmul>
 8004426:	4603      	mov	r3, r0
 8004428:	4619      	mov	r1, r3
 800442a:	4630      	mov	r0, r6
 800442c:	f7fc fb3a 	bl	8000aa4 <__aeabi_fsub>
 8004430:	4603      	mov	r3, r0
 8004432:	4619      	mov	r1, r3
 8004434:	4628      	mov	r0, r5
 8004436:	f7fc fc3f 	bl	8000cb8 <__aeabi_fmul>
 800443a:	4603      	mov	r3, r0
 800443c:	461d      	mov	r5, r3
 800443e:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004442:	f103 0320 	add.w	r3, r3, #32
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800444e:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	4413      	add	r3, r2
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4619      	mov	r1, r3
 800445a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800445e:	f103 0304 	add.w	r3, r3, #4
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	f7fc fb1e 	bl	8000aa4 <__aeabi_fsub>
 8004468:	4603      	mov	r3, r0
 800446a:	4619      	mov	r1, r3
 800446c:	4628      	mov	r0, r5
 800446e:	f7fc fc23 	bl	8000cb8 <__aeabi_fmul>
 8004472:	4603      	mov	r3, r0
 8004474:	461d      	mov	r5, r3
 8004476:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800447a:	f103 030c 	add.w	r3, r3, #12
 800447e:	6819      	ldr	r1, [r3, #0]
 8004480:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004484:	f103 0310 	add.w	r3, r3, #16
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	f7fc fc15 	bl	8000cb8 <__aeabi_fmul>
 800448e:	4603      	mov	r3, r0
 8004490:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004494:	f102 0220 	add.w	r2, r2, #32
 8004498:	6811      	ldr	r1, [r2, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fc fc0c 	bl	8000cb8 <__aeabi_fmul>
 80044a0:	4603      	mov	r3, r0
 80044a2:	461e      	mov	r6, r3
 80044a4:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80044a8:	f103 0320 	add.w	r3, r3, #32
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80044b4:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	4413      	add	r3, r2
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4619      	mov	r1, r3
 80044c0:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80044c4:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f7fc faeb 	bl	8000aa4 <__aeabi_fsub>
 80044ce:	4603      	mov	r3, r0
 80044d0:	4619      	mov	r1, r3
 80044d2:	4630      	mov	r0, r6
 80044d4:	f7fc fbf0 	bl	8000cb8 <__aeabi_fmul>
 80044d8:	4603      	mov	r3, r0
 80044da:	4619      	mov	r1, r3
 80044dc:	4628      	mov	r0, r5
 80044de:	f7fc fae3 	bl	8000aa8 <__addsf3>
 80044e2:	4603      	mov	r3, r0
 80044e4:	461d      	mov	r5, r3
 80044e6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80044ea:	f103 0308 	add.w	r3, r3, #8
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80044f4:	f103 0310 	add.w	r3, r3, #16
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	f7fc fbdd 	bl	8000cb8 <__aeabi_fmul>
 80044fe:	4603      	mov	r3, r0
 8004500:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004504:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8004508:	6811      	ldr	r1, [r2, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fc fbd4 	bl	8000cb8 <__aeabi_fmul>
 8004510:	4603      	mov	r3, r0
 8004512:	461e      	mov	r6, r3
 8004514:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004518:	f103 0320 	add.w	r3, r3, #32
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8004524:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	4413      	add	r3, r2
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4619      	mov	r1, r3
 8004530:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	f7fc fab5 	bl	8000aa4 <__aeabi_fsub>
 800453a:	4603      	mov	r3, r0
 800453c:	4619      	mov	r1, r3
 800453e:	4630      	mov	r0, r6
 8004540:	f7fc fbba 	bl	8000cb8 <__aeabi_fmul>
 8004544:	4603      	mov	r3, r0
 8004546:	4619      	mov	r1, r3
 8004548:	4628      	mov	r0, r5
 800454a:	f7fc faab 	bl	8000aa4 <__aeabi_fsub>
 800454e:	4603      	mov	r3, r0
 8004550:	461d      	mov	r5, r3
 8004552:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004556:	f103 0308 	add.w	r3, r3, #8
 800455a:	6819      	ldr	r1, [r3, #0]
 800455c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004560:	f103 030c 	add.w	r3, r3, #12
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	f7fc fba7 	bl	8000cb8 <__aeabi_fmul>
 800456a:	4603      	mov	r3, r0
 800456c:	461e      	mov	r6, r3
 800456e:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004572:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8004576:	6819      	ldr	r1, [r3, #0]
 8004578:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800457c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	f7fc fb99 	bl	8000cb8 <__aeabi_fmul>
 8004586:	4603      	mov	r3, r0
 8004588:	4698      	mov	r8, r3
 800458a:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800458e:	f103 0320 	add.w	r3, r3, #32
 8004592:	6819      	ldr	r1, [r3, #0]
 8004594:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004598:	f103 031c 	add.w	r3, r3, #28
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	f7fc fb8b 	bl	8000cb8 <__aeabi_fmul>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80045a8:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80045ac:	6811      	ldr	r1, [r2, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fc fb82 	bl	8000cb8 <__aeabi_fmul>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4619      	mov	r1, r3
 80045b8:	4640      	mov	r0, r8
 80045ba:	f7fc fa73 	bl	8000aa4 <__aeabi_fsub>
 80045be:	4603      	mov	r3, r0
 80045c0:	4619      	mov	r1, r3
 80045c2:	4630      	mov	r0, r6
 80045c4:	f7fc fb78 	bl	8000cb8 <__aeabi_fmul>
 80045c8:	4603      	mov	r3, r0
 80045ca:	461e      	mov	r6, r3
 80045cc:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80045d0:	f103 0320 	add.w	r3, r3, #32
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80045dc:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	4413      	add	r3, r2
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4619      	mov	r1, r3
 80045e8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80045ec:	f103 0304 	add.w	r3, r3, #4
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	f7fc fa57 	bl	8000aa4 <__aeabi_fsub>
 80045f6:	4603      	mov	r3, r0
 80045f8:	4619      	mov	r1, r3
 80045fa:	4630      	mov	r0, r6
 80045fc:	f7fc fb5c 	bl	8000cb8 <__aeabi_fmul>
 8004600:	4603      	mov	r3, r0
 8004602:	461e      	mov	r6, r3
 8004604:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004608:	f103 030c 	add.w	r3, r3, #12
 800460c:	6819      	ldr	r1, [r3, #0]
 800460e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004612:	f103 0310 	add.w	r3, r3, #16
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	f7fc fb4e 	bl	8000cb8 <__aeabi_fmul>
 800461c:	4603      	mov	r3, r0
 800461e:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004622:	f102 0220 	add.w	r2, r2, #32
 8004626:	6811      	ldr	r1, [r2, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f7fc fb45 	bl	8000cb8 <__aeabi_fmul>
 800462e:	4603      	mov	r3, r0
 8004630:	4698      	mov	r8, r3
 8004632:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004636:	f103 0320 	add.w	r3, r3, #32
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8004642:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	4413      	add	r3, r2
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4619      	mov	r1, r3
 800464e:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004652:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8004656:	6818      	ldr	r0, [r3, #0]
 8004658:	f7fc fa24 	bl	8000aa4 <__aeabi_fsub>
 800465c:	4603      	mov	r3, r0
 800465e:	4619      	mov	r1, r3
 8004660:	4640      	mov	r0, r8
 8004662:	f7fc fb29 	bl	8000cb8 <__aeabi_fmul>
 8004666:	4603      	mov	r3, r0
 8004668:	4619      	mov	r1, r3
 800466a:	4630      	mov	r0, r6
 800466c:	f7fc fa1c 	bl	8000aa8 <__addsf3>
 8004670:	4603      	mov	r3, r0
 8004672:	461e      	mov	r6, r3
 8004674:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004678:	f103 0308 	add.w	r3, r3, #8
 800467c:	6819      	ldr	r1, [r3, #0]
 800467e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004682:	f103 0310 	add.w	r3, r3, #16
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	f7fc fb16 	bl	8000cb8 <__aeabi_fmul>
 800468c:	4603      	mov	r3, r0
 800468e:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004692:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8004696:	6811      	ldr	r1, [r2, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fc fb0d 	bl	8000cb8 <__aeabi_fmul>
 800469e:	4603      	mov	r3, r0
 80046a0:	4698      	mov	r8, r3
 80046a2:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80046a6:	f103 0320 	add.w	r3, r3, #32
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80046b2:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	4413      	add	r3, r2
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4619      	mov	r1, r3
 80046be:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	f7fc f9ee 	bl	8000aa4 <__aeabi_fsub>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4619      	mov	r1, r3
 80046cc:	4640      	mov	r0, r8
 80046ce:	f7fc faf3 	bl	8000cb8 <__aeabi_fmul>
 80046d2:	4603      	mov	r3, r0
 80046d4:	4619      	mov	r1, r3
 80046d6:	4630      	mov	r0, r6
 80046d8:	f7fc f9e4 	bl	8000aa4 <__aeabi_fsub>
 80046dc:	4603      	mov	r3, r0
 80046de:	4619      	mov	r1, r3
 80046e0:	4628      	mov	r0, r5
 80046e2:	f7fc fae9 	bl	8000cb8 <__aeabi_fmul>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4619      	mov	r1, r3
 80046ea:	4620      	mov	r0, r4
 80046ec:	f7fc fae4 	bl	8000cb8 <__aeabi_fmul>
 80046f0:	4603      	mov	r3, r0
 80046f2:	461c      	mov	r4, r3
 80046f4:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80046f8:	f103 0310 	add.w	r3, r3, #16
 80046fc:	6819      	ldr	r1, [r3, #0]
 80046fe:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004702:	f103 0310 	add.w	r3, r3, #16
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	f7fc fad6 	bl	8000cb8 <__aeabi_fmul>
 800470c:	4603      	mov	r3, r0
 800470e:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004712:	f102 020c 	add.w	r2, r2, #12
 8004716:	6811      	ldr	r1, [r2, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7fc facd 	bl	8000cb8 <__aeabi_fmul>
 800471e:	4603      	mov	r3, r0
 8004720:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004724:	f102 020c 	add.w	r2, r2, #12
 8004728:	6811      	ldr	r1, [r2, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7fc fac4 	bl	8000cb8 <__aeabi_fmul>
 8004730:	4603      	mov	r3, r0
 8004732:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004736:	f102 0208 	add.w	r2, r2, #8
 800473a:	6811      	ldr	r1, [r2, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7fc fabb 	bl	8000cb8 <__aeabi_fmul>
 8004742:	4603      	mov	r3, r0
 8004744:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004748:	f102 0208 	add.w	r2, r2, #8
 800474c:	6811      	ldr	r1, [r2, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fc fab2 	bl	8000cb8 <__aeabi_fmul>
 8004754:	4603      	mov	r3, r0
 8004756:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800475a:	f102 021c 	add.w	r2, r2, #28
 800475e:	6811      	ldr	r1, [r2, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7fc faa9 	bl	8000cb8 <__aeabi_fmul>
 8004766:	4603      	mov	r3, r0
 8004768:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800476c:	f102 021c 	add.w	r2, r2, #28
 8004770:	6811      	ldr	r1, [r2, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fc faa0 	bl	8000cb8 <__aeabi_fmul>
 8004778:	4603      	mov	r3, r0
 800477a:	461d      	mov	r5, r3
 800477c:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004780:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8004784:	6819      	ldr	r1, [r3, #0]
 8004786:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800478a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	f7fc fa92 	bl	8000cb8 <__aeabi_fmul>
 8004794:	4603      	mov	r3, r0
 8004796:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800479a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 800479e:	6811      	ldr	r1, [r2, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fc fa89 	bl	8000cb8 <__aeabi_fmul>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4619      	mov	r1, r3
 80047aa:	4628      	mov	r0, r5
 80047ac:	f7fc fa84 	bl	8000cb8 <__aeabi_fmul>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80047b6:	f102 0220 	add.w	r2, r2, #32
 80047ba:	6811      	ldr	r1, [r2, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fc fa7b 	bl	8000cb8 <__aeabi_fmul>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80047c8:	f102 0220 	add.w	r2, r2, #32
 80047cc:	6811      	ldr	r1, [r2, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fc fa72 	bl	8000cb8 <__aeabi_fmul>
 80047d4:	4603      	mov	r3, r0
 80047d6:	4619      	mov	r1, r3
 80047d8:	4620      	mov	r0, r4
 80047da:	f7fc fb21 	bl	8000e20 <__aeabi_fdiv>
 80047de:	4603      	mov	r3, r0
 80047e0:	461c      	mov	r4, r3
 80047e2:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80047e6:	f103 0320 	add.w	r3, r3, #32
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80047f2:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	4413      	add	r3, r2
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4619      	mov	r1, r3
 80047fe:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004802:	f103 0304 	add.w	r3, r3, #4
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	f7fc f94c 	bl	8000aa4 <__aeabi_fsub>
 800480c:	4603      	mov	r3, r0
 800480e:	4619      	mov	r1, r3
 8004810:	4618      	mov	r0, r3
 8004812:	f7fc f949 	bl	8000aa8 <__addsf3>
 8004816:	4603      	mov	r3, r0
 8004818:	461d      	mov	r5, r3
 800481a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800481e:	f103 0308 	add.w	r3, r3, #8
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004828:	f103 030c 	add.w	r3, r3, #12
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	f7fc fa43 	bl	8000cb8 <__aeabi_fmul>
 8004832:	4603      	mov	r3, r0
 8004834:	461e      	mov	r6, r3
 8004836:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800483a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004844:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	f7fc fa35 	bl	8000cb8 <__aeabi_fmul>
 800484e:	4603      	mov	r3, r0
 8004850:	4698      	mov	r8, r3
 8004852:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004856:	f103 0320 	add.w	r3, r3, #32
 800485a:	6819      	ldr	r1, [r3, #0]
 800485c:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004860:	f103 031c 	add.w	r3, r3, #28
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	f7fc fa27 	bl	8000cb8 <__aeabi_fmul>
 800486a:	4603      	mov	r3, r0
 800486c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004870:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004874:	6811      	ldr	r1, [r2, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fc fa1e 	bl	8000cb8 <__aeabi_fmul>
 800487c:	4603      	mov	r3, r0
 800487e:	4619      	mov	r1, r3
 8004880:	4640      	mov	r0, r8
 8004882:	f7fc f90f 	bl	8000aa4 <__aeabi_fsub>
 8004886:	4603      	mov	r3, r0
 8004888:	4619      	mov	r1, r3
 800488a:	4630      	mov	r0, r6
 800488c:	f7fc fa14 	bl	8000cb8 <__aeabi_fmul>
 8004890:	4603      	mov	r3, r0
 8004892:	461e      	mov	r6, r3
 8004894:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004898:	f103 0320 	add.w	r3, r3, #32
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80048a4:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	4413      	add	r3, r2
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4619      	mov	r1, r3
 80048b0:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80048b4:	f103 0304 	add.w	r3, r3, #4
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	f7fc f8f3 	bl	8000aa4 <__aeabi_fsub>
 80048be:	4603      	mov	r3, r0
 80048c0:	4619      	mov	r1, r3
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7fc f9f8 	bl	8000cb8 <__aeabi_fmul>
 80048c8:	4603      	mov	r3, r0
 80048ca:	461e      	mov	r6, r3
 80048cc:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80048d0:	f103 030c 	add.w	r3, r3, #12
 80048d4:	6819      	ldr	r1, [r3, #0]
 80048d6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80048da:	f103 0310 	add.w	r3, r3, #16
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	f7fc f9ea 	bl	8000cb8 <__aeabi_fmul>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80048ea:	f102 0220 	add.w	r2, r2, #32
 80048ee:	6811      	ldr	r1, [r2, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fc f9e1 	bl	8000cb8 <__aeabi_fmul>
 80048f6:	4603      	mov	r3, r0
 80048f8:	4698      	mov	r8, r3
 80048fa:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80048fe:	f103 0320 	add.w	r3, r3, #32
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800490a:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	4413      	add	r3, r2
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4619      	mov	r1, r3
 8004916:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800491a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	f7fc f8c0 	bl	8000aa4 <__aeabi_fsub>
 8004924:	4603      	mov	r3, r0
 8004926:	4619      	mov	r1, r3
 8004928:	4640      	mov	r0, r8
 800492a:	f7fc f9c5 	bl	8000cb8 <__aeabi_fmul>
 800492e:	4603      	mov	r3, r0
 8004930:	4619      	mov	r1, r3
 8004932:	4630      	mov	r0, r6
 8004934:	f7fc f8b8 	bl	8000aa8 <__addsf3>
 8004938:	4603      	mov	r3, r0
 800493a:	461e      	mov	r6, r3
 800493c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004940:	f103 0308 	add.w	r3, r3, #8
 8004944:	6819      	ldr	r1, [r3, #0]
 8004946:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800494a:	f103 0310 	add.w	r3, r3, #16
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	f7fc f9b2 	bl	8000cb8 <__aeabi_fmul>
 8004954:	4603      	mov	r3, r0
 8004956:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800495a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800495e:	6811      	ldr	r1, [r2, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc f9a9 	bl	8000cb8 <__aeabi_fmul>
 8004966:	4603      	mov	r3, r0
 8004968:	4698      	mov	r8, r3
 800496a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800496e:	f103 0320 	add.w	r3, r3, #32
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800497a:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	4413      	add	r3, r2
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4619      	mov	r1, r3
 8004986:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	f7fc f88a 	bl	8000aa4 <__aeabi_fsub>
 8004990:	4603      	mov	r3, r0
 8004992:	4619      	mov	r1, r3
 8004994:	4640      	mov	r0, r8
 8004996:	f7fc f98f 	bl	8000cb8 <__aeabi_fmul>
 800499a:	4603      	mov	r3, r0
 800499c:	4619      	mov	r1, r3
 800499e:	4630      	mov	r0, r6
 80049a0:	f7fc f880 	bl	8000aa4 <__aeabi_fsub>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4619      	mov	r1, r3
 80049a8:	4628      	mov	r0, r5
 80049aa:	f7fc f985 	bl	8000cb8 <__aeabi_fmul>
 80049ae:	4603      	mov	r3, r0
 80049b0:	461d      	mov	r5, r3
 80049b2:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80049b6:	f103 0310 	add.w	r3, r3, #16
 80049ba:	6819      	ldr	r1, [r3, #0]
 80049bc:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80049c0:	f103 0310 	add.w	r3, r3, #16
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	f7fc f977 	bl	8000cb8 <__aeabi_fmul>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80049d0:	f102 020c 	add.w	r2, r2, #12
 80049d4:	6811      	ldr	r1, [r2, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fc f96e 	bl	8000cb8 <__aeabi_fmul>
 80049dc:	4603      	mov	r3, r0
 80049de:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80049e2:	f102 0208 	add.w	r2, r2, #8
 80049e6:	6811      	ldr	r1, [r2, #0]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fc f965 	bl	8000cb8 <__aeabi_fmul>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80049f4:	f102 021c 	add.w	r2, r2, #28
 80049f8:	6811      	ldr	r1, [r2, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fc f95c 	bl	8000cb8 <__aeabi_fmul>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004a06:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8004a0a:	6811      	ldr	r1, [r2, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fc f953 	bl	8000cb8 <__aeabi_fmul>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004a18:	f102 0220 	add.w	r2, r2, #32
 8004a1c:	6811      	ldr	r1, [r2, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fc f94a 	bl	8000cb8 <__aeabi_fmul>
 8004a24:	4603      	mov	r3, r0
 8004a26:	4619      	mov	r1, r3
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f7fc f9f9 	bl	8000e20 <__aeabi_fdiv>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4619      	mov	r1, r3
 8004a32:	4620      	mov	r0, r4
 8004a34:	f7fc f836 	bl	8000aa4 <__aeabi_fsub>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8004a40:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8004a44:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8004a48:	f102 0220 	add.w	r2, r2, #32
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	f202 729a 	addw	r2, r2, #1946	@ 0x79a
 8004a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8004a56:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004a5a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4619      	mov	r1, r3
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fc f820 	bl	8000aa8 <__addsf3>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	461c      	mov	r4, r3
 8004a6c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004a70:	f103 0308 	add.w	r3, r3, #8
 8004a74:	6819      	ldr	r1, [r3, #0]
 8004a76:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004a7a:	f103 030c 	add.w	r3, r3, #12
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	f7fc f91a 	bl	8000cb8 <__aeabi_fmul>
 8004a84:	4603      	mov	r3, r0
 8004a86:	461d      	mov	r5, r3
 8004a88:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004a8c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8004a90:	6819      	ldr	r1, [r3, #0]
 8004a92:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004a96:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	f7fc f90c 	bl	8000cb8 <__aeabi_fmul>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	461e      	mov	r6, r3
 8004aa4:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004aa8:	f103 0320 	add.w	r3, r3, #32
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004ab2:	f103 031c 	add.w	r3, r3, #28
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	f7fc f8fe 	bl	8000cb8 <__aeabi_fmul>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004ac2:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004ac6:	6811      	ldr	r1, [r2, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fc f8f5 	bl	8000cb8 <__aeabi_fmul>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7fb ffe6 	bl	8000aa4 <__aeabi_fsub>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4619      	mov	r1, r3
 8004adc:	4628      	mov	r0, r5
 8004ade:	f7fc f8eb 	bl	8000cb8 <__aeabi_fmul>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	461d      	mov	r5, r3
 8004ae6:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004aea:	f103 0320 	add.w	r3, r3, #32
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8004af6:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	4413      	add	r3, r2
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4619      	mov	r1, r3
 8004b02:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004b06:	f103 0304 	add.w	r3, r3, #4
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	f7fb ffca 	bl	8000aa4 <__aeabi_fsub>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4619      	mov	r1, r3
 8004b14:	4628      	mov	r0, r5
 8004b16:	f7fc f8cf 	bl	8000cb8 <__aeabi_fmul>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	461d      	mov	r5, r3
 8004b1e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004b22:	f103 030c 	add.w	r3, r3, #12
 8004b26:	6819      	ldr	r1, [r3, #0]
 8004b28:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004b2c:	f103 0310 	add.w	r3, r3, #16
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	f7fc f8c1 	bl	8000cb8 <__aeabi_fmul>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004b3c:	f102 0220 	add.w	r2, r2, #32
 8004b40:	6811      	ldr	r1, [r2, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fc f8b8 	bl	8000cb8 <__aeabi_fmul>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	461e      	mov	r6, r3
 8004b4c:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004b50:	f103 0320 	add.w	r3, r3, #32
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8004b5c:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	4413      	add	r3, r2
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4619      	mov	r1, r3
 8004b68:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004b6c:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	f7fb ff97 	bl	8000aa4 <__aeabi_fsub>
 8004b76:	4603      	mov	r3, r0
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f7fc f89c 	bl	8000cb8 <__aeabi_fmul>
 8004b80:	4603      	mov	r3, r0
 8004b82:	4619      	mov	r1, r3
 8004b84:	4628      	mov	r0, r5
 8004b86:	f7fb ff8f 	bl	8000aa8 <__addsf3>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	461d      	mov	r5, r3
 8004b8e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004b92:	f103 0308 	add.w	r3, r3, #8
 8004b96:	6819      	ldr	r1, [r3, #0]
 8004b98:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004b9c:	f103 0310 	add.w	r3, r3, #16
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	f7fc f889 	bl	8000cb8 <__aeabi_fmul>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004bac:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8004bb0:	6811      	ldr	r1, [r2, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fc f880 	bl	8000cb8 <__aeabi_fmul>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461e      	mov	r6, r3
 8004bbc:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004bc0:	f103 0320 	add.w	r3, r3, #32
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8004bcc:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8004bd0:	6812      	ldr	r2, [r2, #0]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	f7fb ff61 	bl	8000aa4 <__aeabi_fsub>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4619      	mov	r1, r3
 8004be6:	4630      	mov	r0, r6
 8004be8:	f7fc f866 	bl	8000cb8 <__aeabi_fmul>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4619      	mov	r1, r3
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f7fb ff57 	bl	8000aa4 <__aeabi_fsub>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	461d      	mov	r5, r3
 8004bfa:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004bfe:	f103 0308 	add.w	r3, r3, #8
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004c08:	f103 030c 	add.w	r3, r3, #12
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	f7fc f853 	bl	8000cb8 <__aeabi_fmul>
 8004c12:	4603      	mov	r3, r0
 8004c14:	461e      	mov	r6, r3
 8004c16:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004c1a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8004c1e:	6819      	ldr	r1, [r3, #0]
 8004c20:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004c24:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	f7fc f845 	bl	8000cb8 <__aeabi_fmul>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	4698      	mov	r8, r3
 8004c32:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004c36:	f103 0320 	add.w	r3, r3, #32
 8004c3a:	6819      	ldr	r1, [r3, #0]
 8004c3c:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004c40:	f103 031c 	add.w	r3, r3, #28
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	f7fc f837 	bl	8000cb8 <__aeabi_fmul>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004c50:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004c54:	6811      	ldr	r1, [r2, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fc f82e 	bl	8000cb8 <__aeabi_fmul>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4640      	mov	r0, r8
 8004c62:	f7fb ff1f 	bl	8000aa4 <__aeabi_fsub>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f7fc f824 	bl	8000cb8 <__aeabi_fmul>
 8004c70:	4603      	mov	r3, r0
 8004c72:	461e      	mov	r6, r3
 8004c74:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004c78:	f103 0320 	add.w	r3, r3, #32
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8004c84:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004c94:	f103 0304 	add.w	r3, r3, #4
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	f7fb ff03 	bl	8000aa4 <__aeabi_fsub>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f7fc f808 	bl	8000cb8 <__aeabi_fmul>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	461e      	mov	r6, r3
 8004cac:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004cb0:	f103 030c 	add.w	r3, r3, #12
 8004cb4:	6819      	ldr	r1, [r3, #0]
 8004cb6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004cba:	f103 0310 	add.w	r3, r3, #16
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	f7fb fffa 	bl	8000cb8 <__aeabi_fmul>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004cca:	f102 0220 	add.w	r2, r2, #32
 8004cce:	6811      	ldr	r1, [r2, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fb fff1 	bl	8000cb8 <__aeabi_fmul>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4698      	mov	r8, r3
 8004cda:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004cde:	f103 0320 	add.w	r3, r3, #32
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8004cea:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004cfa:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	f7fb fed0 	bl	8000aa4 <__aeabi_fsub>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4619      	mov	r1, r3
 8004d08:	4640      	mov	r0, r8
 8004d0a:	f7fb ffd5 	bl	8000cb8 <__aeabi_fmul>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	4619      	mov	r1, r3
 8004d12:	4630      	mov	r0, r6
 8004d14:	f7fb fec8 	bl	8000aa8 <__addsf3>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	461e      	mov	r6, r3
 8004d1c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004d20:	f103 0308 	add.w	r3, r3, #8
 8004d24:	6819      	ldr	r1, [r3, #0]
 8004d26:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004d2a:	f103 0310 	add.w	r3, r3, #16
 8004d2e:	6818      	ldr	r0, [r3, #0]
 8004d30:	f7fb ffc2 	bl	8000cb8 <__aeabi_fmul>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004d3a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8004d3e:	6811      	ldr	r1, [r2, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fb ffb9 	bl	8000cb8 <__aeabi_fmul>
 8004d46:	4603      	mov	r3, r0
 8004d48:	4698      	mov	r8, r3
 8004d4a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004d4e:	f103 0320 	add.w	r3, r3, #32
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8004d5a:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8004d5e:	6812      	ldr	r2, [r2, #0]
 8004d60:	4413      	add	r3, r2
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4619      	mov	r1, r3
 8004d66:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	f7fb fe9a 	bl	8000aa4 <__aeabi_fsub>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4619      	mov	r1, r3
 8004d74:	4640      	mov	r0, r8
 8004d76:	f7fb ff9f 	bl	8000cb8 <__aeabi_fmul>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4630      	mov	r0, r6
 8004d80:	f7fb fe90 	bl	8000aa4 <__aeabi_fsub>
 8004d84:	4603      	mov	r3, r0
 8004d86:	4619      	mov	r1, r3
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f7fb ff95 	bl	8000cb8 <__aeabi_fmul>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	4619      	mov	r1, r3
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7fb ff90 	bl	8000cb8 <__aeabi_fmul>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461c      	mov	r4, r3
 8004d9c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004da0:	f103 0310 	add.w	r3, r3, #16
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004daa:	f103 0310 	add.w	r3, r3, #16
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	f7fb ff82 	bl	8000cb8 <__aeabi_fmul>
 8004db4:	4603      	mov	r3, r0
 8004db6:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004dba:	f102 020c 	add.w	r2, r2, #12
 8004dbe:	6811      	ldr	r1, [r2, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fb ff79 	bl	8000cb8 <__aeabi_fmul>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004dcc:	f102 020c 	add.w	r2, r2, #12
 8004dd0:	6811      	ldr	r1, [r2, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fb ff70 	bl	8000cb8 <__aeabi_fmul>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004dde:	f102 0208 	add.w	r2, r2, #8
 8004de2:	6811      	ldr	r1, [r2, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fb ff67 	bl	8000cb8 <__aeabi_fmul>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8004df0:	f102 0208 	add.w	r2, r2, #8
 8004df4:	6811      	ldr	r1, [r2, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fb ff5e 	bl	8000cb8 <__aeabi_fmul>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	461d      	mov	r5, r3
 8004e00:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004e04:	f103 031c 	add.w	r3, r3, #28
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004e0e:	f103 031c 	add.w	r3, r3, #28
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	f7fb ff50 	bl	8000cb8 <__aeabi_fmul>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004e1e:	f102 021c 	add.w	r2, r2, #28
 8004e22:	6811      	ldr	r1, [r2, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fb ff47 	bl	8000cb8 <__aeabi_fmul>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f7fb ff42 	bl	8000cb8 <__aeabi_fmul>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004e3a:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8004e3e:	6811      	ldr	r1, [r2, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fb ff39 	bl	8000cb8 <__aeabi_fmul>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004e4c:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8004e50:	6811      	ldr	r1, [r2, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fb ff30 	bl	8000cb8 <__aeabi_fmul>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	461d      	mov	r5, r3
 8004e5c:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004e60:	f103 0320 	add.w	r3, r3, #32
 8004e64:	6819      	ldr	r1, [r3, #0]
 8004e66:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004e6a:	f103 0320 	add.w	r3, r3, #32
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	f7fb ff22 	bl	8000cb8 <__aeabi_fmul>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4619      	mov	r1, r3
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f7fb ff1d 	bl	8000cb8 <__aeabi_fmul>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4619      	mov	r1, r3
 8004e82:	4620      	mov	r0, r4
 8004e84:	f7fb ffcc 	bl	8000e20 <__aeabi_fdiv>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461c      	mov	r4, r3
 8004e8c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004e90:	f103 0308 	add.w	r3, r3, #8
 8004e94:	6819      	ldr	r1, [r3, #0]
 8004e96:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004e9a:	f103 030c 	add.w	r3, r3, #12
 8004e9e:	6818      	ldr	r0, [r3, #0]
 8004ea0:	f7fb ff0a 	bl	8000cb8 <__aeabi_fmul>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461d      	mov	r5, r3
 8004ea8:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004eac:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8004eb0:	6819      	ldr	r1, [r3, #0]
 8004eb2:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004eb6:	f103 031c 	add.w	r3, r3, #28
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	f7fb fefc 	bl	8000cb8 <__aeabi_fmul>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	461e      	mov	r6, r3
 8004ec4:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004ec8:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004ecc:	6819      	ldr	r1, [r3, #0]
 8004ece:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004ed2:	f103 0320 	add.w	r3, r3, #32
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	f7fb feee 	bl	8000cb8 <__aeabi_fmul>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004ee2:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004ee6:	6811      	ldr	r1, [r2, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fee5 	bl	8000cb8 <__aeabi_fmul>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	f7fb fdd8 	bl	8000aa8 <__addsf3>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	4619      	mov	r1, r3
 8004efc:	4628      	mov	r0, r5
 8004efe:	f7fb fedb 	bl	8000cb8 <__aeabi_fmul>
 8004f02:	4603      	mov	r3, r0
 8004f04:	461d      	mov	r5, r3
 8004f06:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004f0a:	f103 0320 	add.w	r3, r3, #32
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8004f16:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4619      	mov	r1, r3
 8004f22:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004f26:	f103 0304 	add.w	r3, r3, #4
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	f7fb fdba 	bl	8000aa4 <__aeabi_fsub>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4619      	mov	r1, r3
 8004f34:	4628      	mov	r0, r5
 8004f36:	f7fb febf 	bl	8000cb8 <__aeabi_fmul>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	461d      	mov	r5, r3
 8004f3e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004f42:	f103 0308 	add.w	r3, r3, #8
 8004f46:	6819      	ldr	r1, [r3, #0]
 8004f48:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004f4c:	f103 0310 	add.w	r3, r3, #16
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	f7fb feb1 	bl	8000cb8 <__aeabi_fmul>
 8004f56:	4603      	mov	r3, r0
 8004f58:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8004f5c:	f102 021c 	add.w	r2, r2, #28
 8004f60:	6811      	ldr	r1, [r2, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fb fea8 	bl	8000cb8 <__aeabi_fmul>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461e      	mov	r6, r3
 8004f6c:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8004f70:	f103 0320 	add.w	r3, r3, #32
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8004f7c:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	4413      	add	r3, r2
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	f7fb fd89 	bl	8000aa4 <__aeabi_fsub>
 8004f92:	4603      	mov	r3, r0
 8004f94:	4619      	mov	r1, r3
 8004f96:	4630      	mov	r0, r6
 8004f98:	f7fb fe8e 	bl	8000cb8 <__aeabi_fmul>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f7fb fd7f 	bl	8000aa4 <__aeabi_fsub>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fb fd7c 	bl	8000aa8 <__addsf3>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	461d      	mov	r5, r3
 8004fb4:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004fb8:	f103 0308 	add.w	r3, r3, #8
 8004fbc:	6819      	ldr	r1, [r3, #0]
 8004fbe:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8004fc2:	f103 030c 	add.w	r3, r3, #12
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	f7fb fe76 	bl	8000cb8 <__aeabi_fmul>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	461e      	mov	r6, r3
 8004fd0:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004fd4:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8004fd8:	6819      	ldr	r1, [r3, #0]
 8004fda:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004fde:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	f7fb fe68 	bl	8000cb8 <__aeabi_fmul>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	4698      	mov	r8, r3
 8004fec:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004ff0:	f103 0320 	add.w	r3, r3, #32
 8004ff4:	6819      	ldr	r1, [r3, #0]
 8004ff6:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8004ffa:	f103 031c 	add.w	r3, r3, #28
 8004ffe:	6818      	ldr	r0, [r3, #0]
 8005000:	f7fb fe5a 	bl	8000cb8 <__aeabi_fmul>
 8005004:	4603      	mov	r3, r0
 8005006:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800500a:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800500e:	6811      	ldr	r1, [r2, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fb fe51 	bl	8000cb8 <__aeabi_fmul>
 8005016:	4603      	mov	r3, r0
 8005018:	4619      	mov	r1, r3
 800501a:	4640      	mov	r0, r8
 800501c:	f7fb fd42 	bl	8000aa4 <__aeabi_fsub>
 8005020:	4603      	mov	r3, r0
 8005022:	4619      	mov	r1, r3
 8005024:	4630      	mov	r0, r6
 8005026:	f7fb fe47 	bl	8000cb8 <__aeabi_fmul>
 800502a:	4603      	mov	r3, r0
 800502c:	461e      	mov	r6, r3
 800502e:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005032:	f103 0320 	add.w	r3, r3, #32
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 800503e:	f2a2 42cc 	subw	r2, r2, #1228	@ 0x4cc
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	4413      	add	r3, r2
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4619      	mov	r1, r3
 800504a:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800504e:	f103 0304 	add.w	r3, r3, #4
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	f7fb fd26 	bl	8000aa4 <__aeabi_fsub>
 8005058:	4603      	mov	r3, r0
 800505a:	4619      	mov	r1, r3
 800505c:	4630      	mov	r0, r6
 800505e:	f7fb fe2b 	bl	8000cb8 <__aeabi_fmul>
 8005062:	4603      	mov	r3, r0
 8005064:	461e      	mov	r6, r3
 8005066:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800506a:	f103 030c 	add.w	r3, r3, #12
 800506e:	6819      	ldr	r1, [r3, #0]
 8005070:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8005074:	f103 0310 	add.w	r3, r3, #16
 8005078:	6818      	ldr	r0, [r3, #0]
 800507a:	f7fb fe1d 	bl	8000cb8 <__aeabi_fmul>
 800507e:	4603      	mov	r3, r0
 8005080:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8005084:	f102 0220 	add.w	r2, r2, #32
 8005088:	6811      	ldr	r1, [r2, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f7fb fe14 	bl	8000cb8 <__aeabi_fmul>
 8005090:	4603      	mov	r3, r0
 8005092:	4698      	mov	r8, r3
 8005094:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005098:	f103 0320 	add.w	r3, r3, #32
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 80050a4:	f2a2 42d4 	subw	r2, r2, #1236	@ 0x4d4
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	4413      	add	r3, r2
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4619      	mov	r1, r3
 80050b0:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80050b4:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	f7fb fcf3 	bl	8000aa4 <__aeabi_fsub>
 80050be:	4603      	mov	r3, r0
 80050c0:	4619      	mov	r1, r3
 80050c2:	4640      	mov	r0, r8
 80050c4:	f7fb fdf8 	bl	8000cb8 <__aeabi_fmul>
 80050c8:	4603      	mov	r3, r0
 80050ca:	4619      	mov	r1, r3
 80050cc:	4630      	mov	r0, r6
 80050ce:	f7fb fceb 	bl	8000aa8 <__addsf3>
 80050d2:	4603      	mov	r3, r0
 80050d4:	461e      	mov	r6, r3
 80050d6:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80050da:	f103 0308 	add.w	r3, r3, #8
 80050de:	6819      	ldr	r1, [r3, #0]
 80050e0:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80050e4:	f103 0310 	add.w	r3, r3, #16
 80050e8:	6818      	ldr	r0, [r3, #0]
 80050ea:	f7fb fde5 	bl	8000cb8 <__aeabi_fmul>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80050f4:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80050f8:	6811      	ldr	r1, [r2, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fb fddc 	bl	8000cb8 <__aeabi_fmul>
 8005100:	4603      	mov	r3, r0
 8005102:	4698      	mov	r8, r3
 8005104:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005108:	f103 0320 	add.w	r3, r3, #32
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8005114:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8005118:	6812      	ldr	r2, [r2, #0]
 800511a:	4413      	add	r3, r2
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4619      	mov	r1, r3
 8005120:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	f7fb fcbd 	bl	8000aa4 <__aeabi_fsub>
 800512a:	4603      	mov	r3, r0
 800512c:	4619      	mov	r1, r3
 800512e:	4640      	mov	r0, r8
 8005130:	f7fb fdc2 	bl	8000cb8 <__aeabi_fmul>
 8005134:	4603      	mov	r3, r0
 8005136:	4619      	mov	r1, r3
 8005138:	4630      	mov	r0, r6
 800513a:	f7fb fcb3 	bl	8000aa4 <__aeabi_fsub>
 800513e:	4603      	mov	r3, r0
 8005140:	4619      	mov	r1, r3
 8005142:	4628      	mov	r0, r5
 8005144:	f7fb fdb8 	bl	8000cb8 <__aeabi_fmul>
 8005148:	4603      	mov	r3, r0
 800514a:	461d      	mov	r5, r3
 800514c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8005150:	f103 0310 	add.w	r3, r3, #16
 8005154:	6819      	ldr	r1, [r3, #0]
 8005156:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800515a:	f103 0310 	add.w	r3, r3, #16
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	f7fb fdaa 	bl	8000cb8 <__aeabi_fmul>
 8005164:	4603      	mov	r3, r0
 8005166:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800516a:	f102 020c 	add.w	r2, r2, #12
 800516e:	6811      	ldr	r1, [r2, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f7fb fda1 	bl	8000cb8 <__aeabi_fmul>
 8005176:	4603      	mov	r3, r0
 8005178:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800517c:	f102 020c 	add.w	r2, r2, #12
 8005180:	6811      	ldr	r1, [r2, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fb fd98 	bl	8000cb8 <__aeabi_fmul>
 8005188:	4603      	mov	r3, r0
 800518a:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800518e:	f102 0208 	add.w	r2, r2, #8
 8005192:	6811      	ldr	r1, [r2, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	f7fb fd8f 	bl	8000cb8 <__aeabi_fmul>
 800519a:	4603      	mov	r3, r0
 800519c:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80051a0:	f102 0208 	add.w	r2, r2, #8
 80051a4:	6811      	ldr	r1, [r2, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fb fd86 	bl	8000cb8 <__aeabi_fmul>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80051b2:	f102 021c 	add.w	r2, r2, #28
 80051b6:	6811      	ldr	r1, [r2, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fb fd7d 	bl	8000cb8 <__aeabi_fmul>
 80051be:	4603      	mov	r3, r0
 80051c0:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80051c4:	f102 021c 	add.w	r2, r2, #28
 80051c8:	6811      	ldr	r1, [r2, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fb fd74 	bl	8000cb8 <__aeabi_fmul>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80051d6:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80051da:	6811      	ldr	r1, [r2, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fb fd6b 	bl	8000cb8 <__aeabi_fmul>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80051e8:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80051ec:	6811      	ldr	r1, [r2, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fb fd62 	bl	8000cb8 <__aeabi_fmul>
 80051f4:	4603      	mov	r3, r0
 80051f6:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80051fa:	f102 0220 	add.w	r2, r2, #32
 80051fe:	6811      	ldr	r1, [r2, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7fb fd59 	bl	8000cb8 <__aeabi_fmul>
 8005206:	4603      	mov	r3, r0
 8005208:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800520c:	f102 0220 	add.w	r2, r2, #32
 8005210:	6811      	ldr	r1, [r2, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f7fb fd50 	bl	8000cb8 <__aeabi_fmul>
 8005218:	4603      	mov	r3, r0
 800521a:	4619      	mov	r1, r3
 800521c:	4628      	mov	r0, r5
 800521e:	f7fb fdff 	bl	8000e20 <__aeabi_fdiv>
 8005222:	4603      	mov	r3, r0
 8005224:	4619      	mov	r1, r3
 8005226:	4620      	mov	r0, r4
 8005228:	f7fb fc3e 	bl	8000aa8 <__addsf3>
 800522c:	4603      	mov	r3, r0
 800522e:	4619      	mov	r1, r3
 8005230:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005234:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8005238:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800523c:	f102 0220 	add.w	r2, r2, #32
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	f502 620b 	add.w	r2, r2, #2224	@ 0x8b0
 8005246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int i=0; i < tam; i++)
 800524a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800524e:	f103 0320 	add.w	r3, r3, #32
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3301      	adds	r3, #1
 8005256:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800525a:	f102 0220 	add.w	r2, r2, #32
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005264:	f103 0320 	add.w	r3, r3, #32
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 800526e:	f6fc a91d 	blt.w	80014ac <NLLS+0x33c>
		}

		J = 0;
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800527a:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 800527e:	6013      	str	r3, [r2, #0]

		for(int i=0; i < tam; i++)
 8005280:	2300      	movs	r3, #0
 8005282:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8005286:	f102 021c 	add.w	r2, r2, #28
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	e03c      	b.n	8005308 <NLLS+0x4198>
		{
			J += (e[i] * e[i])/2;
 800528e:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8005292:	f103 0318 	add.w	r3, r3, #24
 8005296:	f6a3 1354 	subw	r3, r3, #2388	@ 0x954
 800529a:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800529e:	f102 021c 	add.w	r2, r2, #28
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80052a8:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 80052ac:	f103 0318 	add.w	r3, r3, #24
 80052b0:	f6a3 1354 	subw	r3, r3, #2388	@ 0x954
 80052b4:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80052b8:	f102 021c 	add.w	r2, r2, #28
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c2:	4619      	mov	r1, r3
 80052c4:	f7fb fcf8 	bl	8000cb8 <__aeabi_fmul>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7fb fda6 	bl	8000e20 <__aeabi_fdiv>
 80052d4:	4603      	mov	r3, r0
 80052d6:	4619      	mov	r1, r3
 80052d8:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80052dc:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	f7fb fbe1 	bl	8000aa8 <__addsf3>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80052ec:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80052f0:	6013      	str	r3, [r2, #0]
		for(int i=0; i < tam; i++)
 80052f2:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80052f6:	f103 031c 	add.w	r3, r3, #28
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3301      	adds	r3, #1
 80052fe:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8005302:	f102 021c 	add.w	r2, r2, #28
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800530c:	f103 031c 	add.w	r3, r3, #28
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8005316:	dbba      	blt.n	800528e <NLLS+0x411e>
		}

		if(passo < 2)
 8005318:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800531c:	f103 0317 	add.w	r3, r3, #23
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d80a      	bhi.n	800533c <NLLS+0x41cc>
		{
			error_ant = J;
 8005326:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800532a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8005334:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e052      	b.n	80053e2 <NLLS+0x4272>
		}
		else
		{
			delta_J = 100*fabs(J-error_ant)/J;
 800533c:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005340:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8005344:	6819      	ldr	r1, [r3, #0]
 8005346:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800534a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	f7fb fba8 	bl	8000aa4 <__aeabi_fsub>
 8005354:	4603      	mov	r3, r0
 8005356:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800535a:	4618      	mov	r0, r3
 800535c:	f7fb f85c 	bl	8000418 <__aeabi_f2d>
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	4b94      	ldr	r3, [pc, #592]	@ (80055b8 <NLLS+0x4448>)
 8005366:	f7fb f8af 	bl	80004c8 <__aeabi_dmul>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4614      	mov	r4, r2
 8005370:	461d      	mov	r5, r3
 8005372:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005376:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	f7fb f84c 	bl	8000418 <__aeabi_f2d>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4620      	mov	r0, r4
 8005386:	4629      	mov	r1, r5
 8005388:	f7fb f9c8 	bl	800071c <__aeabi_ddiv>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4610      	mov	r0, r2
 8005392:	4619      	mov	r1, r3
 8005394:	f7fb fb32 	bl	80009fc <__aeabi_d2f>
 8005398:	4603      	mov	r3, r0
 800539a:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 800539e:	f102 0218 	add.w	r2, r2, #24
 80053a2:	6013      	str	r3, [r2, #0]
			if(delta_J < 0.05)
 80053a4:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80053a8:	f103 0318 	add.w	r3, r3, #24
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	f7fb f833 	bl	8000418 <__aeabi_f2d>
 80053b2:	a37f      	add	r3, pc, #508	@ (adr r3, 80055b0 <NLLS+0x4440>)
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f7fb faf8 	bl	80009ac <__aeabi_dcmplt>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <NLLS+0x425e>
			{
				loop = 0;
 80053c2:	2300      	movs	r3, #0
 80053c4:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80053c8:	f102 0216 	add.w	r2, r2, #22
 80053cc:	7013      	strb	r3, [r2, #0]
			}
			error_ant = J;
 80053ce:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80053d2:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80053dc:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80053e0:	6013      	str	r3, [r2, #0]
		}

		for(int i = 0; i < N; i++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80053e8:	f102 0218 	add.w	r2, r2, #24
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e0a7      	b.n	8005540 <NLLS+0x43d0>
		{
			for(int j = 0; j < N; j++)
 80053f0:	2300      	movs	r3, #0
 80053f2:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80053f6:	f102 0214 	add.w	r2, r2, #20
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	e08d      	b.n	800551a <NLLS+0x43aa>
			{
				Ht_H[i][j] = 0;
 80053fe:	496f      	ldr	r1, [pc, #444]	@ (80055bc <NLLS+0x444c>)
 8005400:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005404:	f103 0318 	add.w	r3, r3, #24
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4613      	mov	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4413      	add	r3, r2
 8005410:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8005414:	f102 0214 	add.w	r2, r2, #20
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	4413      	add	r3, r2
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int k = 0; k < tam; k++)
 8005424:	2300      	movs	r3, #0
 8005426:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800542a:	f102 0210 	add.w	r2, r2, #16
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	e060      	b.n	80054f4 <NLLS+0x4384>
				{
					Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 8005432:	4962      	ldr	r1, [pc, #392]	@ (80055bc <NLLS+0x444c>)
 8005434:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005438:	f103 0318 	add.w	r3, r3, #24
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	4613      	mov	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4413      	add	r3, r2
 8005444:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8005448:	f102 0214 	add.w	r2, r2, #20
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	4413      	add	r3, r2
 8005450:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8005454:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005458:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800545c:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8005460:	f102 0218 	add.w	r2, r2, #24
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800546a:	fb02 f101 	mul.w	r1, r2, r1
 800546e:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8005472:	f102 0210 	add.w	r2, r2, #16
 8005476:	6812      	ldr	r2, [r2, #0]
 8005478:	440a      	add	r2, r1
 800547a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800547e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005482:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8005486:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800548a:	f102 0214 	add.w	r2, r2, #20
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8005494:	fb02 f101 	mul.w	r1, r2, r1
 8005498:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800549c:	f102 0210 	add.w	r2, r2, #16
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	440a      	add	r2, r1
 80054a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a8:	4619      	mov	r1, r3
 80054aa:	f7fb fc05 	bl	8000cb8 <__aeabi_fmul>
 80054ae:	4603      	mov	r3, r0
 80054b0:	4619      	mov	r1, r3
 80054b2:	4620      	mov	r0, r4
 80054b4:	f7fb faf8 	bl	8000aa8 <__addsf3>
 80054b8:	4603      	mov	r3, r0
 80054ba:	4618      	mov	r0, r3
 80054bc:	493f      	ldr	r1, [pc, #252]	@ (80055bc <NLLS+0x444c>)
 80054be:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80054c2:	f103 0318 	add.w	r3, r3, #24
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	4413      	add	r3, r2
 80054ce:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80054d2:	f102 0214 	add.w	r2, r2, #20
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	4413      	add	r3, r2
 80054da:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for(int k = 0; k < tam; k++)
 80054de:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80054e2:	f103 0310 	add.w	r3, r3, #16
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3301      	adds	r3, #1
 80054ea:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80054ee:	f102 0210 	add.w	r2, r2, #16
 80054f2:	6013      	str	r3, [r2, #0]
 80054f4:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80054f8:	f103 0310 	add.w	r3, r3, #16
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8005502:	db96      	blt.n	8005432 <NLLS+0x42c2>
			for(int j = 0; j < N; j++)
 8005504:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005508:	f103 0314 	add.w	r3, r3, #20
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3301      	adds	r3, #1
 8005510:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8005514:	f102 0214 	add.w	r2, r2, #20
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800551e:	f103 0314 	add.w	r3, r3, #20
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b08      	cmp	r3, #8
 8005526:	f77f af6a 	ble.w	80053fe <NLLS+0x428e>
		for(int i = 0; i < N; i++)
 800552a:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800552e:	f103 0318 	add.w	r3, r3, #24
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800553a:	f102 0218 	add.w	r2, r2, #24
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005544:	f103 0318 	add.w	r3, r3, #24
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b08      	cmp	r3, #8
 800554c:	f77f af50 	ble.w	80053f0 <NLLS+0x4280>
				}
			}
		}

		inverter_matriz(Ht_H, inv);
 8005550:	491b      	ldr	r1, [pc, #108]	@ (80055c0 <NLLS+0x4450>)
 8005552:	481a      	ldr	r0, [pc, #104]	@ (80055bc <NLLS+0x444c>)
 8005554:	f7fb fd00 	bl	8000f58 <inverter_matriz>

		for(int i = 0; i < N; i++)
 8005558:	2300      	movs	r3, #0
 800555a:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800555e:	f102 020c 	add.w	r2, r2, #12
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	e0b5      	b.n	80056d2 <NLLS+0x4562>
		{
			for(int j = 0; j < tam; j++)
 8005566:	2300      	movs	r3, #0
 8005568:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800556c:	f102 0208 	add.w	r2, r2, #8
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	e09a      	b.n	80056aa <NLLS+0x453a>
			{
				mul_mat[i][j] = 0;
 8005574:	4913      	ldr	r1, [pc, #76]	@ (80055c4 <NLLS+0x4454>)
 8005576:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800557a:	f103 030c 	add.w	r3, r3, #12
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f44f 728b 	mov.w	r2, #278	@ 0x116
 8005584:	fb03 f202 	mul.w	r2, r3, r2
 8005588:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800558c:	f103 0308 	add.w	r3, r3, #8
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4413      	add	r3, r2
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int k = 0; k < N; k++)
 800559c:	2300      	movs	r3, #0
 800559e:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80055a2:	f102 0204 	add.w	r2, r2, #4
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	e06d      	b.n	8005686 <NLLS+0x4516>
 80055aa:	bf00      	nop
 80055ac:	f3af 8000 	nop.w
 80055b0:	9999999a 	.word	0x9999999a
 80055b4:	3fa99999 	.word	0x3fa99999
 80055b8:	40590000 	.word	0x40590000
 80055bc:	20001a38 	.word	0x20001a38
 80055c0:	20001ba0 	.word	0x20001ba0
 80055c4:	20001ce4 	.word	0x20001ce4
				{
					mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 80055c8:	497c      	ldr	r1, [pc, #496]	@ (80057bc <NLLS+0x464c>)
 80055ca:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80055ce:	f103 030c 	add.w	r3, r3, #12
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f44f 728b 	mov.w	r2, #278	@ 0x116
 80055d8:	fb03 f202 	mul.w	r2, r3, r2
 80055dc:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80055e0:	f103 0308 	add.w	r3, r3, #8
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4413      	add	r3, r2
 80055e8:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80055ec:	4974      	ldr	r1, [pc, #464]	@ (80057c0 <NLLS+0x4650>)
 80055ee:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80055f2:	f103 030c 	add.w	r3, r3, #12
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	4413      	add	r3, r2
 80055fe:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8005602:	f102 0204 	add.w	r2, r2, #4
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	4413      	add	r3, r2
 800560a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800560e:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005612:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 8005616:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800561a:	f102 0204 	add.w	r2, r2, #4
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8005624:	fb02 f101 	mul.w	r1, r2, r1
 8005628:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800562c:	f102 0208 	add.w	r2, r2, #8
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	440a      	add	r2, r1
 8005634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005638:	4619      	mov	r1, r3
 800563a:	f7fb fb3d 	bl	8000cb8 <__aeabi_fmul>
 800563e:	4603      	mov	r3, r0
 8005640:	4619      	mov	r1, r3
 8005642:	4620      	mov	r0, r4
 8005644:	f7fb fa30 	bl	8000aa8 <__addsf3>
 8005648:	4603      	mov	r3, r0
 800564a:	4618      	mov	r0, r3
 800564c:	495b      	ldr	r1, [pc, #364]	@ (80057bc <NLLS+0x464c>)
 800564e:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005652:	f103 030c 	add.w	r3, r3, #12
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f44f 728b 	mov.w	r2, #278	@ 0x116
 800565c:	fb03 f202 	mul.w	r2, r3, r2
 8005660:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005664:	f103 0308 	add.w	r3, r3, #8
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4413      	add	r3, r2
 800566c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				for(int k = 0; k < N; k++)
 8005670:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005674:	f103 0304 	add.w	r3, r3, #4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8005680:	f102 0204 	add.w	r2, r2, #4
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800568a:	f103 0304 	add.w	r3, r3, #4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b08      	cmp	r3, #8
 8005692:	dd99      	ble.n	80055c8 <NLLS+0x4458>
			for(int j = 0; j < tam; j++)
 8005694:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005698:	f103 0308 	add.w	r3, r3, #8
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3301      	adds	r3, #1
 80056a0:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80056a4:	f102 0208 	add.w	r2, r2, #8
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80056ae:	f103 0308 	add.w	r3, r3, #8
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 80056b8:	f6ff af5c 	blt.w	8005574 <NLLS+0x4404>
		for(int i = 0; i < N; i++)
 80056bc:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80056c0:	f103 030c 	add.w	r3, r3, #12
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3301      	adds	r3, #1
 80056c8:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80056cc:	f102 020c 	add.w	r2, r2, #12
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80056d6:	f103 030c 	add.w	r3, r3, #12
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b08      	cmp	r3, #8
 80056de:	f77f af42 	ble.w	8005566 <NLLS+0x43f6>
				}
			}
		}

		for(int i = 0; i < N; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e05b      	b.n	80057a4 <NLLS+0x4634>
		{
			Ht_e[i] = 0;
 80056ec:	4a35      	ldr	r2, [pc, #212]	@ (80057c4 <NLLS+0x4654>)
 80056ee:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f04f 0100 	mov.w	r1, #0
 80056f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 0; j < tam; j++)
 80056fc:	2300      	movs	r3, #0
 80056fe:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8005702:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	e03d      	b.n	8005786 <NLLS+0x4616>
			{
				Ht_e[i] += mul_mat[i][j]*e[j];
 800570a:	4a2e      	ldr	r2, [pc, #184]	@ (80057c4 <NLLS+0x4654>)
 800570c:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005716:	4929      	ldr	r1, [pc, #164]	@ (80057bc <NLLS+0x464c>)
 8005718:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f44f 728b 	mov.w	r2, #278	@ 0x116
 8005722:	fb03 f202 	mul.w	r2, r3, r2
 8005726:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800572a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4413      	add	r3, r2
 8005732:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8005736:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 800573a:	f103 0318 	add.w	r3, r3, #24
 800573e:	f6a3 1354 	subw	r3, r3, #2388	@ 0x954
 8005742:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8005746:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005750:	4619      	mov	r1, r3
 8005752:	f7fb fab1 	bl	8000cb8 <__aeabi_fmul>
 8005756:	4603      	mov	r3, r0
 8005758:	4619      	mov	r1, r3
 800575a:	4620      	mov	r0, r4
 800575c:	f7fb f9a4 	bl	8000aa8 <__addsf3>
 8005760:	4603      	mov	r3, r0
 8005762:	4619      	mov	r1, r3
 8005764:	4a17      	ldr	r2, [pc, #92]	@ (80057c4 <NLLS+0x4654>)
 8005766:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int j = 0; j < tam; j++)
 8005770:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8005774:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8005780:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800578a:	f103 033c 	add.w	r3, r3, #60	@ 0x3c
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8005794:	dbb9      	blt.n	800570a <NLLS+0x459a>
		for(int i = 0; i < N; i++)
 8005796:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3301      	adds	r3, #1
 800579e:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	f507 5352 	add.w	r3, r7, #13440	@ 0x3480
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	dd9e      	ble.n	80056ec <NLLS+0x457c>
			}
		}

		for(int i = 0; i < N; i++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 80057b4:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	e038      	b.n	800582e <NLLS+0x46be>
 80057bc:	20001ce4 	.word	0x20001ce4
 80057c0:	20001ba0 	.word	0x20001ba0
 80057c4:	20001b7c 	.word	0x20001b7c
		{
			p0[i] += Ht_e[i];
 80057c8:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80057cc:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	f503 5353 	add.w	r3, r3, #13504	@ 0x34c0
 80057d8:	f103 0318 	add.w	r3, r3, #24
 80057dc:	443b      	add	r3, r7
 80057de:	f853 2ca4 	ldr.w	r2, [r3, #-164]
 80057e2:	495a      	ldr	r1, [pc, #360]	@ (800594c <NLLS+0x47dc>)
 80057e4:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 80057e8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057f2:	4619      	mov	r1, r3
 80057f4:	4610      	mov	r0, r2
 80057f6:	f7fb f957 	bl	8000aa8 <__addsf3>
 80057fa:	4603      	mov	r3, r0
 80057fc:	461a      	mov	r2, r3
 80057fe:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8005802:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	f503 5353 	add.w	r3, r3, #13504	@ 0x34c0
 800580e:	f103 0318 	add.w	r3, r3, #24
 8005812:	443b      	add	r3, r7
 8005814:	f843 2ca4 	str.w	r2, [r3, #-164]
		for(int i = 0; i < N; i++)
 8005818:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 800581c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3301      	adds	r3, #1
 8005824:	f507 5251 	add.w	r2, r7, #13376	@ 0x3440
 8005828:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	f507 5351 	add.w	r3, r7, #13376	@ 0x3440
 8005832:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b08      	cmp	r3, #8
 800583a:	ddc5      	ble.n	80057c8 <NLLS+0x4658>
		}

		passo++;
 800583c:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8005840:	f103 0317 	add.w	r3, r3, #23
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	3301      	adds	r3, #1
 8005848:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 800584c:	f102 0217 	add.w	r2, r2, #23
 8005850:	7013      	strb	r3, [r2, #0]
	while(loop == 1)
 8005852:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8005856:	f103 0316 	add.w	r3, r3, #22
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b01      	cmp	r3, #1
 800585e:	f43b acee 	beq.w	800123e <NLLS+0xce>
	}
    p[0] = sx;
 8005862:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005866:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8005870:	f102 0210 	add.w	r2, r2, #16
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8005878:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 800587c:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3304      	adds	r3, #4
 8005884:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 8005888:	f102 020c 	add.w	r2, r2, #12
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 8005890:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005894:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80058a0:	f102 0208 	add.w	r2, r2, #8
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 80058a8:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80058ac:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	330c      	adds	r3, #12
 80058b4:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80058b8:	f102 0204 	add.w	r2, r2, #4
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	601a      	str	r2, [r3, #0]
    p[4] = by;
 80058c0:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80058c4:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3310      	adds	r3, #16
 80058cc:	f507 5253 	add.w	r2, r7, #13504	@ 0x34c0
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 80058d4:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80058d8:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3314      	adds	r3, #20
 80058e0:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80058e4:	f102 023c 	add.w	r2, r2, #60	@ 0x3c
 80058e8:	6812      	ldr	r2, [r2, #0]
 80058ea:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 80058ec:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80058f0:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3318      	adds	r3, #24
 80058f8:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 80058fc:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 8005904:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005908:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	331c      	adds	r3, #28
 8005910:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 8005914:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 800591c:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8005920:	f5a3 639b 	sub.w	r3, r3, #1240	@ 0x4d8
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3320      	adds	r3, #32
 8005928:	f507 5252 	add.w	r2, r7, #13440	@ 0x3480
 800592c:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	601a      	str	r2, [r3, #0]

    return passo;
 8005934:	f507 5353 	add.w	r3, r7, #13504	@ 0x34c0
 8005938:	f103 0317 	add.w	r3, r3, #23
 800593c:	781b      	ldrb	r3, [r3, #0]
}
 800593e:	4618      	mov	r0, r3
 8005940:	f507 5753 	add.w	r7, r7, #13504	@ 0x34c0
 8005944:	371c      	adds	r7, #28
 8005946:	46bd      	mov	sp, r7
 8005948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800594c:	20001b7c 	.word	0x20001b7c

08005950 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005956:	f107 0310 	add.w	r3, r7, #16
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	609a      	str	r2, [r3, #8]
 8005962:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005964:	4b24      	ldr	r3, [pc, #144]	@ (80059f8 <MX_GPIO_Init+0xa8>)
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	4a23      	ldr	r2, [pc, #140]	@ (80059f8 <MX_GPIO_Init+0xa8>)
 800596a:	f043 0320 	orr.w	r3, r3, #32
 800596e:	6193      	str	r3, [r2, #24]
 8005970:	4b21      	ldr	r3, [pc, #132]	@ (80059f8 <MX_GPIO_Init+0xa8>)
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800597c:	4b1e      	ldr	r3, [pc, #120]	@ (80059f8 <MX_GPIO_Init+0xa8>)
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	4a1d      	ldr	r2, [pc, #116]	@ (80059f8 <MX_GPIO_Init+0xa8>)
 8005982:	f043 0308 	orr.w	r3, r3, #8
 8005986:	6193      	str	r3, [r2, #24]
 8005988:	4b1b      	ldr	r3, [pc, #108]	@ (80059f8 <MX_GPIO_Init+0xa8>)
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	60bb      	str	r3, [r7, #8]
 8005992:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005994:	4b18      	ldr	r3, [pc, #96]	@ (80059f8 <MX_GPIO_Init+0xa8>)
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	4a17      	ldr	r2, [pc, #92]	@ (80059f8 <MX_GPIO_Init+0xa8>)
 800599a:	f043 0304 	orr.w	r3, r3, #4
 800599e:	6193      	str	r3, [r2, #24]
 80059a0:	4b15      	ldr	r3, [pc, #84]	@ (80059f8 <MX_GPIO_Init+0xa8>)
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SINC_slave_GPIO_Port, SINC_slave_Pin, GPIO_PIN_RESET);
 80059ac:	2200      	movs	r2, #0
 80059ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80059b2:	4812      	ldr	r0, [pc, #72]	@ (80059fc <MX_GPIO_Init+0xac>)
 80059b4:	f000 fd51 	bl	800645a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_slave_Pin;
 80059b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059be:	2301      	movs	r3, #1
 80059c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80059c2:	2302      	movs	r3, #2
 80059c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059c6:	2303      	movs	r3, #3
 80059c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SINC_slave_GPIO_Port, &GPIO_InitStruct);
 80059ca:	f107 0310 	add.w	r3, r7, #16
 80059ce:	4619      	mov	r1, r3
 80059d0:	480a      	ldr	r0, [pc, #40]	@ (80059fc <MX_GPIO_Init+0xac>)
 80059d2:	f000 fba7 	bl	8006124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_mater_Pin;
 80059d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059dc:	2300      	movs	r3, #0
 80059de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80059e0:	2302      	movs	r3, #2
 80059e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SINC_mater_GPIO_Port, &GPIO_InitStruct);
 80059e4:	f107 0310 	add.w	r3, r7, #16
 80059e8:	4619      	mov	r1, r3
 80059ea:	4804      	ldr	r0, [pc, #16]	@ (80059fc <MX_GPIO_Init+0xac>)
 80059ec:	f000 fb9a 	bl	8006124 <HAL_GPIO_Init>

}
 80059f0:	bf00      	nop
 80059f2:	3720      	adds	r7, #32
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	40021000 	.word	0x40021000
 80059fc:	40010800 	.word	0x40010800

08005a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08e      	sub	sp, #56	@ 0x38
 8005a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a06:	f000 fa47 	bl	8005e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a0a:	f000 f8f1 	bl	8005bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a0e:	f7ff ff9f 	bl	8005950 <MX_GPIO_Init>
  MX_SPI2_Init();
 8005a12:	f000 f939 	bl	8005c88 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  union calib_t param[9], time;
  uint32_t start_time = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 8005a1a:	bf00      	nop
 8005a1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005a20:	4869      	ldr	r0, [pc, #420]	@ (8005bc8 <main+0x1c8>)
 8005a22:	f000 fd03 	bl	800642c <HAL_GPIO_ReadPin>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d0f7      	beq.n	8005a1c <main+0x1c>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a32:	4865      	ldr	r0, [pc, #404]	@ (8005bc8 <main+0x1c8>)
 8005a34:	f000 fd11 	bl	800645a <HAL_GPIO_WritePin>

	  for(uint16_t i = 0; i<=tam; i++)
 8005a38:	2300      	movs	r3, #0
 8005a3a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005a3c:	e00c      	b.n	8005a58 <main+0x58>
	  {
		  HAL_SPI_Receive(&hspi2, mx_[i].inteiro, 4, 1000);
 8005a3e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4a62      	ldr	r2, [pc, #392]	@ (8005bcc <main+0x1cc>)
 8005a44:	1899      	adds	r1, r3, r2
 8005a46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	4860      	ldr	r0, [pc, #384]	@ (8005bd0 <main+0x1d0>)
 8005a4e:	f001 fac3 	bl	8006fd8 <HAL_SPI_Receive>
	  for(uint16_t i = 0; i<=tam; i++)
 8005a52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a54:	3301      	adds	r3, #1
 8005a56:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005a58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a5a:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8005a5e:	d9ee      	bls.n	8005a3e <main+0x3e>
	  }
	  for(uint16_t i = 0; i<=tam; i++)
 8005a60:	2300      	movs	r3, #0
 8005a62:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005a64:	e00c      	b.n	8005a80 <main+0x80>
	  {
		  HAL_SPI_Receive(&hspi2, my_[i].inteiro, 4, 1000);
 8005a66:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4a5a      	ldr	r2, [pc, #360]	@ (8005bd4 <main+0x1d4>)
 8005a6c:	1899      	adds	r1, r3, r2
 8005a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a72:	2204      	movs	r2, #4
 8005a74:	4856      	ldr	r0, [pc, #344]	@ (8005bd0 <main+0x1d0>)
 8005a76:	f001 faaf 	bl	8006fd8 <HAL_SPI_Receive>
	  for(uint16_t i = 0; i<=tam; i++)
 8005a7a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8005a80:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8005a82:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8005a86:	d9ee      	bls.n	8005a66 <main+0x66>
	  }
	  for(uint16_t i = 0; i<=tam; i++)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	867b      	strh	r3, [r7, #50]	@ 0x32
 8005a8c:	e00c      	b.n	8005aa8 <main+0xa8>
	  {
		  HAL_SPI_Receive(&hspi2, mz_[i].inteiro, 4, 1000);
 8005a8e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4a51      	ldr	r2, [pc, #324]	@ (8005bd8 <main+0x1d8>)
 8005a94:	1899      	adds	r1, r3, r2
 8005a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a9a:	2204      	movs	r2, #4
 8005a9c:	484c      	ldr	r0, [pc, #304]	@ (8005bd0 <main+0x1d0>)
 8005a9e:	f001 fa9b 	bl	8006fd8 <HAL_SPI_Receive>
	  for(uint16_t i = 0; i<=tam; i++)
 8005aa2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	867b      	strh	r3, [r7, #50]	@ 0x32
 8005aa8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005aaa:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8005aae:	d9ee      	bls.n	8005a8e <main+0x8e>
	  }
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005ab6:	4844      	ldr	r0, [pc, #272]	@ (8005bc8 <main+0x1c8>)
 8005ab8:	f000 fccf 	bl	800645a <HAL_GPIO_WritePin>

	  for(uint16_t i = 0; i<=tam; i++)
 8005abc:	2300      	movs	r3, #0
 8005abe:	863b      	strh	r3, [r7, #48]	@ 0x30
 8005ac0:	e01a      	b.n	8005af8 <main+0xf8>
	  {
		  mx[i] = mx_[i].flutuante;
 8005ac2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005ac4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005ac6:	4941      	ldr	r1, [pc, #260]	@ (8005bcc <main+0x1cc>)
 8005ac8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005acc:	4943      	ldr	r1, [pc, #268]	@ (8005bdc <main+0x1dc>)
 8005ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  my[i] = my_[i].flutuante;
 8005ad2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005ad4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005ad6:	493f      	ldr	r1, [pc, #252]	@ (8005bd4 <main+0x1d4>)
 8005ad8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005adc:	4940      	ldr	r1, [pc, #256]	@ (8005be0 <main+0x1e0>)
 8005ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  mz[i] = mz_[i].flutuante;
 8005ae2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005ae4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005ae6:	493c      	ldr	r1, [pc, #240]	@ (8005bd8 <main+0x1d8>)
 8005ae8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005aec:	493d      	ldr	r1, [pc, #244]	@ (8005be4 <main+0x1e4>)
 8005aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for(uint16_t i = 0; i<=tam; i++)
 8005af2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005af4:	3301      	adds	r3, #1
 8005af6:	863b      	strh	r3, [r7, #48]	@ 0x30
 8005af8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005afa:	f5b3 7f8b 	cmp.w	r3, #278	@ 0x116
 8005afe:	d9e0      	bls.n	8005ac2 <main+0xc2>

	  /*start_time = HAL_GetTick();
	  ETS(mx, my, mz, p1);
	  time.flutuante = HAL_GetTick() - start_time;*/

	  start_time = HAL_GetTick();
 8005b00:	f000 fa22 	bl	8005f48 <HAL_GetTick>
 8005b04:	62b8      	str	r0, [r7, #40]	@ 0x28
	  passos_NLLS = NLLS(mx, my, mz, p1);
 8005b06:	4b38      	ldr	r3, [pc, #224]	@ (8005be8 <main+0x1e8>)
 8005b08:	4a36      	ldr	r2, [pc, #216]	@ (8005be4 <main+0x1e4>)
 8005b0a:	4935      	ldr	r1, [pc, #212]	@ (8005be0 <main+0x1e0>)
 8005b0c:	4833      	ldr	r0, [pc, #204]	@ (8005bdc <main+0x1dc>)
 8005b0e:	f7fb fb2f 	bl	8001170 <NLLS>
 8005b12:	4603      	mov	r3, r0
 8005b14:	461a      	mov	r2, r3
 8005b16:	4b35      	ldr	r3, [pc, #212]	@ (8005bec <main+0x1ec>)
 8005b18:	701a      	strb	r2, [r3, #0]
	  time.flutuante = HAL_GetTick() - start_time;
 8005b1a:	f000 fa15 	bl	8005f48 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fb f86f 	bl	8000c08 <__aeabi_ui2f>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	603b      	str	r3, [r7, #0]



	  for(uint8_t i = 0; i < 10; i++)
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005b34:	e010      	b.n	8005b58 <main+0x158>
	  {
		  param[i].flutuante = p1[i];
 8005b36:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b3e:	492a      	ldr	r1, [pc, #168]	@ (8005be8 <main+0x1e8>)
 8005b40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	3338      	adds	r3, #56	@ 0x38
 8005b48:	443b      	add	r3, r7
 8005b4a:	f843 2c34 	str.w	r2, [r3, #-52]
	  for(uint8_t i = 0; i < 10; i++)
 8005b4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b52:	3301      	adds	r3, #1
 8005b54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005b58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005b5c:	2b09      	cmp	r3, #9
 8005b5e:	d9ea      	bls.n	8005b36 <main+0x136>
	  }

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8005b60:	2201      	movs	r2, #1
 8005b62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b66:	4818      	ldr	r0, [pc, #96]	@ (8005bc8 <main+0x1c8>)
 8005b68:	f000 fc77 	bl	800645a <HAL_GPIO_WritePin>

	  for(uint8_t i = 0; i < 10; i++)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005b72:	e00f      	b.n	8005b94 <main+0x194>
	  {
		  HAL_SPI_Transmit(&hspi2, param[i].inteiro, 4, HAL_MAX_DELAY);
 8005b74:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b78:	1d3a      	adds	r2, r7, #4
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	18d1      	adds	r1, r2, r3
 8005b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b82:	2204      	movs	r2, #4
 8005b84:	4812      	ldr	r0, [pc, #72]	@ (8005bd0 <main+0x1d0>)
 8005b86:	f001 f8e3 	bl	8006d50 <HAL_SPI_Transmit>
	  for(uint8_t i = 0; i < 10; i++)
 8005b8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b8e:	3301      	adds	r3, #1
 8005b90:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8005b94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b98:	2b09      	cmp	r3, #9
 8005b9a:	d9eb      	bls.n	8005b74 <main+0x174>
	  }
	  HAL_SPI_Transmit(&hspi2, time.inteiro, 4, HAL_MAX_DELAY);
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	480a      	ldr	r0, [pc, #40]	@ (8005bd0 <main+0x1d0>)
 8005ba6:	f001 f8d3 	bl	8006d50 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi2, &passos_NLLS, 1, HAL_MAX_DELAY);
 8005baa:	f04f 33ff 	mov.w	r3, #4294967295
 8005bae:	2201      	movs	r2, #1
 8005bb0:	490e      	ldr	r1, [pc, #56]	@ (8005bec <main+0x1ec>)
 8005bb2:	4807      	ldr	r0, [pc, #28]	@ (8005bd0 <main+0x1d0>)
 8005bb4:	f001 f8cc 	bl	8006d50 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005bbe:	4802      	ldr	r0, [pc, #8]	@ (8005bc8 <main+0x1c8>)
 8005bc0:	f000 fc4b 	bl	800645a <HAL_GPIO_WritePin>
	  while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 8005bc4:	e729      	b.n	8005a1a <main+0x1a>
 8005bc6:	bf00      	nop
 8005bc8:	40010800 	.word	0x40010800
 8005bcc:	20000d30 	.word	0x20000d30
 8005bd0:	20004424 	.word	0x20004424
 8005bd4:	20001188 	.word	0x20001188
 8005bd8:	200015e0 	.word	0x200015e0
 8005bdc:	20000028 	.word	0x20000028
 8005be0:	20000480 	.word	0x20000480
 8005be4:	200008d8 	.word	0x200008d8
 8005be8:	200043fc 	.word	0x200043fc
 8005bec:	20004420 	.word	0x20004420

08005bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b090      	sub	sp, #64	@ 0x40
 8005bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005bf6:	f107 0318 	add.w	r3, r7, #24
 8005bfa:	2228      	movs	r2, #40	@ 0x28
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 fdb7 	bl	8007772 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005c04:	1d3b      	adds	r3, r7, #4
 8005c06:	2200      	movs	r2, #0
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	609a      	str	r2, [r3, #8]
 8005c0e:	60da      	str	r2, [r3, #12]
 8005c10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005c12:	2301      	movs	r3, #1
 8005c14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005c1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005c20:	2301      	movs	r3, #1
 8005c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c24:	2302      	movs	r3, #2
 8005c26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005c2e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8005c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c34:	f107 0318 	add.w	r3, r7, #24
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fc27 	bl	800648c <HAL_RCC_OscConfig>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005c44:	f000 f819 	bl	8005c7a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c48:	230f      	movs	r3, #15
 8005c4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c50:	2300      	movs	r3, #0
 8005c52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005c54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	2102      	movs	r1, #2
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 fe94 	bl	8006990 <HAL_RCC_ClockConfig>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005c6e:	f000 f804 	bl	8005c7a <Error_Handler>
  }
}
 8005c72:	bf00      	nop
 8005c74:	3740      	adds	r7, #64	@ 0x40
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c7e:	b672      	cpsid	i
}
 8005c80:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005c82:	bf00      	nop
 8005c84:	e7fd      	b.n	8005c82 <Error_Handler+0x8>
	...

08005c88 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005c8c:	4b15      	ldr	r3, [pc, #84]	@ (8005ce4 <MX_SPI2_Init+0x5c>)
 8005c8e:	4a16      	ldr	r2, [pc, #88]	@ (8005ce8 <MX_SPI2_Init+0x60>)
 8005c90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8005c92:	4b14      	ldr	r3, [pc, #80]	@ (8005ce4 <MX_SPI2_Init+0x5c>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005c98:	4b12      	ldr	r3, [pc, #72]	@ (8005ce4 <MX_SPI2_Init+0x5c>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005c9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ce4 <MX_SPI2_Init+0x5c>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce4 <MX_SPI2_Init+0x5c>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005caa:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce4 <MX_SPI2_Init+0x5c>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce4 <MX_SPI2_Init+0x5c>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce4 <MX_SPI2_Init+0x5c>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005cbc:	4b09      	ldr	r3, [pc, #36]	@ (8005ce4 <MX_SPI2_Init+0x5c>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc2:	4b08      	ldr	r3, [pc, #32]	@ (8005ce4 <MX_SPI2_Init+0x5c>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005cc8:	4b06      	ldr	r3, [pc, #24]	@ (8005ce4 <MX_SPI2_Init+0x5c>)
 8005cca:	220a      	movs	r2, #10
 8005ccc:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005cce:	4805      	ldr	r0, [pc, #20]	@ (8005ce4 <MX_SPI2_Init+0x5c>)
 8005cd0:	f000 ffba 	bl	8006c48 <HAL_SPI_Init>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8005cda:	f7ff ffce 	bl	8005c7a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005cde:	bf00      	nop
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20004424 	.word	0x20004424
 8005ce8:	40003800 	.word	0x40003800

08005cec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cf4:	f107 0310 	add.w	r3, r7, #16
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	609a      	str	r2, [r3, #8]
 8005d00:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1c      	ldr	r2, [pc, #112]	@ (8005d78 <HAL_SPI_MspInit+0x8c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d131      	bne.n	8005d70 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005d7c <HAL_SPI_MspInit+0x90>)
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	4a1a      	ldr	r2, [pc, #104]	@ (8005d7c <HAL_SPI_MspInit+0x90>)
 8005d12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d16:	61d3      	str	r3, [r2, #28]
 8005d18:	4b18      	ldr	r3, [pc, #96]	@ (8005d7c <HAL_SPI_MspInit+0x90>)
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d24:	4b15      	ldr	r3, [pc, #84]	@ (8005d7c <HAL_SPI_MspInit+0x90>)
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	4a14      	ldr	r2, [pc, #80]	@ (8005d7c <HAL_SPI_MspInit+0x90>)
 8005d2a:	f043 0308 	orr.w	r3, r3, #8
 8005d2e:	6193      	str	r3, [r2, #24]
 8005d30:	4b12      	ldr	r3, [pc, #72]	@ (8005d7c <HAL_SPI_MspInit+0x90>)
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	60bb      	str	r3, [r7, #8]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8005d3c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8005d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d4a:	f107 0310 	add.w	r3, r7, #16
 8005d4e:	4619      	mov	r1, r3
 8005d50:	480b      	ldr	r0, [pc, #44]	@ (8005d80 <HAL_SPI_MspInit+0x94>)
 8005d52:	f000 f9e7 	bl	8006124 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005d56:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005d60:	2303      	movs	r3, #3
 8005d62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d64:	f107 0310 	add.w	r3, r7, #16
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4805      	ldr	r0, [pc, #20]	@ (8005d80 <HAL_SPI_MspInit+0x94>)
 8005d6c:	f000 f9da 	bl	8006124 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005d70:	bf00      	nop
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40003800 	.word	0x40003800
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	40010c00 	.word	0x40010c00

08005d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005d8a:	4b15      	ldr	r3, [pc, #84]	@ (8005de0 <HAL_MspInit+0x5c>)
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	4a14      	ldr	r2, [pc, #80]	@ (8005de0 <HAL_MspInit+0x5c>)
 8005d90:	f043 0301 	orr.w	r3, r3, #1
 8005d94:	6193      	str	r3, [r2, #24]
 8005d96:	4b12      	ldr	r3, [pc, #72]	@ (8005de0 <HAL_MspInit+0x5c>)
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005da2:	4b0f      	ldr	r3, [pc, #60]	@ (8005de0 <HAL_MspInit+0x5c>)
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	4a0e      	ldr	r2, [pc, #56]	@ (8005de0 <HAL_MspInit+0x5c>)
 8005da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dac:	61d3      	str	r3, [r2, #28]
 8005dae:	4b0c      	ldr	r3, [pc, #48]	@ (8005de0 <HAL_MspInit+0x5c>)
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005db6:	607b      	str	r3, [r7, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005dba:	4b0a      	ldr	r3, [pc, #40]	@ (8005de4 <HAL_MspInit+0x60>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	4a04      	ldr	r2, [pc, #16]	@ (8005de4 <HAL_MspInit+0x60>)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bc80      	pop	{r7}
 8005dde:	4770      	bx	lr
 8005de0:	40021000 	.word	0x40021000
 8005de4:	40010000 	.word	0x40010000

08005de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005dec:	bf00      	nop
 8005dee:	e7fd      	b.n	8005dec <NMI_Handler+0x4>

08005df0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005df0:	b480      	push	{r7}
 8005df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005df4:	bf00      	nop
 8005df6:	e7fd      	b.n	8005df4 <HardFault_Handler+0x4>

08005df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dfc:	bf00      	nop
 8005dfe:	e7fd      	b.n	8005dfc <MemManage_Handler+0x4>

08005e00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <BusFault_Handler+0x4>

08005e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e0c:	bf00      	nop
 8005e0e:	e7fd      	b.n	8005e0c <UsageFault_Handler+0x4>

08005e10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bc80      	pop	{r7}
 8005e1a:	4770      	bx	lr

08005e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e20:	bf00      	nop
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr

08005e28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e2c:	bf00      	nop
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr

08005e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e38:	f000 f874 	bl	8005f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e3c:	bf00      	nop
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e44:	bf00      	nop
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr

08005e4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005e4c:	f7ff fff8 	bl	8005e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005e50:	480b      	ldr	r0, [pc, #44]	@ (8005e80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8005e52:	490c      	ldr	r1, [pc, #48]	@ (8005e84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005e54:	4a0c      	ldr	r2, [pc, #48]	@ (8005e88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e58:	e002      	b.n	8005e60 <LoopCopyDataInit>

08005e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e5e:	3304      	adds	r3, #4

08005e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e64:	d3f9      	bcc.n	8005e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e66:	4a09      	ldr	r2, [pc, #36]	@ (8005e8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005e68:	4c09      	ldr	r4, [pc, #36]	@ (8005e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e6c:	e001      	b.n	8005e72 <LoopFillZerobss>

08005e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e70:	3204      	adds	r2, #4

08005e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e74:	d3fb      	bcc.n	8005e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005e76:	f001 fc85 	bl	8007784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005e7a:	f7ff fdc1 	bl	8005a00 <main>
  bx lr
 8005e7e:	4770      	bx	lr
  ldr r0, =_sdata
 8005e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8005e88:	08007834 	.word	0x08007834
  ldr r2, =_sbss
 8005e8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8005e90:	20004480 	.word	0x20004480

08005e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005e94:	e7fe      	b.n	8005e94 <ADC1_2_IRQHandler>
	...

08005e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e9c:	4b08      	ldr	r3, [pc, #32]	@ (8005ec0 <HAL_Init+0x28>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a07      	ldr	r2, [pc, #28]	@ (8005ec0 <HAL_Init+0x28>)
 8005ea2:	f043 0310 	orr.w	r3, r3, #16
 8005ea6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ea8:	2003      	movs	r0, #3
 8005eaa:	f000 f907 	bl	80060bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005eae:	200f      	movs	r0, #15
 8005eb0:	f000 f808 	bl	8005ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005eb4:	f7ff ff66 	bl	8005d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	40022000 	.word	0x40022000

08005ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ecc:	4b12      	ldr	r3, [pc, #72]	@ (8005f18 <HAL_InitTick+0x54>)
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	4b12      	ldr	r3, [pc, #72]	@ (8005f1c <HAL_InitTick+0x58>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 f911 	bl	800610a <HAL_SYSTICK_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e00e      	b.n	8005f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b0f      	cmp	r3, #15
 8005ef6:	d80a      	bhi.n	8005f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ef8:	2200      	movs	r2, #0
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	f04f 30ff 	mov.w	r0, #4294967295
 8005f00:	f000 f8e7 	bl	80060d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005f04:	4a06      	ldr	r2, [pc, #24]	@ (8005f20 <HAL_InitTick+0x5c>)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	e000      	b.n	8005f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20000000 	.word	0x20000000
 8005f1c:	20000008 	.word	0x20000008
 8005f20:	20000004 	.word	0x20000004

08005f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005f28:	4b05      	ldr	r3, [pc, #20]	@ (8005f40 <HAL_IncTick+0x1c>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	4b05      	ldr	r3, [pc, #20]	@ (8005f44 <HAL_IncTick+0x20>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4413      	add	r3, r2
 8005f34:	4a03      	ldr	r2, [pc, #12]	@ (8005f44 <HAL_IncTick+0x20>)
 8005f36:	6013      	str	r3, [r2, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bc80      	pop	{r7}
 8005f3e:	4770      	bx	lr
 8005f40:	20000008 	.word	0x20000008
 8005f44:	2000447c 	.word	0x2000447c

08005f48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8005f4c:	4b02      	ldr	r3, [pc, #8]	@ (8005f58 <HAL_GetTick+0x10>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr
 8005f58:	2000447c 	.word	0x2000447c

08005f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f8e:	4a04      	ldr	r2, [pc, #16]	@ (8005fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	60d3      	str	r3, [r2, #12]
}
 8005f94:	bf00      	nop
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bc80      	pop	{r7}
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	e000ed00 	.word	0xe000ed00

08005fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fa8:	4b04      	ldr	r3, [pc, #16]	@ (8005fbc <__NVIC_GetPriorityGrouping+0x18>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	0a1b      	lsrs	r3, r3, #8
 8005fae:	f003 0307 	and.w	r3, r3, #7
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	e000ed00 	.word	0xe000ed00

08005fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	6039      	str	r1, [r7, #0]
 8005fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	db0a      	blt.n	8005fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	490c      	ldr	r1, [pc, #48]	@ (800600c <__NVIC_SetPriority+0x4c>)
 8005fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fde:	0112      	lsls	r2, r2, #4
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fe8:	e00a      	b.n	8006000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	4908      	ldr	r1, [pc, #32]	@ (8006010 <__NVIC_SetPriority+0x50>)
 8005ff0:	79fb      	ldrb	r3, [r7, #7]
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	3b04      	subs	r3, #4
 8005ff8:	0112      	lsls	r2, r2, #4
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	761a      	strb	r2, [r3, #24]
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	e000e100 	.word	0xe000e100
 8006010:	e000ed00 	.word	0xe000ed00

08006014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006014:	b480      	push	{r7}
 8006016:	b089      	sub	sp, #36	@ 0x24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f1c3 0307 	rsb	r3, r3, #7
 800602e:	2b04      	cmp	r3, #4
 8006030:	bf28      	it	cs
 8006032:	2304      	movcs	r3, #4
 8006034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	3304      	adds	r3, #4
 800603a:	2b06      	cmp	r3, #6
 800603c:	d902      	bls.n	8006044 <NVIC_EncodePriority+0x30>
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	3b03      	subs	r3, #3
 8006042:	e000      	b.n	8006046 <NVIC_EncodePriority+0x32>
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006048:	f04f 32ff 	mov.w	r2, #4294967295
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	fa02 f303 	lsl.w	r3, r2, r3
 8006052:	43da      	mvns	r2, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	401a      	ands	r2, r3
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800605c:	f04f 31ff 	mov.w	r1, #4294967295
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	fa01 f303 	lsl.w	r3, r1, r3
 8006066:	43d9      	mvns	r1, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800606c:	4313      	orrs	r3, r2
         );
}
 800606e:	4618      	mov	r0, r3
 8006070:	3724      	adds	r7, #36	@ 0x24
 8006072:	46bd      	mov	sp, r7
 8006074:	bc80      	pop	{r7}
 8006076:	4770      	bx	lr

08006078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3b01      	subs	r3, #1
 8006084:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006088:	d301      	bcc.n	800608e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800608a:	2301      	movs	r3, #1
 800608c:	e00f      	b.n	80060ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800608e:	4a0a      	ldr	r2, [pc, #40]	@ (80060b8 <SysTick_Config+0x40>)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3b01      	subs	r3, #1
 8006094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006096:	210f      	movs	r1, #15
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	f7ff ff90 	bl	8005fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80060a0:	4b05      	ldr	r3, [pc, #20]	@ (80060b8 <SysTick_Config+0x40>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80060a6:	4b04      	ldr	r3, [pc, #16]	@ (80060b8 <SysTick_Config+0x40>)
 80060a8:	2207      	movs	r2, #7
 80060aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	e000e010 	.word	0xe000e010

080060bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff ff49 	bl	8005f5c <__NVIC_SetPriorityGrouping>
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b086      	sub	sp, #24
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	4603      	mov	r3, r0
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	607a      	str	r2, [r7, #4]
 80060de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060e4:	f7ff ff5e 	bl	8005fa4 <__NVIC_GetPriorityGrouping>
 80060e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	6978      	ldr	r0, [r7, #20]
 80060f0:	f7ff ff90 	bl	8006014 <NVIC_EncodePriority>
 80060f4:	4602      	mov	r2, r0
 80060f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060fa:	4611      	mov	r1, r2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff ff5f 	bl	8005fc0 <__NVIC_SetPriority>
}
 8006102:	bf00      	nop
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7ff ffb0 	bl	8006078 <SysTick_Config>
 8006118:	4603      	mov	r3, r0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006124:	b480      	push	{r7}
 8006126:	b08b      	sub	sp, #44	@ 0x2c
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800612e:	2300      	movs	r3, #0
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006132:	2300      	movs	r3, #0
 8006134:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006136:	e169      	b.n	800640c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006138:	2201      	movs	r2, #1
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	4013      	ands	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	429a      	cmp	r2, r3
 8006152:	f040 8158 	bne.w	8006406 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4a9a      	ldr	r2, [pc, #616]	@ (80063c4 <HAL_GPIO_Init+0x2a0>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d05e      	beq.n	800621e <HAL_GPIO_Init+0xfa>
 8006160:	4a98      	ldr	r2, [pc, #608]	@ (80063c4 <HAL_GPIO_Init+0x2a0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d875      	bhi.n	8006252 <HAL_GPIO_Init+0x12e>
 8006166:	4a98      	ldr	r2, [pc, #608]	@ (80063c8 <HAL_GPIO_Init+0x2a4>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d058      	beq.n	800621e <HAL_GPIO_Init+0xfa>
 800616c:	4a96      	ldr	r2, [pc, #600]	@ (80063c8 <HAL_GPIO_Init+0x2a4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d86f      	bhi.n	8006252 <HAL_GPIO_Init+0x12e>
 8006172:	4a96      	ldr	r2, [pc, #600]	@ (80063cc <HAL_GPIO_Init+0x2a8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d052      	beq.n	800621e <HAL_GPIO_Init+0xfa>
 8006178:	4a94      	ldr	r2, [pc, #592]	@ (80063cc <HAL_GPIO_Init+0x2a8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d869      	bhi.n	8006252 <HAL_GPIO_Init+0x12e>
 800617e:	4a94      	ldr	r2, [pc, #592]	@ (80063d0 <HAL_GPIO_Init+0x2ac>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d04c      	beq.n	800621e <HAL_GPIO_Init+0xfa>
 8006184:	4a92      	ldr	r2, [pc, #584]	@ (80063d0 <HAL_GPIO_Init+0x2ac>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d863      	bhi.n	8006252 <HAL_GPIO_Init+0x12e>
 800618a:	4a92      	ldr	r2, [pc, #584]	@ (80063d4 <HAL_GPIO_Init+0x2b0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d046      	beq.n	800621e <HAL_GPIO_Init+0xfa>
 8006190:	4a90      	ldr	r2, [pc, #576]	@ (80063d4 <HAL_GPIO_Init+0x2b0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d85d      	bhi.n	8006252 <HAL_GPIO_Init+0x12e>
 8006196:	2b12      	cmp	r3, #18
 8006198:	d82a      	bhi.n	80061f0 <HAL_GPIO_Init+0xcc>
 800619a:	2b12      	cmp	r3, #18
 800619c:	d859      	bhi.n	8006252 <HAL_GPIO_Init+0x12e>
 800619e:	a201      	add	r2, pc, #4	@ (adr r2, 80061a4 <HAL_GPIO_Init+0x80>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	0800621f 	.word	0x0800621f
 80061a8:	080061f9 	.word	0x080061f9
 80061ac:	0800620b 	.word	0x0800620b
 80061b0:	0800624d 	.word	0x0800624d
 80061b4:	08006253 	.word	0x08006253
 80061b8:	08006253 	.word	0x08006253
 80061bc:	08006253 	.word	0x08006253
 80061c0:	08006253 	.word	0x08006253
 80061c4:	08006253 	.word	0x08006253
 80061c8:	08006253 	.word	0x08006253
 80061cc:	08006253 	.word	0x08006253
 80061d0:	08006253 	.word	0x08006253
 80061d4:	08006253 	.word	0x08006253
 80061d8:	08006253 	.word	0x08006253
 80061dc:	08006253 	.word	0x08006253
 80061e0:	08006253 	.word	0x08006253
 80061e4:	08006253 	.word	0x08006253
 80061e8:	08006201 	.word	0x08006201
 80061ec:	08006215 	.word	0x08006215
 80061f0:	4a79      	ldr	r2, [pc, #484]	@ (80063d8 <HAL_GPIO_Init+0x2b4>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80061f6:	e02c      	b.n	8006252 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	623b      	str	r3, [r7, #32]
          break;
 80061fe:	e029      	b.n	8006254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	3304      	adds	r3, #4
 8006206:	623b      	str	r3, [r7, #32]
          break;
 8006208:	e024      	b.n	8006254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	3308      	adds	r3, #8
 8006210:	623b      	str	r3, [r7, #32]
          break;
 8006212:	e01f      	b.n	8006254 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	330c      	adds	r3, #12
 800621a:	623b      	str	r3, [r7, #32]
          break;
 800621c:	e01a      	b.n	8006254 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d102      	bne.n	800622c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006226:	2304      	movs	r3, #4
 8006228:	623b      	str	r3, [r7, #32]
          break;
 800622a:	e013      	b.n	8006254 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d105      	bne.n	8006240 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006234:	2308      	movs	r3, #8
 8006236:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	611a      	str	r2, [r3, #16]
          break;
 800623e:	e009      	b.n	8006254 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006240:	2308      	movs	r3, #8
 8006242:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	615a      	str	r2, [r3, #20]
          break;
 800624a:	e003      	b.n	8006254 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800624c:	2300      	movs	r3, #0
 800624e:	623b      	str	r3, [r7, #32]
          break;
 8006250:	e000      	b.n	8006254 <HAL_GPIO_Init+0x130>
          break;
 8006252:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	2bff      	cmp	r3, #255	@ 0xff
 8006258:	d801      	bhi.n	800625e <HAL_GPIO_Init+0x13a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	e001      	b.n	8006262 <HAL_GPIO_Init+0x13e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	3304      	adds	r3, #4
 8006262:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2bff      	cmp	r3, #255	@ 0xff
 8006268:	d802      	bhi.n	8006270 <HAL_GPIO_Init+0x14c>
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	e002      	b.n	8006276 <HAL_GPIO_Init+0x152>
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	3b08      	subs	r3, #8
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	210f      	movs	r1, #15
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	fa01 f303 	lsl.w	r3, r1, r3
 8006284:	43db      	mvns	r3, r3
 8006286:	401a      	ands	r2, r3
 8006288:	6a39      	ldr	r1, [r7, #32]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	fa01 f303 	lsl.w	r3, r1, r3
 8006290:	431a      	orrs	r2, r3
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80b1 	beq.w	8006406 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80062a4:	4b4d      	ldr	r3, [pc, #308]	@ (80063dc <HAL_GPIO_Init+0x2b8>)
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	4a4c      	ldr	r2, [pc, #304]	@ (80063dc <HAL_GPIO_Init+0x2b8>)
 80062aa:	f043 0301 	orr.w	r3, r3, #1
 80062ae:	6193      	str	r3, [r2, #24]
 80062b0:	4b4a      	ldr	r3, [pc, #296]	@ (80063dc <HAL_GPIO_Init+0x2b8>)
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80062bc:	4a48      	ldr	r2, [pc, #288]	@ (80063e0 <HAL_GPIO_Init+0x2bc>)
 80062be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c0:	089b      	lsrs	r3, r3, #2
 80062c2:	3302      	adds	r3, #2
 80062c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	f003 0303 	and.w	r3, r3, #3
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	220f      	movs	r2, #15
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	43db      	mvns	r3, r3
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4013      	ands	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a40      	ldr	r2, [pc, #256]	@ (80063e4 <HAL_GPIO_Init+0x2c0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d013      	beq.n	8006310 <HAL_GPIO_Init+0x1ec>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a3f      	ldr	r2, [pc, #252]	@ (80063e8 <HAL_GPIO_Init+0x2c4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00d      	beq.n	800630c <HAL_GPIO_Init+0x1e8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a3e      	ldr	r2, [pc, #248]	@ (80063ec <HAL_GPIO_Init+0x2c8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d007      	beq.n	8006308 <HAL_GPIO_Init+0x1e4>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a3d      	ldr	r2, [pc, #244]	@ (80063f0 <HAL_GPIO_Init+0x2cc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d101      	bne.n	8006304 <HAL_GPIO_Init+0x1e0>
 8006300:	2303      	movs	r3, #3
 8006302:	e006      	b.n	8006312 <HAL_GPIO_Init+0x1ee>
 8006304:	2304      	movs	r3, #4
 8006306:	e004      	b.n	8006312 <HAL_GPIO_Init+0x1ee>
 8006308:	2302      	movs	r3, #2
 800630a:	e002      	b.n	8006312 <HAL_GPIO_Init+0x1ee>
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <HAL_GPIO_Init+0x1ee>
 8006310:	2300      	movs	r3, #0
 8006312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006314:	f002 0203 	and.w	r2, r2, #3
 8006318:	0092      	lsls	r2, r2, #2
 800631a:	4093      	lsls	r3, r2
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006322:	492f      	ldr	r1, [pc, #188]	@ (80063e0 <HAL_GPIO_Init+0x2bc>)
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	089b      	lsrs	r3, r3, #2
 8006328:	3302      	adds	r3, #2
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d006      	beq.n	800634a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800633c:	4b2d      	ldr	r3, [pc, #180]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	492c      	ldr	r1, [pc, #176]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	4313      	orrs	r3, r2
 8006346:	608b      	str	r3, [r1, #8]
 8006348:	e006      	b.n	8006358 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800634a:	4b2a      	ldr	r3, [pc, #168]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	43db      	mvns	r3, r3
 8006352:	4928      	ldr	r1, [pc, #160]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 8006354:	4013      	ands	r3, r2
 8006356:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d006      	beq.n	8006372 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006364:	4b23      	ldr	r3, [pc, #140]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	4922      	ldr	r1, [pc, #136]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	4313      	orrs	r3, r2
 800636e:	60cb      	str	r3, [r1, #12]
 8006370:	e006      	b.n	8006380 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006372:	4b20      	ldr	r3, [pc, #128]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	43db      	mvns	r3, r3
 800637a:	491e      	ldr	r1, [pc, #120]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 800637c:	4013      	ands	r3, r2
 800637e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d006      	beq.n	800639a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800638c:	4b19      	ldr	r3, [pc, #100]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	4918      	ldr	r1, [pc, #96]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	4313      	orrs	r3, r2
 8006396:	604b      	str	r3, [r1, #4]
 8006398:	e006      	b.n	80063a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800639a:	4b16      	ldr	r3, [pc, #88]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	43db      	mvns	r3, r3
 80063a2:	4914      	ldr	r1, [pc, #80]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d021      	beq.n	80063f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80063b4:	4b0f      	ldr	r3, [pc, #60]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	490e      	ldr	r1, [pc, #56]	@ (80063f4 <HAL_GPIO_Init+0x2d0>)
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	4313      	orrs	r3, r2
 80063be:	600b      	str	r3, [r1, #0]
 80063c0:	e021      	b.n	8006406 <HAL_GPIO_Init+0x2e2>
 80063c2:	bf00      	nop
 80063c4:	10320000 	.word	0x10320000
 80063c8:	10310000 	.word	0x10310000
 80063cc:	10220000 	.word	0x10220000
 80063d0:	10210000 	.word	0x10210000
 80063d4:	10120000 	.word	0x10120000
 80063d8:	10110000 	.word	0x10110000
 80063dc:	40021000 	.word	0x40021000
 80063e0:	40010000 	.word	0x40010000
 80063e4:	40010800 	.word	0x40010800
 80063e8:	40010c00 	.word	0x40010c00
 80063ec:	40011000 	.word	0x40011000
 80063f0:	40011400 	.word	0x40011400
 80063f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80063f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006428 <HAL_GPIO_Init+0x304>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	43db      	mvns	r3, r3
 8006400:	4909      	ldr	r1, [pc, #36]	@ (8006428 <HAL_GPIO_Init+0x304>)
 8006402:	4013      	ands	r3, r2
 8006404:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	3301      	adds	r3, #1
 800640a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006412:	fa22 f303 	lsr.w	r3, r2, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	f47f ae8e 	bne.w	8006138 <HAL_GPIO_Init+0x14>
  }
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	372c      	adds	r7, #44	@ 0x2c
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr
 8006428:	40010400 	.word	0x40010400

0800642c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	887b      	ldrh	r3, [r7, #2]
 800643e:	4013      	ands	r3, r2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006444:	2301      	movs	r3, #1
 8006446:	73fb      	strb	r3, [r7, #15]
 8006448:	e001      	b.n	800644e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800644e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006450:	4618      	mov	r0, r3
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr

0800645a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	460b      	mov	r3, r1
 8006464:	807b      	strh	r3, [r7, #2]
 8006466:	4613      	mov	r3, r2
 8006468:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800646a:	787b      	ldrb	r3, [r7, #1]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006470:	887a      	ldrh	r2, [r7, #2]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006476:	e003      	b.n	8006480 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006478:	887b      	ldrh	r3, [r7, #2]
 800647a:	041a      	lsls	r2, r3, #16
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	611a      	str	r2, [r3, #16]
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr
	...

0800648c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e272      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 8087 	beq.w	80065ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064ac:	4b92      	ldr	r3, [pc, #584]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f003 030c 	and.w	r3, r3, #12
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d00c      	beq.n	80064d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80064b8:	4b8f      	ldr	r3, [pc, #572]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f003 030c 	and.w	r3, r3, #12
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d112      	bne.n	80064ea <HAL_RCC_OscConfig+0x5e>
 80064c4:	4b8c      	ldr	r3, [pc, #560]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d0:	d10b      	bne.n	80064ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064d2:	4b89      	ldr	r3, [pc, #548]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d06c      	beq.n	80065b8 <HAL_RCC_OscConfig+0x12c>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d168      	bne.n	80065b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e24c      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064f2:	d106      	bne.n	8006502 <HAL_RCC_OscConfig+0x76>
 80064f4:	4b80      	ldr	r3, [pc, #512]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a7f      	ldr	r2, [pc, #508]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80064fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	e02e      	b.n	8006560 <HAL_RCC_OscConfig+0xd4>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10c      	bne.n	8006524 <HAL_RCC_OscConfig+0x98>
 800650a:	4b7b      	ldr	r3, [pc, #492]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a7a      	ldr	r2, [pc, #488]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006510:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	4b78      	ldr	r3, [pc, #480]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a77      	ldr	r2, [pc, #476]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800651c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	e01d      	b.n	8006560 <HAL_RCC_OscConfig+0xd4>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800652c:	d10c      	bne.n	8006548 <HAL_RCC_OscConfig+0xbc>
 800652e:	4b72      	ldr	r3, [pc, #456]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a71      	ldr	r2, [pc, #452]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	4b6f      	ldr	r3, [pc, #444]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a6e      	ldr	r2, [pc, #440]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e00b      	b.n	8006560 <HAL_RCC_OscConfig+0xd4>
 8006548:	4b6b      	ldr	r3, [pc, #428]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a6a      	ldr	r2, [pc, #424]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800654e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006552:	6013      	str	r3, [r2, #0]
 8006554:	4b68      	ldr	r3, [pc, #416]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a67      	ldr	r2, [pc, #412]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800655a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800655e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d013      	beq.n	8006590 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006568:	f7ff fcee 	bl	8005f48 <HAL_GetTick>
 800656c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006570:	f7ff fcea 	bl	8005f48 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b64      	cmp	r3, #100	@ 0x64
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e200      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006582:	4b5d      	ldr	r3, [pc, #372]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0f0      	beq.n	8006570 <HAL_RCC_OscConfig+0xe4>
 800658e:	e014      	b.n	80065ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006590:	f7ff fcda 	bl	8005f48 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006596:	e008      	b.n	80065aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006598:	f7ff fcd6 	bl	8005f48 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b64      	cmp	r3, #100	@ 0x64
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e1ec      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065aa:	4b53      	ldr	r3, [pc, #332]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f0      	bne.n	8006598 <HAL_RCC_OscConfig+0x10c>
 80065b6:	e000      	b.n	80065ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d063      	beq.n	800668e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065c6:	4b4c      	ldr	r3, [pc, #304]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065d2:	4b49      	ldr	r3, [pc, #292]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	2b08      	cmp	r3, #8
 80065dc:	d11c      	bne.n	8006618 <HAL_RCC_OscConfig+0x18c>
 80065de:	4b46      	ldr	r3, [pc, #280]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d116      	bne.n	8006618 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ea:	4b43      	ldr	r3, [pc, #268]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0302 	and.w	r3, r3, #2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <HAL_RCC_OscConfig+0x176>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d001      	beq.n	8006602 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e1c0      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006602:	4b3d      	ldr	r3, [pc, #244]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	4939      	ldr	r1, [pc, #228]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006612:	4313      	orrs	r3, r2
 8006614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006616:	e03a      	b.n	800668e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d020      	beq.n	8006662 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006620:	4b36      	ldr	r3, [pc, #216]	@ (80066fc <HAL_RCC_OscConfig+0x270>)
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006626:	f7ff fc8f 	bl	8005f48 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800662e:	f7ff fc8b 	bl	8005f48 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e1a1      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006640:	4b2d      	ldr	r3, [pc, #180]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800664c:	4b2a      	ldr	r3, [pc, #168]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	4927      	ldr	r1, [pc, #156]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 800665c:	4313      	orrs	r3, r2
 800665e:	600b      	str	r3, [r1, #0]
 8006660:	e015      	b.n	800668e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006662:	4b26      	ldr	r3, [pc, #152]	@ (80066fc <HAL_RCC_OscConfig+0x270>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006668:	f7ff fc6e 	bl	8005f48 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006670:	f7ff fc6a 	bl	8005f48 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e180      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006682:	4b1d      	ldr	r3, [pc, #116]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1f0      	bne.n	8006670 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0308 	and.w	r3, r3, #8
 8006696:	2b00      	cmp	r3, #0
 8006698:	d03a      	beq.n	8006710 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d019      	beq.n	80066d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066a2:	4b17      	ldr	r3, [pc, #92]	@ (8006700 <HAL_RCC_OscConfig+0x274>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066a8:	f7ff fc4e 	bl	8005f48 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066b0:	f7ff fc4a 	bl	8005f48 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e160      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066c2:	4b0d      	ldr	r3, [pc, #52]	@ (80066f8 <HAL_RCC_OscConfig+0x26c>)
 80066c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0f0      	beq.n	80066b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80066ce:	2001      	movs	r0, #1
 80066d0:	f000 fa9c 	bl	8006c0c <RCC_Delay>
 80066d4:	e01c      	b.n	8006710 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006700 <HAL_RCC_OscConfig+0x274>)
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066dc:	f7ff fc34 	bl	8005f48 <HAL_GetTick>
 80066e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066e2:	e00f      	b.n	8006704 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066e4:	f7ff fc30 	bl	8005f48 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d908      	bls.n	8006704 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e146      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
 80066f6:	bf00      	nop
 80066f8:	40021000 	.word	0x40021000
 80066fc:	42420000 	.word	0x42420000
 8006700:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006704:	4b92      	ldr	r3, [pc, #584]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e9      	bne.n	80066e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 80a6 	beq.w	800686a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800671e:	2300      	movs	r3, #0
 8006720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006722:	4b8b      	ldr	r3, [pc, #556]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10d      	bne.n	800674a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800672e:	4b88      	ldr	r3, [pc, #544]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	4a87      	ldr	r2, [pc, #540]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006738:	61d3      	str	r3, [r2, #28]
 800673a:	4b85      	ldr	r3, [pc, #532]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006742:	60bb      	str	r3, [r7, #8]
 8006744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006746:	2301      	movs	r3, #1
 8006748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800674a:	4b82      	ldr	r3, [pc, #520]	@ (8006954 <HAL_RCC_OscConfig+0x4c8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006752:	2b00      	cmp	r3, #0
 8006754:	d118      	bne.n	8006788 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006756:	4b7f      	ldr	r3, [pc, #508]	@ (8006954 <HAL_RCC_OscConfig+0x4c8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a7e      	ldr	r2, [pc, #504]	@ (8006954 <HAL_RCC_OscConfig+0x4c8>)
 800675c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006762:	f7ff fbf1 	bl	8005f48 <HAL_GetTick>
 8006766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006768:	e008      	b.n	800677c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800676a:	f7ff fbed 	bl	8005f48 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b64      	cmp	r3, #100	@ 0x64
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e103      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800677c:	4b75      	ldr	r3, [pc, #468]	@ (8006954 <HAL_RCC_OscConfig+0x4c8>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f0      	beq.n	800676a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d106      	bne.n	800679e <HAL_RCC_OscConfig+0x312>
 8006790:	4b6f      	ldr	r3, [pc, #444]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	4a6e      	ldr	r2, [pc, #440]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006796:	f043 0301 	orr.w	r3, r3, #1
 800679a:	6213      	str	r3, [r2, #32]
 800679c:	e02d      	b.n	80067fa <HAL_RCC_OscConfig+0x36e>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10c      	bne.n	80067c0 <HAL_RCC_OscConfig+0x334>
 80067a6:	4b6a      	ldr	r3, [pc, #424]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	4a69      	ldr	r2, [pc, #420]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067ac:	f023 0301 	bic.w	r3, r3, #1
 80067b0:	6213      	str	r3, [r2, #32]
 80067b2:	4b67      	ldr	r3, [pc, #412]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	4a66      	ldr	r2, [pc, #408]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067b8:	f023 0304 	bic.w	r3, r3, #4
 80067bc:	6213      	str	r3, [r2, #32]
 80067be:	e01c      	b.n	80067fa <HAL_RCC_OscConfig+0x36e>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	2b05      	cmp	r3, #5
 80067c6:	d10c      	bne.n	80067e2 <HAL_RCC_OscConfig+0x356>
 80067c8:	4b61      	ldr	r3, [pc, #388]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	4a60      	ldr	r2, [pc, #384]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067ce:	f043 0304 	orr.w	r3, r3, #4
 80067d2:	6213      	str	r3, [r2, #32]
 80067d4:	4b5e      	ldr	r3, [pc, #376]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	4a5d      	ldr	r2, [pc, #372]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067da:	f043 0301 	orr.w	r3, r3, #1
 80067de:	6213      	str	r3, [r2, #32]
 80067e0:	e00b      	b.n	80067fa <HAL_RCC_OscConfig+0x36e>
 80067e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	4a5a      	ldr	r2, [pc, #360]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067e8:	f023 0301 	bic.w	r3, r3, #1
 80067ec:	6213      	str	r3, [r2, #32]
 80067ee:	4b58      	ldr	r3, [pc, #352]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	4a57      	ldr	r2, [pc, #348]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80067f4:	f023 0304 	bic.w	r3, r3, #4
 80067f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d015      	beq.n	800682e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006802:	f7ff fba1 	bl	8005f48 <HAL_GetTick>
 8006806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006808:	e00a      	b.n	8006820 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800680a:	f7ff fb9d 	bl	8005f48 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006818:	4293      	cmp	r3, r2
 800681a:	d901      	bls.n	8006820 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e0b1      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006820:	4b4b      	ldr	r3, [pc, #300]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0ee      	beq.n	800680a <HAL_RCC_OscConfig+0x37e>
 800682c:	e014      	b.n	8006858 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800682e:	f7ff fb8b 	bl	8005f48 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006834:	e00a      	b.n	800684c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7ff fb87 	bl	8005f48 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e09b      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800684c:	4b40      	ldr	r3, [pc, #256]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1ee      	bne.n	8006836 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d105      	bne.n	800686a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800685e:	4b3c      	ldr	r3, [pc, #240]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	4a3b      	ldr	r2, [pc, #236]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006868:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 8087 	beq.w	8006982 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006874:	4b36      	ldr	r3, [pc, #216]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f003 030c 	and.w	r3, r3, #12
 800687c:	2b08      	cmp	r3, #8
 800687e:	d061      	beq.n	8006944 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	2b02      	cmp	r3, #2
 8006886:	d146      	bne.n	8006916 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006888:	4b33      	ldr	r3, [pc, #204]	@ (8006958 <HAL_RCC_OscConfig+0x4cc>)
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800688e:	f7ff fb5b 	bl	8005f48 <HAL_GetTick>
 8006892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006894:	e008      	b.n	80068a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006896:	f7ff fb57 	bl	8005f48 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e06d      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068a8:	4b29      	ldr	r3, [pc, #164]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f0      	bne.n	8006896 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068bc:	d108      	bne.n	80068d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80068be:	4b24      	ldr	r3, [pc, #144]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	4921      	ldr	r1, [pc, #132]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a19      	ldr	r1, [r3, #32]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e0:	430b      	orrs	r3, r1
 80068e2:	491b      	ldr	r1, [pc, #108]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006958 <HAL_RCC_OscConfig+0x4cc>)
 80068ea:	2201      	movs	r2, #1
 80068ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ee:	f7ff fb2b 	bl	8005f48 <HAL_GetTick>
 80068f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068f4:	e008      	b.n	8006908 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068f6:	f7ff fb27 	bl	8005f48 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e03d      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006908:	4b11      	ldr	r3, [pc, #68]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0f0      	beq.n	80068f6 <HAL_RCC_OscConfig+0x46a>
 8006914:	e035      	b.n	8006982 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006916:	4b10      	ldr	r3, [pc, #64]	@ (8006958 <HAL_RCC_OscConfig+0x4cc>)
 8006918:	2200      	movs	r2, #0
 800691a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800691c:	f7ff fb14 	bl	8005f48 <HAL_GetTick>
 8006920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006924:	f7ff fb10 	bl	8005f48 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e026      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006936:	4b06      	ldr	r3, [pc, #24]	@ (8006950 <HAL_RCC_OscConfig+0x4c4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f0      	bne.n	8006924 <HAL_RCC_OscConfig+0x498>
 8006942:	e01e      	b.n	8006982 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d107      	bne.n	800695c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e019      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
 8006950:	40021000 	.word	0x40021000
 8006954:	40007000 	.word	0x40007000
 8006958:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800695c:	4b0b      	ldr	r3, [pc, #44]	@ (800698c <HAL_RCC_OscConfig+0x500>)
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	429a      	cmp	r2, r3
 800696e:	d106      	bne.n	800697e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800697a:	429a      	cmp	r2, r3
 800697c:	d001      	beq.n	8006982 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40021000 	.word	0x40021000

08006990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e0d0      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0307 	and.w	r3, r3, #7
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d910      	bls.n	80069d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069b2:	4b67      	ldr	r3, [pc, #412]	@ (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f023 0207 	bic.w	r2, r3, #7
 80069ba:	4965      	ldr	r1, [pc, #404]	@ (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	4313      	orrs	r3, r2
 80069c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c2:	4b63      	ldr	r3, [pc, #396]	@ (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0307 	and.w	r3, r3, #7
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d001      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0b8      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d020      	beq.n	8006a22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069ec:	4b59      	ldr	r3, [pc, #356]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4a58      	ldr	r2, [pc, #352]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 80069f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80069f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0308 	and.w	r3, r3, #8
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a04:	4b53      	ldr	r3, [pc, #332]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	4a52      	ldr	r2, [pc, #328]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006a0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a10:	4b50      	ldr	r3, [pc, #320]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	494d      	ldr	r1, [pc, #308]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d040      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d107      	bne.n	8006a46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a36:	4b47      	ldr	r3, [pc, #284]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d115      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e07f      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d107      	bne.n	8006a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a4e:	4b41      	ldr	r3, [pc, #260]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d109      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e073      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e06b      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a6e:	4b39      	ldr	r3, [pc, #228]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f023 0203 	bic.w	r2, r3, #3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	4936      	ldr	r1, [pc, #216]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a80:	f7ff fa62 	bl	8005f48 <HAL_GetTick>
 8006a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a86:	e00a      	b.n	8006a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a88:	f7ff fa5e 	bl	8005f48 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e053      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f003 020c 	and.w	r2, r3, #12
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d1eb      	bne.n	8006a88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ab0:	4b27      	ldr	r3, [pc, #156]	@ (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0307 	and.w	r3, r3, #7
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d210      	bcs.n	8006ae0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006abe:	4b24      	ldr	r3, [pc, #144]	@ (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f023 0207 	bic.w	r2, r3, #7
 8006ac6:	4922      	ldr	r1, [pc, #136]	@ (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ace:	4b20      	ldr	r3, [pc, #128]	@ (8006b50 <HAL_RCC_ClockConfig+0x1c0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d001      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e032      	b.n	8006b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006aec:	4b19      	ldr	r3, [pc, #100]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	4916      	ldr	r1, [pc, #88]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d009      	beq.n	8006b1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b0a:	4b12      	ldr	r3, [pc, #72]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	00db      	lsls	r3, r3, #3
 8006b18:	490e      	ldr	r1, [pc, #56]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b1e:	f000 f821 	bl	8006b64 <HAL_RCC_GetSysClockFreq>
 8006b22:	4602      	mov	r2, r0
 8006b24:	4b0b      	ldr	r3, [pc, #44]	@ (8006b54 <HAL_RCC_ClockConfig+0x1c4>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	091b      	lsrs	r3, r3, #4
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	490a      	ldr	r1, [pc, #40]	@ (8006b58 <HAL_RCC_ClockConfig+0x1c8>)
 8006b30:	5ccb      	ldrb	r3, [r1, r3]
 8006b32:	fa22 f303 	lsr.w	r3, r2, r3
 8006b36:	4a09      	ldr	r2, [pc, #36]	@ (8006b5c <HAL_RCC_ClockConfig+0x1cc>)
 8006b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b3a:	4b09      	ldr	r3, [pc, #36]	@ (8006b60 <HAL_RCC_ClockConfig+0x1d0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7ff f9c0 	bl	8005ec4 <HAL_InitTick>

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	40022000 	.word	0x40022000
 8006b54:	40021000 	.word	0x40021000
 8006b58:	08007808 	.word	0x08007808
 8006b5c:	20000000 	.word	0x20000000
 8006b60:	20000004 	.word	0x20000004

08006b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60bb      	str	r3, [r7, #8]
 8006b72:	2300      	movs	r3, #0
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	2300      	movs	r3, #0
 8006b78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8006bf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 030c 	and.w	r3, r3, #12
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d002      	beq.n	8006b94 <HAL_RCC_GetSysClockFreq+0x30>
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d003      	beq.n	8006b9a <HAL_RCC_GetSysClockFreq+0x36>
 8006b92:	e027      	b.n	8006be4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b94:	4b19      	ldr	r3, [pc, #100]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x98>)
 8006b96:	613b      	str	r3, [r7, #16]
      break;
 8006b98:	e027      	b.n	8006bea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	0c9b      	lsrs	r3, r3, #18
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	4a17      	ldr	r2, [pc, #92]	@ (8006c00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006ba4:	5cd3      	ldrb	r3, [r2, r3]
 8006ba6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d010      	beq.n	8006bd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006bb2:	4b11      	ldr	r3, [pc, #68]	@ (8006bf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	0c5b      	lsrs	r3, r3, #17
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	4a11      	ldr	r2, [pc, #68]	@ (8006c04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006bbe:	5cd3      	ldrb	r3, [r2, r3]
 8006bc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x98>)
 8006bc6:	fb03 f202 	mul.w	r2, r3, r2
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	e004      	b.n	8006bde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006c08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006bd8:	fb02 f303 	mul.w	r3, r2, r3
 8006bdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	613b      	str	r3, [r7, #16]
      break;
 8006be2:	e002      	b.n	8006bea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006be4:	4b05      	ldr	r3, [pc, #20]	@ (8006bfc <HAL_RCC_GetSysClockFreq+0x98>)
 8006be6:	613b      	str	r3, [r7, #16]
      break;
 8006be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bea:	693b      	ldr	r3, [r7, #16]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	007a1200 	.word	0x007a1200
 8006c00:	08007818 	.word	0x08007818
 8006c04:	08007828 	.word	0x08007828
 8006c08:	003d0900 	.word	0x003d0900

08006c0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006c14:	4b0a      	ldr	r3, [pc, #40]	@ (8006c40 <RCC_Delay+0x34>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a0a      	ldr	r2, [pc, #40]	@ (8006c44 <RCC_Delay+0x38>)
 8006c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1e:	0a5b      	lsrs	r3, r3, #9
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	fb02 f303 	mul.w	r3, r2, r3
 8006c26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c28:	bf00      	nop
  }
  while (Delay --);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	1e5a      	subs	r2, r3, #1
 8006c2e:	60fa      	str	r2, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1f9      	bne.n	8006c28 <RCC_Delay+0x1c>
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr
 8006c40:	20000000 	.word	0x20000000
 8006c44:	10624dd3 	.word	0x10624dd3

08006c48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e076      	b.n	8006d48 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d108      	bne.n	8006c74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c6a:	d009      	beq.n	8006c80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	61da      	str	r2, [r3, #28]
 8006c72:	e005      	b.n	8006c80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d106      	bne.n	8006ca0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff f826 	bl	8005cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d04:	ea42 0103 	orr.w	r1, r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	0c1a      	lsrs	r2, r3, #16
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f002 0204 	and.w	r2, r2, #4
 8006d26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69da      	ldr	r2, [r3, #28]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d60:	f7ff f8f2 	bl	8005f48 <HAL_GetTick>
 8006d64:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006d66:	88fb      	ldrh	r3, [r7, #6]
 8006d68:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d001      	beq.n	8006d7a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006d76:	2302      	movs	r3, #2
 8006d78:	e12a      	b.n	8006fd0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <HAL_SPI_Transmit+0x36>
 8006d80:	88fb      	ldrh	r3, [r7, #6]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e122      	b.n	8006fd0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_SPI_Transmit+0x48>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e11b      	b.n	8006fd0 <HAL_SPI_Transmit+0x280>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2203      	movs	r2, #3
 8006da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	88fa      	ldrh	r2, [r7, #6]
 8006db8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	88fa      	ldrh	r2, [r7, #6]
 8006dbe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006de6:	d10f      	bne.n	8006e08 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006df6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e12:	2b40      	cmp	r3, #64	@ 0x40
 8006e14:	d007      	beq.n	8006e26 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e2e:	d152      	bne.n	8006ed6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_SPI_Transmit+0xee>
 8006e38:	8b7b      	ldrh	r3, [r7, #26]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d145      	bne.n	8006eca <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e42:	881a      	ldrh	r2, [r3, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4e:	1c9a      	adds	r2, r3, #2
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e62:	e032      	b.n	8006eca <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d112      	bne.n	8006e98 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e76:	881a      	ldrh	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e82:	1c9a      	adds	r2, r3, #2
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e96:	e018      	b.n	8006eca <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e98:	f7ff f856 	bl	8005f48 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d803      	bhi.n	8006eb0 <HAL_SPI_Transmit+0x160>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eae:	d102      	bne.n	8006eb6 <HAL_SPI_Transmit+0x166>
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e082      	b.n	8006fd0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1c7      	bne.n	8006e64 <HAL_SPI_Transmit+0x114>
 8006ed4:	e053      	b.n	8006f7e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <HAL_SPI_Transmit+0x194>
 8006ede:	8b7b      	ldrh	r3, [r7, #26]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d147      	bne.n	8006f74 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	7812      	ldrb	r2, [r2, #0]
 8006ef0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f0a:	e033      	b.n	8006f74 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d113      	bne.n	8006f42 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	7812      	ldrb	r2, [r2, #0]
 8006f26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f40:	e018      	b.n	8006f74 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f42:	f7ff f801 	bl	8005f48 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d803      	bhi.n	8006f5a <HAL_SPI_Transmit+0x20a>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d102      	bne.n	8006f60 <HAL_SPI_Transmit+0x210>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d109      	bne.n	8006f74 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e02d      	b.n	8006fd0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1c6      	bne.n	8006f0c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 fbc4 	bl	8007710 <SPI_EndRxTxTransaction>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2220      	movs	r2, #32
 8006f92:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10a      	bne.n	8006fb2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	617b      	str	r3, [r7, #20]
 8006fb0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006fce:	2300      	movs	r3, #0
  }
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d001      	beq.n	8006ff8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e104      	b.n	8007202 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007000:	d112      	bne.n	8007028 <HAL_SPI_Receive+0x50>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10e      	bne.n	8007028 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2204      	movs	r2, #4
 800700e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007012:	88fa      	ldrh	r2, [r7, #6]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	4613      	mov	r3, r2
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	68b9      	ldr	r1, [r7, #8]
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 f8f3 	bl	800720a <HAL_SPI_TransmitReceive>
 8007024:	4603      	mov	r3, r0
 8007026:	e0ec      	b.n	8007202 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007028:	f7fe ff8e 	bl	8005f48 <HAL_GetTick>
 800702c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <HAL_SPI_Receive+0x62>
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d101      	bne.n	800703e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e0e1      	b.n	8007202 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <HAL_SPI_Receive+0x74>
 8007048:	2302      	movs	r3, #2
 800704a:	e0da      	b.n	8007202 <HAL_SPI_Receive+0x22a>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2204      	movs	r2, #4
 8007058:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	88fa      	ldrh	r2, [r7, #6]
 800706c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	88fa      	ldrh	r2, [r7, #6]
 8007072:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800709a:	d10f      	bne.n	80070bc <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80070ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c6:	2b40      	cmp	r3, #64	@ 0x40
 80070c8:	d007      	beq.n	80070da <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d170      	bne.n	80071c4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070e2:	e035      	b.n	8007150 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d115      	bne.n	800711e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f103 020c 	add.w	r2, r3, #12
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007112:	b29b      	uxth	r3, r3
 8007114:	3b01      	subs	r3, #1
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800711c:	e018      	b.n	8007150 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800711e:	f7fe ff13 	bl	8005f48 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	429a      	cmp	r2, r3
 800712c:	d803      	bhi.n	8007136 <HAL_SPI_Receive+0x15e>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007134:	d102      	bne.n	800713c <HAL_SPI_Receive+0x164>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d109      	bne.n	8007150 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e058      	b.n	8007202 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1c4      	bne.n	80070e4 <HAL_SPI_Receive+0x10c>
 800715a:	e038      	b.n	80071ce <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b01      	cmp	r3, #1
 8007168:	d113      	bne.n	8007192 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007174:	b292      	uxth	r2, r2
 8007176:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800717c:	1c9a      	adds	r2, r3, #2
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007186:	b29b      	uxth	r3, r3
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007190:	e018      	b.n	80071c4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007192:	f7fe fed9 	bl	8005f48 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d803      	bhi.n	80071aa <HAL_SPI_Receive+0x1d2>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a8:	d102      	bne.n	80071b0 <HAL_SPI_Receive+0x1d8>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d109      	bne.n	80071c4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e01e      	b.n	8007202 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1c6      	bne.n	800715c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 fa4a 	bl	800766c <SPI_EndRxTransaction>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e000      	b.n	8007202 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007200:	2300      	movs	r3, #0
  }
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b08a      	sub	sp, #40	@ 0x28
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	607a      	str	r2, [r7, #4]
 8007216:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007218:	2301      	movs	r3, #1
 800721a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800721c:	f7fe fe94 	bl	8005f48 <HAL_GetTick>
 8007220:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007228:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007230:	887b      	ldrh	r3, [r7, #2]
 8007232:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007234:	7ffb      	ldrb	r3, [r7, #31]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d00c      	beq.n	8007254 <HAL_SPI_TransmitReceive+0x4a>
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007240:	d106      	bne.n	8007250 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d102      	bne.n	8007250 <HAL_SPI_TransmitReceive+0x46>
 800724a:	7ffb      	ldrb	r3, [r7, #31]
 800724c:	2b04      	cmp	r3, #4
 800724e:	d001      	beq.n	8007254 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007250:	2302      	movs	r3, #2
 8007252:	e17f      	b.n	8007554 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d005      	beq.n	8007266 <HAL_SPI_TransmitReceive+0x5c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <HAL_SPI_TransmitReceive+0x5c>
 8007260:	887b      	ldrh	r3, [r7, #2]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e174      	b.n	8007554 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_SPI_TransmitReceive+0x6e>
 8007274:	2302      	movs	r3, #2
 8007276:	e16d      	b.n	8007554 <HAL_SPI_TransmitReceive+0x34a>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b04      	cmp	r3, #4
 800728a:	d003      	beq.n	8007294 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2205      	movs	r2, #5
 8007290:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	887a      	ldrh	r2, [r7, #2]
 80072a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	887a      	ldrh	r2, [r7, #2]
 80072aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	887a      	ldrh	r2, [r7, #2]
 80072b6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	887a      	ldrh	r2, [r7, #2]
 80072bc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d4:	2b40      	cmp	r3, #64	@ 0x40
 80072d6:	d007      	beq.n	80072e8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072f0:	d17e      	bne.n	80073f0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_SPI_TransmitReceive+0xf6>
 80072fa:	8afb      	ldrh	r3, [r7, #22]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d16c      	bne.n	80073da <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007304:	881a      	ldrh	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007310:	1c9a      	adds	r2, r3, #2
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800731a:	b29b      	uxth	r3, r3
 800731c:	3b01      	subs	r3, #1
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007324:	e059      	b.n	80073da <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b02      	cmp	r3, #2
 8007332:	d11b      	bne.n	800736c <HAL_SPI_TransmitReceive+0x162>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d016      	beq.n	800736c <HAL_SPI_TransmitReceive+0x162>
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	2b01      	cmp	r3, #1
 8007342:	d113      	bne.n	800736c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007348:	881a      	ldrh	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007354:	1c9a      	adds	r2, r3, #2
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800735e:	b29b      	uxth	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	b29a      	uxth	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b01      	cmp	r3, #1
 8007378:	d119      	bne.n	80073ae <HAL_SPI_TransmitReceive+0x1a4>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d014      	beq.n	80073ae <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738e:	b292      	uxth	r2, r2
 8007390:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007396:	1c9a      	adds	r2, r3, #2
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073aa:	2301      	movs	r3, #1
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073ae:	f7fe fdcb 	bl	8005f48 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d80d      	bhi.n	80073da <HAL_SPI_TransmitReceive+0x1d0>
 80073be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d009      	beq.n	80073da <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e0bc      	b.n	8007554 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073de:	b29b      	uxth	r3, r3
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1a0      	bne.n	8007326 <HAL_SPI_TransmitReceive+0x11c>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d19b      	bne.n	8007326 <HAL_SPI_TransmitReceive+0x11c>
 80073ee:	e082      	b.n	80074f6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <HAL_SPI_TransmitReceive+0x1f4>
 80073f8:	8afb      	ldrh	r3, [r7, #22]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d171      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	330c      	adds	r3, #12
 8007408:	7812      	ldrb	r2, [r2, #0]
 800740a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007424:	e05d      	b.n	80074e2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b02      	cmp	r3, #2
 8007432:	d11c      	bne.n	800746e <HAL_SPI_TransmitReceive+0x264>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007438:	b29b      	uxth	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d017      	beq.n	800746e <HAL_SPI_TransmitReceive+0x264>
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	2b01      	cmp	r3, #1
 8007442:	d114      	bne.n	800746e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	330c      	adds	r3, #12
 800744e:	7812      	ldrb	r2, [r2, #0]
 8007450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b01      	cmp	r3, #1
 800747a:	d119      	bne.n	80074b0 <HAL_SPI_TransmitReceive+0x2a6>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007480:	b29b      	uxth	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d014      	beq.n	80074b0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68da      	ldr	r2, [r3, #12]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074ac:	2301      	movs	r3, #1
 80074ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074b0:	f7fe fd4a 	bl	8005f48 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074bc:	429a      	cmp	r2, r3
 80074be:	d803      	bhi.n	80074c8 <HAL_SPI_TransmitReceive+0x2be>
 80074c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c6:	d102      	bne.n	80074ce <HAL_SPI_TransmitReceive+0x2c4>
 80074c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d109      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e038      	b.n	8007554 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d19c      	bne.n	8007426 <HAL_SPI_TransmitReceive+0x21c>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d197      	bne.n	8007426 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 f908 	bl	8007710 <SPI_EndRxTxTransaction>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d008      	beq.n	8007518 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2220      	movs	r2, #32
 800750a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e01d      	b.n	8007554 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007520:	2300      	movs	r3, #0
 8007522:	613b      	str	r3, [r7, #16]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	613b      	str	r3, [r7, #16]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800754a:	2b00      	cmp	r3, #0
 800754c:	d001      	beq.n	8007552 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e000      	b.n	8007554 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007552:	2300      	movs	r3, #0
  }
}
 8007554:	4618      	mov	r0, r3
 8007556:	3728      	adds	r7, #40	@ 0x28
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b088      	sub	sp, #32
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	4613      	mov	r3, r2
 800756a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800756c:	f7fe fcec 	bl	8005f48 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	4413      	add	r3, r2
 800757a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800757c:	f7fe fce4 	bl	8005f48 <HAL_GetTick>
 8007580:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007582:	4b39      	ldr	r3, [pc, #228]	@ (8007668 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	015b      	lsls	r3, r3, #5
 8007588:	0d1b      	lsrs	r3, r3, #20
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	fb02 f303 	mul.w	r3, r2, r3
 8007590:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007592:	e054      	b.n	800763e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759a:	d050      	beq.n	800763e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800759c:	f7fe fcd4 	bl	8005f48 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d902      	bls.n	80075b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d13d      	bne.n	800762e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80075c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075ca:	d111      	bne.n	80075f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075d4:	d004      	beq.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075de:	d107      	bne.n	80075f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f8:	d10f      	bne.n	800761a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e017      	b.n	800765e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	3b01      	subs	r3, #1
 800763c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4013      	ands	r3, r2
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	429a      	cmp	r2, r3
 800764c:	bf0c      	ite	eq
 800764e:	2301      	moveq	r3, #1
 8007650:	2300      	movne	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	461a      	mov	r2, r3
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	429a      	cmp	r2, r3
 800765a:	d19b      	bne.n	8007594 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3720      	adds	r7, #32
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000000 	.word	0x20000000

0800766c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af02      	add	r7, sp, #8
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007680:	d111      	bne.n	80076a6 <SPI_EndRxTransaction+0x3a>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800768a:	d004      	beq.n	8007696 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007694:	d107      	bne.n	80076a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076a4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076ae:	d117      	bne.n	80076e0 <SPI_EndRxTransaction+0x74>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076b8:	d112      	bne.n	80076e0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2200      	movs	r2, #0
 80076c2:	2101      	movs	r1, #1
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f7ff ff49 	bl	800755c <SPI_WaitFlagStateUntilTimeout>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01a      	beq.n	8007706 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d4:	f043 0220 	orr.w	r2, r3, #32
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e013      	b.n	8007708 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2200      	movs	r2, #0
 80076e8:	2180      	movs	r1, #128	@ 0x80
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7ff ff36 	bl	800755c <SPI_WaitFlagStateUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d007      	beq.n	8007706 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076fa:	f043 0220 	orr.w	r2, r3, #32
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e000      	b.n	8007708 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af02      	add	r7, sp, #8
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	2201      	movs	r2, #1
 8007724:	2102      	movs	r1, #2
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7ff ff18 	bl	800755c <SPI_WaitFlagStateUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d007      	beq.n	8007742 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007736:	f043 0220 	orr.w	r2, r3, #32
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e013      	b.n	800776a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2200      	movs	r2, #0
 800774a:	2180      	movs	r1, #128	@ 0x80
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f7ff ff05 	bl	800755c <SPI_WaitFlagStateUntilTimeout>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d007      	beq.n	8007768 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800775c:	f043 0220 	orr.w	r2, r3, #32
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e000      	b.n	800776a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <memset>:
 8007772:	4603      	mov	r3, r0
 8007774:	4402      	add	r2, r0
 8007776:	4293      	cmp	r3, r2
 8007778:	d100      	bne.n	800777c <memset+0xa>
 800777a:	4770      	bx	lr
 800777c:	f803 1b01 	strb.w	r1, [r3], #1
 8007780:	e7f9      	b.n	8007776 <memset+0x4>
	...

08007784 <__libc_init_array>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	2600      	movs	r6, #0
 8007788:	4d0c      	ldr	r5, [pc, #48]	@ (80077bc <__libc_init_array+0x38>)
 800778a:	4c0d      	ldr	r4, [pc, #52]	@ (80077c0 <__libc_init_array+0x3c>)
 800778c:	1b64      	subs	r4, r4, r5
 800778e:	10a4      	asrs	r4, r4, #2
 8007790:	42a6      	cmp	r6, r4
 8007792:	d109      	bne.n	80077a8 <__libc_init_array+0x24>
 8007794:	f000 f81a 	bl	80077cc <_init>
 8007798:	2600      	movs	r6, #0
 800779a:	4d0a      	ldr	r5, [pc, #40]	@ (80077c4 <__libc_init_array+0x40>)
 800779c:	4c0a      	ldr	r4, [pc, #40]	@ (80077c8 <__libc_init_array+0x44>)
 800779e:	1b64      	subs	r4, r4, r5
 80077a0:	10a4      	asrs	r4, r4, #2
 80077a2:	42a6      	cmp	r6, r4
 80077a4:	d105      	bne.n	80077b2 <__libc_init_array+0x2e>
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
 80077a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ac:	4798      	blx	r3
 80077ae:	3601      	adds	r6, #1
 80077b0:	e7ee      	b.n	8007790 <__libc_init_array+0xc>
 80077b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077b6:	4798      	blx	r3
 80077b8:	3601      	adds	r6, #1
 80077ba:	e7f2      	b.n	80077a2 <__libc_init_array+0x1e>
 80077bc:	0800782c 	.word	0x0800782c
 80077c0:	0800782c 	.word	0x0800782c
 80077c4:	0800782c 	.word	0x0800782c
 80077c8:	08007830 	.word	0x08007830

080077cc <_init>:
 80077cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ce:	bf00      	nop
 80077d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077d2:	bc08      	pop	{r3}
 80077d4:	469e      	mov	lr, r3
 80077d6:	4770      	bx	lr

080077d8 <_fini>:
 80077d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077da:	bf00      	nop
 80077dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077de:	bc08      	pop	{r3}
 80077e0:	469e      	mov	lr, r3
 80077e2:	4770      	bx	lr
