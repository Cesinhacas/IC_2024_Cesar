
MCS_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009440  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08009608  08009608  0000a608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800965c  0800965c  0000b05c  2**0
                  CONTENTS
  4 .ARM          00000008  0800965c  0800965c  0000a65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009664  08009664  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009664  08009664  0000a664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009668  08009668  0000a668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800966c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a3c  2000005c  080096c8  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006a98  080096c8  0000ba98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007967  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e3  00000000  00000000  000129f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  000143d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000548  00000000  00000000  00014b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217db  00000000  00000000  00015048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca44  00000000  00000000  00036823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c816e  00000000  00000000  00043267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b3d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f00  00000000  00000000  0010b418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010d318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080095f0 	.word	0x080095f0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	080095f0 	.word	0x080095f0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b96a 	b.w	8000e40 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14e      	bne.n	8000c2e <__udivmoddi4+0xaa>
 8000b90:	4694      	mov	ip, r2
 8000b92:	458c      	cmp	ip, r1
 8000b94:	4686      	mov	lr, r0
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	d962      	bls.n	8000c62 <__udivmoddi4+0xde>
 8000b9c:	b14a      	cbz	r2, 8000bb2 <__udivmoddi4+0x2e>
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	4091      	lsls	r1, r2
 8000ba4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bac:	4319      	orrs	r1, r3
 8000bae:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb6:	fa1f f68c 	uxth.w	r6, ip
 8000bba:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bca:	fb04 f106 	mul.w	r1, r4, r6
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x64>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bda:	f080 8112 	bcs.w	8000e02 <__udivmoddi4+0x27e>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 810f 	bls.w	8000e02 <__udivmoddi4+0x27e>
 8000be4:	3c02      	subs	r4, #2
 8000be6:	4463      	add	r3, ip
 8000be8:	1a59      	subs	r1, r3, r1
 8000bea:	fa1f f38e 	uxth.w	r3, lr
 8000bee:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfa:	fb00 f606 	mul.w	r6, r0, r6
 8000bfe:	429e      	cmp	r6, r3
 8000c00:	d90a      	bls.n	8000c18 <__udivmoddi4+0x94>
 8000c02:	eb1c 0303 	adds.w	r3, ip, r3
 8000c06:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0a:	f080 80fc 	bcs.w	8000e06 <__udivmoddi4+0x282>
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	f240 80f9 	bls.w	8000e06 <__udivmoddi4+0x282>
 8000c14:	4463      	add	r3, ip
 8000c16:	3802      	subs	r0, #2
 8000c18:	1b9b      	subs	r3, r3, r6
 8000c1a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa6>
 8000c22:	40d3      	lsrs	r3, r2
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xba>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb4>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x150>
 8000c46:	42a3      	cmp	r3, r4
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xcc>
 8000c4a:	4290      	cmp	r0, r2
 8000c4c:	f0c0 80f0 	bcc.w	8000e30 <__udivmoddi4+0x2ac>
 8000c50:	1a86      	subs	r6, r0, r2
 8000c52:	eb64 0303 	sbc.w	r3, r4, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	2d00      	cmp	r5, #0
 8000c5a:	d0e6      	beq.n	8000c2a <__udivmoddi4+0xa6>
 8000c5c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c60:	e7e3      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000c62:	2a00      	cmp	r2, #0
 8000c64:	f040 8090 	bne.w	8000d88 <__udivmoddi4+0x204>
 8000c68:	eba1 040c 	sub.w	r4, r1, ip
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	fa1f f78c 	uxth.w	r7, ip
 8000c74:	2101      	movs	r1, #1
 8000c76:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c86:	fb07 f006 	mul.w	r0, r7, r6
 8000c8a:	4298      	cmp	r0, r3
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x11c>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x11a>
 8000c98:	4298      	cmp	r0, r3
 8000c9a:	f200 80cd 	bhi.w	8000e38 <__udivmoddi4+0x2b4>
 8000c9e:	4626      	mov	r6, r4
 8000ca0:	1a1c      	subs	r4, r3, r0
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000caa:	fb08 4410 	mls	r4, r8, r0, r4
 8000cae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb2:	fb00 f707 	mul.w	r7, r0, r7
 8000cb6:	429f      	cmp	r7, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x148>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x146>
 8000cc4:	429f      	cmp	r7, r3
 8000cc6:	f200 80b0 	bhi.w	8000e2a <__udivmoddi4+0x2a6>
 8000cca:	4620      	mov	r0, r4
 8000ccc:	1bdb      	subs	r3, r3, r7
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x9c>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce8:	ea43 030c 	orr.w	r3, r3, ip
 8000cec:	40f4      	lsrs	r4, r6
 8000cee:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf2:	0c38      	lsrs	r0, r7, #16
 8000cf4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cfc:	fa1f fc87 	uxth.w	ip, r7
 8000d00:	fb00 441e 	mls	r4, r0, lr, r4
 8000d04:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d08:	fb0e f90c 	mul.w	r9, lr, ip
 8000d0c:	45a1      	cmp	r9, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x1a6>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1a:	f080 8084 	bcs.w	8000e26 <__udivmoddi4+0x2a2>
 8000d1e:	45a1      	cmp	r9, r4
 8000d20:	f240 8081 	bls.w	8000e26 <__udivmoddi4+0x2a2>
 8000d24:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d28:	443c      	add	r4, r7
 8000d2a:	eba4 0409 	sub.w	r4, r4, r9
 8000d2e:	fa1f f983 	uxth.w	r9, r3
 8000d32:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d36:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d42:	45a4      	cmp	ip, r4
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x1d2>
 8000d46:	193c      	adds	r4, r7, r4
 8000d48:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d4c:	d267      	bcs.n	8000e1e <__udivmoddi4+0x29a>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d965      	bls.n	8000e1e <__udivmoddi4+0x29a>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5e:	eba4 040c 	sub.w	r4, r4, ip
 8000d62:	429c      	cmp	r4, r3
 8000d64:	46ce      	mov	lr, r9
 8000d66:	469c      	mov	ip, r3
 8000d68:	d351      	bcc.n	8000e0e <__udivmoddi4+0x28a>
 8000d6a:	d04e      	beq.n	8000e0a <__udivmoddi4+0x286>
 8000d6c:	b155      	cbz	r5, 8000d84 <__udivmoddi4+0x200>
 8000d6e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d72:	eb64 040c 	sbc.w	r4, r4, ip
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	40cb      	lsrs	r3, r1
 8000d7c:	431e      	orrs	r6, r3
 8000d7e:	40cc      	lsrs	r4, r1
 8000d80:	e9c5 6400 	strd	r6, r4, [r5]
 8000d84:	2100      	movs	r1, #0
 8000d86:	e750      	b.n	8000c2a <__udivmoddi4+0xa6>
 8000d88:	f1c2 0320 	rsb	r3, r2, #32
 8000d8c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d94:	fa24 f303 	lsr.w	r3, r4, r3
 8000d98:	4094      	lsls	r4, r2
 8000d9a:	430c      	orrs	r4, r1
 8000d9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3110 	mls	r1, r8, r0, r3
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db6:	fb00 f107 	mul.w	r1, r0, r7
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x24c>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc6:	d22c      	bcs.n	8000e22 <__udivmoddi4+0x29e>
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d92a      	bls.n	8000e22 <__udivmoddi4+0x29e>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	4463      	add	r3, ip
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de0:	fb01 f307 	mul.w	r3, r1, r7
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x276>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df0:	d213      	bcs.n	8000e1a <__udivmoddi4+0x296>
 8000df2:	42a3      	cmp	r3, r4
 8000df4:	d911      	bls.n	8000e1a <__udivmoddi4+0x296>
 8000df6:	3902      	subs	r1, #2
 8000df8:	4464      	add	r4, ip
 8000dfa:	1ae4      	subs	r4, r4, r3
 8000dfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e00:	e739      	b.n	8000c76 <__udivmoddi4+0xf2>
 8000e02:	4604      	mov	r4, r0
 8000e04:	e6f0      	b.n	8000be8 <__udivmoddi4+0x64>
 8000e06:	4608      	mov	r0, r1
 8000e08:	e706      	b.n	8000c18 <__udivmoddi4+0x94>
 8000e0a:	45c8      	cmp	r8, r9
 8000e0c:	d2ae      	bcs.n	8000d6c <__udivmoddi4+0x1e8>
 8000e0e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e12:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e16:	3801      	subs	r0, #1
 8000e18:	e7a8      	b.n	8000d6c <__udivmoddi4+0x1e8>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	e7ed      	b.n	8000dfa <__udivmoddi4+0x276>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	e799      	b.n	8000d56 <__udivmoddi4+0x1d2>
 8000e22:	4630      	mov	r0, r6
 8000e24:	e7d4      	b.n	8000dd0 <__udivmoddi4+0x24c>
 8000e26:	46d6      	mov	lr, sl
 8000e28:	e77f      	b.n	8000d2a <__udivmoddi4+0x1a6>
 8000e2a:	4463      	add	r3, ip
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	e74d      	b.n	8000ccc <__udivmoddi4+0x148>
 8000e30:	4606      	mov	r6, r0
 8000e32:	4623      	mov	r3, r4
 8000e34:	4608      	mov	r0, r1
 8000e36:	e70f      	b.n	8000c58 <__udivmoddi4+0xd4>
 8000e38:	3e02      	subs	r6, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	e730      	b.n	8000ca0 <__udivmoddi4+0x11c>
 8000e3e:	bf00      	nop

08000e40 <__aeabi_idiv0>:
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop

08000e44 <inverter_matriz>:
#include <stdlib.h>
#include <math.h>
#include "calib.h"

void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 8000e44:	b480      	push	{r7}
 8000e46:	b08b      	sub	sp, #44	@ 0x2c
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 8000e4e:	2300      	movs	r3, #0
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e52:	e02c      	b.n	8000eae <inverter_matriz+0x6a>
        for (int j = 0; j < N; j++) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
 8000e58:	e023      	b.n	8000ea2 <inverter_matriz+0x5e>
            if (i == j) {
 8000e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d10e      	bne.n	8000e80 <inverter_matriz+0x3c>
                inversa[i][j] = 1;
 8000e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e64:	4613      	mov	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	441a      	add	r2, r3
 8000e72:	6a3b      	ldr	r3, [r7, #32]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	e00d      	b.n	8000e9c <inverter_matriz+0x58>
            } else {
                inversa[i][j] = 0;
 8000e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e82:	4613      	mov	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4413      	add	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	441a      	add	r2, r3
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < N; j++) {
 8000e9c:	6a3b      	ldr	r3, [r7, #32]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	623b      	str	r3, [r7, #32]
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	ddd8      	ble.n	8000e5a <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eaa:	3301      	adds	r3, #1
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	ddcf      	ble.n	8000e54 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
 8000eb8:	e0d1      	b.n	800105e <inverter_matriz+0x21a>
    {
        float pivot = matriz[i][i];
 8000eba:	69fa      	ldr	r2, [r7, #28]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	4413      	add	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	441a      	add	r2, r3
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	e03e      	b.n	8000f58 <inverter_matriz+0x114>
        {
            matriz[i][j] /= pivot;
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	4613      	mov	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	441a      	add	r2, r3
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	edd3 6a00 	vldr	s13, [r3]
 8000ef4:	69fa      	ldr	r2, [r7, #28]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4413      	add	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	461a      	mov	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	441a      	add	r2, r3
 8000f04:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	edc3 7a00 	vstr	s15, [r3]
            inversa[i][j] /= pivot;
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	461a      	mov	r2, r3
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	441a      	add	r2, r3
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	edd3 6a00 	vldr	s13, [r3]
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	4613      	mov	r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4413      	add	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	441a      	add	r2, r3
 8000f40:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < N; j++)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	3301      	adds	r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	ddbd      	ble.n	8000eda <inverter_matriz+0x96>
        }

        for (int k = 0; k < N; k++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	e076      	b.n	8001052 <inverter_matriz+0x20e>
        {
            if (k != i)
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d06f      	beq.n	800104c <inverter_matriz+0x208>
            {
                float fator = matriz[k][i];
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4413      	add	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	461a      	mov	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	441a      	add	r2, r3
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	e05c      	b.n	8001046 <inverter_matriz+0x202>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	441a      	add	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	ed93 7a00 	vldr	s14, [r3]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	441a      	add	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	4413      	add	r3, r2
 8000fbc:	edd3 6a00 	vldr	s13, [r3]
 8000fc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	441a      	add	r2, r3
 8000fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	edc3 7a00 	vstr	s15, [r3]
                    inversa[k][j] -= fator * inversa[i][j];
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	441a      	add	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	ed93 7a00 	vldr	s14, [r3]
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	4613      	mov	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	461a      	mov	r2, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	441a      	add	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	edd3 6a00 	vldr	s13, [r3]
 800101a:	edd7 7a02 	vldr	s15, [r7, #8]
 800101e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	461a      	mov	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	441a      	add	r2, r3
 8001032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	edc3 7a00 	vstr	s15, [r3]
                for (int j = 0; j < N; j++)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	3301      	adds	r3, #1
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	2b08      	cmp	r3, #8
 800104a:	dd9f      	ble.n	8000f8c <inverter_matriz+0x148>
        for (int k = 0; k < N; k++)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2b08      	cmp	r3, #8
 8001056:	dd85      	ble.n	8000f64 <inverter_matriz+0x120>
    for (int i = 0; i < N; i++)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	3301      	adds	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	2b08      	cmp	r3, #8
 8001062:	f77f af2a 	ble.w	8000eba <inverter_matriz+0x76>
                }
            }
        }
    }
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	372c      	adds	r7, #44	@ 0x2c
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	0000      	movs	r0, r0
	...

08001078 <NLLS>:


uint8_t NLLS(float *mx, float *my, float *mz, float *p)
{
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	f5ad 3db8 	sub.w	sp, sp, #94208	@ 0x17000
 800107e:	b090      	sub	sp, #64	@ 0x40
 8001080:	af00      	add	r7, sp, #0
 8001082:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001086:	f844 0c34 	str.w	r0, [r4, #-52]
 800108a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800108e:	f840 1c38 	str.w	r1, [r0, #-56]
 8001092:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001096:	f841 2c3c 	str.w	r2, [r1, #-60]
 800109a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800109e:	f842 3c40 	str.w	r3, [r2, #-64]
	uint8_t passo = 0, loop = 1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80010a8:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 80010ac:	7013      	strb	r3, [r2, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80010b4:	f102 023e 	add.w	r2, r2, #62	@ 0x3e
 80010b8:	7013      	strb	r3, [r2, #0]
	float sf = 1;
 80010ba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80010be:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80010c2:	f502 72ee 	add.w	r2, r2, #476	@ 0x1dc
 80010c6:	6013      	str	r3, [r2, #0]
	float p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J, mat_H[N][tam];
 80010c8:	4ba2      	ldr	r3, [pc, #648]	@ (8001354 <NLLS+0x2dc>)
 80010ca:	f507 34b7 	add.w	r4, r7, #93696	@ 0x16e00
 80010ce:	f504 74ce 	add.w	r4, r4, #412	@ 0x19c
 80010d2:	461d      	mov	r5, r3
 80010d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010dc:	682b      	ldr	r3, [r5, #0]
 80010de:	6023      	str	r3, [r4, #0]
	float sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
	float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

	for (int i=0; i < tam; i++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80010e6:	f102 020c 	add.w	r2, r2, #12
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	e01d      	b.n	800112a <NLLS+0xb2>
	{
		Be[i] = 1*sf;
 80010ee:	f507 33b0 	add.w	r3, r7, #90112	@ 0x16000
 80010f2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80010f6:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80010fa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80010fe:	f103 030c 	add.w	r3, r3, #12
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800110c:	f502 72ee 	add.w	r2, r2, #476	@ 0x1dc
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	601a      	str	r2, [r3, #0]
	for (int i=0; i < tam; i++)
 8001114:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001118:	f103 030c 	add.w	r3, r3, #12
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001124:	f102 020c 	add.w	r2, r2, #12
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800112e:	f103 030c 	add.w	r3, r3, #12
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8001138:	dbd9      	blt.n	80010ee <NLLS+0x76>
	}

	while(loop == 1)
 800113a:	f003 be84 	b.w	8004e46 <NLLS+0x3dce>
	{
		sx = p0[0];
 800113e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001142:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800114c:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8001150:	6013      	str	r3, [r2, #0]
		sy = p0[1];
 8001152:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001156:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001160:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8001164:	6013      	str	r3, [r2, #0]
		sz = p0[2];
 8001166:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800116a:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001174:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8001178:	6013      	str	r3, [r2, #0]
		bx = p0[3];
 800117a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800117e:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001188:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 800118c:	6013      	str	r3, [r2, #0]
		by = p0[4];
 800118e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001192:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800119c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 80011a0:	6013      	str	r3, [r2, #0]
		bz = p0[5];
 80011a2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80011a6:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80011b0:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80011b4:	6013      	str	r3, [r2, #0]
		rho = p0[6];
 80011b6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80011ba:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80011c4:	f102 0220 	add.w	r2, r2, #32
 80011c8:	6013      	str	r3, [r2, #0]
		phi = p0[7];
 80011ca:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80011ce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80011d8:	f102 021c 	add.w	r2, r2, #28
 80011dc:	6013      	str	r3, [r2, #0]
		lambida = p0[8];
 80011de:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80011e2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80011ec:	f102 0218 	add.w	r2, r2, #24
 80011f0:	6013      	str	r3, [r2, #0]

		sin_phi = phi - (phi*phi*phi)/6;// + (phi*phi*phi*phi*phi)/120;
 80011f2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80011f6:	f103 031c 	add.w	r3, r3, #28
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001202:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001206:	f103 031c 	add.w	r3, r3, #28
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001212:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8001216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800121e:	f103 031c 	add.w	r3, r3, #28
 8001222:	ed93 7a00 	vldr	s14, [r3]
 8001226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800122e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8001232:	edc3 7a00 	vstr	s15, [r3]
		sin_rho = rho - (rho*rho*rho)/6;// + (rho*rho*rho*rho*rho)/120;
 8001236:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800123a:	f103 0320 	add.w	r3, r3, #32
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001246:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800124a:	f103 0320 	add.w	r3, r3, #32
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001256:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800125a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001262:	f103 0320 	add.w	r3, r3, #32
 8001266:	ed93 7a00 	vldr	s14, [r3]
 800126a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001272:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8001276:	edc3 7a00 	vstr	s15, [r3]
		sin_lambda = lambida - (lambida*lambida*lambida)/6;// + (lambida*lambida*lambida*lambida*lambida)/120;
 800127a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800127e:	f103 0318 	add.w	r3, r3, #24
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800128a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800128e:	f103 0318 	add.w	r3, r3, #24
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800129a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800129e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80012a6:	f103 0318 	add.w	r3, r3, #24
 80012aa:	ed93 7a00 	vldr	s14, [r3]
 80012ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80012b6:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80012ba:	edc3 7a00 	vstr	s15, [r3]
		cos_phi = 1 - (phi*phi)/2;// + (phi*phi*phi*phi)/24;
 80012be:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80012c2:	f103 031c 	add.w	r3, r3, #28
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012ce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80012d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012de:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80012e2:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80012e6:	edc3 7a00 	vstr	s15, [r3]
		cos_rho = 1 - (rho*rho)/2;// + (rho*rho*rho*rho)/24;
 80012ea:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80012ee:	f103 0320 	add.w	r3, r3, #32
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012fa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80012fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001302:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800130e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001312:	edc3 7a00 	vstr	s15, [r3]
		cos_lambda = 1 - (lambida*lambida)/2;// + (lambida*lambida*lambida*lambida)/24;
 8001316:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800131a:	f103 0318 	add.w	r3, r3, #24
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001326:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800132a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001336:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800133a:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800133e:	edc3 7a00 	vstr	s15, [r3]

		for(int i=0; i < tam; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8001348:	f102 0208 	add.w	r2, r2, #8
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	f003 ba40 	b.w	80047d2 <NLLS+0x375a>
 8001352:	bf00      	nop
 8001354:	08009608 	.word	0x08009608
		{
			f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 8001358:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800135c:	f103 0308 	add.w	r3, r3, #8
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001368:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800136c:	4413      	add	r3, r2
 800136e:	ed93 7a00 	vldr	s14, [r3]
 8001372:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001376:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001382:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001386:	f103 0308 	add.w	r3, r3, #8
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001392:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001396:	4413      	add	r3, r2
 8001398:	edd3 6a00 	vldr	s13, [r3]
 800139c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80013a0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013b0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80013b4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013c4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80013c8:	f103 0308 	add.w	r3, r3, #8
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80013d4:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80013d8:	4413      	add	r3, r2
 80013da:	edd3 6a00 	vldr	s13, [r3]
 80013de:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80013e2:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013ee:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80013f2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013fe:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001402:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001406:	ed93 6a00 	vldr	s12, [r3]
 800140a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800140e:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	ee26 6a27 	vmul.f32	s12, s12, s15
 800141a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800141e:	f103 0308 	add.w	r3, r3, #8
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800142a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800142e:	4413      	add	r3, r2
 8001430:	edd3 5a00 	vldr	s11, [r3]
 8001434:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001438:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001444:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001448:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800144c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001450:	f103 0308 	add.w	r3, r3, #8
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800145c:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001460:	4413      	add	r3, r2
 8001462:	ed93 6a00 	vldr	s12, [r3]
 8001466:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800146a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001476:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800147a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001486:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800148a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800148e:	edd3 5a00 	vldr	s11, [r3]
 8001492:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001496:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80014a2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80014a6:	f103 0308 	add.w	r3, r3, #8
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80014b2:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80014b6:	4413      	add	r3, r2
 80014b8:	ed93 5a00 	vldr	s10, [r3]
 80014bc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80014c0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	ee75 7a67 	vsub.f32	s15, s10, s15
 80014cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80014d0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80014d4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80014d8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80014dc:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80014e0:	edd3 6a00 	vldr	s13, [r3]
 80014e4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80014e8:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014f4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80014f8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001504:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001508:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800150c:	edd3 5a00 	vldr	s11, [r3]
 8001510:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001514:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001520:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001524:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001528:	edd3 7a00 	vldr	s15, [r3]
 800152c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001530:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001534:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001538:	ee37 7a27 	vadd.f32	s14, s14, s15
 800153c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001540:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001544:	edd3 6a00 	vldr	s13, [r3]
 8001548:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800154c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001558:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800155c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001568:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800156c:	f103 0308 	add.w	r3, r3, #8
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001578:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800157c:	4413      	add	r3, r2
 800157e:	ed93 6a00 	vldr	s12, [r3]
 8001582:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001586:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001592:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001596:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800159a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800159e:	ed93 6a00 	vldr	s12, [r3]
 80015a2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80015a6:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015b2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80015b6:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015c2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80015c6:	f103 0308 	add.w	r3, r3, #8
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80015d2:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80015d6:	4413      	add	r3, r2
 80015d8:	edd3 5a00 	vldr	s11, [r3]
 80015dc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80015e0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80015ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015f4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80015f8:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80015fc:	ed93 6a00 	vldr	s12, [r3]
 8001600:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001604:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001610:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001614:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8001618:	edd3 5a00 	vldr	s11, [r3]
 800161c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001620:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800162c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001630:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001634:	ed93 5a00 	vldr	s10, [r3]
 8001638:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800163c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001648:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800164c:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001658:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800165c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001660:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001664:	f103 0308 	add.w	r3, r3, #8
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001670:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001674:	4413      	add	r3, r2
 8001676:	edd3 5a00 	vldr	s11, [r3]
 800167a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800167e:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800168a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800168e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001692:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001696:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800169a:	ed93 6a00 	vldr	s12, [r3]
 800169e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80016a2:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016ae:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80016b2:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80016b6:	edd3 7a00 	vldr	s15, [r3]
 80016ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016be:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80016c2:	f103 0308 	add.w	r3, r3, #8
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80016ce:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80016d2:	4413      	add	r3, r2
 80016d4:	edd3 5a00 	vldr	s11, [r3]
 80016d8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80016dc:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80016e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016ec:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80016f0:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80016f4:	edd3 5a00 	vldr	s11, [r3]
 80016f8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80016fc:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001708:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800170c:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001718:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800171c:	f103 0308 	add.w	r3, r3, #8
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001728:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800172c:	4413      	add	r3, r2
 800172e:	ed93 5a00 	vldr	s10, [r3]
 8001732:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001736:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001742:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001746:	ee36 6a67 	vsub.f32	s12, s12, s15
 800174a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800174e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001752:	edd3 5a00 	vldr	s11, [r3]
 8001756:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800175a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001766:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800176a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800176e:	ed93 5a00 	vldr	s10, [r3]
 8001772:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001776:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001782:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001786:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800178a:	edd3 4a00 	vldr	s9, [r3]
 800178e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001792:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800179e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80017a2:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee64 7aa7 	vmul.f32	s15, s9, s15
 80017ae:	ee75 7a67 	vsub.f32	s15, s10, s15
 80017b2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80017b6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80017ba:	f103 0308 	add.w	r3, r3, #8
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80017c6:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80017ca:	4413      	add	r3, r2
 80017cc:	ed93 5a00 	vldr	s10, [r3]
 80017d0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80017d4:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee75 7a67 	vsub.f32	s15, s10, s15
 80017e0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017e4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80017e8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80017ec:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80017f0:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80017f4:	edd3 6a00 	vldr	s13, [r3]
 80017f8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80017fc:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001808:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800180c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001818:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800181c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001828:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800182c:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001838:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800183c:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001848:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800184c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001850:	edd3 5a00 	vldr	s11, [r3]
 8001854:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001858:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001864:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001868:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001874:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001878:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001884:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001888:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001894:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001898:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800189c:	edd3 7a00 	vldr	s15, [r3]
 80018a0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018a8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	f507 33a0 	add.w	r3, r7, #81920	@ 0x14000
 80018b4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80018b8:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 80018bc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80018c0:	f103 0308 	add.w	r3, r3, #8
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	edc3 7a00 	vstr	s15, [r3]

			e[i] = (Be[i] * Be[i]) - f[i];
 80018ce:	f507 33b0 	add.w	r3, r7, #90112	@ 0x16000
 80018d2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80018d6:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80018da:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80018de:	f103 0308 	add.w	r3, r3, #8
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	ed93 7a00 	vldr	s14, [r3]
 80018ec:	f507 33b0 	add.w	r3, r7, #90112	@ 0x16000
 80018f0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80018f4:	f5a3 7201 	sub.w	r2, r3, #516	@ 0x204
 80018f8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80018fc:	f103 0308 	add.w	r3, r3, #8
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190e:	f507 33a0 	add.w	r3, r7, #81920	@ 0x14000
 8001912:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8001916:	f2a3 42c4 	subw	r2, r3, #1220	@ 0x4c4
 800191a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800191e:	f103 0308 	add.w	r3, r3, #8
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001930:	f507 33a8 	add.w	r3, r7, #86016	@ 0x15000
 8001934:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8001938:	f5a3 7259 	sub.w	r2, r3, #868	@ 0x364
 800193c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001940:	f103 0308 	add.w	r3, r3, #8
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	edc3 7a00 	vstr	s15, [r3]

			mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 800194e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001952:	f103 0308 	add.w	r3, r3, #8
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800195e:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001962:	4413      	add	r3, r2
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800196c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001970:	ed93 7a00 	vldr	s14, [r3]
 8001974:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001978:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800197c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001988:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800198c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001990:	edd3 6a00 	vldr	s13, [r3]
 8001994:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001998:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019a4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80019a8:	f103 0308 	add.w	r3, r3, #8
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80019b4:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80019b8:	4413      	add	r3, r2
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80019c2:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80019c6:	ed93 6a00 	vldr	s12, [r3]
 80019ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019da:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80019de:	f103 0308 	add.w	r3, r3, #8
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80019ea:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80019ee:	4413      	add	r3, r2
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80019f8:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80019fc:	edd3 6a00 	vldr	s13, [r3]
 8001a00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a04:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a08:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001a0c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001a18:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001a1c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a28:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001a2c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a38:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001a3c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a48:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001a4c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a5c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001a60:	f103 0308 	add.w	r3, r3, #8
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001a6c:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001a70:	4413      	add	r3, r2
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001a7a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001a7e:	edd3 6a00 	vldr	s13, [r3]
 8001a82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a86:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001a8a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a96:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001a9a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001a9e:	ed93 6a00 	vldr	s12, [r3]
 8001aa2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001aa6:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ab2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001ab6:	f103 0308 	add.w	r3, r3, #8
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001ac2:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001ad0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001ad4:	edd3 5a00 	vldr	s11, [r3]
 8001ad8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001adc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ae0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ae4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001ae8:	f103 0308 	add.w	r3, r3, #8
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001af4:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001af8:	4413      	add	r3, r2
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001b02:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001b06:	ed93 6a00 	vldr	s12, [r3]
 8001b0a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b0e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001b12:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b1e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001b22:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001b26:	edd3 5a00 	vldr	s11, [r3]
 8001b2a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001b2e:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001b3a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001b3e:	f103 0308 	add.w	r3, r3, #8
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001b4a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001b4e:	4413      	add	r3, r2
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001b58:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001b5c:	ed93 5a00 	vldr	s10, [r3]
 8001b60:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001b64:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b68:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b70:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001b74:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001b78:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001b84:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001b88:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b94:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001b98:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001b9c:	edd3 7a00 	vldr	s15, [r3]
 8001ba0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ba4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001ba8:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bb4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001bb8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bc4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001bc8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001bcc:	edd3 7a00 	vldr	s15, [r3]
 8001bd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bd4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001bd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bdc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001be0:	f103 0308 	add.w	r3, r3, #8
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001bec:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001bfa:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001bfe:	edd3 6a00 	vldr	s13, [r3]
 8001c02:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c06:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001c0a:	f103 0308 	add.w	r3, r3, #8
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001c16:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001c24:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001c28:	ed93 6a00 	vldr	s12, [r3]
 8001c2c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c34:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001c38:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001c3c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001c48:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001c4c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c58:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c60:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001c64:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001c68:	edd3 6a00 	vldr	s13, [r3]
 8001c6c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001c70:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c7c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001c80:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8001c84:	ed93 6a00 	vldr	s12, [r3]
 8001c88:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001c8c:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c98:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001c9c:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8001ca0:	edd3 5a00 	vldr	s11, [r3]
 8001ca4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001ca8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001cb4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001cb8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8001cbc:	edd3 7a00 	vldr	s15, [r3]
 8001cc0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cc4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ccc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001cd0:	f103 0308 	add.w	r3, r3, #8
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001cdc:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001cea:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001cee:	ed93 6a00 	vldr	s12, [r3]
 8001cf2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cf6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cfa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001cfe:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001d02:	ed93 6a00 	vldr	s12, [r3]
 8001d06:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001d0a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d16:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001d1a:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001d1e:	edd3 7a00 	vldr	s15, [r3]
 8001d22:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d26:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001d2a:	f103 0308 	add.w	r3, r3, #8
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001d36:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001d44:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001d48:	edd3 5a00 	vldr	s11, [r3]
 8001d4c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001d50:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d54:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d58:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001d5c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001d60:	ed93 6a00 	vldr	s12, [r3]
 8001d64:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001d68:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d74:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001d78:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d84:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001d88:	f103 0308 	add.w	r3, r3, #8
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001d94:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001d98:	4413      	add	r3, r2
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001da2:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001da6:	edd3 5a00 	vldr	s11, [r3]
 8001daa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001dae:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001db2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001db6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001dba:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001dbe:	ed93 6a00 	vldr	s12, [r3]
 8001dc2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001dc6:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dd2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001dd6:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8001dda:	edd3 5a00 	vldr	s11, [r3]
 8001dde:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001de2:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001dee:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001df2:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8001df6:	ed93 5a00 	vldr	s10, [r3]
 8001dfa:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001dfe:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001e0a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001e0e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8001e12:	edd3 7a00 	vldr	s15, [r3]
 8001e16:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001e1a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001e1e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e22:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001e26:	f103 0308 	add.w	r3, r3, #8
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001e32:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8001e36:	4413      	add	r3, r2
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001e40:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8001e44:	edd3 5a00 	vldr	s11, [r3]
 8001e48:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001e4c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e50:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001e54:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001e58:	edd3 5a00 	vldr	s11, [r3]
 8001e5c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001e60:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001e6c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001e70:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001e7c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001e80:	f103 0308 	add.w	r3, r3, #8
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001e8c:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8001e90:	4413      	add	r3, r2
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001e9a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001e9e:	ed93 5a00 	vldr	s10, [r3]
 8001ea2:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001ea6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001eaa:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001eae:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001eb2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001eb6:	edd3 5a00 	vldr	s11, [r3]
 8001eba:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001ebe:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001ec2:	edd3 7a00 	vldr	s15, [r3]
 8001ec6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001eca:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001ece:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001eda:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001ede:	f103 0308 	add.w	r3, r3, #8
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001eea:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8001eee:	4413      	add	r3, r2
 8001ef0:	edd3 7a00 	vldr	s15, [r3]
 8001ef4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001ef8:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8001efc:	ed93 5a00 	vldr	s10, [r3]
 8001f00:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001f04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f10:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001f14:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001f18:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001f24:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001f28:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f34:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001f38:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f44:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001f48:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f54:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001f58:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f64:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001f68:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f74:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001f78:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f84:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001f88:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f94:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001f98:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fa4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001fa8:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8001fac:	edd3 7a00 	vldr	s15, [r3]
 8001fb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fb4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001fb8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fc4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001fc8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fd4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fdc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001fe0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8001fe4:	edd3 6a00 	vldr	s13, [r3]
 8001fe8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8001fec:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ff8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8001ffc:	f103 0308 	add.w	r3, r3, #8
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002008:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800200c:	4413      	add	r3, r2
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002016:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800201a:	ed93 6a00 	vldr	s12, [r3]
 800201e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002022:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002026:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800202a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800202e:	ed93 6a00 	vldr	s12, [r3]
 8002032:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002036:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002042:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002046:	f103 0308 	add.w	r3, r3, #8
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002052:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002056:	4413      	add	r3, r2
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002060:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002064:	edd3 5a00 	vldr	s11, [r3]
 8002068:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800206c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002070:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002074:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002078:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800207c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002080:	ed93 6a00 	vldr	s12, [r3]
 8002084:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002088:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002094:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002098:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800209c:	edd3 5a00 	vldr	s11, [r3]
 80020a0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80020a4:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80020b0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80020b4:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80020b8:	ed93 5a00 	vldr	s10, [r3]
 80020bc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80020c0:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	ee25 5a27 	vmul.f32	s10, s10, s15
 80020cc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80020d0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	ee65 7a27 	vmul.f32	s15, s10, s15
 80020dc:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80020e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80020e4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80020e8:	f103 0308 	add.w	r3, r3, #8
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80020f4:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80020f8:	4413      	add	r3, r2
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002102:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002106:	edd3 5a00 	vldr	s11, [r3]
 800210a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800210e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002112:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002116:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800211a:	edd3 5a00 	vldr	s11, [r3]
 800211e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002122:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800212e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002132:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800213e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002142:	f103 0308 	add.w	r3, r3, #8
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800214e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8002152:	4413      	add	r3, r2
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800215c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002160:	ed93 5a00 	vldr	s10, [r3]
 8002164:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002168:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800216c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002170:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002174:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002178:	edd3 5a00 	vldr	s11, [r3]
 800217c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002180:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800218c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002190:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800219c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80021a0:	f103 0308 	add.w	r3, r3, #8
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80021ac:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80021b0:	4413      	add	r3, r2
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80021ba:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80021be:	ed93 5a00 	vldr	s10, [r3]
 80021c2:	ee75 7a67 	vsub.f32	s15, s10, s15
 80021c6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80021ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80021ce:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80021d2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80021d6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80021e2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80021e6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021f2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80021f6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002202:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002206:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002212:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002216:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002222:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002226:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002232:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002236:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002242:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002246:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002252:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002256:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002262:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002266:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002272:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002276:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002282:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228a:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 800228e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8002292:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8002296:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800229a:	f103 0308 	add.w	r3, r3, #8
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	edc3 7a00 	vstr	s15, [r3]

			mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 80022a8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80022ac:	f103 0308 	add.w	r3, r3, #8
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80022b8:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80022bc:	4413      	add	r3, r2
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80022c6:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80022ca:	ed93 7a00 	vldr	s14, [r3]
 80022ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80022d6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80022da:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80022de:	edd3 6a00 	vldr	s13, [r3]
 80022e2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80022e6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022f2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80022f6:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002302:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002306:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002312:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002316:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002322:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002326:	f103 0308 	add.w	r3, r3, #8
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002332:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002336:	4413      	add	r3, r2
 8002338:	ed93 6a00 	vldr	s12, [r3]
 800233c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002340:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	ee26 6a27 	vmul.f32	s12, s12, s15
 800234c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002350:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	ee26 6a27 	vmul.f32	s12, s12, s15
 800235c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002360:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ee26 6a27 	vmul.f32	s12, s12, s15
 800236c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002370:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ee66 7a27 	vmul.f32	s15, s12, s15
 800237c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002380:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002384:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002388:	ed93 6a00 	vldr	s12, [r3]
 800238c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002390:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee26 6a27 	vmul.f32	s12, s12, s15
 800239c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80023a0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023ac:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80023b0:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023bc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80023c0:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023cc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80023d0:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023dc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80023e0:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023f0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80023f4:	f103 0308 	add.w	r3, r3, #8
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002400:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002404:	4413      	add	r3, r2
 8002406:	ed93 6a00 	vldr	s12, [r3]
 800240a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800240e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	ee26 6a27 	vmul.f32	s12, s12, s15
 800241a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800241e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee26 6a27 	vmul.f32	s12, s12, s15
 800242a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800242e:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	ee26 6a27 	vmul.f32	s12, s12, s15
 800243a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800243e:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	ee26 6a27 	vmul.f32	s12, s12, s15
 800244a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800244e:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee26 6a27 	vmul.f32	s12, s12, s15
 800245a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800245e:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	ee66 7a27 	vmul.f32	s15, s12, s15
 800246a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800246e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002472:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002476:	ed93 6a00 	vldr	s12, [r3]
 800247a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800247e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee26 6a27 	vmul.f32	s12, s12, s15
 800248a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800248e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ee26 6a27 	vmul.f32	s12, s12, s15
 800249a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800249e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80024a2:	edd3 7a00 	vldr	s15, [r3]
 80024a6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024aa:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80024ae:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024be:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80024c2:	f103 0308 	add.w	r3, r3, #8
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80024ce:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80024d2:	4413      	add	r3, r2
 80024d4:	ed93 6a00 	vldr	s12, [r3]
 80024d8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80024dc:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024e8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80024ec:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024f8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80024fc:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002508:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800250c:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002518:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800251c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002520:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002524:	ed93 6a00 	vldr	s12, [r3]
 8002528:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800252c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002538:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800253c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002548:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800254c:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002558:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800255c:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002568:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800256c:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002578:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800257c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002580:	f103 0308 	add.w	r3, r3, #8
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800258c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002590:	4413      	add	r3, r2
 8002592:	ed93 6a00 	vldr	s12, [r3]
 8002596:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800259a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800259e:	edd3 7a00 	vldr	s15, [r3]
 80025a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025a6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80025aa:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025b6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80025ba:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025c6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80025ca:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025d6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80025da:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025ea:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80025ee:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80025f2:	ed93 6a00 	vldr	s12, [r3]
 80025f6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80025fa:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002606:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800260a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002616:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800261a:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800261e:	edd3 7a00 	vldr	s15, [r3]
 8002622:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002626:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800262a:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002636:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800263a:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002646:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800264a:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002656:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800265a:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800265e:	edd3 7a00 	vldr	s15, [r3]
 8002662:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002666:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800266a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800266e:	f103 0308 	add.w	r3, r3, #8
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800267a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800267e:	4413      	add	r3, r2
 8002680:	ed93 6a00 	vldr	s12, [r3]
 8002684:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002688:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002694:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002698:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026a4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80026a8:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026b4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80026b8:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026c4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80026c8:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80026cc:	edd3 7a00 	vldr	s15, [r3]
 80026d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026d4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80026d8:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026e4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80026e8:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026f8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80026fc:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002700:	ed93 6a00 	vldr	s12, [r3]
 8002704:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002708:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002714:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002718:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800271c:	edd3 7a00 	vldr	s15, [r3]
 8002720:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002724:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002728:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002734:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002738:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800273c:	edd3 7a00 	vldr	s15, [r3]
 8002740:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002744:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002748:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002754:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002758:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002764:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002768:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800276c:	f103 0308 	add.w	r3, r3, #8
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002778:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800277c:	4413      	add	r3, r2
 800277e:	ed93 6a00 	vldr	s12, [r3]
 8002782:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002786:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002792:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002796:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027a2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80027a6:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027b2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80027b6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027c2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80027c6:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027d2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80027d6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ea:	eef1 6a67 	vneg.f32	s13, s15
 80027ee:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80027f2:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80027f6:	edd3 7a00 	vldr	s15, [r3]
 80027fa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80027fe:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002802:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800280e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002812:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002822:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800282e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002832:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002836:	edd3 7a00 	vldr	s15, [r3]
 800283a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002842:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002846:	edd3 7a00 	vldr	s15, [r3]
 800284a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800284e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002852:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800285e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002862:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800286e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002872:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800287e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002882:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002892:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8002896:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800289a:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 800289e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80028a2:	f103 0308 	add.w	r3, r3, #8
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	edc3 7a00 	vstr	s15, [r3]

			mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 80028b4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80028b8:	f103 0308 	add.w	r3, r3, #8
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80028c4:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80028c8:	4413      	add	r3, r2
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80028d2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80028d6:	ed93 7a00 	vldr	s14, [r3]
 80028da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028de:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80028e2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80028e6:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80028ea:	edd3 6a00 	vldr	s13, [r3]
 80028ee:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80028f2:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80028f6:	edd3 7a00 	vldr	s15, [r3]
 80028fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028fe:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002902:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002906:	edd3 7a00 	vldr	s15, [r3]
 800290a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800290e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002912:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800291e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002922:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002926:	ed93 6a00 	vldr	s12, [r3]
 800292a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800292e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	ee26 6a27 	vmul.f32	s12, s12, s15
 800293a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800293e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	ee26 6a27 	vmul.f32	s12, s12, s15
 800294a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800294e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8002952:	edd3 7a00 	vldr	s15, [r3]
 8002956:	ee66 7a27 	vmul.f32	s15, s12, s15
 800295a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800295e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002962:	f103 0308 	add.w	r3, r3, #8
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800296e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8002972:	4413      	add	r3, r2
 8002974:	ed93 6a00 	vldr	s12, [r3]
 8002978:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800297c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002988:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800298c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002998:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800299c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80029a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80029ac:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80029b0:	f103 0308 	add.w	r3, r3, #8
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80029bc:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80029c0:	4413      	add	r3, r2
 80029c2:	ed93 6a00 	vldr	s12, [r3]
 80029c6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80029ca:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80029ce:	edd3 7a00 	vldr	s15, [r3]
 80029d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029d6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80029da:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029e6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80029ea:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80029ee:	edd3 7a00 	vldr	s15, [r3]
 80029f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80029f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80029fa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80029fe:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002a02:	ed93 6a00 	vldr	s12, [r3]
 8002a06:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002a0a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a16:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002a1a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002a1e:	edd3 7a00 	vldr	s15, [r3]
 8002a22:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a26:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002a2a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8002a2e:	edd3 7a00 	vldr	s15, [r3]
 8002a32:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a36:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002a3a:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8002a3e:	edd3 7a00 	vldr	s15, [r3]
 8002a42:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a46:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002a4a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002a4e:	f103 0308 	add.w	r3, r3, #8
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002a5a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002a5e:	4413      	add	r3, r2
 8002a60:	ed93 6a00 	vldr	s12, [r3]
 8002a64:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002a68:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002a6c:	edd3 7a00 	vldr	s15, [r3]
 8002a70:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a74:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002a78:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a84:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002a88:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a94:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002a98:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002aa4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002aa8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002aac:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002ab0:	ed93 6a00 	vldr	s12, [r3]
 8002ab4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002ab8:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002abc:	edd3 7a00 	vldr	s15, [r3]
 8002ac0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ac4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002ac8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ad4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002ad8:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002ae4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002ae8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002af4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002af8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8002afc:	edd3 7a00 	vldr	s15, [r3]
 8002b00:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b08:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002b0c:	f103 0308 	add.w	r3, r3, #8
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002b18:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	ed93 6a00 	vldr	s12, [r3]
 8002b22:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002b26:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b32:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002b36:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002b3a:	edd3 7a00 	vldr	s15, [r3]
 8002b3e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b42:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002b46:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002b4a:	edd3 7a00 	vldr	s15, [r3]
 8002b4e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b52:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002b56:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002b5a:	edd3 7a00 	vldr	s15, [r3]
 8002b5e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b62:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002b66:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8002b6a:	edd3 7a00 	vldr	s15, [r3]
 8002b6e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b7a:	eef1 6a67 	vneg.f32	s13, s15
 8002b7e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002b82:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002b86:	ed93 7a00 	vldr	s14, [r3]
 8002b8a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002b8e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b9a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002b9e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002ba2:	edd3 7a00 	vldr	s15, [r3]
 8002ba6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002baa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002bae:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002bba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bbe:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002bc2:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bce:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002bd2:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002bd6:	edd3 7a00 	vldr	s15, [r3]
 8002bda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bde:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002be2:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bee:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002bf2:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bfe:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002c02:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c12:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8002c16:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8002c1a:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8002c1e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002c22:	f103 0308 	add.w	r3, r3, #8
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	edc3 7a00 	vstr	s15, [r3]

			mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 8002c34:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002c38:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002c3c:	edd3 7a00 	vldr	s15, [r3]
 8002c40:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c44:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002c48:	f103 0308 	add.w	r3, r3, #8
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002c54:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002c58:	4413      	add	r3, r2
 8002c5a:	edd3 7a00 	vldr	s15, [r3]
 8002c5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c62:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002c66:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002c6a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c76:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002c7a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002c7e:	edd3 7a00 	vldr	s15, [r3]
 8002c82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c86:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002c8a:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c96:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002c9a:	f103 0308 	add.w	r3, r3, #8
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002ca6:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002caa:	4413      	add	r3, r2
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002cb4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002cb8:	ed93 6a00 	vldr	s12, [r3]
 8002cbc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8002cc0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002cc4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002cd0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002cd4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002cd8:	edd3 5a00 	vldr	s11, [r3]
 8002cdc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002ce0:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8002ce4:	edd3 7a00 	vldr	s15, [r3]
 8002ce8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002cec:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002cf0:	f103 0308 	add.w	r3, r3, #8
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002cfc:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002d00:	4413      	add	r3, r2
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002d0a:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002d0e:	ed93 5a00 	vldr	s10, [r3]
 8002d12:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002d16:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002d1a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d1e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002d22:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002d26:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002d32:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002d36:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002d3a:	edd3 7a00 	vldr	s15, [r3]
 8002d3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d42:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002d46:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002d4a:	edd3 7a00 	vldr	s15, [r3]
 8002d4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d52:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002d56:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d62:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d6a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002d6e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8002d72:	edd3 6a00 	vldr	s13, [r3]
 8002d76:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002d7a:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d86:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002d8a:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002d8e:	ed93 6a00 	vldr	s12, [r3]
 8002d92:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002d96:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002da2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002da6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8002daa:	edd3 7a00 	vldr	s15, [r3]
 8002dae:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002db2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002db6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002dba:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002dbe:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002dc2:	ed93 6a00 	vldr	s12, [r3]
 8002dc6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002dca:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002dce:	edd3 7a00 	vldr	s15, [r3]
 8002dd2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002dd6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002dda:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8002dde:	edd3 5a00 	vldr	s11, [r3]
 8002de2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002de6:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002df2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002df6:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002dfa:	ed93 5a00 	vldr	s10, [r3]
 8002dfe:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002e02:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	ee25 5a27 	vmul.f32	s10, s10, s15
 8002e0e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002e12:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002e1e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002e22:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e26:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002e2a:	f103 0308 	add.w	r3, r3, #8
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002e36:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002e44:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8002e48:	edd3 5a00 	vldr	s11, [r3]
 8002e4c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002e50:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002e54:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002e58:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002e5c:	edd3 5a00 	vldr	s11, [r3]
 8002e60:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002e64:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002e68:	edd3 7a00 	vldr	s15, [r3]
 8002e6c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002e70:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002e74:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002e80:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002e84:	f103 0308 	add.w	r3, r3, #8
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002e90:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8002e94:	4413      	add	r3, r2
 8002e96:	edd3 7a00 	vldr	s15, [r3]
 8002e9a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002e9e:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8002ea2:	ed93 5a00 	vldr	s10, [r3]
 8002ea6:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002eaa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002eae:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002eb2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002eb6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002eba:	edd3 5a00 	vldr	s11, [r3]
 8002ebe:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002ec2:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002ec6:	edd3 7a00 	vldr	s15, [r3]
 8002eca:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002ece:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002ed2:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8002ed6:	edd3 7a00 	vldr	s15, [r3]
 8002eda:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002ede:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002ee2:	f103 0308 	add.w	r3, r3, #8
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002eee:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	edd3 7a00 	vldr	s15, [r3]
 8002ef8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002efc:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002f00:	ed93 5a00 	vldr	s10, [r3]
 8002f04:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002f08:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002f0c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f10:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002f14:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002f18:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002f24:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002f28:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8002f2c:	edd3 7a00 	vldr	s15, [r3]
 8002f30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f34:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002f38:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f44:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002f48:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f54:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002f58:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8002f5c:	edd3 7a00 	vldr	s15, [r3]
 8002f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f68:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002f6c:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f78:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002f7c:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8002f80:	edd3 7a00 	vldr	s15, [r3]
 8002f84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f88:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002f8c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f98:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8002f9c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8002fa0:	edd3 7a00 	vldr	s15, [r3]
 8002fa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fa8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb0:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8002fb4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8002fb8:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8002fbc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002fc0:	f103 0308 	add.w	r3, r3, #8
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	edc3 7a00 	vstr	s15, [r3]

			mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8002fd2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002fd6:	f103 0308 	add.w	r3, r3, #8
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002fe2:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	edd3 7a00 	vldr	s15, [r3]
 8002fec:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8002ff0:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002ff4:	ed93 7a00 	vldr	s14, [r3]
 8002ff8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ffc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003000:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	ee27 7a27 	vmul.f32	s14, s14, s15
 800300c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003010:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003014:	edd3 6a00 	vldr	s13, [r3]
 8003018:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800301c:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003020:	edd3 7a00 	vldr	s15, [r3]
 8003024:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003028:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800302c:	f103 0308 	add.w	r3, r3, #8
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003038:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800303c:	4413      	add	r3, r2
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003046:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800304a:	ed93 6a00 	vldr	s12, [r3]
 800304e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003052:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800305a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800305e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003062:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003066:	ed93 7a00 	vldr	s14, [r3]
 800306a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800306e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003072:	edd3 7a00 	vldr	s15, [r3]
 8003076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800307a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800307e:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003082:	edd3 7a00 	vldr	s15, [r3]
 8003086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800308e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800309a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800309e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80030a2:	edd3 7a00 	vldr	s15, [r3]
 80030a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ae:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80030b2:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80030be:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80030c2:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80030c6:	ed93 6a00 	vldr	s12, [r3]
 80030ca:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80030ce:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80030d2:	edd3 7a00 	vldr	s15, [r3]
 80030d6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80030da:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80030de:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80030e2:	edd3 5a00 	vldr	s11, [r3]
 80030e6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80030ea:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80030ee:	edd3 7a00 	vldr	s15, [r3]
 80030f2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80030f6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80030fa:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80030fe:	ed93 5a00 	vldr	s10, [r3]
 8003102:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003106:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003112:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003116:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003122:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003126:	ee26 6a27 	vmul.f32	s12, s12, s15
 800312a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800312e:	f103 0308 	add.w	r3, r3, #8
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800313a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800313e:	4413      	add	r3, r2
 8003140:	edd3 7a00 	vldr	s15, [r3]
 8003144:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003148:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800314c:	edd3 5a00 	vldr	s11, [r3]
 8003150:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003154:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003158:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800315c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003160:	edd3 5a00 	vldr	s11, [r3]
 8003164:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003168:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800316c:	edd3 7a00 	vldr	s15, [r3]
 8003170:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003174:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003178:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800317c:	edd3 7a00 	vldr	s15, [r3]
 8003180:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003184:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003188:	f103 0308 	add.w	r3, r3, #8
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003194:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003198:	4413      	add	r3, r2
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80031a2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80031a6:	ed93 5a00 	vldr	s10, [r3]
 80031aa:	ee75 7a67 	vsub.f32	s15, s10, s15
 80031ae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80031b2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80031b6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80031ba:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80031be:	edd3 5a00 	vldr	s11, [r3]
 80031c2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80031c6:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80031d2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80031d6:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80031e2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80031e6:	f103 0308 	add.w	r3, r3, #8
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80031f2:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80031f6:	4413      	add	r3, r2
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003200:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003204:	ed93 5a00 	vldr	s10, [r3]
 8003208:	ee75 7a67 	vsub.f32	s15, s10, s15
 800320c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003210:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003214:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003218:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800321c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003220:	edd3 6a00 	vldr	s13, [r3]
 8003224:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003228:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800322c:	edd3 7a00 	vldr	s15, [r3]
 8003230:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003234:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003238:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800323c:	edd3 7a00 	vldr	s15, [r3]
 8003240:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003244:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003248:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003254:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003258:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800325c:	edd3 7a00 	vldr	s15, [r3]
 8003260:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003264:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003268:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003274:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003278:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800327c:	edd3 7a00 	vldr	s15, [r3]
 8003280:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003284:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003288:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003294:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003298:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032a4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80032a8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80032ac:	edd3 7a00 	vldr	s15, [r3]
 80032b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80032b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032bc:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 80032c0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80032c4:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80032c8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80032cc:	f103 0308 	add.w	r3, r3, #8
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f503 538b 	add.w	r3, r3, #4448	@ 0x1160
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	edc3 7a00 	vstr	s15, [r3]

			mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 80032de:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80032e2:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80032e6:	ed93 7a00 	vldr	s14, [r3]
 80032ea:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80032ee:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032fa:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80032fe:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003302:	edd3 6a00 	vldr	s13, [r3]
 8003306:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800330a:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800330e:	edd3 7a00 	vldr	s15, [r3]
 8003312:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003316:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800331a:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800331e:	ed93 6a00 	vldr	s12, [r3]
 8003322:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003326:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003332:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003336:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003342:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800334a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800334e:	f103 0308 	add.w	r3, r3, #8
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800335a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800335e:	4413      	add	r3, r2
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003368:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800336c:	edd3 6a00 	vldr	s13, [r3]
 8003370:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003378:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800337c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003380:	edd3 6a00 	vldr	s13, [r3]
 8003384:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003388:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800338c:	edd3 7a00 	vldr	s15, [r3]
 8003390:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003394:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003398:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800339c:	edd3 7a00 	vldr	s15, [r3]
 80033a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033a4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80033a8:	f103 0308 	add.w	r3, r3, #8
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80033b4:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80033b8:	4413      	add	r3, r2
 80033ba:	edd3 7a00 	vldr	s15, [r3]
 80033be:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80033c2:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 80033c6:	ed93 6a00 	vldr	s12, [r3]
 80033ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80033ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80033da:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80033de:	edd3 6a00 	vldr	s13, [r3]
 80033e2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80033e6:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80033ea:	edd3 7a00 	vldr	s15, [r3]
 80033ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80033f2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80033f6:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003402:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003406:	f103 0308 	add.w	r3, r3, #8
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003412:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003416:	4413      	add	r3, r2
 8003418:	edd3 7a00 	vldr	s15, [r3]
 800341c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003420:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003424:	ed93 6a00 	vldr	s12, [r3]
 8003428:	ee76 7a67 	vsub.f32	s15, s12, s15
 800342c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003434:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003438:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800343c:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003440:	ed93 7a00 	vldr	s14, [r3]
 8003444:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003448:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003454:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003458:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003464:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003468:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800346c:	edd3 7a00 	vldr	s15, [r3]
 8003470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003474:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003478:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003484:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003488:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800348c:	edd3 7a00 	vldr	s15, [r3]
 8003490:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003494:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003498:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800349c:	edd3 7a00 	vldr	s15, [r3]
 80034a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034a4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80034a8:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80034ac:	edd3 7a00 	vldr	s15, [r3]
 80034b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034b4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80034b8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80034bc:	edd3 7a00 	vldr	s15, [r3]
 80034c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c8:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 80034cc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80034d0:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80034d4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80034d8:	f103 0308 	add.w	r3, r3, #8
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f503 53ad 	add.w	r3, r3, #5536	@ 0x15a0
 80034e2:	3318      	adds	r3, #24
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	edc3 7a00 	vstr	s15, [r3]

			mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 80034ec:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80034f0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80034f4:	ed93 7a00 	vldr	s14, [r3]
 80034f8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80034fc:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003500:	edd3 7a00 	vldr	s15, [r3]
 8003504:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003508:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800350c:	f103 0308 	add.w	r3, r3, #8
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003518:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800351c:	4413      	add	r3, r2
 800351e:	edd3 6a00 	vldr	s13, [r3]
 8003522:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003526:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800352a:	edd3 7a00 	vldr	s15, [r3]
 800352e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003532:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003536:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800353a:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800353e:	edd3 6a00 	vldr	s13, [r3]
 8003542:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003546:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800354a:	edd3 7a00 	vldr	s15, [r3]
 800354e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003552:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003556:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800355a:	edd3 7a00 	vldr	s15, [r3]
 800355e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003562:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003566:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800356a:	f103 0308 	add.w	r3, r3, #8
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003576:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800357a:	4413      	add	r3, r2
 800357c:	edd3 6a00 	vldr	s13, [r3]
 8003580:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003584:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003590:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003594:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003598:	edd3 7a00 	vldr	s15, [r3]
 800359c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80035a8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80035ac:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80035b0:	edd3 6a00 	vldr	s13, [r3]
 80035b4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80035b8:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80035bc:	edd3 7a00 	vldr	s15, [r3]
 80035c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035c4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80035c8:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80035cc:	edd3 7a00 	vldr	s15, [r3]
 80035d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035d4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80035d8:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80035dc:	edd3 7a00 	vldr	s15, [r3]
 80035e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035e4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80035e8:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035f4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80035f8:	f103 0308 	add.w	r3, r3, #8
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003604:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003608:	4413      	add	r3, r2
 800360a:	ed93 6a00 	vldr	s12, [r3]
 800360e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003612:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003616:	edd3 7a00 	vldr	s15, [r3]
 800361a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800361e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003622:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003626:	edd3 7a00 	vldr	s15, [r3]
 800362a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800362e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003632:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800363e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003642:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800364e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003652:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003656:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800365a:	ed93 6a00 	vldr	s12, [r3]
 800365e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003662:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003666:	edd3 7a00 	vldr	s15, [r3]
 800366a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800366e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003672:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003676:	edd3 7a00 	vldr	s15, [r3]
 800367a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800367e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003682:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003686:	edd3 7a00 	vldr	s15, [r3]
 800368a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800368e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003692:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003696:	edd3 7a00 	vldr	s15, [r3]
 800369a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800369e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80036a2:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036ae:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80036b2:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80036b6:	edd3 7a00 	vldr	s15, [r3]
 80036ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80036be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80036c2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80036c6:	f103 0308 	add.w	r3, r3, #8
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80036d2:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80036d6:	4413      	add	r3, r2
 80036d8:	ed93 6a00 	vldr	s12, [r3]
 80036dc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80036e0:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80036e4:	edd3 7a00 	vldr	s15, [r3]
 80036e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036ec:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80036f0:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80036f4:	edd3 7a00 	vldr	s15, [r3]
 80036f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036fc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003700:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003704:	edd3 7a00 	vldr	s15, [r3]
 8003708:	ee26 6a27 	vmul.f32	s12, s12, s15
 800370c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003710:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003714:	edd3 7a00 	vldr	s15, [r3]
 8003718:	ee26 6a27 	vmul.f32	s12, s12, s15
 800371c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003720:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	ee26 6a27 	vmul.f32	s12, s12, s15
 800372c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003730:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003734:	edd3 7a00 	vldr	s15, [r3]
 8003738:	ee66 7a27 	vmul.f32	s15, s12, s15
 800373c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003740:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003744:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003748:	ed93 6a00 	vldr	s12, [r3]
 800374c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003750:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003754:	edd3 7a00 	vldr	s15, [r3]
 8003758:	ee26 6a27 	vmul.f32	s12, s12, s15
 800375c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003760:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003764:	edd3 7a00 	vldr	s15, [r3]
 8003768:	ee26 6a27 	vmul.f32	s12, s12, s15
 800376c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003770:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	ee26 6a27 	vmul.f32	s12, s12, s15
 800377c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003780:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee66 7a27 	vmul.f32	s15, s12, s15
 800378c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003790:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003794:	f103 0308 	add.w	r3, r3, #8
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80037a0:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80037a4:	4413      	add	r3, r2
 80037a6:	ed93 6a00 	vldr	s12, [r3]
 80037aa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80037ae:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037ba:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80037be:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037ca:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80037ce:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80037d2:	edd3 7a00 	vldr	s15, [r3]
 80037d6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037da:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80037de:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80037e2:	edd3 7a00 	vldr	s15, [r3]
 80037e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80037ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80037ee:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80037f2:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80037f6:	ed93 6a00 	vldr	s12, [r3]
 80037fa:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80037fe:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee26 6a27 	vmul.f32	s12, s12, s15
 800380a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800380e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	ee26 6a27 	vmul.f32	s12, s12, s15
 800381a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800381e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ee26 6a27 	vmul.f32	s12, s12, s15
 800382a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800382e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	ee26 6a27 	vmul.f32	s12, s12, s15
 800383a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800383e:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003842:	edd3 7a00 	vldr	s15, [r3]
 8003846:	ee66 7a27 	vmul.f32	s15, s12, s15
 800384a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800384e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003852:	f103 0308 	add.w	r3, r3, #8
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800385e:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003862:	4413      	add	r3, r2
 8003864:	ed93 6a00 	vldr	s12, [r3]
 8003868:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800386c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003870:	edd3 7a00 	vldr	s15, [r3]
 8003874:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003878:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800387c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003880:	edd3 7a00 	vldr	s15, [r3]
 8003884:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003888:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800388c:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003890:	edd3 7a00 	vldr	s15, [r3]
 8003894:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003898:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800389c:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80038a0:	edd3 7a00 	vldr	s15, [r3]
 80038a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80038a8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80038ac:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80038b0:	edd3 7a00 	vldr	s15, [r3]
 80038b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80038b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80038bc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80038c0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80038c4:	ed93 6a00 	vldr	s12, [r3]
 80038c8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80038cc:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80038d0:	edd3 7a00 	vldr	s15, [r3]
 80038d4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80038d8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80038dc:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80038e0:	edd3 7a00 	vldr	s15, [r3]
 80038e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80038e8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80038ec:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80038f0:	edd3 7a00 	vldr	s15, [r3]
 80038f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80038f8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80038fc:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003908:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800390c:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003918:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800391c:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003920:	edd3 7a00 	vldr	s15, [r3]
 8003924:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003928:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800392c:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003930:	edd3 7a00 	vldr	s15, [r3]
 8003934:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003938:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800393c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003940:	f103 0308 	add.w	r3, r3, #8
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800394c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003950:	4413      	add	r3, r2
 8003952:	ed93 6a00 	vldr	s12, [r3]
 8003956:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800395a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800395e:	edd3 7a00 	vldr	s15, [r3]
 8003962:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003966:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800396a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800396e:	edd3 7a00 	vldr	s15, [r3]
 8003972:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003976:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800397a:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800397e:	edd3 7a00 	vldr	s15, [r3]
 8003982:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003986:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800398a:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800398e:	edd3 7a00 	vldr	s15, [r3]
 8003992:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003996:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800399a:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800399e:	edd3 7a00 	vldr	s15, [r3]
 80039a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039a6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80039aa:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039b6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80039ba:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80039be:	edd3 7a00 	vldr	s15, [r3]
 80039c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80039c6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80039ca:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80039ce:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80039d2:	ed93 6a00 	vldr	s12, [r3]
 80039d6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80039da:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80039de:	edd3 7a00 	vldr	s15, [r3]
 80039e2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039e6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80039ea:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80039ee:	edd3 7a00 	vldr	s15, [r3]
 80039f2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039f6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80039fa:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80039fe:	edd3 7a00 	vldr	s15, [r3]
 8003a02:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a06:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003a0a:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003a0e:	edd3 7a00 	vldr	s15, [r3]
 8003a12:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a16:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003a1a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003a1e:	edd3 7a00 	vldr	s15, [r3]
 8003a22:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a26:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003a2a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003a2e:	edd3 7a00 	vldr	s15, [r3]
 8003a32:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003a36:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003a3a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003a3e:	f103 0308 	add.w	r3, r3, #8
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003a4a:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003a4e:	4413      	add	r3, r2
 8003a50:	ed93 6a00 	vldr	s12, [r3]
 8003a54:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003a58:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003a5c:	edd3 7a00 	vldr	s15, [r3]
 8003a60:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a64:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003a68:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a74:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003a78:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003a7c:	edd3 7a00 	vldr	s15, [r3]
 8003a80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a84:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003a88:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003a8c:	edd3 7a00 	vldr	s15, [r3]
 8003a90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003a94:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003a98:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003a9c:	edd3 7a00 	vldr	s15, [r3]
 8003aa0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003aa4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003aa8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ab4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003abc:	eef1 6a67 	vneg.f32	s13, s15
 8003ac0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003ac4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003ad0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003ad4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ae0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003ae4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003ae8:	edd3 7a00 	vldr	s15, [r3]
 8003aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003af0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003af4:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003af8:	edd3 7a00 	vldr	s15, [r3]
 8003afc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b00:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003b04:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b10:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003b14:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003b18:	edd3 7a00 	vldr	s15, [r3]
 8003b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b20:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003b24:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003b28:	edd3 7a00 	vldr	s15, [r3]
 8003b2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b30:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003b34:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b40:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003b44:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003b50:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003b54:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003b58:	edd3 7a00 	vldr	s15, [r3]
 8003b5c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b68:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8003b6c:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8003b70:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8003b74:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003b78:	f103 0308 	add.w	r3, r3, #8
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8003b82:	3310      	adds	r3, #16
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	edc3 7a00 	vstr	s15, [r3]

			mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 8003b8c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003b90:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b94:	edd3 7a00 	vldr	s15, [r3]
 8003b98:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003b9c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003ba0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003ba4:	edd3 6a00 	vldr	s13, [r3]
 8003ba8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003bac:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003bb0:	edd3 7a00 	vldr	s15, [r3]
 8003bb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bb8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003bbc:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003bc0:	ed93 6a00 	vldr	s12, [r3]
 8003bc4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003bc8:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003bcc:	edd3 7a00 	vldr	s15, [r3]
 8003bd0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bd4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003bd8:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003bdc:	edd3 5a00 	vldr	s11, [r3]
 8003be0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003be4:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003bf0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003bf4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003bf8:	edd3 7a00 	vldr	s15, [r3]
 8003bfc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003c00:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003c04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c08:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003c0c:	f103 0308 	add.w	r3, r3, #8
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003c18:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	edd3 7a00 	vldr	s15, [r3]
 8003c22:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003c26:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003c2a:	ed93 6a00 	vldr	s12, [r3]
 8003c2e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003c32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003c36:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003c3a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003c3e:	ed93 6a00 	vldr	s12, [r3]
 8003c42:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003c46:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003c4a:	edd3 7a00 	vldr	s15, [r3]
 8003c4e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c52:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003c56:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c62:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003c66:	f103 0308 	add.w	r3, r3, #8
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003c72:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003c76:	4413      	add	r3, r2
 8003c78:	edd3 7a00 	vldr	s15, [r3]
 8003c7c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003c80:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003c84:	edd3 5a00 	vldr	s11, [r3]
 8003c88:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003c8c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c90:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003c94:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003c98:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003c9c:	ed93 6a00 	vldr	s12, [r3]
 8003ca0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003ca4:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003cb0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003cb4:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003cb8:	edd3 7a00 	vldr	s15, [r3]
 8003cbc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003cc0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003cc4:	f103 0308 	add.w	r3, r3, #8
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003cd0:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	edd3 7a00 	vldr	s15, [r3]
 8003cda:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003cde:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003ce2:	edd3 5a00 	vldr	s11, [r3]
 8003ce6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003cea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003cee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003cf2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003cf6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003cfa:	ed93 6a00 	vldr	s12, [r3]
 8003cfe:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003d02:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003d06:	edd3 7a00 	vldr	s15, [r3]
 8003d0a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003d0e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003d12:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003d16:	edd3 5a00 	vldr	s11, [r3]
 8003d1a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003d1e:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003d22:	edd3 7a00 	vldr	s15, [r3]
 8003d26:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003d2a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003d2e:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003d32:	ed93 5a00 	vldr	s10, [r3]
 8003d36:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003d3a:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003d3e:	edd3 7a00 	vldr	s15, [r3]
 8003d42:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003d46:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003d4a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d4e:	edd3 7a00 	vldr	s15, [r3]
 8003d52:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003d56:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003d5a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003d5e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003d62:	f103 0308 	add.w	r3, r3, #8
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003d6e:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003d72:	4413      	add	r3, r2
 8003d74:	edd3 7a00 	vldr	s15, [r3]
 8003d78:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003d7c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003d80:	edd3 5a00 	vldr	s11, [r3]
 8003d84:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003d88:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003d8c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003d90:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003d94:	edd3 5a00 	vldr	s11, [r3]
 8003d98:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003d9c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003da0:	edd3 7a00 	vldr	s15, [r3]
 8003da4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003da8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003dac:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003db0:	edd3 7a00 	vldr	s15, [r3]
 8003db4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003db8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003dbc:	f103 0308 	add.w	r3, r3, #8
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003dc8:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8003dcc:	4413      	add	r3, r2
 8003dce:	edd3 7a00 	vldr	s15, [r3]
 8003dd2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003dd6:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8003dda:	ed93 5a00 	vldr	s10, [r3]
 8003dde:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003de2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003de6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003dea:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003dee:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003df2:	edd3 5a00 	vldr	s11, [r3]
 8003df6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003dfa:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003dfe:	edd3 7a00 	vldr	s15, [r3]
 8003e02:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003e06:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003e0a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003e0e:	edd3 7a00 	vldr	s15, [r3]
 8003e12:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003e16:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003e1a:	f103 0308 	add.w	r3, r3, #8
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003e26:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003e34:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8003e38:	ed93 5a00 	vldr	s10, [r3]
 8003e3c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003e40:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003e44:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e4c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e50:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003e54:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003e58:	edd3 7a00 	vldr	s15, [r3]
 8003e5c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003e60:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003e64:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003e68:	edd3 7a00 	vldr	s15, [r3]
 8003e6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e70:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003e74:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003e78:	edd3 7a00 	vldr	s15, [r3]
 8003e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e80:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003e84:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e90:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003e94:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003e98:	edd3 7a00 	vldr	s15, [r3]
 8003e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ea0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003ea4:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003ea8:	edd3 7a00 	vldr	s15, [r3]
 8003eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eb0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003eb4:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ec0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003ec4:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003ec8:	edd3 7a00 	vldr	s15, [r3]
 8003ecc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003ed0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003ed4:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 8003ed8:	edd3 7a00 	vldr	s15, [r3]
 8003edc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ee4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003ee8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ef4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003ef8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003efc:	edd3 7a00 	vldr	s15, [r3]
 8003f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f08:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003f0c:	f103 0308 	add.w	r3, r3, #8
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003f18:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	edd3 7a00 	vldr	s15, [r3]
 8003f22:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003f26:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003f2a:	edd3 6a00 	vldr	s13, [r3]
 8003f2e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003f32:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003f36:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003f3a:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003f3e:	ed93 6a00 	vldr	s12, [r3]
 8003f42:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003f46:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8003f4a:	edd3 7a00 	vldr	s15, [r3]
 8003f4e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f52:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003f56:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8003f5a:	edd3 5a00 	vldr	s11, [r3]
 8003f5e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003f62:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 8003f66:	edd3 7a00 	vldr	s15, [r3]
 8003f6a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003f6e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003f72:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8003f76:	ed93 5a00 	vldr	s10, [r3]
 8003f7a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003f7e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003f82:	edd3 7a00 	vldr	s15, [r3]
 8003f86:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003f8a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003f8e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003f92:	edd3 7a00 	vldr	s15, [r3]
 8003f96:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003f9a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003f9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003fa2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003fa6:	f103 0308 	add.w	r3, r3, #8
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8003fb2:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	edd3 7a00 	vldr	s15, [r3]
 8003fbc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003fc0:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8003fc4:	edd3 5a00 	vldr	s11, [r3]
 8003fc8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003fcc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003fd0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003fd4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8003fd8:	edd3 5a00 	vldr	s11, [r3]
 8003fdc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8003fe0:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8003fe4:	edd3 7a00 	vldr	s15, [r3]
 8003fe8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003fec:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8003ff0:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8003ff4:	edd3 7a00 	vldr	s15, [r3]
 8003ff8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003ffc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004000:	f103 0308 	add.w	r3, r3, #8
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800400c:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8004010:	4413      	add	r3, r2
 8004012:	edd3 7a00 	vldr	s15, [r3]
 8004016:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800401a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800401e:	ed93 5a00 	vldr	s10, [r3]
 8004022:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004026:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800402a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800402e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004032:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004036:	edd3 5a00 	vldr	s11, [r3]
 800403a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800403e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004042:	edd3 7a00 	vldr	s15, [r3]
 8004046:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800404a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800404e:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004052:	edd3 7a00 	vldr	s15, [r3]
 8004056:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800405a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800405e:	f103 0308 	add.w	r3, r3, #8
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800406a:	f852 2c38 	ldr.w	r2, [r2, #-56]
 800406e:	4413      	add	r3, r2
 8004070:	edd3 7a00 	vldr	s15, [r3]
 8004074:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004078:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800407c:	ed93 5a00 	vldr	s10, [r3]
 8004080:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004084:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004088:	ee76 7a67 	vsub.f32	s15, s12, s15
 800408c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8004090:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004094:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004098:	edd3 7a00 	vldr	s15, [r3]
 800409c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80040a0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80040a4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80040a8:	edd3 7a00 	vldr	s15, [r3]
 80040ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040b0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80040b4:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040c0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80040c4:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80040c8:	edd3 7a00 	vldr	s15, [r3]
 80040cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040d0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80040d4:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040e0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80040e4:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80040e8:	edd3 7a00 	vldr	s15, [r3]
 80040ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040f0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80040f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040f8:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 80040fc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004100:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8004104:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004108:	f103 0308 	add.w	r3, r3, #8
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f503 53f3 	add.w	r3, r3, #7776	@ 0x1e60
 8004112:	3308      	adds	r3, #8
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	edc3 7a00 	vstr	s15, [r3]

			mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 800411c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004120:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004124:	edd3 7a00 	vldr	s15, [r3]
 8004128:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800412c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004130:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004134:	edd3 6a00 	vldr	s13, [r3]
 8004138:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800413c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004140:	edd3 7a00 	vldr	s15, [r3]
 8004144:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004148:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800414c:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004150:	ed93 6a00 	vldr	s12, [r3]
 8004154:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004158:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 800415c:	edd3 7a00 	vldr	s15, [r3]
 8004160:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004164:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004168:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800416c:	edd3 5a00 	vldr	s11, [r3]
 8004170:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004174:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8004178:	edd3 7a00 	vldr	s15, [r3]
 800417c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004180:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004184:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004190:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004194:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004198:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800419c:	f103 0308 	add.w	r3, r3, #8
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80041a8:	f852 2c34 	ldr.w	r2, [r2, #-52]
 80041ac:	4413      	add	r3, r2
 80041ae:	edd3 7a00 	vldr	s15, [r3]
 80041b2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80041b6:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 80041ba:	ed93 6a00 	vldr	s12, [r3]
 80041be:	ee76 7a67 	vsub.f32	s15, s12, s15
 80041c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041c6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80041ca:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80041ce:	ed93 6a00 	vldr	s12, [r3]
 80041d2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80041d6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80041da:	edd3 7a00 	vldr	s15, [r3]
 80041de:	ee26 6a27 	vmul.f32	s12, s12, s15
 80041e2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80041e6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80041ea:	edd3 7a00 	vldr	s15, [r3]
 80041ee:	ee26 6a27 	vmul.f32	s12, s12, s15
 80041f2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80041f6:	f103 0308 	add.w	r3, r3, #8
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004202:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8004206:	4413      	add	r3, r2
 8004208:	edd3 7a00 	vldr	s15, [r3]
 800420c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004210:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8004214:	edd3 5a00 	vldr	s11, [r3]
 8004218:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800421c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004220:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004224:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004228:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800422c:	ed93 6a00 	vldr	s12, [r3]
 8004230:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004234:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004238:	edd3 7a00 	vldr	s15, [r3]
 800423c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004240:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004244:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 8004248:	edd3 7a00 	vldr	s15, [r3]
 800424c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004250:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004254:	f103 0308 	add.w	r3, r3, #8
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004260:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8004264:	4413      	add	r3, r2
 8004266:	edd3 7a00 	vldr	s15, [r3]
 800426a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800426e:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004272:	edd3 5a00 	vldr	s11, [r3]
 8004276:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800427a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800427e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004282:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004286:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800428a:	ed93 6a00 	vldr	s12, [r3]
 800428e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004292:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004296:	edd3 7a00 	vldr	s15, [r3]
 800429a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800429e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80042a2:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80042a6:	edd3 5a00 	vldr	s11, [r3]
 80042aa:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80042ae:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80042b2:	edd3 7a00 	vldr	s15, [r3]
 80042b6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80042ba:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80042be:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80042c2:	ed93 5a00 	vldr	s10, [r3]
 80042c6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80042ca:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80042ce:	edd3 7a00 	vldr	s15, [r3]
 80042d2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80042d6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80042da:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80042de:	edd3 7a00 	vldr	s15, [r3]
 80042e2:	ee65 7a27 	vmul.f32	s15, s10, s15
 80042e6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80042ea:	ee26 6a27 	vmul.f32	s12, s12, s15
 80042ee:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80042f2:	f103 0308 	add.w	r3, r3, #8
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80042fe:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004302:	4413      	add	r3, r2
 8004304:	edd3 7a00 	vldr	s15, [r3]
 8004308:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800430c:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8004310:	edd3 5a00 	vldr	s11, [r3]
 8004314:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8004318:	ee26 6a27 	vmul.f32	s12, s12, s15
 800431c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004320:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004324:	edd3 5a00 	vldr	s11, [r3]
 8004328:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800432c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004330:	edd3 7a00 	vldr	s15, [r3]
 8004334:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004338:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800433c:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8004340:	edd3 7a00 	vldr	s15, [r3]
 8004344:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004348:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800434c:	f103 0308 	add.w	r3, r3, #8
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004358:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 800435c:	4413      	add	r3, r2
 800435e:	edd3 7a00 	vldr	s15, [r3]
 8004362:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004366:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800436a:	ed93 5a00 	vldr	s10, [r3]
 800436e:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004372:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8004376:	ee36 6a27 	vadd.f32	s12, s12, s15
 800437a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800437e:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004382:	edd3 5a00 	vldr	s11, [r3]
 8004386:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800438a:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800438e:	edd3 7a00 	vldr	s15, [r3]
 8004392:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8004396:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800439a:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 800439e:	edd3 7a00 	vldr	s15, [r3]
 80043a2:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80043a6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80043aa:	f103 0308 	add.w	r3, r3, #8
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80043b6:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80043ba:	4413      	add	r3, r2
 80043bc:	edd3 7a00 	vldr	s15, [r3]
 80043c0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80043c4:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80043c8:	ed93 5a00 	vldr	s10, [r3]
 80043cc:	ee75 7a67 	vsub.f32	s15, s10, s15
 80043d0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80043d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80043d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80043e0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80043e4:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80043e8:	edd3 7a00 	vldr	s15, [r3]
 80043ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80043f0:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80043f4:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80043f8:	edd3 7a00 	vldr	s15, [r3]
 80043fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004400:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004404:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004408:	edd3 7a00 	vldr	s15, [r3]
 800440c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004410:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004414:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004418:	edd3 7a00 	vldr	s15, [r3]
 800441c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004420:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004424:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004428:	edd3 7a00 	vldr	s15, [r3]
 800442c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004430:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004434:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8004438:	edd3 7a00 	vldr	s15, [r3]
 800443c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8004440:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004444:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8004448:	edd3 7a00 	vldr	s15, [r3]
 800444c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004450:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004454:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004458:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004464:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004468:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800446c:	edd3 7a00 	vldr	s15, [r3]
 8004470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004474:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004478:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800447c:	edd3 7a00 	vldr	s15, [r3]
 8004480:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800448c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004490:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004494:	edd3 6a00 	vldr	s13, [r3]
 8004498:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800449c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80044a0:	edd3 7a00 	vldr	s15, [r3]
 80044a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80044a8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80044ac:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80044b0:	ed93 6a00 	vldr	s12, [r3]
 80044b4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80044b8:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80044bc:	edd3 7a00 	vldr	s15, [r3]
 80044c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80044c4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80044c8:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80044cc:	edd3 5a00 	vldr	s11, [r3]
 80044d0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80044d4:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80044d8:	edd3 7a00 	vldr	s15, [r3]
 80044dc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80044e0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80044e4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80044e8:	edd3 7a00 	vldr	s15, [r3]
 80044ec:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80044f0:	ee76 7a27 	vadd.f32	s15, s12, s15
 80044f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80044f8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80044fc:	f103 0308 	add.w	r3, r3, #8
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004508:	f852 2c34 	ldr.w	r2, [r2, #-52]
 800450c:	4413      	add	r3, r2
 800450e:	edd3 7a00 	vldr	s15, [r3]
 8004512:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004516:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 800451a:	ed93 6a00 	vldr	s12, [r3]
 800451e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004522:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004526:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800452a:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800452e:	ed93 6a00 	vldr	s12, [r3]
 8004532:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004536:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800453a:	edd3 7a00 	vldr	s15, [r3]
 800453e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004542:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004546:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004552:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004556:	f103 0308 	add.w	r3, r3, #8
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004562:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8004566:	4413      	add	r3, r2
 8004568:	edd3 7a00 	vldr	s15, [r3]
 800456c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004570:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004574:	edd3 5a00 	vldr	s11, [r3]
 8004578:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800457c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004580:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004584:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004588:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800458c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004590:	ed93 6a00 	vldr	s12, [r3]
 8004594:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004598:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800459c:	edd3 7a00 	vldr	s15, [r3]
 80045a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80045a4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80045a8:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80045ac:	edd3 5a00 	vldr	s11, [r3]
 80045b0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80045b4:	f503 73ea 	add.w	r3, r3, #468	@ 0x1d4
 80045b8:	edd3 7a00 	vldr	s15, [r3]
 80045bc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80045c0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80045c4:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80045c8:	ed93 5a00 	vldr	s10, [r3]
 80045cc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80045d0:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80045d4:	edd3 7a00 	vldr	s15, [r3]
 80045d8:	ee25 5a27 	vmul.f32	s10, s10, s15
 80045dc:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80045e0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80045e4:	edd3 7a00 	vldr	s15, [r3]
 80045e8:	ee65 7a27 	vmul.f32	s15, s10, s15
 80045ec:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80045f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80045f4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80045f8:	f103 0308 	add.w	r3, r3, #8
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8004604:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8004608:	4413      	add	r3, r2
 800460a:	edd3 7a00 	vldr	s15, [r3]
 800460e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004612:	f103 032c 	add.w	r3, r3, #44	@ 0x2c
 8004616:	edd3 5a00 	vldr	s11, [r3]
 800461a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800461e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8004622:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004626:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 800462a:	edd3 5a00 	vldr	s11, [r3]
 800462e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004632:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8004636:	edd3 7a00 	vldr	s15, [r3]
 800463a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800463e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004642:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800464e:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004652:	f103 0308 	add.w	r3, r3, #8
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800465e:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 8004662:	4413      	add	r3, r2
 8004664:	edd3 7a00 	vldr	s15, [r3]
 8004668:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800466c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8004670:	ed93 5a00 	vldr	s10, [r3]
 8004674:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004678:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800467c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004680:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004684:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 8004688:	edd3 5a00 	vldr	s11, [r3]
 800468c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004690:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8004694:	edd3 7a00 	vldr	s15, [r3]
 8004698:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800469c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80046a0:	f503 73e8 	add.w	r3, r3, #464	@ 0x1d0
 80046a4:	edd3 7a00 	vldr	s15, [r3]
 80046a8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80046ac:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80046b0:	f103 0308 	add.w	r3, r3, #8
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80046bc:	f852 2c38 	ldr.w	r2, [r2, #-56]
 80046c0:	4413      	add	r3, r2
 80046c2:	edd3 7a00 	vldr	s15, [r3]
 80046c6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80046ca:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80046ce:	ed93 5a00 	vldr	s10, [r3]
 80046d2:	ee75 7a67 	vsub.f32	s15, s10, s15
 80046d6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80046da:	ee76 7a67 	vsub.f32	s15, s12, s15
 80046de:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80046e2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80046e6:	f103 0338 	add.w	r3, r3, #56	@ 0x38
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80046f2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80046f6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80046fa:	edd3 7a00 	vldr	s15, [r3]
 80046fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004702:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004706:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 800470a:	edd3 7a00 	vldr	s15, [r3]
 800470e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004712:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004716:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800471a:	edd3 7a00 	vldr	s15, [r3]
 800471e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004722:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004726:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 800472a:	edd3 7a00 	vldr	s15, [r3]
 800472e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004732:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004736:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800473a:	edd3 7a00 	vldr	s15, [r3]
 800473e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004742:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004746:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 800474a:	edd3 7a00 	vldr	s15, [r3]
 800474e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004752:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004756:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800475a:	edd3 7a00 	vldr	s15, [r3]
 800475e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004762:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004766:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800476a:	edd3 7a00 	vldr	s15, [r3]
 800476e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004772:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004776:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800477a:	edd3 7a00 	vldr	s15, [r3]
 800477e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004782:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004786:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 800478a:	edd3 7a00 	vldr	s15, [r3]
 800478e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004792:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800479a:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 800479e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80047a2:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80047a6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80047aa:	f103 0308 	add.w	r3, r3, #8
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f503 530b 	add.w	r3, r3, #8896	@ 0x22c0
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i < tam; i++)
 80047bc:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80047c0:	f103 0308 	add.w	r3, r3, #8
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3301      	adds	r3, #1
 80047c8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80047cc:	f102 0208 	add.w	r2, r2, #8
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80047d6:	f103 0308 	add.w	r3, r3, #8
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80047e0:	f6fc adba 	blt.w	8001358 <NLLS+0x2e0>
		}

		J = 0;
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80047ec:	f102 0210 	add.w	r2, r2, #16
 80047f0:	6013      	str	r3, [r2, #0]

		for(int i=0; i < tam; i++)
 80047f2:	2300      	movs	r3, #0
 80047f4:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80047f8:	f102 0204 	add.w	r2, r2, #4
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e03c      	b.n	800487a <NLLS+0x3802>
		{
			J += (e[i] * e[i])/2;
 8004800:	f507 33a8 	add.w	r3, r7, #86016	@ 0x15000
 8004804:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004808:	f5a3 7259 	sub.w	r2, r3, #868	@ 0x364
 800480c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004810:	f103 0304 	add.w	r3, r3, #4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	ed93 7a00 	vldr	s14, [r3]
 800481e:	f507 33a8 	add.w	r3, r7, #86016	@ 0x15000
 8004822:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004826:	f5a3 7259 	sub.w	r2, r3, #868	@ 0x364
 800482a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800482e:	f103 0304 	add.w	r3, r3, #4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	edd3 7a00 	vldr	s15, [r3]
 800483c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004840:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004844:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004848:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800484c:	f103 0310 	add.w	r3, r3, #16
 8004850:	ed93 7a00 	vldr	s14, [r3]
 8004854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004858:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800485c:	f103 0310 	add.w	r3, r3, #16
 8004860:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i < tam; i++)
 8004864:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004868:	f103 0304 	add.w	r3, r3, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004874:	f102 0204 	add.w	r2, r2, #4
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800487e:	f103 0304 	add.w	r3, r3, #4
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8004888:	dbba      	blt.n	8004800 <NLLS+0x3788>
		}

		if(passo < 2)
 800488a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800488e:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d80a      	bhi.n	80048ae <NLLS+0x3836>
		{
			error_ant = J;
 8004898:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 800489c:	f103 0310 	add.w	r3, r3, #16
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 80048a6:	f102 0214 	add.w	r2, r2, #20
 80048aa:	6013      	str	r3, [r2, #0]
 80048ac:	e054      	b.n	8004958 <NLLS+0x38e0>
		}
		else
		{
			delta_J = 100*fabs(J-error_ant)/J;
 80048ae:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80048b2:	f103 0310 	add.w	r3, r3, #16
 80048b6:	ed93 7a00 	vldr	s14, [r3]
 80048ba:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80048be:	f103 0314 	add.w	r3, r3, #20
 80048c2:	edd3 7a00 	vldr	s15, [r3]
 80048c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ca:	eef0 7ae7 	vabs.f32	s15, s15
 80048ce:	ee17 0a90 	vmov	r0, s15
 80048d2:	f7fb fdfd 	bl	80004d0 <__aeabi_f2d>
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	4b9d      	ldr	r3, [pc, #628]	@ (8004b50 <NLLS+0x3ad8>)
 80048dc:	f7fb fe50 	bl	8000580 <__aeabi_dmul>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4614      	mov	r4, r2
 80048e6:	461d      	mov	r5, r3
 80048e8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80048ec:	f103 0310 	add.w	r3, r3, #16
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	f7fb fded 	bl	80004d0 <__aeabi_f2d>
 80048f6:	4602      	mov	r2, r0
 80048f8:	460b      	mov	r3, r1
 80048fa:	4620      	mov	r0, r4
 80048fc:	4629      	mov	r1, r5
 80048fe:	f7fb ff69 	bl	80007d4 <__aeabi_ddiv>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4610      	mov	r0, r2
 8004908:	4619      	mov	r1, r3
 800490a:	f7fc f8d3 	bl	8000ab4 <__aeabi_d2f>
 800490e:	4603      	mov	r3, r0
 8004910:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004914:	f502 72e0 	add.w	r2, r2, #448	@ 0x1c0
 8004918:	6013      	str	r3, [r2, #0]
			if(delta_J < 0.05)
 800491a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 800491e:	f503 73e0 	add.w	r3, r3, #448	@ 0x1c0
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	f7fb fdd4 	bl	80004d0 <__aeabi_f2d>
 8004928:	a387      	add	r3, pc, #540	@ (adr r3, 8004b48 <NLLS+0x3ad0>)
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	f7fc f899 	bl	8000a64 <__aeabi_dcmplt>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <NLLS+0x38cc>
			{
				loop = 0;
 8004938:	2300      	movs	r3, #0
 800493a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800493e:	f102 023e 	add.w	r2, r2, #62	@ 0x3e
 8004942:	7013      	strb	r3, [r2, #0]
			}
			error_ant = J;
 8004944:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004948:	f103 0310 	add.w	r3, r3, #16
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004952:	f102 0214 	add.w	r2, r2, #20
 8004956:	6013      	str	r3, [r2, #0]
		}

		for(int i = 0; i < N; i++)
 8004958:	2300      	movs	r3, #0
 800495a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	e0b1      	b.n	8004ac6 <NLLS+0x3a4e>
		{
			for(int j = 0; j < N; j++)
 8004962:	2300      	movs	r3, #0
 8004964:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004968:	f502 72fe 	add.w	r2, r2, #508	@ 0x1fc
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	e09b      	b.n	8004aa8 <NLLS+0x3a30>
			{
				Ht_H[i][j] = 0;
 8004970:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8004974:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004978:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 800497c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4413      	add	r3, r2
 8004988:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 800498c:	f502 72fe 	add.w	r2, r2, #508	@ 0x1fc
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < tam; k++)
 800499e:	2300      	movs	r3, #0
 80049a0:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80049a4:	f502 72fc 	add.w	r2, r2, #504	@ 0x1f8
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	e06a      	b.n	8004a82 <NLLS+0x3a0a>
				{
					Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 80049ac:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 80049b0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80049b4:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 80049b8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4613      	mov	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4413      	add	r3, r2
 80049c4:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 80049c8:	f502 72fe 	add.w	r2, r2, #508	@ 0x1fc
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	4413      	add	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	440b      	add	r3, r1
 80049d4:	ed93 7a00 	vldr	s14, [r3]
 80049d8:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 80049dc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80049e0:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80049e4:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 80049ee:	fb03 f101 	mul.w	r1, r3, r1
 80049f2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 80049f6:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	440b      	add	r3, r1
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	edd3 6a00 	vldr	s13, [r3]
 8004a06:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8004a0a:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004a0e:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8004a12:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004a16:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8004a20:	fb03 f101 	mul.w	r1, r3, r1
 8004a24:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004a28:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	440b      	add	r3, r1
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	edd3 7a00 	vldr	s15, [r3]
 8004a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a40:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8004a44:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004a48:	f5a3 711a 	sub.w	r1, r3, #616	@ 0x268
 8004a4c:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4613      	mov	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4413      	add	r3, r2
 8004a58:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004a5c:	f502 72fe 	add.w	r2, r2, #508	@ 0x1fc
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < tam; k++)
 8004a6c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004a70:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3301      	adds	r3, #1
 8004a78:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004a7c:	f502 72fc 	add.w	r2, r2, #504	@ 0x1f8
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004a86:	f503 73fc 	add.w	r3, r3, #504	@ 0x1f8
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8004a90:	db8c      	blt.n	80049ac <NLLS+0x3934>
			for(int j = 0; j < N; j++)
 8004a92:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004a96:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004aa2:	f502 72fe 	add.w	r2, r2, #508	@ 0x1fc
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004aac:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	f77f af5c 	ble.w	8004970 <NLLS+0x38f8>
		for(int i = 0; i < N; i++)
 8004ab8:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	f77f af48 	ble.w	8004962 <NLLS+0x38ea>
				}
			}
		}

		inverter_matriz(Ht_H, inv);
 8004ad2:	f507 421d 	add.w	r2, r7, #40192	@ 0x9d00
 8004ad6:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8004ada:	3ad0      	subs	r2, #208	@ 0xd0
 8004adc:	f507 431e 	add.w	r3, r7, #40448	@ 0x9e00
 8004ae0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004ae4:	3b68      	subs	r3, #104	@ 0x68
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fc f9ab 	bl	8000e44 <inverter_matriz>

		for(int i = 0; i < N; i++)
 8004aee:	2300      	movs	r3, #0
 8004af0:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004af4:	f502 72fa 	add.w	r2, r2, #500	@ 0x1f4
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e0bf      	b.n	8004c7c <NLLS+0x3c04>
		{
			for(int j = 0; j < tam; j++)
 8004afc:	2300      	movs	r3, #0
 8004afe:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004b02:	f502 72f8 	add.w	r2, r2, #496	@ 0x1f0
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	e0a4      	b.n	8004c54 <NLLS+0x3bdc>
			{
				mul_mat[i][j] = 0;
 8004b0a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004b0e:	4619      	mov	r1, r3
 8004b10:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004b14:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8004b1e:	fb03 f202 	mul.w	r2, r3, r2
 8004b22:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004b26:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	3b30      	subs	r3, #48	@ 0x30
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
				for(int k = 0; k < N; k++)
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004b40:	f502 72f6 	add.w	r2, r2, #492	@ 0x1ec
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e073      	b.n	8004c30 <NLLS+0x3bb8>
 8004b48:	9999999a 	.word	0x9999999a
 8004b4c:	3fa99999 	.word	0x3fa99999
 8004b50:	40590000 	.word	0x40590000
				{
					mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8004b54:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004b5e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8004b68:	fb03 f202 	mul.w	r2, r3, r2
 8004b6c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004b70:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	3b30      	subs	r3, #48	@ 0x30
 8004b7e:	ed93 7a00 	vldr	s14, [r3]
 8004b82:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8004b86:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004b8a:	f5a3 7174 	sub.w	r1, r3, #976	@ 0x3d0
 8004b8e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004b92:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004ba2:	f502 72f6 	add.w	r2, r2, #492	@ 0x1ec
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	edd3 6a00 	vldr	s13, [r3]
 8004bb2:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8004bb6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004bba:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 8004bbe:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004bc2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8004bcc:	fb03 f101 	mul.w	r1, r3, r1
 8004bd0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004bd4:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	440b      	add	r3, r1
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	edd3 7a00 	vldr	s15, [r3]
 8004be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004bf6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8004c00:	fb03 f202 	mul.w	r2, r3, r2
 8004c04:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004c08:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	3b30      	subs	r3, #48	@ 0x30
 8004c16:	edc3 7a00 	vstr	s15, [r3]
				for(int k = 0; k < N; k++)
 8004c1a:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004c1e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3301      	adds	r3, #1
 8004c26:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004c2a:	f502 72f6 	add.w	r2, r2, #492	@ 0x1ec
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004c34:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	dd8a      	ble.n	8004b54 <NLLS+0x3adc>
			for(int j = 0; j < tam; j++)
 8004c3e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004c42:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004c4e:	f502 72f8 	add.w	r2, r2, #496	@ 0x1f0
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004c58:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8004c62:	f6ff af52 	blt.w	8004b0a <NLLS+0x3a92>
		for(int i = 0; i < N; i++)
 8004c66:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004c6a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3301      	adds	r3, #1
 8004c72:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004c76:	f502 72fa 	add.w	r2, r2, #500	@ 0x1f4
 8004c7a:	6013      	str	r3, [r2, #0]
 8004c7c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004c80:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	f77f af38 	ble.w	8004afc <NLLS+0x3a84>
				}
			}
		}

		for(int i = 0; i < N; i++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004c92:	f502 72f4 	add.w	r2, r2, #488	@ 0x1e8
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	e07c      	b.n	8004d94 <NLLS+0x3d1c>
		{
			Ht_e[i] = 0;
 8004c9a:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8004c9e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004ca2:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8004ca6:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004caa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < tam; j++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004cc0:	f502 72f2 	add.w	r2, r2, #484	@ 0x1e4
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e052      	b.n	8004d6e <NLLS+0x3cf6>
			{
				Ht_e[i] += mul_mat[i][j]*e[j];
 8004cc8:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8004ccc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004cd0:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8004cd4:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004cd8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	ed93 7a00 	vldr	s14, [r3]
 8004ce6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004cea:	4619      	mov	r1, r3
 8004cec:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004cf0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8004cfa:	fb03 f202 	mul.w	r2, r3, r2
 8004cfe:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004d02:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4413      	add	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3b30      	subs	r3, #48	@ 0x30
 8004d10:	edd3 6a00 	vldr	s13, [r3]
 8004d14:	f507 33a8 	add.w	r3, r7, #86016	@ 0x15000
 8004d18:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004d1c:	f5a3 7259 	sub.w	r2, r3, #868	@ 0x364
 8004d20:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004d24:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	edd3 7a00 	vldr	s15, [r3]
 8004d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d3a:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8004d3e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004d42:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8004d46:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004d4a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	edc3 7a00 	vstr	s15, [r3]
			for(int j = 0; j < tam; j++)
 8004d58:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004d5c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3301      	adds	r3, #1
 8004d64:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004d68:	f502 72f2 	add.w	r2, r2, #484	@ 0x1e4
 8004d6c:	6013      	str	r3, [r2, #0]
 8004d6e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004d72:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8004d7c:	dba4      	blt.n	8004cc8 <NLLS+0x3c50>
		for(int i = 0; i < N; i++)
 8004d7e:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004d82:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004d8e:	f502 72f4 	add.w	r2, r2, #488	@ 0x1e8
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004d98:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	f77f af7b 	ble.w	8004c9a <NLLS+0x3c22>
			}
		}

		for(int i = 0; i < N; i++)
 8004da4:	2300      	movs	r3, #0
 8004da6:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004daa:	f502 72f0 	add.w	r2, r2, #480	@ 0x1e0
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	e037      	b.n	8004e22 <NLLS+0x3daa>
		{
			p0[i] += Ht_e[i];
 8004db2:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004db6:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	f503 33b8 	add.w	r3, r3, #94208	@ 0x17000
 8004dc2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004dc6:	443b      	add	r3, r7
 8004dc8:	3ba4      	subs	r3, #164	@ 0xa4
 8004dca:	ed93 7a00 	vldr	s14, [r3]
 8004dce:	f507 4320 	add.w	r3, r7, #40960	@ 0xa000
 8004dd2:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004dd6:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8004dda:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004dde:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	edd3 7a00 	vldr	s15, [r3]
 8004dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004df0:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004df4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	f503 33b8 	add.w	r3, r3, #94208	@ 0x17000
 8004e00:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8004e04:	443b      	add	r3, r7
 8004e06:	3ba4      	subs	r3, #164	@ 0xa4
 8004e08:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < N; i++)
 8004e0c:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004e10:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3301      	adds	r3, #1
 8004e18:	f507 32b7 	add.w	r2, r7, #93696	@ 0x16e00
 8004e1c:	f502 72f0 	add.w	r2, r2, #480	@ 0x1e0
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	f507 33b7 	add.w	r3, r7, #93696	@ 0x16e00
 8004e26:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	ddc0      	ble.n	8004db2 <NLLS+0x3d3a>
		}

		passo++;
 8004e30:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004e34:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004e40:	f102 023f 	add.w	r2, r2, #63	@ 0x3f
 8004e44:	7013      	strb	r3, [r2, #0]
	while(loop == 1)
 8004e46:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004e4a:	f103 033e 	add.w	r3, r3, #62	@ 0x3e
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	f43c a974 	beq.w	800113e <NLLS+0xc6>
	}
    p[0] = sx;
 8004e56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004e5a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004e5e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004e62:	f102 0238 	add.w	r2, r2, #56	@ 0x38
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8004e6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004e6e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004e72:	3304      	adds	r3, #4
 8004e74:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004e78:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8004e7c:	6812      	ldr	r2, [r2, #0]
 8004e7e:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 8004e80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004e84:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004e88:	3308      	adds	r3, #8
 8004e8a:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004e8e:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8004e96:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004e9a:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004ea4:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8004eac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004eb0:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004eb4:	3310      	adds	r3, #16
 8004eb6:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004eba:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 8004ec2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004ec6:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004eca:	3314      	adds	r3, #20
 8004ecc:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004ed0:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 8004ed4:	6812      	ldr	r2, [r2, #0]
 8004ed6:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 8004ed8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004edc:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004ee0:	3318      	adds	r3, #24
 8004ee2:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004ee6:	f102 0220 	add.w	r2, r2, #32
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 8004eee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004ef2:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004ef6:	331c      	adds	r3, #28
 8004ef8:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004efc:	f102 021c 	add.w	r2, r2, #28
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 8004f04:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004f08:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004f0c:	3320      	adds	r3, #32
 8004f0e:	f507 32b8 	add.w	r2, r7, #94208	@ 0x17000
 8004f12:	f102 0218 	add.w	r2, r2, #24
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	601a      	str	r2, [r3, #0]

    return passo;
 8004f1a:	f507 33b8 	add.w	r3, r7, #94208	@ 0x17000
 8004f1e:	f103 033f 	add.w	r3, r3, #63	@ 0x3f
 8004f22:	781b      	ldrb	r3, [r3, #0]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	f507 37b8 	add.w	r7, r7, #94208	@ 0x17000
 8004f2a:	3740      	adds	r7, #64	@ 0x40
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bdb0      	pop	{r4, r5, r7, pc}

08004f30 <ETS>:

void ETS(float *mx, float *my, float *mz, float *p)
{
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	ed2d 8b02 	vpush	{d8}
 8004f36:	f5ad 3da6 	sub.w	sp, sp, #84992	@ 0x14c00
 8004f3a:	b0db      	sub	sp, #364	@ 0x16c
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	f607 5468 	addw	r4, r7, #3432	@ 0xd68
 8004f42:	f6a4 545c 	subw	r4, r4, #3420	@ 0xd5c
 8004f46:	6020      	str	r0, [r4, #0]
 8004f48:	f607 5068 	addw	r0, r7, #3432	@ 0xd68
 8004f4c:	f5a0 6056 	sub.w	r0, r0, #3424	@ 0xd60
 8004f50:	6001      	str	r1, [r0, #0]
 8004f52:	f607 5168 	addw	r1, r7, #3432	@ 0xd68
 8004f56:	f6a1 5164 	subw	r1, r1, #3428	@ 0xd64
 8004f5a:	600a      	str	r2, [r1, #0]
 8004f5c:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8004f60:	f6a2 5268 	subw	r2, r2, #3432	@ 0xd68
 8004f64:	6013      	str	r3, [r2, #0]
    //Cria a matriz H
    float mat_H[N][tam], my_2[tam];
    float H_Ht[N][N], inv[N][N];
    float mul_mat[N][tam];
    float X[N];
    float psi7 = 0, psi8 = 0, divs = 0, n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, bx = 0, by = 0, bz = 0, sx = 0, sy = 0, sz = 0, rho = 0, phi = 0, lambida = 0;
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8004f6e:	f502 72a0 	add.w	r2, r2, #320	@ 0x140
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8004f7c:	f502 729e 	add.w	r2, r2, #316	@ 0x13c
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8004f8a:	f502 729c 	add.w	r2, r2, #312	@ 0x138
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8004f98:	f502 729a 	add.w	r2, r2, #308	@ 0x134
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8004fa6:	f502 7298 	add.w	r2, r2, #304	@ 0x130
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8004fb4:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 8004fb8:	6013      	str	r3, [r2, #0]
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8004fc2:	f502 7294 	add.w	r2, r2, #296	@ 0x128
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8004fd0:	f502 7292 	add.w	r2, r2, #292	@ 0x124
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	f04f 0300 	mov.w	r3, #0
 8004fda:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8004fde:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8004fec:	f502 728e 	add.w	r2, r2, #284	@ 0x11c
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8004ffa:	f502 728c 	add.w	r2, r2, #280	@ 0x118
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005008:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005016:	f502 7288 	add.w	r2, r2, #272	@ 0x110
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005024:	f502 7286 	add.w	r2, r2, #268	@ 0x10c
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005032:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8005036:	6013      	str	r3, [r2, #0]
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005040:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800504e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800505c:	f102 02fc 	add.w	r2, r2, #252	@ 0xfc
 8005060:	6013      	str	r3, [r2, #0]
    float X1_2 = 0, X2_2 = 0, X3_2 = 0, X4_2 = 0, X5_2 = 0, X6_2 = 0, X7_2 = 0;
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800506a:	f102 02f8 	add.w	r2, r2, #248	@ 0xf8
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005078:	f102 02f4 	add.w	r2, r2, #244	@ 0xf4
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005086:	f102 02f0 	add.w	r2, r2, #240	@ 0xf0
 800508a:	6013      	str	r3, [r2, #0]
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005094:	f102 02ec 	add.w	r2, r2, #236	@ 0xec
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 80050a2:	f102 02e8 	add.w	r2, r2, #232	@ 0xe8
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 80050b0:	f102 02e4 	add.w	r2, r2, #228	@ 0xe4
 80050b4:	6013      	str	r3, [r2, #0]
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 80050be:	f102 02e0 	add.w	r2, r2, #224	@ 0xe0
 80050c2:	6013      	str	r3, [r2, #0]
    for(int i=0; i < tam; i++)
 80050c4:	2300      	movs	r3, #0
 80050c6:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 80050ca:	f502 72b2 	add.w	r2, r2, #356	@ 0x164
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	e18e      	b.n	80053f0 <ETS+0x4c0>
    {
        mat_H[0][i] = mx[i]*mx[i];
 80050d2:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80050d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80050e2:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	4413      	add	r3, r2
 80050ea:	ed93 7a00 	vldr	s14, [r3]
 80050ee:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80050f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80050fe:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	4413      	add	r3, r2
 8005106:	edd3 7a00 	vldr	s15, [r3]
 800510a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510e:	f507 433d 	add.w	r3, r7, #48384	@ 0xbd00
 8005112:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8005116:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 800511a:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800511e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	edc3 7a00 	vstr	s15, [r3]
        mat_H[1][i] = mx[i]*my[i];
 800512c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005130:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 800513c:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 8005140:	6812      	ldr	r2, [r2, #0]
 8005142:	4413      	add	r3, r2
 8005144:	ed93 7a00 	vldr	s14, [r3]
 8005148:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800514c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8005158:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	4413      	add	r3, r2
 8005160:	edd3 7a00 	vldr	s15, [r3]
 8005164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005168:	f507 433d 	add.w	r3, r7, #48384	@ 0xbd00
 800516c:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8005170:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8005174:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005178:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	edc3 7a00 	vstr	s15, [r3]
        mat_H[2][i] = mx[i]*mz[i];
 800518a:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800518e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 800519a:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	4413      	add	r3, r2
 80051a2:	ed93 7a00 	vldr	s14, [r3]
 80051a6:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80051aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80051b6:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	4413      	add	r3, r2
 80051be:	edd3 7a00 	vldr	s15, [r3]
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	f507 433d 	add.w	r3, r7, #48384	@ 0xbd00
 80051ca:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80051ce:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 80051d2:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80051d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f503 630b 	add.w	r3, r3, #2224	@ 0x8b0
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	edc3 7a00 	vstr	s15, [r3]
        mat_H[3][i] = my[i]*mz[i];
 80051e8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80051ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80051f8:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	4413      	add	r3, r2
 8005200:	ed93 7a00 	vldr	s14, [r3]
 8005204:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005208:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8005214:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	4413      	add	r3, r2
 800521c:	edd3 7a00 	vldr	s15, [r3]
 8005220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005224:	f507 433d 	add.w	r3, r7, #48384	@ 0xbd00
 8005228:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 800522c:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8005230:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005234:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	edc3 7a00 	vstr	s15, [r3]
        mat_H[4][i] = mz[i]*mz[i];
 8005246:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800524a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8005256:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 800525a:	6812      	ldr	r2, [r2, #0]
 800525c:	4413      	add	r3, r2
 800525e:	ed93 7a00 	vldr	s14, [r3]
 8005262:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005266:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 8005272:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	4413      	add	r3, r2
 800527a:	edd3 7a00 	vldr	s15, [r3]
 800527e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005282:	f507 433d 	add.w	r3, r7, #48384	@ 0xbd00
 8005286:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 800528a:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 800528e:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005292:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f503 538b 	add.w	r3, r3, #4448	@ 0x1160
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	edc3 7a00 	vstr	s15, [r3]
        mat_H[5][i] = mx[i];
 80052a4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80052a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80052b4:	f6a2 525c 	subw	r2, r2, #3420	@ 0xd5c
 80052b8:	6812      	ldr	r2, [r2, #0]
 80052ba:	4413      	add	r3, r2
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	f507 433d 	add.w	r3, r7, #48384	@ 0xbd00
 80052c2:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80052c6:	f6a3 41e8 	subw	r1, r3, #3304	@ 0xce8
 80052ca:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80052ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f503 53ad 	add.w	r3, r3, #5536	@ 0x15a0
 80052d8:	3318      	adds	r3, #24
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	601a      	str	r2, [r3, #0]
        mat_H[6][i] = my[i];
 80052e0:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80052e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80052f0:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 80052f4:	6812      	ldr	r2, [r2, #0]
 80052f6:	4413      	add	r3, r2
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	f507 433d 	add.w	r3, r7, #48384	@ 0xbd00
 80052fe:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8005302:	f6a3 41e8 	subw	r1, r3, #3304	@ 0xce8
 8005306:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800530a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8005314:	3310      	adds	r3, #16
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	601a      	str	r2, [r3, #0]
        mat_H[7][i] = mz[i];
 800531c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005320:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 800532c:	f6a2 5264 	subw	r2, r2, #3428	@ 0xd64
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	4413      	add	r3, r2
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	f507 433d 	add.w	r3, r7, #48384	@ 0xbd00
 800533a:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 800533e:	f6a3 41e8 	subw	r1, r3, #3304	@ 0xce8
 8005342:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005346:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f503 53f3 	add.w	r3, r3, #7776	@ 0x1e60
 8005350:	3308      	adds	r3, #8
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	601a      	str	r2, [r3, #0]
        mat_H[8][i] = 1;
 8005358:	f507 433d 	add.w	r3, r7, #48384	@ 0xbd00
 800535c:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8005360:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8005364:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005368:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f503 530b 	add.w	r3, r3, #8896	@ 0x22c0
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800537a:	601a      	str	r2, [r3, #0]
        my_2[i] = -(my[i]*my[i]);
 800537c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005380:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 800538c:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	4413      	add	r3, r2
 8005394:	ed93 7a00 	vldr	s14, [r3]
 8005398:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800539c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	f607 5268 	addw	r2, r7, #3432	@ 0xd68
 80053a8:	f5a2 6256 	sub.w	r2, r2, #3424	@ 0xd60
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	4413      	add	r3, r2
 80053b0:	edd3 7a00 	vldr	s15, [r3]
 80053b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b8:	eef1 7a67 	vneg.f32	s15, s15
 80053bc:	f507 432d 	add.w	r3, r7, #44288	@ 0xad00
 80053c0:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80053c4:	f6a3 6248 	subw	r2, r3, #3656	@ 0xe48
 80053c8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80053cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0; i < tam; i++)
 80053da:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80053de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3301      	adds	r3, #1
 80053e6:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 80053ea:	f502 72b2 	add.w	r2, r2, #356	@ 0x164
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80053f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80053fe:	f6ff ae68 	blt.w	80050d2 <ETS+0x1a2>
    }

    //Multiplicação da matriz H por sua transposta
    for(int i=0; i < N; i++)
 8005402:	2300      	movs	r3, #0
 8005404:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005408:	f502 72b0 	add.w	r2, r2, #352	@ 0x160
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	e0bd      	b.n	800558c <ETS+0x65c>
    {
        for(int j=0; j < N; j++)
 8005410:	2300      	movs	r3, #0
 8005412:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005416:	f502 72ae 	add.w	r2, r2, #348	@ 0x15c
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	e0a3      	b.n	8005566 <ETS+0x636>
        {
            H_Ht[i][j] = 0;
 800541e:	f507 432d 	add.w	r3, r7, #44288	@ 0xad00
 8005422:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8005426:	f6a3 718c 	subw	r1, r3, #3980	@ 0xf8c
 800542a:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800542e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4613      	mov	r3, r2
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4413      	add	r3, r2
 800543a:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800543e:	f502 72ae 	add.w	r2, r2, #348	@ 0x15c
 8005442:	6812      	ldr	r2, [r2, #0]
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	601a      	str	r2, [r3, #0]
            for(int k = 0; k < tam; k++)
 8005450:	2300      	movs	r3, #0
 8005452:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005456:	f502 72ac 	add.w	r2, r2, #344	@ 0x158
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	e070      	b.n	8005540 <ETS+0x610>
            {
                H_Ht[i][j] += mat_H[i][k]*mat_H[j][k];
 800545e:	f507 432d 	add.w	r3, r7, #44288	@ 0xad00
 8005462:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8005466:	f6a3 718c 	subw	r1, r3, #3980	@ 0xf8c
 800546a:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800546e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4613      	mov	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	4413      	add	r3, r2
 800547a:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800547e:	f502 72ae 	add.w	r2, r2, #348	@ 0x15c
 8005482:	6812      	ldr	r2, [r2, #0]
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	ed93 7a00 	vldr	s14, [r3]
 800548e:	f507 433d 	add.w	r3, r7, #48384	@ 0xbd00
 8005492:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8005496:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 800549a:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800549e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 80054a8:	fb03 f101 	mul.w	r1, r3, r1
 80054ac:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80054b0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	440b      	add	r3, r1
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	edd3 6a00 	vldr	s13, [r3]
 80054c0:	f507 433d 	add.w	r3, r7, #48384	@ 0xbd00
 80054c4:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80054c8:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 80054cc:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80054d0:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 80054da:	fb03 f101 	mul.w	r1, r3, r1
 80054de:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80054e2:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	440b      	add	r3, r1
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	edd3 7a00 	vldr	s15, [r3]
 80054f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054fa:	f507 432d 	add.w	r3, r7, #44288	@ 0xad00
 80054fe:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8005502:	f6a3 718c 	subw	r1, r3, #3980	@ 0xf8c
 8005506:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800550a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4613      	mov	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4413      	add	r3, r2
 8005516:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800551a:	f502 72ae 	add.w	r2, r2, #348	@ 0x15c
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	4413      	add	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < tam; k++)
 800552a:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800552e:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800553a:	f502 72ac 	add.w	r2, r2, #344	@ 0x158
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005544:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 800554e:	db86      	blt.n	800545e <ETS+0x52e>
        for(int j=0; j < N; j++)
 8005550:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005554:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005560:	f502 72ae 	add.w	r2, r2, #348	@ 0x15c
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800556a:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b08      	cmp	r3, #8
 8005572:	f77f af54 	ble.w	800541e <ETS+0x4ee>
    for(int i=0; i < N; i++)
 8005576:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800557a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005586:	f502 72b0 	add.w	r2, r2, #352	@ 0x160
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005590:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b08      	cmp	r3, #8
 8005598:	f77f af3a 	ble.w	8005410 <ETS+0x4e0>
            }
        }
    }

    inverter_matriz(H_Ht, inv);
 800559c:	f507 421d 	add.w	r2, r7, #40192	@ 0x9d00
 80055a0:	f102 0268 	add.w	r2, r2, #104	@ 0x68
 80055a4:	3ad0      	subs	r2, #208	@ 0xd0
 80055a6:	f507 431e 	add.w	r3, r7, #40448	@ 0x9e00
 80055aa:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80055ae:	3b8c      	subs	r3, #140	@ 0x8c
 80055b0:	4611      	mov	r1, r2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fb fc46 	bl	8000e44 <inverter_matriz>

    //Multiplica a inversa por H transposta
    for(int i=0; i < N; i++)
 80055b8:	2300      	movs	r3, #0
 80055ba:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 80055be:	f502 72aa 	add.w	r2, r2, #340	@ 0x154
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e0b9      	b.n	800573a <ETS+0x80a>
    {
        for(int j=0; j < tam; j++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 80055cc:	f502 72a8 	add.w	r2, r2, #336	@ 0x150
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e09e      	b.n	8005712 <ETS+0x7e2>
        {
            mul_mat[i][j] = 0;
 80055d4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80055d8:	f5a3 6253 	sub.w	r2, r3, #3376	@ 0xd30
 80055dc:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80055e0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 80055ea:	fb03 f101 	mul.w	r1, r3, r1
 80055ee:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80055f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	440b      	add	r3, r1
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
            for(int k=0; k < N; k++)
 8005604:	2300      	movs	r3, #0
 8005606:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800560a:	f502 72a6 	add.w	r2, r2, #332	@ 0x14c
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	e06d      	b.n	80056ee <ETS+0x7be>
            {
                mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8005612:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005616:	f5a3 6253 	sub.w	r2, r3, #3376	@ 0xd30
 800561a:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800561e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 8005628:	fb03 f101 	mul.w	r1, r3, r1
 800562c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005630:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	440b      	add	r3, r1
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	ed93 7a00 	vldr	s14, [r3]
 8005640:	f507 431d 	add.w	r3, r7, #40192	@ 0x9d00
 8005644:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8005648:	4619      	mov	r1, r3
 800564a:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800564e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	4413      	add	r3, r2
 800565a:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800565e:	f502 72a6 	add.w	r2, r2, #332	@ 0x14c
 8005662:	6812      	ldr	r2, [r2, #0]
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	3bd0      	subs	r3, #208	@ 0xd0
 800566c:	edd3 6a00 	vldr	s13, [r3]
 8005670:	f507 433d 	add.w	r3, r7, #48384	@ 0xbd00
 8005674:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 8005678:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 800567c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005680:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 800568a:	fb03 f101 	mul.w	r1, r3, r1
 800568e:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005692:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	440b      	add	r3, r1
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	edd3 7a00 	vldr	s15, [r3]
 80056a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056aa:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80056ae:	f5a3 6253 	sub.w	r2, r3, #3376	@ 0xd30
 80056b2:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80056b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 80056c0:	fb03 f101 	mul.w	r1, r3, r1
 80056c4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80056c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	440b      	add	r3, r1
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	edc3 7a00 	vstr	s15, [r3]
            for(int k=0; k < N; k++)
 80056d8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80056dc:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3301      	adds	r3, #1
 80056e4:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 80056e8:	f502 72a6 	add.w	r2, r2, #332	@ 0x14c
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80056f2:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	dd8a      	ble.n	8005612 <ETS+0x6e2>
        for(int j=0; j < tam; j++)
 80056fc:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005700:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3301      	adds	r3, #1
 8005708:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800570c:	f502 72a8 	add.w	r2, r2, #336	@ 0x150
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005716:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8005720:	f6ff af58 	blt.w	80055d4 <ETS+0x6a4>
    for(int i=0; i < N; i++)
 8005724:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005728:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3301      	adds	r3, #1
 8005730:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005734:	f502 72aa 	add.w	r2, r2, #340	@ 0x154
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800573e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b08      	cmp	r3, #8
 8005746:	f77f af3e 	ble.w	80055c6 <ETS+0x696>
            }
        }
    }

    //Resultado da psedo-inversa
    for(int i=0; i < N; i++)
 800574a:	2300      	movs	r3, #0
 800574c:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005750:	f502 72a4 	add.w	r2, r2, #328	@ 0x148
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e076      	b.n	8005846 <ETS+0x916>
    {
        X[i] = 0;
 8005758:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800575c:	f6a3 5254 	subw	r2, r3, #3412	@ 0xd54
 8005760:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005764:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	f04f 0200 	mov.w	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
        for(int j=0; j < tam; j++)
 8005774:	2300      	movs	r3, #0
 8005776:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800577a:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
 800577e:	6013      	str	r3, [r2, #0]
 8005780:	e04e      	b.n	8005820 <ETS+0x8f0>
        {
            X[i] += mul_mat[i][j]*my_2[j];
 8005782:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005786:	f6a3 5254 	subw	r2, r3, #3412	@ 0xd54
 800578a:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800578e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4413      	add	r3, r2
 8005798:	ed93 7a00 	vldr	s14, [r3]
 800579c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80057a0:	f5a3 6253 	sub.w	r2, r3, #3376	@ 0xd30
 80057a4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80057a8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f44f 618b 	mov.w	r1, #1112	@ 0x458
 80057b2:	fb03 f101 	mul.w	r1, r3, r1
 80057b6:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80057ba:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	440b      	add	r3, r1
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	edd3 6a00 	vldr	s13, [r3]
 80057ca:	f507 432d 	add.w	r3, r7, #44288	@ 0xad00
 80057ce:	f103 0368 	add.w	r3, r3, #104	@ 0x68
 80057d2:	f6a3 6248 	subw	r2, r3, #3656	@ 0xe48
 80057d6:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80057da:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	edd3 7a00 	vldr	s15, [r3]
 80057e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057f0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80057f4:	f6a3 5254 	subw	r2, r3, #3412	@ 0xd54
 80057f8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80057fc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	edc3 7a00 	vstr	s15, [r3]
        for(int j=0; j < tam; j++)
 800580a:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800580e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3301      	adds	r3, #1
 8005816:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800581a:	f502 72a2 	add.w	r2, r2, #324	@ 0x144
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005824:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 800582e:	dba8      	blt.n	8005782 <ETS+0x852>
    for(int i=0; i < N; i++)
 8005830:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005834:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3301      	adds	r3, #1
 800583c:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8005840:	f502 72a4 	add.w	r2, r2, #328	@ 0x148
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800584a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b08      	cmp	r3, #8
 8005852:	dd81      	ble.n	8005758 <ETS+0x828>
        }
    }


    // Segundo passo, encontrando os parâmetros
    X1_2 = X[1]*X[1];
 8005854:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005858:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800585c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005860:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005864:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005868:	edd3 7a01 	vldr	s15, [r3, #4]
 800586c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005870:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005874:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8005878:	edc3 7a00 	vstr	s15, [r3]
    X2_2 = X[2]*X[2];
 800587c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005880:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005884:	ed93 7a02 	vldr	s14, [r3, #8]
 8005888:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800588c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005890:	edd3 7a02 	vldr	s15, [r3, #8]
 8005894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005898:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800589c:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 80058a0:	edc3 7a00 	vstr	s15, [r3]
    X3_2 = X[3]*X[3];
 80058a4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80058a8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80058ac:	ed93 7a03 	vldr	s14, [r3, #12]
 80058b0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80058b4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80058b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80058bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c0:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80058c4:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 80058c8:	edc3 7a00 	vstr	s15, [r3]
    X4_2 = X[4]*X[4];
 80058cc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80058d0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80058d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80058d8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80058dc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80058e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80058e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80058ec:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 80058f0:	edc3 7a00 	vstr	s15, [r3]
    X5_2 = X[5]*X[5];
 80058f4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80058f8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80058fc:	ed93 7a05 	vldr	s14, [r3, #20]
 8005900:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005904:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005908:	edd3 7a05 	vldr	s15, [r3, #20]
 800590c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005910:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005914:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 8005918:	edc3 7a00 	vstr	s15, [r3]
    X6_2 = X[6]*X[6];
 800591c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005920:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005924:	ed93 7a06 	vldr	s14, [r3, #24]
 8005928:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800592c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005930:	edd3 7a06 	vldr	s15, [r3, #24]
 8005934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005938:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800593c:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8005940:	edc3 7a00 	vstr	s15, [r3]
    X7_2 = X[7]*X[7];
 8005944:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005948:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800594c:	ed93 7a07 	vldr	s14, [r3, #28]
 8005950:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005954:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005958:	edd3 7a07 	vldr	s15, [r3, #28]
 800595c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005960:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005964:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8005968:	edc3 7a00 	vstr	s15, [r3]

    psi7 = 2*(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]);
 800596c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005970:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005974:	ed93 7a04 	vldr	s14, [r3, #16]
 8005978:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800597c:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8005980:	edd3 7a00 	vldr	s15, [r3]
 8005984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005988:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800598c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005990:	edd3 6a01 	vldr	s13, [r3, #4]
 8005994:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005998:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800599c:	edd3 7a02 	vldr	s15, [r3, #8]
 80059a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80059a4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80059a8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80059ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80059b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059b8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80059bc:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 80059c0:	edd3 7a00 	vldr	s15, [r3]
 80059c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059c8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80059cc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80059d0:	edd3 6a00 	vldr	s13, [r3]
 80059d4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80059d8:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 80059dc:	edd3 7a00 	vldr	s15, [r3]
 80059e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059e8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80059ec:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80059f0:	edd3 7a00 	vldr	s15, [r3]
 80059f4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80059f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80059fc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a00:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a04:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005a14:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005a18:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8005a1c:	edc3 7a00 	vstr	s15, [r3]
    bx = -(X3_2 * X[5] + 2*X[2]*X[7] - 4*X[4]*X[5] - X[1]*X[3]*X[7] + 2*X[1]*X[4]*X[6] - X[2]*X[3]*X[6]) / psi7;
 8005a20:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a24:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a28:	ed93 7a05 	vldr	s14, [r3, #20]
 8005a2c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005a30:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8005a34:	edd3 7a00 	vldr	s15, [r3]
 8005a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a3c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a40:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a44:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a48:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005a4c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a50:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a54:	edd3 7a07 	vldr	s15, [r3, #28]
 8005a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a60:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a64:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a68:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a6c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005a70:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005a74:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a78:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a7c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a88:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a8c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a90:	edd3 6a01 	vldr	s13, [r3, #4]
 8005a94:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005a98:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005a9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005aa0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005aa4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005aa8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005aac:	edd3 7a07 	vldr	s15, [r3, #28]
 8005ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ab4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ab8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005abc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ac0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ac4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005ac8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005acc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ad0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ad4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ad8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005adc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ae0:	edd3 7a06 	vldr	s15, [r3, #24]
 8005ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005aec:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005af0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005af4:	edd3 6a02 	vldr	s13, [r3, #8]
 8005af8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005afc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005b00:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b08:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005b0c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005b10:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b1c:	eef1 6a67 	vneg.f32	s13, s15
 8005b20:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005b24:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8005b28:	ed93 7a00 	vldr	s14, [r3]
 8005b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b30:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005b34:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8005b38:	edc3 7a00 	vstr	s15, [r3]
    by = -(X2_2 * X[6] + 2*X[0]*X[3]*X[7] - 4*X[0]*X[4]*X[6] - X[1]*X[2]*X[7] + 2*X[1]*X[4]*X[5] - X[2]*X[3]*X[5]) / psi7;
 8005b3c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005b40:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005b44:	ed93 7a06 	vldr	s14, [r3, #24]
 8005b48:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005b4c:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 8005b50:	edd3 7a00 	vldr	s15, [r3]
 8005b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b58:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005b5c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005b60:	edd3 7a00 	vldr	s15, [r3]
 8005b64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005b68:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005b6c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005b70:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b78:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005b7c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005b80:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b8c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005b90:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005b94:	edd3 7a00 	vldr	s15, [r3]
 8005b98:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005b9c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005ba0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ba4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ba8:	edd3 7a04 	vldr	s15, [r3, #16]
 8005bac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005bb0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005bb4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005bb8:	edd3 7a06 	vldr	s15, [r3, #24]
 8005bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bc4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005bc8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005bcc:	edd3 6a01 	vldr	s13, [r3, #4]
 8005bd0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005bd4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005bd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8005bdc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005be0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005be4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005be8:	edd3 7a07 	vldr	s15, [r3, #28]
 8005bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bf4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005bf8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005bfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c00:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005c04:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005c08:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005c0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c14:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005c18:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005c1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c28:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005c2c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005c30:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c34:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005c38:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005c3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005c40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005c44:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005c48:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005c4c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c58:	eef1 6a67 	vneg.f32	s13, s15
 8005c5c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005c60:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8005c64:	ed93 7a00 	vldr	s14, [r3]
 8005c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c6c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005c70:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8005c74:	edc3 7a00 	vstr	s15, [r3]
    bz = -(X1_2*X[7] - 4*X[0]*X[7] + 2*X[2]*X[5] + 2*X[0]*X[3]*X[6] - X[1]*X[2]*X[6] - X[1]*X[3]*X[5]) / psi7;
 8005c78:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005c7c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005c80:	ed93 7a07 	vldr	s14, [r3, #28]
 8005c84:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005c88:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8005c8c:	edd3 7a00 	vldr	s15, [r3]
 8005c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c94:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005c98:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005c9c:	edd3 7a00 	vldr	s15, [r3]
 8005ca0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005ca4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005ca8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005cac:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005cb0:	edd3 7a07 	vldr	s15, [r3, #28]
 8005cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cbc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005cc0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005cc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8005cc8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005ccc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005cd0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005cd4:	edd3 7a05 	vldr	s15, [r3, #20]
 8005cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ce0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ce4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ce8:	edd3 7a00 	vldr	s15, [r3]
 8005cec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005cf0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005cf4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005cf8:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d00:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d04:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d08:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d14:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d18:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d1c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005d20:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d24:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d28:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d30:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d34:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d38:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d44:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d48:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d4c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005d50:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d54:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d58:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d60:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005d64:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005d68:	edd3 7a05 	vldr	s15, [r3, #20]
 8005d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d74:	eef1 6a67 	vneg.f32	s13, s15
 8005d78:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005d7c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8005d80:	ed93 7a00 	vldr	s14, [r3]
 8005d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d88:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005d8c:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8005d90:	edc3 7a00 	vstr	s15, [r3]

    psi8 = -X1_2*X7_2 + 4*X[4]*X[8]*X1_2 - 4*X[8]*X[1]*X[2]*X[3] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[4]*X[1]*X[5]*X[6] - X2_2*X6_2 + 4*X[8]*X2_2 + 2*X[2]*X[3]*X[5]*X[6] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[0]*X[8]*X3_2 + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8] - 4*X[0]*X[3]*X[6]*X[7];
 8005d94:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005d98:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8005d9c:	edd3 7a00 	vldr	s15, [r3]
 8005da0:	eeb1 7a67 	vneg.f32	s14, s15
 8005da4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005da8:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8005dac:	edd3 7a00 	vldr	s15, [r3]
 8005db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005db4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005db8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005dbc:	edd3 7a04 	vldr	s15, [r3, #16]
 8005dc0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005dc4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005dc8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005dcc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005dd0:	edd3 7a08 	vldr	s15, [r3, #32]
 8005dd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005dd8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005ddc:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8005de0:	edd3 7a00 	vldr	s15, [r3]
 8005de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dec:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005df0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005df4:	edd3 7a08 	vldr	s15, [r3, #32]
 8005df8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005dfc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005e00:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e04:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e08:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e10:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e14:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e18:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e20:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e24:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e28:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e34:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e38:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e40:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005e44:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e48:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e54:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e58:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e5c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e64:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e68:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e6c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005e70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e78:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e7c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e80:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e84:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005e88:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e8c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005e90:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e98:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005e9c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ea0:	edd3 7a05 	vldr	s15, [r3, #20]
 8005ea4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ea8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005eac:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005eb0:	edd3 7a07 	vldr	s15, [r3, #28]
 8005eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ebc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ec0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ec4:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ec8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005ecc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005ed0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ed4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ed8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005edc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ee0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ee4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ee8:	edd3 7a05 	vldr	s15, [r3, #20]
 8005eec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ef0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005ef4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ef8:	edd3 7a06 	vldr	s15, [r3, #24]
 8005efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f04:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005f08:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 8005f0c:	edd3 6a00 	vldr	s13, [r3]
 8005f10:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005f14:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8005f18:	edd3 7a00 	vldr	s15, [r3]
 8005f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f24:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f28:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f2c:	edd3 7a08 	vldr	s15, [r3, #32]
 8005f30:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005f34:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005f38:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005f3c:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 8005f40:	edd3 7a00 	vldr	s15, [r3]
 8005f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f4c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f50:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f54:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f58:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005f5c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f60:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f64:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f6c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f70:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f74:	edd3 7a05 	vldr	s15, [r3, #20]
 8005f78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f7c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f80:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f84:	edd3 7a06 	vldr	s15, [r3, #24]
 8005f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f90:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005f94:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005f98:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f9c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005fa0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005fa4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005fa8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005fac:	edd3 7a05 	vldr	s15, [r3, #20]
 8005fb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fb4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005fb8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005fbc:	edd3 7a07 	vldr	s15, [r3, #28]
 8005fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fc8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005fcc:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8005fd0:	edd3 6a00 	vldr	s13, [r3]
 8005fd4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8005fd8:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 8005fdc:	edd3 7a00 	vldr	s15, [r3]
 8005fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fe4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fe8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8005fec:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8005ff0:	edd3 7a00 	vldr	s15, [r3]
 8005ff4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005ff8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005ffc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006000:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006004:	edd3 7a08 	vldr	s15, [r3, #32]
 8006008:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800600c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006010:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8006014:	edd3 7a00 	vldr	s15, [r3]
 8006018:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800601c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006020:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006024:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006028:	edd3 7a04 	vldr	s15, [r3, #16]
 800602c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006030:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006034:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006038:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 800603c:	edd3 7a00 	vldr	s15, [r3]
 8006040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006048:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800604c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006050:	edd3 7a00 	vldr	s15, [r3]
 8006054:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006058:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800605c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006060:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006064:	edd3 7a04 	vldr	s15, [r3, #16]
 8006068:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800606c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006070:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8006074:	edd3 7a00 	vldr	s15, [r3]
 8006078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800607c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006080:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006084:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006088:	edd3 7a00 	vldr	s15, [r3]
 800608c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006090:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006094:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006098:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 800609c:	edd3 7a00 	vldr	s15, [r3]
 80060a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060a8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80060ac:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80060b0:	edd3 7a00 	vldr	s15, [r3]
 80060b4:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80060b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80060bc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80060c0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80060c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80060c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80060cc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80060d0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80060d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80060d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80060e0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80060e4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80060e8:	edd3 7a00 	vldr	s15, [r3]
 80060ec:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80060f0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80060f4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80060f8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80060fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8006100:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006104:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006108:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800610c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006110:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006114:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006118:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800611c:	edd3 7a07 	vldr	s15, [r3, #28]
 8006120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006128:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800612c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006130:	edc3 7a00 	vstr	s15, [r3]

    divs =  2 * fabsf(X[4])*fabsf(X[4])*fabsf(X[4]) * (X[4] * X1_2 - X[1] * X[2] * X[3] + X2_2 + X[0] * X3_2 - 4 * X[0] * X[4]);
 8006134:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006138:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800613c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006140:	eef0 7ae7 	vabs.f32	s15, s15
 8006144:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006148:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800614c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006150:	edd3 7a04 	vldr	s15, [r3, #16]
 8006154:	eef0 7ae7 	vabs.f32	s15, s15
 8006158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800615c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006160:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006164:	edd3 7a04 	vldr	s15, [r3, #16]
 8006168:	eef0 7ae7 	vabs.f32	s15, s15
 800616c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006170:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006174:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006178:	edd3 6a04 	vldr	s13, [r3, #16]
 800617c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006180:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8006184:	edd3 7a00 	vldr	s15, [r3]
 8006188:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800618c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006190:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006194:	ed93 6a01 	vldr	s12, [r3, #4]
 8006198:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800619c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80061a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80061a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80061a8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80061ac:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80061b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80061b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80061b8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80061bc:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80061c0:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 80061c4:	edd3 7a00 	vldr	s15, [r3]
 80061c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80061cc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80061d0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80061d4:	ed93 6a00 	vldr	s12, [r3]
 80061d8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80061dc:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 80061e0:	edd3 7a00 	vldr	s15, [r3]
 80061e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80061e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80061ec:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80061f0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80061f4:	edd3 7a00 	vldr	s15, [r3]
 80061f8:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 80061fc:	ee27 6a86 	vmul.f32	s12, s15, s12
 8006200:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006204:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006208:	edd3 7a04 	vldr	s15, [r3, #16]
 800620c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006210:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006218:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800621c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006220:	edc3 7a00 	vstr	s15, [r3]

    sx = -X4_2*X[4] * sqrtf(psi8 * (-X3_2 + 4*X[4])) / (divs);
 8006224:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006228:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 800622c:	edd3 7a00 	vldr	s15, [r3]
 8006230:	eeb1 7a67 	vneg.f32	s14, s15
 8006234:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006238:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800623c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006240:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006244:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006248:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800624c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006250:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006254:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006258:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800625c:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8006260:	edd3 7a00 	vldr	s15, [r3]
 8006264:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006268:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800626c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006270:	edd3 7a00 	vldr	s15, [r3]
 8006274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006278:	eeb0 0a67 	vmov.f32	s0, s15
 800627c:	f003 f8bc 	bl	80093f8 <sqrtf>
 8006280:	eef0 7a40 	vmov.f32	s15, s0
 8006284:	ee68 6a27 	vmul.f32	s13, s16, s15
 8006288:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800628c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006290:	ed93 7a00 	vldr	s14, [r3]
 8006294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006298:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800629c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80062a0:	edc3 7a00 	vstr	s15, [r3]
    sy = -X4_2*X[4] * sqrtf(psi8 * (-X2_2 + 4*X[0]*X[4])) / (divs);
 80062a4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80062a8:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 80062ac:	edd3 7a00 	vldr	s15, [r3]
 80062b0:	eeb1 7a67 	vneg.f32	s14, s15
 80062b4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80062b8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80062bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80062c0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80062c4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80062c8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80062cc:	edd3 7a00 	vldr	s15, [r3]
 80062d0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80062d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80062d8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80062dc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80062e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80062e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062e8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80062ec:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 80062f0:	edd3 7a00 	vldr	s15, [r3]
 80062f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062f8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80062fc:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006300:	edd3 7a00 	vldr	s15, [r3]
 8006304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006308:	eeb0 0a67 	vmov.f32	s0, s15
 800630c:	f003 f874 	bl	80093f8 <sqrtf>
 8006310:	eef0 7a40 	vmov.f32	s15, s0
 8006314:	ee68 6a27 	vmul.f32	s13, s16, s15
 8006318:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800631c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8006320:	ed93 7a00 	vldr	s14, [r3]
 8006324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006328:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800632c:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8006330:	edc3 7a00 	vstr	s15, [r3]
    sz = -X4_2*X[4] * sqrtf(psi8 * (-X1_2 + 4*X[0])) / (divs);
 8006334:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006338:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 800633c:	edd3 7a00 	vldr	s15, [r3]
 8006340:	eeb1 7a67 	vneg.f32	s14, s15
 8006344:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006348:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800634c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006350:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006354:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006358:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800635c:	edd3 7a00 	vldr	s15, [r3]
 8006360:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006364:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006368:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800636c:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8006370:	edd3 7a00 	vldr	s15, [r3]
 8006374:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006378:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800637c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8006380:	edd3 7a00 	vldr	s15, [r3]
 8006384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006388:	eeb0 0a67 	vmov.f32	s0, s15
 800638c:	f003 f834 	bl	80093f8 <sqrtf>
 8006390:	eef0 7a40 	vmov.f32	s15, s0
 8006394:	ee68 6a27 	vmul.f32	s13, s16, s15
 8006398:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800639c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80063a0:	ed93 7a00 	vldr	s14, [r3]
 80063a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063a8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80063ac:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80063b0:	edc3 7a00 	vstr	s15, [r3]

    rho = (2 * X[1]*X[4] - X[2]*X[3]) / (2*X4_2 * sqrtf(-(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]) / (X4_2*X[4])));
 80063b4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80063b8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80063bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80063c0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80063c4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80063c8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80063cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80063d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063d4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80063d8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80063dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80063e0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80063e4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80063e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80063ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063f0:	ee37 8a67 	vsub.f32	s16, s14, s15
 80063f4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80063f8:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 80063fc:	edd3 7a00 	vldr	s15, [r3]
 8006400:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8006404:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006408:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800640c:	ed93 7a04 	vldr	s14, [r3, #16]
 8006410:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006414:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8006418:	edd3 7a00 	vldr	s15, [r3]
 800641c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006420:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006424:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006428:	edd3 6a01 	vldr	s13, [r3, #4]
 800642c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006430:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006434:	edd3 7a02 	vldr	s15, [r3, #8]
 8006438:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800643c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006440:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006444:	edd3 7a03 	vldr	s15, [r3, #12]
 8006448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800644c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006450:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006454:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 8006458:	edd3 7a00 	vldr	s15, [r3]
 800645c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006460:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006464:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006468:	edd3 6a00 	vldr	s13, [r3]
 800646c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006470:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8006474:	edd3 7a00 	vldr	s15, [r3]
 8006478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800647c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006480:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006484:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006488:	edd3 7a00 	vldr	s15, [r3]
 800648c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006490:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006494:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006498:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800649c:	edd3 7a04 	vldr	s15, [r3, #16]
 80064a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064a8:	eeb1 7a67 	vneg.f32	s14, s15
 80064ac:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80064b0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80064b4:	edd3 6a04 	vldr	s13, [r3, #16]
 80064b8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80064bc:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 80064c0:	edd3 7a00 	vldr	s15, [r3]
 80064c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80064cc:	eeb0 0a66 	vmov.f32	s0, s13
 80064d0:	f002 ff92 	bl	80093f8 <sqrtf>
 80064d4:	eef0 7a40 	vmov.f32	s15, s0
 80064d8:	ee28 7aa7 	vmul.f32	s14, s17, s15
 80064dc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80064e0:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80064e4:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80064e8:	edc3 7a00 	vstr	s15, [r3]
    rho = -atanf(rho);
 80064ec:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80064f0:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80064f4:	ed93 0a00 	vldr	s0, [r3]
 80064f8:	f002 ff9c 	bl	8009434 <atanf>
 80064fc:	eef0 7a40 	vmov.f32	s15, s0
 8006500:	eef1 7a67 	vneg.f32	s15, s15
 8006504:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006508:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800650c:	edc3 7a00 	vstr	s15, [r3]
    lambida = -atanf((X[3] / X[4]) * sqrtf(-(X4_2 * (X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 - 4*X[0]*X[4]) / (2*X1_2*X3_2*X[4] - 4* X1_2 * X4_2 - 4*X1_2 * X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2 * X3_2 + X[0]* X3_2*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2))));
 8006510:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006514:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006518:	ed93 7a03 	vldr	s14, [r3, #12]
 800651c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006520:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006524:	edd3 7a04 	vldr	s15, [r3, #16]
 8006528:	ee87 8a27 	vdiv.f32	s16, s14, s15
 800652c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006530:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006534:	ed93 7a04 	vldr	s14, [r3, #16]
 8006538:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800653c:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8006540:	edd3 7a00 	vldr	s15, [r3]
 8006544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006548:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800654c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006550:	edd3 6a01 	vldr	s13, [r3, #4]
 8006554:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006558:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800655c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006560:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006564:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006568:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800656c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006574:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006578:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800657c:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 8006580:	edd3 7a00 	vldr	s15, [r3]
 8006584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006588:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800658c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006590:	edd3 7a00 	vldr	s15, [r3]
 8006594:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006598:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800659c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80065a0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80065a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80065a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80065b0:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80065b4:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 80065b8:	edd3 7a00 	vldr	s15, [r3]
 80065bc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80065c0:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80065c4:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 80065c8:	edd3 7a00 	vldr	s15, [r3]
 80065cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80065d0:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80065d4:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 80065d8:	edd3 7a00 	vldr	s15, [r3]
 80065dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065e0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80065e4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80065e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80065ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065f0:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80065f4:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 80065f8:	edd3 7a00 	vldr	s15, [r3]
 80065fc:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8006600:	ee27 6a86 	vmul.f32	s12, s15, s12
 8006604:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006608:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 800660c:	edd3 7a00 	vldr	s15, [r3]
 8006610:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006614:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006618:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800661c:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8006620:	edd3 7a00 	vldr	s15, [r3]
 8006624:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8006628:	ee27 6a86 	vmul.f32	s12, s15, s12
 800662c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006630:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 8006634:	edd3 7a00 	vldr	s15, [r3]
 8006638:	ee66 7a27 	vmul.f32	s15, s12, s15
 800663c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006640:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006644:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006648:	ed93 6a01 	vldr	s12, [r3, #4]
 800664c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006650:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006654:	edd3 7a02 	vldr	s15, [r3, #8]
 8006658:	ee26 6a27 	vmul.f32	s12, s12, s15
 800665c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006660:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8006664:	edd3 7a00 	vldr	s15, [r3]
 8006668:	ee26 6a27 	vmul.f32	s12, s12, s15
 800666c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006670:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006674:	edd3 7a03 	vldr	s15, [r3, #12]
 8006678:	ee66 7a27 	vmul.f32	s15, s12, s15
 800667c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006680:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006684:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 8006688:	ed93 6a00 	vldr	s12, [r3]
 800668c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006690:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8006694:	edd3 7a00 	vldr	s15, [r3]
 8006698:	ee66 7a27 	vmul.f32	s15, s12, s15
 800669c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066a0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80066a4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80066a8:	ed93 6a00 	vldr	s12, [r3]
 80066ac:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80066b0:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 80066b4:	edd3 7a00 	vldr	s15, [r3]
 80066b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80066bc:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80066c0:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 80066c4:	edd3 7a00 	vldr	s15, [r3]
 80066c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80066cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80066d0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80066d4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80066d8:	edd3 7a00 	vldr	s15, [r3]
 80066dc:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
 80066e0:	ee27 6a86 	vmul.f32	s12, s15, s12
 80066e4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80066e8:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 80066ec:	edd3 7a00 	vldr	s15, [r3]
 80066f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80066f4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80066f8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80066fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8006700:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006704:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006708:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800670c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006710:	edd3 7a00 	vldr	s15, [r3]
 8006714:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 8006718:	ee27 6a86 	vmul.f32	s12, s15, s12
 800671c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006720:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 8006724:	edd3 7a00 	vldr	s15, [r3]
 8006728:	ee66 7a27 	vmul.f32	s15, s12, s15
 800672c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006730:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006734:	eef1 7a67 	vneg.f32	s15, s15
 8006738:	eeb0 0a67 	vmov.f32	s0, s15
 800673c:	f002 fe5c 	bl	80093f8 <sqrtf>
 8006740:	eef0 7a40 	vmov.f32	s15, s0
 8006744:	ee68 7a27 	vmul.f32	s15, s16, s15
 8006748:	eeb0 0a67 	vmov.f32	s0, s15
 800674c:	f002 fe72 	bl	8009434 <atanf>
 8006750:	eef0 7a40 	vmov.f32	s15, s0
 8006754:	eef1 7a67 	vneg.f32	s15, s15
 8006758:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800675c:	f103 03fc 	add.w	r3, r3, #252	@ 0xfc
 8006760:	edc3 7a00 	vstr	s15, [r3]

    n1 = -X1_2*X7_2 + 4*X1_2*X[4]*X[8] - 4*X[1]*X[2]*X[3]*X[8] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[1]*X[4]*X[5]*X[6] - X2_2*X6_2 + 2*X[2]*X[3]*X[5]*X[6] + 4*X2_2*X[8] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[1]*X3_2*X[8] - 4*X[0]*X[3]*X[6]*X[7] + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8];
 8006764:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006768:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 800676c:	edd3 7a00 	vldr	s15, [r3]
 8006770:	eeb1 7a67 	vneg.f32	s14, s15
 8006774:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006778:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 800677c:	edd3 7a00 	vldr	s15, [r3]
 8006780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006784:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006788:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 800678c:	edd3 7a00 	vldr	s15, [r3]
 8006790:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006794:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006798:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800679c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80067a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80067a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80067a8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80067ac:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80067b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80067b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067bc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80067c0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80067c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80067c8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80067cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80067d0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80067d4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80067d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80067dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80067e0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80067e4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80067e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80067ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80067f0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80067f4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80067f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80067fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006800:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006804:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006808:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800680c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006810:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006814:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006818:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800681c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006820:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006824:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006828:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800682c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006830:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006834:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006838:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800683c:	edd3 7a07 	vldr	s15, [r3, #28]
 8006840:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006848:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800684c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006850:	edd3 7a01 	vldr	s15, [r3, #4]
 8006854:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006858:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800685c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006860:	edd3 7a03 	vldr	s15, [r3, #12]
 8006864:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006868:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800686c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006870:	edd3 7a05 	vldr	s15, [r3, #20]
 8006874:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006878:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800687c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006880:	edd3 7a07 	vldr	s15, [r3, #28]
 8006884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800688c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006890:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006894:	edd3 7a01 	vldr	s15, [r3, #4]
 8006898:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800689c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80068a0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80068a4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80068a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80068ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80068b0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80068b4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80068b8:	edd3 7a05 	vldr	s15, [r3, #20]
 80068bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80068c0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80068c4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80068c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80068cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068d4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80068d8:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 80068dc:	edd3 6a00 	vldr	s13, [r3]
 80068e0:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80068e4:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 80068e8:	edd3 7a00 	vldr	s15, [r3]
 80068ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068f4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80068f8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80068fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8006900:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006904:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006908:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800690c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006910:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006914:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006918:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800691c:	edd3 7a05 	vldr	s15, [r3, #20]
 8006920:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006924:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006928:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800692c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006934:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006938:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800693c:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 8006940:	edd3 7a00 	vldr	s15, [r3]
 8006944:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006948:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800694c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006950:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006954:	edd3 7a08 	vldr	s15, [r3, #32]
 8006958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800695c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006960:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006964:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006968:	edd3 7a02 	vldr	s15, [r3, #8]
 800696c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006970:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006974:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006978:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800697c:	edd3 7a05 	vldr	s15, [r3, #20]
 8006980:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006984:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006988:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 800698c:	edd3 7a07 	vldr	s15, [r3, #28]
 8006990:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006994:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006998:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 800699c:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 80069a0:	edd3 6a00 	vldr	s13, [r3]
 80069a4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80069a8:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 80069ac:	edd3 7a00 	vldr	s15, [r3]
 80069b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069b8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80069bc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80069c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80069c4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80069c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80069cc:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 80069d0:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 80069d4:	edd3 7a00 	vldr	s15, [r3]
 80069d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80069dc:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80069e0:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80069e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80069e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069f0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 80069f4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 80069f8:	edd3 7a00 	vldr	s15, [r3]
 80069fc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006a00:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006a04:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006a08:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006a0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006a10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006a14:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006a18:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006a1c:	edd3 7a06 	vldr	s15, [r3, #24]
 8006a20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006a24:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006a28:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006a2c:	edd3 7a07 	vldr	s15, [r3, #28]
 8006a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a38:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006a3c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006a40:	edd3 7a04 	vldr	s15, [r3, #16]
 8006a44:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006a48:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006a4c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006a50:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 8006a54:	edd3 7a00 	vldr	s15, [r3]
 8006a58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a60:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006a64:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006a68:	edd3 7a00 	vldr	s15, [r3]
 8006a6c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006a70:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006a74:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006a78:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006a7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006a80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006a84:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006a88:	f103 03e4 	add.w	r3, r3, #228	@ 0xe4
 8006a8c:	edd3 7a00 	vldr	s15, [r3]
 8006a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a98:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006a9c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006aa0:	edd3 7a00 	vldr	s15, [r3]
 8006aa4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006aa8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006aac:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006ab0:	f103 03e0 	add.w	r3, r3, #224	@ 0xe0
 8006ab4:	edd3 7a00 	vldr	s15, [r3]
 8006ab8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ac0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006ac4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006ac8:	edd3 7a00 	vldr	s15, [r3]
 8006acc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8006ad0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006ad4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006ad8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006adc:	edd3 7a04 	vldr	s15, [r3, #16]
 8006ae0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006ae4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006ae8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006aec:	edd3 7a08 	vldr	s15, [r3, #32]
 8006af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006af8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006afc:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006b00:	edc3 7a00 	vstr	s15, [r3]
    n2 = X1_2*X[4] - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4];
 8006b04:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006b08:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006b0c:	ed93 7a04 	vldr	s14, [r3, #16]
 8006b10:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006b14:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8006b18:	edd3 7a00 	vldr	s15, [r3]
 8006b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b20:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006b24:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006b28:	edd3 6a01 	vldr	s13, [r3, #4]
 8006b2c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006b30:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006b34:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006b3c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006b40:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006b44:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006b50:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006b54:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 8006b58:	edd3 7a00 	vldr	s15, [r3]
 8006b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b60:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006b64:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006b68:	edd3 6a00 	vldr	s13, [r3]
 8006b6c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006b70:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8006b74:	edd3 7a00 	vldr	s15, [r3]
 8006b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b80:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006b84:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006b88:	edd3 7a00 	vldr	s15, [r3]
 8006b8c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006b90:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006b94:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006b98:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006b9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ba8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006bac:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006bb0:	edc3 7a00 	vstr	s15, [r3]
    n3 = 2*X1_2*X3_2*X[4] - 4*X1_2*X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2*X3_2 + X[0]*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2;
 8006bb4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006bb8:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8006bbc:	edd3 7a00 	vldr	s15, [r3]
 8006bc0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006bc4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006bc8:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8006bcc:	edd3 7a00 	vldr	s15, [r3]
 8006bd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bd4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006bd8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006bdc:	edd3 7a04 	vldr	s15, [r3, #16]
 8006be0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006be4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006be8:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8006bec:	edd3 7a00 	vldr	s15, [r3]
 8006bf0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006bf4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006bf8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006bfc:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 8006c00:	edd3 7a00 	vldr	s15, [r3]
 8006c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c0c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006c10:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006c14:	edd3 6a01 	vldr	s13, [r3, #4]
 8006c18:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006c1c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006c20:	edd3 7a02 	vldr	s15, [r3, #8]
 8006c24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006c28:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006c2c:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8006c30:	edd3 7a00 	vldr	s15, [r3]
 8006c34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006c38:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006c3c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006c40:	edd3 7a03 	vldr	s15, [r3, #12]
 8006c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c4c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006c50:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 8006c54:	edd3 6a00 	vldr	s13, [r3]
 8006c58:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006c5c:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8006c60:	edd3 7a00 	vldr	s15, [r3]
 8006c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c6c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006c70:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006c74:	edd3 6a00 	vldr	s13, [r3]
 8006c78:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006c7c:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8006c80:	edd3 7a00 	vldr	s15, [r3]
 8006c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c8c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006c90:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006c94:	edd3 7a00 	vldr	s15, [r3]
 8006c98:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8006c9c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006ca0:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006ca4:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8006ca8:	edd3 7a00 	vldr	s15, [r3]
 8006cac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006cb0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006cb4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006cb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8006cbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006cc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006cc4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006cc8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006ccc:	edd3 7a00 	vldr	s15, [r3]
 8006cd0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8006cd4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006cd8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006cdc:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 8006ce0:	edd3 7a00 	vldr	s15, [r3]
 8006ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cec:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006cf0:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8006cf4:	edc3 7a00 	vstr	s15, [r3]
    n4 = 4*X[4] - X3_2;
 8006cf8:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006cfc:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006d00:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d04:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006d08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006d0c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006d10:	f103 03f0 	add.w	r3, r3, #240	@ 0xf0
 8006d14:	edd3 7a00 	vldr	s15, [r3]
 8006d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d1c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006d20:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8006d24:	edc3 7a00 	vstr	s15, [r3]
    n5 = 4*X[0]*X[4] - X2_2;
 8006d28:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006d2c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006d30:	edd3 7a00 	vldr	s15, [r3]
 8006d34:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006d38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006d3c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006d40:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006d44:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d4c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006d50:	f103 03f4 	add.w	r3, r3, #244	@ 0xf4
 8006d54:	edd3 7a00 	vldr	s15, [r3]
 8006d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d5c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006d60:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8006d64:	edc3 7a00 	vstr	s15, [r3]
    n6 = 4*X[0] - X1_2;
 8006d68:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006d6c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006d70:	edd3 7a00 	vldr	s15, [r3]
 8006d74:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006d78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006d7c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006d80:	f103 03f8 	add.w	r3, r3, #248	@ 0xf8
 8006d84:	edd3 7a00 	vldr	s15, [r3]
 8006d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d8c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006d90:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006d94:	edc3 7a00 	vstr	s15, [r3]

    phi = -atanf((fabsf(X[4])*sqrtf(n1*n5) * (2*X[2] - X[1]*X[3]) * sqrtf((X[4]*n4*n6) / n3)) / (X4_2 * sqrtf(-n2 / X[4]) * sqrtf(n1*n6) * sqrtf(-(n2 * n4) / n3) * sqrtf(-(n4*n5) / (X[4]*n2))));
 8006d98:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006d9c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006da0:	edd3 7a04 	vldr	s15, [r3, #16]
 8006da4:	eeb0 8ae7 	vabs.f32	s16, s15
 8006da8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006dac:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006db0:	ed93 7a00 	vldr	s14, [r3]
 8006db4:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006db8:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8006dbc:	edd3 7a00 	vldr	s15, [r3]
 8006dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8006dc8:	f002 fb16 	bl	80093f8 <sqrtf>
 8006dcc:	eef0 7a40 	vmov.f32	s15, s0
 8006dd0:	ee28 7a27 	vmul.f32	s14, s16, s15
 8006dd4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006dd8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006ddc:	edd3 7a02 	vldr	s15, [r3, #8]
 8006de0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006de4:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006de8:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006dec:	ed93 6a01 	vldr	s12, [r3, #4]
 8006df0:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006df4:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006df8:	edd3 7a03 	vldr	s15, [r3, #12]
 8006dfc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006e00:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006e04:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006e08:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006e0c:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006e10:	ed93 7a04 	vldr	s14, [r3, #16]
 8006e14:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006e18:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8006e1c:	edd3 7a00 	vldr	s15, [r3]
 8006e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e24:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006e28:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006e2c:	edd3 7a00 	vldr	s15, [r3]
 8006e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e34:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006e38:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8006e3c:	edd3 7a00 	vldr	s15, [r3]
 8006e40:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006e44:	eeb0 0a66 	vmov.f32	s0, s13
 8006e48:	f002 fad6 	bl	80093f8 <sqrtf>
 8006e4c:	eef0 7a40 	vmov.f32	s15, s0
 8006e50:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006e54:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006e58:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006e5c:	edd3 7a00 	vldr	s15, [r3]
 8006e60:	eeb1 7a67 	vneg.f32	s14, s15
 8006e64:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006e68:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006e6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006e70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006e74:	eeb0 0a66 	vmov.f32	s0, s13
 8006e78:	f002 fabe 	bl	80093f8 <sqrtf>
 8006e7c:	eeb0 7a40 	vmov.f32	s14, s0
 8006e80:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006e84:	f103 03ec 	add.w	r3, r3, #236	@ 0xec
 8006e88:	edd3 7a00 	vldr	s15, [r3]
 8006e8c:	ee67 8a27 	vmul.f32	s17, s14, s15
 8006e90:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006e94:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 8006e98:	ed93 7a00 	vldr	s14, [r3]
 8006e9c:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006ea0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8006ea4:	edd3 7a00 	vldr	s15, [r3]
 8006ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eac:	eeb0 0a67 	vmov.f32	s0, s15
 8006eb0:	f002 faa2 	bl	80093f8 <sqrtf>
 8006eb4:	eef0 7a40 	vmov.f32	s15, s0
 8006eb8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8006ebc:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006ec0:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006ec4:	ed93 7a00 	vldr	s14, [r3]
 8006ec8:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006ecc:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8006ed0:	edd3 7a00 	vldr	s15, [r3]
 8006ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed8:	eeb1 7a67 	vneg.f32	s14, s15
 8006edc:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006ee0:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8006ee4:	edd3 7a00 	vldr	s15, [r3]
 8006ee8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006eec:	eeb0 0a66 	vmov.f32	s0, s13
 8006ef0:	f002 fa82 	bl	80093f8 <sqrtf>
 8006ef4:	eef0 7a40 	vmov.f32	s15, s0
 8006ef8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8006efc:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006f00:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8006f04:	ed93 7a00 	vldr	s14, [r3]
 8006f08:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006f0c:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8006f10:	edd3 7a00 	vldr	s15, [r3]
 8006f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f18:	eeb1 7a67 	vneg.f32	s14, s15
 8006f1c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006f20:	f6a3 5354 	subw	r3, r3, #3412	@ 0xd54
 8006f24:	edd3 6a04 	vldr	s13, [r3, #16]
 8006f28:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006f2c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8006f30:	edd3 7a00 	vldr	s15, [r3]
 8006f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f38:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006f3c:	eeb0 0a66 	vmov.f32	s0, s13
 8006f40:	f002 fa5a 	bl	80093f8 <sqrtf>
 8006f44:	eef0 7a40 	vmov.f32	s15, s0
 8006f48:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006f4c:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8006f50:	eeb0 0a47 	vmov.f32	s0, s14
 8006f54:	f002 fa6e 	bl	8009434 <atanf>
 8006f58:	eef0 7a40 	vmov.f32	s15, s0
 8006f5c:	eef1 7a67 	vneg.f32	s15, s15
 8006f60:	f507 33a6 	add.w	r3, r7, #84992	@ 0x14c00
 8006f64:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8006f68:	edc3 7a00 	vstr	s15, [r3]

    p[0] = sx;
 8006f6c:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006f70:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8006f7a:	f502 7288 	add.w	r2, r2, #272	@ 0x110
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8006f82:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006f86:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8006f92:	f502 7286 	add.w	r2, r2, #268	@ 0x10c
 8006f96:	6812      	ldr	r2, [r2, #0]
 8006f98:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 8006f9a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006f9e:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8006faa:	f502 7284 	add.w	r2, r2, #264	@ 0x108
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8006fb2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006fb6:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	330c      	adds	r3, #12
 8006fbe:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8006fc2:	f502 728e 	add.w	r2, r2, #284	@ 0x11c
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8006fca:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006fce:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3310      	adds	r3, #16
 8006fd6:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8006fda:	f502 728c 	add.w	r2, r2, #280	@ 0x118
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 8006fe2:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006fe6:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3314      	adds	r3, #20
 8006fee:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8006ff2:	f502 728a 	add.w	r2, r2, #276	@ 0x114
 8006ff6:	6812      	ldr	r2, [r2, #0]
 8006ff8:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 8006ffa:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8006ffe:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3318      	adds	r3, #24
 8007006:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800700a:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800700e:	6812      	ldr	r2, [r2, #0]
 8007010:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 8007012:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 8007016:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	331c      	adds	r3, #28
 800701e:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 8007022:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8007026:	6812      	ldr	r2, [r2, #0]
 8007028:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 800702a:	f607 5368 	addw	r3, r7, #3432	@ 0xd68
 800702e:	f6a3 5368 	subw	r3, r3, #3432	@ 0xd68
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3320      	adds	r3, #32
 8007036:	f507 32a6 	add.w	r2, r7, #84992	@ 0x14c00
 800703a:	f102 02fc 	add.w	r2, r2, #252	@ 0xfc
 800703e:	6812      	ldr	r2, [r2, #0]
 8007040:	601a      	str	r2, [r3, #0]
}
 8007042:	bf00      	nop
 8007044:	f507 37a6 	add.w	r7, r7, #84992	@ 0x14c00
 8007048:	f507 77b6 	add.w	r7, r7, #364	@ 0x16c
 800704c:	46bd      	mov	sp, r7
 800704e:	ecbd 8b02 	vpop	{d8}
 8007052:	bd90      	pop	{r4, r7, pc}

08007054 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800705a:	f107 030c 	add.w	r3, r7, #12
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	605a      	str	r2, [r3, #4]
 8007064:	609a      	str	r2, [r3, #8]
 8007066:	60da      	str	r2, [r3, #12]
 8007068:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800706a:	2300      	movs	r3, #0
 800706c:	60bb      	str	r3, [r7, #8]
 800706e:	4b25      	ldr	r3, [pc, #148]	@ (8007104 <MX_GPIO_Init+0xb0>)
 8007070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007072:	4a24      	ldr	r2, [pc, #144]	@ (8007104 <MX_GPIO_Init+0xb0>)
 8007074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007078:	6313      	str	r3, [r2, #48]	@ 0x30
 800707a:	4b22      	ldr	r3, [pc, #136]	@ (8007104 <MX_GPIO_Init+0xb0>)
 800707c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800707e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007082:	60bb      	str	r3, [r7, #8]
 8007084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007086:	2300      	movs	r3, #0
 8007088:	607b      	str	r3, [r7, #4]
 800708a:	4b1e      	ldr	r3, [pc, #120]	@ (8007104 <MX_GPIO_Init+0xb0>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800708e:	4a1d      	ldr	r2, [pc, #116]	@ (8007104 <MX_GPIO_Init+0xb0>)
 8007090:	f043 0301 	orr.w	r3, r3, #1
 8007094:	6313      	str	r3, [r2, #48]	@ 0x30
 8007096:	4b1b      	ldr	r3, [pc, #108]	@ (8007104 <MX_GPIO_Init+0xb0>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80070a2:	2300      	movs	r3, #0
 80070a4:	603b      	str	r3, [r7, #0]
 80070a6:	4b17      	ldr	r3, [pc, #92]	@ (8007104 <MX_GPIO_Init+0xb0>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070aa:	4a16      	ldr	r2, [pc, #88]	@ (8007104 <MX_GPIO_Init+0xb0>)
 80070ac:	f043 0308 	orr.w	r3, r3, #8
 80070b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80070b2:	4b14      	ldr	r3, [pc, #80]	@ (8007104 <MX_GPIO_Init+0xb0>)
 80070b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	603b      	str	r3, [r7, #0]
 80070bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SINC_slave_GPIO_Port, SINC_slave_Pin, GPIO_PIN_RESET);
 80070be:	2200      	movs	r2, #0
 80070c0:	2140      	movs	r1, #64	@ 0x40
 80070c2:	4811      	ldr	r0, [pc, #68]	@ (8007108 <MX_GPIO_Init+0xb4>)
 80070c4:	f000 fdfc 	bl	8007cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_slave_Pin;
 80070c8:	2340      	movs	r3, #64	@ 0x40
 80070ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070cc:	2301      	movs	r3, #1
 80070ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070d4:	2303      	movs	r3, #3
 80070d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SINC_slave_GPIO_Port, &GPIO_InitStruct);
 80070d8:	f107 030c 	add.w	r3, r7, #12
 80070dc:	4619      	mov	r1, r3
 80070de:	480a      	ldr	r0, [pc, #40]	@ (8007108 <MX_GPIO_Init+0xb4>)
 80070e0:	f000 fc42 	bl	8007968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SINC_master_Pin;
 80070e4:	2380      	movs	r3, #128	@ 0x80
 80070e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070e8:	2300      	movs	r3, #0
 80070ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ec:	2300      	movs	r3, #0
 80070ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SINC_master_GPIO_Port, &GPIO_InitStruct);
 80070f0:	f107 030c 	add.w	r3, r7, #12
 80070f4:	4619      	mov	r1, r3
 80070f6:	4804      	ldr	r0, [pc, #16]	@ (8007108 <MX_GPIO_Init+0xb4>)
 80070f8:	f000 fc36 	bl	8007968 <HAL_GPIO_Init>

}
 80070fc:	bf00      	nop
 80070fe:	3720      	adds	r7, #32
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40023800 	.word	0x40023800
 8007108:	40020c00 	.word	0x40020c00

0800710c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b098      	sub	sp, #96	@ 0x60
 8007110:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007112:	f000 fad1 	bl	80076b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007116:	f000 f949 	bl	80073ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800711a:	f7ff ff9b 	bl	8007054 <MX_GPIO_Init>
  MX_SPI1_Init();
 800711e:	f000 f9bd 	bl	800749c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  union calib_t param1[9], param2[9];
  union calib_t time_ETS, time_NLLS;
  uint32_t start_time = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	653b      	str	r3, [r7, #80]	@ 0x50

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7));
 8007126:	bf00      	nop
 8007128:	2180      	movs	r1, #128	@ 0x80
 800712a:	4895      	ldr	r0, [pc, #596]	@ (8007380 <main+0x274>)
 800712c:	f000 fdb0 	bl	8007c90 <HAL_GPIO_ReadPin>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0f8      	beq.n	8007128 <main+0x1c>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 8007136:	2201      	movs	r2, #1
 8007138:	2140      	movs	r1, #64	@ 0x40
 800713a:	4891      	ldr	r0, [pc, #580]	@ (8007380 <main+0x274>)
 800713c:	f000 fdc0 	bl	8007cc0 <HAL_GPIO_WritePin>

	  for(uint16_t i = 0; i < tam; i++)
 8007140:	2300      	movs	r3, #0
 8007142:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007146:	e00f      	b.n	8007168 <main+0x5c>
	  {
		  HAL_SPI_Receive(&hspi1, mx_[i].inteiro, 4, 1000);
 8007148:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4a8d      	ldr	r2, [pc, #564]	@ (8007384 <main+0x278>)
 8007150:	1899      	adds	r1, r3, r2
 8007152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007156:	2204      	movs	r2, #4
 8007158:	488b      	ldr	r0, [pc, #556]	@ (8007388 <main+0x27c>)
 800715a:	f001 fd16 	bl	8008b8a <HAL_SPI_Receive>
	  for(uint16_t i = 0; i < tam; i++)
 800715e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8007162:	3301      	adds	r3, #1
 8007164:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8007168:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800716c:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8007170:	d3ea      	bcc.n	8007148 <main+0x3c>
	  }
	  for(uint16_t i = 0; i < tam; i++)
 8007172:	2300      	movs	r3, #0
 8007174:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8007178:	e00f      	b.n	800719a <main+0x8e>
	  {
		  HAL_SPI_Receive(&hspi1, my_[i].inteiro, 4, 1000);
 800717a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4a82      	ldr	r2, [pc, #520]	@ (800738c <main+0x280>)
 8007182:	1899      	adds	r1, r3, r2
 8007184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007188:	2204      	movs	r2, #4
 800718a:	487f      	ldr	r0, [pc, #508]	@ (8007388 <main+0x27c>)
 800718c:	f001 fcfd 	bl	8008b8a <HAL_SPI_Receive>
	  for(uint16_t i = 0; i < tam; i++)
 8007190:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8007194:	3301      	adds	r3, #1
 8007196:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800719a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800719e:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80071a2:	d3ea      	bcc.n	800717a <main+0x6e>
	  }
	  for(uint16_t i = 0; i < tam; i++)
 80071a4:	2300      	movs	r3, #0
 80071a6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80071aa:	e00f      	b.n	80071cc <main+0xc0>
	  {
		  HAL_SPI_Receive(&hspi1, mz_[i].inteiro, 4, 1000);
 80071ac:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4a77      	ldr	r2, [pc, #476]	@ (8007390 <main+0x284>)
 80071b4:	1899      	adds	r1, r3, r2
 80071b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80071ba:	2204      	movs	r2, #4
 80071bc:	4872      	ldr	r0, [pc, #456]	@ (8007388 <main+0x27c>)
 80071be:	f001 fce4 	bl	8008b8a <HAL_SPI_Receive>
	  for(uint16_t i = 0; i < tam; i++)
 80071c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80071c6:	3301      	adds	r3, #1
 80071c8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80071cc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80071d0:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80071d4:	d3ea      	bcc.n	80071ac <main+0xa0>
	  }
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET);
 80071d6:	2200      	movs	r2, #0
 80071d8:	2140      	movs	r1, #64	@ 0x40
 80071da:	4869      	ldr	r0, [pc, #420]	@ (8007380 <main+0x274>)
 80071dc:	f000 fd70 	bl	8007cc0 <HAL_GPIO_WritePin>

	  for(uint16_t i = 0; i < tam; i++)
 80071e0:	2300      	movs	r3, #0
 80071e2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80071e6:	e028      	b.n	800723a <main+0x12e>
	  {
		mx[i] = mx_[i].flutuante;
 80071e8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80071ec:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80071f0:	4964      	ldr	r1, [pc, #400]	@ (8007384 <main+0x278>)
 80071f2:	0092      	lsls	r2, r2, #2
 80071f4:	440a      	add	r2, r1
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	4966      	ldr	r1, [pc, #408]	@ (8007394 <main+0x288>)
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	440b      	add	r3, r1
 80071fe:	601a      	str	r2, [r3, #0]
		my[i] = my_[i].flutuante;
 8007200:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8007204:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8007208:	4960      	ldr	r1, [pc, #384]	@ (800738c <main+0x280>)
 800720a:	0092      	lsls	r2, r2, #2
 800720c:	440a      	add	r2, r1
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	4961      	ldr	r1, [pc, #388]	@ (8007398 <main+0x28c>)
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	440b      	add	r3, r1
 8007216:	601a      	str	r2, [r3, #0]
		mz[i] = mz_[i].flutuante;
 8007218:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 800721c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8007220:	495b      	ldr	r1, [pc, #364]	@ (8007390 <main+0x284>)
 8007222:	0092      	lsls	r2, r2, #2
 8007224:	440a      	add	r2, r1
 8007226:	6812      	ldr	r2, [r2, #0]
 8007228:	495c      	ldr	r1, [pc, #368]	@ (800739c <main+0x290>)
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	440b      	add	r3, r1
 800722e:	601a      	str	r2, [r3, #0]
	  for(uint16_t i = 0; i < tam; i++)
 8007230:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8007234:	3301      	adds	r3, #1
 8007236:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800723a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800723e:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8007242:	d3d1      	bcc.n	80071e8 <main+0xdc>
	  }

	  start_time = HAL_GetTick();
 8007244:	f000 fa9e 	bl	8007784 <HAL_GetTick>
 8007248:	6538      	str	r0, [r7, #80]	@ 0x50
	  ETS(mx, my, mz, p1);
 800724a:	4b55      	ldr	r3, [pc, #340]	@ (80073a0 <main+0x294>)
 800724c:	4a53      	ldr	r2, [pc, #332]	@ (800739c <main+0x290>)
 800724e:	4952      	ldr	r1, [pc, #328]	@ (8007398 <main+0x28c>)
 8007250:	4850      	ldr	r0, [pc, #320]	@ (8007394 <main+0x288>)
 8007252:	f7fd fe6d 	bl	8004f30 <ETS>
	  time_ETS.flutuante = HAL_GetTick() - start_time;
 8007256:	f000 fa95 	bl	8007784 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007268:	edc7 7a01 	vstr	s15, [r7, #4]

	  start_time = HAL_GetTick();
 800726c:	f000 fa8a 	bl	8007784 <HAL_GetTick>
 8007270:	6538      	str	r0, [r7, #80]	@ 0x50
	  passos_NLLS = NLLS(mx, my, mz, p0);
 8007272:	4b4c      	ldr	r3, [pc, #304]	@ (80073a4 <main+0x298>)
 8007274:	4a49      	ldr	r2, [pc, #292]	@ (800739c <main+0x290>)
 8007276:	4948      	ldr	r1, [pc, #288]	@ (8007398 <main+0x28c>)
 8007278:	4846      	ldr	r0, [pc, #280]	@ (8007394 <main+0x288>)
 800727a:	f7f9 fefd 	bl	8001078 <NLLS>
 800727e:	4603      	mov	r3, r0
 8007280:	461a      	mov	r2, r3
 8007282:	4b49      	ldr	r3, [pc, #292]	@ (80073a8 <main+0x29c>)
 8007284:	701a      	strb	r2, [r3, #0]
	  time_NLLS.flutuante = HAL_GetTick() - start_time;
 8007286:	f000 fa7d 	bl	8007784 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007298:	edc7 7a00 	vstr	s15, [r7]

	  for(uint8_t i = 0; i < 10; i++)
 800729c:	2300      	movs	r3, #0
 800729e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80072a2:	e01e      	b.n	80072e2 <main+0x1d6>
	  {
		  param1[i].flutuante = p1[i];
 80072a4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80072a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072ac:	493c      	ldr	r1, [pc, #240]	@ (80073a0 <main+0x294>)
 80072ae:	0092      	lsls	r2, r2, #2
 80072b0:	440a      	add	r2, r1
 80072b2:	6812      	ldr	r2, [r2, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	3360      	adds	r3, #96	@ 0x60
 80072b8:	443b      	add	r3, r7
 80072ba:	3b34      	subs	r3, #52	@ 0x34
 80072bc:	601a      	str	r2, [r3, #0]
		  param2[i].flutuante = p0[i];
 80072be:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80072c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072c6:	4937      	ldr	r1, [pc, #220]	@ (80073a4 <main+0x298>)
 80072c8:	0092      	lsls	r2, r2, #2
 80072ca:	440a      	add	r2, r1
 80072cc:	6812      	ldr	r2, [r2, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	3360      	adds	r3, #96	@ 0x60
 80072d2:	443b      	add	r3, r7
 80072d4:	3b58      	subs	r3, #88	@ 0x58
 80072d6:	601a      	str	r2, [r3, #0]
	  for(uint8_t i = 0; i < 10; i++)
 80072d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072dc:	3301      	adds	r3, #1
 80072de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80072e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80072e6:	2b09      	cmp	r3, #9
 80072e8:	d9dc      	bls.n	80072a4 <main+0x198>
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, SET);
 80072ea:	2201      	movs	r2, #1
 80072ec:	2140      	movs	r1, #64	@ 0x40
 80072ee:	4824      	ldr	r0, [pc, #144]	@ (8007380 <main+0x274>)
 80072f0:	f000 fce6 	bl	8007cc0 <HAL_GPIO_WritePin>

	  for(uint8_t i = 0; i < 10; i++)
 80072f4:	2300      	movs	r3, #0
 80072f6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80072fa:	e010      	b.n	800731e <main+0x212>
	  {
		  HAL_SPI_Transmit(&hspi1, param1[i].inteiro, 4, HAL_MAX_DELAY);
 80072fc:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8007300:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	18d1      	adds	r1, r2, r3
 8007308:	f04f 33ff 	mov.w	r3, #4294967295
 800730c:	2204      	movs	r2, #4
 800730e:	481e      	ldr	r0, [pc, #120]	@ (8007388 <main+0x27c>)
 8007310:	f001 faf7 	bl	8008902 <HAL_SPI_Transmit>
	  for(uint8_t i = 0; i < 10; i++)
 8007314:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8007318:	3301      	adds	r3, #1
 800731a:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 800731e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8007322:	2b09      	cmp	r3, #9
 8007324:	d9ea      	bls.n	80072fc <main+0x1f0>
	  }
	  for(uint8_t i = 0; i < 10; i++)
 8007326:	2300      	movs	r3, #0
 8007328:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 800732c:	e010      	b.n	8007350 <main+0x244>
	  {
		  HAL_SPI_Transmit(&hspi1, param2[i].inteiro, 4, HAL_MAX_DELAY);
 800732e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8007332:	f107 0208 	add.w	r2, r7, #8
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	18d1      	adds	r1, r2, r3
 800733a:	f04f 33ff 	mov.w	r3, #4294967295
 800733e:	2204      	movs	r2, #4
 8007340:	4811      	ldr	r0, [pc, #68]	@ (8007388 <main+0x27c>)
 8007342:	f001 fade 	bl	8008902 <HAL_SPI_Transmit>
	  for(uint8_t i = 0; i < 10; i++)
 8007346:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800734a:	3301      	adds	r3, #1
 800734c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8007350:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8007354:	2b09      	cmp	r3, #9
 8007356:	d9ea      	bls.n	800732e <main+0x222>
	  }
	  HAL_SPI_Transmit(&hspi1, time_ETS.inteiro, 4, HAL_MAX_DELAY);
 8007358:	1d39      	adds	r1, r7, #4
 800735a:	f04f 33ff 	mov.w	r3, #4294967295
 800735e:	2204      	movs	r2, #4
 8007360:	4809      	ldr	r0, [pc, #36]	@ (8007388 <main+0x27c>)
 8007362:	f001 face 	bl	8008902 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, time_NLLS.inteiro, 4, HAL_MAX_DELAY);
 8007366:	4639      	mov	r1, r7
 8007368:	f04f 33ff 	mov.w	r3, #4294967295
 800736c:	2204      	movs	r2, #4
 800736e:	4806      	ldr	r0, [pc, #24]	@ (8007388 <main+0x27c>)
 8007370:	f001 fac7 	bl	8008902 <HAL_SPI_Transmit>
	  //HAL_SPI_Transmit(&hspi1, &passos_NLLS, 1, HAL_MAX_DELAY);
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, RESET);
 8007374:	2200      	movs	r2, #0
 8007376:	2140      	movs	r1, #64	@ 0x40
 8007378:	4801      	ldr	r0, [pc, #4]	@ (8007380 <main+0x274>)
 800737a:	f000 fca1 	bl	8007cc0 <HAL_GPIO_WritePin>
	  while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7));
 800737e:	e6d2      	b.n	8007126 <main+0x1a>
 8007380:	40020c00 	.word	0x40020c00
 8007384:	20000078 	.word	0x20000078
 8007388:	20006904 	.word	0x20006904
 800738c:	200011d8 	.word	0x200011d8
 8007390:	20002338 	.word	0x20002338
 8007394:	20003498 	.word	0x20003498
 8007398:	200045f8 	.word	0x200045f8
 800739c:	20005758 	.word	0x20005758
 80073a0:	200068b8 	.word	0x200068b8
 80073a4:	200068dc 	.word	0x200068dc
 80073a8:	20006900 	.word	0x20006900

080073ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b094      	sub	sp, #80	@ 0x50
 80073b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073b2:	f107 031c 	add.w	r3, r7, #28
 80073b6:	2234      	movs	r2, #52	@ 0x34
 80073b8:	2100      	movs	r1, #0
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 ffea 	bl	8009394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073c0:	f107 0308 	add.w	r3, r7, #8
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	605a      	str	r2, [r3, #4]
 80073ca:	609a      	str	r2, [r3, #8]
 80073cc:	60da      	str	r2, [r3, #12]
 80073ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80073d0:	2300      	movs	r3, #0
 80073d2:	607b      	str	r3, [r7, #4]
 80073d4:	4b2c      	ldr	r3, [pc, #176]	@ (8007488 <SystemClock_Config+0xdc>)
 80073d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d8:	4a2b      	ldr	r2, [pc, #172]	@ (8007488 <SystemClock_Config+0xdc>)
 80073da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073de:	6413      	str	r3, [r2, #64]	@ 0x40
 80073e0:	4b29      	ldr	r3, [pc, #164]	@ (8007488 <SystemClock_Config+0xdc>)
 80073e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073e8:	607b      	str	r3, [r7, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80073ec:	2300      	movs	r3, #0
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	4b26      	ldr	r3, [pc, #152]	@ (800748c <SystemClock_Config+0xe0>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a25      	ldr	r2, [pc, #148]	@ (800748c <SystemClock_Config+0xe0>)
 80073f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	4b23      	ldr	r3, [pc, #140]	@ (800748c <SystemClock_Config+0xe0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007404:	603b      	str	r3, [r7, #0]
 8007406:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007408:	2302      	movs	r3, #2
 800740a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800740c:	2301      	movs	r3, #1
 800740e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007410:	2310      	movs	r3, #16
 8007412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007414:	2302      	movs	r3, #2
 8007416:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007418:	2300      	movs	r3, #0
 800741a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800741c:	2308      	movs	r3, #8
 800741e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8007420:	23b4      	movs	r3, #180	@ 0xb4
 8007422:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007424:	2302      	movs	r3, #2
 8007426:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007428:	2302      	movs	r3, #2
 800742a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800742c:	2302      	movs	r3, #2
 800742e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007430:	f107 031c 	add.w	r3, r7, #28
 8007434:	4618      	mov	r0, r3
 8007436:	f000 ff3d 	bl	80082b4 <HAL_RCC_OscConfig>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8007440:	f000 f826 	bl	8007490 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007444:	f000 fc56 	bl	8007cf4 <HAL_PWREx_EnableOverDrive>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800744e:	f000 f81f 	bl	8007490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007452:	230f      	movs	r3, #15
 8007454:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007456:	2302      	movs	r3, #2
 8007458:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800745a:	2300      	movs	r3, #0
 800745c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800745e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007462:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007468:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800746a:	f107 0308 	add.w	r3, r7, #8
 800746e:	2105      	movs	r1, #5
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fc8f 	bl	8007d94 <HAL_RCC_ClockConfig>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800747c:	f000 f808 	bl	8007490 <Error_Handler>
  }
}
 8007480:	bf00      	nop
 8007482:	3750      	adds	r7, #80	@ 0x50
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	40023800 	.word	0x40023800
 800748c:	40007000 	.word	0x40007000

08007490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007494:	b672      	cpsid	i
}
 8007496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007498:	bf00      	nop
 800749a:	e7fd      	b.n	8007498 <Error_Handler+0x8>

0800749c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80074a0:	4b15      	ldr	r3, [pc, #84]	@ (80074f8 <MX_SPI1_Init+0x5c>)
 80074a2:	4a16      	ldr	r2, [pc, #88]	@ (80074fc <MX_SPI1_Init+0x60>)
 80074a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80074a6:	4b14      	ldr	r3, [pc, #80]	@ (80074f8 <MX_SPI1_Init+0x5c>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80074ac:	4b12      	ldr	r3, [pc, #72]	@ (80074f8 <MX_SPI1_Init+0x5c>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80074b2:	4b11      	ldr	r3, [pc, #68]	@ (80074f8 <MX_SPI1_Init+0x5c>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80074b8:	4b0f      	ldr	r3, [pc, #60]	@ (80074f8 <MX_SPI1_Init+0x5c>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80074be:	4b0e      	ldr	r3, [pc, #56]	@ (80074f8 <MX_SPI1_Init+0x5c>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80074c4:	4b0c      	ldr	r3, [pc, #48]	@ (80074f8 <MX_SPI1_Init+0x5c>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80074ca:	4b0b      	ldr	r3, [pc, #44]	@ (80074f8 <MX_SPI1_Init+0x5c>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80074d0:	4b09      	ldr	r3, [pc, #36]	@ (80074f8 <MX_SPI1_Init+0x5c>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074d6:	4b08      	ldr	r3, [pc, #32]	@ (80074f8 <MX_SPI1_Init+0x5c>)
 80074d8:	2200      	movs	r2, #0
 80074da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80074dc:	4b06      	ldr	r3, [pc, #24]	@ (80074f8 <MX_SPI1_Init+0x5c>)
 80074de:	220a      	movs	r2, #10
 80074e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80074e2:	4805      	ldr	r0, [pc, #20]	@ (80074f8 <MX_SPI1_Init+0x5c>)
 80074e4:	f001 f984 	bl	80087f0 <HAL_SPI_Init>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 80074ee:	f7ff ffcf 	bl	8007490 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20006904 	.word	0x20006904
 80074fc:	40013000 	.word	0x40013000

08007500 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	@ 0x28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007508:	f107 0314 	add.w	r3, r7, #20
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	605a      	str	r2, [r3, #4]
 8007512:	609a      	str	r2, [r3, #8]
 8007514:	60da      	str	r2, [r3, #12]
 8007516:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a19      	ldr	r2, [pc, #100]	@ (8007584 <HAL_SPI_MspInit+0x84>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d12b      	bne.n	800757a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007522:	2300      	movs	r3, #0
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	4b18      	ldr	r3, [pc, #96]	@ (8007588 <HAL_SPI_MspInit+0x88>)
 8007528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800752a:	4a17      	ldr	r2, [pc, #92]	@ (8007588 <HAL_SPI_MspInit+0x88>)
 800752c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007530:	6453      	str	r3, [r2, #68]	@ 0x44
 8007532:	4b15      	ldr	r3, [pc, #84]	@ (8007588 <HAL_SPI_MspInit+0x88>)
 8007534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007536:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800753e:	2300      	movs	r3, #0
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	4b11      	ldr	r3, [pc, #68]	@ (8007588 <HAL_SPI_MspInit+0x88>)
 8007544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007546:	4a10      	ldr	r2, [pc, #64]	@ (8007588 <HAL_SPI_MspInit+0x88>)
 8007548:	f043 0301 	orr.w	r3, r3, #1
 800754c:	6313      	str	r3, [r2, #48]	@ 0x30
 800754e:	4b0e      	ldr	r3, [pc, #56]	@ (8007588 <HAL_SPI_MspInit+0x88>)
 8007550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800755a:	23f0      	movs	r3, #240	@ 0xf0
 800755c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800755e:	2302      	movs	r3, #2
 8007560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007562:	2300      	movs	r3, #0
 8007564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007566:	2303      	movs	r3, #3
 8007568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800756a:	2305      	movs	r3, #5
 800756c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800756e:	f107 0314 	add.w	r3, r7, #20
 8007572:	4619      	mov	r1, r3
 8007574:	4805      	ldr	r0, [pc, #20]	@ (800758c <HAL_SPI_MspInit+0x8c>)
 8007576:	f000 f9f7 	bl	8007968 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800757a:	bf00      	nop
 800757c:	3728      	adds	r7, #40	@ 0x28
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40013000 	.word	0x40013000
 8007588:	40023800 	.word	0x40023800
 800758c:	40020000 	.word	0x40020000

08007590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007596:	2300      	movs	r3, #0
 8007598:	607b      	str	r3, [r7, #4]
 800759a:	4b10      	ldr	r3, [pc, #64]	@ (80075dc <HAL_MspInit+0x4c>)
 800759c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759e:	4a0f      	ldr	r2, [pc, #60]	@ (80075dc <HAL_MspInit+0x4c>)
 80075a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80075a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80075a6:	4b0d      	ldr	r3, [pc, #52]	@ (80075dc <HAL_MspInit+0x4c>)
 80075a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075ae:	607b      	str	r3, [r7, #4]
 80075b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80075b2:	2300      	movs	r3, #0
 80075b4:	603b      	str	r3, [r7, #0]
 80075b6:	4b09      	ldr	r3, [pc, #36]	@ (80075dc <HAL_MspInit+0x4c>)
 80075b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ba:	4a08      	ldr	r2, [pc, #32]	@ (80075dc <HAL_MspInit+0x4c>)
 80075bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80075c2:	4b06      	ldr	r3, [pc, #24]	@ (80075dc <HAL_MspInit+0x4c>)
 80075c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80075ce:	bf00      	nop
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40023800 	.word	0x40023800

080075e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80075e4:	bf00      	nop
 80075e6:	e7fd      	b.n	80075e4 <NMI_Handler+0x4>

080075e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075ec:	bf00      	nop
 80075ee:	e7fd      	b.n	80075ec <HardFault_Handler+0x4>

080075f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075f4:	bf00      	nop
 80075f6:	e7fd      	b.n	80075f4 <MemManage_Handler+0x4>

080075f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075fc:	bf00      	nop
 80075fe:	e7fd      	b.n	80075fc <BusFault_Handler+0x4>

08007600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007604:	bf00      	nop
 8007606:	e7fd      	b.n	8007604 <UsageFault_Handler+0x4>

08007608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800760c:	bf00      	nop
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007616:	b480      	push	{r7}
 8007618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800761a:	bf00      	nop
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007628:	bf00      	nop
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007636:	f000 f891 	bl	800775c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800763a:	bf00      	nop
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007640:	b480      	push	{r7}
 8007642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007644:	4b06      	ldr	r3, [pc, #24]	@ (8007660 <SystemInit+0x20>)
 8007646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800764a:	4a05      	ldr	r2, [pc, #20]	@ (8007660 <SystemInit+0x20>)
 800764c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007654:	bf00      	nop
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	e000ed00 	.word	0xe000ed00

08007664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007664:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800769c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007668:	f7ff ffea 	bl	8007640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800766c:	480c      	ldr	r0, [pc, #48]	@ (80076a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800766e:	490d      	ldr	r1, [pc, #52]	@ (80076a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007670:	4a0d      	ldr	r2, [pc, #52]	@ (80076a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007674:	e002      	b.n	800767c <LoopCopyDataInit>

08007676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800767a:	3304      	adds	r3, #4

0800767c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800767c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800767e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007680:	d3f9      	bcc.n	8007676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007682:	4a0a      	ldr	r2, [pc, #40]	@ (80076ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007684:	4c0a      	ldr	r4, [pc, #40]	@ (80076b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007688:	e001      	b.n	800768e <LoopFillZerobss>

0800768a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800768a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800768c:	3204      	adds	r2, #4

0800768e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800768e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007690:	d3fb      	bcc.n	800768a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8007692:	f001 fe8d 	bl	80093b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007696:	f7ff fd39 	bl	800710c <main>
  bx  lr    
 800769a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800769c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80076a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80076a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80076a8:	0800966c 	.word	0x0800966c
  ldr r2, =_sbss
 80076ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80076b0:	20006a98 	.word	0x20006a98

080076b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076b4:	e7fe      	b.n	80076b4 <ADC_IRQHandler>
	...

080076b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80076bc:	4b0e      	ldr	r3, [pc, #56]	@ (80076f8 <HAL_Init+0x40>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a0d      	ldr	r2, [pc, #52]	@ (80076f8 <HAL_Init+0x40>)
 80076c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80076c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80076c8:	4b0b      	ldr	r3, [pc, #44]	@ (80076f8 <HAL_Init+0x40>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a0a      	ldr	r2, [pc, #40]	@ (80076f8 <HAL_Init+0x40>)
 80076ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80076d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80076d4:	4b08      	ldr	r3, [pc, #32]	@ (80076f8 <HAL_Init+0x40>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a07      	ldr	r2, [pc, #28]	@ (80076f8 <HAL_Init+0x40>)
 80076da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076e0:	2003      	movs	r0, #3
 80076e2:	f000 f90d 	bl	8007900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80076e6:	200f      	movs	r0, #15
 80076e8:	f000 f808 	bl	80076fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80076ec:	f7ff ff50 	bl	8007590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	40023c00 	.word	0x40023c00

080076fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007704:	4b12      	ldr	r3, [pc, #72]	@ (8007750 <HAL_InitTick+0x54>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	4b12      	ldr	r3, [pc, #72]	@ (8007754 <HAL_InitTick+0x58>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	4619      	mov	r1, r3
 800770e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007712:	fbb3 f3f1 	udiv	r3, r3, r1
 8007716:	fbb2 f3f3 	udiv	r3, r2, r3
 800771a:	4618      	mov	r0, r3
 800771c:	f000 f917 	bl	800794e <HAL_SYSTICK_Config>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e00e      	b.n	8007748 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b0f      	cmp	r3, #15
 800772e:	d80a      	bhi.n	8007746 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007730:	2200      	movs	r2, #0
 8007732:	6879      	ldr	r1, [r7, #4]
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	f000 f8ed 	bl	8007916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800773c:	4a06      	ldr	r2, [pc, #24]	@ (8007758 <HAL_InitTick+0x5c>)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	e000      	b.n	8007748 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000000 	.word	0x20000000
 8007754:	20000008 	.word	0x20000008
 8007758:	20000004 	.word	0x20000004

0800775c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007760:	4b06      	ldr	r3, [pc, #24]	@ (800777c <HAL_IncTick+0x20>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	4b06      	ldr	r3, [pc, #24]	@ (8007780 <HAL_IncTick+0x24>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4413      	add	r3, r2
 800776c:	4a04      	ldr	r2, [pc, #16]	@ (8007780 <HAL_IncTick+0x24>)
 800776e:	6013      	str	r3, [r2, #0]
}
 8007770:	bf00      	nop
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	20000008 	.word	0x20000008
 8007780:	2000695c 	.word	0x2000695c

08007784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0
  return uwTick;
 8007788:	4b03      	ldr	r3, [pc, #12]	@ (8007798 <HAL_GetTick+0x14>)
 800778a:	681b      	ldr	r3, [r3, #0]
}
 800778c:	4618      	mov	r0, r3
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	2000695c 	.word	0x2000695c

0800779c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077ac:	4b0c      	ldr	r3, [pc, #48]	@ (80077e0 <__NVIC_SetPriorityGrouping+0x44>)
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80077b8:	4013      	ands	r3, r2
 80077ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80077c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80077c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077ce:	4a04      	ldr	r2, [pc, #16]	@ (80077e0 <__NVIC_SetPriorityGrouping+0x44>)
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	60d3      	str	r3, [r2, #12]
}
 80077d4:	bf00      	nop
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	e000ed00 	.word	0xe000ed00

080077e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80077e8:	4b04      	ldr	r3, [pc, #16]	@ (80077fc <__NVIC_GetPriorityGrouping+0x18>)
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	0a1b      	lsrs	r3, r3, #8
 80077ee:	f003 0307 	and.w	r3, r3, #7
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	e000ed00 	.word	0xe000ed00

08007800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	4603      	mov	r3, r0
 8007808:	6039      	str	r1, [r7, #0]
 800780a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800780c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007810:	2b00      	cmp	r3, #0
 8007812:	db0a      	blt.n	800782a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	b2da      	uxtb	r2, r3
 8007818:	490c      	ldr	r1, [pc, #48]	@ (800784c <__NVIC_SetPriority+0x4c>)
 800781a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800781e:	0112      	lsls	r2, r2, #4
 8007820:	b2d2      	uxtb	r2, r2
 8007822:	440b      	add	r3, r1
 8007824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007828:	e00a      	b.n	8007840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	b2da      	uxtb	r2, r3
 800782e:	4908      	ldr	r1, [pc, #32]	@ (8007850 <__NVIC_SetPriority+0x50>)
 8007830:	79fb      	ldrb	r3, [r7, #7]
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	3b04      	subs	r3, #4
 8007838:	0112      	lsls	r2, r2, #4
 800783a:	b2d2      	uxtb	r2, r2
 800783c:	440b      	add	r3, r1
 800783e:	761a      	strb	r2, [r3, #24]
}
 8007840:	bf00      	nop
 8007842:	370c      	adds	r7, #12
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	e000e100 	.word	0xe000e100
 8007850:	e000ed00 	.word	0xe000ed00

08007854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007854:	b480      	push	{r7}
 8007856:	b089      	sub	sp, #36	@ 0x24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	f1c3 0307 	rsb	r3, r3, #7
 800786e:	2b04      	cmp	r3, #4
 8007870:	bf28      	it	cs
 8007872:	2304      	movcs	r3, #4
 8007874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	3304      	adds	r3, #4
 800787a:	2b06      	cmp	r3, #6
 800787c:	d902      	bls.n	8007884 <NVIC_EncodePriority+0x30>
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	3b03      	subs	r3, #3
 8007882:	e000      	b.n	8007886 <NVIC_EncodePriority+0x32>
 8007884:	2300      	movs	r3, #0
 8007886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007888:	f04f 32ff 	mov.w	r2, #4294967295
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	fa02 f303 	lsl.w	r3, r2, r3
 8007892:	43da      	mvns	r2, r3
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	401a      	ands	r2, r3
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800789c:	f04f 31ff 	mov.w	r1, #4294967295
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	fa01 f303 	lsl.w	r3, r1, r3
 80078a6:	43d9      	mvns	r1, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078ac:	4313      	orrs	r3, r2
         );
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3724      	adds	r7, #36	@ 0x24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
	...

080078bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078cc:	d301      	bcc.n	80078d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80078ce:	2301      	movs	r3, #1
 80078d0:	e00f      	b.n	80078f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80078d2:	4a0a      	ldr	r2, [pc, #40]	@ (80078fc <SysTick_Config+0x40>)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80078da:	210f      	movs	r1, #15
 80078dc:	f04f 30ff 	mov.w	r0, #4294967295
 80078e0:	f7ff ff8e 	bl	8007800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80078e4:	4b05      	ldr	r3, [pc, #20]	@ (80078fc <SysTick_Config+0x40>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80078ea:	4b04      	ldr	r3, [pc, #16]	@ (80078fc <SysTick_Config+0x40>)
 80078ec:	2207      	movs	r2, #7
 80078ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	e000e010 	.word	0xe000e010

08007900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7ff ff47 	bl	800779c <__NVIC_SetPriorityGrouping>
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	4603      	mov	r3, r0
 800791e:	60b9      	str	r1, [r7, #8]
 8007920:	607a      	str	r2, [r7, #4]
 8007922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007924:	2300      	movs	r3, #0
 8007926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007928:	f7ff ff5c 	bl	80077e4 <__NVIC_GetPriorityGrouping>
 800792c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	68b9      	ldr	r1, [r7, #8]
 8007932:	6978      	ldr	r0, [r7, #20]
 8007934:	f7ff ff8e 	bl	8007854 <NVIC_EncodePriority>
 8007938:	4602      	mov	r2, r0
 800793a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800793e:	4611      	mov	r1, r2
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff ff5d 	bl	8007800 <__NVIC_SetPriority>
}
 8007946:	bf00      	nop
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7ff ffb0 	bl	80078bc <SysTick_Config>
 800795c:	4603      	mov	r3, r0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007968:	b480      	push	{r7}
 800796a:	b089      	sub	sp, #36	@ 0x24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007976:	2300      	movs	r3, #0
 8007978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800797a:	2300      	movs	r3, #0
 800797c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800797e:	2300      	movs	r3, #0
 8007980:	61fb      	str	r3, [r7, #28]
 8007982:	e165      	b.n	8007c50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007984:	2201      	movs	r2, #1
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	fa02 f303 	lsl.w	r3, r2, r3
 800798c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	4013      	ands	r3, r2
 8007996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	429a      	cmp	r2, r3
 800799e:	f040 8154 	bne.w	8007c4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f003 0303 	and.w	r3, r3, #3
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d005      	beq.n	80079ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d130      	bne.n	8007a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	2203      	movs	r2, #3
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	43db      	mvns	r3, r3
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	4013      	ands	r3, r2
 80079d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	fa02 f303 	lsl.w	r3, r2, r3
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80079f0:	2201      	movs	r2, #1
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	fa02 f303 	lsl.w	r3, r2, r3
 80079f8:	43db      	mvns	r3, r3
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	4013      	ands	r3, r2
 80079fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	091b      	lsrs	r3, r3, #4
 8007a06:	f003 0201 	and.w	r2, r3, #1
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f003 0303 	and.w	r3, r3, #3
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d017      	beq.n	8007a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	2203      	movs	r2, #3
 8007a34:	fa02 f303 	lsl.w	r3, r2, r3
 8007a38:	43db      	mvns	r3, r3
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69ba      	ldr	r2, [r7, #24]
 8007a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d123      	bne.n	8007aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	08da      	lsrs	r2, r3, #3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3208      	adds	r2, #8
 8007a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	220f      	movs	r2, #15
 8007a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a80:	43db      	mvns	r3, r3
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	4013      	ands	r3, r2
 8007a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	691a      	ldr	r2, [r3, #16]
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f003 0307 	and.w	r3, r3, #7
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	fa02 f303 	lsl.w	r3, r2, r3
 8007a98:	69ba      	ldr	r2, [r7, #24]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	08da      	lsrs	r2, r3, #3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3208      	adds	r2, #8
 8007aa6:	69b9      	ldr	r1, [r7, #24]
 8007aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	005b      	lsls	r3, r3, #1
 8007ab6:	2203      	movs	r2, #3
 8007ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8007abc:	43db      	mvns	r3, r3
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f003 0203 	and.w	r2, r3, #3
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69ba      	ldr	r2, [r7, #24]
 8007ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 80ae 	beq.w	8007c4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	4b5d      	ldr	r3, [pc, #372]	@ (8007c68 <HAL_GPIO_Init+0x300>)
 8007af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af6:	4a5c      	ldr	r2, [pc, #368]	@ (8007c68 <HAL_GPIO_Init+0x300>)
 8007af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8007afe:	4b5a      	ldr	r3, [pc, #360]	@ (8007c68 <HAL_GPIO_Init+0x300>)
 8007b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b0a:	4a58      	ldr	r2, [pc, #352]	@ (8007c6c <HAL_GPIO_Init+0x304>)
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	089b      	lsrs	r3, r3, #2
 8007b10:	3302      	adds	r3, #2
 8007b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	220f      	movs	r2, #15
 8007b22:	fa02 f303 	lsl.w	r3, r2, r3
 8007b26:	43db      	mvns	r3, r3
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a4f      	ldr	r2, [pc, #316]	@ (8007c70 <HAL_GPIO_Init+0x308>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d025      	beq.n	8007b82 <HAL_GPIO_Init+0x21a>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a4e      	ldr	r2, [pc, #312]	@ (8007c74 <HAL_GPIO_Init+0x30c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d01f      	beq.n	8007b7e <HAL_GPIO_Init+0x216>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a4d      	ldr	r2, [pc, #308]	@ (8007c78 <HAL_GPIO_Init+0x310>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d019      	beq.n	8007b7a <HAL_GPIO_Init+0x212>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a4c      	ldr	r2, [pc, #304]	@ (8007c7c <HAL_GPIO_Init+0x314>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d013      	beq.n	8007b76 <HAL_GPIO_Init+0x20e>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a4b      	ldr	r2, [pc, #300]	@ (8007c80 <HAL_GPIO_Init+0x318>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d00d      	beq.n	8007b72 <HAL_GPIO_Init+0x20a>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a4a      	ldr	r2, [pc, #296]	@ (8007c84 <HAL_GPIO_Init+0x31c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d007      	beq.n	8007b6e <HAL_GPIO_Init+0x206>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a49      	ldr	r2, [pc, #292]	@ (8007c88 <HAL_GPIO_Init+0x320>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d101      	bne.n	8007b6a <HAL_GPIO_Init+0x202>
 8007b66:	2306      	movs	r3, #6
 8007b68:	e00c      	b.n	8007b84 <HAL_GPIO_Init+0x21c>
 8007b6a:	2307      	movs	r3, #7
 8007b6c:	e00a      	b.n	8007b84 <HAL_GPIO_Init+0x21c>
 8007b6e:	2305      	movs	r3, #5
 8007b70:	e008      	b.n	8007b84 <HAL_GPIO_Init+0x21c>
 8007b72:	2304      	movs	r3, #4
 8007b74:	e006      	b.n	8007b84 <HAL_GPIO_Init+0x21c>
 8007b76:	2303      	movs	r3, #3
 8007b78:	e004      	b.n	8007b84 <HAL_GPIO_Init+0x21c>
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e002      	b.n	8007b84 <HAL_GPIO_Init+0x21c>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e000      	b.n	8007b84 <HAL_GPIO_Init+0x21c>
 8007b82:	2300      	movs	r3, #0
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	f002 0203 	and.w	r2, r2, #3
 8007b8a:	0092      	lsls	r2, r2, #2
 8007b8c:	4093      	lsls	r3, r2
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b94:	4935      	ldr	r1, [pc, #212]	@ (8007c6c <HAL_GPIO_Init+0x304>)
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	089b      	lsrs	r3, r3, #2
 8007b9a:	3302      	adds	r3, #2
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007ba2:	4b3a      	ldr	r3, [pc, #232]	@ (8007c8c <HAL_GPIO_Init+0x324>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	43db      	mvns	r3, r3
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007bc6:	4a31      	ldr	r2, [pc, #196]	@ (8007c8c <HAL_GPIO_Init+0x324>)
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8007c8c <HAL_GPIO_Init+0x324>)
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007bf0:	4a26      	ldr	r2, [pc, #152]	@ (8007c8c <HAL_GPIO_Init+0x324>)
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007bf6:	4b25      	ldr	r3, [pc, #148]	@ (8007c8c <HAL_GPIO_Init+0x324>)
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	4013      	ands	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8007c8c <HAL_GPIO_Init+0x324>)
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c20:	4b1a      	ldr	r3, [pc, #104]	@ (8007c8c <HAL_GPIO_Init+0x324>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	43db      	mvns	r3, r3
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007c44:	4a11      	ldr	r2, [pc, #68]	@ (8007c8c <HAL_GPIO_Init+0x324>)
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	61fb      	str	r3, [r7, #28]
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2b0f      	cmp	r3, #15
 8007c54:	f67f ae96 	bls.w	8007984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007c58:	bf00      	nop
 8007c5a:	bf00      	nop
 8007c5c:	3724      	adds	r7, #36	@ 0x24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	40023800 	.word	0x40023800
 8007c6c:	40013800 	.word	0x40013800
 8007c70:	40020000 	.word	0x40020000
 8007c74:	40020400 	.word	0x40020400
 8007c78:	40020800 	.word	0x40020800
 8007c7c:	40020c00 	.word	0x40020c00
 8007c80:	40021000 	.word	0x40021000
 8007c84:	40021400 	.word	0x40021400
 8007c88:	40021800 	.word	0x40021800
 8007c8c:	40013c00 	.word	0x40013c00

08007c90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691a      	ldr	r2, [r3, #16]
 8007ca0:	887b      	ldrh	r3, [r7, #2]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	73fb      	strb	r3, [r7, #15]
 8007cac:	e001      	b.n	8007cb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	807b      	strh	r3, [r7, #2]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007cd0:	787b      	ldrb	r3, [r7, #1]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cd6:	887a      	ldrh	r2, [r7, #2]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007cdc:	e003      	b.n	8007ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007cde:	887b      	ldrh	r3, [r7, #2]
 8007ce0:	041a      	lsls	r2, r3, #16
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	619a      	str	r2, [r3, #24]
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
	...

08007cf4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007cfe:	2300      	movs	r3, #0
 8007d00:	603b      	str	r3, [r7, #0]
 8007d02:	4b20      	ldr	r3, [pc, #128]	@ (8007d84 <HAL_PWREx_EnableOverDrive+0x90>)
 8007d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d06:	4a1f      	ldr	r2, [pc, #124]	@ (8007d84 <HAL_PWREx_EnableOverDrive+0x90>)
 8007d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8007d84 <HAL_PWREx_EnableOverDrive+0x90>)
 8007d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d16:	603b      	str	r3, [r7, #0]
 8007d18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8007d88 <HAL_PWREx_EnableOverDrive+0x94>)
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d20:	f7ff fd30 	bl	8007784 <HAL_GetTick>
 8007d24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007d26:	e009      	b.n	8007d3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007d28:	f7ff fd2c 	bl	8007784 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d36:	d901      	bls.n	8007d3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e01f      	b.n	8007d7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007d3c:	4b13      	ldr	r3, [pc, #76]	@ (8007d8c <HAL_PWREx_EnableOverDrive+0x98>)
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d48:	d1ee      	bne.n	8007d28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007d4a:	4b11      	ldr	r3, [pc, #68]	@ (8007d90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d50:	f7ff fd18 	bl	8007784 <HAL_GetTick>
 8007d54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007d56:	e009      	b.n	8007d6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007d58:	f7ff fd14 	bl	8007784 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d66:	d901      	bls.n	8007d6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e007      	b.n	8007d7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007d6c:	4b07      	ldr	r3, [pc, #28]	@ (8007d8c <HAL_PWREx_EnableOverDrive+0x98>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d78:	d1ee      	bne.n	8007d58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40023800 	.word	0x40023800
 8007d88:	420e0040 	.word	0x420e0040
 8007d8c:	40007000 	.word	0x40007000
 8007d90:	420e0044 	.word	0x420e0044

08007d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e0cc      	b.n	8007f42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007da8:	4b68      	ldr	r3, [pc, #416]	@ (8007f4c <HAL_RCC_ClockConfig+0x1b8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 030f 	and.w	r3, r3, #15
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d90c      	bls.n	8007dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007db6:	4b65      	ldr	r3, [pc, #404]	@ (8007f4c <HAL_RCC_ClockConfig+0x1b8>)
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	b2d2      	uxtb	r2, r2
 8007dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dbe:	4b63      	ldr	r3, [pc, #396]	@ (8007f4c <HAL_RCC_ClockConfig+0x1b8>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 030f 	and.w	r3, r3, #15
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d001      	beq.n	8007dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e0b8      	b.n	8007f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d020      	beq.n	8007e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d005      	beq.n	8007df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007de8:	4b59      	ldr	r3, [pc, #356]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	4a58      	ldr	r2, [pc, #352]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007dee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007df2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0308 	and.w	r3, r3, #8
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e00:	4b53      	ldr	r3, [pc, #332]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	4a52      	ldr	r2, [pc, #328]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007e06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e0c:	4b50      	ldr	r3, [pc, #320]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	494d      	ldr	r1, [pc, #308]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d044      	beq.n	8007eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d107      	bne.n	8007e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e32:	4b47      	ldr	r3, [pc, #284]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d119      	bne.n	8007e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e07f      	b.n	8007f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d003      	beq.n	8007e52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d107      	bne.n	8007e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e52:	4b3f      	ldr	r3, [pc, #252]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d109      	bne.n	8007e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e06f      	b.n	8007f42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e62:	4b3b      	ldr	r3, [pc, #236]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e067      	b.n	8007f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e72:	4b37      	ldr	r3, [pc, #220]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f023 0203 	bic.w	r2, r3, #3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	4934      	ldr	r1, [pc, #208]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e84:	f7ff fc7e 	bl	8007784 <HAL_GetTick>
 8007e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e8a:	e00a      	b.n	8007ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e8c:	f7ff fc7a 	bl	8007784 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d901      	bls.n	8007ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e04f      	b.n	8007f42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f003 020c 	and.w	r2, r3, #12
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d1eb      	bne.n	8007e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007eb4:	4b25      	ldr	r3, [pc, #148]	@ (8007f4c <HAL_RCC_ClockConfig+0x1b8>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 030f 	and.w	r3, r3, #15
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d20c      	bcs.n	8007edc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ec2:	4b22      	ldr	r3, [pc, #136]	@ (8007f4c <HAL_RCC_ClockConfig+0x1b8>)
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eca:	4b20      	ldr	r3, [pc, #128]	@ (8007f4c <HAL_RCC_ClockConfig+0x1b8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 030f 	and.w	r3, r3, #15
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d001      	beq.n	8007edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e032      	b.n	8007f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d008      	beq.n	8007efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ee8:	4b19      	ldr	r3, [pc, #100]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	4916      	ldr	r1, [pc, #88]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0308 	and.w	r3, r3, #8
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d009      	beq.n	8007f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f06:	4b12      	ldr	r3, [pc, #72]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	490e      	ldr	r1, [pc, #56]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f1a:	f000 f821 	bl	8007f60 <HAL_RCC_GetSysClockFreq>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	4b0b      	ldr	r3, [pc, #44]	@ (8007f50 <HAL_RCC_ClockConfig+0x1bc>)
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	091b      	lsrs	r3, r3, #4
 8007f26:	f003 030f 	and.w	r3, r3, #15
 8007f2a:	490a      	ldr	r1, [pc, #40]	@ (8007f54 <HAL_RCC_ClockConfig+0x1c0>)
 8007f2c:	5ccb      	ldrb	r3, [r1, r3]
 8007f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f32:	4a09      	ldr	r2, [pc, #36]	@ (8007f58 <HAL_RCC_ClockConfig+0x1c4>)
 8007f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007f36:	4b09      	ldr	r3, [pc, #36]	@ (8007f5c <HAL_RCC_ClockConfig+0x1c8>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff fbde 	bl	80076fc <HAL_InitTick>

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	40023c00 	.word	0x40023c00
 8007f50:	40023800 	.word	0x40023800
 8007f54:	0800962c 	.word	0x0800962c
 8007f58:	20000000 	.word	0x20000000
 8007f5c:	20000004 	.word	0x20000004

08007f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f64:	b0a6      	sub	sp, #152	@ 0x98
 8007f66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8007f74:	2300      	movs	r3, #0
 8007f76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f86:	4bc8      	ldr	r3, [pc, #800]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 030c 	and.w	r3, r3, #12
 8007f8e:	2b0c      	cmp	r3, #12
 8007f90:	f200 817e 	bhi.w	8008290 <HAL_RCC_GetSysClockFreq+0x330>
 8007f94:	a201      	add	r2, pc, #4	@ (adr r2, 8007f9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9a:	bf00      	nop
 8007f9c:	08007fd1 	.word	0x08007fd1
 8007fa0:	08008291 	.word	0x08008291
 8007fa4:	08008291 	.word	0x08008291
 8007fa8:	08008291 	.word	0x08008291
 8007fac:	08007fd9 	.word	0x08007fd9
 8007fb0:	08008291 	.word	0x08008291
 8007fb4:	08008291 	.word	0x08008291
 8007fb8:	08008291 	.word	0x08008291
 8007fbc:	08007fe1 	.word	0x08007fe1
 8007fc0:	08008291 	.word	0x08008291
 8007fc4:	08008291 	.word	0x08008291
 8007fc8:	08008291 	.word	0x08008291
 8007fcc:	0800814b 	.word	0x0800814b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007fd0:	4bb6      	ldr	r3, [pc, #728]	@ (80082ac <HAL_RCC_GetSysClockFreq+0x34c>)
 8007fd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8007fd6:	e15f      	b.n	8008298 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007fd8:	4bb5      	ldr	r3, [pc, #724]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8007fda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8007fde:	e15b      	b.n	8008298 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fe0:	4bb1      	ldr	r3, [pc, #708]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fe8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007fec:	4bae      	ldr	r3, [pc, #696]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d031      	beq.n	800805c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ff8:	4bab      	ldr	r3, [pc, #684]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	099b      	lsrs	r3, r3, #6
 8007ffe:	2200      	movs	r2, #0
 8008000:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008002:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008004:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800800a:	663b      	str	r3, [r7, #96]	@ 0x60
 800800c:	2300      	movs	r3, #0
 800800e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008010:	4ba7      	ldr	r3, [pc, #668]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8008012:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008016:	462a      	mov	r2, r5
 8008018:	fb03 f202 	mul.w	r2, r3, r2
 800801c:	2300      	movs	r3, #0
 800801e:	4621      	mov	r1, r4
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	4413      	add	r3, r2
 8008026:	4aa2      	ldr	r2, [pc, #648]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8008028:	4621      	mov	r1, r4
 800802a:	fba1 1202 	umull	r1, r2, r1, r2
 800802e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008030:	460a      	mov	r2, r1
 8008032:	67ba      	str	r2, [r7, #120]	@ 0x78
 8008034:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008036:	4413      	add	r3, r2
 8008038:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800803a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800803e:	2200      	movs	r2, #0
 8008040:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008042:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008044:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008048:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800804c:	f7f8 fd82 	bl	8000b54 <__aeabi_uldivmod>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4613      	mov	r3, r2
 8008056:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800805a:	e064      	b.n	8008126 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800805c:	4b92      	ldr	r3, [pc, #584]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x348>)
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	099b      	lsrs	r3, r3, #6
 8008062:	2200      	movs	r2, #0
 8008064:	653b      	str	r3, [r7, #80]	@ 0x50
 8008066:	657a      	str	r2, [r7, #84]	@ 0x54
 8008068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800806a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800806e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008070:	2300      	movs	r3, #0
 8008072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008074:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8008078:	4622      	mov	r2, r4
 800807a:	462b      	mov	r3, r5
 800807c:	f04f 0000 	mov.w	r0, #0
 8008080:	f04f 0100 	mov.w	r1, #0
 8008084:	0159      	lsls	r1, r3, #5
 8008086:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800808a:	0150      	lsls	r0, r2, #5
 800808c:	4602      	mov	r2, r0
 800808e:	460b      	mov	r3, r1
 8008090:	4621      	mov	r1, r4
 8008092:	1a51      	subs	r1, r2, r1
 8008094:	6139      	str	r1, [r7, #16]
 8008096:	4629      	mov	r1, r5
 8008098:	eb63 0301 	sbc.w	r3, r3, r1
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	f04f 0200 	mov.w	r2, #0
 80080a2:	f04f 0300 	mov.w	r3, #0
 80080a6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080aa:	4659      	mov	r1, fp
 80080ac:	018b      	lsls	r3, r1, #6
 80080ae:	4651      	mov	r1, sl
 80080b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080b4:	4651      	mov	r1, sl
 80080b6:	018a      	lsls	r2, r1, #6
 80080b8:	4651      	mov	r1, sl
 80080ba:	ebb2 0801 	subs.w	r8, r2, r1
 80080be:	4659      	mov	r1, fp
 80080c0:	eb63 0901 	sbc.w	r9, r3, r1
 80080c4:	f04f 0200 	mov.w	r2, #0
 80080c8:	f04f 0300 	mov.w	r3, #0
 80080cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080d8:	4690      	mov	r8, r2
 80080da:	4699      	mov	r9, r3
 80080dc:	4623      	mov	r3, r4
 80080de:	eb18 0303 	adds.w	r3, r8, r3
 80080e2:	60bb      	str	r3, [r7, #8]
 80080e4:	462b      	mov	r3, r5
 80080e6:	eb49 0303 	adc.w	r3, r9, r3
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	f04f 0200 	mov.w	r2, #0
 80080f0:	f04f 0300 	mov.w	r3, #0
 80080f4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80080f8:	4629      	mov	r1, r5
 80080fa:	028b      	lsls	r3, r1, #10
 80080fc:	4621      	mov	r1, r4
 80080fe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008102:	4621      	mov	r1, r4
 8008104:	028a      	lsls	r2, r1, #10
 8008106:	4610      	mov	r0, r2
 8008108:	4619      	mov	r1, r3
 800810a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800810e:	2200      	movs	r2, #0
 8008110:	643b      	str	r3, [r7, #64]	@ 0x40
 8008112:	647a      	str	r2, [r7, #68]	@ 0x44
 8008114:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008118:	f7f8 fd1c 	bl	8000b54 <__aeabi_uldivmod>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4613      	mov	r3, r2
 8008122:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008126:	4b60      	ldr	r3, [pc, #384]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	0c1b      	lsrs	r3, r3, #16
 800812c:	f003 0303 	and.w	r3, r3, #3
 8008130:	3301      	adds	r3, #1
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8008138:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800813c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008140:	fbb2 f3f3 	udiv	r3, r2, r3
 8008144:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8008148:	e0a6      	b.n	8008298 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800814a:	4b57      	ldr	r3, [pc, #348]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x348>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008152:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008156:	4b54      	ldr	r3, [pc, #336]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d02a      	beq.n	80081b8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008162:	4b51      	ldr	r3, [pc, #324]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	099b      	lsrs	r3, r3, #6
 8008168:	2200      	movs	r2, #0
 800816a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800816c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008174:	2100      	movs	r1, #0
 8008176:	4b4e      	ldr	r3, [pc, #312]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8008178:	fb03 f201 	mul.w	r2, r3, r1
 800817c:	2300      	movs	r3, #0
 800817e:	fb00 f303 	mul.w	r3, r0, r3
 8008182:	4413      	add	r3, r2
 8008184:	4a4a      	ldr	r2, [pc, #296]	@ (80082b0 <HAL_RCC_GetSysClockFreq+0x350>)
 8008186:	fba0 1202 	umull	r1, r2, r0, r2
 800818a:	677a      	str	r2, [r7, #116]	@ 0x74
 800818c:	460a      	mov	r2, r1
 800818e:	673a      	str	r2, [r7, #112]	@ 0x70
 8008190:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008192:	4413      	add	r3, r2
 8008194:	677b      	str	r3, [r7, #116]	@ 0x74
 8008196:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800819a:	2200      	movs	r2, #0
 800819c:	633b      	str	r3, [r7, #48]	@ 0x30
 800819e:	637a      	str	r2, [r7, #52]	@ 0x34
 80081a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80081a4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80081a8:	f7f8 fcd4 	bl	8000b54 <__aeabi_uldivmod>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4613      	mov	r3, r2
 80081b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081b6:	e05b      	b.n	8008270 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081b8:	4b3b      	ldr	r3, [pc, #236]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x348>)
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	099b      	lsrs	r3, r3, #6
 80081be:	2200      	movs	r2, #0
 80081c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ca:	623b      	str	r3, [r7, #32]
 80081cc:	2300      	movs	r3, #0
 80081ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80081d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80081d4:	4642      	mov	r2, r8
 80081d6:	464b      	mov	r3, r9
 80081d8:	f04f 0000 	mov.w	r0, #0
 80081dc:	f04f 0100 	mov.w	r1, #0
 80081e0:	0159      	lsls	r1, r3, #5
 80081e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081e6:	0150      	lsls	r0, r2, #5
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4641      	mov	r1, r8
 80081ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80081f2:	4649      	mov	r1, r9
 80081f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80081f8:	f04f 0200 	mov.w	r2, #0
 80081fc:	f04f 0300 	mov.w	r3, #0
 8008200:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008204:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008208:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800820c:	ebb2 040a 	subs.w	r4, r2, sl
 8008210:	eb63 050b 	sbc.w	r5, r3, fp
 8008214:	f04f 0200 	mov.w	r2, #0
 8008218:	f04f 0300 	mov.w	r3, #0
 800821c:	00eb      	lsls	r3, r5, #3
 800821e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008222:	00e2      	lsls	r2, r4, #3
 8008224:	4614      	mov	r4, r2
 8008226:	461d      	mov	r5, r3
 8008228:	4643      	mov	r3, r8
 800822a:	18e3      	adds	r3, r4, r3
 800822c:	603b      	str	r3, [r7, #0]
 800822e:	464b      	mov	r3, r9
 8008230:	eb45 0303 	adc.w	r3, r5, r3
 8008234:	607b      	str	r3, [r7, #4]
 8008236:	f04f 0200 	mov.w	r2, #0
 800823a:	f04f 0300 	mov.w	r3, #0
 800823e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008242:	4629      	mov	r1, r5
 8008244:	028b      	lsls	r3, r1, #10
 8008246:	4621      	mov	r1, r4
 8008248:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800824c:	4621      	mov	r1, r4
 800824e:	028a      	lsls	r2, r1, #10
 8008250:	4610      	mov	r0, r2
 8008252:	4619      	mov	r1, r3
 8008254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008258:	2200      	movs	r2, #0
 800825a:	61bb      	str	r3, [r7, #24]
 800825c:	61fa      	str	r2, [r7, #28]
 800825e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008262:	f7f8 fc77 	bl	8000b54 <__aeabi_uldivmod>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4613      	mov	r3, r2
 800826c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008270:	4b0d      	ldr	r3, [pc, #52]	@ (80082a8 <HAL_RCC_GetSysClockFreq+0x348>)
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	0f1b      	lsrs	r3, r3, #28
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800827e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008282:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008286:	fbb2 f3f3 	udiv	r3, r2, r3
 800828a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800828e:	e003      	b.n	8008298 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008290:	4b06      	ldr	r3, [pc, #24]	@ (80082ac <HAL_RCC_GetSysClockFreq+0x34c>)
 8008292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8008296:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008298:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800829c:	4618      	mov	r0, r3
 800829e:	3798      	adds	r7, #152	@ 0x98
 80082a0:	46bd      	mov	sp, r7
 80082a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082a6:	bf00      	nop
 80082a8:	40023800 	.word	0x40023800
 80082ac:	00f42400 	.word	0x00f42400
 80082b0:	017d7840 	.word	0x017d7840

080082b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e28d      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 8083 	beq.w	80083da <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80082d4:	4b94      	ldr	r3, [pc, #592]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f003 030c 	and.w	r3, r3, #12
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d019      	beq.n	8008314 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80082e0:	4b91      	ldr	r3, [pc, #580]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d106      	bne.n	80082fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80082ec:	4b8e      	ldr	r3, [pc, #568]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082f8:	d00c      	beq.n	8008314 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082fa:	4b8b      	ldr	r3, [pc, #556]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008302:	2b0c      	cmp	r3, #12
 8008304:	d112      	bne.n	800832c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008306:	4b88      	ldr	r3, [pc, #544]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800830e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008312:	d10b      	bne.n	800832c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008314:	4b84      	ldr	r3, [pc, #528]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800831c:	2b00      	cmp	r3, #0
 800831e:	d05b      	beq.n	80083d8 <HAL_RCC_OscConfig+0x124>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d157      	bne.n	80083d8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e25a      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008334:	d106      	bne.n	8008344 <HAL_RCC_OscConfig+0x90>
 8008336:	4b7c      	ldr	r3, [pc, #496]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a7b      	ldr	r2, [pc, #492]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 800833c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008340:	6013      	str	r3, [r2, #0]
 8008342:	e01d      	b.n	8008380 <HAL_RCC_OscConfig+0xcc>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800834c:	d10c      	bne.n	8008368 <HAL_RCC_OscConfig+0xb4>
 800834e:	4b76      	ldr	r3, [pc, #472]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a75      	ldr	r2, [pc, #468]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 8008354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	4b73      	ldr	r3, [pc, #460]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a72      	ldr	r2, [pc, #456]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 8008360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	e00b      	b.n	8008380 <HAL_RCC_OscConfig+0xcc>
 8008368:	4b6f      	ldr	r3, [pc, #444]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a6e      	ldr	r2, [pc, #440]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 800836e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	4b6c      	ldr	r3, [pc, #432]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a6b      	ldr	r2, [pc, #428]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 800837a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800837e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d013      	beq.n	80083b0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008388:	f7ff f9fc 	bl	8007784 <HAL_GetTick>
 800838c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800838e:	e008      	b.n	80083a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008390:	f7ff f9f8 	bl	8007784 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b64      	cmp	r3, #100	@ 0x64
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e21f      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083a2:	4b61      	ldr	r3, [pc, #388]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0f0      	beq.n	8008390 <HAL_RCC_OscConfig+0xdc>
 80083ae:	e014      	b.n	80083da <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b0:	f7ff f9e8 	bl	8007784 <HAL_GetTick>
 80083b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083b6:	e008      	b.n	80083ca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083b8:	f7ff f9e4 	bl	8007784 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	2b64      	cmp	r3, #100	@ 0x64
 80083c4:	d901      	bls.n	80083ca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e20b      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083ca:	4b57      	ldr	r3, [pc, #348]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1f0      	bne.n	80083b8 <HAL_RCC_OscConfig+0x104>
 80083d6:	e000      	b.n	80083da <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d06f      	beq.n	80084c6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80083e6:	4b50      	ldr	r3, [pc, #320]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f003 030c 	and.w	r3, r3, #12
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d017      	beq.n	8008422 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80083f2:	4b4d      	ldr	r3, [pc, #308]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f003 030c 	and.w	r3, r3, #12
        || \
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d105      	bne.n	800840a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80083fe:	4b4a      	ldr	r3, [pc, #296]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00b      	beq.n	8008422 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800840a:	4b47      	ldr	r3, [pc, #284]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008412:	2b0c      	cmp	r3, #12
 8008414:	d11c      	bne.n	8008450 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008416:	4b44      	ldr	r3, [pc, #272]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d116      	bne.n	8008450 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008422:	4b41      	ldr	r3, [pc, #260]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d005      	beq.n	800843a <HAL_RCC_OscConfig+0x186>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d001      	beq.n	800843a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e1d3      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800843a:	4b3b      	ldr	r3, [pc, #236]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	4937      	ldr	r1, [pc, #220]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 800844a:	4313      	orrs	r3, r2
 800844c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800844e:	e03a      	b.n	80084c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d020      	beq.n	800849a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008458:	4b34      	ldr	r3, [pc, #208]	@ (800852c <HAL_RCC_OscConfig+0x278>)
 800845a:	2201      	movs	r2, #1
 800845c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800845e:	f7ff f991 	bl	8007784 <HAL_GetTick>
 8008462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008464:	e008      	b.n	8008478 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008466:	f7ff f98d 	bl	8007784 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d901      	bls.n	8008478 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e1b4      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008478:	4b2b      	ldr	r3, [pc, #172]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b00      	cmp	r3, #0
 8008482:	d0f0      	beq.n	8008466 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008484:	4b28      	ldr	r3, [pc, #160]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	4925      	ldr	r1, [pc, #148]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 8008494:	4313      	orrs	r3, r2
 8008496:	600b      	str	r3, [r1, #0]
 8008498:	e015      	b.n	80084c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800849a:	4b24      	ldr	r3, [pc, #144]	@ (800852c <HAL_RCC_OscConfig+0x278>)
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a0:	f7ff f970 	bl	8007784 <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084a6:	e008      	b.n	80084ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084a8:	f7ff f96c 	bl	8007784 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e193      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1f0      	bne.n	80084a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d036      	beq.n	8008540 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d016      	beq.n	8008508 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084da:	4b15      	ldr	r3, [pc, #84]	@ (8008530 <HAL_RCC_OscConfig+0x27c>)
 80084dc:	2201      	movs	r2, #1
 80084de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084e0:	f7ff f950 	bl	8007784 <HAL_GetTick>
 80084e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084e8:	f7ff f94c 	bl	8007784 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e173      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008528 <HAL_RCC_OscConfig+0x274>)
 80084fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0f0      	beq.n	80084e8 <HAL_RCC_OscConfig+0x234>
 8008506:	e01b      	b.n	8008540 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008508:	4b09      	ldr	r3, [pc, #36]	@ (8008530 <HAL_RCC_OscConfig+0x27c>)
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800850e:	f7ff f939 	bl	8007784 <HAL_GetTick>
 8008512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008514:	e00e      	b.n	8008534 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008516:	f7ff f935 	bl	8007784 <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	2b02      	cmp	r3, #2
 8008522:	d907      	bls.n	8008534 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e15c      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
 8008528:	40023800 	.word	0x40023800
 800852c:	42470000 	.word	0x42470000
 8008530:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008534:	4b8a      	ldr	r3, [pc, #552]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008538:	f003 0302 	and.w	r3, r3, #2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1ea      	bne.n	8008516 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0304 	and.w	r3, r3, #4
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 8097 	beq.w	800867c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800854e:	2300      	movs	r3, #0
 8008550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008552:	4b83      	ldr	r3, [pc, #524]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10f      	bne.n	800857e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800855e:	2300      	movs	r3, #0
 8008560:	60bb      	str	r3, [r7, #8]
 8008562:	4b7f      	ldr	r3, [pc, #508]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008566:	4a7e      	ldr	r2, [pc, #504]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800856c:	6413      	str	r3, [r2, #64]	@ 0x40
 800856e:	4b7c      	ldr	r3, [pc, #496]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008576:	60bb      	str	r3, [r7, #8]
 8008578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800857a:	2301      	movs	r3, #1
 800857c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800857e:	4b79      	ldr	r3, [pc, #484]	@ (8008764 <HAL_RCC_OscConfig+0x4b0>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008586:	2b00      	cmp	r3, #0
 8008588:	d118      	bne.n	80085bc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800858a:	4b76      	ldr	r3, [pc, #472]	@ (8008764 <HAL_RCC_OscConfig+0x4b0>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a75      	ldr	r2, [pc, #468]	@ (8008764 <HAL_RCC_OscConfig+0x4b0>)
 8008590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008596:	f7ff f8f5 	bl	8007784 <HAL_GetTick>
 800859a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800859c:	e008      	b.n	80085b0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800859e:	f7ff f8f1 	bl	8007784 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e118      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085b0:	4b6c      	ldr	r3, [pc, #432]	@ (8008764 <HAL_RCC_OscConfig+0x4b0>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0f0      	beq.n	800859e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d106      	bne.n	80085d2 <HAL_RCC_OscConfig+0x31e>
 80085c4:	4b66      	ldr	r3, [pc, #408]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 80085c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085c8:	4a65      	ldr	r2, [pc, #404]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 80085ca:	f043 0301 	orr.w	r3, r3, #1
 80085ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80085d0:	e01c      	b.n	800860c <HAL_RCC_OscConfig+0x358>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	2b05      	cmp	r3, #5
 80085d8:	d10c      	bne.n	80085f4 <HAL_RCC_OscConfig+0x340>
 80085da:	4b61      	ldr	r3, [pc, #388]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 80085dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085de:	4a60      	ldr	r2, [pc, #384]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 80085e0:	f043 0304 	orr.w	r3, r3, #4
 80085e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80085e6:	4b5e      	ldr	r3, [pc, #376]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 80085e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ea:	4a5d      	ldr	r2, [pc, #372]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 80085ec:	f043 0301 	orr.w	r3, r3, #1
 80085f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80085f2:	e00b      	b.n	800860c <HAL_RCC_OscConfig+0x358>
 80085f4:	4b5a      	ldr	r3, [pc, #360]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 80085f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f8:	4a59      	ldr	r2, [pc, #356]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 80085fa:	f023 0301 	bic.w	r3, r3, #1
 80085fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008600:	4b57      	ldr	r3, [pc, #348]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008604:	4a56      	ldr	r2, [pc, #344]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008606:	f023 0304 	bic.w	r3, r3, #4
 800860a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d015      	beq.n	8008640 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008614:	f7ff f8b6 	bl	8007784 <HAL_GetTick>
 8008618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800861a:	e00a      	b.n	8008632 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800861c:	f7ff f8b2 	bl	8007784 <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800862a:	4293      	cmp	r3, r2
 800862c:	d901      	bls.n	8008632 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e0d7      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008632:	4b4b      	ldr	r3, [pc, #300]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0ee      	beq.n	800861c <HAL_RCC_OscConfig+0x368>
 800863e:	e014      	b.n	800866a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008640:	f7ff f8a0 	bl	8007784 <HAL_GetTick>
 8008644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008646:	e00a      	b.n	800865e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008648:	f7ff f89c 	bl	8007784 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008656:	4293      	cmp	r3, r2
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e0c1      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800865e:	4b40      	ldr	r3, [pc, #256]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008662:	f003 0302 	and.w	r3, r3, #2
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1ee      	bne.n	8008648 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d105      	bne.n	800867c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008670:	4b3b      	ldr	r3, [pc, #236]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008674:	4a3a      	ldr	r2, [pc, #232]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800867a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 80ad 	beq.w	80087e0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008686:	4b36      	ldr	r3, [pc, #216]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 030c 	and.w	r3, r3, #12
 800868e:	2b08      	cmp	r3, #8
 8008690:	d060      	beq.n	8008754 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	2b02      	cmp	r3, #2
 8008698:	d145      	bne.n	8008726 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800869a:	4b33      	ldr	r3, [pc, #204]	@ (8008768 <HAL_RCC_OscConfig+0x4b4>)
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a0:	f7ff f870 	bl	8007784 <HAL_GetTick>
 80086a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086a6:	e008      	b.n	80086ba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086a8:	f7ff f86c 	bl	8007784 <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d901      	bls.n	80086ba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e093      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ba:	4b29      	ldr	r3, [pc, #164]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1f0      	bne.n	80086a8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	69da      	ldr	r2, [r3, #28]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d4:	019b      	lsls	r3, r3, #6
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086dc:	085b      	lsrs	r3, r3, #1
 80086de:	3b01      	subs	r3, #1
 80086e0:	041b      	lsls	r3, r3, #16
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e8:	061b      	lsls	r3, r3, #24
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f0:	071b      	lsls	r3, r3, #28
 80086f2:	491b      	ldr	r1, [pc, #108]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008768 <HAL_RCC_OscConfig+0x4b4>)
 80086fa:	2201      	movs	r2, #1
 80086fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086fe:	f7ff f841 	bl	8007784 <HAL_GetTick>
 8008702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008704:	e008      	b.n	8008718 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008706:	f7ff f83d 	bl	8007784 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	2b02      	cmp	r3, #2
 8008712:	d901      	bls.n	8008718 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e064      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008718:	4b11      	ldr	r3, [pc, #68]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0f0      	beq.n	8008706 <HAL_RCC_OscConfig+0x452>
 8008724:	e05c      	b.n	80087e0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008726:	4b10      	ldr	r3, [pc, #64]	@ (8008768 <HAL_RCC_OscConfig+0x4b4>)
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872c:	f7ff f82a 	bl	8007784 <HAL_GetTick>
 8008730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008732:	e008      	b.n	8008746 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008734:	f7ff f826 	bl	8007784 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e04d      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008746:	4b06      	ldr	r3, [pc, #24]	@ (8008760 <HAL_RCC_OscConfig+0x4ac>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1f0      	bne.n	8008734 <HAL_RCC_OscConfig+0x480>
 8008752:	e045      	b.n	80087e0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d107      	bne.n	800876c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e040      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
 8008760:	40023800 	.word	0x40023800
 8008764:	40007000 	.word	0x40007000
 8008768:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800876c:	4b1f      	ldr	r3, [pc, #124]	@ (80087ec <HAL_RCC_OscConfig+0x538>)
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d030      	beq.n	80087dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008784:	429a      	cmp	r2, r3
 8008786:	d129      	bne.n	80087dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008792:	429a      	cmp	r2, r3
 8008794:	d122      	bne.n	80087dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800879c:	4013      	ands	r3, r2
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80087a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d119      	bne.n	80087dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b2:	085b      	lsrs	r3, r3, #1
 80087b4:	3b01      	subs	r3, #1
 80087b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d10f      	bne.n	80087dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d107      	bne.n	80087dc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087d8:	429a      	cmp	r2, r3
 80087da:	d001      	beq.n	80087e0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e000      	b.n	80087e2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	40023800 	.word	0x40023800

080087f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e07b      	b.n	80088fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008806:	2b00      	cmp	r3, #0
 8008808:	d108      	bne.n	800881c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008812:	d009      	beq.n	8008828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	61da      	str	r2, [r3, #28]
 800881a:	e005      	b.n	8008828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d106      	bne.n	8008848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fe fe5c 	bl	8007500 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800885e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008870:	431a      	orrs	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800887a:	431a      	orrs	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	431a      	orrs	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008898:	431a      	orrs	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80088a2:	431a      	orrs	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a1b      	ldr	r3, [r3, #32]
 80088a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ac:	ea42 0103 	orr.w	r1, r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	0c1b      	lsrs	r3, r3, #16
 80088c6:	f003 0104 	and.w	r1, r3, #4
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ce:	f003 0210 	and.w	r2, r3, #16
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	69da      	ldr	r2, [r3, #28]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80088e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b088      	sub	sp, #32
 8008906:	af00      	add	r7, sp, #0
 8008908:	60f8      	str	r0, [r7, #12]
 800890a:	60b9      	str	r1, [r7, #8]
 800890c:	603b      	str	r3, [r7, #0]
 800890e:	4613      	mov	r3, r2
 8008910:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008912:	f7fe ff37 	bl	8007784 <HAL_GetTick>
 8008916:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008918:	88fb      	ldrh	r3, [r7, #6]
 800891a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b01      	cmp	r3, #1
 8008926:	d001      	beq.n	800892c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008928:	2302      	movs	r3, #2
 800892a:	e12a      	b.n	8008b82 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d002      	beq.n	8008938 <HAL_SPI_Transmit+0x36>
 8008932:	88fb      	ldrh	r3, [r7, #6]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e122      	b.n	8008b82 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008942:	2b01      	cmp	r3, #1
 8008944:	d101      	bne.n	800894a <HAL_SPI_Transmit+0x48>
 8008946:	2302      	movs	r3, #2
 8008948:	e11b      	b.n	8008b82 <HAL_SPI_Transmit+0x280>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2203      	movs	r2, #3
 8008956:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	88fa      	ldrh	r2, [r7, #6]
 800896a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	88fa      	ldrh	r2, [r7, #6]
 8008970:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008998:	d10f      	bne.n	80089ba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089c4:	2b40      	cmp	r3, #64	@ 0x40
 80089c6:	d007      	beq.n	80089d8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80089e0:	d152      	bne.n	8008a88 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_SPI_Transmit+0xee>
 80089ea:	8b7b      	ldrh	r3, [r7, #26]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d145      	bne.n	8008a7c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089f4:	881a      	ldrh	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a00:	1c9a      	adds	r2, r3, #2
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008a14:	e032      	b.n	8008a7c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d112      	bne.n	8008a4a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a28:	881a      	ldrh	r2, [r3, #0]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a34:	1c9a      	adds	r2, r3, #2
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	3b01      	subs	r3, #1
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008a48:	e018      	b.n	8008a7c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a4a:	f7fe fe9b 	bl	8007784 <HAL_GetTick>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d803      	bhi.n	8008a62 <HAL_SPI_Transmit+0x160>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a60:	d102      	bne.n	8008a68 <HAL_SPI_Transmit+0x166>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d109      	bne.n	8008a7c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e082      	b.n	8008b82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1c7      	bne.n	8008a16 <HAL_SPI_Transmit+0x114>
 8008a86:	e053      	b.n	8008b30 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d002      	beq.n	8008a96 <HAL_SPI_Transmit+0x194>
 8008a90:	8b7b      	ldrh	r3, [r7, #26]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d147      	bne.n	8008b26 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	330c      	adds	r3, #12
 8008aa0:	7812      	ldrb	r2, [r2, #0]
 8008aa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008abc:	e033      	b.n	8008b26 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f003 0302 	and.w	r3, r3, #2
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d113      	bne.n	8008af4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	330c      	adds	r3, #12
 8008ad6:	7812      	ldrb	r2, [r2, #0]
 8008ad8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b01      	subs	r3, #1
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008af2:	e018      	b.n	8008b26 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008af4:	f7fe fe46 	bl	8007784 <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d803      	bhi.n	8008b0c <HAL_SPI_Transmit+0x20a>
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0a:	d102      	bne.n	8008b12 <HAL_SPI_Transmit+0x210>
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d109      	bne.n	8008b26 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e02d      	b.n	8008b82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1c6      	bne.n	8008abe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b30:	69fa      	ldr	r2, [r7, #28]
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 fbd9 	bl	80092ec <SPI_EndRxTxTransaction>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2220      	movs	r2, #32
 8008b44:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b4e:	2300      	movs	r3, #0
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	617b      	str	r3, [r7, #20]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	617b      	str	r3, [r7, #20]
 8008b62:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e000      	b.n	8008b82 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008b80:	2300      	movs	r3, #0
  }
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3720      	adds	r7, #32
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b088      	sub	sp, #32
 8008b8e:	af02      	add	r7, sp, #8
 8008b90:	60f8      	str	r0, [r7, #12]
 8008b92:	60b9      	str	r1, [r7, #8]
 8008b94:	603b      	str	r3, [r7, #0]
 8008b96:	4613      	mov	r3, r2
 8008b98:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d001      	beq.n	8008baa <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e104      	b.n	8008db4 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <HAL_SPI_Receive+0x2c>
 8008bb0:	88fb      	ldrh	r3, [r7, #6]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e0fc      	b.n	8008db4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008bc2:	d112      	bne.n	8008bea <HAL_SPI_Receive+0x60>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10e      	bne.n	8008bea <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2204      	movs	r2, #4
 8008bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008bd4:	88fa      	ldrh	r2, [r7, #6]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	68b9      	ldr	r1, [r7, #8]
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 f8eb 	bl	8008dbc <HAL_SPI_TransmitReceive>
 8008be6:	4603      	mov	r3, r0
 8008be8:	e0e4      	b.n	8008db4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bea:	f7fe fdcb 	bl	8007784 <HAL_GetTick>
 8008bee:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d101      	bne.n	8008bfe <HAL_SPI_Receive+0x74>
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	e0da      	b.n	8008db4 <HAL_SPI_Receive+0x22a>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2204      	movs	r2, #4
 8008c0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	88fa      	ldrh	r2, [r7, #6]
 8008c1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	88fa      	ldrh	r2, [r7, #6]
 8008c24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c4c:	d10f      	bne.n	8008c6e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c78:	2b40      	cmp	r3, #64	@ 0x40
 8008c7a:	d007      	beq.n	8008c8c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008c8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d170      	bne.n	8008d76 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008c94:	e035      	b.n	8008d02 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d115      	bne.n	8008cd0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f103 020c 	add.w	r2, r3, #12
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb0:	7812      	ldrb	r2, [r2, #0]
 8008cb2:	b2d2      	uxtb	r2, r2
 8008cb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008cce:	e018      	b.n	8008d02 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cd0:	f7fe fd58 	bl	8007784 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d803      	bhi.n	8008ce8 <HAL_SPI_Receive+0x15e>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d102      	bne.n	8008cee <HAL_SPI_Receive+0x164>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e058      	b.n	8008db4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1c4      	bne.n	8008c96 <HAL_SPI_Receive+0x10c>
 8008d0c:	e038      	b.n	8008d80 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d113      	bne.n	8008d44 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d26:	b292      	uxth	r2, r2
 8008d28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2e:	1c9a      	adds	r2, r3, #2
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d42:	e018      	b.n	8008d76 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d44:	f7fe fd1e 	bl	8007784 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d803      	bhi.n	8008d5c <HAL_SPI_Receive+0x1d2>
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5a:	d102      	bne.n	8008d62 <HAL_SPI_Receive+0x1d8>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d109      	bne.n	8008d76 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e01e      	b.n	8008db4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1c6      	bne.n	8008d0e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 fa4b 	bl	8009220 <SPI_EndRxTransaction>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2220      	movs	r2, #32
 8008d94:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e000      	b.n	8008db4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8008db2:	2300      	movs	r3, #0
  }
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3718      	adds	r7, #24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08a      	sub	sp, #40	@ 0x28
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008dce:	f7fe fcd9 	bl	8007784 <HAL_GetTick>
 8008dd2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008dda:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008de2:	887b      	ldrh	r3, [r7, #2]
 8008de4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008de6:	7ffb      	ldrb	r3, [r7, #31]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d00c      	beq.n	8008e06 <HAL_SPI_TransmitReceive+0x4a>
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008df2:	d106      	bne.n	8008e02 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <HAL_SPI_TransmitReceive+0x46>
 8008dfc:	7ffb      	ldrb	r3, [r7, #31]
 8008dfe:	2b04      	cmp	r3, #4
 8008e00:	d001      	beq.n	8008e06 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008e02:	2302      	movs	r3, #2
 8008e04:	e17f      	b.n	8009106 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <HAL_SPI_TransmitReceive+0x5c>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <HAL_SPI_TransmitReceive+0x5c>
 8008e12:	887b      	ldrh	r3, [r7, #2]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e174      	b.n	8009106 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d101      	bne.n	8008e2a <HAL_SPI_TransmitReceive+0x6e>
 8008e26:	2302      	movs	r3, #2
 8008e28:	e16d      	b.n	8009106 <HAL_SPI_TransmitReceive+0x34a>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b04      	cmp	r3, #4
 8008e3c:	d003      	beq.n	8008e46 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2205      	movs	r2, #5
 8008e42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	887a      	ldrh	r2, [r7, #2]
 8008e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	887a      	ldrh	r2, [r7, #2]
 8008e5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	887a      	ldrh	r2, [r7, #2]
 8008e68:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	887a      	ldrh	r2, [r7, #2]
 8008e6e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e86:	2b40      	cmp	r3, #64	@ 0x40
 8008e88:	d007      	beq.n	8008e9a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ea2:	d17e      	bne.n	8008fa2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <HAL_SPI_TransmitReceive+0xf6>
 8008eac:	8afb      	ldrh	r3, [r7, #22]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d16c      	bne.n	8008f8c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eb6:	881a      	ldrh	r2, [r3, #0]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ec2:	1c9a      	adds	r2, r3, #2
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ed6:	e059      	b.n	8008f8c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f003 0302 	and.w	r3, r3, #2
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d11b      	bne.n	8008f1e <HAL_SPI_TransmitReceive+0x162>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d016      	beq.n	8008f1e <HAL_SPI_TransmitReceive+0x162>
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d113      	bne.n	8008f1e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008efa:	881a      	ldrh	r2, [r3, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f06:	1c9a      	adds	r2, r3, #2
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	3b01      	subs	r3, #1
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d119      	bne.n	8008f60 <HAL_SPI_TransmitReceive+0x1a4>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d014      	beq.n	8008f60 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f40:	b292      	uxth	r2, r2
 8008f42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f48:	1c9a      	adds	r2, r3, #2
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	3b01      	subs	r3, #1
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f60:	f7fe fc10 	bl	8007784 <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d80d      	bhi.n	8008f8c <HAL_SPI_TransmitReceive+0x1d0>
 8008f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f76:	d009      	beq.n	8008f8c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e0bc      	b.n	8009106 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1a0      	bne.n	8008ed8 <HAL_SPI_TransmitReceive+0x11c>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d19b      	bne.n	8008ed8 <HAL_SPI_TransmitReceive+0x11c>
 8008fa0:	e082      	b.n	80090a8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <HAL_SPI_TransmitReceive+0x1f4>
 8008faa:	8afb      	ldrh	r3, [r7, #22]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d171      	bne.n	8009094 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	330c      	adds	r3, #12
 8008fba:	7812      	ldrb	r2, [r2, #0]
 8008fbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fd6:	e05d      	b.n	8009094 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d11c      	bne.n	8009020 <HAL_SPI_TransmitReceive+0x264>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d017      	beq.n	8009020 <HAL_SPI_TransmitReceive+0x264>
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d114      	bne.n	8009020 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	330c      	adds	r3, #12
 8009000:	7812      	ldrb	r2, [r2, #0]
 8009002:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009012:	b29b      	uxth	r3, r3
 8009014:	3b01      	subs	r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800901c:	2300      	movs	r3, #0
 800901e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b01      	cmp	r3, #1
 800902c:	d119      	bne.n	8009062 <HAL_SPI_TransmitReceive+0x2a6>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009032:	b29b      	uxth	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d014      	beq.n	8009062 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009042:	b2d2      	uxtb	r2, r2
 8009044:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009054:	b29b      	uxth	r3, r3
 8009056:	3b01      	subs	r3, #1
 8009058:	b29a      	uxth	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800905e:	2301      	movs	r3, #1
 8009060:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009062:	f7fe fb8f 	bl	8007784 <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800906e:	429a      	cmp	r2, r3
 8009070:	d803      	bhi.n	800907a <HAL_SPI_TransmitReceive+0x2be>
 8009072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009078:	d102      	bne.n	8009080 <HAL_SPI_TransmitReceive+0x2c4>
 800907a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800907c:	2b00      	cmp	r3, #0
 800907e:	d109      	bne.n	8009094 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e038      	b.n	8009106 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009098:	b29b      	uxth	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d19c      	bne.n	8008fd8 <HAL_SPI_TransmitReceive+0x21c>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d197      	bne.n	8008fd8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090a8:	6a3a      	ldr	r2, [r7, #32]
 80090aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 f91d 	bl	80092ec <SPI_EndRxTxTransaction>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d008      	beq.n	80090ca <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2220      	movs	r2, #32
 80090bc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e01d      	b.n	8009106 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10a      	bne.n	80090e8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090d2:	2300      	movs	r3, #0
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	613b      	str	r3, [r7, #16]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	613b      	str	r3, [r7, #16]
 80090e6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d001      	beq.n	8009104 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e000      	b.n	8009106 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009104:	2300      	movs	r3, #0
  }
}
 8009106:	4618      	mov	r0, r3
 8009108:	3728      	adds	r7, #40	@ 0x28
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	603b      	str	r3, [r7, #0]
 800911c:	4613      	mov	r3, r2
 800911e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009120:	f7fe fb30 	bl	8007784 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009128:	1a9b      	subs	r3, r3, r2
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	4413      	add	r3, r2
 800912e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009130:	f7fe fb28 	bl	8007784 <HAL_GetTick>
 8009134:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009136:	4b39      	ldr	r3, [pc, #228]	@ (800921c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	015b      	lsls	r3, r3, #5
 800913c:	0d1b      	lsrs	r3, r3, #20
 800913e:	69fa      	ldr	r2, [r7, #28]
 8009140:	fb02 f303 	mul.w	r3, r2, r3
 8009144:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009146:	e055      	b.n	80091f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914e:	d051      	beq.n	80091f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009150:	f7fe fb18 	bl	8007784 <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	69fa      	ldr	r2, [r7, #28]
 800915c:	429a      	cmp	r2, r3
 800915e:	d902      	bls.n	8009166 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d13d      	bne.n	80091e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800917e:	d111      	bne.n	80091a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009188:	d004      	beq.n	8009194 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009192:	d107      	bne.n	80091a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ac:	d10f      	bne.n	80091ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80091cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e018      	b.n	8009214 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d102      	bne.n	80091ee <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80091e8:	2300      	movs	r3, #0
 80091ea:	61fb      	str	r3, [r7, #28]
 80091ec:	e002      	b.n	80091f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	3b01      	subs	r3, #1
 80091f2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	4013      	ands	r3, r2
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	429a      	cmp	r2, r3
 8009202:	bf0c      	ite	eq
 8009204:	2301      	moveq	r3, #1
 8009206:	2300      	movne	r3, #0
 8009208:	b2db      	uxtb	r3, r3
 800920a:	461a      	mov	r2, r3
 800920c:	79fb      	ldrb	r3, [r7, #7]
 800920e:	429a      	cmp	r2, r3
 8009210:	d19a      	bne.n	8009148 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3720      	adds	r7, #32
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20000000 	.word	0x20000000

08009220 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af02      	add	r7, sp, #8
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009234:	d111      	bne.n	800925a <SPI_EndRxTransaction+0x3a>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800923e:	d004      	beq.n	800924a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009248:	d107      	bne.n	800925a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009258:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009262:	d12a      	bne.n	80092ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800926c:	d012      	beq.n	8009294 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2200      	movs	r2, #0
 8009276:	2180      	movs	r1, #128	@ 0x80
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff ff49 	bl	8009110 <SPI_WaitFlagStateUntilTimeout>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d02d      	beq.n	80092e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009288:	f043 0220 	orr.w	r2, r3, #32
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e026      	b.n	80092e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2200      	movs	r2, #0
 800929c:	2101      	movs	r1, #1
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f7ff ff36 	bl	8009110 <SPI_WaitFlagStateUntilTimeout>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d01a      	beq.n	80092e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ae:	f043 0220 	orr.w	r2, r3, #32
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e013      	b.n	80092e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	2200      	movs	r2, #0
 80092c2:	2101      	movs	r1, #1
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f7ff ff23 	bl	8009110 <SPI_WaitFlagStateUntilTimeout>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d007      	beq.n	80092e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d4:	f043 0220 	orr.w	r2, r3, #32
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e000      	b.n	80092e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af02      	add	r7, sp, #8
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2201      	movs	r2, #1
 8009300:	2102      	movs	r1, #2
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f7ff ff04 	bl	8009110 <SPI_WaitFlagStateUntilTimeout>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d007      	beq.n	800931e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009312:	f043 0220 	orr.w	r2, r3, #32
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800931a:	2303      	movs	r3, #3
 800931c:	e032      	b.n	8009384 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800931e:	4b1b      	ldr	r3, [pc, #108]	@ (800938c <SPI_EndRxTxTransaction+0xa0>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a1b      	ldr	r2, [pc, #108]	@ (8009390 <SPI_EndRxTxTransaction+0xa4>)
 8009324:	fba2 2303 	umull	r2, r3, r2, r3
 8009328:	0d5b      	lsrs	r3, r3, #21
 800932a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800932e:	fb02 f303 	mul.w	r3, r2, r3
 8009332:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800933c:	d112      	bne.n	8009364 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2200      	movs	r2, #0
 8009346:	2180      	movs	r1, #128	@ 0x80
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7ff fee1 	bl	8009110 <SPI_WaitFlagStateUntilTimeout>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d016      	beq.n	8009382 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009358:	f043 0220 	orr.w	r2, r3, #32
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009360:	2303      	movs	r3, #3
 8009362:	e00f      	b.n	8009384 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	3b01      	subs	r3, #1
 800936e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800937a:	2b80      	cmp	r3, #128	@ 0x80
 800937c:	d0f2      	beq.n	8009364 <SPI_EndRxTxTransaction+0x78>
 800937e:	e000      	b.n	8009382 <SPI_EndRxTxTransaction+0x96>
        break;
 8009380:	bf00      	nop
  }

  return HAL_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20000000 	.word	0x20000000
 8009390:	165e9f81 	.word	0x165e9f81

08009394 <memset>:
 8009394:	4402      	add	r2, r0
 8009396:	4603      	mov	r3, r0
 8009398:	4293      	cmp	r3, r2
 800939a:	d100      	bne.n	800939e <memset+0xa>
 800939c:	4770      	bx	lr
 800939e:	f803 1b01 	strb.w	r1, [r3], #1
 80093a2:	e7f9      	b.n	8009398 <memset+0x4>

080093a4 <__errno>:
 80093a4:	4b01      	ldr	r3, [pc, #4]	@ (80093ac <__errno+0x8>)
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	2000000c 	.word	0x2000000c

080093b0 <__libc_init_array>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	4d0d      	ldr	r5, [pc, #52]	@ (80093e8 <__libc_init_array+0x38>)
 80093b4:	4c0d      	ldr	r4, [pc, #52]	@ (80093ec <__libc_init_array+0x3c>)
 80093b6:	1b64      	subs	r4, r4, r5
 80093b8:	10a4      	asrs	r4, r4, #2
 80093ba:	2600      	movs	r6, #0
 80093bc:	42a6      	cmp	r6, r4
 80093be:	d109      	bne.n	80093d4 <__libc_init_array+0x24>
 80093c0:	4d0b      	ldr	r5, [pc, #44]	@ (80093f0 <__libc_init_array+0x40>)
 80093c2:	4c0c      	ldr	r4, [pc, #48]	@ (80093f4 <__libc_init_array+0x44>)
 80093c4:	f000 f914 	bl	80095f0 <_init>
 80093c8:	1b64      	subs	r4, r4, r5
 80093ca:	10a4      	asrs	r4, r4, #2
 80093cc:	2600      	movs	r6, #0
 80093ce:	42a6      	cmp	r6, r4
 80093d0:	d105      	bne.n	80093de <__libc_init_array+0x2e>
 80093d2:	bd70      	pop	{r4, r5, r6, pc}
 80093d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093d8:	4798      	blx	r3
 80093da:	3601      	adds	r6, #1
 80093dc:	e7ee      	b.n	80093bc <__libc_init_array+0xc>
 80093de:	f855 3b04 	ldr.w	r3, [r5], #4
 80093e2:	4798      	blx	r3
 80093e4:	3601      	adds	r6, #1
 80093e6:	e7f2      	b.n	80093ce <__libc_init_array+0x1e>
 80093e8:	08009664 	.word	0x08009664
 80093ec:	08009664 	.word	0x08009664
 80093f0:	08009664 	.word	0x08009664
 80093f4:	08009668 	.word	0x08009668

080093f8 <sqrtf>:
 80093f8:	b508      	push	{r3, lr}
 80093fa:	ed2d 8b02 	vpush	{d8}
 80093fe:	eeb0 8a40 	vmov.f32	s16, s0
 8009402:	f000 f8f2 	bl	80095ea <__ieee754_sqrtf>
 8009406:	eeb4 8a48 	vcmp.f32	s16, s16
 800940a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800940e:	d60c      	bvs.n	800942a <sqrtf+0x32>
 8009410:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8009430 <sqrtf+0x38>
 8009414:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800941c:	d505      	bpl.n	800942a <sqrtf+0x32>
 800941e:	f7ff ffc1 	bl	80093a4 <__errno>
 8009422:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009426:	2321      	movs	r3, #33	@ 0x21
 8009428:	6003      	str	r3, [r0, #0]
 800942a:	ecbd 8b02 	vpop	{d8}
 800942e:	bd08      	pop	{r3, pc}
 8009430:	00000000 	.word	0x00000000

08009434 <atanf>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	ee10 5a10 	vmov	r5, s0
 800943a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800943e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8009442:	eef0 7a40 	vmov.f32	s15, s0
 8009446:	d310      	bcc.n	800946a <atanf+0x36>
 8009448:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800944c:	d904      	bls.n	8009458 <atanf+0x24>
 800944e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8009452:	eeb0 0a67 	vmov.f32	s0, s15
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8009590 <atanf+0x15c>
 800945c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8009594 <atanf+0x160>
 8009460:	2d00      	cmp	r5, #0
 8009462:	bfc8      	it	gt
 8009464:	eef0 7a47 	vmovgt.f32	s15, s14
 8009468:	e7f3      	b.n	8009452 <atanf+0x1e>
 800946a:	4b4b      	ldr	r3, [pc, #300]	@ (8009598 <atanf+0x164>)
 800946c:	429c      	cmp	r4, r3
 800946e:	d810      	bhi.n	8009492 <atanf+0x5e>
 8009470:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8009474:	d20a      	bcs.n	800948c <atanf+0x58>
 8009476:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800959c <atanf+0x168>
 800947a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800947e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009482:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948a:	dce2      	bgt.n	8009452 <atanf+0x1e>
 800948c:	f04f 33ff 	mov.w	r3, #4294967295
 8009490:	e013      	b.n	80094ba <atanf+0x86>
 8009492:	f000 f8a3 	bl	80095dc <fabsf>
 8009496:	4b42      	ldr	r3, [pc, #264]	@ (80095a0 <atanf+0x16c>)
 8009498:	429c      	cmp	r4, r3
 800949a:	d84f      	bhi.n	800953c <atanf+0x108>
 800949c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80094a0:	429c      	cmp	r4, r3
 80094a2:	d841      	bhi.n	8009528 <atanf+0xf4>
 80094a4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80094a8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80094ac:	eea0 7a27 	vfma.f32	s14, s0, s15
 80094b0:	2300      	movs	r3, #0
 80094b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80094b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80094c0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80095a4 <atanf+0x170>
 80094c4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80095a8 <atanf+0x174>
 80094c8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80095ac <atanf+0x178>
 80094cc:	ee66 6a06 	vmul.f32	s13, s12, s12
 80094d0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80094d4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80095b0 <atanf+0x17c>
 80094d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80094dc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80095b4 <atanf+0x180>
 80094e0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80094e4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80095b8 <atanf+0x184>
 80094e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80094ec:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80095bc <atanf+0x188>
 80094f0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80094f4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80095c0 <atanf+0x18c>
 80094f8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80094fc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80095c4 <atanf+0x190>
 8009500:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009504:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80095c8 <atanf+0x194>
 8009508:	eea7 5a26 	vfma.f32	s10, s14, s13
 800950c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80095cc <atanf+0x198>
 8009510:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009514:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009518:	eea5 7a86 	vfma.f32	s14, s11, s12
 800951c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009520:	d121      	bne.n	8009566 <atanf+0x132>
 8009522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009526:	e794      	b.n	8009452 <atanf+0x1e>
 8009528:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800952c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009530:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009534:	2301      	movs	r3, #1
 8009536:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800953a:	e7be      	b.n	80094ba <atanf+0x86>
 800953c:	4b24      	ldr	r3, [pc, #144]	@ (80095d0 <atanf+0x19c>)
 800953e:	429c      	cmp	r4, r3
 8009540:	d80b      	bhi.n	800955a <atanf+0x126>
 8009542:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8009546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800954a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800954e:	2302      	movs	r3, #2
 8009550:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009558:	e7af      	b.n	80094ba <atanf+0x86>
 800955a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800955e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009562:	2303      	movs	r3, #3
 8009564:	e7a9      	b.n	80094ba <atanf+0x86>
 8009566:	4a1b      	ldr	r2, [pc, #108]	@ (80095d4 <atanf+0x1a0>)
 8009568:	491b      	ldr	r1, [pc, #108]	@ (80095d8 <atanf+0x1a4>)
 800956a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800956e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8009572:	edd3 6a00 	vldr	s13, [r3]
 8009576:	ee37 7a66 	vsub.f32	s14, s14, s13
 800957a:	2d00      	cmp	r5, #0
 800957c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009580:	edd2 7a00 	vldr	s15, [r2]
 8009584:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009588:	bfb8      	it	lt
 800958a:	eef1 7a67 	vneglt.f32	s15, s15
 800958e:	e760      	b.n	8009452 <atanf+0x1e>
 8009590:	bfc90fdb 	.word	0xbfc90fdb
 8009594:	3fc90fdb 	.word	0x3fc90fdb
 8009598:	3edfffff 	.word	0x3edfffff
 800959c:	7149f2ca 	.word	0x7149f2ca
 80095a0:	3f97ffff 	.word	0x3f97ffff
 80095a4:	3c8569d7 	.word	0x3c8569d7
 80095a8:	3d4bda59 	.word	0x3d4bda59
 80095ac:	bd6ef16b 	.word	0xbd6ef16b
 80095b0:	3d886b35 	.word	0x3d886b35
 80095b4:	3dba2e6e 	.word	0x3dba2e6e
 80095b8:	3e124925 	.word	0x3e124925
 80095bc:	3eaaaaab 	.word	0x3eaaaaab
 80095c0:	bd15a221 	.word	0xbd15a221
 80095c4:	bd9d8795 	.word	0xbd9d8795
 80095c8:	bde38e38 	.word	0xbde38e38
 80095cc:	be4ccccd 	.word	0xbe4ccccd
 80095d0:	401bffff 	.word	0x401bffff
 80095d4:	0800964c 	.word	0x0800964c
 80095d8:	0800963c 	.word	0x0800963c

080095dc <fabsf>:
 80095dc:	ee10 3a10 	vmov	r3, s0
 80095e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095e4:	ee00 3a10 	vmov	s0, r3
 80095e8:	4770      	bx	lr

080095ea <__ieee754_sqrtf>:
 80095ea:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80095ee:	4770      	bx	lr

080095f0 <_init>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	bf00      	nop
 80095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f6:	bc08      	pop	{r3}
 80095f8:	469e      	mov	lr, r3
 80095fa:	4770      	bx	lr

080095fc <_fini>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	bf00      	nop
 8009600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009602:	bc08      	pop	{r3}
 8009604:	469e      	mov	lr, r3
 8009606:	4770      	bx	lr
