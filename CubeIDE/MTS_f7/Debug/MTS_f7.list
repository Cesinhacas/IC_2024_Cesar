
MTS_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ec8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ec  08013098  08013098  00014098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a84  08013a84  000151e8  2**0
                  CONTENTS
  4 .ARM          00000008  08013a84  08013a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a8c  08013a8c  000151e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a8c  08013a8c  00014a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013a90  08013a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08013a94  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003750  200001e8  08013c7c  000151e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003938  08013c7c  00015938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015736  00000000  00000000  00015218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003142  00000000  00000000  0002a94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  0002da90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e43  00000000  00000000  0002ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002904c  00000000  00000000  0002fb2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d6d1  00000000  00000000  00058b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4b6f  00000000  00000000  00076248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016adb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006538  00000000  00000000  0016adfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00171334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013080 	.word	0x08013080

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08013080 	.word	0x08013080

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <inverter_matriz>:
#include <math.h>
#include "calib.h"


void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 8001024:	b480      	push	{r7}
 8001026:	b08b      	sub	sp, #44	@ 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
 8001032:	e02c      	b.n	800108e <inverter_matriz+0x6a>
        for (int j = 0; j < N; j++) {
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
 8001038:	e023      	b.n	8001082 <inverter_matriz+0x5e>
            if (i == j) {
 800103a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	429a      	cmp	r2, r3
 8001040:	d10e      	bne.n	8001060 <inverter_matriz+0x3c>
                inversa[i][j] = 1;
 8001042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	461a      	mov	r2, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	441a      	add	r2, r3
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e00d      	b.n	800107c <inverter_matriz+0x58>
            } else {
                inversa[i][j] = 0;
 8001060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	461a      	mov	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	441a      	add	r2, r3
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < N; j++) {
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	3301      	adds	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	2b08      	cmp	r3, #8
 8001086:	ddd8      	ble.n	800103a <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	3301      	adds	r3, #1
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	2b08      	cmp	r3, #8
 8001092:	ddcf      	ble.n	8001034 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	e0d1      	b.n	800123e <inverter_matriz+0x21a>
    {
        float pivot = matriz[i][i];
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	441a      	add	r2, r3
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	e03e      	b.n	8001138 <inverter_matriz+0x114>
        {
            matriz[i][j] /= pivot;
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	461a      	mov	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	441a      	add	r2, r3
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	edd3 6a00 	vldr	s13, [r3]
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	461a      	mov	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	441a      	add	r2, r3
 80010e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	edc3 7a00 	vstr	s15, [r3]
            inversa[i][j] /= pivot;
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	461a      	mov	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	441a      	add	r2, r3
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	edd3 6a00 	vldr	s13, [r3]
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	4613      	mov	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	461a      	mov	r2, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	441a      	add	r2, r3
 8001120:	ed97 7a03 	vldr	s14, [r7, #12]
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < N; j++)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	3301      	adds	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2b08      	cmp	r3, #8
 800113c:	ddbd      	ble.n	80010ba <inverter_matriz+0x96>
        }

        for (int k = 0; k < N; k++)
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	e076      	b.n	8001232 <inverter_matriz+0x20e>
        {
            if (k != i)
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	429a      	cmp	r2, r3
 800114a:	d06f      	beq.n	800122c <inverter_matriz+0x208>
            {
                float fator = matriz[k][i];
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	441a      	add	r2, r3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	e05c      	b.n	8001226 <inverter_matriz+0x202>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	441a      	add	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	ed93 7a00 	vldr	s14, [r3]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	441a      	add	r2, r3
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	edd3 6a00 	vldr	s13, [r3]
 80011a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	461a      	mov	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	441a      	add	r2, r3
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	edc3 7a00 	vstr	s15, [r3]
                    inversa[k][j] -= fator * inversa[i][j];
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	461a      	mov	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	441a      	add	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	ed93 7a00 	vldr	s14, [r3]
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	461a      	mov	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	441a      	add	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	edd3 6a00 	vldr	s13, [r3]
 80011fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	461a      	mov	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	441a      	add	r2, r3
 8001212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	edc3 7a00 	vstr	s15, [r3]
                for (int j = 0; j < N; j++)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	3301      	adds	r3, #1
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b08      	cmp	r3, #8
 800122a:	dd9f      	ble.n	800116c <inverter_matriz+0x148>
        for (int k = 0; k < N; k++)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b08      	cmp	r3, #8
 8001236:	dd85      	ble.n	8001144 <inverter_matriz+0x120>
    for (int i = 0; i < N; i++)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	3301      	adds	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	2b08      	cmp	r3, #8
 8001242:	f77f af2a 	ble.w	800109a <inverter_matriz+0x76>
                }
            }
        }
    }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	372c      	adds	r7, #44	@ 0x2c
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	0000      	movs	r0, r0
	...

08001258 <NLLS>:


uint8_t NLLS(float *mx, float *my, float *mz, float *p)
{
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	f5ad 3db7 	sub.w	sp, sp, #93696	@ 0x16e00
 800125e:	b0fa      	sub	sp, #488	@ 0x1e8
 8001260:	af00      	add	r7, sp, #0
 8001262:	f607 74e8 	addw	r4, r7, #4072	@ 0xfe8
 8001266:	f6a4 74dc 	subw	r4, r4, #4060	@ 0xfdc
 800126a:	6020      	str	r0, [r4, #0]
 800126c:	f607 70e8 	addw	r0, r7, #4072	@ 0xfe8
 8001270:	f5a0 607e 	sub.w	r0, r0, #4064	@ 0xfe0
 8001274:	6001      	str	r1, [r0, #0]
 8001276:	f607 71e8 	addw	r1, r7, #4072	@ 0xfe8
 800127a:	f6a1 71e4 	subw	r1, r1, #4068	@ 0xfe4
 800127e:	600a      	str	r2, [r1, #0]
 8001280:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001284:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8001288:	6013      	str	r3, [r2, #0]
    uint8_t passo = 0, loop = 1;
 800128a:	2300      	movs	r3, #0
 800128c:	4a54      	ldr	r2, [pc, #336]	@ (80013e0 <NLLS+0x188>)
 800128e:	443a      	add	r2, r7
 8001290:	7013      	strb	r3, [r2, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	4a53      	ldr	r2, [pc, #332]	@ (80013e4 <NLLS+0x18c>)
 8001296:	443a      	add	r2, r7
 8001298:	7013      	strb	r3, [r2, #0]
    float p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J, mat_H[N][tam];
 800129a:	4b53      	ldr	r3, [pc, #332]	@ (80013e8 <NLLS+0x190>)
 800129c:	4c53      	ldr	r4, [pc, #332]	@ (80013ec <NLLS+0x194>)
 800129e:	443c      	add	r4, r7
 80012a0:	461d      	mov	r5, r3
 80012a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	682b      	ldr	r3, [r5, #0]
 80012ac:	6023      	str	r3, [r4, #0]
    float sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
    float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

    for (int i=0; i < tam; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	4a4f      	ldr	r2, [pc, #316]	@ (80013f0 <NLLS+0x198>)
 80012b2:	443a      	add	r2, r7
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e012      	b.n	80012de <NLLS+0x86>
    {
        Be[i] = 1;
 80012b8:	4b4e      	ldr	r3, [pc, #312]	@ (80013f4 <NLLS+0x19c>)
 80012ba:	443b      	add	r3, r7
 80012bc:	f5a3 72fe 	sub.w	r2, r3, #508	@ 0x1fc
 80012c0:	4b4b      	ldr	r3, [pc, #300]	@ (80013f0 <NLLS+0x198>)
 80012c2:	443b      	add	r3, r7
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80012ce:	601a      	str	r2, [r3, #0]
    for (int i=0; i < tam; i++)
 80012d0:	4b47      	ldr	r3, [pc, #284]	@ (80013f0 <NLLS+0x198>)
 80012d2:	443b      	add	r3, r7
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a45      	ldr	r2, [pc, #276]	@ (80013f0 <NLLS+0x198>)
 80012da:	443a      	add	r2, r7
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b44      	ldr	r3, [pc, #272]	@ (80013f0 <NLLS+0x198>)
 80012e0:	443b      	add	r3, r7
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f240 4256 	movw	r2, #1110	@ 0x456
 80012e8:	4293      	cmp	r3, r2
 80012ea:	dde5      	ble.n	80012b8 <NLLS+0x60>
    }

    while(loop == 1)
 80012ec:	f003 b995 	b.w	800461a <NLLS+0x33c2>
    {
        sx = p0[0];
 80012f0:	4b3e      	ldr	r3, [pc, #248]	@ (80013ec <NLLS+0x194>)
 80012f2:	443b      	add	r3, r7
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a40      	ldr	r2, [pc, #256]	@ (80013f8 <NLLS+0x1a0>)
 80012f8:	443a      	add	r2, r7
 80012fa:	6013      	str	r3, [r2, #0]
        sy = p0[1];
 80012fc:	4b3f      	ldr	r3, [pc, #252]	@ (80013fc <NLLS+0x1a4>)
 80012fe:	443b      	add	r3, r7
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a3f      	ldr	r2, [pc, #252]	@ (8001400 <NLLS+0x1a8>)
 8001304:	443a      	add	r2, r7
 8001306:	6013      	str	r3, [r2, #0]
        sz = p0[2];
 8001308:	4b3e      	ldr	r3, [pc, #248]	@ (8001404 <NLLS+0x1ac>)
 800130a:	443b      	add	r3, r7
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a3e      	ldr	r2, [pc, #248]	@ (8001408 <NLLS+0x1b0>)
 8001310:	443a      	add	r2, r7
 8001312:	6013      	str	r3, [r2, #0]
        bx = p0[3];
 8001314:	4b3d      	ldr	r3, [pc, #244]	@ (800140c <NLLS+0x1b4>)
 8001316:	443b      	add	r3, r7
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a3d      	ldr	r2, [pc, #244]	@ (8001410 <NLLS+0x1b8>)
 800131c:	443a      	add	r2, r7
 800131e:	6013      	str	r3, [r2, #0]
        by = p0[4];
 8001320:	4b3c      	ldr	r3, [pc, #240]	@ (8001414 <NLLS+0x1bc>)
 8001322:	443b      	add	r3, r7
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a3c      	ldr	r2, [pc, #240]	@ (8001418 <NLLS+0x1c0>)
 8001328:	443a      	add	r2, r7
 800132a:	6013      	str	r3, [r2, #0]
        bz = p0[5];
 800132c:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <NLLS+0x1c4>)
 800132e:	443b      	add	r3, r7
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a3b      	ldr	r2, [pc, #236]	@ (8001420 <NLLS+0x1c8>)
 8001334:	443a      	add	r2, r7
 8001336:	6013      	str	r3, [r2, #0]
        rho = p0[6];
 8001338:	4b3a      	ldr	r3, [pc, #232]	@ (8001424 <NLLS+0x1cc>)
 800133a:	443b      	add	r3, r7
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a3a      	ldr	r2, [pc, #232]	@ (8001428 <NLLS+0x1d0>)
 8001340:	443a      	add	r2, r7
 8001342:	6013      	str	r3, [r2, #0]
        phi = p0[7];
 8001344:	4b39      	ldr	r3, [pc, #228]	@ (800142c <NLLS+0x1d4>)
 8001346:	443b      	add	r3, r7
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a39      	ldr	r2, [pc, #228]	@ (8001430 <NLLS+0x1d8>)
 800134c:	443a      	add	r2, r7
 800134e:	6013      	str	r3, [r2, #0]
        lambida = p0[8];
 8001350:	4b38      	ldr	r3, [pc, #224]	@ (8001434 <NLLS+0x1dc>)
 8001352:	443b      	add	r3, r7
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a38      	ldr	r2, [pc, #224]	@ (8001438 <NLLS+0x1e0>)
 8001358:	443a      	add	r2, r7
 800135a:	6013      	str	r3, [r2, #0]

        sin_phi = sinf(phi);
 800135c:	4b34      	ldr	r3, [pc, #208]	@ (8001430 <NLLS+0x1d8>)
 800135e:	443b      	add	r3, r7
 8001360:	ed93 0a00 	vldr	s0, [r3]
 8001364:	f011 f914 	bl	8012590 <sinf>
 8001368:	4b34      	ldr	r3, [pc, #208]	@ (800143c <NLLS+0x1e4>)
 800136a:	443b      	add	r3, r7
 800136c:	ed83 0a00 	vstr	s0, [r3]
        sin_rho = sinf(rho);
 8001370:	4b2d      	ldr	r3, [pc, #180]	@ (8001428 <NLLS+0x1d0>)
 8001372:	443b      	add	r3, r7
 8001374:	ed93 0a00 	vldr	s0, [r3]
 8001378:	f011 f90a 	bl	8012590 <sinf>
 800137c:	4b30      	ldr	r3, [pc, #192]	@ (8001440 <NLLS+0x1e8>)
 800137e:	443b      	add	r3, r7
 8001380:	ed83 0a00 	vstr	s0, [r3]
        sin_lambda = sinf(lambida);
 8001384:	4b2c      	ldr	r3, [pc, #176]	@ (8001438 <NLLS+0x1e0>)
 8001386:	443b      	add	r3, r7
 8001388:	ed93 0a00 	vldr	s0, [r3]
 800138c:	f011 f900 	bl	8012590 <sinf>
 8001390:	4b2c      	ldr	r3, [pc, #176]	@ (8001444 <NLLS+0x1ec>)
 8001392:	443b      	add	r3, r7
 8001394:	ed83 0a00 	vstr	s0, [r3]
        cos_phi = cosf(phi);
 8001398:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <NLLS+0x1d8>)
 800139a:	443b      	add	r3, r7
 800139c:	ed93 0a00 	vldr	s0, [r3]
 80013a0:	f011 f8aa 	bl	80124f8 <cosf>
 80013a4:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <NLLS+0x1f0>)
 80013a6:	443b      	add	r3, r7
 80013a8:	ed83 0a00 	vstr	s0, [r3]
        cos_rho = cosf(rho);
 80013ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <NLLS+0x1d0>)
 80013ae:	443b      	add	r3, r7
 80013b0:	ed93 0a00 	vldr	s0, [r3]
 80013b4:	f011 f8a0 	bl	80124f8 <cosf>
 80013b8:	4b24      	ldr	r3, [pc, #144]	@ (800144c <NLLS+0x1f4>)
 80013ba:	443b      	add	r3, r7
 80013bc:	ed83 0a00 	vstr	s0, [r3]
        cos_lambda = cosf(lambida);
 80013c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <NLLS+0x1e0>)
 80013c2:	443b      	add	r3, r7
 80013c4:	ed93 0a00 	vldr	s0, [r3]
 80013c8:	f011 f896 	bl	80124f8 <cosf>
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <NLLS+0x1f8>)
 80013ce:	443b      	add	r3, r7
 80013d0:	ed83 0a00 	vstr	s0, [r3]

        for(int i=0; i < tam; i++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001454 <NLLS+0x1fc>)
 80013d8:	443a      	add	r2, r7
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	f002 be56 	b.w	800408c <NLLS+0x2e34>
 80013e0:	00016fe7 	.word	0x00016fe7
 80013e4:	00016fe6 	.word	0x00016fe6
 80013e8:	08013098 	.word	0x08013098
 80013ec:	00016f48 	.word	0x00016f48
 80013f0:	00016fb4 	.word	0x00016fb4
 80013f4:	00015fe8 	.word	0x00015fe8
 80013f8:	00016fe0 	.word	0x00016fe0
 80013fc:	00016f4c 	.word	0x00016f4c
 8001400:	00016fdc 	.word	0x00016fdc
 8001404:	00016f50 	.word	0x00016f50
 8001408:	00016fd8 	.word	0x00016fd8
 800140c:	00016f54 	.word	0x00016f54
 8001410:	00016fd4 	.word	0x00016fd4
 8001414:	00016f58 	.word	0x00016f58
 8001418:	00016fd0 	.word	0x00016fd0
 800141c:	00016f5c 	.word	0x00016f5c
 8001420:	00016fcc 	.word	0x00016fcc
 8001424:	00016f60 	.word	0x00016f60
 8001428:	00016fc8 	.word	0x00016fc8
 800142c:	00016f64 	.word	0x00016f64
 8001430:	00016fc4 	.word	0x00016fc4
 8001434:	00016f68 	.word	0x00016f68
 8001438:	00016fc0 	.word	0x00016fc0
 800143c:	00016f84 	.word	0x00016f84
 8001440:	00016f80 	.word	0x00016f80
 8001444:	00016f7c 	.word	0x00016f7c
 8001448:	00016f78 	.word	0x00016f78
 800144c:	00016f74 	.word	0x00016f74
 8001450:	00016f70 	.word	0x00016f70
 8001454:	00016fb0 	.word	0x00016fb0
        {
            f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 8001458:	4bbf      	ldr	r3, [pc, #764]	@ (8001758 <NLLS+0x500>)
 800145a:	443b      	add	r3, r7
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001464:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	4413      	add	r3, r2
 800146c:	ed93 7a00 	vldr	s14, [r3]
 8001470:	4bba      	ldr	r3, [pc, #744]	@ (800175c <NLLS+0x504>)
 8001472:	443b      	add	r3, r7
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ee37 7a67 	vsub.f32	s14, s14, s15
 800147c:	4bb6      	ldr	r3, [pc, #728]	@ (8001758 <NLLS+0x500>)
 800147e:	443b      	add	r3, r7
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001488:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	4413      	add	r3, r2
 8001490:	edd3 6a00 	vldr	s13, [r3]
 8001494:	4bb1      	ldr	r3, [pc, #708]	@ (800175c <NLLS+0x504>)
 8001496:	443b      	add	r3, r7
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014a0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014a4:	4bae      	ldr	r3, [pc, #696]	@ (8001760 <NLLS+0x508>)
 80014a6:	443b      	add	r3, r7
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014b4:	4ba8      	ldr	r3, [pc, #672]	@ (8001758 <NLLS+0x500>)
 80014b6:	443b      	add	r3, r7
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80014c0:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	edd3 6a00 	vldr	s13, [r3]
 80014cc:	4ba5      	ldr	r3, [pc, #660]	@ (8001764 <NLLS+0x50c>)
 80014ce:	443b      	add	r3, r7
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014d8:	4ba1      	ldr	r3, [pc, #644]	@ (8001760 <NLLS+0x508>)
 80014da:	443b      	add	r3, r7
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014e4:	4ba0      	ldr	r3, [pc, #640]	@ (8001768 <NLLS+0x510>)
 80014e6:	443b      	add	r3, r7
 80014e8:	ed93 6a00 	vldr	s12, [r3]
 80014ec:	4b9f      	ldr	r3, [pc, #636]	@ (800176c <NLLS+0x514>)
 80014ee:	443b      	add	r3, r7
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80014f8:	4b97      	ldr	r3, [pc, #604]	@ (8001758 <NLLS+0x500>)
 80014fa:	443b      	add	r3, r7
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001504:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	4413      	add	r3, r2
 800150c:	edd3 5a00 	vldr	s11, [r3]
 8001510:	4b92      	ldr	r3, [pc, #584]	@ (800175c <NLLS+0x504>)
 8001512:	443b      	add	r3, r7
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800151c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001520:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001524:	4b8c      	ldr	r3, [pc, #560]	@ (8001758 <NLLS+0x500>)
 8001526:	443b      	add	r3, r7
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001530:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	4413      	add	r3, r2
 8001538:	ed93 6a00 	vldr	s12, [r3]
 800153c:	4b89      	ldr	r3, [pc, #548]	@ (8001764 <NLLS+0x50c>)
 800153e:	443b      	add	r3, r7
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001548:	4b85      	ldr	r3, [pc, #532]	@ (8001760 <NLLS+0x508>)
 800154a:	443b      	add	r3, r7
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001554:	4b84      	ldr	r3, [pc, #528]	@ (8001768 <NLLS+0x510>)
 8001556:	443b      	add	r3, r7
 8001558:	edd3 5a00 	vldr	s11, [r3]
 800155c:	4b83      	ldr	r3, [pc, #524]	@ (800176c <NLLS+0x514>)
 800155e:	443b      	add	r3, r7
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001568:	4b7b      	ldr	r3, [pc, #492]	@ (8001758 <NLLS+0x500>)
 800156a:	443b      	add	r3, r7
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001574:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	4413      	add	r3, r2
 800157c:	ed93 5a00 	vldr	s10, [r3]
 8001580:	4b76      	ldr	r3, [pc, #472]	@ (800175c <NLLS+0x504>)
 8001582:	443b      	add	r3, r7
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	ee75 7a67 	vsub.f32	s15, s10, s15
 800158c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001590:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001594:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001598:	4b71      	ldr	r3, [pc, #452]	@ (8001760 <NLLS+0x508>)
 800159a:	443b      	add	r3, r7
 800159c:	edd3 6a00 	vldr	s13, [r3]
 80015a0:	4b71      	ldr	r3, [pc, #452]	@ (8001768 <NLLS+0x510>)
 80015a2:	443b      	add	r3, r7
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015ac:	4b70      	ldr	r3, [pc, #448]	@ (8001770 <NLLS+0x518>)
 80015ae:	443b      	add	r3, r7
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015b8:	4b69      	ldr	r3, [pc, #420]	@ (8001760 <NLLS+0x508>)
 80015ba:	443b      	add	r3, r7
 80015bc:	edd3 5a00 	vldr	s11, [r3]
 80015c0:	4b69      	ldr	r3, [pc, #420]	@ (8001768 <NLLS+0x510>)
 80015c2:	443b      	add	r3, r7
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80015cc:	4b68      	ldr	r3, [pc, #416]	@ (8001770 <NLLS+0x518>)
 80015ce:	443b      	add	r3, r7
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001760 <NLLS+0x508>)
 80015e6:	443b      	add	r3, r7
 80015e8:	edd3 6a00 	vldr	s13, [r3]
 80015ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001768 <NLLS+0x510>)
 80015ee:	443b      	add	r3, r7
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001770 <NLLS+0x518>)
 80015fa:	443b      	add	r3, r7
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001604:	4b54      	ldr	r3, [pc, #336]	@ (8001758 <NLLS+0x500>)
 8001606:	443b      	add	r3, r7
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001610:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	4413      	add	r3, r2
 8001618:	ed93 6a00 	vldr	s12, [r3]
 800161c:	4b55      	ldr	r3, [pc, #340]	@ (8001774 <NLLS+0x51c>)
 800161e:	443b      	add	r3, r7
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001628:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800162c:	4b4c      	ldr	r3, [pc, #304]	@ (8001760 <NLLS+0x508>)
 800162e:	443b      	add	r3, r7
 8001630:	ed93 6a00 	vldr	s12, [r3]
 8001634:	4b50      	ldr	r3, [pc, #320]	@ (8001778 <NLLS+0x520>)
 8001636:	443b      	add	r3, r7
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001640:	4b4e      	ldr	r3, [pc, #312]	@ (800177c <NLLS+0x524>)
 8001642:	443b      	add	r3, r7
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee26 6a27 	vmul.f32	s12, s12, s15
 800164c:	4b42      	ldr	r3, [pc, #264]	@ (8001758 <NLLS+0x500>)
 800164e:	443b      	add	r3, r7
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001658:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	4413      	add	r3, r2
 8001660:	edd3 5a00 	vldr	s11, [r3]
 8001664:	4b3f      	ldr	r3, [pc, #252]	@ (8001764 <NLLS+0x50c>)
 8001666:	443b      	add	r3, r7
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001670:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001674:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001678:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <NLLS+0x510>)
 800167a:	443b      	add	r3, r7
 800167c:	ed93 6a00 	vldr	s12, [r3]
 8001680:	4b3d      	ldr	r3, [pc, #244]	@ (8001778 <NLLS+0x520>)
 8001682:	443b      	add	r3, r7
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	ee26 6a27 	vmul.f32	s12, s12, s15
 800168c:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <NLLS+0x524>)
 800168e:	443b      	add	r3, r7
 8001690:	edd3 5a00 	vldr	s11, [r3]
 8001694:	4b35      	ldr	r3, [pc, #212]	@ (800176c <NLLS+0x514>)
 8001696:	443b      	add	r3, r7
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016a0:	4b33      	ldr	r3, [pc, #204]	@ (8001770 <NLLS+0x518>)
 80016a2:	443b      	add	r3, r7
 80016a4:	ed93 5a00 	vldr	s10, [r3]
 80016a8:	4b35      	ldr	r3, [pc, #212]	@ (8001780 <NLLS+0x528>)
 80016aa:	443b      	add	r3, r7
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ee25 5a27 	vmul.f32	s10, s10, s15
 80016b4:	4b33      	ldr	r3, [pc, #204]	@ (8001784 <NLLS+0x52c>)
 80016b6:	443b      	add	r3, r7
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	ee65 7a27 	vmul.f32	s15, s10, s15
 80016c0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80016c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016c8:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <NLLS+0x500>)
 80016ca:	443b      	add	r3, r7
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80016d4:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	edd3 5a00 	vldr	s11, [r3]
 80016e0:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <NLLS+0x504>)
 80016e2:	443b      	add	r3, r7
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80016ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <NLLS+0x508>)
 80016f6:	443b      	add	r3, r7
 80016f8:	ed93 6a00 	vldr	s12, [r3]
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <NLLS+0x510>)
 80016fe:	443b      	add	r3, r7
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <NLLS+0x518>)
 800170a:	443b      	add	r3, r7
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <NLLS+0x500>)
 8001716:	443b      	add	r3, r7
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001720:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	4413      	add	r3, r2
 8001728:	edd3 5a00 	vldr	s11, [r3]
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <NLLS+0x51c>)
 800172e:	443b      	add	r3, r7
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001738:	ee26 6a27 	vmul.f32	s12, s12, s15
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <NLLS+0x508>)
 800173e:	443b      	add	r3, r7
 8001740:	edd3 5a00 	vldr	s11, [r3]
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <NLLS+0x520>)
 8001746:	443b      	add	r3, r7
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001750:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <NLLS+0x524>)
 8001752:	443b      	add	r3, r7
 8001754:	e018      	b.n	8001788 <NLLS+0x530>
 8001756:	bf00      	nop
 8001758:	00016fb0 	.word	0x00016fb0
 800175c:	00016fd4 	.word	0x00016fd4
 8001760:	00016fe0 	.word	0x00016fe0
 8001764:	00016fd0 	.word	0x00016fd0
 8001768:	00016fdc 	.word	0x00016fdc
 800176c:	00016f80 	.word	0x00016f80
 8001770:	00016f74 	.word	0x00016f74
 8001774:	00016fcc 	.word	0x00016fcc
 8001778:	00016fd8 	.word	0x00016fd8
 800177c:	00016f7c 	.word	0x00016f7c
 8001780:	00016f84 	.word	0x00016f84
 8001784:	00016f70 	.word	0x00016f70
 8001788:	edd3 7a00 	vldr	s15, [r3]
 800178c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001790:	4bbd      	ldr	r3, [pc, #756]	@ (8001a88 <NLLS+0x830>)
 8001792:	443b      	add	r3, r7
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800179c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	ed93 5a00 	vldr	s10, [r3]
 80017a8:	4bb8      	ldr	r3, [pc, #736]	@ (8001a8c <NLLS+0x834>)
 80017aa:	443b      	add	r3, r7
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ee75 7a67 	vsub.f32	s15, s10, s15
 80017b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017b8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017bc:	4bb4      	ldr	r3, [pc, #720]	@ (8001a90 <NLLS+0x838>)
 80017be:	443b      	add	r3, r7
 80017c0:	edd3 5a00 	vldr	s11, [r3]
 80017c4:	4bb3      	ldr	r3, [pc, #716]	@ (8001a94 <NLLS+0x83c>)
 80017c6:	443b      	add	r3, r7
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80017d0:	4bb1      	ldr	r3, [pc, #708]	@ (8001a98 <NLLS+0x840>)
 80017d2:	443b      	add	r3, r7
 80017d4:	ed93 5a00 	vldr	s10, [r3]
 80017d8:	4bb0      	ldr	r3, [pc, #704]	@ (8001a9c <NLLS+0x844>)
 80017da:	443b      	add	r3, r7
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee25 5a27 	vmul.f32	s10, s10, s15
 80017e4:	4bae      	ldr	r3, [pc, #696]	@ (8001aa0 <NLLS+0x848>)
 80017e6:	443b      	add	r3, r7
 80017e8:	edd3 4a00 	vldr	s9, [r3]
 80017ec:	4bad      	ldr	r3, [pc, #692]	@ (8001aa4 <NLLS+0x84c>)
 80017ee:	443b      	add	r3, r7
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80017f8:	4bab      	ldr	r3, [pc, #684]	@ (8001aa8 <NLLS+0x850>)
 80017fa:	443b      	add	r3, r7
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8001804:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001808:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800180c:	4b9e      	ldr	r3, [pc, #632]	@ (8001a88 <NLLS+0x830>)
 800180e:	443b      	add	r3, r7
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001818:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	4413      	add	r3, r2
 8001820:	ed93 5a00 	vldr	s10, [r3]
 8001824:	4ba1      	ldr	r3, [pc, #644]	@ (8001aac <NLLS+0x854>)
 8001826:	443b      	add	r3, r7
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001830:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001834:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001838:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800183c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ab0 <NLLS+0x858>)
 800183e:	443b      	add	r3, r7
 8001840:	edd3 6a00 	vldr	s13, [r3]
 8001844:	4b92      	ldr	r3, [pc, #584]	@ (8001a90 <NLLS+0x838>)
 8001846:	443b      	add	r3, r7
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001850:	4b90      	ldr	r3, [pc, #576]	@ (8001a94 <NLLS+0x83c>)
 8001852:	443b      	add	r3, r7
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800185c:	4b90      	ldr	r3, [pc, #576]	@ (8001aa0 <NLLS+0x848>)
 800185e:	443b      	add	r3, r7
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001868:	4b92      	ldr	r3, [pc, #584]	@ (8001ab4 <NLLS+0x85c>)
 800186a:	443b      	add	r3, r7
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001874:	4b8c      	ldr	r3, [pc, #560]	@ (8001aa8 <NLLS+0x850>)
 8001876:	443b      	add	r3, r7
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001880:	4b8b      	ldr	r3, [pc, #556]	@ (8001ab0 <NLLS+0x858>)
 8001882:	443b      	add	r3, r7
 8001884:	edd3 5a00 	vldr	s11, [r3]
 8001888:	4b81      	ldr	r3, [pc, #516]	@ (8001a90 <NLLS+0x838>)
 800188a:	443b      	add	r3, r7
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001894:	4b7f      	ldr	r3, [pc, #508]	@ (8001a94 <NLLS+0x83c>)
 8001896:	443b      	add	r3, r7
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80018a0:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa0 <NLLS+0x848>)
 80018a2:	443b      	add	r3, r7
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80018ac:	4b81      	ldr	r3, [pc, #516]	@ (8001ab4 <NLLS+0x85c>)
 80018ae:	443b      	add	r3, r7
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80018b8:	4b7b      	ldr	r3, [pc, #492]	@ (8001aa8 <NLLS+0x850>)
 80018ba:	443b      	add	r3, r7
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018c8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80018cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d0:	4b79      	ldr	r3, [pc, #484]	@ (8001ab8 <NLLS+0x860>)
 80018d2:	443b      	add	r3, r7
 80018d4:	f2a3 42b4 	subw	r2, r3, #1204	@ 0x4b4
 80018d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001a88 <NLLS+0x830>)
 80018da:	443b      	add	r3, r7
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	edc3 7a00 	vstr	s15, [r3]

            e[i] = (Be[i] * Be[i]) - f[i];
 80018e6:	4b75      	ldr	r3, [pc, #468]	@ (8001abc <NLLS+0x864>)
 80018e8:	443b      	add	r3, r7
 80018ea:	f5a3 72fe 	sub.w	r2, r3, #508	@ 0x1fc
 80018ee:	4b66      	ldr	r3, [pc, #408]	@ (8001a88 <NLLS+0x830>)
 80018f0:	443b      	add	r3, r7
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	ed93 7a00 	vldr	s14, [r3]
 80018fc:	4b6f      	ldr	r3, [pc, #444]	@ (8001abc <NLLS+0x864>)
 80018fe:	443b      	add	r3, r7
 8001900:	f5a3 72fe 	sub.w	r2, r3, #508	@ 0x1fc
 8001904:	4b60      	ldr	r3, [pc, #384]	@ (8001a88 <NLLS+0x830>)
 8001906:	443b      	add	r3, r7
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001916:	4b68      	ldr	r3, [pc, #416]	@ (8001ab8 <NLLS+0x860>)
 8001918:	443b      	add	r3, r7
 800191a:	f2a3 42b4 	subw	r2, r3, #1204	@ 0x4b4
 800191e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a88 <NLLS+0x830>)
 8001920:	443b      	add	r3, r7
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001930:	4b63      	ldr	r3, [pc, #396]	@ (8001ac0 <NLLS+0x868>)
 8001932:	443b      	add	r3, r7
 8001934:	f5a3 7256 	sub.w	r2, r3, #856	@ 0x358
 8001938:	4b53      	ldr	r3, [pc, #332]	@ (8001a88 <NLLS+0x830>)
 800193a:	443b      	add	r3, r7
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	edc3 7a00 	vstr	s15, [r3]

            mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8001946:	4b50      	ldr	r3, [pc, #320]	@ (8001a88 <NLLS+0x830>)
 8001948:	443b      	add	r3, r7
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001952:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	4413      	add	r3, r2
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a8c <NLLS+0x834>)
 8001960:	443b      	add	r3, r7
 8001962:	ed93 7a00 	vldr	s14, [r3]
 8001966:	ee37 7a67 	vsub.f32	s14, s14, s15
 800196a:	4b51      	ldr	r3, [pc, #324]	@ (8001ab0 <NLLS+0x858>)
 800196c:	443b      	add	r3, r7
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001976:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <NLLS+0x838>)
 8001978:	443b      	add	r3, r7
 800197a:	edd3 6a00 	vldr	s13, [r3]
 800197e:	4b47      	ldr	r3, [pc, #284]	@ (8001a9c <NLLS+0x844>)
 8001980:	443b      	add	r3, r7
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800198a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a88 <NLLS+0x830>)
 800198c:	443b      	add	r3, r7
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001996:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	4413      	add	r3, r2
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	4b42      	ldr	r3, [pc, #264]	@ (8001aac <NLLS+0x854>)
 80019a4:	443b      	add	r3, r7
 80019a6:	ed93 6a00 	vldr	s12, [r3]
 80019aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019ba:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <NLLS+0x830>)
 80019bc:	443b      	add	r3, r7
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80019c6:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	4413      	add	r3, r2
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a8c <NLLS+0x834>)
 80019d4:	443b      	add	r3, r7
 80019d6:	edd3 6a00 	vldr	s13, [r3]
 80019da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019e2:	4b33      	ldr	r3, [pc, #204]	@ (8001ab0 <NLLS+0x858>)
 80019e4:	443b      	add	r3, r7
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019ee:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <NLLS+0x838>)
 80019f0:	443b      	add	r3, r7
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fa:	4b25      	ldr	r3, [pc, #148]	@ (8001a90 <NLLS+0x838>)
 80019fc:	443b      	add	r3, r7
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a06:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <NLLS+0x848>)
 8001a08:	443b      	add	r3, r7
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a12:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <NLLS+0x848>)
 8001a14:	443b      	add	r3, r7
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <NLLS+0x830>)
 8001a24:	443b      	add	r3, r7
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001a2e:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <NLLS+0x834>)
 8001a3c:	443b      	add	r3, r7
 8001a3e:	edd3 6a00 	vldr	s13, [r3]
 8001a42:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a46:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <NLLS+0x858>)
 8001a48:	443b      	add	r3, r7
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <NLLS+0x838>)
 8001a54:	443b      	add	r3, r7
 8001a56:	ed93 6a00 	vldr	s12, [r3]
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <NLLS+0x844>)
 8001a5c:	443b      	add	r3, r7
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a66:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <NLLS+0x830>)
 8001a68:	443b      	add	r3, r7
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001a72:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <NLLS+0x854>)
 8001a80:	443b      	add	r3, r7
 8001a82:	edd3 5a00 	vldr	s11, [r3]
 8001a86:	e01d      	b.n	8001ac4 <NLLS+0x86c>
 8001a88:	00016fb0 	.word	0x00016fb0
 8001a8c:	00016fd0 	.word	0x00016fd0
 8001a90:	00016fdc 	.word	0x00016fdc
 8001a94:	00016fd8 	.word	0x00016fd8
 8001a98:	00016f7c 	.word	0x00016f7c
 8001a9c:	00016f80 	.word	0x00016f80
 8001aa0:	00016f74 	.word	0x00016f74
 8001aa4:	00016f84 	.word	0x00016f84
 8001aa8:	00016f70 	.word	0x00016f70
 8001aac:	00016fd4 	.word	0x00016fd4
 8001ab0:	00016fe0 	.word	0x00016fe0
 8001ab4:	00016f78 	.word	0x00016f78
 8001ab8:	00013fe8 	.word	0x00013fe8
 8001abc:	00015fe8 	.word	0x00015fe8
 8001ac0:	00014fe8 	.word	0x00014fe8
 8001ac4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001ac8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001acc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ad0:	4bc0      	ldr	r3, [pc, #768]	@ (8001dd4 <NLLS+0xb7c>)
 8001ad2:	443b      	add	r3, r7
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001adc:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	4bbb      	ldr	r3, [pc, #748]	@ (8001dd8 <NLLS+0xb80>)
 8001aea:	443b      	add	r3, r7
 8001aec:	ed93 6a00 	vldr	s12, [r3]
 8001af0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001af4:	4bb9      	ldr	r3, [pc, #740]	@ (8001ddc <NLLS+0xb84>)
 8001af6:	443b      	add	r3, r7
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b00:	4bb7      	ldr	r3, [pc, #732]	@ (8001de0 <NLLS+0xb88>)
 8001b02:	443b      	add	r3, r7
 8001b04:	edd3 5a00 	vldr	s11, [r3]
 8001b08:	4bb6      	ldr	r3, [pc, #728]	@ (8001de4 <NLLS+0xb8c>)
 8001b0a:	443b      	add	r3, r7
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001b14:	4baf      	ldr	r3, [pc, #700]	@ (8001dd4 <NLLS+0xb7c>)
 8001b16:	443b      	add	r3, r7
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001b20:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	4bae      	ldr	r3, [pc, #696]	@ (8001de8 <NLLS+0xb90>)
 8001b2e:	443b      	add	r3, r7
 8001b30:	ed93 5a00 	vldr	s10, [r3]
 8001b34:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001b38:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b3c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b44:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001b48:	4ba4      	ldr	r3, [pc, #656]	@ (8001ddc <NLLS+0xb84>)
 8001b4a:	443b      	add	r3, r7
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001b54:	4ba1      	ldr	r3, [pc, #644]	@ (8001ddc <NLLS+0xb84>)
 8001b56:	443b      	add	r3, r7
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b60:	4b9f      	ldr	r3, [pc, #636]	@ (8001de0 <NLLS+0xb88>)
 8001b62:	443b      	add	r3, r7
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b6c:	4b9c      	ldr	r3, [pc, #624]	@ (8001de0 <NLLS+0xb88>)
 8001b6e:	443b      	add	r3, r7
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b78:	4b9c      	ldr	r3, [pc, #624]	@ (8001dec <NLLS+0xb94>)
 8001b7a:	443b      	add	r3, r7
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b84:	4b99      	ldr	r3, [pc, #612]	@ (8001dec <NLLS+0xb94>)
 8001b86:	443b      	add	r3, r7
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b90:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001b94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b98:	4b8e      	ldr	r3, [pc, #568]	@ (8001dd4 <NLLS+0xb7c>)
 8001b9a:	443b      	add	r3, r7
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001ba4:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	4b8d      	ldr	r3, [pc, #564]	@ (8001de8 <NLLS+0xb90>)
 8001bb2:	443b      	add	r3, r7
 8001bb4:	edd3 6a00 	vldr	s13, [r3]
 8001bb8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bbc:	4b85      	ldr	r3, [pc, #532]	@ (8001dd4 <NLLS+0xb7c>)
 8001bbe:	443b      	add	r3, r7
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001bc8:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	4b84      	ldr	r3, [pc, #528]	@ (8001de8 <NLLS+0xb90>)
 8001bd6:	443b      	add	r3, r7
 8001bd8:	ed93 6a00 	vldr	s12, [r3]
 8001bdc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be4:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001be8:	4b7c      	ldr	r3, [pc, #496]	@ (8001ddc <NLLS+0xb84>)
 8001bea:	443b      	add	r3, r7
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001bf4:	4b79      	ldr	r3, [pc, #484]	@ (8001ddc <NLLS+0xb84>)
 8001bf6:	443b      	add	r3, r7
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c00:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c08:	4b75      	ldr	r3, [pc, #468]	@ (8001de0 <NLLS+0xb88>)
 8001c0a:	443b      	add	r3, r7
 8001c0c:	edd3 6a00 	vldr	s13, [r3]
 8001c10:	4b77      	ldr	r3, [pc, #476]	@ (8001df0 <NLLS+0xb98>)
 8001c12:	443b      	add	r3, r7
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c1c:	4b75      	ldr	r3, [pc, #468]	@ (8001df4 <NLLS+0xb9c>)
 8001c1e:	443b      	add	r3, r7
 8001c20:	ed93 6a00 	vldr	s12, [r3]
 8001c24:	4b6f      	ldr	r3, [pc, #444]	@ (8001de4 <NLLS+0xb8c>)
 8001c26:	443b      	add	r3, r7
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c30:	4b71      	ldr	r3, [pc, #452]	@ (8001df8 <NLLS+0xba0>)
 8001c32:	443b      	add	r3, r7
 8001c34:	edd3 5a00 	vldr	s11, [r3]
 8001c38:	4b6c      	ldr	r3, [pc, #432]	@ (8001dec <NLLS+0xb94>)
 8001c3a:	443b      	add	r3, r7
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001c44:	4b6d      	ldr	r3, [pc, #436]	@ (8001dfc <NLLS+0xba4>)
 8001c46:	443b      	add	r3, r7
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c50:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c58:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd4 <NLLS+0xb7c>)
 8001c5a:	443b      	add	r3, r7
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001c64:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	4b5d      	ldr	r3, [pc, #372]	@ (8001de8 <NLLS+0xb90>)
 8001c72:	443b      	add	r3, r7
 8001c74:	ed93 6a00 	vldr	s12, [r3]
 8001c78:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c80:	4b56      	ldr	r3, [pc, #344]	@ (8001ddc <NLLS+0xb84>)
 8001c82:	443b      	add	r3, r7
 8001c84:	ed93 6a00 	vldr	s12, [r3]
 8001c88:	4b55      	ldr	r3, [pc, #340]	@ (8001de0 <NLLS+0xb88>)
 8001c8a:	443b      	add	r3, r7
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c94:	4b55      	ldr	r3, [pc, #340]	@ (8001dec <NLLS+0xb94>)
 8001c96:	443b      	add	r3, r7
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd4 <NLLS+0xb7c>)
 8001ca2:	443b      	add	r3, r7
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001cac:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	4b51      	ldr	r3, [pc, #324]	@ (8001e00 <NLLS+0xba8>)
 8001cba:	443b      	add	r3, r7
 8001cbc:	edd3 5a00 	vldr	s11, [r3]
 8001cc0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001cc4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cc8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ccc:	4b43      	ldr	r3, [pc, #268]	@ (8001ddc <NLLS+0xb84>)
 8001cce:	443b      	add	r3, r7
 8001cd0:	ed93 6a00 	vldr	s12, [r3]
 8001cd4:	4b46      	ldr	r3, [pc, #280]	@ (8001df0 <NLLS+0xb98>)
 8001cd6:	443b      	add	r3, r7
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ce0:	4b44      	ldr	r3, [pc, #272]	@ (8001df4 <NLLS+0xb9c>)
 8001ce2:	443b      	add	r3, r7
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cec:	4b39      	ldr	r3, [pc, #228]	@ (8001dd4 <NLLS+0xb7c>)
 8001cee:	443b      	add	r3, r7
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001cf8:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <NLLS+0xb80>)
 8001d06:	443b      	add	r3, r7
 8001d08:	edd3 5a00 	vldr	s11, [r3]
 8001d0c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001d10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d18:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <NLLS+0xb88>)
 8001d1a:	443b      	add	r3, r7
 8001d1c:	ed93 6a00 	vldr	s12, [r3]
 8001d20:	4b33      	ldr	r3, [pc, #204]	@ (8001df0 <NLLS+0xb98>)
 8001d22:	443b      	add	r3, r7
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d2c:	4b31      	ldr	r3, [pc, #196]	@ (8001df4 <NLLS+0xb9c>)
 8001d2e:	443b      	add	r3, r7
 8001d30:	edd3 5a00 	vldr	s11, [r3]
 8001d34:	4b2b      	ldr	r3, [pc, #172]	@ (8001de4 <NLLS+0xb8c>)
 8001d36:	443b      	add	r3, r7
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001d40:	4b2d      	ldr	r3, [pc, #180]	@ (8001df8 <NLLS+0xba0>)
 8001d42:	443b      	add	r3, r7
 8001d44:	ed93 5a00 	vldr	s10, [r3]
 8001d48:	4b28      	ldr	r3, [pc, #160]	@ (8001dec <NLLS+0xb94>)
 8001d4a:	443b      	add	r3, r7
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001d54:	4b29      	ldr	r3, [pc, #164]	@ (8001dfc <NLLS+0xba4>)
 8001d56:	443b      	add	r3, r7
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001d60:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001d64:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <NLLS+0xb7c>)
 8001d6a:	443b      	add	r3, r7
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001d74:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <NLLS+0xb90>)
 8001d82:	443b      	add	r3, r7
 8001d84:	edd3 5a00 	vldr	s11, [r3]
 8001d88:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001d8c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <NLLS+0xb84>)
 8001d92:	443b      	add	r3, r7
 8001d94:	edd3 5a00 	vldr	s11, [r3]
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <NLLS+0xb88>)
 8001d9a:	443b      	add	r3, r7
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <NLLS+0xb94>)
 8001da6:	443b      	add	r3, r7
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <NLLS+0xb7c>)
 8001db2:	443b      	add	r3, r7
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001dbc:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <NLLS+0xba8>)
 8001dca:	443b      	add	r3, r7
 8001dcc:	ed93 5a00 	vldr	s10, [r3]
 8001dd0:	e018      	b.n	8001e04 <NLLS+0xbac>
 8001dd2:	bf00      	nop
 8001dd4:	00016fb0 	.word	0x00016fb0
 8001dd8:	00016fd0 	.word	0x00016fd0
 8001ddc:	00016fe0 	.word	0x00016fe0
 8001de0:	00016fdc 	.word	0x00016fdc
 8001de4:	00016f80 	.word	0x00016f80
 8001de8:	00016fd4 	.word	0x00016fd4
 8001dec:	00016f74 	.word	0x00016f74
 8001df0:	00016fd8 	.word	0x00016fd8
 8001df4:	00016f7c 	.word	0x00016f7c
 8001df8:	00016f70 	.word	0x00016f70
 8001dfc:	00016f84 	.word	0x00016f84
 8001e00:	00016fcc 	.word	0x00016fcc
 8001e04:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001e08:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e0c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e10:	4bc0      	ldr	r3, [pc, #768]	@ (8002114 <NLLS+0xebc>)
 8001e12:	443b      	add	r3, r7
 8001e14:	edd3 5a00 	vldr	s11, [r3]
 8001e18:	4bbf      	ldr	r3, [pc, #764]	@ (8002118 <NLLS+0xec0>)
 8001e1a:	443b      	add	r3, r7
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001e24:	4bbd      	ldr	r3, [pc, #756]	@ (800211c <NLLS+0xec4>)
 8001e26:	443b      	add	r3, r7
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001e30:	4bbb      	ldr	r3, [pc, #748]	@ (8002120 <NLLS+0xec8>)
 8001e32:	443b      	add	r3, r7
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001e3c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	4bb6      	ldr	r3, [pc, #728]	@ (8002124 <NLLS+0xecc>)
 8001e4a:	443b      	add	r3, r7
 8001e4c:	ed93 5a00 	vldr	s10, [r3]
 8001e50:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001e54:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e58:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e60:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001e64:	4bab      	ldr	r3, [pc, #684]	@ (8002114 <NLLS+0xebc>)
 8001e66:	443b      	add	r3, r7
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001e70:	4ba8      	ldr	r3, [pc, #672]	@ (8002114 <NLLS+0xebc>)
 8001e72:	443b      	add	r3, r7
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e7c:	4baa      	ldr	r3, [pc, #680]	@ (8002128 <NLLS+0xed0>)
 8001e7e:	443b      	add	r3, r7
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e88:	4ba7      	ldr	r3, [pc, #668]	@ (8002128 <NLLS+0xed0>)
 8001e8a:	443b      	add	r3, r7
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e94:	4ba0      	ldr	r3, [pc, #640]	@ (8002118 <NLLS+0xec0>)
 8001e96:	443b      	add	r3, r7
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ea0:	4b9d      	ldr	r3, [pc, #628]	@ (8002118 <NLLS+0xec0>)
 8001ea2:	443b      	add	r3, r7
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eac:	4b9f      	ldr	r3, [pc, #636]	@ (800212c <NLLS+0xed4>)
 8001eae:	443b      	add	r3, r7
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eb8:	4b9c      	ldr	r3, [pc, #624]	@ (800212c <NLLS+0xed4>)
 8001eba:	443b      	add	r3, r7
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec4:	4b9a      	ldr	r3, [pc, #616]	@ (8002130 <NLLS+0xed8>)
 8001ec6:	443b      	add	r3, r7
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
 8001ecc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ed0:	4b97      	ldr	r3, [pc, #604]	@ (8002130 <NLLS+0xed8>)
 8001ed2:	443b      	add	r3, r7
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001edc:	4b95      	ldr	r3, [pc, #596]	@ (8002134 <NLLS+0xedc>)
 8001ede:	443b      	add	r3, r7
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ee8:	4b92      	ldr	r3, [pc, #584]	@ (8002134 <NLLS+0xedc>)
 8001eea:	443b      	add	r3, r7
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ef4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ef8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001efc:	4b8a      	ldr	r3, [pc, #552]	@ (8002128 <NLLS+0xed0>)
 8001efe:	443b      	add	r3, r7
 8001f00:	edd3 6a00 	vldr	s13, [r3]
 8001f04:	4b8b      	ldr	r3, [pc, #556]	@ (8002134 <NLLS+0xedc>)
 8001f06:	443b      	add	r3, r7
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f10:	4b83      	ldr	r3, [pc, #524]	@ (8002120 <NLLS+0xec8>)
 8001f12:	443b      	add	r3, r7
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001f1c:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	edd3 7a00 	vldr	s15, [r3]
 8001f28:	4b83      	ldr	r3, [pc, #524]	@ (8002138 <NLLS+0xee0>)
 8001f2a:	443b      	add	r3, r7
 8001f2c:	ed93 6a00 	vldr	s12, [r3]
 8001f30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f38:	4b77      	ldr	r3, [pc, #476]	@ (8002118 <NLLS+0xec0>)
 8001f3a:	443b      	add	r3, r7
 8001f3c:	ed93 6a00 	vldr	s12, [r3]
 8001f40:	4b76      	ldr	r3, [pc, #472]	@ (800211c <NLLS+0xec4>)
 8001f42:	443b      	add	r3, r7
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f4c:	4b74      	ldr	r3, [pc, #464]	@ (8002120 <NLLS+0xec8>)
 8001f4e:	443b      	add	r3, r7
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001f58:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	4b6f      	ldr	r3, [pc, #444]	@ (8002124 <NLLS+0xecc>)
 8001f66:	443b      	add	r3, r7
 8001f68:	edd3 5a00 	vldr	s11, [r3]
 8001f6c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001f70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f78:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002128 <NLLS+0xed0>)
 8001f7e:	443b      	add	r3, r7
 8001f80:	ed93 6a00 	vldr	s12, [r3]
 8001f84:	4b64      	ldr	r3, [pc, #400]	@ (8002118 <NLLS+0xec0>)
 8001f86:	443b      	add	r3, r7
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f90:	4b62      	ldr	r3, [pc, #392]	@ (800211c <NLLS+0xec4>)
 8001f92:	443b      	add	r3, r7
 8001f94:	edd3 5a00 	vldr	s11, [r3]
 8001f98:	4b68      	ldr	r3, [pc, #416]	@ (800213c <NLLS+0xee4>)
 8001f9a:	443b      	add	r3, r7
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001fa4:	4b61      	ldr	r3, [pc, #388]	@ (800212c <NLLS+0xed4>)
 8001fa6:	443b      	add	r3, r7
 8001fa8:	ed93 5a00 	vldr	s10, [r3]
 8001fac:	4b61      	ldr	r3, [pc, #388]	@ (8002134 <NLLS+0xedc>)
 8001fae:	443b      	add	r3, r7
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001fb8:	4b61      	ldr	r3, [pc, #388]	@ (8002140 <NLLS+0xee8>)
 8001fba:	443b      	add	r3, r7
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001fc4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001fc8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fcc:	4b54      	ldr	r3, [pc, #336]	@ (8002120 <NLLS+0xec8>)
 8001fce:	443b      	add	r3, r7
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001fd8:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	4b57      	ldr	r3, [pc, #348]	@ (8002144 <NLLS+0xeec>)
 8001fe6:	443b      	add	r3, r7
 8001fe8:	edd3 5a00 	vldr	s11, [r3]
 8001fec:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001ff0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ff4:	4b47      	ldr	r3, [pc, #284]	@ (8002114 <NLLS+0xebc>)
 8001ff6:	443b      	add	r3, r7
 8001ff8:	edd3 5a00 	vldr	s11, [r3]
 8001ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8002128 <NLLS+0xed0>)
 8001ffe:	443b      	add	r3, r7
 8002000:	edd3 7a00 	vldr	s15, [r3]
 8002004:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002008:	4b4a      	ldr	r3, [pc, #296]	@ (8002134 <NLLS+0xedc>)
 800200a:	443b      	add	r3, r7
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002014:	4b42      	ldr	r3, [pc, #264]	@ (8002120 <NLLS+0xec8>)
 8002016:	443b      	add	r3, r7
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002020:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	4413      	add	r3, r2
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <NLLS+0xee0>)
 800202e:	443b      	add	r3, r7
 8002030:	ed93 5a00 	vldr	s10, [r3]
 8002034:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002038:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800203c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002040:	4b34      	ldr	r3, [pc, #208]	@ (8002114 <NLLS+0xebc>)
 8002042:	443b      	add	r3, r7
 8002044:	edd3 5a00 	vldr	s11, [r3]
 8002048:	4b33      	ldr	r3, [pc, #204]	@ (8002118 <NLLS+0xec0>)
 800204a:	443b      	add	r3, r7
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002054:	4b31      	ldr	r3, [pc, #196]	@ (800211c <NLLS+0xec4>)
 8002056:	443b      	add	r3, r7
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002060:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <NLLS+0xec8>)
 8002062:	443b      	add	r3, r7
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800206c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	4413      	add	r3, r2
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <NLLS+0xecc>)
 800207a:	443b      	add	r3, r7
 800207c:	ed93 5a00 	vldr	s10, [r3]
 8002080:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002084:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002088:	ee76 7a67 	vsub.f32	s15, s12, s15
 800208c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002090:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <NLLS+0xebc>)
 8002092:	443b      	add	r3, r7
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800209c:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <NLLS+0xed0>)
 800209e:	443b      	add	r3, r7
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <NLLS+0xed0>)
 80020aa:	443b      	add	r3, r7
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020b4:	4b18      	ldr	r3, [pc, #96]	@ (8002118 <NLLS+0xec0>)
 80020b6:	443b      	add	r3, r7
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020c0:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <NLLS+0xec0>)
 80020c2:	443b      	add	r3, r7
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020cc:	4b17      	ldr	r3, [pc, #92]	@ (800212c <NLLS+0xed4>)
 80020ce:	443b      	add	r3, r7
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020d8:	4b14      	ldr	r3, [pc, #80]	@ (800212c <NLLS+0xed4>)
 80020da:	443b      	add	r3, r7
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020e4:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <NLLS+0xed8>)
 80020e6:	443b      	add	r3, r7
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <NLLS+0xed8>)
 80020f2:	443b      	add	r3, r7
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <NLLS+0xedc>)
 80020fe:	443b      	add	r3, r7
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002108:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <NLLS+0xedc>)
 800210a:	443b      	add	r3, r7
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	e01a      	b.n	8002148 <NLLS+0xef0>
 8002112:	bf00      	nop
 8002114:	00016fe0 	.word	0x00016fe0
 8002118:	00016fd8 	.word	0x00016fd8
 800211c:	00016f7c 	.word	0x00016f7c
 8002120:	00016fb0 	.word	0x00016fb0
 8002124:	00016fd0 	.word	0x00016fd0
 8002128:	00016fdc 	.word	0x00016fdc
 800212c:	00016f70 	.word	0x00016f70
 8002130:	00016f78 	.word	0x00016f78
 8002134:	00016f74 	.word	0x00016f74
 8002138:	00016fcc 	.word	0x00016fcc
 800213c:	00016f80 	.word	0x00016f80
 8002140:	00016f84 	.word	0x00016f84
 8002144:	00016fd4 	.word	0x00016fd4
 8002148:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800214c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002154:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8002158:	443b      	add	r3, r7
 800215a:	461a      	mov	r2, r3
 800215c:	4bbe      	ldr	r3, [pc, #760]	@ (8002458 <NLLS+0x1200>)
 800215e:	443b      	add	r3, r7
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	3bf0      	subs	r3, #240	@ 0xf0
 8002168:	edc3 7a00 	vstr	s15, [r3]

            mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 800216c:	4bba      	ldr	r3, [pc, #744]	@ (8002458 <NLLS+0x1200>)
 800216e:	443b      	add	r3, r7
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002178:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	4413      	add	r3, r2
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	4bb5      	ldr	r3, [pc, #724]	@ (800245c <NLLS+0x1204>)
 8002186:	443b      	add	r3, r7
 8002188:	ed93 7a00 	vldr	s14, [r3]
 800218c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002190:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002194:	4bb1      	ldr	r3, [pc, #708]	@ (800245c <NLLS+0x1204>)
 8002196:	443b      	add	r3, r7
 8002198:	edd3 6a00 	vldr	s13, [r3]
 800219c:	4bb0      	ldr	r3, [pc, #704]	@ (8002460 <NLLS+0x1208>)
 800219e:	443b      	add	r3, r7
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021a8:	4bae      	ldr	r3, [pc, #696]	@ (8002464 <NLLS+0x120c>)
 80021aa:	443b      	add	r3, r7
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021b4:	4bac      	ldr	r3, [pc, #688]	@ (8002468 <NLLS+0x1210>)
 80021b6:	443b      	add	r3, r7
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021c0:	4ba9      	ldr	r3, [pc, #676]	@ (8002468 <NLLS+0x1210>)
 80021c2:	443b      	add	r3, r7
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021cc:	4ba2      	ldr	r3, [pc, #648]	@ (8002458 <NLLS+0x1200>)
 80021ce:	443b      	add	r3, r7
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80021d8:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	ed93 6a00 	vldr	s12, [r3]
 80021e4:	4b9e      	ldr	r3, [pc, #632]	@ (8002460 <NLLS+0x1208>)
 80021e6:	443b      	add	r3, r7
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021f0:	4b9c      	ldr	r3, [pc, #624]	@ (8002464 <NLLS+0x120c>)
 80021f2:	443b      	add	r3, r7
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021fc:	4b9a      	ldr	r3, [pc, #616]	@ (8002468 <NLLS+0x1210>)
 80021fe:	443b      	add	r3, r7
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002208:	4b97      	ldr	r3, [pc, #604]	@ (8002468 <NLLS+0x1210>)
 800220a:	443b      	add	r3, r7
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002214:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002218:	4b90      	ldr	r3, [pc, #576]	@ (800245c <NLLS+0x1204>)
 800221a:	443b      	add	r3, r7
 800221c:	ed93 6a00 	vldr	s12, [r3]
 8002220:	4b8f      	ldr	r3, [pc, #572]	@ (8002460 <NLLS+0x1208>)
 8002222:	443b      	add	r3, r7
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	ee26 6a27 	vmul.f32	s12, s12, s15
 800222c:	4b8d      	ldr	r3, [pc, #564]	@ (8002464 <NLLS+0x120c>)
 800222e:	443b      	add	r3, r7
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002238:	4b8c      	ldr	r3, [pc, #560]	@ (800246c <NLLS+0x1214>)
 800223a:	443b      	add	r3, r7
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002244:	4b89      	ldr	r3, [pc, #548]	@ (800246c <NLLS+0x1214>)
 8002246:	443b      	add	r3, r7
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002250:	4b87      	ldr	r3, [pc, #540]	@ (8002470 <NLLS+0x1218>)
 8002252:	443b      	add	r3, r7
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee26 6a27 	vmul.f32	s12, s12, s15
 800225c:	4b84      	ldr	r3, [pc, #528]	@ (8002470 <NLLS+0x1218>)
 800225e:	443b      	add	r3, r7
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002268:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800226c:	4b7a      	ldr	r3, [pc, #488]	@ (8002458 <NLLS+0x1200>)
 800226e:	443b      	add	r3, r7
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002278:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	4413      	add	r3, r2
 8002280:	ed93 6a00 	vldr	s12, [r3]
 8002284:	4b76      	ldr	r3, [pc, #472]	@ (8002460 <NLLS+0x1208>)
 8002286:	443b      	add	r3, r7
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002290:	4b74      	ldr	r3, [pc, #464]	@ (8002464 <NLLS+0x120c>)
 8002292:	443b      	add	r3, r7
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	ee26 6a27 	vmul.f32	s12, s12, s15
 800229c:	4b73      	ldr	r3, [pc, #460]	@ (800246c <NLLS+0x1214>)
 800229e:	443b      	add	r3, r7
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022a8:	4b70      	ldr	r3, [pc, #448]	@ (800246c <NLLS+0x1214>)
 80022aa:	443b      	add	r3, r7
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022b4:	4b6e      	ldr	r3, [pc, #440]	@ (8002470 <NLLS+0x1218>)
 80022b6:	443b      	add	r3, r7
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002470 <NLLS+0x1218>)
 80022c2:	443b      	add	r3, r7
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022d0:	4b68      	ldr	r3, [pc, #416]	@ (8002474 <NLLS+0x121c>)
 80022d2:	443b      	add	r3, r7
 80022d4:	ed93 6a00 	vldr	s12, [r3]
 80022d8:	4b61      	ldr	r3, [pc, #388]	@ (8002460 <NLLS+0x1208>)
 80022da:	443b      	add	r3, r7
 80022dc:	edd3 7a00 	vldr	s15, [r3]
 80022e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022e4:	4b64      	ldr	r3, [pc, #400]	@ (8002478 <NLLS+0x1220>)
 80022e6:	443b      	add	r3, r7
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022f0:	4b62      	ldr	r3, [pc, #392]	@ (800247c <NLLS+0x1224>)
 80022f2:	443b      	add	r3, r7
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002468 <NLLS+0x1210>)
 80022fe:	443b      	add	r3, r7
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002308:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800230c:	4b52      	ldr	r3, [pc, #328]	@ (8002458 <NLLS+0x1200>)
 800230e:	443b      	add	r3, r7
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002318:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4413      	add	r3, r2
 8002320:	ed93 6a00 	vldr	s12, [r3]
 8002324:	4b4e      	ldr	r3, [pc, #312]	@ (8002460 <NLLS+0x1208>)
 8002326:	443b      	add	r3, r7
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002330:	4b51      	ldr	r3, [pc, #324]	@ (8002478 <NLLS+0x1220>)
 8002332:	443b      	add	r3, r7
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	ee26 6a27 	vmul.f32	s12, s12, s15
 800233c:	4b4f      	ldr	r3, [pc, #316]	@ (800247c <NLLS+0x1224>)
 800233e:	443b      	add	r3, r7
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002348:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <NLLS+0x1210>)
 800234a:	443b      	add	r3, r7
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002354:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002358:	4b49      	ldr	r3, [pc, #292]	@ (8002480 <NLLS+0x1228>)
 800235a:	443b      	add	r3, r7
 800235c:	ed93 6a00 	vldr	s12, [r3]
 8002360:	4b45      	ldr	r3, [pc, #276]	@ (8002478 <NLLS+0x1220>)
 8002362:	443b      	add	r3, r7
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ee26 6a27 	vmul.f32	s12, s12, s15
 800236c:	4b3d      	ldr	r3, [pc, #244]	@ (8002464 <NLLS+0x120c>)
 800236e:	443b      	add	r3, r7
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002378:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <NLLS+0x1210>)
 800237a:	443b      	add	r3, r7
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002384:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <NLLS+0x1210>)
 8002386:	443b      	add	r3, r7
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002390:	4b3c      	ldr	r3, [pc, #240]	@ (8002484 <NLLS+0x122c>)
 8002392:	443b      	add	r3, r7
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee66 7a27 	vmul.f32	s15, s12, s15
 800239c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80023a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002458 <NLLS+0x1200>)
 80023a2:	443b      	add	r3, r7
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80023ac:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	ed93 6a00 	vldr	s12, [r3]
 80023b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002478 <NLLS+0x1220>)
 80023ba:	443b      	add	r3, r7
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023c4:	4b27      	ldr	r3, [pc, #156]	@ (8002464 <NLLS+0x120c>)
 80023c6:	443b      	add	r3, r7
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023d0:	4b25      	ldr	r3, [pc, #148]	@ (8002468 <NLLS+0x1210>)
 80023d2:	443b      	add	r3, r7
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023dc:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <NLLS+0x1210>)
 80023de:	443b      	add	r3, r7
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023e8:	4b26      	ldr	r3, [pc, #152]	@ (8002484 <NLLS+0x122c>)
 80023ea:	443b      	add	r3, r7
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023f8:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <NLLS+0x1228>)
 80023fa:	443b      	add	r3, r7
 80023fc:	ed93 6a00 	vldr	s12, [r3]
 8002400:	4b1d      	ldr	r3, [pc, #116]	@ (8002478 <NLLS+0x1220>)
 8002402:	443b      	add	r3, r7
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	ee26 6a27 	vmul.f32	s12, s12, s15
 800240c:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <NLLS+0x120c>)
 800240e:	443b      	add	r3, r7
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002418:	4b14      	ldr	r3, [pc, #80]	@ (800246c <NLLS+0x1214>)
 800241a:	443b      	add	r3, r7
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002424:	4b11      	ldr	r3, [pc, #68]	@ (800246c <NLLS+0x1214>)
 8002426:	443b      	add	r3, r7
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <NLLS+0x1218>)
 8002432:	443b      	add	r3, r7
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee26 6a27 	vmul.f32	s12, s12, s15
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <NLLS+0x1218>)
 800243e:	443b      	add	r3, r7
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002448:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <NLLS+0x122c>)
 800244a:	443b      	add	r3, r7
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002454:	e018      	b.n	8002488 <NLLS+0x1230>
 8002456:	bf00      	nop
 8002458:	00016fb0 	.word	0x00016fb0
 800245c:	00016fd0 	.word	0x00016fd0
 8002460:	00016fe0 	.word	0x00016fe0
 8002464:	00016fd8 	.word	0x00016fd8
 8002468:	00016f7c 	.word	0x00016f7c
 800246c:	00016f70 	.word	0x00016f70
 8002470:	00016f78 	.word	0x00016f78
 8002474:	00016fcc 	.word	0x00016fcc
 8002478:	00016fdc 	.word	0x00016fdc
 800247c:	00016f74 	.word	0x00016f74
 8002480:	00016fd4 	.word	0x00016fd4
 8002484:	00016f80 	.word	0x00016f80
 8002488:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800248c:	4bbf      	ldr	r3, [pc, #764]	@ (800278c <NLLS+0x1534>)
 800248e:	443b      	add	r3, r7
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002498:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	ed93 6a00 	vldr	s12, [r3]
 80024a4:	4bba      	ldr	r3, [pc, #744]	@ (8002790 <NLLS+0x1538>)
 80024a6:	443b      	add	r3, r7
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024b0:	4bb8      	ldr	r3, [pc, #736]	@ (8002794 <NLLS+0x153c>)
 80024b2:	443b      	add	r3, r7
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024bc:	4bb6      	ldr	r3, [pc, #728]	@ (8002798 <NLLS+0x1540>)
 80024be:	443b      	add	r3, r7
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024c8:	4bb3      	ldr	r3, [pc, #716]	@ (8002798 <NLLS+0x1540>)
 80024ca:	443b      	add	r3, r7
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024d4:	4bb1      	ldr	r3, [pc, #708]	@ (800279c <NLLS+0x1544>)
 80024d6:	443b      	add	r3, r7
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024e0:	4bae      	ldr	r3, [pc, #696]	@ (800279c <NLLS+0x1544>)
 80024e2:	443b      	add	r3, r7
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024ec:	4bac      	ldr	r3, [pc, #688]	@ (80027a0 <NLLS+0x1548>)
 80024ee:	443b      	add	r3, r7
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024fc:	4ba9      	ldr	r3, [pc, #676]	@ (80027a4 <NLLS+0x154c>)
 80024fe:	443b      	add	r3, r7
 8002500:	ed93 6a00 	vldr	s12, [r3]
 8002504:	4ba2      	ldr	r3, [pc, #648]	@ (8002790 <NLLS+0x1538>)
 8002506:	443b      	add	r3, r7
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002510:	4ba0      	ldr	r3, [pc, #640]	@ (8002794 <NLLS+0x153c>)
 8002512:	443b      	add	r3, r7
 8002514:	edd3 7a00 	vldr	s15, [r3]
 8002518:	ee26 6a27 	vmul.f32	s12, s12, s15
 800251c:	4b9e      	ldr	r3, [pc, #632]	@ (8002798 <NLLS+0x1540>)
 800251e:	443b      	add	r3, r7
 8002520:	edd3 7a00 	vldr	s15, [r3]
 8002524:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002528:	4b9f      	ldr	r3, [pc, #636]	@ (80027a8 <NLLS+0x1550>)
 800252a:	443b      	add	r3, r7
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002534:	4b9d      	ldr	r3, [pc, #628]	@ (80027ac <NLLS+0x1554>)
 8002536:	443b      	add	r3, r7
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002540:	4b9b      	ldr	r3, [pc, #620]	@ (80027b0 <NLLS+0x1558>)
 8002542:	443b      	add	r3, r7
 8002544:	edd3 7a00 	vldr	s15, [r3]
 8002548:	ee66 7a27 	vmul.f32	s15, s12, s15
 800254c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002550:	4b8e      	ldr	r3, [pc, #568]	@ (800278c <NLLS+0x1534>)
 8002552:	443b      	add	r3, r7
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800255c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	4413      	add	r3, r2
 8002564:	ed93 6a00 	vldr	s12, [r3]
 8002568:	4b89      	ldr	r3, [pc, #548]	@ (8002790 <NLLS+0x1538>)
 800256a:	443b      	add	r3, r7
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002574:	4b87      	ldr	r3, [pc, #540]	@ (8002794 <NLLS+0x153c>)
 8002576:	443b      	add	r3, r7
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002580:	4b85      	ldr	r3, [pc, #532]	@ (8002798 <NLLS+0x1540>)
 8002582:	443b      	add	r3, r7
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	ee26 6a27 	vmul.f32	s12, s12, s15
 800258c:	4b86      	ldr	r3, [pc, #536]	@ (80027a8 <NLLS+0x1550>)
 800258e:	443b      	add	r3, r7
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002598:	4b84      	ldr	r3, [pc, #528]	@ (80027ac <NLLS+0x1554>)
 800259a:	443b      	add	r3, r7
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025a4:	4b82      	ldr	r3, [pc, #520]	@ (80027b0 <NLLS+0x1558>)
 80025a6:	443b      	add	r3, r7
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b8:	eef1 6a67 	vneg.f32	s13, s15
 80025bc:	4b74      	ldr	r3, [pc, #464]	@ (8002790 <NLLS+0x1538>)
 80025be:	443b      	add	r3, r7
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80025c8:	4b71      	ldr	r3, [pc, #452]	@ (8002790 <NLLS+0x1538>)
 80025ca:	443b      	add	r3, r7
 80025cc:	edd3 7a00 	vldr	s15, [r3]
 80025d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d4:	4b77      	ldr	r3, [pc, #476]	@ (80027b4 <NLLS+0x155c>)
 80025d6:	443b      	add	r3, r7
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002794 <NLLS+0x153c>)
 80025e2:	443b      	add	r3, r7
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002798 <NLLS+0x1540>)
 80025ee:	443b      	add	r3, r7
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f8:	4b67      	ldr	r3, [pc, #412]	@ (8002798 <NLLS+0x1540>)
 80025fa:	443b      	add	r3, r7
 80025fc:	edd3 7a00 	vldr	s15, [r3]
 8002600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002604:	4b65      	ldr	r3, [pc, #404]	@ (800279c <NLLS+0x1544>)
 8002606:	443b      	add	r3, r7
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002610:	4b62      	ldr	r3, [pc, #392]	@ (800279c <NLLS+0x1544>)
 8002612:	443b      	add	r3, r7
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee27 7a27 	vmul.f32	s14, s14, s15
 800261c:	4b62      	ldr	r3, [pc, #392]	@ (80027a8 <NLLS+0x1550>)
 800261e:	443b      	add	r3, r7
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002628:	4b5f      	ldr	r3, [pc, #380]	@ (80027a8 <NLLS+0x1550>)
 800262a:	443b      	add	r3, r7
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002638:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 800263c:	443b      	add	r3, r7
 800263e:	461a      	mov	r2, r3
 8002640:	4b52      	ldr	r3, [pc, #328]	@ (800278c <NLLS+0x1534>)
 8002642:	443b      	add	r3, r7
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f203 4357 	addw	r3, r3, #1111	@ 0x457
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3bf0      	subs	r3, #240	@ 0xf0
 8002650:	edc3 7a00 	vstr	s15, [r3]

            mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002654:	4b4d      	ldr	r3, [pc, #308]	@ (800278c <NLLS+0x1534>)
 8002656:	443b      	add	r3, r7
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002660:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	4413      	add	r3, r2
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	4b52      	ldr	r3, [pc, #328]	@ (80027b8 <NLLS+0x1560>)
 800266e:	443b      	add	r3, r7
 8002670:	ed93 7a00 	vldr	s14, [r3]
 8002674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002678:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800267c:	4b4e      	ldr	r3, [pc, #312]	@ (80027b8 <NLLS+0x1560>)
 800267e:	443b      	add	r3, r7
 8002680:	edd3 6a00 	vldr	s13, [r3]
 8002684:	4b4b      	ldr	r3, [pc, #300]	@ (80027b4 <NLLS+0x155c>)
 8002686:	443b      	add	r3, r7
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002690:	4b3f      	ldr	r3, [pc, #252]	@ (8002790 <NLLS+0x1538>)
 8002692:	443b      	add	r3, r7
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800269c:	4b42      	ldr	r3, [pc, #264]	@ (80027a8 <NLLS+0x1550>)
 800269e:	443b      	add	r3, r7
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026a8:	4b44      	ldr	r3, [pc, #272]	@ (80027bc <NLLS+0x1564>)
 80026aa:	443b      	add	r3, r7
 80026ac:	ed93 6a00 	vldr	s12, [r3]
 80026b0:	4b40      	ldr	r3, [pc, #256]	@ (80027b4 <NLLS+0x155c>)
 80026b2:	443b      	add	r3, r7
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026bc:	4b35      	ldr	r3, [pc, #212]	@ (8002794 <NLLS+0x153c>)
 80026be:	443b      	add	r3, r7
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026c8:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <NLLS+0x1554>)
 80026ca:	443b      	add	r3, r7
 80026cc:	edd3 7a00 	vldr	s15, [r3]
 80026d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026d8:	4b2c      	ldr	r3, [pc, #176]	@ (800278c <NLLS+0x1534>)
 80026da:	443b      	add	r3, r7
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80026e4:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	ed93 6a00 	vldr	s12, [r3]
 80026f0:	4b30      	ldr	r3, [pc, #192]	@ (80027b4 <NLLS+0x155c>)
 80026f2:	443b      	add	r3, r7
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026fc:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <NLLS+0x1538>)
 80026fe:	443b      	add	r3, r7
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002708:	4b27      	ldr	r3, [pc, #156]	@ (80027a8 <NLLS+0x1550>)
 800270a:	443b      	add	r3, r7
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002714:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002718:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <NLLS+0x1534>)
 800271a:	443b      	add	r3, r7
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002724:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	4413      	add	r3, r2
 800272c:	ed93 6a00 	vldr	s12, [r3]
 8002730:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <NLLS+0x155c>)
 8002732:	443b      	add	r3, r7
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	ee26 6a27 	vmul.f32	s12, s12, s15
 800273c:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <NLLS+0x153c>)
 800273e:	443b      	add	r3, r7
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002748:	4b18      	ldr	r3, [pc, #96]	@ (80027ac <NLLS+0x1554>)
 800274a:	443b      	add	r3, r7
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002754:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002758:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <NLLS+0x154c>)
 800275a:	443b      	add	r3, r7
 800275c:	ed93 6a00 	vldr	s12, [r3]
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <NLLS+0x1538>)
 8002762:	443b      	add	r3, r7
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	ee26 6a27 	vmul.f32	s12, s12, s15
 800276c:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <NLLS+0x153c>)
 800276e:	443b      	add	r3, r7
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002778:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <NLLS+0x1554>)
 800277a:	443b      	add	r3, r7
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002784:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <NLLS+0x1548>)
 8002786:	443b      	add	r3, r7
 8002788:	e01a      	b.n	80027c0 <NLLS+0x1568>
 800278a:	bf00      	nop
 800278c:	00016fb0 	.word	0x00016fb0
 8002790:	00016fdc 	.word	0x00016fdc
 8002794:	00016fd8 	.word	0x00016fd8
 8002798:	00016f70 	.word	0x00016f70
 800279c:	00016f78 	.word	0x00016f78
 80027a0:	00016f80 	.word	0x00016f80
 80027a4:	00016fd4 	.word	0x00016fd4
 80027a8:	00016f74 	.word	0x00016f74
 80027ac:	00016f7c 	.word	0x00016f7c
 80027b0:	00016f84 	.word	0x00016f84
 80027b4:	00016fe0 	.word	0x00016fe0
 80027b8:	00016fcc 	.word	0x00016fcc
 80027bc:	00016fd0 	.word	0x00016fd0
 80027c0:	edd3 7a00 	vldr	s15, [r3]
 80027c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027cc:	4bc0      	ldr	r3, [pc, #768]	@ (8002ad0 <NLLS+0x1878>)
 80027ce:	443b      	add	r3, r7
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80027d8:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	ed93 6a00 	vldr	s12, [r3]
 80027e4:	4bbb      	ldr	r3, [pc, #748]	@ (8002ad4 <NLLS+0x187c>)
 80027e6:	443b      	add	r3, r7
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027f0:	4bb9      	ldr	r3, [pc, #740]	@ (8002ad8 <NLLS+0x1880>)
 80027f2:	443b      	add	r3, r7
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027fc:	4bb7      	ldr	r3, [pc, #732]	@ (8002adc <NLLS+0x1884>)
 80027fe:	443b      	add	r3, r7
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002808:	4bb5      	ldr	r3, [pc, #724]	@ (8002ae0 <NLLS+0x1888>)
 800280a:	443b      	add	r3, r7
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002814:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002818:	4bb2      	ldr	r3, [pc, #712]	@ (8002ae4 <NLLS+0x188c>)
 800281a:	443b      	add	r3, r7
 800281c:	ed93 6a00 	vldr	s12, [r3]
 8002820:	4bac      	ldr	r3, [pc, #688]	@ (8002ad4 <NLLS+0x187c>)
 8002822:	443b      	add	r3, r7
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	ee26 6a27 	vmul.f32	s12, s12, s15
 800282c:	4baa      	ldr	r3, [pc, #680]	@ (8002ad8 <NLLS+0x1880>)
 800282e:	443b      	add	r3, r7
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002838:	4bab      	ldr	r3, [pc, #684]	@ (8002ae8 <NLLS+0x1890>)
 800283a:	443b      	add	r3, r7
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002844:	4ba9      	ldr	r3, [pc, #676]	@ (8002aec <NLLS+0x1894>)
 8002846:	443b      	add	r3, r7
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002850:	4ba7      	ldr	r3, [pc, #668]	@ (8002af0 <NLLS+0x1898>)
 8002852:	443b      	add	r3, r7
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	ee66 7a27 	vmul.f32	s15, s12, s15
 800285c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002860:	4b9b      	ldr	r3, [pc, #620]	@ (8002ad0 <NLLS+0x1878>)
 8002862:	443b      	add	r3, r7
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800286c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	4413      	add	r3, r2
 8002874:	ed93 6a00 	vldr	s12, [r3]
 8002878:	4b96      	ldr	r3, [pc, #600]	@ (8002ad4 <NLLS+0x187c>)
 800287a:	443b      	add	r3, r7
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002884:	4b94      	ldr	r3, [pc, #592]	@ (8002ad8 <NLLS+0x1880>)
 8002886:	443b      	add	r3, r7
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002890:	4b95      	ldr	r3, [pc, #596]	@ (8002ae8 <NLLS+0x1890>)
 8002892:	443b      	add	r3, r7
 8002894:	edd3 7a00 	vldr	s15, [r3]
 8002898:	ee26 6a27 	vmul.f32	s12, s12, s15
 800289c:	4b93      	ldr	r3, [pc, #588]	@ (8002aec <NLLS+0x1894>)
 800289e:	443b      	add	r3, r7
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028a8:	4b91      	ldr	r3, [pc, #580]	@ (8002af0 <NLLS+0x1898>)
 80028aa:	443b      	add	r3, r7
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028bc:	eef1 6a67 	vneg.f32	s13, s15
 80028c0:	4b8c      	ldr	r3, [pc, #560]	@ (8002af4 <NLLS+0x189c>)
 80028c2:	443b      	add	r3, r7
 80028c4:	ed93 7a00 	vldr	s14, [r3]
 80028c8:	4b82      	ldr	r3, [pc, #520]	@ (8002ad4 <NLLS+0x187c>)
 80028ca:	443b      	add	r3, r7
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d4:	4b80      	ldr	r3, [pc, #512]	@ (8002ad8 <NLLS+0x1880>)
 80028d6:	443b      	add	r3, r7
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80028e0:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad8 <NLLS+0x1880>)
 80028e2:	443b      	add	r3, r7
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f0:	4b7d      	ldr	r3, [pc, #500]	@ (8002ae8 <NLLS+0x1890>)
 80028f2:	443b      	add	r3, r7
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028fc:	4b7a      	ldr	r3, [pc, #488]	@ (8002ae8 <NLLS+0x1890>)
 80028fe:	443b      	add	r3, r7
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002908:	4b7b      	ldr	r3, [pc, #492]	@ (8002af8 <NLLS+0x18a0>)
 800290a:	443b      	add	r3, r7
 800290c:	edd3 7a00 	vldr	s15, [r3]
 8002910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002914:	4b78      	ldr	r3, [pc, #480]	@ (8002af8 <NLLS+0x18a0>)
 8002916:	443b      	add	r3, r7
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002920:	4b72      	ldr	r3, [pc, #456]	@ (8002aec <NLLS+0x1894>)
 8002922:	443b      	add	r3, r7
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800292c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002930:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8002934:	443b      	add	r3, r7
 8002936:	461a      	mov	r2, r3
 8002938:	4b65      	ldr	r3, [pc, #404]	@ (8002ad0 <NLLS+0x1878>)
 800293a:	443b      	add	r3, r7
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f603 03ae 	addw	r3, r3, #2222	@ 0x8ae
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	3bf0      	subs	r3, #240	@ 0xf0
 8002948:	edc3 7a00 	vstr	s15, [r3]

            mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 800294c:	4b65      	ldr	r3, [pc, #404]	@ (8002ae4 <NLLS+0x188c>)
 800294e:	443b      	add	r3, r7
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002958:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad0 <NLLS+0x1878>)
 800295a:	443b      	add	r3, r7
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002964:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	4413      	add	r3, r2
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002974:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002978:	4b5e      	ldr	r3, [pc, #376]	@ (8002af4 <NLLS+0x189c>)
 800297a:	443b      	add	r3, r7
 800297c:	edd3 7a00 	vldr	s15, [r3]
 8002980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002984:	4b5b      	ldr	r3, [pc, #364]	@ (8002af4 <NLLS+0x189c>)
 8002986:	443b      	add	r3, r7
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002990:	4b53      	ldr	r3, [pc, #332]	@ (8002ae0 <NLLS+0x1888>)
 8002992:	443b      	add	r3, r7
 8002994:	edd3 7a00 	vldr	s15, [r3]
 8002998:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800299c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad0 <NLLS+0x1878>)
 800299e:	443b      	add	r3, r7
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80029a8:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	4b51      	ldr	r3, [pc, #324]	@ (8002afc <NLLS+0x18a4>)
 80029b6:	443b      	add	r3, r7
 80029b8:	ed93 6a00 	vldr	s12, [r3]
 80029bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80029c0:	4b4c      	ldr	r3, [pc, #304]	@ (8002af4 <NLLS+0x189c>)
 80029c2:	443b      	add	r3, r7
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029cc:	4b41      	ldr	r3, [pc, #260]	@ (8002ad4 <NLLS+0x187c>)
 80029ce:	443b      	add	r3, r7
 80029d0:	edd3 5a00 	vldr	s11, [r3]
 80029d4:	4b42      	ldr	r3, [pc, #264]	@ (8002ae0 <NLLS+0x1888>)
 80029d6:	443b      	add	r3, r7
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80029e0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad0 <NLLS+0x1878>)
 80029e2:	443b      	add	r3, r7
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80029ec:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae4 <NLLS+0x188c>)
 80029fa:	443b      	add	r3, r7
 80029fc:	ed93 5a00 	vldr	s10, [r3]
 8002a00:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002a04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002a08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a0c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002a10:	4b38      	ldr	r3, [pc, #224]	@ (8002af4 <NLLS+0x189c>)
 8002a12:	443b      	add	r3, r7
 8002a14:	edd3 7a00 	vldr	s15, [r3]
 8002a18:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad4 <NLLS+0x187c>)
 8002a1e:	443b      	add	r3, r7
 8002a20:	edd3 7a00 	vldr	s15, [r3]
 8002a24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a28:	4b30      	ldr	r3, [pc, #192]	@ (8002aec <NLLS+0x1894>)
 8002a2a:	443b      	add	r3, r7
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a34:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <NLLS+0x1894>)
 8002a36:	443b      	add	r3, r7
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a40:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002a44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a48:	4b24      	ldr	r3, [pc, #144]	@ (8002adc <NLLS+0x1884>)
 8002a4a:	443b      	add	r3, r7
 8002a4c:	edd3 6a00 	vldr	s13, [r3]
 8002a50:	4b23      	ldr	r3, [pc, #140]	@ (8002ae0 <NLLS+0x1888>)
 8002a52:	443b      	add	r3, r7
 8002a54:	edd3 7a00 	vldr	s15, [r3]
 8002a58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a5c:	4b22      	ldr	r3, [pc, #136]	@ (8002ae8 <NLLS+0x1890>)
 8002a5e:	443b      	add	r3, r7
 8002a60:	ed93 6a00 	vldr	s12, [r3]
 8002a64:	4b21      	ldr	r3, [pc, #132]	@ (8002aec <NLLS+0x1894>)
 8002a66:	443b      	add	r3, r7
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a70:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <NLLS+0x1898>)
 8002a72:	443b      	add	r3, r7
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a80:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <NLLS+0x187c>)
 8002a86:	443b      	add	r3, r7
 8002a88:	ed93 6a00 	vldr	s12, [r3]
 8002a8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <NLLS+0x1880>)
 8002a8e:	443b      	add	r3, r7
 8002a90:	edd3 7a00 	vldr	s15, [r3]
 8002a94:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a98:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <NLLS+0x1884>)
 8002a9a:	443b      	add	r3, r7
 8002a9c:	edd3 5a00 	vldr	s11, [r3]
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <NLLS+0x1888>)
 8002aa2:	443b      	add	r3, r7
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002aac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <NLLS+0x1890>)
 8002aae:	443b      	add	r3, r7
 8002ab0:	ed93 5a00 	vldr	s10, [r3]
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <NLLS+0x1894>)
 8002ab6:	443b      	add	r3, r7
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee25 5a27 	vmul.f32	s10, s10, s15
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <NLLS+0x1898>)
 8002ac2:	443b      	add	r3, r7
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002acc:	e018      	b.n	8002b00 <NLLS+0x18a8>
 8002ace:	bf00      	nop
 8002ad0:	00016fb0 	.word	0x00016fb0
 8002ad4:	00016fdc 	.word	0x00016fdc
 8002ad8:	00016fd8 	.word	0x00016fd8
 8002adc:	00016f7c 	.word	0x00016f7c
 8002ae0:	00016f80 	.word	0x00016f80
 8002ae4:	00016fd4 	.word	0x00016fd4
 8002ae8:	00016f70 	.word	0x00016f70
 8002aec:	00016f74 	.word	0x00016f74
 8002af0:	00016f84 	.word	0x00016f84
 8002af4:	00016fe0 	.word	0x00016fe0
 8002af8:	00016f78 	.word	0x00016f78
 8002afc:	00016fd0 	.word	0x00016fd0
 8002b00:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002b04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b08:	4bbf      	ldr	r3, [pc, #764]	@ (8002e08 <NLLS+0x1bb0>)
 8002b0a:	443b      	add	r3, r7
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002b14:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	edd3 7a00 	vldr	s15, [r3]
 8002b20:	4bba      	ldr	r3, [pc, #744]	@ (8002e0c <NLLS+0x1bb4>)
 8002b22:	443b      	add	r3, r7
 8002b24:	edd3 5a00 	vldr	s11, [r3]
 8002b28:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002b2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b30:	4bb7      	ldr	r3, [pc, #732]	@ (8002e10 <NLLS+0x1bb8>)
 8002b32:	443b      	add	r3, r7
 8002b34:	edd3 5a00 	vldr	s11, [r3]
 8002b38:	4bb6      	ldr	r3, [pc, #728]	@ (8002e14 <NLLS+0x1bbc>)
 8002b3a:	443b      	add	r3, r7
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002b44:	4bb4      	ldr	r3, [pc, #720]	@ (8002e18 <NLLS+0x1bc0>)
 8002b46:	443b      	add	r3, r7
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002b50:	4bad      	ldr	r3, [pc, #692]	@ (8002e08 <NLLS+0x1bb0>)
 8002b52:	443b      	add	r3, r7
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002b5c:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	4bac      	ldr	r3, [pc, #688]	@ (8002e1c <NLLS+0x1bc4>)
 8002b6a:	443b      	add	r3, r7
 8002b6c:	ed93 5a00 	vldr	s10, [r3]
 8002b70:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002b74:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b78:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b7c:	4ba4      	ldr	r3, [pc, #656]	@ (8002e10 <NLLS+0x1bb8>)
 8002b7e:	443b      	add	r3, r7
 8002b80:	edd3 5a00 	vldr	s11, [r3]
 8002b84:	4ba6      	ldr	r3, [pc, #664]	@ (8002e20 <NLLS+0x1bc8>)
 8002b86:	443b      	add	r3, r7
 8002b88:	edd3 7a00 	vldr	s15, [r3]
 8002b8c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002b90:	4ba4      	ldr	r3, [pc, #656]	@ (8002e24 <NLLS+0x1bcc>)
 8002b92:	443b      	add	r3, r7
 8002b94:	edd3 7a00 	vldr	s15, [r3]
 8002b98:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002b9c:	4b9a      	ldr	r3, [pc, #616]	@ (8002e08 <NLLS+0x1bb0>)
 8002b9e:	443b      	add	r3, r7
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002ba8:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8002e28 <NLLS+0x1bd0>)
 8002bb6:	443b      	add	r3, r7
 8002bb8:	ed93 5a00 	vldr	s10, [r3]
 8002bbc:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002bc0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002bc4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002bc8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002bcc:	4b90      	ldr	r3, [pc, #576]	@ (8002e10 <NLLS+0x1bb8>)
 8002bce:	443b      	add	r3, r7
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002bd8:	4b8e      	ldr	r3, [pc, #568]	@ (8002e14 <NLLS+0x1bbc>)
 8002bda:	443b      	add	r3, r7
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002be4:	4b8e      	ldr	r3, [pc, #568]	@ (8002e20 <NLLS+0x1bc8>)
 8002be6:	443b      	add	r3, r7
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bf0:	4b8e      	ldr	r3, [pc, #568]	@ (8002e2c <NLLS+0x1bd4>)
 8002bf2:	443b      	add	r3, r7
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bfc:	4b8b      	ldr	r3, [pc, #556]	@ (8002e2c <NLLS+0x1bd4>)
 8002bfe:	443b      	add	r3, r7
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c08:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c0c:	4b88      	ldr	r3, [pc, #544]	@ (8002e30 <NLLS+0x1bd8>)
 8002c0e:	443b      	add	r3, r7
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c18:	4b85      	ldr	r3, [pc, #532]	@ (8002e30 <NLLS+0x1bd8>)
 8002c1a:	443b      	add	r3, r7
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c24:	4b7c      	ldr	r3, [pc, #496]	@ (8002e18 <NLLS+0x1bc0>)
 8002c26:	443b      	add	r3, r7
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c30:	4b79      	ldr	r3, [pc, #484]	@ (8002e18 <NLLS+0x1bc0>)
 8002c32:	443b      	add	r3, r7
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c3c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c44:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8002c48:	443b      	add	r3, r7
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b6e      	ldr	r3, [pc, #440]	@ (8002e08 <NLLS+0x1bb0>)
 8002c4e:	443b      	add	r3, r7
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f603 5305 	addw	r3, r3, #3333	@ 0xd05
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	3bf0      	subs	r3, #240	@ 0xf0
 8002c5c:	edc3 7a00 	vstr	s15, [r3]

            mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8002c60:	4b69      	ldr	r3, [pc, #420]	@ (8002e08 <NLLS+0x1bb0>)
 8002c62:	443b      	add	r3, r7
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002c6c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	4b6b      	ldr	r3, [pc, #428]	@ (8002e28 <NLLS+0x1bd0>)
 8002c7a:	443b      	add	r3, r7
 8002c7c:	ed93 7a00 	vldr	s14, [r3]
 8002c80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c84:	4b62      	ldr	r3, [pc, #392]	@ (8002e10 <NLLS+0x1bb8>)
 8002c86:	443b      	add	r3, r7
 8002c88:	edd3 7a00 	vldr	s15, [r3]
 8002c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c90:	4b60      	ldr	r3, [pc, #384]	@ (8002e14 <NLLS+0x1bbc>)
 8002c92:	443b      	add	r3, r7
 8002c94:	edd3 6a00 	vldr	s13, [r3]
 8002c98:	4b66      	ldr	r3, [pc, #408]	@ (8002e34 <NLLS+0x1bdc>)
 8002c9a:	443b      	add	r3, r7
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ca4:	4b58      	ldr	r3, [pc, #352]	@ (8002e08 <NLLS+0x1bb0>)
 8002ca6:	443b      	add	r3, r7
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002cb0:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	4b53      	ldr	r3, [pc, #332]	@ (8002e0c <NLLS+0x1bb4>)
 8002cbe:	443b      	add	r3, r7
 8002cc0:	ed93 6a00 	vldr	s12, [r3]
 8002cc4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8002e10 <NLLS+0x1bb8>)
 8002cd6:	443b      	add	r3, r7
 8002cd8:	ed93 7a00 	vldr	s14, [r3]
 8002cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8002e14 <NLLS+0x1bbc>)
 8002cde:	443b      	add	r3, r7
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8002e14 <NLLS+0x1bbc>)
 8002cea:	443b      	add	r3, r7
 8002cec:	edd3 7a00 	vldr	s15, [r3]
 8002cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf4:	4b48      	ldr	r3, [pc, #288]	@ (8002e18 <NLLS+0x1bc0>)
 8002cf6:	443b      	add	r3, r7
 8002cf8:	edd3 7a00 	vldr	s15, [r3]
 8002cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d00:	4b45      	ldr	r3, [pc, #276]	@ (8002e18 <NLLS+0x1bc0>)
 8002d02:	443b      	add	r3, r7
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d10:	4b44      	ldr	r3, [pc, #272]	@ (8002e24 <NLLS+0x1bcc>)
 8002d12:	443b      	add	r3, r7
 8002d14:	edd3 7a00 	vldr	s15, [r3]
 8002d18:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e14 <NLLS+0x1bbc>)
 8002d1e:	443b      	add	r3, r7
 8002d20:	ed93 6a00 	vldr	s12, [r3]
 8002d24:	4b3e      	ldr	r3, [pc, #248]	@ (8002e20 <NLLS+0x1bc8>)
 8002d26:	443b      	add	r3, r7
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d30:	4b3c      	ldr	r3, [pc, #240]	@ (8002e24 <NLLS+0x1bcc>)
 8002d32:	443b      	add	r3, r7
 8002d34:	edd3 5a00 	vldr	s11, [r3]
 8002d38:	4b3e      	ldr	r3, [pc, #248]	@ (8002e34 <NLLS+0x1bdc>)
 8002d3a:	443b      	add	r3, r7
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
 8002d40:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d44:	4b39      	ldr	r3, [pc, #228]	@ (8002e2c <NLLS+0x1bd4>)
 8002d46:	443b      	add	r3, r7
 8002d48:	ed93 5a00 	vldr	s10, [r3]
 8002d4c:	4b32      	ldr	r3, [pc, #200]	@ (8002e18 <NLLS+0x1bc0>)
 8002d4e:	443b      	add	r3, r7
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	ee25 5a27 	vmul.f32	s10, s10, s15
 8002d58:	4b37      	ldr	r3, [pc, #220]	@ (8002e38 <NLLS+0x1be0>)
 8002d5a:	443b      	add	r3, r7
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002d64:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002d68:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d6c:	4b26      	ldr	r3, [pc, #152]	@ (8002e08 <NLLS+0x1bb0>)
 8002d6e:	443b      	add	r3, r7
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002d78:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	edd3 7a00 	vldr	s15, [r3]
 8002d84:	4b21      	ldr	r3, [pc, #132]	@ (8002e0c <NLLS+0x1bb4>)
 8002d86:	443b      	add	r3, r7
 8002d88:	edd3 5a00 	vldr	s11, [r3]
 8002d8c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002d90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d94:	4b1e      	ldr	r3, [pc, #120]	@ (8002e10 <NLLS+0x1bb8>)
 8002d96:	443b      	add	r3, r7
 8002d98:	edd3 5a00 	vldr	s11, [r3]
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e14 <NLLS+0x1bbc>)
 8002d9e:	443b      	add	r3, r7
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002da8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <NLLS+0x1bc0>)
 8002daa:	443b      	add	r3, r7
 8002dac:	edd3 7a00 	vldr	s15, [r3]
 8002db0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002db4:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <NLLS+0x1bb0>)
 8002db6:	443b      	add	r3, r7
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002dc0:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	edd3 7a00 	vldr	s15, [r3]
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <NLLS+0x1bc4>)
 8002dce:	443b      	add	r3, r7
 8002dd0:	ed93 5a00 	vldr	s10, [r3]
 8002dd4:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002dd8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ddc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <NLLS+0x1bb8>)
 8002de2:	443b      	add	r3, r7
 8002de4:	edd3 5a00 	vldr	s11, [r3]
 8002de8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <NLLS+0x1bc8>)
 8002dea:	443b      	add	r3, r7
 8002dec:	edd3 7a00 	vldr	s15, [r3]
 8002df0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <NLLS+0x1bcc>)
 8002df6:	443b      	add	r3, r7
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002e00:	4b01      	ldr	r3, [pc, #4]	@ (8002e08 <NLLS+0x1bb0>)
 8002e02:	443b      	add	r3, r7
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	e019      	b.n	8002e3c <NLLS+0x1be4>
 8002e08:	00016fb0 	.word	0x00016fb0
 8002e0c:	00016fd4 	.word	0x00016fd4
 8002e10:	00016fe0 	.word	0x00016fe0
 8002e14:	00016fdc 	.word	0x00016fdc
 8002e18:	00016f74 	.word	0x00016f74
 8002e1c:	00016fcc 	.word	0x00016fcc
 8002e20:	00016fd8 	.word	0x00016fd8
 8002e24:	00016f7c 	.word	0x00016f7c
 8002e28:	00016fd0 	.word	0x00016fd0
 8002e2c:	00016f70 	.word	0x00016f70
 8002e30:	00016f78 	.word	0x00016f78
 8002e34:	00016f80 	.word	0x00016f80
 8002e38:	00016f84 	.word	0x00016f84
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002e42:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	4413      	add	r3, r2
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	4bc0      	ldr	r3, [pc, #768]	@ (8003150 <NLLS+0x1ef8>)
 8002e50:	443b      	add	r3, r7
 8002e52:	ed93 5a00 	vldr	s10, [r3]
 8002e56:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002e5a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e62:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002e66:	4bbb      	ldr	r3, [pc, #748]	@ (8003154 <NLLS+0x1efc>)
 8002e68:	443b      	add	r3, r7
 8002e6a:	edd3 6a00 	vldr	s13, [r3]
 8002e6e:	4bba      	ldr	r3, [pc, #744]	@ (8003158 <NLLS+0x1f00>)
 8002e70:	443b      	add	r3, r7
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e7a:	4bb7      	ldr	r3, [pc, #732]	@ (8003158 <NLLS+0x1f00>)
 8002e7c:	443b      	add	r3, r7
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e86:	4bb5      	ldr	r3, [pc, #724]	@ (800315c <NLLS+0x1f04>)
 8002e88:	443b      	add	r3, r7
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e92:	4bb3      	ldr	r3, [pc, #716]	@ (8003160 <NLLS+0x1f08>)
 8002e94:	443b      	add	r3, r7
 8002e96:	edd3 7a00 	vldr	s15, [r3]
 8002e9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e9e:	4bb0      	ldr	r3, [pc, #704]	@ (8003160 <NLLS+0x1f08>)
 8002ea0:	443b      	add	r3, r7
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eaa:	4bae      	ldr	r3, [pc, #696]	@ (8003164 <NLLS+0x1f0c>)
 8002eac:	443b      	add	r3, r7
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eb6:	4bab      	ldr	r3, [pc, #684]	@ (8003164 <NLLS+0x1f0c>)
 8002eb8:	443b      	add	r3, r7
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ec2:	4ba9      	ldr	r3, [pc, #676]	@ (8003168 <NLLS+0x1f10>)
 8002ec4:	443b      	add	r3, r7
 8002ec6:	edd3 7a00 	vldr	s15, [r3]
 8002eca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ece:	4ba6      	ldr	r3, [pc, #664]	@ (8003168 <NLLS+0x1f10>)
 8002ed0:	443b      	add	r3, r7
 8002ed2:	edd3 7a00 	vldr	s15, [r3]
 8002ed6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eda:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee2:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8002ee6:	443b      	add	r3, r7
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4ba0      	ldr	r3, [pc, #640]	@ (800316c <NLLS+0x1f14>)
 8002eec:	443b      	add	r3, r7
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	f241 135c 	movw	r3, #4444	@ 0x115c
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3bf0      	subs	r3, #240	@ 0xf0
 8002efc:	edc3 7a00 	vstr	s15, [r3]

            mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002f00:	4b95      	ldr	r3, [pc, #596]	@ (8003158 <NLLS+0x1f00>)
 8002f02:	443b      	add	r3, r7
 8002f04:	ed93 7a00 	vldr	s14, [r3]
 8002f08:	4b94      	ldr	r3, [pc, #592]	@ (800315c <NLLS+0x1f04>)
 8002f0a:	443b      	add	r3, r7
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f14:	4b96      	ldr	r3, [pc, #600]	@ (8003170 <NLLS+0x1f18>)
 8002f16:	443b      	add	r3, r7
 8002f18:	edd3 6a00 	vldr	s13, [r3]
 8002f1c:	4b95      	ldr	r3, [pc, #596]	@ (8003174 <NLLS+0x1f1c>)
 8002f1e:	443b      	add	r3, r7
 8002f20:	edd3 7a00 	vldr	s15, [r3]
 8002f24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f28:	4b8d      	ldr	r3, [pc, #564]	@ (8003160 <NLLS+0x1f08>)
 8002f2a:	443b      	add	r3, r7
 8002f2c:	ed93 6a00 	vldr	s12, [r3]
 8002f30:	4b8d      	ldr	r3, [pc, #564]	@ (8003168 <NLLS+0x1f10>)
 8002f32:	443b      	add	r3, r7
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f3c:	4b8e      	ldr	r3, [pc, #568]	@ (8003178 <NLLS+0x1f20>)
 8002f3e:	443b      	add	r3, r7
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002f48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f50:	4b86      	ldr	r3, [pc, #536]	@ (800316c <NLLS+0x1f14>)
 8002f52:	443b      	add	r3, r7
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002f5c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	4b84      	ldr	r3, [pc, #528]	@ (800317c <NLLS+0x1f24>)
 8002f6a:	443b      	add	r3, r7
 8002f6c:	edd3 6a00 	vldr	s13, [r3]
 8002f70:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f78:	4b76      	ldr	r3, [pc, #472]	@ (8003154 <NLLS+0x1efc>)
 8002f7a:	443b      	add	r3, r7
 8002f7c:	edd3 6a00 	vldr	s13, [r3]
 8002f80:	4b75      	ldr	r3, [pc, #468]	@ (8003158 <NLLS+0x1f00>)
 8002f82:	443b      	add	r3, r7
 8002f84:	edd3 7a00 	vldr	s15, [r3]
 8002f88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f8c:	4b76      	ldr	r3, [pc, #472]	@ (8003168 <NLLS+0x1f10>)
 8002f8e:	443b      	add	r3, r7
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f98:	4b74      	ldr	r3, [pc, #464]	@ (800316c <NLLS+0x1f14>)
 8002f9a:	443b      	add	r3, r7
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002fa4:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	4b73      	ldr	r3, [pc, #460]	@ (8003180 <NLLS+0x1f28>)
 8002fb2:	443b      	add	r3, r7
 8002fb4:	ed93 6a00 	vldr	s12, [r3]
 8002fb8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fc4:	4b63      	ldr	r3, [pc, #396]	@ (8003154 <NLLS+0x1efc>)
 8002fc6:	443b      	add	r3, r7
 8002fc8:	edd3 6a00 	vldr	s13, [r3]
 8002fcc:	4b63      	ldr	r3, [pc, #396]	@ (800315c <NLLS+0x1f04>)
 8002fce:	443b      	add	r3, r7
 8002fd0:	edd3 7a00 	vldr	s15, [r3]
 8002fd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fd8:	4b65      	ldr	r3, [pc, #404]	@ (8003170 <NLLS+0x1f18>)
 8002fda:	443b      	add	r3, r7
 8002fdc:	edd3 7a00 	vldr	s15, [r3]
 8002fe0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fe4:	4b61      	ldr	r3, [pc, #388]	@ (800316c <NLLS+0x1f14>)
 8002fe6:	443b      	add	r3, r7
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002ff0:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	4b54      	ldr	r3, [pc, #336]	@ (8003150 <NLLS+0x1ef8>)
 8002ffe:	443b      	add	r3, r7
 8003000:	ed93 6a00 	vldr	s12, [r3]
 8003004:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800300c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003010:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003014:	4b4f      	ldr	r3, [pc, #316]	@ (8003154 <NLLS+0x1efc>)
 8003016:	443b      	add	r3, r7
 8003018:	ed93 7a00 	vldr	s14, [r3]
 800301c:	4b4e      	ldr	r3, [pc, #312]	@ (8003158 <NLLS+0x1f00>)
 800301e:	443b      	add	r3, r7
 8003020:	edd3 7a00 	vldr	s15, [r3]
 8003024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003028:	4b4c      	ldr	r3, [pc, #304]	@ (800315c <NLLS+0x1f04>)
 800302a:	443b      	add	r3, r7
 800302c:	edd3 7a00 	vldr	s15, [r3]
 8003030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003034:	4b49      	ldr	r3, [pc, #292]	@ (800315c <NLLS+0x1f04>)
 8003036:	443b      	add	r3, r7
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003040:	4b47      	ldr	r3, [pc, #284]	@ (8003160 <NLLS+0x1f08>)
 8003042:	443b      	add	r3, r7
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304c:	4b44      	ldr	r3, [pc, #272]	@ (8003160 <NLLS+0x1f08>)
 800304e:	443b      	add	r3, r7
 8003050:	edd3 7a00 	vldr	s15, [r3]
 8003054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003058:	4b42      	ldr	r3, [pc, #264]	@ (8003164 <NLLS+0x1f0c>)
 800305a:	443b      	add	r3, r7
 800305c:	edd3 7a00 	vldr	s15, [r3]
 8003060:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003064:	4b3f      	ldr	r3, [pc, #252]	@ (8003164 <NLLS+0x1f0c>)
 8003066:	443b      	add	r3, r7
 8003068:	edd3 7a00 	vldr	s15, [r3]
 800306c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003070:	4b3d      	ldr	r3, [pc, #244]	@ (8003168 <NLLS+0x1f10>)
 8003072:	443b      	add	r3, r7
 8003074:	edd3 7a00 	vldr	s15, [r3]
 8003078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800307c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003080:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003084:	443b      	add	r3, r7
 8003086:	4619      	mov	r1, r3
 8003088:	4b38      	ldr	r3, [pc, #224]	@ (800316c <NLLS+0x1f14>)
 800308a:	443b      	add	r3, r7
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	3bf0      	subs	r3, #240	@ 0xf0
 800309a:	edc3 7a00 	vstr	s15, [r3]

            mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 800309e:	4b37      	ldr	r3, [pc, #220]	@ (800317c <NLLS+0x1f24>)
 80030a0:	443b      	add	r3, r7
 80030a2:	ed93 7a00 	vldr	s14, [r3]
 80030a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003158 <NLLS+0x1f00>)
 80030a8:	443b      	add	r3, r7
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b2:	4b2e      	ldr	r3, [pc, #184]	@ (800316c <NLLS+0x1f14>)
 80030b4:	443b      	add	r3, r7
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80030be:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	edd3 6a00 	vldr	s13, [r3]
 80030ca:	4b23      	ldr	r3, [pc, #140]	@ (8003158 <NLLS+0x1f00>)
 80030cc:	443b      	add	r3, r7
 80030ce:	edd3 7a00 	vldr	s15, [r3]
 80030d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030da:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <NLLS+0x1ef8>)
 80030dc:	443b      	add	r3, r7
 80030de:	edd3 6a00 	vldr	s13, [r3]
 80030e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003154 <NLLS+0x1efc>)
 80030e4:	443b      	add	r3, r7
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030ee:	4b21      	ldr	r3, [pc, #132]	@ (8003174 <NLLS+0x1f1c>)
 80030f0:	443b      	add	r3, r7
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030fe:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <NLLS+0x1f14>)
 8003100:	443b      	add	r3, r7
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800310a:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	4413      	add	r3, r2
 8003112:	edd3 6a00 	vldr	s13, [r3]
 8003116:	4b0f      	ldr	r3, [pc, #60]	@ (8003154 <NLLS+0x1efc>)
 8003118:	443b      	add	r3, r7
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003122:	4b14      	ldr	r3, [pc, #80]	@ (8003174 <NLLS+0x1f1c>)
 8003124:	443b      	add	r3, r7
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800312e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003132:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <NLLS+0x1ef8>)
 8003138:	443b      	add	r3, r7
 800313a:	edd3 6a00 	vldr	s13, [r3]
 800313e:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <NLLS+0x1efc>)
 8003140:	443b      	add	r3, r7
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800314a:	4b04      	ldr	r3, [pc, #16]	@ (800315c <NLLS+0x1f04>)
 800314c:	443b      	add	r3, r7
 800314e:	e019      	b.n	8003184 <NLLS+0x1f2c>
 8003150:	00016fd0 	.word	0x00016fd0
 8003154:	00016fe0 	.word	0x00016fe0
 8003158:	00016fdc 	.word	0x00016fdc
 800315c:	00016fd8 	.word	0x00016fd8
 8003160:	00016f70 	.word	0x00016f70
 8003164:	00016f78 	.word	0x00016f78
 8003168:	00016f74 	.word	0x00016f74
 800316c:	00016fb0 	.word	0x00016fb0
 8003170:	00016f7c 	.word	0x00016f7c
 8003174:	00016f80 	.word	0x00016f80
 8003178:	00016f84 	.word	0x00016f84
 800317c:	00016fd4 	.word	0x00016fd4
 8003180:	00016fcc 	.word	0x00016fcc
 8003184:	edd3 7a00 	vldr	s15, [r3]
 8003188:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800318c:	4bbe      	ldr	r3, [pc, #760]	@ (8003488 <NLLS+0x2230>)
 800318e:	443b      	add	r3, r7
 8003190:	edd3 7a00 	vldr	s15, [r3]
 8003194:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003198:	4bbb      	ldr	r3, [pc, #748]	@ (8003488 <NLLS+0x2230>)
 800319a:	443b      	add	r3, r7
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031a4:	4bb9      	ldr	r3, [pc, #740]	@ (800348c <NLLS+0x2234>)
 80031a6:	443b      	add	r3, r7
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80031b0:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	ed93 6a00 	vldr	s12, [r3]
 80031bc:	4bb4      	ldr	r3, [pc, #720]	@ (8003490 <NLLS+0x2238>)
 80031be:	443b      	add	r3, r7
 80031c0:	edd3 7a00 	vldr	s15, [r3]
 80031c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031c8:	4bb2      	ldr	r3, [pc, #712]	@ (8003494 <NLLS+0x223c>)
 80031ca:	443b      	add	r3, r7
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031d4:	4bac      	ldr	r3, [pc, #688]	@ (8003488 <NLLS+0x2230>)
 80031d6:	443b      	add	r3, r7
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031e0:	4ba9      	ldr	r3, [pc, #676]	@ (8003488 <NLLS+0x2230>)
 80031e2:	443b      	add	r3, r7
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80031ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80031f0:	4ba9      	ldr	r3, [pc, #676]	@ (8003498 <NLLS+0x2240>)
 80031f2:	443b      	add	r3, r7
 80031f4:	ed93 6a00 	vldr	s12, [r3]
 80031f8:	4ba5      	ldr	r3, [pc, #660]	@ (8003490 <NLLS+0x2238>)
 80031fa:	443b      	add	r3, r7
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003204:	4ba3      	ldr	r3, [pc, #652]	@ (8003494 <NLLS+0x223c>)
 8003206:	443b      	add	r3, r7
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003210:	4ba2      	ldr	r3, [pc, #648]	@ (800349c <NLLS+0x2244>)
 8003212:	443b      	add	r3, r7
 8003214:	edd3 7a00 	vldr	s15, [r3]
 8003218:	ee26 6a27 	vmul.f32	s12, s12, s15
 800321c:	4b9f      	ldr	r3, [pc, #636]	@ (800349c <NLLS+0x2244>)
 800321e:	443b      	add	r3, r7
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003228:	4b9d      	ldr	r3, [pc, #628]	@ (80034a0 <NLLS+0x2248>)
 800322a:	443b      	add	r3, r7
 800322c:	edd3 7a00 	vldr	s15, [r3]
 8003230:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003234:	4b9a      	ldr	r3, [pc, #616]	@ (80034a0 <NLLS+0x2248>)
 8003236:	443b      	add	r3, r7
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003240:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003244:	4b91      	ldr	r3, [pc, #580]	@ (800348c <NLLS+0x2234>)
 8003246:	443b      	add	r3, r7
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003250:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	4413      	add	r3, r2
 8003258:	ed93 6a00 	vldr	s12, [r3]
 800325c:	4b8c      	ldr	r3, [pc, #560]	@ (8003490 <NLLS+0x2238>)
 800325e:	443b      	add	r3, r7
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003268:	4b8a      	ldr	r3, [pc, #552]	@ (8003494 <NLLS+0x223c>)
 800326a:	443b      	add	r3, r7
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003274:	4b89      	ldr	r3, [pc, #548]	@ (800349c <NLLS+0x2244>)
 8003276:	443b      	add	r3, r7
 8003278:	edd3 7a00 	vldr	s15, [r3]
 800327c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003280:	4b86      	ldr	r3, [pc, #536]	@ (800349c <NLLS+0x2244>)
 8003282:	443b      	add	r3, r7
 8003284:	edd3 7a00 	vldr	s15, [r3]
 8003288:	ee26 6a27 	vmul.f32	s12, s12, s15
 800328c:	4b84      	ldr	r3, [pc, #528]	@ (80034a0 <NLLS+0x2248>)
 800328e:	443b      	add	r3, r7
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003298:	4b81      	ldr	r3, [pc, #516]	@ (80034a0 <NLLS+0x2248>)
 800329a:	443b      	add	r3, r7
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032a8:	4b7e      	ldr	r3, [pc, #504]	@ (80034a4 <NLLS+0x224c>)
 80032aa:	443b      	add	r3, r7
 80032ac:	ed93 6a00 	vldr	s12, [r3]
 80032b0:	4b77      	ldr	r3, [pc, #476]	@ (8003490 <NLLS+0x2238>)
 80032b2:	443b      	add	r3, r7
 80032b4:	edd3 7a00 	vldr	s15, [r3]
 80032b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032bc:	4b7a      	ldr	r3, [pc, #488]	@ (80034a8 <NLLS+0x2250>)
 80032be:	443b      	add	r3, r7
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032c8:	4b78      	ldr	r3, [pc, #480]	@ (80034ac <NLLS+0x2254>)
 80032ca:	443b      	add	r3, r7
 80032cc:	edd3 7a00 	vldr	s15, [r3]
 80032d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003488 <NLLS+0x2230>)
 80032d6:	443b      	add	r3, r7
 80032d8:	edd3 7a00 	vldr	s15, [r3]
 80032dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032e4:	4b69      	ldr	r3, [pc, #420]	@ (800348c <NLLS+0x2234>)
 80032e6:	443b      	add	r3, r7
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80032f0:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	4413      	add	r3, r2
 80032f8:	ed93 6a00 	vldr	s12, [r3]
 80032fc:	4b64      	ldr	r3, [pc, #400]	@ (8003490 <NLLS+0x2238>)
 80032fe:	443b      	add	r3, r7
 8003300:	edd3 7a00 	vldr	s15, [r3]
 8003304:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003308:	4b67      	ldr	r3, [pc, #412]	@ (80034a8 <NLLS+0x2250>)
 800330a:	443b      	add	r3, r7
 800330c:	edd3 7a00 	vldr	s15, [r3]
 8003310:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003314:	4b65      	ldr	r3, [pc, #404]	@ (80034ac <NLLS+0x2254>)
 8003316:	443b      	add	r3, r7
 8003318:	edd3 7a00 	vldr	s15, [r3]
 800331c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003320:	4b59      	ldr	r3, [pc, #356]	@ (8003488 <NLLS+0x2230>)
 8003322:	443b      	add	r3, r7
 8003324:	edd3 7a00 	vldr	s15, [r3]
 8003328:	ee66 7a27 	vmul.f32	s15, s12, s15
 800332c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003330:	4b5f      	ldr	r3, [pc, #380]	@ (80034b0 <NLLS+0x2258>)
 8003332:	443b      	add	r3, r7
 8003334:	ed93 6a00 	vldr	s12, [r3]
 8003338:	4b5b      	ldr	r3, [pc, #364]	@ (80034a8 <NLLS+0x2250>)
 800333a:	443b      	add	r3, r7
 800333c:	edd3 7a00 	vldr	s15, [r3]
 8003340:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003344:	4b53      	ldr	r3, [pc, #332]	@ (8003494 <NLLS+0x223c>)
 8003346:	443b      	add	r3, r7
 8003348:	edd3 7a00 	vldr	s15, [r3]
 800334c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003350:	4b4d      	ldr	r3, [pc, #308]	@ (8003488 <NLLS+0x2230>)
 8003352:	443b      	add	r3, r7
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	ee26 6a27 	vmul.f32	s12, s12, s15
 800335c:	4b4a      	ldr	r3, [pc, #296]	@ (8003488 <NLLS+0x2230>)
 800335e:	443b      	add	r3, r7
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003368:	4b52      	ldr	r3, [pc, #328]	@ (80034b4 <NLLS+0x225c>)
 800336a:	443b      	add	r3, r7
 800336c:	edd3 7a00 	vldr	s15, [r3]
 8003370:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003374:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003378:	4b44      	ldr	r3, [pc, #272]	@ (800348c <NLLS+0x2234>)
 800337a:	443b      	add	r3, r7
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003384:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	4413      	add	r3, r2
 800338c:	ed93 6a00 	vldr	s12, [r3]
 8003390:	4b45      	ldr	r3, [pc, #276]	@ (80034a8 <NLLS+0x2250>)
 8003392:	443b      	add	r3, r7
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	ee26 6a27 	vmul.f32	s12, s12, s15
 800339c:	4b3d      	ldr	r3, [pc, #244]	@ (8003494 <NLLS+0x223c>)
 800339e:	443b      	add	r3, r7
 80033a0:	edd3 7a00 	vldr	s15, [r3]
 80033a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033a8:	4b37      	ldr	r3, [pc, #220]	@ (8003488 <NLLS+0x2230>)
 80033aa:	443b      	add	r3, r7
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033b4:	4b34      	ldr	r3, [pc, #208]	@ (8003488 <NLLS+0x2230>)
 80033b6:	443b      	add	r3, r7
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033c0:	4b3c      	ldr	r3, [pc, #240]	@ (80034b4 <NLLS+0x225c>)
 80033c2:	443b      	add	r3, r7
 80033c4:	edd3 7a00 	vldr	s15, [r3]
 80033c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80033cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80033d0:	4b37      	ldr	r3, [pc, #220]	@ (80034b0 <NLLS+0x2258>)
 80033d2:	443b      	add	r3, r7
 80033d4:	ed93 6a00 	vldr	s12, [r3]
 80033d8:	4b33      	ldr	r3, [pc, #204]	@ (80034a8 <NLLS+0x2250>)
 80033da:	443b      	add	r3, r7
 80033dc:	edd3 7a00 	vldr	s15, [r3]
 80033e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003494 <NLLS+0x223c>)
 80033e6:	443b      	add	r3, r7
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033f0:	4b2a      	ldr	r3, [pc, #168]	@ (800349c <NLLS+0x2244>)
 80033f2:	443b      	add	r3, r7
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033fc:	4b27      	ldr	r3, [pc, #156]	@ (800349c <NLLS+0x2244>)
 80033fe:	443b      	add	r3, r7
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003408:	4b25      	ldr	r3, [pc, #148]	@ (80034a0 <NLLS+0x2248>)
 800340a:	443b      	add	r3, r7
 800340c:	edd3 7a00 	vldr	s15, [r3]
 8003410:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003414:	4b22      	ldr	r3, [pc, #136]	@ (80034a0 <NLLS+0x2248>)
 8003416:	443b      	add	r3, r7
 8003418:	edd3 7a00 	vldr	s15, [r3]
 800341c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003420:	4b24      	ldr	r3, [pc, #144]	@ (80034b4 <NLLS+0x225c>)
 8003422:	443b      	add	r3, r7
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	ee66 7a27 	vmul.f32	s15, s12, s15
 800342c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003430:	4b16      	ldr	r3, [pc, #88]	@ (800348c <NLLS+0x2234>)
 8003432:	443b      	add	r3, r7
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800343c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	4413      	add	r3, r2
 8003444:	ed93 6a00 	vldr	s12, [r3]
 8003448:	4b17      	ldr	r3, [pc, #92]	@ (80034a8 <NLLS+0x2250>)
 800344a:	443b      	add	r3, r7
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003454:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <NLLS+0x223c>)
 8003456:	443b      	add	r3, r7
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003460:	4b0e      	ldr	r3, [pc, #56]	@ (800349c <NLLS+0x2244>)
 8003462:	443b      	add	r3, r7
 8003464:	edd3 7a00 	vldr	s15, [r3]
 8003468:	ee26 6a27 	vmul.f32	s12, s12, s15
 800346c:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <NLLS+0x2244>)
 800346e:	443b      	add	r3, r7
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003478:	4b09      	ldr	r3, [pc, #36]	@ (80034a0 <NLLS+0x2248>)
 800347a:	443b      	add	r3, r7
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003484:	e018      	b.n	80034b8 <NLLS+0x2260>
 8003486:	bf00      	nop
 8003488:	00016f7c 	.word	0x00016f7c
 800348c:	00016fb0 	.word	0x00016fb0
 8003490:	00016fe0 	.word	0x00016fe0
 8003494:	00016fd8 	.word	0x00016fd8
 8003498:	00016fd0 	.word	0x00016fd0
 800349c:	00016f70 	.word	0x00016f70
 80034a0:	00016f78 	.word	0x00016f78
 80034a4:	00016fcc 	.word	0x00016fcc
 80034a8:	00016fdc 	.word	0x00016fdc
 80034ac:	00016f74 	.word	0x00016f74
 80034b0:	00016fd4 	.word	0x00016fd4
 80034b4:	00016f80 	.word	0x00016f80
 80034b8:	4bbf      	ldr	r3, [pc, #764]	@ (80037b8 <NLLS+0x2560>)
 80034ba:	443b      	add	r3, r7
 80034bc:	edd3 7a00 	vldr	s15, [r3]
 80034c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034c4:	4bbd      	ldr	r3, [pc, #756]	@ (80037bc <NLLS+0x2564>)
 80034c6:	443b      	add	r3, r7
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80034d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80034d4:	4bba      	ldr	r3, [pc, #744]	@ (80037c0 <NLLS+0x2568>)
 80034d6:	443b      	add	r3, r7
 80034d8:	ed93 6a00 	vldr	s12, [r3]
 80034dc:	4bb9      	ldr	r3, [pc, #740]	@ (80037c4 <NLLS+0x256c>)
 80034de:	443b      	add	r3, r7
 80034e0:	edd3 7a00 	vldr	s15, [r3]
 80034e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034e8:	4bb7      	ldr	r3, [pc, #732]	@ (80037c8 <NLLS+0x2570>)
 80034ea:	443b      	add	r3, r7
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034f4:	4bb5      	ldr	r3, [pc, #724]	@ (80037cc <NLLS+0x2574>)
 80034f6:	443b      	add	r3, r7
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003500:	4bb3      	ldr	r3, [pc, #716]	@ (80037d0 <NLLS+0x2578>)
 8003502:	443b      	add	r3, r7
 8003504:	edd3 7a00 	vldr	s15, [r3]
 8003508:	ee26 6a27 	vmul.f32	s12, s12, s15
 800350c:	4bb1      	ldr	r3, [pc, #708]	@ (80037d4 <NLLS+0x257c>)
 800350e:	443b      	add	r3, r7
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003518:	4baf      	ldr	r3, [pc, #700]	@ (80037d8 <NLLS+0x2580>)
 800351a:	443b      	add	r3, r7
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003524:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003528:	4bac      	ldr	r3, [pc, #688]	@ (80037dc <NLLS+0x2584>)
 800352a:	443b      	add	r3, r7
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003534:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	4413      	add	r3, r2
 800353c:	ed93 6a00 	vldr	s12, [r3]
 8003540:	4ba0      	ldr	r3, [pc, #640]	@ (80037c4 <NLLS+0x256c>)
 8003542:	443b      	add	r3, r7
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	ee26 6a27 	vmul.f32	s12, s12, s15
 800354c:	4b9e      	ldr	r3, [pc, #632]	@ (80037c8 <NLLS+0x2570>)
 800354e:	443b      	add	r3, r7
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003558:	4b9c      	ldr	r3, [pc, #624]	@ (80037cc <NLLS+0x2574>)
 800355a:	443b      	add	r3, r7
 800355c:	edd3 7a00 	vldr	s15, [r3]
 8003560:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003564:	4b9a      	ldr	r3, [pc, #616]	@ (80037d0 <NLLS+0x2578>)
 8003566:	443b      	add	r3, r7
 8003568:	edd3 7a00 	vldr	s15, [r3]
 800356c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003570:	4b98      	ldr	r3, [pc, #608]	@ (80037d4 <NLLS+0x257c>)
 8003572:	443b      	add	r3, r7
 8003574:	edd3 7a00 	vldr	s15, [r3]
 8003578:	ee26 6a27 	vmul.f32	s12, s12, s15
 800357c:	4b96      	ldr	r3, [pc, #600]	@ (80037d8 <NLLS+0x2580>)
 800357e:	443b      	add	r3, r7
 8003580:	edd3 7a00 	vldr	s15, [r3]
 8003584:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003588:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800358c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003590:	eef1 6a67 	vneg.f32	s13, s15
 8003594:	4b92      	ldr	r3, [pc, #584]	@ (80037e0 <NLLS+0x2588>)
 8003596:	443b      	add	r3, r7
 8003598:	edd3 7a00 	vldr	s15, [r3]
 800359c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80035a0:	4b88      	ldr	r3, [pc, #544]	@ (80037c4 <NLLS+0x256c>)
 80035a2:	443b      	add	r3, r7
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ac:	4b85      	ldr	r3, [pc, #532]	@ (80037c4 <NLLS+0x256c>)
 80035ae:	443b      	add	r3, r7
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035b8:	4b83      	ldr	r3, [pc, #524]	@ (80037c8 <NLLS+0x2570>)
 80035ba:	443b      	add	r3, r7
 80035bc:	edd3 7a00 	vldr	s15, [r3]
 80035c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035c4:	4b81      	ldr	r3, [pc, #516]	@ (80037cc <NLLS+0x2574>)
 80035c6:	443b      	add	r3, r7
 80035c8:	edd3 7a00 	vldr	s15, [r3]
 80035cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035d0:	4b7e      	ldr	r3, [pc, #504]	@ (80037cc <NLLS+0x2574>)
 80035d2:	443b      	add	r3, r7
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035dc:	4b76      	ldr	r3, [pc, #472]	@ (80037b8 <NLLS+0x2560>)
 80035de:	443b      	add	r3, r7
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035e8:	4b73      	ldr	r3, [pc, #460]	@ (80037b8 <NLLS+0x2560>)
 80035ea:	443b      	add	r3, r7
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035f4:	4b76      	ldr	r3, [pc, #472]	@ (80037d0 <NLLS+0x2578>)
 80035f6:	443b      	add	r3, r7
 80035f8:	edd3 7a00 	vldr	s15, [r3]
 80035fc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003600:	4b73      	ldr	r3, [pc, #460]	@ (80037d0 <NLLS+0x2578>)
 8003602:	443b      	add	r3, r7
 8003604:	edd3 7a00 	vldr	s15, [r3]
 8003608:	ee66 7a27 	vmul.f32	s15, s12, s15
 800360c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003614:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003618:	443b      	add	r3, r7
 800361a:	4619      	mov	r1, r3
 800361c:	4b6f      	ldr	r3, [pc, #444]	@ (80037dc <NLLS+0x2584>)
 800361e:	443b      	add	r3, r7
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	f641 230a 	movw	r3, #6666	@ 0x1a0a
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3bf0      	subs	r3, #240	@ 0xf0
 800362e:	edc3 7a00 	vstr	s15, [r3]

            mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 8003632:	4b69      	ldr	r3, [pc, #420]	@ (80037d8 <NLLS+0x2580>)
 8003634:	443b      	add	r3, r7
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800363e:	4b61      	ldr	r3, [pc, #388]	@ (80037c4 <NLLS+0x256c>)
 8003640:	443b      	add	r3, r7
 8003642:	edd3 6a00 	vldr	s13, [r3]
 8003646:	4b60      	ldr	r3, [pc, #384]	@ (80037c8 <NLLS+0x2570>)
 8003648:	443b      	add	r3, r7
 800364a:	edd3 7a00 	vldr	s15, [r3]
 800364e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003652:	4b60      	ldr	r3, [pc, #384]	@ (80037d4 <NLLS+0x257c>)
 8003654:	443b      	add	r3, r7
 8003656:	ed93 6a00 	vldr	s12, [r3]
 800365a:	4b58      	ldr	r3, [pc, #352]	@ (80037bc <NLLS+0x2564>)
 800365c:	443b      	add	r3, r7
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003666:	4b59      	ldr	r3, [pc, #356]	@ (80037cc <NLLS+0x2574>)
 8003668:	443b      	add	r3, r7
 800366a:	edd3 5a00 	vldr	s11, [r3]
 800366e:	4b58      	ldr	r3, [pc, #352]	@ (80037d0 <NLLS+0x2578>)
 8003670:	443b      	add	r3, r7
 8003672:	edd3 7a00 	vldr	s15, [r3]
 8003676:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800367a:	4b57      	ldr	r3, [pc, #348]	@ (80037d8 <NLLS+0x2580>)
 800367c:	443b      	add	r3, r7
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003686:	ee76 7a67 	vsub.f32	s15, s12, s15
 800368a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800368e:	4b53      	ldr	r3, [pc, #332]	@ (80037dc <NLLS+0x2584>)
 8003690:	443b      	add	r3, r7
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800369a:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	edd3 7a00 	vldr	s15, [r3]
 80036a6:	4b46      	ldr	r3, [pc, #280]	@ (80037c0 <NLLS+0x2568>)
 80036a8:	443b      	add	r3, r7
 80036aa:	ed93 6a00 	vldr	s12, [r3]
 80036ae:	ee76 7a67 	vsub.f32	s15, s12, s15
 80036b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80036b6:	4b4a      	ldr	r3, [pc, #296]	@ (80037e0 <NLLS+0x2588>)
 80036b8:	443b      	add	r3, r7
 80036ba:	ed93 6a00 	vldr	s12, [r3]
 80036be:	4b41      	ldr	r3, [pc, #260]	@ (80037c4 <NLLS+0x256c>)
 80036c0:	443b      	add	r3, r7
 80036c2:	edd3 7a00 	vldr	s15, [r3]
 80036c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036ca:	4b41      	ldr	r3, [pc, #260]	@ (80037d0 <NLLS+0x2578>)
 80036cc:	443b      	add	r3, r7
 80036ce:	edd3 7a00 	vldr	s15, [r3]
 80036d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036d6:	4b41      	ldr	r3, [pc, #260]	@ (80037dc <NLLS+0x2584>)
 80036d8:	443b      	add	r3, r7
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80036e2:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	4413      	add	r3, r2
 80036ea:	edd3 7a00 	vldr	s15, [r3]
 80036ee:	4b3d      	ldr	r3, [pc, #244]	@ (80037e4 <NLLS+0x258c>)
 80036f0:	443b      	add	r3, r7
 80036f2:	edd3 5a00 	vldr	s11, [r3]
 80036f6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80036fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80036fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003702:	4b37      	ldr	r3, [pc, #220]	@ (80037e0 <NLLS+0x2588>)
 8003704:	443b      	add	r3, r7
 8003706:	ed93 6a00 	vldr	s12, [r3]
 800370a:	4b2f      	ldr	r3, [pc, #188]	@ (80037c8 <NLLS+0x2570>)
 800370c:	443b      	add	r3, r7
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003716:	4b2f      	ldr	r3, [pc, #188]	@ (80037d4 <NLLS+0x257c>)
 8003718:	443b      	add	r3, r7
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003722:	4b2e      	ldr	r3, [pc, #184]	@ (80037dc <NLLS+0x2584>)
 8003724:	443b      	add	r3, r7
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800372e:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	4413      	add	r3, r2
 8003736:	edd3 7a00 	vldr	s15, [r3]
 800373a:	4b2b      	ldr	r3, [pc, #172]	@ (80037e8 <NLLS+0x2590>)
 800373c:	443b      	add	r3, r7
 800373e:	edd3 5a00 	vldr	s11, [r3]
 8003742:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003746:	ee66 7a27 	vmul.f32	s15, s12, s15
 800374a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800374e:	4b1d      	ldr	r3, [pc, #116]	@ (80037c4 <NLLS+0x256c>)
 8003750:	443b      	add	r3, r7
 8003752:	ed93 6a00 	vldr	s12, [r3]
 8003756:	4b1c      	ldr	r3, [pc, #112]	@ (80037c8 <NLLS+0x2570>)
 8003758:	443b      	add	r3, r7
 800375a:	edd3 7a00 	vldr	s15, [r3]
 800375e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003762:	4b1c      	ldr	r3, [pc, #112]	@ (80037d4 <NLLS+0x257c>)
 8003764:	443b      	add	r3, r7
 8003766:	edd3 5a00 	vldr	s11, [r3]
 800376a:	4b14      	ldr	r3, [pc, #80]	@ (80037bc <NLLS+0x2564>)
 800376c:	443b      	add	r3, r7
 800376e:	edd3 7a00 	vldr	s15, [r3]
 8003772:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003776:	4b15      	ldr	r3, [pc, #84]	@ (80037cc <NLLS+0x2574>)
 8003778:	443b      	add	r3, r7
 800377a:	ed93 5a00 	vldr	s10, [r3]
 800377e:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <NLLS+0x2578>)
 8003780:	443b      	add	r3, r7
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	ee25 5a27 	vmul.f32	s10, s10, s15
 800378a:	4b13      	ldr	r3, [pc, #76]	@ (80037d8 <NLLS+0x2580>)
 800378c:	443b      	add	r3, r7
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003796:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800379a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800379e:	4b0f      	ldr	r3, [pc, #60]	@ (80037dc <NLLS+0x2584>)
 80037a0:	443b      	add	r3, r7
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80037aa:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	e019      	b.n	80037ec <NLLS+0x2594>
 80037b8:	00016f78 	.word	0x00016f78
 80037bc:	00016f80 	.word	0x00016f80
 80037c0:	00016fd4 	.word	0x00016fd4
 80037c4:	00016fdc 	.word	0x00016fdc
 80037c8:	00016fd8 	.word	0x00016fd8
 80037cc:	00016f70 	.word	0x00016f70
 80037d0:	00016f74 	.word	0x00016f74
 80037d4:	00016f7c 	.word	0x00016f7c
 80037d8:	00016f84 	.word	0x00016f84
 80037dc:	00016fb0 	.word	0x00016fb0
 80037e0:	00016fe0 	.word	0x00016fe0
 80037e4:	00016fcc 	.word	0x00016fcc
 80037e8:	00016fd0 	.word	0x00016fd0
 80037ec:	4bc0      	ldr	r3, [pc, #768]	@ (8003af0 <NLLS+0x2898>)
 80037ee:	443b      	add	r3, r7
 80037f0:	edd3 5a00 	vldr	s11, [r3]
 80037f4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80037f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037fc:	4bbd      	ldr	r3, [pc, #756]	@ (8003af4 <NLLS+0x289c>)
 80037fe:	443b      	add	r3, r7
 8003800:	edd3 5a00 	vldr	s11, [r3]
 8003804:	4bbc      	ldr	r3, [pc, #752]	@ (8003af8 <NLLS+0x28a0>)
 8003806:	443b      	add	r3, r7
 8003808:	edd3 7a00 	vldr	s15, [r3]
 800380c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003810:	4bba      	ldr	r3, [pc, #744]	@ (8003afc <NLLS+0x28a4>)
 8003812:	443b      	add	r3, r7
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800381c:	4bb8      	ldr	r3, [pc, #736]	@ (8003b00 <NLLS+0x28a8>)
 800381e:	443b      	add	r3, r7
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003828:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	4413      	add	r3, r2
 8003830:	edd3 7a00 	vldr	s15, [r3]
 8003834:	4bb3      	ldr	r3, [pc, #716]	@ (8003b04 <NLLS+0x28ac>)
 8003836:	443b      	add	r3, r7
 8003838:	ed93 5a00 	vldr	s10, [r3]
 800383c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003840:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003844:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003848:	4baa      	ldr	r3, [pc, #680]	@ (8003af4 <NLLS+0x289c>)
 800384a:	443b      	add	r3, r7
 800384c:	edd3 5a00 	vldr	s11, [r3]
 8003850:	4bad      	ldr	r3, [pc, #692]	@ (8003b08 <NLLS+0x28b0>)
 8003852:	443b      	add	r3, r7
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800385c:	4bab      	ldr	r3, [pc, #684]	@ (8003b0c <NLLS+0x28b4>)
 800385e:	443b      	add	r3, r7
 8003860:	edd3 7a00 	vldr	s15, [r3]
 8003864:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003868:	4ba5      	ldr	r3, [pc, #660]	@ (8003b00 <NLLS+0x28a8>)
 800386a:	443b      	add	r3, r7
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003874:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	4413      	add	r3, r2
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	4ba3      	ldr	r3, [pc, #652]	@ (8003b10 <NLLS+0x28b8>)
 8003882:	443b      	add	r3, r7
 8003884:	ed93 5a00 	vldr	s10, [r3]
 8003888:	ee75 7a67 	vsub.f32	s15, s10, s15
 800388c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003890:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003898:	ee67 6a27 	vmul.f32	s13, s14, s15
 800389c:	4b95      	ldr	r3, [pc, #596]	@ (8003af4 <NLLS+0x289c>)
 800389e:	443b      	add	r3, r7
 80038a0:	edd3 7a00 	vldr	s15, [r3]
 80038a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80038a8:	4b93      	ldr	r3, [pc, #588]	@ (8003af8 <NLLS+0x28a0>)
 80038aa:	443b      	add	r3, r7
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038b4:	4b90      	ldr	r3, [pc, #576]	@ (8003af8 <NLLS+0x28a0>)
 80038b6:	443b      	add	r3, r7
 80038b8:	edd3 7a00 	vldr	s15, [r3]
 80038bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c0:	4b91      	ldr	r3, [pc, #580]	@ (8003b08 <NLLS+0x28b0>)
 80038c2:	443b      	add	r3, r7
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003b08 <NLLS+0x28b0>)
 80038ce:	443b      	add	r3, r7
 80038d0:	edd3 7a00 	vldr	s15, [r3]
 80038d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003b14 <NLLS+0x28bc>)
 80038da:	443b      	add	r3, r7
 80038dc:	edd3 7a00 	vldr	s15, [r3]
 80038e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038e4:	4b8b      	ldr	r3, [pc, #556]	@ (8003b14 <NLLS+0x28bc>)
 80038e6:	443b      	add	r3, r7
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038f0:	4b89      	ldr	r3, [pc, #548]	@ (8003b18 <NLLS+0x28c0>)
 80038f2:	443b      	add	r3, r7
 80038f4:	edd3 7a00 	vldr	s15, [r3]
 80038f8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80038fc:	4b86      	ldr	r3, [pc, #536]	@ (8003b18 <NLLS+0x28c0>)
 80038fe:	443b      	add	r3, r7
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800390c:	4b7b      	ldr	r3, [pc, #492]	@ (8003afc <NLLS+0x28a4>)
 800390e:	443b      	add	r3, r7
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003918:	4b78      	ldr	r3, [pc, #480]	@ (8003afc <NLLS+0x28a4>)
 800391a:	443b      	add	r3, r7
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003928:	4b75      	ldr	r3, [pc, #468]	@ (8003b00 <NLLS+0x28a8>)
 800392a:	443b      	add	r3, r7
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003934:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	4413      	add	r3, r2
 800393c:	edd3 7a00 	vldr	s15, [r3]
 8003940:	4b6b      	ldr	r3, [pc, #428]	@ (8003af0 <NLLS+0x2898>)
 8003942:	443b      	add	r3, r7
 8003944:	edd3 6a00 	vldr	s13, [r3]
 8003948:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800394c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003950:	4b69      	ldr	r3, [pc, #420]	@ (8003af8 <NLLS+0x28a0>)
 8003952:	443b      	add	r3, r7
 8003954:	ed93 6a00 	vldr	s12, [r3]
 8003958:	4b6b      	ldr	r3, [pc, #428]	@ (8003b08 <NLLS+0x28b0>)
 800395a:	443b      	add	r3, r7
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003964:	4b69      	ldr	r3, [pc, #420]	@ (8003b0c <NLLS+0x28b4>)
 8003966:	443b      	add	r3, r7
 8003968:	edd3 5a00 	vldr	s11, [r3]
 800396c:	4b6b      	ldr	r3, [pc, #428]	@ (8003b1c <NLLS+0x28c4>)
 800396e:	443b      	add	r3, r7
 8003970:	edd3 7a00 	vldr	s15, [r3]
 8003974:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003978:	4b66      	ldr	r3, [pc, #408]	@ (8003b14 <NLLS+0x28bc>)
 800397a:	443b      	add	r3, r7
 800397c:	ed93 5a00 	vldr	s10, [r3]
 8003980:	4b5e      	ldr	r3, [pc, #376]	@ (8003afc <NLLS+0x28a4>)
 8003982:	443b      	add	r3, r7
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	ee25 5a27 	vmul.f32	s10, s10, s15
 800398c:	4b64      	ldr	r3, [pc, #400]	@ (8003b20 <NLLS+0x28c8>)
 800398e:	443b      	add	r3, r7
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003998:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800399c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039a0:	4b57      	ldr	r3, [pc, #348]	@ (8003b00 <NLLS+0x28a8>)
 80039a2:	443b      	add	r3, r7
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80039ac:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	4413      	add	r3, r2
 80039b4:	edd3 7a00 	vldr	s15, [r3]
 80039b8:	4b4d      	ldr	r3, [pc, #308]	@ (8003af0 <NLLS+0x2898>)
 80039ba:	443b      	add	r3, r7
 80039bc:	edd3 5a00 	vldr	s11, [r3]
 80039c0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80039c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039c8:	4b4a      	ldr	r3, [pc, #296]	@ (8003af4 <NLLS+0x289c>)
 80039ca:	443b      	add	r3, r7
 80039cc:	edd3 5a00 	vldr	s11, [r3]
 80039d0:	4b49      	ldr	r3, [pc, #292]	@ (8003af8 <NLLS+0x28a0>)
 80039d2:	443b      	add	r3, r7
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80039dc:	4b47      	ldr	r3, [pc, #284]	@ (8003afc <NLLS+0x28a4>)
 80039de:	443b      	add	r3, r7
 80039e0:	edd3 7a00 	vldr	s15, [r3]
 80039e4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80039e8:	4b45      	ldr	r3, [pc, #276]	@ (8003b00 <NLLS+0x28a8>)
 80039ea:	443b      	add	r3, r7
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80039f4:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	4413      	add	r3, r2
 80039fc:	edd3 7a00 	vldr	s15, [r3]
 8003a00:	4b40      	ldr	r3, [pc, #256]	@ (8003b04 <NLLS+0x28ac>)
 8003a02:	443b      	add	r3, r7
 8003a04:	ed93 5a00 	vldr	s10, [r3]
 8003a08:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003a0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003a10:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003a14:	4b37      	ldr	r3, [pc, #220]	@ (8003af4 <NLLS+0x289c>)
 8003a16:	443b      	add	r3, r7
 8003a18:	edd3 5a00 	vldr	s11, [r3]
 8003a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b08 <NLLS+0x28b0>)
 8003a1e:	443b      	add	r3, r7
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003a28:	4b38      	ldr	r3, [pc, #224]	@ (8003b0c <NLLS+0x28b4>)
 8003a2a:	443b      	add	r3, r7
 8003a2c:	edd3 7a00 	vldr	s15, [r3]
 8003a30:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003a34:	4b32      	ldr	r3, [pc, #200]	@ (8003b00 <NLLS+0x28a8>)
 8003a36:	443b      	add	r3, r7
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003a40:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	edd3 7a00 	vldr	s15, [r3]
 8003a4c:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <NLLS+0x28b8>)
 8003a4e:	443b      	add	r3, r7
 8003a50:	ed93 5a00 	vldr	s10, [r3]
 8003a54:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003a58:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003a5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003a60:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003a64:	4b23      	ldr	r3, [pc, #140]	@ (8003af4 <NLLS+0x289c>)
 8003a66:	443b      	add	r3, r7
 8003a68:	edd3 7a00 	vldr	s15, [r3]
 8003a6c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003a70:	4b21      	ldr	r3, [pc, #132]	@ (8003af8 <NLLS+0x28a0>)
 8003a72:	443b      	add	r3, r7
 8003a74:	edd3 7a00 	vldr	s15, [r3]
 8003a78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a7c:	4b22      	ldr	r3, [pc, #136]	@ (8003b08 <NLLS+0x28b0>)
 8003a7e:	443b      	add	r3, r7
 8003a80:	edd3 7a00 	vldr	s15, [r3]
 8003a84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a88:	4b22      	ldr	r3, [pc, #136]	@ (8003b14 <NLLS+0x28bc>)
 8003a8a:	443b      	add	r3, r7
 8003a8c:	edd3 7a00 	vldr	s15, [r3]
 8003a90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a94:	4b20      	ldr	r3, [pc, #128]	@ (8003b18 <NLLS+0x28c0>)
 8003a96:	443b      	add	r3, r7
 8003a98:	edd3 7a00 	vldr	s15, [r3]
 8003a9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003aa0:	4b16      	ldr	r3, [pc, #88]	@ (8003afc <NLLS+0x28a4>)
 8003aa2:	443b      	add	r3, r7
 8003aa4:	edd3 7a00 	vldr	s15, [r3]
 8003aa8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003aac:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab4:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003ab8:	443b      	add	r3, r7
 8003aba:	4619      	mov	r1, r3
 8003abc:	4b10      	ldr	r3, [pc, #64]	@ (8003b00 <NLLS+0x28a8>)
 8003abe:	443b      	add	r3, r7
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	f641 6361 	movw	r3, #7777	@ 0x1e61
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3bf0      	subs	r3, #240	@ 0xf0
 8003ace:	edc3 7a00 	vstr	s15, [r3]

            mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b0c <NLLS+0x28b4>)
 8003ad4:	443b      	add	r3, r7
 8003ad6:	edd3 7a00 	vldr	s15, [r3]
 8003ada:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003ade:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <NLLS+0x28a0>)
 8003ae0:	443b      	add	r3, r7
 8003ae2:	edd3 6a00 	vldr	s13, [r3]
 8003ae6:	4b08      	ldr	r3, [pc, #32]	@ (8003b08 <NLLS+0x28b0>)
 8003ae8:	443b      	add	r3, r7
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	e019      	b.n	8003b24 <NLLS+0x28cc>
 8003af0:	00016fd4 	.word	0x00016fd4
 8003af4:	00016fe0 	.word	0x00016fe0
 8003af8:	00016fdc 	.word	0x00016fdc
 8003afc:	00016f74 	.word	0x00016f74
 8003b00:	00016fb0 	.word	0x00016fb0
 8003b04:	00016fcc 	.word	0x00016fcc
 8003b08:	00016fd8 	.word	0x00016fd8
 8003b0c:	00016f7c 	.word	0x00016f7c
 8003b10:	00016fd0 	.word	0x00016fd0
 8003b14:	00016f70 	.word	0x00016f70
 8003b18:	00016f78 	.word	0x00016f78
 8003b1c:	00016f80 	.word	0x00016f80
 8003b20:	00016f84 	.word	0x00016f84
 8003b24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b28:	4bc0      	ldr	r3, [pc, #768]	@ (8003e2c <NLLS+0x2bd4>)
 8003b2a:	443b      	add	r3, r7
 8003b2c:	ed93 6a00 	vldr	s12, [r3]
 8003b30:	4bbf      	ldr	r3, [pc, #764]	@ (8003e30 <NLLS+0x2bd8>)
 8003b32:	443b      	add	r3, r7
 8003b34:	edd3 7a00 	vldr	s15, [r3]
 8003b38:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b3c:	4bbd      	ldr	r3, [pc, #756]	@ (8003e34 <NLLS+0x2bdc>)
 8003b3e:	443b      	add	r3, r7
 8003b40:	edd3 5a00 	vldr	s11, [r3]
 8003b44:	4bbc      	ldr	r3, [pc, #752]	@ (8003e38 <NLLS+0x2be0>)
 8003b46:	443b      	add	r3, r7
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003b50:	4bba      	ldr	r3, [pc, #744]	@ (8003e3c <NLLS+0x2be4>)
 8003b52:	443b      	add	r3, r7
 8003b54:	edd3 7a00 	vldr	s15, [r3]
 8003b58:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003b5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003b60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b64:	4bb6      	ldr	r3, [pc, #728]	@ (8003e40 <NLLS+0x2be8>)
 8003b66:	443b      	add	r3, r7
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003b70:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	edd3 7a00 	vldr	s15, [r3]
 8003b7c:	4bb1      	ldr	r3, [pc, #708]	@ (8003e44 <NLLS+0x2bec>)
 8003b7e:	443b      	add	r3, r7
 8003b80:	ed93 6a00 	vldr	s12, [r3]
 8003b84:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003b88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b8c:	4bae      	ldr	r3, [pc, #696]	@ (8003e48 <NLLS+0x2bf0>)
 8003b8e:	443b      	add	r3, r7
 8003b90:	ed93 6a00 	vldr	s12, [r3]
 8003b94:	4bad      	ldr	r3, [pc, #692]	@ (8003e4c <NLLS+0x2bf4>)
 8003b96:	443b      	add	r3, r7
 8003b98:	edd3 7a00 	vldr	s15, [r3]
 8003b9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003ba0:	4ba5      	ldr	r3, [pc, #660]	@ (8003e38 <NLLS+0x2be0>)
 8003ba2:	443b      	add	r3, r7
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bac:	4ba4      	ldr	r3, [pc, #656]	@ (8003e40 <NLLS+0x2be8>)
 8003bae:	443b      	add	r3, r7
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003bb8:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	4ba2      	ldr	r3, [pc, #648]	@ (8003e50 <NLLS+0x2bf8>)
 8003bc6:	443b      	add	r3, r7
 8003bc8:	edd3 5a00 	vldr	s11, [r3]
 8003bcc:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003bd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003bd4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003bd8:	4b9b      	ldr	r3, [pc, #620]	@ (8003e48 <NLLS+0x2bf0>)
 8003bda:	443b      	add	r3, r7
 8003bdc:	ed93 6a00 	vldr	s12, [r3]
 8003be0:	4b9c      	ldr	r3, [pc, #624]	@ (8003e54 <NLLS+0x2bfc>)
 8003be2:	443b      	add	r3, r7
 8003be4:	edd3 7a00 	vldr	s15, [r3]
 8003be8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bec:	4b8f      	ldr	r3, [pc, #572]	@ (8003e2c <NLLS+0x2bd4>)
 8003bee:	443b      	add	r3, r7
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bf8:	4b91      	ldr	r3, [pc, #580]	@ (8003e40 <NLLS+0x2be8>)
 8003bfa:	443b      	add	r3, r7
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003c04:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	edd3 7a00 	vldr	s15, [r3]
 8003c10:	4b91      	ldr	r3, [pc, #580]	@ (8003e58 <NLLS+0x2c00>)
 8003c12:	443b      	add	r3, r7
 8003c14:	edd3 5a00 	vldr	s11, [r3]
 8003c18:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003c1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c24:	4b89      	ldr	r3, [pc, #548]	@ (8003e4c <NLLS+0x2bf4>)
 8003c26:	443b      	add	r3, r7
 8003c28:	ed93 6a00 	vldr	s12, [r3]
 8003c2c:	4b89      	ldr	r3, [pc, #548]	@ (8003e54 <NLLS+0x2bfc>)
 8003c2e:	443b      	add	r3, r7
 8003c30:	edd3 7a00 	vldr	s15, [r3]
 8003c34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c38:	4b7c      	ldr	r3, [pc, #496]	@ (8003e2c <NLLS+0x2bd4>)
 8003c3a:	443b      	add	r3, r7
 8003c3c:	edd3 5a00 	vldr	s11, [r3]
 8003c40:	4b7b      	ldr	r3, [pc, #492]	@ (8003e30 <NLLS+0x2bd8>)
 8003c42:	443b      	add	r3, r7
 8003c44:	edd3 7a00 	vldr	s15, [r3]
 8003c48:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003c4c:	4b79      	ldr	r3, [pc, #484]	@ (8003e34 <NLLS+0x2bdc>)
 8003c4e:	443b      	add	r3, r7
 8003c50:	ed93 5a00 	vldr	s10, [r3]
 8003c54:	4b78      	ldr	r3, [pc, #480]	@ (8003e38 <NLLS+0x2be0>)
 8003c56:	443b      	add	r3, r7
 8003c58:	edd3 7a00 	vldr	s15, [r3]
 8003c5c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003c60:	4b76      	ldr	r3, [pc, #472]	@ (8003e3c <NLLS+0x2be4>)
 8003c62:	443b      	add	r3, r7
 8003c64:	edd3 7a00 	vldr	s15, [r3]
 8003c68:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003c6c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003c70:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c74:	4b72      	ldr	r3, [pc, #456]	@ (8003e40 <NLLS+0x2be8>)
 8003c76:	443b      	add	r3, r7
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003c80:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	4413      	add	r3, r2
 8003c88:	edd3 7a00 	vldr	s15, [r3]
 8003c8c:	4b6d      	ldr	r3, [pc, #436]	@ (8003e44 <NLLS+0x2bec>)
 8003c8e:	443b      	add	r3, r7
 8003c90:	edd3 5a00 	vldr	s11, [r3]
 8003c94:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003c98:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e48 <NLLS+0x2bf0>)
 8003c9e:	443b      	add	r3, r7
 8003ca0:	edd3 5a00 	vldr	s11, [r3]
 8003ca4:	4b69      	ldr	r3, [pc, #420]	@ (8003e4c <NLLS+0x2bf4>)
 8003ca6:	443b      	add	r3, r7
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003cb0:	4b61      	ldr	r3, [pc, #388]	@ (8003e38 <NLLS+0x2be0>)
 8003cb2:	443b      	add	r3, r7
 8003cb4:	edd3 7a00 	vldr	s15, [r3]
 8003cb8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003cbc:	4b60      	ldr	r3, [pc, #384]	@ (8003e40 <NLLS+0x2be8>)
 8003cbe:	443b      	add	r3, r7
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003cc8:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	4413      	add	r3, r2
 8003cd0:	edd3 7a00 	vldr	s15, [r3]
 8003cd4:	4b5e      	ldr	r3, [pc, #376]	@ (8003e50 <NLLS+0x2bf8>)
 8003cd6:	443b      	add	r3, r7
 8003cd8:	ed93 5a00 	vldr	s10, [r3]
 8003cdc:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003ce0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003ce4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003ce8:	4b57      	ldr	r3, [pc, #348]	@ (8003e48 <NLLS+0x2bf0>)
 8003cea:	443b      	add	r3, r7
 8003cec:	edd3 5a00 	vldr	s11, [r3]
 8003cf0:	4b58      	ldr	r3, [pc, #352]	@ (8003e54 <NLLS+0x2bfc>)
 8003cf2:	443b      	add	r3, r7
 8003cf4:	edd3 7a00 	vldr	s15, [r3]
 8003cf8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8003e2c <NLLS+0x2bd4>)
 8003cfe:	443b      	add	r3, r7
 8003d00:	edd3 7a00 	vldr	s15, [r3]
 8003d04:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003d08:	4b4d      	ldr	r3, [pc, #308]	@ (8003e40 <NLLS+0x2be8>)
 8003d0a:	443b      	add	r3, r7
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003d14:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	edd3 7a00 	vldr	s15, [r3]
 8003d20:	4b4d      	ldr	r3, [pc, #308]	@ (8003e58 <NLLS+0x2c00>)
 8003d22:	443b      	add	r3, r7
 8003d24:	ed93 5a00 	vldr	s10, [r3]
 8003d28:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003d2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003d30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d38:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d3c:	4b42      	ldr	r3, [pc, #264]	@ (8003e48 <NLLS+0x2bf0>)
 8003d3e:	443b      	add	r3, r7
 8003d40:	edd3 7a00 	vldr	s15, [r3]
 8003d44:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003d48:	4b40      	ldr	r3, [pc, #256]	@ (8003e4c <NLLS+0x2bf4>)
 8003d4a:	443b      	add	r3, r7
 8003d4c:	edd3 7a00 	vldr	s15, [r3]
 8003d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d54:	4b3d      	ldr	r3, [pc, #244]	@ (8003e4c <NLLS+0x2bf4>)
 8003d56:	443b      	add	r3, r7
 8003d58:	edd3 7a00 	vldr	s15, [r3]
 8003d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d60:	4b3c      	ldr	r3, [pc, #240]	@ (8003e54 <NLLS+0x2bfc>)
 8003d62:	443b      	add	r3, r7
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d6c:	4b39      	ldr	r3, [pc, #228]	@ (8003e54 <NLLS+0x2bfc>)
 8003d6e:	443b      	add	r3, r7
 8003d70:	edd3 7a00 	vldr	s15, [r3]
 8003d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d78:	4b2e      	ldr	r3, [pc, #184]	@ (8003e34 <NLLS+0x2bdc>)
 8003d7a:	443b      	add	r3, r7
 8003d7c:	edd3 7a00 	vldr	s15, [r3]
 8003d80:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003d84:	4b2b      	ldr	r3, [pc, #172]	@ (8003e34 <NLLS+0x2bdc>)
 8003d86:	443b      	add	r3, r7
 8003d88:	edd3 7a00 	vldr	s15, [r3]
 8003d8c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d94:	4b31      	ldr	r3, [pc, #196]	@ (8003e5c <NLLS+0x2c04>)
 8003d96:	443b      	add	r3, r7
 8003d98:	edd3 7a00 	vldr	s15, [r3]
 8003d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003da0:	4b2e      	ldr	r3, [pc, #184]	@ (8003e5c <NLLS+0x2c04>)
 8003da2:	443b      	add	r3, r7
 8003da4:	edd3 7a00 	vldr	s15, [r3]
 8003da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dac:	4b22      	ldr	r3, [pc, #136]	@ (8003e38 <NLLS+0x2be0>)
 8003dae:	443b      	add	r3, r7
 8003db0:	edd3 7a00 	vldr	s15, [r3]
 8003db4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc0:	4b22      	ldr	r3, [pc, #136]	@ (8003e4c <NLLS+0x2bf4>)
 8003dc2:	443b      	add	r3, r7
 8003dc4:	edd3 6a00 	vldr	s13, [r3]
 8003dc8:	4b22      	ldr	r3, [pc, #136]	@ (8003e54 <NLLS+0x2bfc>)
 8003dca:	443b      	add	r3, r7
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003dd4:	4b17      	ldr	r3, [pc, #92]	@ (8003e34 <NLLS+0x2bdc>)
 8003dd6:	443b      	add	r3, r7
 8003dd8:	ed93 6a00 	vldr	s12, [r3]
 8003ddc:	4b14      	ldr	r3, [pc, #80]	@ (8003e30 <NLLS+0x2bd8>)
 8003dde:	443b      	add	r3, r7
 8003de0:	edd3 7a00 	vldr	s15, [r3]
 8003de4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003de8:	4b13      	ldr	r3, [pc, #76]	@ (8003e38 <NLLS+0x2be0>)
 8003dea:	443b      	add	r3, r7
 8003dec:	edd3 5a00 	vldr	s11, [r3]
 8003df0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e2c <NLLS+0x2bd4>)
 8003df2:	443b      	add	r3, r7
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8003e3c <NLLS+0x2be4>)
 8003dfe:	443b      	add	r3, r7
 8003e00:	edd3 7a00 	vldr	s15, [r3]
 8003e04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003e08:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003e0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e10:	4b0b      	ldr	r3, [pc, #44]	@ (8003e40 <NLLS+0x2be8>)
 8003e12:	443b      	add	r3, r7
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003e1c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	4413      	add	r3, r2
 8003e24:	edd3 7a00 	vldr	s15, [r3]
 8003e28:	e01a      	b.n	8003e60 <NLLS+0x2c08>
 8003e2a:	bf00      	nop
 8003e2c:	00016f7c 	.word	0x00016f7c
 8003e30:	00016f80 	.word	0x00016f80
 8003e34:	00016f70 	.word	0x00016f70
 8003e38:	00016f74 	.word	0x00016f74
 8003e3c:	00016f84 	.word	0x00016f84
 8003e40:	00016fb0 	.word	0x00016fb0
 8003e44:	00016fd4 	.word	0x00016fd4
 8003e48:	00016fe0 	.word	0x00016fe0
 8003e4c:	00016fdc 	.word	0x00016fdc
 8003e50:	00016fcc 	.word	0x00016fcc
 8003e54:	00016fd8 	.word	0x00016fd8
 8003e58:	00016fd0 	.word	0x00016fd0
 8003e5c:	00016f78 	.word	0x00016f78
 8003e60:	4bb3      	ldr	r3, [pc, #716]	@ (8004130 <NLLS+0x2ed8>)
 8003e62:	443b      	add	r3, r7
 8003e64:	ed93 6a00 	vldr	s12, [r3]
 8003e68:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e70:	4bb0      	ldr	r3, [pc, #704]	@ (8004134 <NLLS+0x2edc>)
 8003e72:	443b      	add	r3, r7
 8003e74:	ed93 6a00 	vldr	s12, [r3]
 8003e78:	4baf      	ldr	r3, [pc, #700]	@ (8004138 <NLLS+0x2ee0>)
 8003e7a:	443b      	add	r3, r7
 8003e7c:	edd3 7a00 	vldr	s15, [r3]
 8003e80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e84:	4bad      	ldr	r3, [pc, #692]	@ (800413c <NLLS+0x2ee4>)
 8003e86:	443b      	add	r3, r7
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e90:	4bab      	ldr	r3, [pc, #684]	@ (8004140 <NLLS+0x2ee8>)
 8003e92:	443b      	add	r3, r7
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003e9c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	edd3 7a00 	vldr	s15, [r3]
 8003ea8:	4ba6      	ldr	r3, [pc, #664]	@ (8004144 <NLLS+0x2eec>)
 8003eaa:	443b      	add	r3, r7
 8003eac:	edd3 5a00 	vldr	s11, [r3]
 8003eb0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003eb4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003eb8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ebc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003ec0:	4ba1      	ldr	r3, [pc, #644]	@ (8004148 <NLLS+0x2ef0>)
 8003ec2:	443b      	add	r3, r7
 8003ec4:	ed93 6a00 	vldr	s12, [r3]
 8003ec8:	4b9b      	ldr	r3, [pc, #620]	@ (8004138 <NLLS+0x2ee0>)
 8003eca:	443b      	add	r3, r7
 8003ecc:	edd3 7a00 	vldr	s15, [r3]
 8003ed0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003ed4:	4b9d      	ldr	r3, [pc, #628]	@ (800414c <NLLS+0x2ef4>)
 8003ed6:	443b      	add	r3, r7
 8003ed8:	edd3 5a00 	vldr	s11, [r3]
 8003edc:	4b9c      	ldr	r3, [pc, #624]	@ (8004150 <NLLS+0x2ef8>)
 8003ede:	443b      	add	r3, r7
 8003ee0:	edd3 7a00 	vldr	s15, [r3]
 8003ee4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003ee8:	4b94      	ldr	r3, [pc, #592]	@ (800413c <NLLS+0x2ee4>)
 8003eea:	443b      	add	r3, r7
 8003eec:	ed93 5a00 	vldr	s10, [r3]
 8003ef0:	4b98      	ldr	r3, [pc, #608]	@ (8004154 <NLLS+0x2efc>)
 8003ef2:	443b      	add	r3, r7
 8003ef4:	edd3 7a00 	vldr	s15, [r3]
 8003ef8:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003efc:	4b96      	ldr	r3, [pc, #600]	@ (8004158 <NLLS+0x2f00>)
 8003efe:	443b      	add	r3, r7
 8003f00:	edd3 7a00 	vldr	s15, [r3]
 8003f04:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003f08:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003f0c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f10:	4b8b      	ldr	r3, [pc, #556]	@ (8004140 <NLLS+0x2ee8>)
 8003f12:	443b      	add	r3, r7
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003f1c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	4413      	add	r3, r2
 8003f24:	edd3 7a00 	vldr	s15, [r3]
 8003f28:	4b81      	ldr	r3, [pc, #516]	@ (8004130 <NLLS+0x2ed8>)
 8003f2a:	443b      	add	r3, r7
 8003f2c:	edd3 5a00 	vldr	s11, [r3]
 8003f30:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003f34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f38:	4b7e      	ldr	r3, [pc, #504]	@ (8004134 <NLLS+0x2edc>)
 8003f3a:	443b      	add	r3, r7
 8003f3c:	edd3 5a00 	vldr	s11, [r3]
 8003f40:	4b81      	ldr	r3, [pc, #516]	@ (8004148 <NLLS+0x2ef0>)
 8003f42:	443b      	add	r3, r7
 8003f44:	edd3 7a00 	vldr	s15, [r3]
 8003f48:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003f4c:	4b81      	ldr	r3, [pc, #516]	@ (8004154 <NLLS+0x2efc>)
 8003f4e:	443b      	add	r3, r7
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003f58:	4b79      	ldr	r3, [pc, #484]	@ (8004140 <NLLS+0x2ee8>)
 8003f5a:	443b      	add	r3, r7
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003f64:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	edd3 7a00 	vldr	s15, [r3]
 8003f70:	4b7a      	ldr	r3, [pc, #488]	@ (800415c <NLLS+0x2f04>)
 8003f72:	443b      	add	r3, r7
 8003f74:	ed93 5a00 	vldr	s10, [r3]
 8003f78:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003f7c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003f80:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003f84:	4b6b      	ldr	r3, [pc, #428]	@ (8004134 <NLLS+0x2edc>)
 8003f86:	443b      	add	r3, r7
 8003f88:	edd3 5a00 	vldr	s11, [r3]
 8003f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004138 <NLLS+0x2ee0>)
 8003f8e:	443b      	add	r3, r7
 8003f90:	edd3 7a00 	vldr	s15, [r3]
 8003f94:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003f98:	4b6c      	ldr	r3, [pc, #432]	@ (800414c <NLLS+0x2ef4>)
 8003f9a:	443b      	add	r3, r7
 8003f9c:	edd3 7a00 	vldr	s15, [r3]
 8003fa0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003fa4:	4b66      	ldr	r3, [pc, #408]	@ (8004140 <NLLS+0x2ee8>)
 8003fa6:	443b      	add	r3, r7
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003fb0:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	edd3 7a00 	vldr	s15, [r3]
 8003fbc:	4b61      	ldr	r3, [pc, #388]	@ (8004144 <NLLS+0x2eec>)
 8003fbe:	443b      	add	r3, r7
 8003fc0:	ed93 5a00 	vldr	s10, [r3]
 8003fc4:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003fc8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003fcc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003fd0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003fd4:	4b57      	ldr	r3, [pc, #348]	@ (8004134 <NLLS+0x2edc>)
 8003fd6:	443b      	add	r3, r7
 8003fd8:	edd3 7a00 	vldr	s15, [r3]
 8003fdc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003fe0:	4b59      	ldr	r3, [pc, #356]	@ (8004148 <NLLS+0x2ef0>)
 8003fe2:	443b      	add	r3, r7
 8003fe4:	edd3 7a00 	vldr	s15, [r3]
 8003fe8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fec:	4b56      	ldr	r3, [pc, #344]	@ (8004148 <NLLS+0x2ef0>)
 8003fee:	443b      	add	r3, r7
 8003ff0:	edd3 7a00 	vldr	s15, [r3]
 8003ff4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8004138 <NLLS+0x2ee0>)
 8003ffa:	443b      	add	r3, r7
 8003ffc:	edd3 7a00 	vldr	s15, [r3]
 8004000:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004004:	4b4c      	ldr	r3, [pc, #304]	@ (8004138 <NLLS+0x2ee0>)
 8004006:	443b      	add	r3, r7
 8004008:	edd3 7a00 	vldr	s15, [r3]
 800400c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004010:	4b4a      	ldr	r3, [pc, #296]	@ (800413c <NLLS+0x2ee4>)
 8004012:	443b      	add	r3, r7
 8004014:	edd3 7a00 	vldr	s15, [r3]
 8004018:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800401c:	4b47      	ldr	r3, [pc, #284]	@ (800413c <NLLS+0x2ee4>)
 800401e:	443b      	add	r3, r7
 8004020:	edd3 7a00 	vldr	s15, [r3]
 8004024:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004028:	4b4d      	ldr	r3, [pc, #308]	@ (8004160 <NLLS+0x2f08>)
 800402a:	443b      	add	r3, r7
 800402c:	edd3 7a00 	vldr	s15, [r3]
 8004030:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004034:	4b4a      	ldr	r3, [pc, #296]	@ (8004160 <NLLS+0x2f08>)
 8004036:	443b      	add	r3, r7
 8004038:	edd3 7a00 	vldr	s15, [r3]
 800403c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004040:	4b44      	ldr	r3, [pc, #272]	@ (8004154 <NLLS+0x2efc>)
 8004042:	443b      	add	r3, r7
 8004044:	edd3 7a00 	vldr	s15, [r3]
 8004048:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800404c:	4b41      	ldr	r3, [pc, #260]	@ (8004154 <NLLS+0x2efc>)
 800404e:	443b      	add	r3, r7
 8004050:	edd3 7a00 	vldr	s15, [r3]
 8004054:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004058:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800405c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004060:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8004064:	443b      	add	r3, r7
 8004066:	4619      	mov	r1, r3
 8004068:	4b35      	ldr	r3, [pc, #212]	@ (8004140 <NLLS+0x2ee8>)
 800406a:	443b      	add	r3, r7
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	3bf0      	subs	r3, #240	@ 0xf0
 800407a:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i < tam; i++)
 800407e:	4b30      	ldr	r3, [pc, #192]	@ (8004140 <NLLS+0x2ee8>)
 8004080:	443b      	add	r3, r7
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	4a2e      	ldr	r2, [pc, #184]	@ (8004140 <NLLS+0x2ee8>)
 8004088:	443a      	add	r2, r7
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	4b2c      	ldr	r3, [pc, #176]	@ (8004140 <NLLS+0x2ee8>)
 800408e:	443b      	add	r3, r7
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f240 4256 	movw	r2, #1110	@ 0x456
 8004096:	4293      	cmp	r3, r2
 8004098:	f77d a9de 	ble.w	8001458 <NLLS+0x200>
        }

        J = 0;
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	4a30      	ldr	r2, [pc, #192]	@ (8004164 <NLLS+0x2f0c>)
 80040a2:	443a      	add	r2, r7
 80040a4:	6013      	str	r3, [r2, #0]

        for(int i=0; i < tam; i++)
 80040a6:	2300      	movs	r3, #0
 80040a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004168 <NLLS+0x2f10>)
 80040aa:	443a      	add	r2, r7
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e02c      	b.n	800410a <NLLS+0x2eb2>
        {
            J += (e[i] * e[i])/2;
 80040b0:	4b2e      	ldr	r3, [pc, #184]	@ (800416c <NLLS+0x2f14>)
 80040b2:	443b      	add	r3, r7
 80040b4:	f5a3 7256 	sub.w	r2, r3, #856	@ 0x358
 80040b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004168 <NLLS+0x2f10>)
 80040ba:	443b      	add	r3, r7
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	ed93 7a00 	vldr	s14, [r3]
 80040c6:	4b29      	ldr	r3, [pc, #164]	@ (800416c <NLLS+0x2f14>)
 80040c8:	443b      	add	r3, r7
 80040ca:	f5a3 7256 	sub.w	r2, r3, #856	@ 0x358
 80040ce:	4b26      	ldr	r3, [pc, #152]	@ (8004168 <NLLS+0x2f10>)
 80040d0:	443b      	add	r3, r7
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80040e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004164 <NLLS+0x2f0c>)
 80040ea:	443b      	add	r3, r7
 80040ec:	ed93 7a00 	vldr	s14, [r3]
 80040f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004164 <NLLS+0x2f0c>)
 80040f6:	443b      	add	r3, r7
 80040f8:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i < tam; i++)
 80040fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004168 <NLLS+0x2f10>)
 80040fe:	443b      	add	r3, r7
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	4a18      	ldr	r2, [pc, #96]	@ (8004168 <NLLS+0x2f10>)
 8004106:	443a      	add	r2, r7
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b17      	ldr	r3, [pc, #92]	@ (8004168 <NLLS+0x2f10>)
 800410c:	443b      	add	r3, r7
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f240 4256 	movw	r2, #1110	@ 0x456
 8004114:	4293      	cmp	r3, r2
 8004116:	ddcb      	ble.n	80040b0 <NLLS+0x2e58>
        }

        if(passo < 2)
 8004118:	4b15      	ldr	r3, [pc, #84]	@ (8004170 <NLLS+0x2f18>)
 800411a:	443b      	add	r3, r7
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d82a      	bhi.n	8004178 <NLLS+0x2f20>
        {
            error_ant = J;
 8004122:	4b10      	ldr	r3, [pc, #64]	@ (8004164 <NLLS+0x2f0c>)
 8004124:	443b      	add	r3, r7
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a12      	ldr	r2, [pc, #72]	@ (8004174 <NLLS+0x2f1c>)
 800412a:	443a      	add	r2, r7
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e054      	b.n	80041da <NLLS+0x2f82>
 8004130:	00016fd4 	.word	0x00016fd4
 8004134:	00016fe0 	.word	0x00016fe0
 8004138:	00016fd8 	.word	0x00016fd8
 800413c:	00016f70 	.word	0x00016f70
 8004140:	00016fb0 	.word	0x00016fb0
 8004144:	00016fd0 	.word	0x00016fd0
 8004148:	00016fdc 	.word	0x00016fdc
 800414c:	00016f7c 	.word	0x00016f7c
 8004150:	00016f80 	.word	0x00016f80
 8004154:	00016f74 	.word	0x00016f74
 8004158:	00016f84 	.word	0x00016f84
 800415c:	00016fcc 	.word	0x00016fcc
 8004160:	00016f78 	.word	0x00016f78
 8004164:	00016fb8 	.word	0x00016fb8
 8004168:	00016fac 	.word	0x00016fac
 800416c:	00014fe8 	.word	0x00014fe8
 8004170:	00016fe7 	.word	0x00016fe7
 8004174:	00016fbc 	.word	0x00016fbc
        }
        else
        {
            delta_J = 100*fabsf(J-error_ant)/J;
 8004178:	4b81      	ldr	r3, [pc, #516]	@ (8004380 <NLLS+0x3128>)
 800417a:	443b      	add	r3, r7
 800417c:	ed93 7a00 	vldr	s14, [r3]
 8004180:	4b80      	ldr	r3, [pc, #512]	@ (8004384 <NLLS+0x312c>)
 8004182:	443b      	add	r3, r7
 8004184:	edd3 7a00 	vldr	s15, [r3]
 8004188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800418c:	eef0 7ae7 	vabs.f32	s15, s15
 8004190:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8004388 <NLLS+0x3130>
 8004194:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004198:	4b79      	ldr	r3, [pc, #484]	@ (8004380 <NLLS+0x3128>)
 800419a:	443b      	add	r3, r7
 800419c:	ed93 7a00 	vldr	s14, [r3]
 80041a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a4:	4b79      	ldr	r3, [pc, #484]	@ (800438c <NLLS+0x3134>)
 80041a6:	443b      	add	r3, r7
 80041a8:	edc3 7a00 	vstr	s15, [r3]
            if(delta_J < 0.05)
 80041ac:	4b77      	ldr	r3, [pc, #476]	@ (800438c <NLLS+0x3134>)
 80041ae:	443b      	add	r3, r7
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	f7fc f9e9 	bl	8000588 <__aeabi_f2d>
 80041b6:	a370      	add	r3, pc, #448	@ (adr r3, 8004378 <NLLS+0x3120>)
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	f7fc fcae 	bl	8000b1c <__aeabi_dcmplt>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <NLLS+0x2f76>
            {
                loop = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	4a71      	ldr	r2, [pc, #452]	@ (8004390 <NLLS+0x3138>)
 80041ca:	443a      	add	r2, r7
 80041cc:	7013      	strb	r3, [r2, #0]
            }
            error_ant = J;
 80041ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004380 <NLLS+0x3128>)
 80041d0:	443b      	add	r3, r7
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004384 <NLLS+0x312c>)
 80041d6:	443a      	add	r2, r7
 80041d8:	6013      	str	r3, [r2, #0]
        }

        for(int i = 0; i < N; i++)
 80041da:	2300      	movs	r3, #0
 80041dc:	4a6d      	ldr	r2, [pc, #436]	@ (8004394 <NLLS+0x313c>)
 80041de:	443a      	add	r2, r7
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e091      	b.n	8004308 <NLLS+0x30b0>
        {
            for(int j = 0; j < N; j++)
 80041e4:	2300      	movs	r3, #0
 80041e6:	4a6c      	ldr	r2, [pc, #432]	@ (8004398 <NLLS+0x3140>)
 80041e8:	443a      	add	r2, r7
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	e07f      	b.n	80042ee <NLLS+0x3096>
            {
                Ht_H[i][j] = 0;
 80041ee:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80041f2:	443b      	add	r3, r7
 80041f4:	f5a3 710d 	sub.w	r1, r3, #564	@ 0x234
 80041f8:	4b66      	ldr	r3, [pc, #408]	@ (8004394 <NLLS+0x313c>)
 80041fa:	443b      	add	r3, r7
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	4a64      	ldr	r2, [pc, #400]	@ (8004398 <NLLS+0x3140>)
 8004206:	443a      	add	r2, r7
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
                for(int k = 0; k < tam; k++)
 8004216:	2300      	movs	r3, #0
 8004218:	4a60      	ldr	r2, [pc, #384]	@ (800439c <NLLS+0x3144>)
 800421a:	443a      	add	r2, r7
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e058      	b.n	80042d2 <NLLS+0x307a>
                {
                    Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 8004220:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8004224:	443b      	add	r3, r7
 8004226:	f5a3 710d 	sub.w	r1, r3, #564	@ 0x234
 800422a:	4b5a      	ldr	r3, [pc, #360]	@ (8004394 <NLLS+0x313c>)
 800422c:	443b      	add	r3, r7
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	4a58      	ldr	r2, [pc, #352]	@ (8004398 <NLLS+0x3140>)
 8004238:	443a      	add	r2, r7
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	ed93 7a00 	vldr	s14, [r3]
 8004246:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 800424a:	443b      	add	r3, r7
 800424c:	4619      	mov	r1, r3
 800424e:	4b51      	ldr	r3, [pc, #324]	@ (8004394 <NLLS+0x313c>)
 8004250:	443b      	add	r3, r7
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f240 4257 	movw	r2, #1111	@ 0x457
 8004258:	fb03 f202 	mul.w	r2, r3, r2
 800425c:	4b4f      	ldr	r3, [pc, #316]	@ (800439c <NLLS+0x3144>)
 800425e:	443b      	add	r3, r7
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	3bf0      	subs	r3, #240	@ 0xf0
 800426a:	edd3 6a00 	vldr	s13, [r3]
 800426e:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8004272:	443b      	add	r3, r7
 8004274:	4619      	mov	r1, r3
 8004276:	4b48      	ldr	r3, [pc, #288]	@ (8004398 <NLLS+0x3140>)
 8004278:	443b      	add	r3, r7
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f240 4257 	movw	r2, #1111	@ 0x457
 8004280:	fb03 f202 	mul.w	r2, r3, r2
 8004284:	4b45      	ldr	r3, [pc, #276]	@ (800439c <NLLS+0x3144>)
 8004286:	443b      	add	r3, r7
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3bf0      	subs	r3, #240	@ 0xf0
 8004292:	edd3 7a00 	vldr	s15, [r3]
 8004296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800429a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800429e:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80042a2:	443b      	add	r3, r7
 80042a4:	f5a3 710d 	sub.w	r1, r3, #564	@ 0x234
 80042a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004394 <NLLS+0x313c>)
 80042aa:	443b      	add	r3, r7
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	4a38      	ldr	r2, [pc, #224]	@ (8004398 <NLLS+0x3140>)
 80042b6:	443a      	add	r2, r7
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	edc3 7a00 	vstr	s15, [r3]
                for(int k = 0; k < tam; k++)
 80042c4:	4b35      	ldr	r3, [pc, #212]	@ (800439c <NLLS+0x3144>)
 80042c6:	443b      	add	r3, r7
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	4a33      	ldr	r2, [pc, #204]	@ (800439c <NLLS+0x3144>)
 80042ce:	443a      	add	r2, r7
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b32      	ldr	r3, [pc, #200]	@ (800439c <NLLS+0x3144>)
 80042d4:	443b      	add	r3, r7
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f240 4256 	movw	r2, #1110	@ 0x456
 80042dc:	4293      	cmp	r3, r2
 80042de:	dd9f      	ble.n	8004220 <NLLS+0x2fc8>
            for(int j = 0; j < N; j++)
 80042e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004398 <NLLS+0x3140>)
 80042e2:	443b      	add	r3, r7
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3301      	adds	r3, #1
 80042e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004398 <NLLS+0x3140>)
 80042ea:	443a      	add	r2, r7
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004398 <NLLS+0x3140>)
 80042f0:	443b      	add	r3, r7
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	f77f af7a 	ble.w	80041ee <NLLS+0x2f96>
        for(int i = 0; i < N; i++)
 80042fa:	4b26      	ldr	r3, [pc, #152]	@ (8004394 <NLLS+0x313c>)
 80042fc:	443b      	add	r3, r7
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	4a24      	ldr	r2, [pc, #144]	@ (8004394 <NLLS+0x313c>)
 8004304:	443a      	add	r2, r7
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	4b22      	ldr	r3, [pc, #136]	@ (8004394 <NLLS+0x313c>)
 800430a:	443b      	add	r3, r7
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b08      	cmp	r3, #8
 8004310:	f77f af68 	ble.w	80041e4 <NLLS+0x2f8c>
                }
            }
        }

        inverter_matriz(Ht_H, inv);
 8004314:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <NLLS+0x3148>)
 8004316:	4b23      	ldr	r3, [pc, #140]	@ (80043a4 <NLLS+0x314c>)
 8004318:	4413      	add	r3, r2
 800431a:	19da      	adds	r2, r3, r7
 800431c:	4b22      	ldr	r3, [pc, #136]	@ (80043a8 <NLLS+0x3150>)
 800431e:	f503 33b7 	add.w	r3, r3, #93696	@ 0x16e00
 8004322:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004326:	443b      	add	r3, r7
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc fe7a 	bl	8001024 <inverter_matriz>

        for(int i = 0; i < N; i++)
 8004330:	2300      	movs	r3, #0
 8004332:	4a1e      	ldr	r2, [pc, #120]	@ (80043ac <NLLS+0x3154>)
 8004334:	443a      	add	r2, r7
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	e0b1      	b.n	800449e <NLLS+0x3246>
        {
            for(int j = 0; j < tam; j++)
 800433a:	2300      	movs	r3, #0
 800433c:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <NLLS+0x3158>)
 800433e:	443a      	add	r2, r7
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	e09d      	b.n	8004480 <NLLS+0x3228>
            {
                mul_mat[i][j] = 0;
 8004344:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8004348:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 800434c:	4b17      	ldr	r3, [pc, #92]	@ (80043ac <NLLS+0x3154>)
 800434e:	443b      	add	r3, r7
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f240 4157 	movw	r1, #1111	@ 0x457
 8004356:	fb03 f101 	mul.w	r1, r3, r1
 800435a:	4b15      	ldr	r3, [pc, #84]	@ (80043b0 <NLLS+0x3158>)
 800435c:	443b      	add	r3, r7
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	440b      	add	r3, r1
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
                for(int k = 0; k < N; k++)
 800436c:	2300      	movs	r3, #0
 800436e:	4a11      	ldr	r2, [pc, #68]	@ (80043b4 <NLLS+0x315c>)
 8004370:	443a      	add	r2, r7
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e078      	b.n	8004468 <NLLS+0x3210>
 8004376:	bf00      	nop
 8004378:	9999999a 	.word	0x9999999a
 800437c:	3fa99999 	.word	0x3fa99999
 8004380:	00016fb8 	.word	0x00016fb8
 8004384:	00016fbc 	.word	0x00016fbc
 8004388:	42c80000 	.word	0x42c80000
 800438c:	00016f6c 	.word	0x00016f6c
 8004390:	00016fe6 	.word	0x00016fe6
 8004394:	00016fa8 	.word	0x00016fa8
 8004398:	00016fa4 	.word	0x00016fa4
 800439c:	00016fa0 	.word	0x00016fa0
 80043a0:	ffff2c64 	.word	0xffff2c64
 80043a4:	00016fe8 	.word	0x00016fe8
 80043a8:	ffff2dcc 	.word	0xffff2dcc
 80043ac:	00016f9c 	.word	0x00016f9c
 80043b0:	00016f98 	.word	0x00016f98
 80043b4:	00016f94 	.word	0x00016f94
                {
                    mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 80043b8:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 80043bc:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 80043c0:	4b72      	ldr	r3, [pc, #456]	@ (800458c <NLLS+0x3334>)
 80043c2:	443b      	add	r3, r7
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f240 4157 	movw	r1, #1111	@ 0x457
 80043ca:	fb03 f101 	mul.w	r1, r3, r1
 80043ce:	4b70      	ldr	r3, [pc, #448]	@ (8004590 <NLLS+0x3338>)
 80043d0:	443b      	add	r3, r7
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	440b      	add	r3, r1
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	ed93 7a00 	vldr	s14, [r3]
 80043de:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80043e2:	443b      	add	r3, r7
 80043e4:	f5a3 7167 	sub.w	r1, r3, #924	@ 0x39c
 80043e8:	4b68      	ldr	r3, [pc, #416]	@ (800458c <NLLS+0x3334>)
 80043ea:	443b      	add	r3, r7
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	4a67      	ldr	r2, [pc, #412]	@ (8004594 <NLLS+0x333c>)
 80043f6:	443a      	add	r2, r7
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	edd3 6a00 	vldr	s13, [r3]
 8004404:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8004408:	443b      	add	r3, r7
 800440a:	4619      	mov	r1, r3
 800440c:	4b61      	ldr	r3, [pc, #388]	@ (8004594 <NLLS+0x333c>)
 800440e:	443b      	add	r3, r7
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f240 4257 	movw	r2, #1111	@ 0x457
 8004416:	fb03 f202 	mul.w	r2, r3, r2
 800441a:	4b5d      	ldr	r3, [pc, #372]	@ (8004590 <NLLS+0x3338>)
 800441c:	443b      	add	r3, r7
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	3bf0      	subs	r3, #240	@ 0xf0
 8004428:	edd3 7a00 	vldr	s15, [r3]
 800442c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004434:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8004438:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 800443c:	4b53      	ldr	r3, [pc, #332]	@ (800458c <NLLS+0x3334>)
 800443e:	443b      	add	r3, r7
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f240 4157 	movw	r1, #1111	@ 0x457
 8004446:	fb03 f101 	mul.w	r1, r3, r1
 800444a:	4b51      	ldr	r3, [pc, #324]	@ (8004590 <NLLS+0x3338>)
 800444c:	443b      	add	r3, r7
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	440b      	add	r3, r1
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	edc3 7a00 	vstr	s15, [r3]
                for(int k = 0; k < N; k++)
 800445a:	4b4e      	ldr	r3, [pc, #312]	@ (8004594 <NLLS+0x333c>)
 800445c:	443b      	add	r3, r7
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	4a4c      	ldr	r2, [pc, #304]	@ (8004594 <NLLS+0x333c>)
 8004464:	443a      	add	r2, r7
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b4a      	ldr	r3, [pc, #296]	@ (8004594 <NLLS+0x333c>)
 800446a:	443b      	add	r3, r7
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b08      	cmp	r3, #8
 8004470:	dda2      	ble.n	80043b8 <NLLS+0x3160>
            for(int j = 0; j < tam; j++)
 8004472:	4b47      	ldr	r3, [pc, #284]	@ (8004590 <NLLS+0x3338>)
 8004474:	443b      	add	r3, r7
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3301      	adds	r3, #1
 800447a:	4a45      	ldr	r2, [pc, #276]	@ (8004590 <NLLS+0x3338>)
 800447c:	443a      	add	r2, r7
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b43      	ldr	r3, [pc, #268]	@ (8004590 <NLLS+0x3338>)
 8004482:	443b      	add	r3, r7
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f240 4256 	movw	r2, #1110	@ 0x456
 800448a:	4293      	cmp	r3, r2
 800448c:	f77f af5a 	ble.w	8004344 <NLLS+0x30ec>
        for(int i = 0; i < N; i++)
 8004490:	4b3e      	ldr	r3, [pc, #248]	@ (800458c <NLLS+0x3334>)
 8004492:	443b      	add	r3, r7
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3301      	adds	r3, #1
 8004498:	4a3c      	ldr	r2, [pc, #240]	@ (800458c <NLLS+0x3334>)
 800449a:	443a      	add	r2, r7
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b3b      	ldr	r3, [pc, #236]	@ (800458c <NLLS+0x3334>)
 80044a0:	443b      	add	r3, r7
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	f77f af48 	ble.w	800433a <NLLS+0x30e2>
                }
            }
        }

        for(int i = 0; i < N; i++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004598 <NLLS+0x3340>)
 80044ae:	443a      	add	r2, r7
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e060      	b.n	8004576 <NLLS+0x331e>
        {
            Ht_e[i] = 0;
 80044b4:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80044b8:	443b      	add	r3, r7
 80044ba:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 80044be:	4b36      	ldr	r3, [pc, #216]	@ (8004598 <NLLS+0x3340>)
 80044c0:	443b      	add	r3, r7
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
            for(int j = 0; j < tam; j++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	4a32      	ldr	r2, [pc, #200]	@ (800459c <NLLS+0x3344>)
 80044d2:	443a      	add	r2, r7
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e040      	b.n	800455a <NLLS+0x3302>
            {
                Ht_e[i] += mul_mat[i][j]*e[j];
 80044d8:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80044dc:	443b      	add	r3, r7
 80044de:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 80044e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004598 <NLLS+0x3340>)
 80044e4:	443b      	add	r3, r7
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	ed93 7a00 	vldr	s14, [r3]
 80044f0:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 80044f4:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 80044f8:	4b27      	ldr	r3, [pc, #156]	@ (8004598 <NLLS+0x3340>)
 80044fa:	443b      	add	r3, r7
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f240 4157 	movw	r1, #1111	@ 0x457
 8004502:	fb03 f101 	mul.w	r1, r3, r1
 8004506:	4b25      	ldr	r3, [pc, #148]	@ (800459c <NLLS+0x3344>)
 8004508:	443b      	add	r3, r7
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	440b      	add	r3, r1
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	edd3 6a00 	vldr	s13, [r3]
 8004516:	4b22      	ldr	r3, [pc, #136]	@ (80045a0 <NLLS+0x3348>)
 8004518:	443b      	add	r3, r7
 800451a:	f5a3 7256 	sub.w	r2, r3, #856	@ 0x358
 800451e:	4b1f      	ldr	r3, [pc, #124]	@ (800459c <NLLS+0x3344>)
 8004520:	443b      	add	r3, r7
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	edd3 7a00 	vldr	s15, [r3]
 800452c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004534:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8004538:	443b      	add	r3, r7
 800453a:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 800453e:	4b16      	ldr	r3, [pc, #88]	@ (8004598 <NLLS+0x3340>)
 8004540:	443b      	add	r3, r7
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	edc3 7a00 	vstr	s15, [r3]
            for(int j = 0; j < tam; j++)
 800454c:	4b13      	ldr	r3, [pc, #76]	@ (800459c <NLLS+0x3344>)
 800454e:	443b      	add	r3, r7
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	4a11      	ldr	r2, [pc, #68]	@ (800459c <NLLS+0x3344>)
 8004556:	443a      	add	r2, r7
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b10      	ldr	r3, [pc, #64]	@ (800459c <NLLS+0x3344>)
 800455c:	443b      	add	r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f240 4256 	movw	r2, #1110	@ 0x456
 8004564:	4293      	cmp	r3, r2
 8004566:	ddb7      	ble.n	80044d8 <NLLS+0x3280>
        for(int i = 0; i < N; i++)
 8004568:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <NLLS+0x3340>)
 800456a:	443b      	add	r3, r7
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3301      	adds	r3, #1
 8004570:	4a09      	ldr	r2, [pc, #36]	@ (8004598 <NLLS+0x3340>)
 8004572:	443a      	add	r2, r7
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <NLLS+0x3340>)
 8004578:	443b      	add	r3, r7
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b08      	cmp	r3, #8
 800457e:	dd99      	ble.n	80044b4 <NLLS+0x325c>
            }
        }

        for(int i = 0; i < N; i++)
 8004580:	2300      	movs	r3, #0
 8004582:	4a08      	ldr	r2, [pc, #32]	@ (80045a4 <NLLS+0x334c>)
 8004584:	443a      	add	r2, r7
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	e03b      	b.n	8004602 <NLLS+0x33aa>
 800458a:	bf00      	nop
 800458c:	00016f9c 	.word	0x00016f9c
 8004590:	00016f98 	.word	0x00016f98
 8004594:	00016f94 	.word	0x00016f94
 8004598:	00016f90 	.word	0x00016f90
 800459c:	00016f8c 	.word	0x00016f8c
 80045a0:	00014fe8 	.word	0x00014fe8
 80045a4:	00016f88 	.word	0x00016f88
        {
            p0[i] += Ht_e[i];
 80045a8:	4b50      	ldr	r3, [pc, #320]	@ (80046ec <NLLS+0x3494>)
 80045aa:	443b      	add	r3, r7
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	f503 33b7 	add.w	r3, r3, #93696	@ 0x16e00
 80045b4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80045b8:	443b      	add	r3, r7
 80045ba:	3ba0      	subs	r3, #160	@ 0xa0
 80045bc:	ed93 7a00 	vldr	s14, [r3]
 80045c0:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80045c4:	443b      	add	r3, r7
 80045c6:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 80045ca:	4b48      	ldr	r3, [pc, #288]	@ (80046ec <NLLS+0x3494>)
 80045cc:	443b      	add	r3, r7
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	edd3 7a00 	vldr	s15, [r3]
 80045d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045dc:	4b43      	ldr	r3, [pc, #268]	@ (80046ec <NLLS+0x3494>)
 80045de:	443b      	add	r3, r7
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	f503 33b7 	add.w	r3, r3, #93696	@ 0x16e00
 80045e8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80045ec:	443b      	add	r3, r7
 80045ee:	3ba0      	subs	r3, #160	@ 0xa0
 80045f0:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i < N; i++)
 80045f4:	4b3d      	ldr	r3, [pc, #244]	@ (80046ec <NLLS+0x3494>)
 80045f6:	443b      	add	r3, r7
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	4a3b      	ldr	r2, [pc, #236]	@ (80046ec <NLLS+0x3494>)
 80045fe:	443a      	add	r2, r7
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	4b3a      	ldr	r3, [pc, #232]	@ (80046ec <NLLS+0x3494>)
 8004604:	443b      	add	r3, r7
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	ddcd      	ble.n	80045a8 <NLLS+0x3350>
        }

        passo++;
 800460c:	4b38      	ldr	r3, [pc, #224]	@ (80046f0 <NLLS+0x3498>)
 800460e:	443b      	add	r3, r7
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	3301      	adds	r3, #1
 8004614:	4a36      	ldr	r2, [pc, #216]	@ (80046f0 <NLLS+0x3498>)
 8004616:	443a      	add	r2, r7
 8004618:	7013      	strb	r3, [r2, #0]
    while(loop == 1)
 800461a:	4b36      	ldr	r3, [pc, #216]	@ (80046f4 <NLLS+0x349c>)
 800461c:	443b      	add	r3, r7
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	f43c ae65 	beq.w	80012f0 <NLLS+0x98>
    }
    p[0] = sx;
 8004626:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 800462a:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a31      	ldr	r2, [pc, #196]	@ (80046f8 <NLLS+0x34a0>)
 8004632:	443a      	add	r2, r7
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8004638:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 800463c:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3304      	adds	r3, #4
 8004644:	4a2d      	ldr	r2, [pc, #180]	@ (80046fc <NLLS+0x34a4>)
 8004646:	443a      	add	r2, r7
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 800464c:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8004650:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	4a29      	ldr	r2, [pc, #164]	@ (8004700 <NLLS+0x34a8>)
 800465a:	443a      	add	r2, r7
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8004660:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8004664:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	4a25      	ldr	r2, [pc, #148]	@ (8004704 <NLLS+0x34ac>)
 800466e:	443a      	add	r2, r7
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8004674:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8004678:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3310      	adds	r3, #16
 8004680:	4a21      	ldr	r2, [pc, #132]	@ (8004708 <NLLS+0x34b0>)
 8004682:	443a      	add	r2, r7
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 8004688:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 800468c:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	4a1d      	ldr	r2, [pc, #116]	@ (800470c <NLLS+0x34b4>)
 8004696:	443a      	add	r2, r7
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 800469c:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 80046a0:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3318      	adds	r3, #24
 80046a8:	4a19      	ldr	r2, [pc, #100]	@ (8004710 <NLLS+0x34b8>)
 80046aa:	443a      	add	r2, r7
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 80046b0:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 80046b4:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	331c      	adds	r3, #28
 80046bc:	4a15      	ldr	r2, [pc, #84]	@ (8004714 <NLLS+0x34bc>)
 80046be:	443a      	add	r2, r7
 80046c0:	6812      	ldr	r2, [r2, #0]
 80046c2:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 80046c4:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 80046c8:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3320      	adds	r3, #32
 80046d0:	4a11      	ldr	r2, [pc, #68]	@ (8004718 <NLLS+0x34c0>)
 80046d2:	443a      	add	r2, r7
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	601a      	str	r2, [r3, #0]

    return passo;
 80046d8:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <NLLS+0x3498>)
 80046da:	443b      	add	r3, r7
 80046dc:	781b      	ldrb	r3, [r3, #0]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	f507 37b7 	add.w	r7, r7, #93696	@ 0x16e00
 80046e4:	f507 77f4 	add.w	r7, r7, #488	@ 0x1e8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bdb0      	pop	{r4, r5, r7, pc}
 80046ec:	00016f88 	.word	0x00016f88
 80046f0:	00016fe7 	.word	0x00016fe7
 80046f4:	00016fe6 	.word	0x00016fe6
 80046f8:	00016fe0 	.word	0x00016fe0
 80046fc:	00016fdc 	.word	0x00016fdc
 8004700:	00016fd8 	.word	0x00016fd8
 8004704:	00016fd4 	.word	0x00016fd4
 8004708:	00016fd0 	.word	0x00016fd0
 800470c:	00016fcc 	.word	0x00016fcc
 8004710:	00016fc8 	.word	0x00016fc8
 8004714:	00016fc4 	.word	0x00016fc4
 8004718:	00016fc0 	.word	0x00016fc0

0800471c <ETS>:

void ETS(float *mx, float *my, float *mz, float *p)
{
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	ed2d 8b02 	vpush	{d8}
 8004722:	f5ad 3da6 	sub.w	sp, sp, #84992	@ 0x14c00
 8004726:	b0c9      	sub	sp, #292	@ 0x124
 8004728:	af00      	add	r7, sp, #0
 800472a:	f507 6452 	add.w	r4, r7, #3360	@ 0xd20
 800472e:	f6a4 5414 	subw	r4, r4, #3348	@ 0xd14
 8004732:	6020      	str	r0, [r4, #0]
 8004734:	f507 6052 	add.w	r0, r7, #3360	@ 0xd20
 8004738:	f6a0 5018 	subw	r0, r0, #3352	@ 0xd18
 800473c:	6001      	str	r1, [r0, #0]
 800473e:	f507 6152 	add.w	r1, r7, #3360	@ 0xd20
 8004742:	f6a1 511c 	subw	r1, r1, #3356	@ 0xd1c
 8004746:	600a      	str	r2, [r1, #0]
 8004748:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800474c:	f5a2 6252 	sub.w	r2, r2, #3360	@ 0xd20
 8004750:	6013      	str	r3, [r2, #0]
    //Cria a matriz H
    float mat_H[N][tam], my_2[tam];
    float H_Ht[N][N], inv[N][N];
    float mul_mat[N][tam];
    float X[N];
    float psi7 = 0, psi8 = 0, divs = 0, n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, bx = 0, by = 0, bz = 0, sx = 0, sy = 0, sz = 0, rho = 0, phi = 0, lambida = 0;
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	4a42      	ldr	r2, [pc, #264]	@ (8004860 <ETS+0x144>)
 8004758:	443a      	add	r2, r7
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	4a40      	ldr	r2, [pc, #256]	@ (8004864 <ETS+0x148>)
 8004762:	443a      	add	r2, r7
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	4a3f      	ldr	r2, [pc, #252]	@ (8004868 <ETS+0x14c>)
 800476c:	443a      	add	r2, r7
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	4a3d      	ldr	r2, [pc, #244]	@ (800486c <ETS+0x150>)
 8004776:	443a      	add	r2, r7
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	4a3c      	ldr	r2, [pc, #240]	@ (8004870 <ETS+0x154>)
 8004780:	443a      	add	r2, r7
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	4a3a      	ldr	r2, [pc, #232]	@ (8004874 <ETS+0x158>)
 800478a:	443a      	add	r2, r7
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	4a39      	ldr	r2, [pc, #228]	@ (8004878 <ETS+0x15c>)
 8004794:	443a      	add	r2, r7
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	4a37      	ldr	r2, [pc, #220]	@ (800487c <ETS+0x160>)
 800479e:	443a      	add	r2, r7
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	4a36      	ldr	r2, [pc, #216]	@ (8004880 <ETS+0x164>)
 80047a8:	443a      	add	r2, r7
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	4a34      	ldr	r2, [pc, #208]	@ (8004884 <ETS+0x168>)
 80047b2:	443a      	add	r2, r7
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	4a33      	ldr	r2, [pc, #204]	@ (8004888 <ETS+0x16c>)
 80047bc:	443a      	add	r2, r7
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	4a31      	ldr	r2, [pc, #196]	@ (800488c <ETS+0x170>)
 80047c6:	443a      	add	r2, r7
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	4a30      	ldr	r2, [pc, #192]	@ (8004890 <ETS+0x174>)
 80047d0:	443a      	add	r2, r7
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004894 <ETS+0x178>)
 80047da:	443a      	add	r2, r7
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004898 <ETS+0x17c>)
 80047e4:	443a      	add	r2, r7
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	4a2b      	ldr	r2, [pc, #172]	@ (800489c <ETS+0x180>)
 80047ee:	443a      	add	r2, r7
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	4a2a      	ldr	r2, [pc, #168]	@ (80048a0 <ETS+0x184>)
 80047f8:	443a      	add	r2, r7
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	4a28      	ldr	r2, [pc, #160]	@ (80048a4 <ETS+0x188>)
 8004802:	443a      	add	r2, r7
 8004804:	6013      	str	r3, [r2, #0]
    float X1_2 = 0, X2_2 = 0, X3_2 = 0, X4_2 = 0, X5_2 = 0, X6_2 = 0, X7_2 = 0, X8_2 = 0;
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	4a27      	ldr	r2, [pc, #156]	@ (80048a8 <ETS+0x18c>)
 800480c:	443a      	add	r2, r7
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <ETS+0x190>)
 8004816:	443a      	add	r2, r7
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	4a24      	ldr	r2, [pc, #144]	@ (80048b0 <ETS+0x194>)
 8004820:	443a      	add	r2, r7
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	4a22      	ldr	r2, [pc, #136]	@ (80048b4 <ETS+0x198>)
 800482a:	443a      	add	r2, r7
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	4a21      	ldr	r2, [pc, #132]	@ (80048b8 <ETS+0x19c>)
 8004834:	443a      	add	r2, r7
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <ETS+0x1a0>)
 800483e:	443a      	add	r2, r7
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	4a1e      	ldr	r2, [pc, #120]	@ (80048c0 <ETS+0x1a4>)
 8004848:	443a      	add	r2, r7
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	4a1c      	ldr	r2, [pc, #112]	@ (80048c4 <ETS+0x1a8>)
 8004852:	443a      	add	r2, r7
 8004854:	6013      	str	r3, [r2, #0]
    for(int i=0; i < tam; i++)
 8004856:	2300      	movs	r3, #0
 8004858:	4a1b      	ldr	r2, [pc, #108]	@ (80048c8 <ETS+0x1ac>)
 800485a:	443a      	add	r2, r7
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e186      	b.n	8004b6e <ETS+0x452>
 8004860:	00014cf8 	.word	0x00014cf8
 8004864:	00014cf4 	.word	0x00014cf4
 8004868:	00014cf0 	.word	0x00014cf0
 800486c:	00014cec 	.word	0x00014cec
 8004870:	00014ce8 	.word	0x00014ce8
 8004874:	00014ce4 	.word	0x00014ce4
 8004878:	00014ce0 	.word	0x00014ce0
 800487c:	00014cdc 	.word	0x00014cdc
 8004880:	00014cd8 	.word	0x00014cd8
 8004884:	00014cd4 	.word	0x00014cd4
 8004888:	00014cd0 	.word	0x00014cd0
 800488c:	00014ccc 	.word	0x00014ccc
 8004890:	00014cc8 	.word	0x00014cc8
 8004894:	00014cc4 	.word	0x00014cc4
 8004898:	00014cc0 	.word	0x00014cc0
 800489c:	00014cbc 	.word	0x00014cbc
 80048a0:	00014cb8 	.word	0x00014cb8
 80048a4:	00014cb4 	.word	0x00014cb4
 80048a8:	00014cb0 	.word	0x00014cb0
 80048ac:	00014cac 	.word	0x00014cac
 80048b0:	00014ca8 	.word	0x00014ca8
 80048b4:	00014ca4 	.word	0x00014ca4
 80048b8:	00014ca0 	.word	0x00014ca0
 80048bc:	00014c9c 	.word	0x00014c9c
 80048c0:	00014c98 	.word	0x00014c98
 80048c4:	00014c94 	.word	0x00014c94
 80048c8:	00014d1c 	.word	0x00014d1c
    {
        mat_H[0][i] = mx[i]*mx[i];
 80048cc:	4bb1      	ldr	r3, [pc, #708]	@ (8004b94 <ETS+0x478>)
 80048ce:	443b      	add	r3, r7
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80048d8:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	4413      	add	r3, r2
 80048e0:	ed93 7a00 	vldr	s14, [r3]
 80048e4:	4bab      	ldr	r3, [pc, #684]	@ (8004b94 <ETS+0x478>)
 80048e6:	443b      	add	r3, r7
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80048f0:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	4413      	add	r3, r2
 80048f8:	edd3 7a00 	vldr	s15, [r3]
 80048fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004900:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004904:	443b      	add	r3, r7
 8004906:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 800490a:	4ba2      	ldr	r3, [pc, #648]	@ (8004b94 <ETS+0x478>)
 800490c:	443b      	add	r3, r7
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	edc3 7a00 	vstr	s15, [r3]
        mat_H[1][i] = mx[i]*my[i];
 8004918:	4b9e      	ldr	r3, [pc, #632]	@ (8004b94 <ETS+0x478>)
 800491a:	443b      	add	r3, r7
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004924:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	4413      	add	r3, r2
 800492c:	ed93 7a00 	vldr	s14, [r3]
 8004930:	4b98      	ldr	r3, [pc, #608]	@ (8004b94 <ETS+0x478>)
 8004932:	443b      	add	r3, r7
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800493c:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	4413      	add	r3, r2
 8004944:	edd3 7a00 	vldr	s15, [r3]
 8004948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494c:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004950:	443b      	add	r3, r7
 8004952:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004956:	4b8f      	ldr	r3, [pc, #572]	@ (8004b94 <ETS+0x478>)
 8004958:	443b      	add	r3, r7
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f203 4357 	addw	r3, r3, #1111	@ 0x457
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	edc3 7a00 	vstr	s15, [r3]
        mat_H[2][i] = mx[i]*mz[i];
 8004968:	4b8a      	ldr	r3, [pc, #552]	@ (8004b94 <ETS+0x478>)
 800496a:	443b      	add	r3, r7
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004974:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	4413      	add	r3, r2
 800497c:	ed93 7a00 	vldr	s14, [r3]
 8004980:	4b84      	ldr	r3, [pc, #528]	@ (8004b94 <ETS+0x478>)
 8004982:	443b      	add	r3, r7
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800498c:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	4413      	add	r3, r2
 8004994:	edd3 7a00 	vldr	s15, [r3]
 8004998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499c:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 80049a0:	443b      	add	r3, r7
 80049a2:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 80049a6:	4b7b      	ldr	r3, [pc, #492]	@ (8004b94 <ETS+0x478>)
 80049a8:	443b      	add	r3, r7
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f603 03ae 	addw	r3, r3, #2222	@ 0x8ae
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	edc3 7a00 	vstr	s15, [r3]
        mat_H[3][i] = my[i]*mz[i];
 80049b8:	4b76      	ldr	r3, [pc, #472]	@ (8004b94 <ETS+0x478>)
 80049ba:	443b      	add	r3, r7
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80049c4:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	4413      	add	r3, r2
 80049cc:	ed93 7a00 	vldr	s14, [r3]
 80049d0:	4b70      	ldr	r3, [pc, #448]	@ (8004b94 <ETS+0x478>)
 80049d2:	443b      	add	r3, r7
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80049dc:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	4413      	add	r3, r2
 80049e4:	edd3 7a00 	vldr	s15, [r3]
 80049e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ec:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 80049f0:	443b      	add	r3, r7
 80049f2:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 80049f6:	4b67      	ldr	r3, [pc, #412]	@ (8004b94 <ETS+0x478>)
 80049f8:	443b      	add	r3, r7
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f603 5305 	addw	r3, r3, #3333	@ 0xd05
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	edc3 7a00 	vstr	s15, [r3]
        mat_H[4][i] = mz[i]*mz[i];
 8004a08:	4b62      	ldr	r3, [pc, #392]	@ (8004b94 <ETS+0x478>)
 8004a0a:	443b      	add	r3, r7
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004a14:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	ed93 7a00 	vldr	s14, [r3]
 8004a20:	4b5c      	ldr	r3, [pc, #368]	@ (8004b94 <ETS+0x478>)
 8004a22:	443b      	add	r3, r7
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004a2c:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	4413      	add	r3, r2
 8004a34:	edd3 7a00 	vldr	s15, [r3]
 8004a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3c:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004a40:	443b      	add	r3, r7
 8004a42:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004a46:	4b53      	ldr	r3, [pc, #332]	@ (8004b94 <ETS+0x478>)
 8004a48:	443b      	add	r3, r7
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	f241 135c 	movw	r3, #4444	@ 0x115c
 8004a50:	440b      	add	r3, r1
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	edc3 7a00 	vstr	s15, [r3]
        mat_H[5][i] = mx[i];
 8004a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b94 <ETS+0x478>)
 8004a5c:	443b      	add	r3, r7
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004a66:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004a74:	443b      	add	r3, r7
 8004a76:	f6a3 41c8 	subw	r1, r3, #3272	@ 0xcc8
 8004a7a:	4b46      	ldr	r3, [pc, #280]	@ (8004b94 <ETS+0x478>)
 8004a7c:	443b      	add	r3, r7
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8004a84:	4403      	add	r3, r0
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	601a      	str	r2, [r3, #0]
        mat_H[6][i] = my[i];
 8004a8c:	4b41      	ldr	r3, [pc, #260]	@ (8004b94 <ETS+0x478>)
 8004a8e:	443b      	add	r3, r7
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004a98:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004aa6:	443b      	add	r3, r7
 8004aa8:	f6a3 41c8 	subw	r1, r3, #3272	@ 0xcc8
 8004aac:	4b39      	ldr	r3, [pc, #228]	@ (8004b94 <ETS+0x478>)
 8004aae:	443b      	add	r3, r7
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	f641 230a 	movw	r3, #6666	@ 0x1a0a
 8004ab6:	4403      	add	r3, r0
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	601a      	str	r2, [r3, #0]
        mat_H[7][i] = mz[i];
 8004abe:	4b35      	ldr	r3, [pc, #212]	@ (8004b94 <ETS+0x478>)
 8004ac0:	443b      	add	r3, r7
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004aca:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004ad8:	443b      	add	r3, r7
 8004ada:	f6a3 41c8 	subw	r1, r3, #3272	@ 0xcc8
 8004ade:	4b2d      	ldr	r3, [pc, #180]	@ (8004b94 <ETS+0x478>)
 8004ae0:	443b      	add	r3, r7
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	f641 6361 	movw	r3, #7777	@ 0x1e61
 8004ae8:	4403      	add	r3, r0
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	601a      	str	r2, [r3, #0]
        mat_H[8][i] = 1;
 8004af0:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004af4:	443b      	add	r3, r7
 8004af6:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004afa:	4b26      	ldr	r3, [pc, #152]	@ (8004b94 <ETS+0x478>)
 8004afc:	443b      	add	r3, r7
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8004b04:	440b      	add	r3, r1
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004b0e:	601a      	str	r2, [r3, #0]
        my_2[i] = -(my[i]*my[i]);
 8004b10:	4b20      	ldr	r3, [pc, #128]	@ (8004b94 <ETS+0x478>)
 8004b12:	443b      	add	r3, r7
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004b1c:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	4413      	add	r3, r2
 8004b24:	ed93 7a00 	vldr	s14, [r3]
 8004b28:	4b1a      	ldr	r3, [pc, #104]	@ (8004b94 <ETS+0x478>)
 8004b2a:	443b      	add	r3, r7
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004b34:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	edd3 7a00 	vldr	s15, [r3]
 8004b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b44:	eef1 7a67 	vneg.f32	s15, s15
 8004b48:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8004b4c:	443b      	add	r3, r7
 8004b4e:	f6a3 6224 	subw	r2, r3, #3620	@ 0xe24
 8004b52:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <ETS+0x478>)
 8004b54:	443b      	add	r3, r7
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0; i < tam; i++)
 8004b60:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <ETS+0x478>)
 8004b62:	443b      	add	r3, r7
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3301      	adds	r3, #1
 8004b68:	4a0a      	ldr	r2, [pc, #40]	@ (8004b94 <ETS+0x478>)
 8004b6a:	443a      	add	r2, r7
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <ETS+0x478>)
 8004b70:	443b      	add	r3, r7
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f240 4256 	movw	r2, #1110	@ 0x456
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	f77f aea7 	ble.w	80048cc <ETS+0x1b0>
    }

    //Multiplicação da matriz H por sua transposta
    for(int i=0; i < N; i++)
 8004b7e:	2300      	movs	r3, #0
 8004b80:	4a05      	ldr	r2, [pc, #20]	@ (8004b98 <ETS+0x47c>)
 8004b82:	443a      	add	r2, r7
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e098      	b.n	8004cba <ETS+0x59e>
    {
        for(int j=0; j < N; j++)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4a04      	ldr	r2, [pc, #16]	@ (8004b9c <ETS+0x480>)
 8004b8c:	443a      	add	r2, r7
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	e086      	b.n	8004ca0 <ETS+0x584>
 8004b92:	bf00      	nop
 8004b94:	00014d1c 	.word	0x00014d1c
 8004b98:	00014d18 	.word	0x00014d18
 8004b9c:	00014d14 	.word	0x00014d14
        {
            H_Ht[i][j] = 0;
 8004ba0:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8004ba4:	443b      	add	r3, r7
 8004ba6:	f6a3 7168 	subw	r1, r3, #3944	@ 0xf68
 8004baa:	4ba7      	ldr	r3, [pc, #668]	@ (8004e48 <ETS+0x72c>)
 8004bac:	443b      	add	r3, r7
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	4aa5      	ldr	r2, [pc, #660]	@ (8004e4c <ETS+0x730>)
 8004bb8:	443a      	add	r2, r7
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
            for(int k = 0; k < tam; k++)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4aa1      	ldr	r2, [pc, #644]	@ (8004e50 <ETS+0x734>)
 8004bcc:	443a      	add	r2, r7
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	e058      	b.n	8004c84 <ETS+0x568>
            {
                H_Ht[i][j] += mat_H[i][k]*mat_H[j][k];
 8004bd2:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8004bd6:	443b      	add	r3, r7
 8004bd8:	f6a3 7168 	subw	r1, r3, #3944	@ 0xf68
 8004bdc:	4b9a      	ldr	r3, [pc, #616]	@ (8004e48 <ETS+0x72c>)
 8004bde:	443b      	add	r3, r7
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4613      	mov	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4413      	add	r3, r2
 8004be8:	4a98      	ldr	r2, [pc, #608]	@ (8004e4c <ETS+0x730>)
 8004bea:	443a      	add	r2, r7
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	ed93 7a00 	vldr	s14, [r3]
 8004bf8:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004bfc:	443b      	add	r3, r7
 8004bfe:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004c02:	4b91      	ldr	r3, [pc, #580]	@ (8004e48 <ETS+0x72c>)
 8004c04:	443b      	add	r3, r7
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f240 4157 	movw	r1, #1111	@ 0x457
 8004c0c:	fb03 f101 	mul.w	r1, r3, r1
 8004c10:	4b8f      	ldr	r3, [pc, #572]	@ (8004e50 <ETS+0x734>)
 8004c12:	443b      	add	r3, r7
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	440b      	add	r3, r1
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	edd3 6a00 	vldr	s13, [r3]
 8004c20:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004c24:	443b      	add	r3, r7
 8004c26:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004c2a:	4b88      	ldr	r3, [pc, #544]	@ (8004e4c <ETS+0x730>)
 8004c2c:	443b      	add	r3, r7
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f240 4157 	movw	r1, #1111	@ 0x457
 8004c34:	fb03 f101 	mul.w	r1, r3, r1
 8004c38:	4b85      	ldr	r3, [pc, #532]	@ (8004e50 <ETS+0x734>)
 8004c3a:	443b      	add	r3, r7
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	440b      	add	r3, r1
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	edd3 7a00 	vldr	s15, [r3]
 8004c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c50:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8004c54:	443b      	add	r3, r7
 8004c56:	f6a3 7168 	subw	r1, r3, #3944	@ 0xf68
 8004c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e48 <ETS+0x72c>)
 8004c5c:	443b      	add	r3, r7
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4413      	add	r3, r2
 8004c66:	4a79      	ldr	r2, [pc, #484]	@ (8004e4c <ETS+0x730>)
 8004c68:	443a      	add	r2, r7
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < tam; k++)
 8004c76:	4b76      	ldr	r3, [pc, #472]	@ (8004e50 <ETS+0x734>)
 8004c78:	443b      	add	r3, r7
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	4a74      	ldr	r2, [pc, #464]	@ (8004e50 <ETS+0x734>)
 8004c80:	443a      	add	r2, r7
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	4b72      	ldr	r3, [pc, #456]	@ (8004e50 <ETS+0x734>)
 8004c86:	443b      	add	r3, r7
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f240 4256 	movw	r2, #1110	@ 0x456
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	dd9f      	ble.n	8004bd2 <ETS+0x4b6>
        for(int j=0; j < N; j++)
 8004c92:	4b6e      	ldr	r3, [pc, #440]	@ (8004e4c <ETS+0x730>)
 8004c94:	443b      	add	r3, r7
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	4a6c      	ldr	r2, [pc, #432]	@ (8004e4c <ETS+0x730>)
 8004c9c:	443a      	add	r2, r7
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8004e4c <ETS+0x730>)
 8004ca2:	443b      	add	r3, r7
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	f77f af7a 	ble.w	8004ba0 <ETS+0x484>
    for(int i=0; i < N; i++)
 8004cac:	4b66      	ldr	r3, [pc, #408]	@ (8004e48 <ETS+0x72c>)
 8004cae:	443b      	add	r3, r7
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	4a64      	ldr	r2, [pc, #400]	@ (8004e48 <ETS+0x72c>)
 8004cb6:	443a      	add	r2, r7
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b63      	ldr	r3, [pc, #396]	@ (8004e48 <ETS+0x72c>)
 8004cbc:	443b      	add	r3, r7
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	f77f af61 	ble.w	8004b88 <ETS+0x46c>
            }
        }
    }

    inverter_matriz(H_Ht, inv);
 8004cc6:	4a63      	ldr	r2, [pc, #396]	@ (8004e54 <ETS+0x738>)
 8004cc8:	4b63      	ldr	r3, [pc, #396]	@ (8004e58 <ETS+0x73c>)
 8004cca:	4413      	add	r3, r2
 8004ccc:	19da      	adds	r2, r3, r7
 8004cce:	4b63      	ldr	r3, [pc, #396]	@ (8004e5c <ETS+0x740>)
 8004cd0:	f503 33a6 	add.w	r3, r3, #84992	@ 0x14c00
 8004cd4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004cd8:	443b      	add	r3, r7
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fc f9a1 	bl	8001024 <inverter_matriz>

    //Multiplica a inversa por H transposta
    for(int i=0; i < N; i++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	4a5e      	ldr	r2, [pc, #376]	@ (8004e60 <ETS+0x744>)
 8004ce6:	443a      	add	r2, r7
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e090      	b.n	8004e0e <ETS+0x6f2>
    {
        for(int j=0; j < tam; j++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	4a5d      	ldr	r2, [pc, #372]	@ (8004e64 <ETS+0x748>)
 8004cf0:	443a      	add	r2, r7
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	e07c      	b.n	8004df0 <ETS+0x6d4>
        {
            mul_mat[i][j] = 0;
 8004cf6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004cfa:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004cfe:	4b58      	ldr	r3, [pc, #352]	@ (8004e60 <ETS+0x744>)
 8004d00:	443b      	add	r3, r7
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f240 4157 	movw	r1, #1111	@ 0x457
 8004d08:	fb03 f101 	mul.w	r1, r3, r1
 8004d0c:	4b55      	ldr	r3, [pc, #340]	@ (8004e64 <ETS+0x748>)
 8004d0e:	443b      	add	r3, r7
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	440b      	add	r3, r1
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
            for(int k=0; k < N; k++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	4a51      	ldr	r2, [pc, #324]	@ (8004e68 <ETS+0x74c>)
 8004d22:	443a      	add	r2, r7
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e057      	b.n	8004dd8 <ETS+0x6bc>
            {
                mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8004d28:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004d2c:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004d30:	4b4b      	ldr	r3, [pc, #300]	@ (8004e60 <ETS+0x744>)
 8004d32:	443b      	add	r3, r7
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f240 4157 	movw	r1, #1111	@ 0x457
 8004d3a:	fb03 f101 	mul.w	r1, r3, r1
 8004d3e:	4b49      	ldr	r3, [pc, #292]	@ (8004e64 <ETS+0x748>)
 8004d40:	443b      	add	r3, r7
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	440b      	add	r3, r1
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	ed93 7a00 	vldr	s14, [r3]
 8004d4e:	f649 5320 	movw	r3, #40224	@ 0x9d20
 8004d52:	443b      	add	r3, r7
 8004d54:	4619      	mov	r1, r3
 8004d56:	4b42      	ldr	r3, [pc, #264]	@ (8004e60 <ETS+0x744>)
 8004d58:	443b      	add	r3, r7
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4413      	add	r3, r2
 8004d62:	4a41      	ldr	r2, [pc, #260]	@ (8004e68 <ETS+0x74c>)
 8004d64:	443a      	add	r2, r7
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3bac      	subs	r3, #172	@ 0xac
 8004d70:	edd3 6a00 	vldr	s13, [r3]
 8004d74:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004d78:	443b      	add	r3, r7
 8004d7a:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e68 <ETS+0x74c>)
 8004d80:	443b      	add	r3, r7
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f240 4157 	movw	r1, #1111	@ 0x457
 8004d88:	fb03 f101 	mul.w	r1, r3, r1
 8004d8c:	4b35      	ldr	r3, [pc, #212]	@ (8004e64 <ETS+0x748>)
 8004d8e:	443b      	add	r3, r7
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	440b      	add	r3, r1
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	edd3 7a00 	vldr	s15, [r3]
 8004d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004da8:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004dac:	4b2c      	ldr	r3, [pc, #176]	@ (8004e60 <ETS+0x744>)
 8004dae:	443b      	add	r3, r7
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f240 4157 	movw	r1, #1111	@ 0x457
 8004db6:	fb03 f101 	mul.w	r1, r3, r1
 8004dba:	4b2a      	ldr	r3, [pc, #168]	@ (8004e64 <ETS+0x748>)
 8004dbc:	443b      	add	r3, r7
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	440b      	add	r3, r1
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	edc3 7a00 	vstr	s15, [r3]
            for(int k=0; k < N; k++)
 8004dca:	4b27      	ldr	r3, [pc, #156]	@ (8004e68 <ETS+0x74c>)
 8004dcc:	443b      	add	r3, r7
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	4a25      	ldr	r2, [pc, #148]	@ (8004e68 <ETS+0x74c>)
 8004dd4:	443a      	add	r2, r7
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	4b23      	ldr	r3, [pc, #140]	@ (8004e68 <ETS+0x74c>)
 8004dda:	443b      	add	r3, r7
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	dda2      	ble.n	8004d28 <ETS+0x60c>
        for(int j=0; j < tam; j++)
 8004de2:	4b20      	ldr	r3, [pc, #128]	@ (8004e64 <ETS+0x748>)
 8004de4:	443b      	add	r3, r7
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	4a1e      	ldr	r2, [pc, #120]	@ (8004e64 <ETS+0x748>)
 8004dec:	443a      	add	r2, r7
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e64 <ETS+0x748>)
 8004df2:	443b      	add	r3, r7
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f240 4256 	movw	r2, #1110	@ 0x456
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	f77f af7b 	ble.w	8004cf6 <ETS+0x5da>
    for(int i=0; i < N; i++)
 8004e00:	4b17      	ldr	r3, [pc, #92]	@ (8004e60 <ETS+0x744>)
 8004e02:	443b      	add	r3, r7
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3301      	adds	r3, #1
 8004e08:	4a15      	ldr	r2, [pc, #84]	@ (8004e60 <ETS+0x744>)
 8004e0a:	443a      	add	r2, r7
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	4b14      	ldr	r3, [pc, #80]	@ (8004e60 <ETS+0x744>)
 8004e10:	443b      	add	r3, r7
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	f77f af69 	ble.w	8004cec <ETS+0x5d0>
            }
        }
    }

    //Resultado da psedo-inversa
    for(int i=0; i < N; i++)
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	4a13      	ldr	r2, [pc, #76]	@ (8004e6c <ETS+0x750>)
 8004e1e:	443a      	add	r2, r7
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e075      	b.n	8004f10 <ETS+0x7f4>
    {
        X[i] = 0;
 8004e24:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e28:	f6a3 520c 	subw	r2, r3, #3340	@ 0xd0c
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e6c <ETS+0x750>)
 8004e2e:	443b      	add	r3, r7
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
        for(int j=0; j < tam; j++)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e70 <ETS+0x754>)
 8004e40:	443a      	add	r2, r7
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	e056      	b.n	8004ef4 <ETS+0x7d8>
 8004e46:	bf00      	nop
 8004e48:	00014d18 	.word	0x00014d18
 8004e4c:	00014d14 	.word	0x00014d14
 8004e50:	00014d10 	.word	0x00014d10
 8004e54:	ffff4f54 	.word	0xffff4f54
 8004e58:	00014d20 	.word	0x00014d20
 8004e5c:	ffff5098 	.word	0xffff5098
 8004e60:	00014d0c 	.word	0x00014d0c
 8004e64:	00014d08 	.word	0x00014d08
 8004e68:	00014d04 	.word	0x00014d04
 8004e6c:	00014d00 	.word	0x00014d00
 8004e70:	00014cfc 	.word	0x00014cfc
        {
            X[i] += mul_mat[i][j]*my_2[j];
 8004e74:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e78:	f6a3 520c 	subw	r2, r3, #3340	@ 0xd0c
 8004e7c:	4bdb      	ldr	r3, [pc, #876]	@ (80051ec <ETS+0xad0>)
 8004e7e:	443b      	add	r3, r7
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	ed93 7a00 	vldr	s14, [r3]
 8004e8a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e8e:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004e92:	4bd6      	ldr	r3, [pc, #856]	@ (80051ec <ETS+0xad0>)
 8004e94:	443b      	add	r3, r7
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f240 4157 	movw	r1, #1111	@ 0x457
 8004e9c:	fb03 f101 	mul.w	r1, r3, r1
 8004ea0:	4bd3      	ldr	r3, [pc, #844]	@ (80051f0 <ETS+0xad4>)
 8004ea2:	443b      	add	r3, r7
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	440b      	add	r3, r1
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	edd3 6a00 	vldr	s13, [r3]
 8004eb0:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8004eb4:	443b      	add	r3, r7
 8004eb6:	f6a3 6224 	subw	r2, r3, #3620	@ 0xe24
 8004eba:	4bcd      	ldr	r3, [pc, #820]	@ (80051f0 <ETS+0xad4>)
 8004ebc:	443b      	add	r3, r7
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	edd3 7a00 	vldr	s15, [r3]
 8004ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004ed4:	f6a3 520c 	subw	r2, r3, #3340	@ 0xd0c
 8004ed8:	4bc4      	ldr	r3, [pc, #784]	@ (80051ec <ETS+0xad0>)
 8004eda:	443b      	add	r3, r7
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	edc3 7a00 	vstr	s15, [r3]
        for(int j=0; j < tam; j++)
 8004ee6:	4bc2      	ldr	r3, [pc, #776]	@ (80051f0 <ETS+0xad4>)
 8004ee8:	443b      	add	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3301      	adds	r3, #1
 8004eee:	4ac0      	ldr	r2, [pc, #768]	@ (80051f0 <ETS+0xad4>)
 8004ef0:	443a      	add	r2, r7
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	4bbe      	ldr	r3, [pc, #760]	@ (80051f0 <ETS+0xad4>)
 8004ef6:	443b      	add	r3, r7
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f240 4256 	movw	r2, #1110	@ 0x456
 8004efe:	4293      	cmp	r3, r2
 8004f00:	ddb8      	ble.n	8004e74 <ETS+0x758>
    for(int i=0; i < N; i++)
 8004f02:	4bba      	ldr	r3, [pc, #744]	@ (80051ec <ETS+0xad0>)
 8004f04:	443b      	add	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	4ab8      	ldr	r2, [pc, #736]	@ (80051ec <ETS+0xad0>)
 8004f0c:	443a      	add	r2, r7
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	4bb6      	ldr	r3, [pc, #728]	@ (80051ec <ETS+0xad0>)
 8004f12:	443b      	add	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	dd84      	ble.n	8004e24 <ETS+0x708>
        }
    }


    // Segundo passo, encontrando os parâmetros
    X1_2 = X[1]*X[1];
 8004f1a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f1e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f22:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f26:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f2a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	4baf      	ldr	r3, [pc, #700]	@ (80051f4 <ETS+0xad8>)
 8004f38:	443b      	add	r3, r7
 8004f3a:	edc3 7a00 	vstr	s15, [r3]
    X2_2 = X[2]*X[2];
 8004f3e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f42:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f46:	ed93 7a02 	vldr	s14, [r3, #8]
 8004f4a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f4e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f52:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5a:	4ba7      	ldr	r3, [pc, #668]	@ (80051f8 <ETS+0xadc>)
 8004f5c:	443b      	add	r3, r7
 8004f5e:	edc3 7a00 	vstr	s15, [r3]
    X3_2 = X[3]*X[3];
 8004f62:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f66:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8004f6e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f72:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f76:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7e:	4b9f      	ldr	r3, [pc, #636]	@ (80051fc <ETS+0xae0>)
 8004f80:	443b      	add	r3, r7
 8004f82:	edc3 7a00 	vstr	s15, [r3]
    X4_2 = X[4]*X[4];
 8004f86:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f8a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f8e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004f92:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f96:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	4b97      	ldr	r3, [pc, #604]	@ (8005200 <ETS+0xae4>)
 8004fa4:	443b      	add	r3, r7
 8004fa6:	edc3 7a00 	vstr	s15, [r3]
    X5_2 = X[5]*X[5];
 8004faa:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004fae:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fb2:	ed93 7a05 	vldr	s14, [r3, #20]
 8004fb6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004fba:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8004fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc6:	4b8f      	ldr	r3, [pc, #572]	@ (8005204 <ETS+0xae8>)
 8004fc8:	443b      	add	r3, r7
 8004fca:	edc3 7a00 	vstr	s15, [r3]
    X6_2 = X[6]*X[6];
 8004fce:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004fd2:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fd6:	ed93 7a06 	vldr	s14, [r3, #24]
 8004fda:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004fde:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fe2:	edd3 7a06 	vldr	s15, [r3, #24]
 8004fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fea:	4b87      	ldr	r3, [pc, #540]	@ (8005208 <ETS+0xaec>)
 8004fec:	443b      	add	r3, r7
 8004fee:	edc3 7a00 	vstr	s15, [r3]
    X7_2 = X[7]*X[7];
 8004ff2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004ff6:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004ffa:	ed93 7a07 	vldr	s14, [r3, #28]
 8004ffe:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005002:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005006:	edd3 7a07 	vldr	s15, [r3, #28]
 800500a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500e:	4b7f      	ldr	r3, [pc, #508]	@ (800520c <ETS+0xaf0>)
 8005010:	443b      	add	r3, r7
 8005012:	edc3 7a00 	vstr	s15, [r3]
    X8_2 = X[8]*X[8];
 8005016:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800501a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800501e:	ed93 7a08 	vldr	s14, [r3, #32]
 8005022:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005026:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800502a:	edd3 7a08 	vldr	s15, [r3, #32]
 800502e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005032:	4b77      	ldr	r3, [pc, #476]	@ (8005210 <ETS+0xaf4>)
 8005034:	443b      	add	r3, r7
 8005036:	edc3 7a00 	vstr	s15, [r3]

    psi7 = 2*(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]);
 800503a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800503e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005042:	ed93 7a04 	vldr	s14, [r3, #16]
 8005046:	4b6b      	ldr	r3, [pc, #428]	@ (80051f4 <ETS+0xad8>)
 8005048:	443b      	add	r3, r7
 800504a:	edd3 7a00 	vldr	s15, [r3]
 800504e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005052:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005056:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800505a:	edd3 6a01 	vldr	s13, [r3, #4]
 800505e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005062:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005066:	edd3 7a02 	vldr	s15, [r3, #8]
 800506a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800506e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005072:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005076:	edd3 7a03 	vldr	s15, [r3, #12]
 800507a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800507e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005082:	4b5d      	ldr	r3, [pc, #372]	@ (80051f8 <ETS+0xadc>)
 8005084:	443b      	add	r3, r7
 8005086:	edd3 7a00 	vldr	s15, [r3]
 800508a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800508e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005092:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005096:	edd3 6a00 	vldr	s13, [r3]
 800509a:	4b58      	ldr	r3, [pc, #352]	@ (80051fc <ETS+0xae0>)
 800509c:	443b      	add	r3, r7
 800509e:	edd3 7a00 	vldr	s15, [r3]
 80050a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050aa:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80050ae:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050b2:	edd3 7a00 	vldr	s15, [r3]
 80050b6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80050ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80050be:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80050c2:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80050ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005214 <ETS+0xaf8>)
 80050d8:	443b      	add	r3, r7
 80050da:	edc3 7a00 	vstr	s15, [r3]
    bx = -(X3_2 * X[5] + 2*X[2]*X[7] - 4*X[4]*X[5] - X[1]*X[3]*X[7] + 2*X[1]*X[4]*X[6] - X[2]*X[3]*X[6]) / psi7;
 80050de:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80050e2:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050e6:	ed93 7a05 	vldr	s14, [r3, #20]
 80050ea:	4b44      	ldr	r3, [pc, #272]	@ (80051fc <ETS+0xae0>)
 80050ec:	443b      	add	r3, r7
 80050ee:	edd3 7a00 	vldr	s15, [r3]
 80050f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050f6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80050fa:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8005102:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005106:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800510a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800510e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005116:	ee37 7a27 	vadd.f32	s14, s14, s15
 800511a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800511e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005122:	edd3 7a04 	vldr	s15, [r3, #16]
 8005126:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800512a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800512e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005132:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005136:	edd3 7a05 	vldr	s15, [r3, #20]
 800513a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800513e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005142:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005146:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800514a:	edd3 6a01 	vldr	s13, [r3, #4]
 800514e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005152:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005156:	edd3 7a03 	vldr	s15, [r3, #12]
 800515a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800515e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005162:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005166:	edd3 7a07 	vldr	s15, [r3, #28]
 800516a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800516e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005172:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005176:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800517a:	edd3 7a01 	vldr	s15, [r3, #4]
 800517e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005182:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005186:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800518a:	edd3 7a04 	vldr	s15, [r3, #16]
 800518e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005192:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005196:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800519a:	edd3 7a06 	vldr	s15, [r3, #24]
 800519e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051a6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80051aa:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80051ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80051b2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80051b6:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80051ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80051be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80051c2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80051c6:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80051ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80051ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051d6:	eef1 6a67 	vneg.f32	s13, s15
 80051da:	4b0e      	ldr	r3, [pc, #56]	@ (8005214 <ETS+0xaf8>)
 80051dc:	443b      	add	r3, r7
 80051de:	ed93 7a00 	vldr	s14, [r3]
 80051e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005218 <ETS+0xafc>)
 80051e8:	443b      	add	r3, r7
 80051ea:	e017      	b.n	800521c <ETS+0xb00>
 80051ec:	00014d00 	.word	0x00014d00
 80051f0:	00014cfc 	.word	0x00014cfc
 80051f4:	00014cb0 	.word	0x00014cb0
 80051f8:	00014cac 	.word	0x00014cac
 80051fc:	00014ca8 	.word	0x00014ca8
 8005200:	00014ca4 	.word	0x00014ca4
 8005204:	00014ca0 	.word	0x00014ca0
 8005208:	00014c9c 	.word	0x00014c9c
 800520c:	00014c98 	.word	0x00014c98
 8005210:	00014c94 	.word	0x00014c94
 8005214:	00014cf8 	.word	0x00014cf8
 8005218:	00014cd4 	.word	0x00014cd4
 800521c:	edc3 7a00 	vstr	s15, [r3]
    by = -(X2_2 * X[6] + 2*X[0]*X[3]*X[7] - 4*X[0]*X[4]*X[6] - X[1]*X[2]*X[7] + 2*X[1]*X[4]*X[5] - X[2]*X[3]*X[5]) / psi7;
 8005220:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005224:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005228:	ed93 7a06 	vldr	s14, [r3, #24]
 800522c:	4bf2      	ldr	r3, [pc, #968]	@ (80055f8 <ETS+0xedc>)
 800522e:	443b      	add	r3, r7
 8005230:	edd3 7a00 	vldr	s15, [r3]
 8005234:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005238:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800523c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005240:	edd3 7a00 	vldr	s15, [r3]
 8005244:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005248:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800524c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005250:	edd3 7a03 	vldr	s15, [r3, #12]
 8005254:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005258:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800525c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005260:	edd3 7a07 	vldr	s15, [r3, #28]
 8005264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800526c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005270:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005274:	edd3 7a00 	vldr	s15, [r3]
 8005278:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800527c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005280:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005284:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005288:	edd3 7a04 	vldr	s15, [r3, #16]
 800528c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005290:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005294:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005298:	edd3 7a06 	vldr	s15, [r3, #24]
 800529c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052a4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052a8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80052b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052b4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80052bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052c4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052c8:	edd3 7a07 	vldr	s15, [r3, #28]
 80052cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052d4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052d8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80052e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80052e4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052e8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80052f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052f8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8005300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005308:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800530c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005310:	edd3 6a02 	vldr	s13, [r3, #8]
 8005314:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005318:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800531c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005320:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005324:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005328:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800532c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005338:	eef1 6a67 	vneg.f32	s13, s15
 800533c:	4baf      	ldr	r3, [pc, #700]	@ (80055fc <ETS+0xee0>)
 800533e:	443b      	add	r3, r7
 8005340:	ed93 7a00 	vldr	s14, [r3]
 8005344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005348:	4bad      	ldr	r3, [pc, #692]	@ (8005600 <ETS+0xee4>)
 800534a:	443b      	add	r3, r7
 800534c:	edc3 7a00 	vstr	s15, [r3]
    bz = -(X1_2*X[7] - 4*X[0]*X[7] + 2*X[2]*X[5] + 2*X[0]*X[3]*X[6] - X[1]*X[2]*X[6] - X[1]*X[3]*X[5]) / psi7;
 8005350:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005354:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005358:	ed93 7a07 	vldr	s14, [r3, #28]
 800535c:	4ba9      	ldr	r3, [pc, #676]	@ (8005604 <ETS+0xee8>)
 800535e:	443b      	add	r3, r7
 8005360:	edd3 7a00 	vldr	s15, [r3]
 8005364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005368:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800536c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005370:	edd3 7a00 	vldr	s15, [r3]
 8005374:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005378:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800537c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005380:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005384:	edd3 7a07 	vldr	s15, [r3, #28]
 8005388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800538c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005390:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005394:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005398:	edd3 7a02 	vldr	s15, [r3, #8]
 800539c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80053a0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053a4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80053ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053b4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053b8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053bc:	edd3 7a00 	vldr	s15, [r3]
 80053c0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80053c4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053c8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80053d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80053d4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053d8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80053e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053e8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053ec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80053f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053f8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8005400:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005404:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005408:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800540c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005418:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800541c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005420:	edd3 6a01 	vldr	s13, [r3, #4]
 8005424:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005428:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800542c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005430:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005434:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005438:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800543c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005448:	eef1 6a67 	vneg.f32	s13, s15
 800544c:	4b6b      	ldr	r3, [pc, #428]	@ (80055fc <ETS+0xee0>)
 800544e:	443b      	add	r3, r7
 8005450:	ed93 7a00 	vldr	s14, [r3]
 8005454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005458:	4b6b      	ldr	r3, [pc, #428]	@ (8005608 <ETS+0xeec>)
 800545a:	443b      	add	r3, r7
 800545c:	edc3 7a00 	vstr	s15, [r3]

    psi8 = -X1_2*X7_2 + 4*X[4]*X[8]*X1_2 - 4*X[8]*X[1]*X[2]*X[3] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[4]*X[1]*X[5]*X[6] - X2_2*X6_2 + 4*X[8]*X2_2 + 2*X[2]*X[3]*X[5]*X[6] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[0]*X[8]*X3_2 + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8] - 4*X[0]*X[3]*X[6]*X[7];
 8005460:	4b68      	ldr	r3, [pc, #416]	@ (8005604 <ETS+0xee8>)
 8005462:	443b      	add	r3, r7
 8005464:	edd3 7a00 	vldr	s15, [r3]
 8005468:	eeb1 7a67 	vneg.f32	s14, s15
 800546c:	4b67      	ldr	r3, [pc, #412]	@ (800560c <ETS+0xef0>)
 800546e:	443b      	add	r3, r7
 8005470:	edd3 7a00 	vldr	s15, [r3]
 8005474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005478:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800547c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005480:	edd3 7a04 	vldr	s15, [r3, #16]
 8005484:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005488:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800548c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005490:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005494:	edd3 7a08 	vldr	s15, [r3, #32]
 8005498:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800549c:	4b59      	ldr	r3, [pc, #356]	@ (8005604 <ETS+0xee8>)
 800549e:	443b      	add	r3, r7
 80054a0:	edd3 7a00 	vldr	s15, [r3]
 80054a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054ac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80054b0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80054b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80054b8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80054bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80054c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80054c4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80054c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80054cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80054d0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80054d4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80054d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80054dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80054e0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80054e4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80054e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80054ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80054f8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80054fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005500:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005504:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005508:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800550c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005510:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005514:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005518:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800551c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005520:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005524:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005528:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800552c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005534:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005538:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800553c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005540:	edd3 7a01 	vldr	s15, [r3, #4]
 8005544:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005548:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800554c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005550:	edd3 7a03 	vldr	s15, [r3, #12]
 8005554:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005558:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800555c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005560:	edd3 7a05 	vldr	s15, [r3, #20]
 8005564:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005568:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800556c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005570:	edd3 7a07 	vldr	s15, [r3, #28]
 8005574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800557c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005580:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005584:	edd3 7a04 	vldr	s15, [r3, #16]
 8005588:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800558c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005590:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005594:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005598:	edd3 7a01 	vldr	s15, [r3, #4]
 800559c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80055a0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80055a4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80055a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80055ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80055b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80055b4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80055b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80055bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055c4:	4b0c      	ldr	r3, [pc, #48]	@ (80055f8 <ETS+0xedc>)
 80055c6:	443b      	add	r3, r7
 80055c8:	edd3 6a00 	vldr	s13, [r3]
 80055cc:	4b10      	ldr	r3, [pc, #64]	@ (8005610 <ETS+0xef4>)
 80055ce:	443b      	add	r3, r7
 80055d0:	edd3 7a00 	vldr	s15, [r3]
 80055d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055dc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80055e0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80055e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80055e8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80055ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80055f0:	4b01      	ldr	r3, [pc, #4]	@ (80055f8 <ETS+0xedc>)
 80055f2:	443b      	add	r3, r7
 80055f4:	e00e      	b.n	8005614 <ETS+0xef8>
 80055f6:	bf00      	nop
 80055f8:	00014cac 	.word	0x00014cac
 80055fc:	00014cf8 	.word	0x00014cf8
 8005600:	00014cd0 	.word	0x00014cd0
 8005604:	00014cb0 	.word	0x00014cb0
 8005608:	00014ccc 	.word	0x00014ccc
 800560c:	00014c98 	.word	0x00014c98
 8005610:	00014c9c 	.word	0x00014c9c
 8005614:	edd3 7a00 	vldr	s15, [r3]
 8005618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800561c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005620:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005624:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005628:	edd3 7a02 	vldr	s15, [r3, #8]
 800562c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005630:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005634:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005638:	edd3 7a03 	vldr	s15, [r3, #12]
 800563c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005640:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005644:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005648:	edd3 7a05 	vldr	s15, [r3, #20]
 800564c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005650:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005654:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005658:	edd3 7a06 	vldr	s15, [r3, #24]
 800565c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005664:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005668:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800566c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005670:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005674:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005678:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800567c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005680:	edd3 7a05 	vldr	s15, [r3, #20]
 8005684:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005688:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800568c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005690:	edd3 7a07 	vldr	s15, [r3, #28]
 8005694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005698:	ee37 7a67 	vsub.f32	s14, s14, s15
 800569c:	4be4      	ldr	r3, [pc, #912]	@ (8005a30 <ETS+0x1314>)
 800569e:	443b      	add	r3, r7
 80056a0:	edd3 6a00 	vldr	s13, [r3]
 80056a4:	4be3      	ldr	r3, [pc, #908]	@ (8005a34 <ETS+0x1318>)
 80056a6:	443b      	add	r3, r7
 80056a8:	edd3 7a00 	vldr	s15, [r3]
 80056ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056b4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80056b8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80056bc:	edd3 7a00 	vldr	s15, [r3]
 80056c0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80056c4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80056c8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80056cc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80056d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80056d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80056d8:	4bd5      	ldr	r3, [pc, #852]	@ (8005a30 <ETS+0x1314>)
 80056da:	443b      	add	r3, r7
 80056dc:	edd3 7a00 	vldr	s15, [r3]
 80056e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056e8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80056ec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80056f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80056f4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80056f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80056fc:	4bcd      	ldr	r3, [pc, #820]	@ (8005a34 <ETS+0x1318>)
 80056fe:	443b      	add	r3, r7
 8005700:	edd3 7a00 	vldr	s15, [r3]
 8005704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005708:	ee37 7a27 	vadd.f32	s14, s14, s15
 800570c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005710:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005714:	edd3 7a00 	vldr	s15, [r3]
 8005718:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800571c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005720:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005724:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005728:	edd3 7a04 	vldr	s15, [r3, #16]
 800572c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005730:	4bc1      	ldr	r3, [pc, #772]	@ (8005a38 <ETS+0x131c>)
 8005732:	443b      	add	r3, r7
 8005734:	edd3 7a00 	vldr	s15, [r3]
 8005738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800573c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005740:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005744:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005748:	edd3 7a00 	vldr	s15, [r3]
 800574c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005750:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005754:	4bb9      	ldr	r3, [pc, #740]	@ (8005a3c <ETS+0x1320>)
 8005756:	443b      	add	r3, r7
 8005758:	edd3 7a00 	vldr	s15, [r3]
 800575c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005764:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005768:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800576c:	edd3 7a00 	vldr	s15, [r3]
 8005770:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005774:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005778:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800577c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005780:	edd3 7a04 	vldr	s15, [r3, #16]
 8005784:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005788:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800578c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005790:	edd3 7a08 	vldr	s15, [r3, #32]
 8005794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800579c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057a0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057a4:	edd3 7a00 	vldr	s15, [r3]
 80057a8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80057ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80057b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057b4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80057bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057c4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80057cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057d0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057d4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057d8:	edd3 7a07 	vldr	s15, [r3, #28]
 80057dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057e4:	4b96      	ldr	r3, [pc, #600]	@ (8005a40 <ETS+0x1324>)
 80057e6:	443b      	add	r3, r7
 80057e8:	edc3 7a00 	vstr	s15, [r3]

    divs =  2 * fabsf(X[4])*fabsf(X[4])*fabsf(X[4]) * (X[4] * X1_2 - X[1] * X[2] * X[3] + X2_2 + X[0] * X3_2 - 4 * X[0] * X[4]);
 80057ec:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057f0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80057f8:	eef0 7ae7 	vabs.f32	s15, s15
 80057fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005800:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005804:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005808:	edd3 7a04 	vldr	s15, [r3, #16]
 800580c:	eef0 7ae7 	vabs.f32	s15, s15
 8005810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005814:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005818:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800581c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005820:	eef0 7ae7 	vabs.f32	s15, s15
 8005824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005828:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800582c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005830:	edd3 6a04 	vldr	s13, [r3, #16]
 8005834:	4b83      	ldr	r3, [pc, #524]	@ (8005a44 <ETS+0x1328>)
 8005836:	443b      	add	r3, r7
 8005838:	edd3 7a00 	vldr	s15, [r3]
 800583c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005840:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005844:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005848:	ed93 6a01 	vldr	s12, [r3, #4]
 800584c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005850:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005854:	edd3 7a02 	vldr	s15, [r3, #8]
 8005858:	ee26 6a27 	vmul.f32	s12, s12, s15
 800585c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005860:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005864:	edd3 7a03 	vldr	s15, [r3, #12]
 8005868:	ee66 7a27 	vmul.f32	s15, s12, s15
 800586c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005870:	4b75      	ldr	r3, [pc, #468]	@ (8005a48 <ETS+0x132c>)
 8005872:	443b      	add	r3, r7
 8005874:	edd3 7a00 	vldr	s15, [r3]
 8005878:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800587c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005880:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005884:	ed93 6a00 	vldr	s12, [r3]
 8005888:	4b69      	ldr	r3, [pc, #420]	@ (8005a30 <ETS+0x1314>)
 800588a:	443b      	add	r3, r7
 800588c:	edd3 7a00 	vldr	s15, [r3]
 8005890:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005894:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005898:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800589c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80058a0:	edd3 7a00 	vldr	s15, [r3]
 80058a4:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 80058a8:	ee27 6a86 	vmul.f32	s12, s15, s12
 80058ac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80058b0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80058b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80058b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80058bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80058c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c4:	4b61      	ldr	r3, [pc, #388]	@ (8005a4c <ETS+0x1330>)
 80058c6:	443b      	add	r3, r7
 80058c8:	edc3 7a00 	vstr	s15, [r3]

    sx = -X4_2*X[4] * sqrtf(psi8 * (-X3_2 + 4*X[4])) / (divs);
 80058cc:	4b60      	ldr	r3, [pc, #384]	@ (8005a50 <ETS+0x1334>)
 80058ce:	443b      	add	r3, r7
 80058d0:	edd3 7a00 	vldr	s15, [r3]
 80058d4:	eeb1 7a67 	vneg.f32	s14, s15
 80058d8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80058dc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80058e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80058e4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80058e8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80058ec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80058f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80058f4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80058f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80058fc:	4b4c      	ldr	r3, [pc, #304]	@ (8005a30 <ETS+0x1314>)
 80058fe:	443b      	add	r3, r7
 8005900:	edd3 7a00 	vldr	s15, [r3]
 8005904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005908:	4b4d      	ldr	r3, [pc, #308]	@ (8005a40 <ETS+0x1324>)
 800590a:	443b      	add	r3, r7
 800590c:	edd3 7a00 	vldr	s15, [r3]
 8005910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005914:	eeb0 0a67 	vmov.f32	s0, s15
 8005918:	f00c fcfc 	bl	8012314 <sqrtf>
 800591c:	eef0 7a40 	vmov.f32	s15, s0
 8005920:	ee68 6a27 	vmul.f32	s13, s16, s15
 8005924:	4b49      	ldr	r3, [pc, #292]	@ (8005a4c <ETS+0x1330>)
 8005926:	443b      	add	r3, r7
 8005928:	ed93 7a00 	vldr	s14, [r3]
 800592c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005930:	4b48      	ldr	r3, [pc, #288]	@ (8005a54 <ETS+0x1338>)
 8005932:	443b      	add	r3, r7
 8005934:	edc3 7a00 	vstr	s15, [r3]
    sy = -X4_2*X[4] * sqrtf(psi8 * (-X2_2 + 4*X[0]*X[4])) / (divs);
 8005938:	4b45      	ldr	r3, [pc, #276]	@ (8005a50 <ETS+0x1334>)
 800593a:	443b      	add	r3, r7
 800593c:	edd3 7a00 	vldr	s15, [r3]
 8005940:	eeb1 7a67 	vneg.f32	s14, s15
 8005944:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005948:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800594c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005950:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005954:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005958:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800595c:	edd3 7a00 	vldr	s15, [r3]
 8005960:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005964:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005968:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800596c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005970:	edd3 7a04 	vldr	s15, [r3, #16]
 8005974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005978:	4b33      	ldr	r3, [pc, #204]	@ (8005a48 <ETS+0x132c>)
 800597a:	443b      	add	r3, r7
 800597c:	edd3 7a00 	vldr	s15, [r3]
 8005980:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005984:	4b2e      	ldr	r3, [pc, #184]	@ (8005a40 <ETS+0x1324>)
 8005986:	443b      	add	r3, r7
 8005988:	edd3 7a00 	vldr	s15, [r3]
 800598c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005990:	eeb0 0a67 	vmov.f32	s0, s15
 8005994:	f00c fcbe 	bl	8012314 <sqrtf>
 8005998:	eef0 7a40 	vmov.f32	s15, s0
 800599c:	ee68 6a27 	vmul.f32	s13, s16, s15
 80059a0:	4b2a      	ldr	r3, [pc, #168]	@ (8005a4c <ETS+0x1330>)
 80059a2:	443b      	add	r3, r7
 80059a4:	ed93 7a00 	vldr	s14, [r3]
 80059a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005a58 <ETS+0x133c>)
 80059ae:	443b      	add	r3, r7
 80059b0:	edc3 7a00 	vstr	s15, [r3]
    sz = -X4_2*X[4] * sqrtf(psi8 * (-X1_2 + 4*X[0])) / (divs);
 80059b4:	4b26      	ldr	r3, [pc, #152]	@ (8005a50 <ETS+0x1334>)
 80059b6:	443b      	add	r3, r7
 80059b8:	edd3 7a00 	vldr	s15, [r3]
 80059bc:	eeb1 7a67 	vneg.f32	s14, s15
 80059c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80059c4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80059c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80059cc:	ee27 8a27 	vmul.f32	s16, s14, s15
 80059d0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80059d4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80059d8:	edd3 7a00 	vldr	s15, [r3]
 80059dc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80059e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059e4:	4b17      	ldr	r3, [pc, #92]	@ (8005a44 <ETS+0x1328>)
 80059e6:	443b      	add	r3, r7
 80059e8:	edd3 7a00 	vldr	s15, [r3]
 80059ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059f0:	4b13      	ldr	r3, [pc, #76]	@ (8005a40 <ETS+0x1324>)
 80059f2:	443b      	add	r3, r7
 80059f4:	edd3 7a00 	vldr	s15, [r3]
 80059f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005a00:	f00c fc88 	bl	8012314 <sqrtf>
 8005a04:	eef0 7a40 	vmov.f32	s15, s0
 8005a08:	ee68 6a27 	vmul.f32	s13, s16, s15
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a4c <ETS+0x1330>)
 8005a0e:	443b      	add	r3, r7
 8005a10:	ed93 7a00 	vldr	s14, [r3]
 8005a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a18:	4b10      	ldr	r3, [pc, #64]	@ (8005a5c <ETS+0x1340>)
 8005a1a:	443b      	add	r3, r7
 8005a1c:	edc3 7a00 	vstr	s15, [r3]

    rho = (2 * X[1]*X[4] - X[2]*X[3]) / (2*X4_2 * sqrtf(-(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]) / (X4_2*X[4])));
 8005a20:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a24:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a28:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a2c:	e018      	b.n	8005a60 <ETS+0x1344>
 8005a2e:	bf00      	nop
 8005a30:	00014ca8 	.word	0x00014ca8
 8005a34:	00014ca0 	.word	0x00014ca0
 8005a38:	00014c9c 	.word	0x00014c9c
 8005a3c:	00014c98 	.word	0x00014c98
 8005a40:	00014cf4 	.word	0x00014cf4
 8005a44:	00014cb0 	.word	0x00014cb0
 8005a48:	00014cac 	.word	0x00014cac
 8005a4c:	00014cf0 	.word	0x00014cf0
 8005a50:	00014ca4 	.word	0x00014ca4
 8005a54:	00014cc8 	.word	0x00014cc8
 8005a58:	00014cc4 	.word	0x00014cc4
 8005a5c:	00014cc0 	.word	0x00014cc0
 8005a60:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005a64:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a68:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a74:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a78:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a7c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a80:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a84:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a88:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a90:	ee37 8a67 	vsub.f32	s16, s14, s15
 8005a94:	4be2      	ldr	r3, [pc, #904]	@ (8005e20 <ETS+0x1704>)
 8005a96:	443b      	add	r3, r7
 8005a98:	edd3 7a00 	vldr	s15, [r3]
 8005a9c:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8005aa0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005aa4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005aa8:	ed93 7a04 	vldr	s14, [r3, #16]
 8005aac:	4bdd      	ldr	r3, [pc, #884]	@ (8005e24 <ETS+0x1708>)
 8005aae:	443b      	add	r3, r7
 8005ab0:	edd3 7a00 	vldr	s15, [r3]
 8005ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ab8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005abc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ac0:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ac4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ac8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005acc:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ad0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ad4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ad8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005adc:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ae0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ae8:	4bcf      	ldr	r3, [pc, #828]	@ (8005e28 <ETS+0x170c>)
 8005aea:	443b      	add	r3, r7
 8005aec:	edd3 7a00 	vldr	s15, [r3]
 8005af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005af4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005af8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005afc:	edd3 6a00 	vldr	s13, [r3]
 8005b00:	4bca      	ldr	r3, [pc, #808]	@ (8005e2c <ETS+0x1710>)
 8005b02:	443b      	add	r3, r7
 8005b04:	edd3 7a00 	vldr	s15, [r3]
 8005b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b10:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b14:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b18:	edd3 7a00 	vldr	s15, [r3]
 8005b1c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005b20:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005b24:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b28:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b38:	eeb1 7a67 	vneg.f32	s14, s15
 8005b3c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b40:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b44:	edd3 6a04 	vldr	s13, [r3, #16]
 8005b48:	4bb5      	ldr	r3, [pc, #724]	@ (8005e20 <ETS+0x1704>)
 8005b4a:	443b      	add	r3, r7
 8005b4c:	edd3 7a00 	vldr	s15, [r3]
 8005b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b58:	eeb0 0a66 	vmov.f32	s0, s13
 8005b5c:	f00c fbda 	bl	8012314 <sqrtf>
 8005b60:	eef0 7a40 	vmov.f32	s15, s0
 8005b64:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8005b68:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005b6c:	4bb0      	ldr	r3, [pc, #704]	@ (8005e30 <ETS+0x1714>)
 8005b6e:	443b      	add	r3, r7
 8005b70:	edc3 7a00 	vstr	s15, [r3]
    rho = -atanf(rho);
 8005b74:	4bae      	ldr	r3, [pc, #696]	@ (8005e30 <ETS+0x1714>)
 8005b76:	443b      	add	r3, r7
 8005b78:	ed93 0a00 	vldr	s0, [r3]
 8005b7c:	f00c fbe8 	bl	8012350 <atanf>
 8005b80:	eef0 7a40 	vmov.f32	s15, s0
 8005b84:	eef1 7a67 	vneg.f32	s15, s15
 8005b88:	4ba9      	ldr	r3, [pc, #676]	@ (8005e30 <ETS+0x1714>)
 8005b8a:	443b      	add	r3, r7
 8005b8c:	edc3 7a00 	vstr	s15, [r3]
    lambida = -atanf((X[3] / X[4]) * sqrtf(-(X4_2 * (X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 - 4*X[0]*X[4]) / (2*X1_2*X3_2*X[4] - 4* X1_2 * X4_2 - 4*X1_2 * X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2 * X3_2 + X[0]* X3_2*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2))));
 8005b90:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b94:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b98:	ed93 7a03 	vldr	s14, [r3, #12]
 8005b9c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ba0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ba4:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ba8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8005bac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005bb0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005bb4:	ed93 7a04 	vldr	s14, [r3, #16]
 8005bb8:	4b9a      	ldr	r3, [pc, #616]	@ (8005e24 <ETS+0x1708>)
 8005bba:	443b      	add	r3, r7
 8005bbc:	edd3 7a00 	vldr	s15, [r3]
 8005bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bc4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005bc8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005bcc:	edd3 6a01 	vldr	s13, [r3, #4]
 8005bd0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005bd4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005bd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8005bdc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005be0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005be4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005be8:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8005e28 <ETS+0x170c>)
 8005bf6:	443b      	add	r3, r7
 8005bf8:	edd3 7a00 	vldr	s15, [r3]
 8005bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c00:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005c04:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005c08:	edd3 7a00 	vldr	s15, [r3]
 8005c0c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005c10:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005c14:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005c18:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005c1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c28:	4b7d      	ldr	r3, [pc, #500]	@ (8005e20 <ETS+0x1704>)
 8005c2a:	443b      	add	r3, r7
 8005c2c:	edd3 7a00 	vldr	s15, [r3]
 8005c30:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005c34:	4b7b      	ldr	r3, [pc, #492]	@ (8005e24 <ETS+0x1708>)
 8005c36:	443b      	add	r3, r7
 8005c38:	edd3 7a00 	vldr	s15, [r3]
 8005c3c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005c40:	4b7a      	ldr	r3, [pc, #488]	@ (8005e2c <ETS+0x1710>)
 8005c42:	443b      	add	r3, r7
 8005c44:	edd3 7a00 	vldr	s15, [r3]
 8005c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c4c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005c50:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005c54:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c5c:	4b71      	ldr	r3, [pc, #452]	@ (8005e24 <ETS+0x1708>)
 8005c5e:	443b      	add	r3, r7
 8005c60:	edd3 7a00 	vldr	s15, [r3]
 8005c64:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8005c68:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8005e20 <ETS+0x1704>)
 8005c6e:	443b      	add	r3, r7
 8005c70:	edd3 7a00 	vldr	s15, [r3]
 8005c74:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c7c:	4b69      	ldr	r3, [pc, #420]	@ (8005e24 <ETS+0x1708>)
 8005c7e:	443b      	add	r3, r7
 8005c80:	edd3 7a00 	vldr	s15, [r3]
 8005c84:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8005c88:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005c8c:	4b64      	ldr	r3, [pc, #400]	@ (8005e20 <ETS+0x1704>)
 8005c8e:	443b      	add	r3, r7
 8005c90:	edd3 7a00 	vldr	s15, [r3]
 8005c94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c9c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ca0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ca4:	ed93 6a01 	vldr	s12, [r3, #4]
 8005ca8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005cac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005cb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005cb4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8005e2c <ETS+0x1710>)
 8005cba:	443b      	add	r3, r7
 8005cbc:	edd3 7a00 	vldr	s15, [r3]
 8005cc0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005cc4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005cc8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ccc:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cd8:	4b53      	ldr	r3, [pc, #332]	@ (8005e28 <ETS+0x170c>)
 8005cda:	443b      	add	r3, r7
 8005cdc:	ed93 6a00 	vldr	s12, [r3]
 8005ce0:	4b52      	ldr	r3, [pc, #328]	@ (8005e2c <ETS+0x1710>)
 8005ce2:	443b      	add	r3, r7
 8005ce4:	edd3 7a00 	vldr	s15, [r3]
 8005ce8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cf0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005cf4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005cf8:	ed93 6a00 	vldr	s12, [r3]
 8005cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8005e2c <ETS+0x1710>)
 8005cfe:	443b      	add	r3, r7
 8005d00:	edd3 7a00 	vldr	s15, [r3]
 8005d04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d08:	4b48      	ldr	r3, [pc, #288]	@ (8005e2c <ETS+0x1710>)
 8005d0a:	443b      	add	r3, r7
 8005d0c:	edd3 7a00 	vldr	s15, [r3]
 8005d10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d18:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005d1c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005d20:	edd3 7a00 	vldr	s15, [r3]
 8005d24:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
 8005d28:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e2c <ETS+0x1710>)
 8005d2e:	443b      	add	r3, r7
 8005d30:	edd3 7a00 	vldr	s15, [r3]
 8005d34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d38:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005d3c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005d40:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d4c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005d50:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005d54:	edd3 7a00 	vldr	s15, [r3]
 8005d58:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 8005d5c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005d60:	4b2f      	ldr	r3, [pc, #188]	@ (8005e20 <ETS+0x1704>)
 8005d62:	443b      	add	r3, r7
 8005d64:	edd3 7a00 	vldr	s15, [r3]
 8005d68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d74:	eef1 7a67 	vneg.f32	s15, s15
 8005d78:	eeb0 0a67 	vmov.f32	s0, s15
 8005d7c:	f00c faca 	bl	8012314 <sqrtf>
 8005d80:	eef0 7a40 	vmov.f32	s15, s0
 8005d84:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005d88:	eeb0 0a67 	vmov.f32	s0, s15
 8005d8c:	f00c fae0 	bl	8012350 <atanf>
 8005d90:	eef0 7a40 	vmov.f32	s15, s0
 8005d94:	eef1 7a67 	vneg.f32	s15, s15
 8005d98:	4b26      	ldr	r3, [pc, #152]	@ (8005e34 <ETS+0x1718>)
 8005d9a:	443b      	add	r3, r7
 8005d9c:	edc3 7a00 	vstr	s15, [r3]

    n1 = -X1_2*X7_2 + 4*X1_2*X[4]*X[8] - 4*X[1]*X[2]*X[3]*X[8] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[1]*X[4]*X[5]*X[6] - X2_2*X6_2 + 2*X[2]*X[3]*X[5]*X[6] + 4*X2_2*X[8] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[1]*X3_2*X[8] - 4*X[0]*X[3]*X[6]*X[7] + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8];
 8005da0:	4b20      	ldr	r3, [pc, #128]	@ (8005e24 <ETS+0x1708>)
 8005da2:	443b      	add	r3, r7
 8005da4:	edd3 7a00 	vldr	s15, [r3]
 8005da8:	eeb1 7a67 	vneg.f32	s14, s15
 8005dac:	4b22      	ldr	r3, [pc, #136]	@ (8005e38 <ETS+0x171c>)
 8005dae:	443b      	add	r3, r7
 8005db0:	edd3 7a00 	vldr	s15, [r3]
 8005db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005db8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e24 <ETS+0x1708>)
 8005dba:	443b      	add	r3, r7
 8005dbc:	edd3 7a00 	vldr	s15, [r3]
 8005dc0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005dc4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005dc8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005dcc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005dd0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005dd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005dd8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ddc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005de0:	edd3 7a08 	vldr	s15, [r3, #32]
 8005de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dec:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005df0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005df4:	edd3 7a01 	vldr	s15, [r3, #4]
 8005df8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005dfc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005e00:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e04:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e08:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e10:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e14:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e18:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e1c:	e00e      	b.n	8005e3c <ETS+0x1720>
 8005e1e:	bf00      	nop
 8005e20:	00014ca4 	.word	0x00014ca4
 8005e24:	00014cb0 	.word	0x00014cb0
 8005e28:	00014cac 	.word	0x00014cac
 8005e2c:	00014ca8 	.word	0x00014ca8
 8005e30:	00014cbc 	.word	0x00014cbc
 8005e34:	00014cb4 	.word	0x00014cb4
 8005e38:	00014c98 	.word	0x00014c98
 8005e3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e40:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e44:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e48:	edd3 7a08 	vldr	s15, [r3, #32]
 8005e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e54:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e58:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e60:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005e64:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e68:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e74:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e78:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e84:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e88:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e8c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e98:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e9c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ea0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ea4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005ea8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005eac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005eb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8005eb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005eb8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ebc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ec0:	edd3 7a05 	vldr	s15, [r3, #20]
 8005ec4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ec8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ecc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ed0:	edd3 7a07 	vldr	s15, [r3, #28]
 8005ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005edc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ee0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ee4:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ee8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005eec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005ef0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ef4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ef8:	edd3 7a04 	vldr	s15, [r3, #16]
 8005efc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f00:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f04:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f08:	edd3 7a05 	vldr	s15, [r3, #20]
 8005f0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f10:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f14:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f18:	edd3 7a06 	vldr	s15, [r3, #24]
 8005f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f24:	4be7      	ldr	r3, [pc, #924]	@ (80062c4 <ETS+0x1ba8>)
 8005f26:	443b      	add	r3, r7
 8005f28:	edd3 6a00 	vldr	s13, [r3]
 8005f2c:	4be6      	ldr	r3, [pc, #920]	@ (80062c8 <ETS+0x1bac>)
 8005f2e:	443b      	add	r3, r7
 8005f30:	edd3 7a00 	vldr	s15, [r3]
 8005f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f3c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f40:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f44:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f48:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005f4c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f50:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f54:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f5c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f60:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f64:	edd3 7a05 	vldr	s15, [r3, #20]
 8005f68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f6c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f70:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f74:	edd3 7a06 	vldr	s15, [r3, #24]
 8005f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f80:	4bd0      	ldr	r3, [pc, #832]	@ (80062c4 <ETS+0x1ba8>)
 8005f82:	443b      	add	r3, r7
 8005f84:	edd3 7a00 	vldr	s15, [r3]
 8005f88:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005f8c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005f90:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f94:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f98:	edd3 7a08 	vldr	s15, [r3, #32]
 8005f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fa4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005fa8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005fac:	edd3 7a02 	vldr	s15, [r3, #8]
 8005fb0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005fb4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005fb8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005fbc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005fc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8005fc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fc8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005fcc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005fd0:	edd3 7a07 	vldr	s15, [r3, #28]
 8005fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fdc:	4bbb      	ldr	r3, [pc, #748]	@ (80062cc <ETS+0x1bb0>)
 8005fde:	443b      	add	r3, r7
 8005fe0:	edd3 6a00 	vldr	s13, [r3]
 8005fe4:	4bba      	ldr	r3, [pc, #744]	@ (80062d0 <ETS+0x1bb4>)
 8005fe6:	443b      	add	r3, r7
 8005fe8:	edd3 7a00 	vldr	s15, [r3]
 8005fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ff4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ff8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ffc:	edd3 7a01 	vldr	s15, [r3, #4]
 8006000:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006004:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006008:	4bb0      	ldr	r3, [pc, #704]	@ (80062cc <ETS+0x1bb0>)
 800600a:	443b      	add	r3, r7
 800600c:	edd3 7a00 	vldr	s15, [r3]
 8006010:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006014:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006018:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800601c:	edd3 7a08 	vldr	s15, [r3, #32]
 8006020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006028:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800602c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006030:	edd3 7a00 	vldr	s15, [r3]
 8006034:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006038:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800603c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006040:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006044:	edd3 7a03 	vldr	s15, [r3, #12]
 8006048:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800604c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006050:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006054:	edd3 7a06 	vldr	s15, [r3, #24]
 8006058:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800605c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006060:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006064:	edd3 7a07 	vldr	s15, [r3, #28]
 8006068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800606c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006070:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006074:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006078:	edd3 7a04 	vldr	s15, [r3, #16]
 800607c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006080:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006084:	4b92      	ldr	r3, [pc, #584]	@ (80062d0 <ETS+0x1bb4>)
 8006086:	443b      	add	r3, r7
 8006088:	edd3 7a00 	vldr	s15, [r3]
 800608c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006090:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006094:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006098:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800609c:	edd3 7a00 	vldr	s15, [r3]
 80060a0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80060a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80060a8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80060ac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80060b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80060b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80060b8:	4b83      	ldr	r3, [pc, #524]	@ (80062c8 <ETS+0x1bac>)
 80060ba:	443b      	add	r3, r7
 80060bc:	edd3 7a00 	vldr	s15, [r3]
 80060c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060c8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80060cc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80060d0:	edd3 7a00 	vldr	s15, [r3]
 80060d4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80060d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80060dc:	4b7d      	ldr	r3, [pc, #500]	@ (80062d4 <ETS+0x1bb8>)
 80060de:	443b      	add	r3, r7
 80060e0:	edd3 7a00 	vldr	s15, [r3]
 80060e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060ec:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80060f0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80060f4:	edd3 7a00 	vldr	s15, [r3]
 80060f8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80060fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006100:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006104:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006108:	edd3 7a04 	vldr	s15, [r3, #16]
 800610c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006110:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006114:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006118:	edd3 7a08 	vldr	s15, [r3, #32]
 800611c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006124:	4b6c      	ldr	r3, [pc, #432]	@ (80062d8 <ETS+0x1bbc>)
 8006126:	443b      	add	r3, r7
 8006128:	edc3 7a00 	vstr	s15, [r3]
    n2 = X1_2*X[4] - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4];
 800612c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006130:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006134:	ed93 7a04 	vldr	s14, [r3, #16]
 8006138:	4b68      	ldr	r3, [pc, #416]	@ (80062dc <ETS+0x1bc0>)
 800613a:	443b      	add	r3, r7
 800613c:	edd3 7a00 	vldr	s15, [r3]
 8006140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006144:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006148:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800614c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006150:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006154:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006158:	edd3 7a02 	vldr	s15, [r3, #8]
 800615c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006160:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006164:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006168:	edd3 7a03 	vldr	s15, [r3, #12]
 800616c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006170:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006174:	4b53      	ldr	r3, [pc, #332]	@ (80062c4 <ETS+0x1ba8>)
 8006176:	443b      	add	r3, r7
 8006178:	edd3 7a00 	vldr	s15, [r3]
 800617c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006180:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006184:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006188:	edd3 6a00 	vldr	s13, [r3]
 800618c:	4b4f      	ldr	r3, [pc, #316]	@ (80062cc <ETS+0x1bb0>)
 800618e:	443b      	add	r3, r7
 8006190:	edd3 7a00 	vldr	s15, [r3]
 8006194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800619c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80061a0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80061a4:	edd3 7a00 	vldr	s15, [r3]
 80061a8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80061ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80061b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80061b4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80061b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80061bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061c4:	4b46      	ldr	r3, [pc, #280]	@ (80062e0 <ETS+0x1bc4>)
 80061c6:	443b      	add	r3, r7
 80061c8:	edc3 7a00 	vstr	s15, [r3]
    n3 = 2*X1_2*X3_2*X[4] - 4*X1_2*X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2*X3_2 + X[0]*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2;
 80061cc:	4b43      	ldr	r3, [pc, #268]	@ (80062dc <ETS+0x1bc0>)
 80061ce:	443b      	add	r3, r7
 80061d0:	edd3 7a00 	vldr	s15, [r3]
 80061d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80061d8:	4b3c      	ldr	r3, [pc, #240]	@ (80062cc <ETS+0x1bb0>)
 80061da:	443b      	add	r3, r7
 80061dc:	edd3 7a00 	vldr	s15, [r3]
 80061e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061e4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80061e8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80061ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80061f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061f4:	4b39      	ldr	r3, [pc, #228]	@ (80062dc <ETS+0x1bc0>)
 80061f6:	443b      	add	r3, r7
 80061f8:	edd3 7a00 	vldr	s15, [r3]
 80061fc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006200:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006204:	4b37      	ldr	r3, [pc, #220]	@ (80062e4 <ETS+0x1bc8>)
 8006206:	443b      	add	r3, r7
 8006208:	edd3 7a00 	vldr	s15, [r3]
 800620c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006210:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006214:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006218:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800621c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006220:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006224:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006228:	edd3 7a02 	vldr	s15, [r3, #8]
 800622c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006230:	4b26      	ldr	r3, [pc, #152]	@ (80062cc <ETS+0x1bb0>)
 8006232:	443b      	add	r3, r7
 8006234:	edd3 7a00 	vldr	s15, [r3]
 8006238:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800623c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006240:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006244:	edd3 7a03 	vldr	s15, [r3, #12]
 8006248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800624c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006250:	4b1c      	ldr	r3, [pc, #112]	@ (80062c4 <ETS+0x1ba8>)
 8006252:	443b      	add	r3, r7
 8006254:	edd3 6a00 	vldr	s13, [r3]
 8006258:	4b1c      	ldr	r3, [pc, #112]	@ (80062cc <ETS+0x1bb0>)
 800625a:	443b      	add	r3, r7
 800625c:	edd3 7a00 	vldr	s15, [r3]
 8006260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006268:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800626c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006270:	edd3 6a00 	vldr	s13, [r3]
 8006274:	4b15      	ldr	r3, [pc, #84]	@ (80062cc <ETS+0x1bb0>)
 8006276:	443b      	add	r3, r7
 8006278:	edd3 7a00 	vldr	s15, [r3]
 800627c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006284:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006288:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800628c:	edd3 7a00 	vldr	s15, [r3]
 8006290:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8006294:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006298:	4b0c      	ldr	r3, [pc, #48]	@ (80062cc <ETS+0x1bb0>)
 800629a:	443b      	add	r3, r7
 800629c:	edd3 7a00 	vldr	s15, [r3]
 80062a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80062a4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80062a8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80062ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80062b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062b8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80062bc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80062c0:	e012      	b.n	80062e8 <ETS+0x1bcc>
 80062c2:	bf00      	nop
 80062c4:	00014cac 	.word	0x00014cac
 80062c8:	00014c9c 	.word	0x00014c9c
 80062cc:	00014ca8 	.word	0x00014ca8
 80062d0:	00014ca0 	.word	0x00014ca0
 80062d4:	00014c98 	.word	0x00014c98
 80062d8:	00014cec 	.word	0x00014cec
 80062dc:	00014cb0 	.word	0x00014cb0
 80062e0:	00014ce8 	.word	0x00014ce8
 80062e4:	00014ca4 	.word	0x00014ca4
 80062e8:	edd3 7a00 	vldr	s15, [r3]
 80062ec:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80062f0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80062f4:	4bbd      	ldr	r3, [pc, #756]	@ (80065ec <ETS+0x1ed0>)
 80062f6:	443b      	add	r3, r7
 80062f8:	edd3 7a00 	vldr	s15, [r3]
 80062fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006304:	4bba      	ldr	r3, [pc, #744]	@ (80065f0 <ETS+0x1ed4>)
 8006306:	443b      	add	r3, r7
 8006308:	edc3 7a00 	vstr	s15, [r3]
    n4 = 4*X[4] - X3_2;
 800630c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006310:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006314:	edd3 7a04 	vldr	s15, [r3, #16]
 8006318:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800631c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006320:	4bb4      	ldr	r3, [pc, #720]	@ (80065f4 <ETS+0x1ed8>)
 8006322:	443b      	add	r3, r7
 8006324:	edd3 7a00 	vldr	s15, [r3]
 8006328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800632c:	4bb2      	ldr	r3, [pc, #712]	@ (80065f8 <ETS+0x1edc>)
 800632e:	443b      	add	r3, r7
 8006330:	edc3 7a00 	vstr	s15, [r3]
    n5 = 4*X[0]*X[4] - X2_2;
 8006334:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006338:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800633c:	edd3 7a00 	vldr	s15, [r3]
 8006340:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006344:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006348:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800634c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006350:	edd3 7a04 	vldr	s15, [r3, #16]
 8006354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006358:	4ba8      	ldr	r3, [pc, #672]	@ (80065fc <ETS+0x1ee0>)
 800635a:	443b      	add	r3, r7
 800635c:	edd3 7a00 	vldr	s15, [r3]
 8006360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006364:	4ba6      	ldr	r3, [pc, #664]	@ (8006600 <ETS+0x1ee4>)
 8006366:	443b      	add	r3, r7
 8006368:	edc3 7a00 	vstr	s15, [r3]
    n6 = 4*X[0] - X1_2;
 800636c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006370:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006374:	edd3 7a00 	vldr	s15, [r3]
 8006378:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800637c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006380:	4ba0      	ldr	r3, [pc, #640]	@ (8006604 <ETS+0x1ee8>)
 8006382:	443b      	add	r3, r7
 8006384:	edd3 7a00 	vldr	s15, [r3]
 8006388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800638c:	4b9e      	ldr	r3, [pc, #632]	@ (8006608 <ETS+0x1eec>)
 800638e:	443b      	add	r3, r7
 8006390:	edc3 7a00 	vstr	s15, [r3]

    phi = -atanf((fabsf(X[4])*sqrtf(n1*n5) * (2*X[2] - X[1]*X[3]) * sqrtf((X[4]*n4*n6) / n3)) / (X4_2 * sqrtf(-n2 / X[4]) * sqrtf(n1*n6) * sqrtf(-(n2 * n4) / n3) * sqrtf(-(n4*n5) / (X[4]*n2))));
 8006394:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006398:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800639c:	edd3 7a04 	vldr	s15, [r3, #16]
 80063a0:	eeb0 8ae7 	vabs.f32	s16, s15
 80063a4:	4b99      	ldr	r3, [pc, #612]	@ (800660c <ETS+0x1ef0>)
 80063a6:	443b      	add	r3, r7
 80063a8:	ed93 7a00 	vldr	s14, [r3]
 80063ac:	4b94      	ldr	r3, [pc, #592]	@ (8006600 <ETS+0x1ee4>)
 80063ae:	443b      	add	r3, r7
 80063b0:	edd3 7a00 	vldr	s15, [r3]
 80063b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b8:	eeb0 0a67 	vmov.f32	s0, s15
 80063bc:	f00b ffaa 	bl	8012314 <sqrtf>
 80063c0:	eef0 7a40 	vmov.f32	s15, s0
 80063c4:	ee28 7a27 	vmul.f32	s14, s16, s15
 80063c8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80063cc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80063d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80063d4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80063d8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80063dc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80063e0:	ed93 6a01 	vldr	s12, [r3, #4]
 80063e4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80063e8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80063ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80063f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80063f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80063f8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80063fc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006400:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006404:	ed93 7a04 	vldr	s14, [r3, #16]
 8006408:	4b7b      	ldr	r3, [pc, #492]	@ (80065f8 <ETS+0x1edc>)
 800640a:	443b      	add	r3, r7
 800640c:	edd3 7a00 	vldr	s15, [r3]
 8006410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006414:	4b7c      	ldr	r3, [pc, #496]	@ (8006608 <ETS+0x1eec>)
 8006416:	443b      	add	r3, r7
 8006418:	edd3 7a00 	vldr	s15, [r3]
 800641c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006420:	4b73      	ldr	r3, [pc, #460]	@ (80065f0 <ETS+0x1ed4>)
 8006422:	443b      	add	r3, r7
 8006424:	edd3 7a00 	vldr	s15, [r3]
 8006428:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800642c:	eeb0 0a66 	vmov.f32	s0, s13
 8006430:	f00b ff70 	bl	8012314 <sqrtf>
 8006434:	eef0 7a40 	vmov.f32	s15, s0
 8006438:	ee28 8a27 	vmul.f32	s16, s16, s15
 800643c:	4b74      	ldr	r3, [pc, #464]	@ (8006610 <ETS+0x1ef4>)
 800643e:	443b      	add	r3, r7
 8006440:	edd3 7a00 	vldr	s15, [r3]
 8006444:	eeb1 7a67 	vneg.f32	s14, s15
 8006448:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800644c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006450:	edd3 7a04 	vldr	s15, [r3, #16]
 8006454:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006458:	eeb0 0a66 	vmov.f32	s0, s13
 800645c:	f00b ff5a 	bl	8012314 <sqrtf>
 8006460:	eeb0 7a40 	vmov.f32	s14, s0
 8006464:	4b61      	ldr	r3, [pc, #388]	@ (80065ec <ETS+0x1ed0>)
 8006466:	443b      	add	r3, r7
 8006468:	edd3 7a00 	vldr	s15, [r3]
 800646c:	ee67 8a27 	vmul.f32	s17, s14, s15
 8006470:	4b66      	ldr	r3, [pc, #408]	@ (800660c <ETS+0x1ef0>)
 8006472:	443b      	add	r3, r7
 8006474:	ed93 7a00 	vldr	s14, [r3]
 8006478:	4b63      	ldr	r3, [pc, #396]	@ (8006608 <ETS+0x1eec>)
 800647a:	443b      	add	r3, r7
 800647c:	edd3 7a00 	vldr	s15, [r3]
 8006480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006484:	eeb0 0a67 	vmov.f32	s0, s15
 8006488:	f00b ff44 	bl	8012314 <sqrtf>
 800648c:	eef0 7a40 	vmov.f32	s15, s0
 8006490:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8006494:	4b5e      	ldr	r3, [pc, #376]	@ (8006610 <ETS+0x1ef4>)
 8006496:	443b      	add	r3, r7
 8006498:	ed93 7a00 	vldr	s14, [r3]
 800649c:	4b56      	ldr	r3, [pc, #344]	@ (80065f8 <ETS+0x1edc>)
 800649e:	443b      	add	r3, r7
 80064a0:	edd3 7a00 	vldr	s15, [r3]
 80064a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a8:	eeb1 7a67 	vneg.f32	s14, s15
 80064ac:	4b50      	ldr	r3, [pc, #320]	@ (80065f0 <ETS+0x1ed4>)
 80064ae:	443b      	add	r3, r7
 80064b0:	edd3 7a00 	vldr	s15, [r3]
 80064b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80064b8:	eeb0 0a66 	vmov.f32	s0, s13
 80064bc:	f00b ff2a 	bl	8012314 <sqrtf>
 80064c0:	eef0 7a40 	vmov.f32	s15, s0
 80064c4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80064c8:	4b4b      	ldr	r3, [pc, #300]	@ (80065f8 <ETS+0x1edc>)
 80064ca:	443b      	add	r3, r7
 80064cc:	ed93 7a00 	vldr	s14, [r3]
 80064d0:	4b4b      	ldr	r3, [pc, #300]	@ (8006600 <ETS+0x1ee4>)
 80064d2:	443b      	add	r3, r7
 80064d4:	edd3 7a00 	vldr	s15, [r3]
 80064d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064dc:	eeb1 7a67 	vneg.f32	s14, s15
 80064e0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80064e4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80064e8:	edd3 6a04 	vldr	s13, [r3, #16]
 80064ec:	4b48      	ldr	r3, [pc, #288]	@ (8006610 <ETS+0x1ef4>)
 80064ee:	443b      	add	r3, r7
 80064f0:	edd3 7a00 	vldr	s15, [r3]
 80064f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80064fc:	eeb0 0a66 	vmov.f32	s0, s13
 8006500:	f00b ff08 	bl	8012314 <sqrtf>
 8006504:	eef0 7a40 	vmov.f32	s15, s0
 8006508:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800650c:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8006510:	eeb0 0a47 	vmov.f32	s0, s14
 8006514:	f00b ff1c 	bl	8012350 <atanf>
 8006518:	eef0 7a40 	vmov.f32	s15, s0
 800651c:	eef1 7a67 	vneg.f32	s15, s15
 8006520:	4b3c      	ldr	r3, [pc, #240]	@ (8006614 <ETS+0x1ef8>)
 8006522:	443b      	add	r3, r7
 8006524:	edc3 7a00 	vstr	s15, [r3]

    p[0] = sx;
 8006528:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800652c:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a39      	ldr	r2, [pc, #228]	@ (8006618 <ETS+0x1efc>)
 8006534:	443a      	add	r2, r7
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 800653a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800653e:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3304      	adds	r3, #4
 8006546:	4a35      	ldr	r2, [pc, #212]	@ (800661c <ETS+0x1f00>)
 8006548:	443a      	add	r2, r7
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 800654e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006552:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3308      	adds	r3, #8
 800655a:	4a31      	ldr	r2, [pc, #196]	@ (8006620 <ETS+0x1f04>)
 800655c:	443a      	add	r2, r7
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8006562:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006566:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	330c      	adds	r3, #12
 800656e:	4a2d      	ldr	r2, [pc, #180]	@ (8006624 <ETS+0x1f08>)
 8006570:	443a      	add	r2, r7
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8006576:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800657a:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3310      	adds	r3, #16
 8006582:	4a29      	ldr	r2, [pc, #164]	@ (8006628 <ETS+0x1f0c>)
 8006584:	443a      	add	r2, r7
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 800658a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800658e:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	4a25      	ldr	r2, [pc, #148]	@ (800662c <ETS+0x1f10>)
 8006598:	443a      	add	r2, r7
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 800659e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80065a2:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3318      	adds	r3, #24
 80065aa:	4a21      	ldr	r2, [pc, #132]	@ (8006630 <ETS+0x1f14>)
 80065ac:	443a      	add	r2, r7
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 80065b2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80065b6:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	331c      	adds	r3, #28
 80065be:	4a15      	ldr	r2, [pc, #84]	@ (8006614 <ETS+0x1ef8>)
 80065c0:	443a      	add	r2, r7
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 80065c6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80065ca:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3320      	adds	r3, #32
 80065d2:	4a18      	ldr	r2, [pc, #96]	@ (8006634 <ETS+0x1f18>)
 80065d4:	443a      	add	r2, r7
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	601a      	str	r2, [r3, #0]
}
 80065da:	bf00      	nop
 80065dc:	f507 37a6 	add.w	r7, r7, #84992	@ 0x14c00
 80065e0:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 80065e4:	46bd      	mov	sp, r7
 80065e6:	ecbd 8b02 	vpop	{d8}
 80065ea:	bd90      	pop	{r4, r7, pc}
 80065ec:	00014ca4 	.word	0x00014ca4
 80065f0:	00014ce4 	.word	0x00014ce4
 80065f4:	00014ca8 	.word	0x00014ca8
 80065f8:	00014ce0 	.word	0x00014ce0
 80065fc:	00014cac 	.word	0x00014cac
 8006600:	00014cdc 	.word	0x00014cdc
 8006604:	00014cb0 	.word	0x00014cb0
 8006608:	00014cd8 	.word	0x00014cd8
 800660c:	00014cec 	.word	0x00014cec
 8006610:	00014ce8 	.word	0x00014ce8
 8006614:	00014cb8 	.word	0x00014cb8
 8006618:	00014cc8 	.word	0x00014cc8
 800661c:	00014cc4 	.word	0x00014cc4
 8006620:	00014cc0 	.word	0x00014cc0
 8006624:	00014cd4 	.word	0x00014cd4
 8006628:	00014cd0 	.word	0x00014cd0
 800662c:	00014ccc 	.word	0x00014ccc
 8006630:	00014cbc 	.word	0x00014cbc
 8006634:	00014cb4 	.word	0x00014cb4

08006638 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08c      	sub	sp, #48	@ 0x30
 800663c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800663e:	f107 031c 	add.w	r3, r7, #28
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	605a      	str	r2, [r3, #4]
 8006648:	609a      	str	r2, [r3, #8]
 800664a:	60da      	str	r2, [r3, #12]
 800664c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800664e:	4b88      	ldr	r3, [pc, #544]	@ (8006870 <MX_GPIO_Init+0x238>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	4a87      	ldr	r2, [pc, #540]	@ (8006870 <MX_GPIO_Init+0x238>)
 8006654:	f043 0304 	orr.w	r3, r3, #4
 8006658:	6313      	str	r3, [r2, #48]	@ 0x30
 800665a:	4b85      	ldr	r3, [pc, #532]	@ (8006870 <MX_GPIO_Init+0x238>)
 800665c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006666:	4b82      	ldr	r3, [pc, #520]	@ (8006870 <MX_GPIO_Init+0x238>)
 8006668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666a:	4a81      	ldr	r2, [pc, #516]	@ (8006870 <MX_GPIO_Init+0x238>)
 800666c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006670:	6313      	str	r3, [r2, #48]	@ 0x30
 8006672:	4b7f      	ldr	r3, [pc, #508]	@ (8006870 <MX_GPIO_Init+0x238>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800667e:	4b7c      	ldr	r3, [pc, #496]	@ (8006870 <MX_GPIO_Init+0x238>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006682:	4a7b      	ldr	r2, [pc, #492]	@ (8006870 <MX_GPIO_Init+0x238>)
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	6313      	str	r3, [r2, #48]	@ 0x30
 800668a:	4b79      	ldr	r3, [pc, #484]	@ (8006870 <MX_GPIO_Init+0x238>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006696:	4b76      	ldr	r3, [pc, #472]	@ (8006870 <MX_GPIO_Init+0x238>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669a:	4a75      	ldr	r2, [pc, #468]	@ (8006870 <MX_GPIO_Init+0x238>)
 800669c:	f043 0302 	orr.w	r3, r3, #2
 80066a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80066a2:	4b73      	ldr	r3, [pc, #460]	@ (8006870 <MX_GPIO_Init+0x238>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80066ae:	4b70      	ldr	r3, [pc, #448]	@ (8006870 <MX_GPIO_Init+0x238>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b2:	4a6f      	ldr	r2, [pc, #444]	@ (8006870 <MX_GPIO_Init+0x238>)
 80066b4:	f043 0308 	orr.w	r3, r3, #8
 80066b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80066ba:	4b6d      	ldr	r3, [pc, #436]	@ (8006870 <MX_GPIO_Init+0x238>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	60bb      	str	r3, [r7, #8]
 80066c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80066c6:	4b6a      	ldr	r3, [pc, #424]	@ (8006870 <MX_GPIO_Init+0x238>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ca:	4a69      	ldr	r2, [pc, #420]	@ (8006870 <MX_GPIO_Init+0x238>)
 80066cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80066d2:	4b67      	ldr	r3, [pc, #412]	@ (8006870 <MX_GPIO_Init+0x238>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066da:	607b      	str	r3, [r7, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80066de:	2201      	movs	r2, #1
 80066e0:	2110      	movs	r1, #16
 80066e2:	4864      	ldr	r0, [pc, #400]	@ (8006874 <MX_GPIO_Init+0x23c>)
 80066e4:	f001 fbcc 	bl	8007e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80066e8:	2200      	movs	r2, #0
 80066ea:	2140      	movs	r1, #64	@ 0x40
 80066ec:	4862      	ldr	r0, [pc, #392]	@ (8006878 <MX_GPIO_Init+0x240>)
 80066ee:	f001 fbc7 	bl	8007e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80066f2:	2201      	movs	r2, #1
 80066f4:	2180      	movs	r1, #128	@ 0x80
 80066f6:	4861      	ldr	r0, [pc, #388]	@ (800687c <MX_GPIO_Init+0x244>)
 80066f8:	f001 fbc2 	bl	8007e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80066fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006702:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8006706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006708:	2300      	movs	r3, #0
 800670a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800670c:	f107 031c 	add.w	r3, r7, #28
 8006710:	4619      	mov	r1, r3
 8006712:	485b      	ldr	r0, [pc, #364]	@ (8006880 <MX_GPIO_Init+0x248>)
 8006714:	f001 fa08 	bl	8007b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006718:	2332      	movs	r3, #50	@ 0x32
 800671a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800671c:	2302      	movs	r3, #2
 800671e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006720:	2300      	movs	r3, #0
 8006722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006724:	2303      	movs	r3, #3
 8006726:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006728:	230b      	movs	r3, #11
 800672a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800672c:	f107 031c 	add.w	r3, r7, #28
 8006730:	4619      	mov	r1, r3
 8006732:	4853      	ldr	r0, [pc, #332]	@ (8006880 <MX_GPIO_Init+0x248>)
 8006734:	f001 f9f8 	bl	8007b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006738:	2386      	movs	r3, #134	@ 0x86
 800673a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800673c:	2302      	movs	r3, #2
 800673e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006740:	2300      	movs	r3, #0
 8006742:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006744:	2303      	movs	r3, #3
 8006746:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006748:	230b      	movs	r3, #11
 800674a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800674c:	f107 031c 	add.w	r3, r7, #28
 8006750:	4619      	mov	r1, r3
 8006752:	4848      	ldr	r0, [pc, #288]	@ (8006874 <MX_GPIO_Init+0x23c>)
 8006754:	f001 f9e8 	bl	8007b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8006758:	2310      	movs	r3, #16
 800675a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800675c:	2301      	movs	r3, #1
 800675e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006760:	2300      	movs	r3, #0
 8006762:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006764:	2303      	movs	r3, #3
 8006766:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8006768:	f107 031c 	add.w	r3, r7, #28
 800676c:	4619      	mov	r1, r3
 800676e:	4841      	ldr	r0, [pc, #260]	@ (8006874 <MX_GPIO_Init+0x23c>)
 8006770:	f001 f9da 	bl	8007b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006774:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800677a:	2302      	movs	r3, #2
 800677c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800677e:	2300      	movs	r3, #0
 8006780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006782:	2303      	movs	r3, #3
 8006784:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006786:	230b      	movs	r3, #11
 8006788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800678a:	f107 031c 	add.w	r3, r7, #28
 800678e:	4619      	mov	r1, r3
 8006790:	483a      	ldr	r0, [pc, #232]	@ (800687c <MX_GPIO_Init+0x244>)
 8006792:	f001 f9c9 	bl	8007b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006796:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800679a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800679c:	2302      	movs	r3, #2
 800679e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067a4:	2303      	movs	r3, #3
 80067a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80067a8:	2307      	movs	r3, #7
 80067aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067ac:	f107 031c 	add.w	r3, r7, #28
 80067b0:	4619      	mov	r1, r3
 80067b2:	4834      	ldr	r0, [pc, #208]	@ (8006884 <MX_GPIO_Init+0x24c>)
 80067b4:	f001 f9b8 	bl	8007b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80067b8:	2340      	movs	r3, #64	@ 0x40
 80067ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067bc:	2301      	movs	r3, #1
 80067be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067c4:	2300      	movs	r3, #0
 80067c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80067c8:	f107 031c 	add.w	r3, r7, #28
 80067cc:	4619      	mov	r1, r3
 80067ce:	482a      	ldr	r0, [pc, #168]	@ (8006878 <MX_GPIO_Init+0x240>)
 80067d0:	f001 f9aa 	bl	8007b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80067d4:	2380      	movs	r3, #128	@ 0x80
 80067d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067d8:	2300      	movs	r3, #0
 80067da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067dc:	2300      	movs	r3, #0
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80067e0:	f107 031c 	add.w	r3, r7, #28
 80067e4:	4619      	mov	r1, r3
 80067e6:	4824      	ldr	r0, [pc, #144]	@ (8006878 <MX_GPIO_Init+0x240>)
 80067e8:	f001 f99e 	bl	8007b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80067ec:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80067f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067f2:	2302      	movs	r3, #2
 80067f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067fa:	2303      	movs	r3, #3
 80067fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80067fe:	230a      	movs	r3, #10
 8006800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006802:	f107 031c 	add.w	r3, r7, #28
 8006806:	4619      	mov	r1, r3
 8006808:	481a      	ldr	r0, [pc, #104]	@ (8006874 <MX_GPIO_Init+0x23c>)
 800680a:	f001 f98d 	bl	8007b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800680e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006814:	2300      	movs	r3, #0
 8006816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006818:	2300      	movs	r3, #0
 800681a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800681c:	f107 031c 	add.w	r3, r7, #28
 8006820:	4619      	mov	r1, r3
 8006822:	4814      	ldr	r0, [pc, #80]	@ (8006874 <MX_GPIO_Init+0x23c>)
 8006824:	f001 f980 	bl	8007b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006828:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800682c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800682e:	2302      	movs	r3, #2
 8006830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006832:	2300      	movs	r3, #0
 8006834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006836:	2303      	movs	r3, #3
 8006838:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800683a:	230b      	movs	r3, #11
 800683c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800683e:	f107 031c 	add.w	r3, r7, #28
 8006842:	4619      	mov	r1, r3
 8006844:	480c      	ldr	r0, [pc, #48]	@ (8006878 <MX_GPIO_Init+0x240>)
 8006846:	f001 f96f 	bl	8007b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800684a:	2380      	movs	r3, #128	@ 0x80
 800684c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800684e:	2301      	movs	r3, #1
 8006850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006852:	2300      	movs	r3, #0
 8006854:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006856:	2300      	movs	r3, #0
 8006858:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800685a:	f107 031c 	add.w	r3, r7, #28
 800685e:	4619      	mov	r1, r3
 8006860:	4806      	ldr	r0, [pc, #24]	@ (800687c <MX_GPIO_Init+0x244>)
 8006862:	f001 f961 	bl	8007b28 <HAL_GPIO_Init>

}
 8006866:	bf00      	nop
 8006868:	3730      	adds	r7, #48	@ 0x30
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	40023800 	.word	0x40023800
 8006874:	40020000 	.word	0x40020000
 8006878:	40021800 	.word	0x40021800
 800687c:	40020400 	.word	0x40020400
 8006880:	40020800 	.word	0x40020800
 8006884:	40020c00 	.word	0x40020c00

08006888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006888:	b5b0      	push	{r4, r5, r7, lr}
 800688a:	f5ad 4d74 	sub.w	sp, sp, #62464	@ 0xf400
 800688e:	b0b6      	sub	sp, #216	@ 0xd8
 8006890:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  char file_read[20] = {0};
 8006892:	2300      	movs	r3, #0
 8006894:	f24f 4294 	movw	r2, #62612	@ 0xf494
 8006898:	443a      	add	r2, r7
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	f24f 4398 	movw	r3, #62616	@ 0xf498
 80068a0:	443b      	add	r3, r7
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	605a      	str	r2, [r3, #4]
 80068a8:	609a      	str	r2, [r3, #8]
 80068aa:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80068ac:	f000 ff17 	bl	80076de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80068b0:	f000 faa6 	bl	8006e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80068b4:	f7ff fec0 	bl	8006638 <MX_GPIO_Init>
  MX_TIM2_Init();
 80068b8:	f000 fde0 	bl	800747c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80068bc:	f000 fe4e 	bl	800755c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80068c0:	f004 fdc0 	bl	800b444 <MX_FATFS_Init>
  MX_SPI3_Init();
 80068c4:	f000 fc9e 	bl	8007204 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  uint32_t start_time = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	f24f 42b4 	movw	r2, #62644	@ 0xf4b4
 80068ce:	443a      	add	r2, r7
 80068d0:	6013      	str	r3, [r2, #0]
  uint16_t file_cont = 1;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f24f 42ce 	movw	r2, #62670	@ 0xf4ce
 80068d8:	443a      	add	r2, r7
 80068da:	8013      	strh	r3, [r2, #0]
  float ETS_time = 0, NLLS_time = 0;
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	f24f 42b0 	movw	r2, #62640	@ 0xf4b0
 80068e4:	443a      	add	r2, r7
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	f24f 42ac 	movw	r2, #62636	@ 0xf4ac
 80068f0:	443a      	add	r2, r7
 80068f2:	6013      	str	r3, [r2, #0]

  FATFS fs;
  FRESULT res;

  // Monta o sistema de arquivos na unidade lógica "0:"
  res = f_mount(&fs, "0:", 1);
 80068f4:	f24f 2364 	movw	r3, #62052	@ 0xf264
 80068f8:	443b      	add	r3, r7
 80068fa:	2201      	movs	r2, #1
 80068fc:	4982      	ldr	r1, [pc, #520]	@ (8006b08 <main+0x280>)
 80068fe:	4618      	mov	r0, r3
 8006900:	f006 fb12 	bl	800cf28 <f_mount>
 8006904:	4603      	mov	r3, r0
 8006906:	f24f 42ab 	movw	r2, #62635	@ 0xf4ab
 800690a:	443a      	add	r2, r7
 800690c:	7013      	strb	r3, [r2, #0]
  if (res != FR_OK) {
 800690e:	f24f 43ab 	movw	r3, #62635	@ 0xf4ab
 8006912:	443b      	add	r3, r7
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <main+0xa6>
      printf("Falha ao montar o sistema de arquivos: %d\n", res);
 800691a:	f24f 43ab 	movw	r3, #62635	@ 0xf4ab
 800691e:	443b      	add	r3, r7
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	4619      	mov	r1, r3
 8006924:	4879      	ldr	r0, [pc, #484]	@ (8006b0c <main+0x284>)
 8006926:	f008 fe53 	bl	800f5d0 <iprintf>
      Error_Handler(); // ou retorne um erro
 800692a:	f000 facf 	bl	8006ecc <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(file_cont >= 3000)
 800692e:	f24f 43ce 	movw	r3, #62670	@ 0xf4ce
 8006932:	443b      	add	r3, r7
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800693a:	4293      	cmp	r3, r2
 800693c:	d901      	bls.n	8006942 <main+0xba>
	{
		return 1;
 800693e:	2301      	movs	r3, #1
 8006940:	e23f      	b.n	8006dc2 <main+0x53a>
	}

	sprintf(file_read, "0:/DATA/run%d.txt", file_cont);  // Prefixo de volume (0:) é comum no FatFs
 8006942:	f24f 43ce 	movw	r3, #62670	@ 0xf4ce
 8006946:	443b      	add	r3, r7
 8006948:	881a      	ldrh	r2, [r3, #0]
 800694a:	f24f 4394 	movw	r3, #62612	@ 0xf494
 800694e:	443b      	add	r3, r7
 8006950:	496f      	ldr	r1, [pc, #444]	@ (8006b10 <main+0x288>)
 8006952:	4618      	mov	r0, r3
 8006954:	f008 fe4e 	bl	800f5f4 <siprintf>

	FIL fil;
	FRESULT res;

	res = f_open(&fil, file_read, FA_READ);
 8006958:	f24f 4194 	movw	r1, #62612	@ 0xf494
 800695c:	4439      	add	r1, r7
 800695e:	4b6d      	ldr	r3, [pc, #436]	@ (8006b14 <main+0x28c>)
 8006960:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8006964:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8006968:	443b      	add	r3, r7
 800696a:	2201      	movs	r2, #1
 800696c:	4618      	mov	r0, r3
 800696e:	f006 fb21 	bl	800cfb4 <f_open>
 8006972:	4603      	mov	r3, r0
 8006974:	f24f 42aa 	movw	r2, #62634	@ 0xf4aa
 8006978:	443a      	add	r2, r7
 800697a:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 800697c:	f24f 43aa 	movw	r3, #62634	@ 0xf4aa
 8006980:	443b      	add	r3, r7
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <main+0x104>
	{
		return 1;
 8006988:	2301      	movs	r3, #1
 800698a:	e21a      	b.n	8006dc2 <main+0x53a>
	}

	char line[61340];
	UINT br; // Bytes lidos

	float *linhas[] = {mx, my, mz};  // Vetor de ponteiros para facilitar o acesso
 800698c:	f24f 43d0 	movw	r3, #62672	@ 0xf4d0
 8006990:	443b      	add	r3, r7
 8006992:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006996:	4a60      	ldr	r2, [pc, #384]	@ (8006b18 <main+0x290>)
 8006998:	ca07      	ldmia	r2, {r0, r1, r2}
 800699a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 3; i++)
 800699e:	2300      	movs	r3, #0
 80069a0:	f24f 42c8 	movw	r2, #62664	@ 0xf4c8
 80069a4:	443a      	add	r2, r7
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	e0c5      	b.n	8006b36 <main+0x2ae>
	{
		// lê uma linha completa (até '\n' ou fim do buffer)
		int line_pos = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	f24f 42c4 	movw	r2, #62660	@ 0xf4c4
 80069b0:	443a      	add	r2, r7
 80069b2:	6013      	str	r3, [r2, #0]
		char ch;
		do {
			res = f_read(&fil, &ch, 1, &br);
 80069b4:	f24f 2360 	movw	r3, #62048	@ 0xf260
 80069b8:	443b      	add	r3, r7
 80069ba:	f24f 214f 	movw	r1, #62031	@ 0xf24f
 80069be:	4439      	add	r1, r7
 80069c0:	4854      	ldr	r0, [pc, #336]	@ (8006b14 <main+0x28c>)
 80069c2:	f24f 42d0 	movw	r2, #62672	@ 0xf4d0
 80069c6:	4402      	add	r2, r0
 80069c8:	19d0      	adds	r0, r2, r7
 80069ca:	2201      	movs	r2, #1
 80069cc:	f006 fcac 	bl	800d328 <f_read>
 80069d0:	4603      	mov	r3, r0
 80069d2:	f24f 42aa 	movw	r2, #62634	@ 0xf4aa
 80069d6:	443a      	add	r2, r7
 80069d8:	7013      	strb	r3, [r2, #0]
			if (res != FR_OK || br == 0) {
 80069da:	f24f 43aa 	movw	r3, #62634	@ 0xf4aa
 80069de:	443b      	add	r3, r7
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d107      	bne.n	80069f6 <main+0x16e>
 80069e6:	f24f 43d0 	movw	r3, #62672	@ 0xf4d0
 80069ea:	443b      	add	r3, r7
 80069ec:	f5a3 731c 	sub.w	r3, r3, #624	@ 0x270
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <main+0x172>
				return 1;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e1e3      	b.n	8006dc2 <main+0x53a>
			}
			line[line_pos++] = ch;
 80069fa:	f24f 43c4 	movw	r3, #62660	@ 0xf4c4
 80069fe:	443b      	add	r3, r7
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	f24f 41c4 	movw	r1, #62660	@ 0xf4c4
 8006a08:	4439      	add	r1, r7
 8006a0a:	600a      	str	r2, [r1, #0]
 8006a0c:	f24f 42d0 	movw	r2, #62672	@ 0xf4d0
 8006a10:	443a      	add	r2, r7
 8006a12:	f2a2 2281 	subw	r2, r2, #641	@ 0x281
 8006a16:	7811      	ldrb	r1, [r2, #0]
 8006a18:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8006a1c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8006a20:	54d1      	strb	r1, [r2, r3]
		} while (ch != '\n' && line_pos < sizeof(line)-1);
 8006a22:	f24f 43d0 	movw	r3, #62672	@ 0xf4d0
 8006a26:	443b      	add	r3, r7
 8006a28:	f2a3 2381 	subw	r3, r3, #641	@ 0x281
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b0a      	cmp	r3, #10
 8006a30:	d007      	beq.n	8006a42 <main+0x1ba>
 8006a32:	f24f 43c4 	movw	r3, #62660	@ 0xf4c4
 8006a36:	443b      	add	r3, r7
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f64e 729a 	movw	r2, #61338	@ 0xef9a
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d9b8      	bls.n	80069b4 <main+0x12c>
		line[line_pos] = '\0';
 8006a42:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8006a46:	f5a3 7208 	sub.w	r2, r3, #544	@ 0x220
 8006a4a:	f24f 43c4 	movw	r3, #62660	@ 0xf4c4
 8006a4e:	443b      	add	r3, r7
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4413      	add	r3, r2
 8006a54:	2200      	movs	r2, #0
 8006a56:	701a      	strb	r2, [r3, #0]

		char *token = strtok(line, ",");
 8006a58:	4b30      	ldr	r3, [pc, #192]	@ (8006b1c <main+0x294>)
 8006a5a:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8006a5e:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8006a62:	443b      	add	r3, r7
 8006a64:	492e      	ldr	r1, [pc, #184]	@ (8006b20 <main+0x298>)
 8006a66:	4618      	mov	r0, r3
 8006a68:	f008 fe42 	bl	800f6f0 <strtok>
 8006a6c:	f24f 43c0 	movw	r3, #62656	@ 0xf4c0
 8006a70:	443b      	add	r3, r7
 8006a72:	6018      	str	r0, [r3, #0]
		int j = 0;
 8006a74:	2300      	movs	r3, #0
 8006a76:	f24f 42bc 	movw	r2, #62652	@ 0xf4bc
 8006a7a:	443a      	add	r2, r7
 8006a7c:	6013      	str	r3, [r2, #0]

		while (token != NULL && j < 1112)
 8006a7e:	e02c      	b.n	8006ada <main+0x252>
		{
			linhas[i][j] = strtof(token, NULL);
 8006a80:	f24f 43d0 	movw	r3, #62672	@ 0xf4d0
 8006a84:	443b      	add	r3, r7
 8006a86:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8006a8a:	f24f 42c8 	movw	r2, #62664	@ 0xf4c8
 8006a8e:	443a      	add	r2, r7
 8006a90:	6812      	ldr	r2, [r2, #0]
 8006a92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a96:	f24f 43bc 	movw	r3, #62652	@ 0xf4bc
 8006a9a:	443b      	add	r3, r7
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	18d4      	adds	r4, r2, r3
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	f24f 43c0 	movw	r3, #62656	@ 0xf4c0
 8006aa8:	443b      	add	r3, r7
 8006aaa:	6818      	ldr	r0, [r3, #0]
 8006aac:	f007 fdfe 	bl	800e6ac <strtof>
 8006ab0:	eef0 7a40 	vmov.f32	s15, s0
 8006ab4:	edc4 7a00 	vstr	s15, [r4]
			token = strtok(NULL, ",");
 8006ab8:	4919      	ldr	r1, [pc, #100]	@ (8006b20 <main+0x298>)
 8006aba:	2000      	movs	r0, #0
 8006abc:	f008 fe18 	bl	800f6f0 <strtok>
 8006ac0:	f24f 43c0 	movw	r3, #62656	@ 0xf4c0
 8006ac4:	443b      	add	r3, r7
 8006ac6:	6018      	str	r0, [r3, #0]
			j++;
 8006ac8:	f24f 43bc 	movw	r3, #62652	@ 0xf4bc
 8006acc:	443b      	add	r3, r7
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	f24f 42bc 	movw	r2, #62652	@ 0xf4bc
 8006ad6:	443a      	add	r2, r7
 8006ad8:	6013      	str	r3, [r2, #0]
		while (token != NULL && j < 1112)
 8006ada:	f24f 43c0 	movw	r3, #62656	@ 0xf4c0
 8006ade:	443b      	add	r3, r7
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d006      	beq.n	8006af4 <main+0x26c>
 8006ae6:	f24f 43bc 	movw	r3, #62652	@ 0xf4bc
 8006aea:	443b      	add	r3, r7
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8006af2:	dbc5      	blt.n	8006a80 <main+0x1f8>
		}

		if (j != 1112)
 8006af4:	f24f 43bc 	movw	r3, #62652	@ 0xf4bc
 8006af8:	443b      	add	r3, r7
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8006b00:	d010      	beq.n	8006b24 <main+0x29c>
		{
			return 1;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e15d      	b.n	8006dc2 <main+0x53a>
 8006b06:	bf00      	nop
 8006b08:	080130bc 	.word	0x080130bc
 8006b0c:	080130c0 	.word	0x080130c0
 8006b10:	080130ec 	.word	0x080130ec
 8006b14:	ffff0bb0 	.word	0xffff0bb0
 8006b18:	08013124 	.word	0x08013124
 8006b1c:	ffff0de0 	.word	0xffff0de0
 8006b20:	08013100 	.word	0x08013100
	for (int i = 0; i < 3; i++)
 8006b24:	f24f 43c8 	movw	r3, #62664	@ 0xf4c8
 8006b28:	443b      	add	r3, r7
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	f24f 42c8 	movw	r2, #62664	@ 0xf4c8
 8006b32:	443a      	add	r2, r7
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	f24f 43c8 	movw	r3, #62664	@ 0xf4c8
 8006b3a:	443b      	add	r3, r7
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	f77f af33 	ble.w	80069aa <main+0x122>
		}
	}

	f_close(&fil);
 8006b44:	4ba2      	ldr	r3, [pc, #648]	@ (8006dd0 <main+0x548>)
 8006b46:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8006b4a:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8006b4e:	443b      	add	r3, r7
 8006b50:	4618      	mov	r0, r3
 8006b52:	f006 ff1b 	bl	800d98c <f_close>

	start_time = HAL_GetTick();
 8006b56:	f000 fe13 	bl	8007780 <HAL_GetTick>
 8006b5a:	f24f 43b4 	movw	r3, #62644	@ 0xf4b4
 8006b5e:	443b      	add	r3, r7
 8006b60:	6018      	str	r0, [r3, #0]
	ETS(mx, my, mz, p1);
 8006b62:	4b9c      	ldr	r3, [pc, #624]	@ (8006dd4 <main+0x54c>)
 8006b64:	4a9c      	ldr	r2, [pc, #624]	@ (8006dd8 <main+0x550>)
 8006b66:	499d      	ldr	r1, [pc, #628]	@ (8006ddc <main+0x554>)
 8006b68:	489d      	ldr	r0, [pc, #628]	@ (8006de0 <main+0x558>)
 8006b6a:	f7fd fdd7 	bl	800471c <ETS>
	ETS_time = HAL_GetTick() - start_time;
 8006b6e:	f000 fe07 	bl	8007780 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	f24f 43b4 	movw	r3, #62644	@ 0xf4b4
 8006b78:	443b      	add	r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b86:	f24f 43b0 	movw	r3, #62640	@ 0xf4b0
 8006b8a:	443b      	add	r3, r7
 8006b8c:	edc3 7a00 	vstr	s15, [r3]

	start_time = HAL_GetTick();
 8006b90:	f000 fdf6 	bl	8007780 <HAL_GetTick>
 8006b94:	f24f 43b4 	movw	r3, #62644	@ 0xf4b4
 8006b98:	443b      	add	r3, r7
 8006b9a:	6018      	str	r0, [r3, #0]
	passos_NLLS = NLLS(mx, my, mz, p0);
 8006b9c:	4b91      	ldr	r3, [pc, #580]	@ (8006de4 <main+0x55c>)
 8006b9e:	4a8e      	ldr	r2, [pc, #568]	@ (8006dd8 <main+0x550>)
 8006ba0:	498e      	ldr	r1, [pc, #568]	@ (8006ddc <main+0x554>)
 8006ba2:	488f      	ldr	r0, [pc, #572]	@ (8006de0 <main+0x558>)
 8006ba4:	f7fa fb58 	bl	8001258 <NLLS>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	461a      	mov	r2, r3
 8006bac:	4b8e      	ldr	r3, [pc, #568]	@ (8006de8 <main+0x560>)
 8006bae:	701a      	strb	r2, [r3, #0]
	NLLS_time = HAL_GetTick() - start_time;
 8006bb0:	f000 fde6 	bl	8007780 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	f24f 43b4 	movw	r3, #62644	@ 0xf4b4
 8006bba:	443b      	add	r3, r7
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	ee07 3a90 	vmov	s15, r3
 8006bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc8:	f24f 43ac 	movw	r3, #62636	@ 0xf4ac
 8006bcc:	443b      	add	r3, r7
 8006bce:	edc3 7a00 	vstr	s15, [r3]


	sprintf(file_read, "0:/RES/run%d.txt", file_cont);
 8006bd2:	f24f 43ce 	movw	r3, #62670	@ 0xf4ce
 8006bd6:	443b      	add	r3, r7
 8006bd8:	881a      	ldrh	r2, [r3, #0]
 8006bda:	f24f 4394 	movw	r3, #62612	@ 0xf494
 8006bde:	443b      	add	r3, r7
 8006be0:	4982      	ldr	r1, [pc, #520]	@ (8006dec <main+0x564>)
 8006be2:	4618      	mov	r0, r3
 8006be4:	f008 fd06 	bl	800f5f4 <siprintf>
	res = f_open(&fil, file_read, FA_WRITE | FA_CREATE_ALWAYS);
 8006be8:	f24f 4194 	movw	r1, #62612	@ 0xf494
 8006bec:	4439      	add	r1, r7
 8006bee:	4b78      	ldr	r3, [pc, #480]	@ (8006dd0 <main+0x548>)
 8006bf0:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8006bf4:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8006bf8:	443b      	add	r3, r7
 8006bfa:	220a      	movs	r2, #10
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f006 f9d9 	bl	800cfb4 <f_open>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f24f 42aa 	movw	r2, #62634	@ 0xf4aa
 8006c08:	443a      	add	r2, r7
 8006c0a:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK)
 8006c0c:	f24f 43aa 	movw	r3, #62634	@ 0xf4aa
 8006c10:	443b      	add	r3, r7
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <main+0x394>
	{
		return 1;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e0d2      	b.n	8006dc2 <main+0x53a>
	}

	char out_line[128];
	UINT bw;

	for (int i = 0; i < 9; i++) {
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	f24f 42b8 	movw	r2, #62648	@ 0xf4b8
 8006c22:	443a      	add	r2, r7
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e049      	b.n	8006cbc <main+0x434>
		sprintf(out_line, "%f, %f\n", p1[i], p0[i]);
 8006c28:	4a6a      	ldr	r2, [pc, #424]	@ (8006dd4 <main+0x54c>)
 8006c2a:	f24f 43b8 	movw	r3, #62648	@ 0xf4b8
 8006c2e:	443b      	add	r3, r7
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7f9 fca5 	bl	8000588 <__aeabi_f2d>
 8006c3e:	4604      	mov	r4, r0
 8006c40:	460d      	mov	r5, r1
 8006c42:	4a68      	ldr	r2, [pc, #416]	@ (8006de4 <main+0x55c>)
 8006c44:	f24f 43b8 	movw	r3, #62648	@ 0xf4b8
 8006c48:	443b      	add	r3, r7
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7f9 fc98 	bl	8000588 <__aeabi_f2d>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4864      	ldr	r0, [pc, #400]	@ (8006df0 <main+0x568>)
 8006c5e:	f24f 41d0 	movw	r1, #62672	@ 0xf4d0
 8006c62:	4401      	add	r1, r0
 8006c64:	19c8      	adds	r0, r1, r7
 8006c66:	e9cd 2300 	strd	r2, r3, [sp]
 8006c6a:	4622      	mov	r2, r4
 8006c6c:	462b      	mov	r3, r5
 8006c6e:	4961      	ldr	r1, [pc, #388]	@ (8006df4 <main+0x56c>)
 8006c70:	f008 fcc0 	bl	800f5f4 <siprintf>
		f_write(&fil, out_line, strlen(out_line), &bw);
 8006c74:	4b5e      	ldr	r3, [pc, #376]	@ (8006df0 <main+0x568>)
 8006c76:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8006c7a:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8006c7e:	443b      	add	r3, r7
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7f9 fb15 	bl	80002b0 <strlen>
 8006c86:	4602      	mov	r2, r0
 8006c88:	f24f 2350 	movw	r3, #62032	@ 0xf250
 8006c8c:	443b      	add	r3, r7
 8006c8e:	4958      	ldr	r1, [pc, #352]	@ (8006df0 <main+0x568>)
 8006c90:	f501 4174 	add.w	r1, r1, #62464	@ 0xf400
 8006c94:	f101 01d0 	add.w	r1, r1, #208	@ 0xd0
 8006c98:	4439      	add	r1, r7
 8006c9a:	484d      	ldr	r0, [pc, #308]	@ (8006dd0 <main+0x548>)
 8006c9c:	f500 4074 	add.w	r0, r0, #62464	@ 0xf400
 8006ca0:	f100 00d0 	add.w	r0, r0, #208	@ 0xd0
 8006ca4:	4438      	add	r0, r7
 8006ca6:	f006 fc7e 	bl	800d5a6 <f_write>
	for (int i = 0; i < 9; i++) {
 8006caa:	f24f 43b8 	movw	r3, #62648	@ 0xf4b8
 8006cae:	443b      	add	r3, r7
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	f24f 42b8 	movw	r2, #62648	@ 0xf4b8
 8006cb8:	443a      	add	r2, r7
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	f24f 43b8 	movw	r3, #62648	@ 0xf4b8
 8006cc0:	443b      	add	r3, r7
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	ddaf      	ble.n	8006c28 <main+0x3a0>
	}

	sprintf(out_line, "%f, %f\n", ETS_time, NLLS_time);
 8006cc8:	f24f 43b0 	movw	r3, #62640	@ 0xf4b0
 8006ccc:	443b      	add	r3, r7
 8006cce:	6818      	ldr	r0, [r3, #0]
 8006cd0:	f7f9 fc5a 	bl	8000588 <__aeabi_f2d>
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	460d      	mov	r5, r1
 8006cd8:	f24f 43ac 	movw	r3, #62636	@ 0xf4ac
 8006cdc:	443b      	add	r3, r7
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	f7f9 fc52 	bl	8000588 <__aeabi_f2d>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4841      	ldr	r0, [pc, #260]	@ (8006df0 <main+0x568>)
 8006cea:	f24f 41d0 	movw	r1, #62672	@ 0xf4d0
 8006cee:	4401      	add	r1, r0
 8006cf0:	19c8      	adds	r0, r1, r7
 8006cf2:	e9cd 2300 	strd	r2, r3, [sp]
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	462b      	mov	r3, r5
 8006cfa:	493e      	ldr	r1, [pc, #248]	@ (8006df4 <main+0x56c>)
 8006cfc:	f008 fc7a 	bl	800f5f4 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 8006d00:	4b3b      	ldr	r3, [pc, #236]	@ (8006df0 <main+0x568>)
 8006d02:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8006d06:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8006d0a:	443b      	add	r3, r7
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7f9 facf 	bl	80002b0 <strlen>
 8006d12:	4602      	mov	r2, r0
 8006d14:	f24f 2350 	movw	r3, #62032	@ 0xf250
 8006d18:	443b      	add	r3, r7
 8006d1a:	4935      	ldr	r1, [pc, #212]	@ (8006df0 <main+0x568>)
 8006d1c:	f501 4174 	add.w	r1, r1, #62464	@ 0xf400
 8006d20:	f101 01d0 	add.w	r1, r1, #208	@ 0xd0
 8006d24:	4439      	add	r1, r7
 8006d26:	482a      	ldr	r0, [pc, #168]	@ (8006dd0 <main+0x548>)
 8006d28:	f500 4074 	add.w	r0, r0, #62464	@ 0xf400
 8006d2c:	f100 00d0 	add.w	r0, r0, #208	@ 0xd0
 8006d30:	4438      	add	r0, r7
 8006d32:	f006 fc38 	bl	800d5a6 <f_write>

	sprintf(out_line, "%u\n", passos_NLLS);
 8006d36:	4b2c      	ldr	r3, [pc, #176]	@ (8006de8 <main+0x560>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	4b2c      	ldr	r3, [pc, #176]	@ (8006df0 <main+0x568>)
 8006d3e:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8006d42:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8006d46:	443b      	add	r3, r7
 8006d48:	492b      	ldr	r1, [pc, #172]	@ (8006df8 <main+0x570>)
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f008 fc52 	bl	800f5f4 <siprintf>
	f_write(&fil, out_line, strlen(out_line), &bw);
 8006d50:	4b27      	ldr	r3, [pc, #156]	@ (8006df0 <main+0x568>)
 8006d52:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8006d56:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8006d5a:	443b      	add	r3, r7
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7f9 faa7 	bl	80002b0 <strlen>
 8006d62:	4602      	mov	r2, r0
 8006d64:	f24f 2350 	movw	r3, #62032	@ 0xf250
 8006d68:	443b      	add	r3, r7
 8006d6a:	4921      	ldr	r1, [pc, #132]	@ (8006df0 <main+0x568>)
 8006d6c:	f501 4174 	add.w	r1, r1, #62464	@ 0xf400
 8006d70:	f101 01d0 	add.w	r1, r1, #208	@ 0xd0
 8006d74:	4439      	add	r1, r7
 8006d76:	4816      	ldr	r0, [pc, #88]	@ (8006dd0 <main+0x548>)
 8006d78:	f500 4074 	add.w	r0, r0, #62464	@ 0xf400
 8006d7c:	f100 00d0 	add.w	r0, r0, #208	@ 0xd0
 8006d80:	4438      	add	r0, r7
 8006d82:	f006 fc10 	bl	800d5a6 <f_write>

	f_close(&fil);
 8006d86:	4b12      	ldr	r3, [pc, #72]	@ (8006dd0 <main+0x548>)
 8006d88:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
 8006d8c:	f103 03d0 	add.w	r3, r3, #208	@ 0xd0
 8006d90:	443b      	add	r3, r7
 8006d92:	4618      	mov	r0, r3
 8006d94:	f006 fdfa 	bl	800d98c <f_close>

	file_cont++;
 8006d98:	f24f 43ce 	movw	r3, #62670	@ 0xf4ce
 8006d9c:	443b      	add	r3, r7
 8006d9e:	881b      	ldrh	r3, [r3, #0]
 8006da0:	3301      	adds	r3, #1
 8006da2:	f24f 42ce 	movw	r2, #62670	@ 0xf4ce
 8006da6:	443a      	add	r2, r7
 8006da8:	8013      	strh	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8006daa:	2180      	movs	r1, #128	@ 0x80
 8006dac:	4813      	ldr	r0, [pc, #76]	@ (8006dfc <main+0x574>)
 8006dae:	f001 f880 	bl	8007eb2 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8006db2:	2064      	movs	r0, #100	@ 0x64
 8006db4:	f000 fcf0 	bl	8007798 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8006db8:	2180      	movs	r1, #128	@ 0x80
 8006dba:	4810      	ldr	r0, [pc, #64]	@ (8006dfc <main+0x574>)
 8006dbc:	f001 f879 	bl	8007eb2 <HAL_GPIO_TogglePin>
  {
 8006dc0:	e5b5      	b.n	800692e <main+0xa6>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f507 4774 	add.w	r7, r7, #62464	@ 0xf400
 8006dc8:	37d0      	adds	r7, #208	@ 0xd0
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	ffff0bb0 	.word	0xffff0bb0
 8006dd4:	20003624 	.word	0x20003624
 8006dd8:	200024c4 	.word	0x200024c4
 8006ddc:	20001364 	.word	0x20001364
 8006de0:	20000204 	.word	0x20000204
 8006de4:	20003648 	.word	0x20003648
 8006de8:	2000366c 	.word	0x2000366c
 8006dec:	08013104 	.word	0x08013104
 8006df0:	ffff0b30 	.word	0xffff0b30
 8006df4:	08013118 	.word	0x08013118
 8006df8:	08013120 	.word	0x08013120
 8006dfc:	40020400 	.word	0x40020400

08006e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b094      	sub	sp, #80	@ 0x50
 8006e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006e06:	f107 0320 	add.w	r3, r7, #32
 8006e0a:	2230      	movs	r2, #48	@ 0x30
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f008 fc53 	bl	800f6ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e14:	f107 030c 	add.w	r3, r7, #12
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	605a      	str	r2, [r3, #4]
 8006e1e:	609a      	str	r2, [r3, #8]
 8006e20:	60da      	str	r2, [r3, #12]
 8006e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e24:	4b27      	ldr	r3, [pc, #156]	@ (8006ec4 <SystemClock_Config+0xc4>)
 8006e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e28:	4a26      	ldr	r2, [pc, #152]	@ (8006ec4 <SystemClock_Config+0xc4>)
 8006e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e30:	4b24      	ldr	r3, [pc, #144]	@ (8006ec4 <SystemClock_Config+0xc4>)
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006e3c:	4b22      	ldr	r3, [pc, #136]	@ (8006ec8 <SystemClock_Config+0xc8>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006e44:	4a20      	ldr	r2, [pc, #128]	@ (8006ec8 <SystemClock_Config+0xc8>)
 8006e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ec8 <SystemClock_Config+0xc8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006e54:	607b      	str	r3, [r7, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006e5c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8006e60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006e62:	2302      	movs	r3, #2
 8006e64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006e66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006e6c:	2304      	movs	r3, #4
 8006e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8006e70:	2348      	movs	r3, #72	@ 0x48
 8006e72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006e74:	2302      	movs	r3, #2
 8006e76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e7c:	f107 0320 	add.w	r3, r7, #32
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 f831 	bl	8007ee8 <HAL_RCC_OscConfig>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8006e8c:	f000 f81e 	bl	8006ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006e90:	230f      	movs	r3, #15
 8006e92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006e94:	2302      	movs	r3, #2
 8006e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006e9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006ea6:	f107 030c 	add.w	r3, r7, #12
 8006eaa:	2102      	movs	r1, #2
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 fabf 	bl	8008430 <HAL_RCC_ClockConfig>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006eb8:	f000 f808 	bl	8006ecc <Error_Handler>
  }
}
 8006ebc:	bf00      	nop
 8006ebe:	3750      	adds	r7, #80	@ 0x50
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	40007000 	.word	0x40007000

08006ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006ed0:	b672      	cpsid	i
}
 8006ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006ed4:	bf00      	nop
 8006ed6:	e7fd      	b.n	8006ed4 <Error_Handler+0x8>

08006ed8 <SD_SendDummyClock>:
#define SD_CS_LOW()   HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET)
#define SD_CS_HIGH()  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET)

extern SPI_HandleTypeDef hspi3; // Use a instância correta do SPI

static void SD_SendDummyClock(void) {
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
    uint8_t dummy = 0xFF;
 8006ede:	23ff      	movs	r3, #255	@ 0xff
 8006ee0:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 10; i++)
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	607b      	str	r3, [r7, #4]
 8006ee6:	e009      	b.n	8006efc <SD_SendDummyClock+0x24>
        HAL_SPI_Transmit(&hspi3, &dummy, 1, HAL_MAX_DELAY);
 8006ee8:	1cf9      	adds	r1, r7, #3
 8006eea:	f04f 33ff 	mov.w	r3, #4294967295
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4806      	ldr	r0, [pc, #24]	@ (8006f0c <SD_SendDummyClock+0x34>)
 8006ef2:	f002 f95e 	bl	80091b2 <HAL_SPI_Transmit>
    for (int i = 0; i < 10; i++)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	607b      	str	r3, [r7, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b09      	cmp	r3, #9
 8006f00:	ddf2      	ble.n	8006ee8 <SD_SendDummyClock+0x10>
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	20003670 	.word	0x20003670

08006f10 <SD_TransmitByte>:

static uint8_t SD_TransmitByte(uint8_t data) {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	4603      	mov	r3, r0
 8006f18:	71fb      	strb	r3, [r7, #7]
    uint8_t received;
    HAL_SPI_TransmitReceive(&hspi3, &data, &received, 1, HAL_MAX_DELAY);
 8006f1a:	f107 020f 	add.w	r2, r7, #15
 8006f1e:	1df9      	adds	r1, r7, #7
 8006f20:	f04f 33ff 	mov.w	r3, #4294967295
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	2301      	movs	r3, #1
 8006f28:	4803      	ldr	r0, [pc, #12]	@ (8006f38 <SD_TransmitByte+0x28>)
 8006f2a:	f002 fab0 	bl	800948e <HAL_SPI_TransmitReceive>
    return received;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20003670 	.word	0x20003670

08006f3c <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
    return SD_TransmitByte(0xFF);
 8006f40:	20ff      	movs	r0, #255	@ 0xff
 8006f42:	f7ff ffe5 	bl	8006f10 <SD_TransmitByte>
 8006f46:	4603      	mov	r3, r0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <SD_WaitReady>:

static uint8_t SD_WaitReady(void) {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
    uint8_t res;
    uint32_t timeout = HAL_GetTick();
 8006f52:	f000 fc15 	bl	8007780 <HAL_GetTick>
 8006f56:	6078      	str	r0, [r7, #4]
    do {
        res = SD_ReceiveByte();
 8006f58:	f7ff fff0 	bl	8006f3c <SD_ReceiveByte>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	70fb      	strb	r3, [r7, #3]
        if (res == 0xFF) return 1;
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	2bff      	cmp	r3, #255	@ 0xff
 8006f64:	d101      	bne.n	8006f6a <SD_WaitReady+0x1e>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e008      	b.n	8006f7c <SD_WaitReady+0x30>
    } while ((HAL_GetTick() - timeout) < 500);
 8006f6a:	f000 fc09 	bl	8007780 <HAL_GetTick>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	1ad3      	subs	r3, r2, r3
 8006f74:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006f78:	d3ee      	bcc.n	8006f58 <SD_WaitReady+0xc>
    return 0;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <SD_Select>:

static void SD_Select(void) {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
    SD_CS_LOW();
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2110      	movs	r1, #16
 8006f8c:	4803      	ldr	r0, [pc, #12]	@ (8006f9c <SD_Select+0x18>)
 8006f8e:	f000 ff77 	bl	8007e80 <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 8006f92:	f7ff ffd3 	bl	8006f3c <SD_ReceiveByte>
}
 8006f96:	bf00      	nop
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40020000 	.word	0x40020000

08006fa0 <SD_Deselect>:

static void SD_Deselect(void) {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	2110      	movs	r1, #16
 8006fa8:	4803      	ldr	r0, [pc, #12]	@ (8006fb8 <SD_Deselect+0x18>)
 8006faa:	f000 ff69 	bl	8007e80 <HAL_GPIO_WritePin>
    SD_ReceiveByte();
 8006fae:	f7ff ffc5 	bl	8006f3c <SD_ReceiveByte>
}
 8006fb2:	bf00      	nop
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40020000 	.word	0x40020000

08006fbc <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	6039      	str	r1, [r7, #0]
 8006fc6:	71fb      	strb	r3, [r7, #7]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[6];
    buf[0] = 0x40 | cmd;
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	723b      	strb	r3, [r7, #8]
    buf[1] = (arg >> 24) & 0xFF;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	0e1b      	lsrs	r3, r3, #24
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	727b      	strb	r3, [r7, #9]
    buf[2] = (arg >> 16) & 0xFF;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	0c1b      	lsrs	r3, r3, #16
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	72bb      	strb	r3, [r7, #10]
    buf[3] = (arg >> 8) & 0xFF;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	0a1b      	lsrs	r3, r3, #8
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	72fb      	strb	r3, [r7, #11]
    buf[4] = arg & 0xFF;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	733b      	strb	r3, [r7, #12]
    buf[5] = crc;
 8006ff4:	79bb      	ldrb	r3, [r7, #6]
 8006ff6:	737b      	strb	r3, [r7, #13]

    SD_Deselect();
 8006ff8:	f7ff ffd2 	bl	8006fa0 <SD_Deselect>
    SD_Select();
 8006ffc:	f7ff ffc2 	bl	8006f84 <SD_Select>

    if (!SD_WaitReady()) {
 8007000:	f7ff ffa4 	bl	8006f4c <SD_WaitReady>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <SD_SendCommand+0x56>
        SD_Deselect();
 800700a:	f7ff ffc9 	bl	8006fa0 <SD_Deselect>
        return 0xFF;
 800700e:	23ff      	movs	r3, #255	@ 0xff
 8007010:	e024      	b.n	800705c <SD_SendCommand+0xa0>
    }

    for (int i = 0; i < 6; i++)
 8007012:	2300      	movs	r3, #0
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e00a      	b.n	800702e <SD_SendCommand+0x72>
        SD_TransmitByte(buf[i]);
 8007018:	f107 0208 	add.w	r2, r7, #8
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	4413      	add	r3, r2
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	4618      	mov	r0, r3
 8007024:	f7ff ff74 	bl	8006f10 <SD_TransmitByte>
    for (int i = 0; i < 6; i++)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	3301      	adds	r3, #1
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b05      	cmp	r3, #5
 8007032:	ddf1      	ble.n	8007018 <SD_SendCommand+0x5c>

    // Aguarda resposta (bit 7 == 0)
    for (int i = 0; i < 10; i++) {
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	e00c      	b.n	8007054 <SD_SendCommand+0x98>
        uint8_t res = SD_ReceiveByte();
 800703a:	f7ff ff7f 	bl	8006f3c <SD_ReceiveByte>
 800703e:	4603      	mov	r3, r0
 8007040:	73fb      	strb	r3, [r7, #15]
        if ((res & 0x80) == 0)
 8007042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007046:	2b00      	cmp	r3, #0
 8007048:	db01      	blt.n	800704e <SD_SendCommand+0x92>
            return res;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	e006      	b.n	800705c <SD_SendCommand+0xa0>
    for (int i = 0; i < 10; i++) {
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	3301      	adds	r3, #1
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b09      	cmp	r3, #9
 8007058:	ddef      	ble.n	800703a <SD_SendCommand+0x7e>
    }

    return 0xFF;
 800705a:	23ff      	movs	r3, #255	@ 0xff
}
 800705c:	4618      	mov	r0, r3
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <SD_Init>:

uint8_t SD_Init(void) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
    SD_CS_HIGH();
 800706a:	2201      	movs	r2, #1
 800706c:	2110      	movs	r1, #16
 800706e:	4820      	ldr	r0, [pc, #128]	@ (80070f0 <SD_Init+0x8c>)
 8007070:	f000 ff06 	bl	8007e80 <HAL_GPIO_WritePin>
    SD_SendDummyClock(); // 80 clocks
 8007074:	f7ff ff30 	bl	8006ed8 <SD_SendDummyClock>

    uint8_t res = SD_SendCommand(CMD0, 0, 0x95);
 8007078:	2295      	movs	r2, #149	@ 0x95
 800707a:	2100      	movs	r1, #0
 800707c:	2000      	movs	r0, #0
 800707e:	f7ff ff9d 	bl	8006fbc <SD_SendCommand>
 8007082:	4603      	mov	r3, r0
 8007084:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d001      	beq.n	8007090 <SD_Init+0x2c>
 800708c:	2301      	movs	r3, #1
 800708e:	e02b      	b.n	80070e8 <SD_Init+0x84>

    res = SD_SendCommand(CMD8, 0x1AA, 0x87);
 8007090:	2287      	movs	r2, #135	@ 0x87
 8007092:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007096:	2008      	movs	r0, #8
 8007098:	f7ff ff90 	bl	8006fbc <SD_SendCommand>
 800709c:	4603      	mov	r3, r0
 800709e:	71fb      	strb	r3, [r7, #7]
    if (res != 0x01) return SD_ERROR;
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d001      	beq.n	80070aa <SD_Init+0x46>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e01e      	b.n	80070e8 <SD_Init+0x84>

    // Espera inicialização
    do {
        SD_SendCommand(CMD55, 0, 0x01);
 80070aa:	2201      	movs	r2, #1
 80070ac:	2100      	movs	r1, #0
 80070ae:	2037      	movs	r0, #55	@ 0x37
 80070b0:	f7ff ff84 	bl	8006fbc <SD_SendCommand>
        res = SD_SendCommand(ACMD41, 0x40000000, 0x01);
 80070b4:	2201      	movs	r2, #1
 80070b6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80070ba:	2029      	movs	r0, #41	@ 0x29
 80070bc:	f7ff ff7e 	bl	8006fbc <SD_SendCommand>
 80070c0:	4603      	mov	r3, r0
 80070c2:	71fb      	strb	r3, [r7, #7]
    } while (res != 0x00);
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1ef      	bne.n	80070aa <SD_Init+0x46>

    res = SD_SendCommand(CMD58, 0, 0x01);
 80070ca:	2201      	movs	r2, #1
 80070cc:	2100      	movs	r1, #0
 80070ce:	203a      	movs	r0, #58	@ 0x3a
 80070d0:	f7ff ff74 	bl	8006fbc <SD_SendCommand>
 80070d4:	4603      	mov	r3, r0
 80070d6:	71fb      	strb	r3, [r7, #7]
    SD_Deselect();
 80070d8:	f7ff ff62 	bl	8006fa0 <SD_Deselect>
    return (res == 0x00) ? SD_OK : SD_ERROR;
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bf14      	ite	ne
 80070e2:	2301      	movne	r3, #1
 80070e4:	2300      	moveq	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	40020000 	.word	0x40020000

080070f4 <SD_ReadBlock>:

uint8_t SD_ReadBlock(uint32_t blockAddr, uint8_t* buff) {
 80070f4:	b590      	push	{r4, r7, lr}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
    uint8_t token;

    if (SD_SendCommand(CMD17, blockAddr, 0x01) != 0x00)
 80070fe:	2201      	movs	r2, #1
 8007100:	6879      	ldr	r1, [r7, #4]
 8007102:	2011      	movs	r0, #17
 8007104:	f7ff ff5a 	bl	8006fbc <SD_SendCommand>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <SD_ReadBlock+0x1e>
        return SD_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e030      	b.n	8007174 <SD_ReadBlock+0x80>

    // Espera token 0xFE (início do bloco)
    for (int i = 0; i < 10000; i++) {
 8007112:	2300      	movs	r3, #0
 8007114:	613b      	str	r3, [r7, #16]
 8007116:	e009      	b.n	800712c <SD_ReadBlock+0x38>
        token = SD_ReceiveByte();
 8007118:	f7ff ff10 	bl	8006f3c <SD_ReceiveByte>
 800711c:	4603      	mov	r3, r0
 800711e:	75fb      	strb	r3, [r7, #23]
        if (token == 0xFE) break;
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	2bfe      	cmp	r3, #254	@ 0xfe
 8007124:	d008      	beq.n	8007138 <SD_ReadBlock+0x44>
    for (int i = 0; i < 10000; i++) {
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	3301      	adds	r3, #1
 800712a:	613b      	str	r3, [r7, #16]
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007132:	4293      	cmp	r3, r2
 8007134:	ddf0      	ble.n	8007118 <SD_ReadBlock+0x24>
 8007136:	e000      	b.n	800713a <SD_ReadBlock+0x46>
        if (token == 0xFE) break;
 8007138:	bf00      	nop
    }
    if (token != 0xFE) return SD_ERROR;
 800713a:	7dfb      	ldrb	r3, [r7, #23]
 800713c:	2bfe      	cmp	r3, #254	@ 0xfe
 800713e:	d001      	beq.n	8007144 <SD_ReadBlock+0x50>
 8007140:	2301      	movs	r3, #1
 8007142:	e017      	b.n	8007174 <SD_ReadBlock+0x80>

    for (int i = 0; i < 512; i++)
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]
 8007148:	e009      	b.n	800715e <SD_ReadBlock+0x6a>
        buff[i] = SD_ReceiveByte();
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	18d4      	adds	r4, r2, r3
 8007150:	f7ff fef4 	bl	8006f3c <SD_ReceiveByte>
 8007154:	4603      	mov	r3, r0
 8007156:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < 512; i++)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3301      	adds	r3, #1
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007164:	dbf1      	blt.n	800714a <SD_ReadBlock+0x56>

    SD_ReceiveByte(); // Discard CRC
 8007166:	f7ff fee9 	bl	8006f3c <SD_ReceiveByte>
    SD_ReceiveByte();
 800716a:	f7ff fee7 	bl	8006f3c <SD_ReceiveByte>

    SD_Deselect();
 800716e:	f7ff ff17 	bl	8006fa0 <SD_Deselect>
    return SD_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	bd90      	pop	{r4, r7, pc}

0800717c <SD_WriteBlock>:

uint8_t SD_WriteBlock(uint32_t blockAddr, const uint8_t* buff) {
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
    if (SD_SendCommand(CMD24, blockAddr, 0x01) != 0x00)
 8007186:	2201      	movs	r2, #1
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	2018      	movs	r0, #24
 800718c:	f7ff ff16 	bl	8006fbc <SD_SendCommand>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <SD_WriteBlock+0x1e>
        return SD_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e02f      	b.n	80071fa <SD_WriteBlock+0x7e>

    SD_TransmitByte(0xFE); // Start token
 800719a:	20fe      	movs	r0, #254	@ 0xfe
 800719c:	f7ff feb8 	bl	8006f10 <SD_TransmitByte>

    for (int i = 0; i < 512; i++)
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	e009      	b.n	80071ba <SD_WriteBlock+0x3e>
        SD_TransmitByte(buff[i]);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	4413      	add	r3, r2
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff feae 	bl	8006f10 <SD_TransmitByte>
    for (int i = 0; i < 512; i++)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c0:	dbf1      	blt.n	80071a6 <SD_WriteBlock+0x2a>

    SD_TransmitByte(0xFF); // Dummy CRC
 80071c2:	20ff      	movs	r0, #255	@ 0xff
 80071c4:	f7ff fea4 	bl	8006f10 <SD_TransmitByte>
    SD_TransmitByte(0xFF);
 80071c8:	20ff      	movs	r0, #255	@ 0xff
 80071ca:	f7ff fea1 	bl	8006f10 <SD_TransmitByte>

    uint8_t resp = SD_ReceiveByte();
 80071ce:	f7ff feb5 	bl	8006f3c <SD_ReceiveByte>
 80071d2:	4603      	mov	r3, r0
 80071d4:	72fb      	strb	r3, [r7, #11]
    if ((resp & 0x1F) != 0x05) {
 80071d6:	7afb      	ldrb	r3, [r7, #11]
 80071d8:	f003 031f 	and.w	r3, r3, #31
 80071dc:	2b05      	cmp	r3, #5
 80071de:	d003      	beq.n	80071e8 <SD_WriteBlock+0x6c>
        SD_Deselect();
 80071e0:	f7ff fede 	bl	8006fa0 <SD_Deselect>
        return SD_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e008      	b.n	80071fa <SD_WriteBlock+0x7e>
    }

    while (!SD_ReceiveByte()); // Espera escrever
 80071e8:	bf00      	nop
 80071ea:	f7ff fea7 	bl	8006f3c <SD_ReceiveByte>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0fa      	beq.n	80071ea <SD_WriteBlock+0x6e>

    SD_Deselect();
 80071f4:	f7ff fed4 	bl	8006fa0 <SD_Deselect>
    return SD_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8007208:	4b1b      	ldr	r3, [pc, #108]	@ (8007278 <MX_SPI3_Init+0x74>)
 800720a:	4a1c      	ldr	r2, [pc, #112]	@ (800727c <MX_SPI3_Init+0x78>)
 800720c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800720e:	4b1a      	ldr	r3, [pc, #104]	@ (8007278 <MX_SPI3_Init+0x74>)
 8007210:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007214:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007216:	4b18      	ldr	r3, [pc, #96]	@ (8007278 <MX_SPI3_Init+0x74>)
 8007218:	2200      	movs	r2, #0
 800721a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800721c:	4b16      	ldr	r3, [pc, #88]	@ (8007278 <MX_SPI3_Init+0x74>)
 800721e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007222:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007224:	4b14      	ldr	r3, [pc, #80]	@ (8007278 <MX_SPI3_Init+0x74>)
 8007226:	2200      	movs	r2, #0
 8007228:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800722a:	4b13      	ldr	r3, [pc, #76]	@ (8007278 <MX_SPI3_Init+0x74>)
 800722c:	2200      	movs	r2, #0
 800722e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007230:	4b11      	ldr	r3, [pc, #68]	@ (8007278 <MX_SPI3_Init+0x74>)
 8007232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007236:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007238:	4b0f      	ldr	r3, [pc, #60]	@ (8007278 <MX_SPI3_Init+0x74>)
 800723a:	2228      	movs	r2, #40	@ 0x28
 800723c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800723e:	4b0e      	ldr	r3, [pc, #56]	@ (8007278 <MX_SPI3_Init+0x74>)
 8007240:	2200      	movs	r2, #0
 8007242:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007244:	4b0c      	ldr	r3, [pc, #48]	@ (8007278 <MX_SPI3_Init+0x74>)
 8007246:	2200      	movs	r2, #0
 8007248:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800724a:	4b0b      	ldr	r3, [pc, #44]	@ (8007278 <MX_SPI3_Init+0x74>)
 800724c:	2200      	movs	r2, #0
 800724e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007250:	4b09      	ldr	r3, [pc, #36]	@ (8007278 <MX_SPI3_Init+0x74>)
 8007252:	2207      	movs	r2, #7
 8007254:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007256:	4b08      	ldr	r3, [pc, #32]	@ (8007278 <MX_SPI3_Init+0x74>)
 8007258:	2200      	movs	r2, #0
 800725a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800725c:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <MX_SPI3_Init+0x74>)
 800725e:	2208      	movs	r2, #8
 8007260:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007262:	4805      	ldr	r0, [pc, #20]	@ (8007278 <MX_SPI3_Init+0x74>)
 8007264:	f001 fefa 	bl	800905c <HAL_SPI_Init>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800726e:	f7ff fe2d 	bl	8006ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8007272:	bf00      	nop
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20003670 	.word	0x20003670
 800727c:	40003c00 	.word	0x40003c00

08007280 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	@ 0x28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007288:	f107 0314 	add.w	r3, r7, #20
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	605a      	str	r2, [r3, #4]
 8007292:	609a      	str	r2, [r3, #8]
 8007294:	60da      	str	r2, [r3, #12]
 8007296:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a17      	ldr	r2, [pc, #92]	@ (80072fc <HAL_SPI_MspInit+0x7c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d127      	bne.n	80072f2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80072a2:	4b17      	ldr	r3, [pc, #92]	@ (8007300 <HAL_SPI_MspInit+0x80>)
 80072a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a6:	4a16      	ldr	r2, [pc, #88]	@ (8007300 <HAL_SPI_MspInit+0x80>)
 80072a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80072ae:	4b14      	ldr	r3, [pc, #80]	@ (8007300 <HAL_SPI_MspInit+0x80>)
 80072b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072b6:	613b      	str	r3, [r7, #16]
 80072b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072ba:	4b11      	ldr	r3, [pc, #68]	@ (8007300 <HAL_SPI_MspInit+0x80>)
 80072bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072be:	4a10      	ldr	r2, [pc, #64]	@ (8007300 <HAL_SPI_MspInit+0x80>)
 80072c0:	f043 0302 	orr.w	r3, r3, #2
 80072c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80072c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007300 <HAL_SPI_MspInit+0x80>)
 80072c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80072d2:	2338      	movs	r3, #56	@ 0x38
 80072d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072d6:	2302      	movs	r3, #2
 80072d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072de:	2303      	movs	r3, #3
 80072e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80072e2:	2306      	movs	r3, #6
 80072e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072e6:	f107 0314 	add.w	r3, r7, #20
 80072ea:	4619      	mov	r1, r3
 80072ec:	4805      	ldr	r0, [pc, #20]	@ (8007304 <HAL_SPI_MspInit+0x84>)
 80072ee:	f000 fc1b 	bl	8007b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80072f2:	bf00      	nop
 80072f4:	3728      	adds	r7, #40	@ 0x28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40003c00 	.word	0x40003c00
 8007300:	40023800 	.word	0x40023800
 8007304:	40020400 	.word	0x40020400

08007308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800730e:	4b0f      	ldr	r3, [pc, #60]	@ (800734c <HAL_MspInit+0x44>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	4a0e      	ldr	r2, [pc, #56]	@ (800734c <HAL_MspInit+0x44>)
 8007314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007318:	6413      	str	r3, [r2, #64]	@ 0x40
 800731a:	4b0c      	ldr	r3, [pc, #48]	@ (800734c <HAL_MspInit+0x44>)
 800731c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007322:	607b      	str	r3, [r7, #4]
 8007324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007326:	4b09      	ldr	r3, [pc, #36]	@ (800734c <HAL_MspInit+0x44>)
 8007328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800732a:	4a08      	ldr	r2, [pc, #32]	@ (800734c <HAL_MspInit+0x44>)
 800732c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007330:	6453      	str	r3, [r2, #68]	@ 0x44
 8007332:	4b06      	ldr	r3, [pc, #24]	@ (800734c <HAL_MspInit+0x44>)
 8007334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800733a:	603b      	str	r3, [r7, #0]
 800733c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	40023800 	.word	0x40023800

08007350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007354:	bf00      	nop
 8007356:	e7fd      	b.n	8007354 <NMI_Handler+0x4>

08007358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800735c:	2180      	movs	r1, #128	@ 0x80
 800735e:	4804      	ldr	r0, [pc, #16]	@ (8007370 <HardFault_Handler+0x18>)
 8007360:	f000 fda7 	bl	8007eb2 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8007364:	2064      	movs	r0, #100	@ 0x64
 8007366:	f000 fa17 	bl	8007798 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800736a:	bf00      	nop
 800736c:	e7f6      	b.n	800735c <HardFault_Handler+0x4>
 800736e:	bf00      	nop
 8007370:	40020400 	.word	0x40020400

08007374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <MemManage_Handler+0x4>

0800737c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007380:	bf00      	nop
 8007382:	e7fd      	b.n	8007380 <BusFault_Handler+0x4>

08007384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007388:	bf00      	nop
 800738a:	e7fd      	b.n	8007388 <UsageFault_Handler+0x4>

0800738c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007390:	bf00      	nop
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800739a:	b480      	push	{r7}
 800739c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800739e:	bf00      	nop
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80073ac:	bf00      	nop
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073ba:	f000 f9cd 	bl	8007758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073be:	bf00      	nop
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80073c8:	4802      	ldr	r0, [pc, #8]	@ (80073d4 <TIM2_IRQHandler+0x10>)
 80073ca:	f002 fc52 	bl	8009c72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80073ce:	bf00      	nop
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	200036d8 	.word	0x200036d8

080073d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80073dc:	4802      	ldr	r0, [pc, #8]	@ (80073e8 <USART2_IRQHandler+0x10>)
 80073de:	f003 f897 	bl	800a510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80073e2:	bf00      	nop
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20003724 	.word	0x20003724

080073ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80073f4:	4a14      	ldr	r2, [pc, #80]	@ (8007448 <_sbrk+0x5c>)
 80073f6:	4b15      	ldr	r3, [pc, #84]	@ (800744c <_sbrk+0x60>)
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007400:	4b13      	ldr	r3, [pc, #76]	@ (8007450 <_sbrk+0x64>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007408:	4b11      	ldr	r3, [pc, #68]	@ (8007450 <_sbrk+0x64>)
 800740a:	4a12      	ldr	r2, [pc, #72]	@ (8007454 <_sbrk+0x68>)
 800740c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800740e:	4b10      	ldr	r3, [pc, #64]	@ (8007450 <_sbrk+0x64>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4413      	add	r3, r2
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	429a      	cmp	r2, r3
 800741a:	d207      	bcs.n	800742c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800741c:	f008 fa0e 	bl	800f83c <__errno>
 8007420:	4603      	mov	r3, r0
 8007422:	220c      	movs	r2, #12
 8007424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007426:	f04f 33ff 	mov.w	r3, #4294967295
 800742a:	e009      	b.n	8007440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800742c:	4b08      	ldr	r3, [pc, #32]	@ (8007450 <_sbrk+0x64>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007432:	4b07      	ldr	r3, [pc, #28]	@ (8007450 <_sbrk+0x64>)
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4413      	add	r3, r2
 800743a:	4a05      	ldr	r2, [pc, #20]	@ (8007450 <_sbrk+0x64>)
 800743c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800743e:	68fb      	ldr	r3, [r7, #12]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	20050000 	.word	0x20050000
 800744c:	00000400 	.word	0x00000400
 8007450:	200036d4 	.word	0x200036d4
 8007454:	20003938 	.word	0x20003938

08007458 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800745c:	4b06      	ldr	r3, [pc, #24]	@ (8007478 <SystemInit+0x20>)
 800745e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007462:	4a05      	ldr	r2, [pc, #20]	@ (8007478 <SystemInit+0x20>)
 8007464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800746c:	bf00      	nop
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	e000ed00 	.word	0xe000ed00

0800747c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007482:	f107 0310 	add.w	r3, r7, #16
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	605a      	str	r2, [r3, #4]
 800748c:	609a      	str	r2, [r3, #8]
 800748e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007490:	1d3b      	adds	r3, r7, #4
 8007492:	2200      	movs	r2, #0
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	605a      	str	r2, [r3, #4]
 8007498:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800749a:	4b1d      	ldr	r3, [pc, #116]	@ (8007510 <MX_TIM2_Init+0x94>)
 800749c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80074a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108 - 1;
 80074a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007510 <MX_TIM2_Init+0x94>)
 80074a4:	226b      	movs	r2, #107	@ 0x6b
 80074a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074a8:	4b19      	ldr	r3, [pc, #100]	@ (8007510 <MX_TIM2_Init+0x94>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80074ae:	4b18      	ldr	r3, [pc, #96]	@ (8007510 <MX_TIM2_Init+0x94>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80074b4:	4b16      	ldr	r3, [pc, #88]	@ (8007510 <MX_TIM2_Init+0x94>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074ba:	4b15      	ldr	r3, [pc, #84]	@ (8007510 <MX_TIM2_Init+0x94>)
 80074bc:	2200      	movs	r2, #0
 80074be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80074c0:	4813      	ldr	r0, [pc, #76]	@ (8007510 <MX_TIM2_Init+0x94>)
 80074c2:	f002 fb7f 	bl	8009bc4 <HAL_TIM_Base_Init>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80074cc:	f7ff fcfe 	bl	8006ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80074d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80074d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80074d6:	f107 0310 	add.w	r3, r7, #16
 80074da:	4619      	mov	r1, r3
 80074dc:	480c      	ldr	r0, [pc, #48]	@ (8007510 <MX_TIM2_Init+0x94>)
 80074de:	f002 fce7 	bl	8009eb0 <HAL_TIM_ConfigClockSource>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80074e8:	f7ff fcf0 	bl	8006ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80074ec:	2320      	movs	r3, #32
 80074ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80074f4:	1d3b      	adds	r3, r7, #4
 80074f6:	4619      	mov	r1, r3
 80074f8:	4805      	ldr	r0, [pc, #20]	@ (8007510 <MX_TIM2_Init+0x94>)
 80074fa:	f002 ff0f 	bl	800a31c <HAL_TIMEx_MasterConfigSynchronization>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007504:	f7ff fce2 	bl	8006ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007508:	bf00      	nop
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	200036d8 	.word	0x200036d8

08007514 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007524:	d113      	bne.n	800754e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007526:	4b0c      	ldr	r3, [pc, #48]	@ (8007558 <HAL_TIM_Base_MspInit+0x44>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752a:	4a0b      	ldr	r2, [pc, #44]	@ (8007558 <HAL_TIM_Base_MspInit+0x44>)
 800752c:	f043 0301 	orr.w	r3, r3, #1
 8007530:	6413      	str	r3, [r2, #64]	@ 0x40
 8007532:	4b09      	ldr	r3, [pc, #36]	@ (8007558 <HAL_TIM_Base_MspInit+0x44>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800753e:	2200      	movs	r2, #0
 8007540:	2100      	movs	r1, #0
 8007542:	201c      	movs	r0, #28
 8007544:	f000 fa27 	bl	8007996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007548:	201c      	movs	r0, #28
 800754a:	f000 fa40 	bl	80079ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800754e:	bf00      	nop
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	40023800 	.word	0x40023800

0800755c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007560:	4b15      	ldr	r3, [pc, #84]	@ (80075b8 <MX_USART2_UART_Init+0x5c>)
 8007562:	4a16      	ldr	r2, [pc, #88]	@ (80075bc <MX_USART2_UART_Init+0x60>)
 8007564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007566:	4b14      	ldr	r3, [pc, #80]	@ (80075b8 <MX_USART2_UART_Init+0x5c>)
 8007568:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800756c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800756e:	4b12      	ldr	r3, [pc, #72]	@ (80075b8 <MX_USART2_UART_Init+0x5c>)
 8007570:	2200      	movs	r2, #0
 8007572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007574:	4b10      	ldr	r3, [pc, #64]	@ (80075b8 <MX_USART2_UART_Init+0x5c>)
 8007576:	2200      	movs	r2, #0
 8007578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800757a:	4b0f      	ldr	r3, [pc, #60]	@ (80075b8 <MX_USART2_UART_Init+0x5c>)
 800757c:	2200      	movs	r2, #0
 800757e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007580:	4b0d      	ldr	r3, [pc, #52]	@ (80075b8 <MX_USART2_UART_Init+0x5c>)
 8007582:	220c      	movs	r2, #12
 8007584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007586:	4b0c      	ldr	r3, [pc, #48]	@ (80075b8 <MX_USART2_UART_Init+0x5c>)
 8007588:	2200      	movs	r2, #0
 800758a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800758c:	4b0a      	ldr	r3, [pc, #40]	@ (80075b8 <MX_USART2_UART_Init+0x5c>)
 800758e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007592:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8007594:	4b08      	ldr	r3, [pc, #32]	@ (80075b8 <MX_USART2_UART_Init+0x5c>)
 8007596:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800759a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800759c:	4b06      	ldr	r3, [pc, #24]	@ (80075b8 <MX_USART2_UART_Init+0x5c>)
 800759e:	2200      	movs	r2, #0
 80075a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80075a2:	4805      	ldr	r0, [pc, #20]	@ (80075b8 <MX_USART2_UART_Init+0x5c>)
 80075a4:	f002 ff66 	bl	800a474 <HAL_UART_Init>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80075ae:	f7ff fc8d 	bl	8006ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80075b2:	bf00      	nop
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20003724 	.word	0x20003724
 80075bc:	40004400 	.word	0x40004400

080075c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b0aa      	sub	sp, #168	@ 0xa8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075c8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	605a      	str	r2, [r3, #4]
 80075d2:	609a      	str	r2, [r3, #8]
 80075d4:	60da      	str	r2, [r3, #12]
 80075d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80075d8:	f107 0310 	add.w	r3, r7, #16
 80075dc:	2284      	movs	r2, #132	@ 0x84
 80075de:	2100      	movs	r1, #0
 80075e0:	4618      	mov	r0, r3
 80075e2:	f008 f86a 	bl	800f6ba <memset>
  if(uartHandle->Instance==USART2)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a25      	ldr	r2, [pc, #148]	@ (8007680 <HAL_UART_MspInit+0xc0>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d142      	bne.n	8007676 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80075f0:	2380      	movs	r3, #128	@ 0x80
 80075f2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80075f4:	2300      	movs	r3, #0
 80075f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80075f8:	f107 0310 	add.w	r3, r7, #16
 80075fc:	4618      	mov	r0, r3
 80075fe:	f001 f93d 	bl	800887c <HAL_RCCEx_PeriphCLKConfig>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007608:	f7ff fc60 	bl	8006ecc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800760c:	4b1d      	ldr	r3, [pc, #116]	@ (8007684 <HAL_UART_MspInit+0xc4>)
 800760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007610:	4a1c      	ldr	r2, [pc, #112]	@ (8007684 <HAL_UART_MspInit+0xc4>)
 8007612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007616:	6413      	str	r3, [r2, #64]	@ 0x40
 8007618:	4b1a      	ldr	r3, [pc, #104]	@ (8007684 <HAL_UART_MspInit+0xc4>)
 800761a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007624:	4b17      	ldr	r3, [pc, #92]	@ (8007684 <HAL_UART_MspInit+0xc4>)
 8007626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007628:	4a16      	ldr	r2, [pc, #88]	@ (8007684 <HAL_UART_MspInit+0xc4>)
 800762a:	f043 0308 	orr.w	r3, r3, #8
 800762e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007630:	4b14      	ldr	r3, [pc, #80]	@ (8007684 <HAL_UART_MspInit+0xc4>)
 8007632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007634:	f003 0308 	and.w	r3, r3, #8
 8007638:	60bb      	str	r3, [r7, #8]
 800763a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800763c:	2360      	movs	r3, #96	@ 0x60
 800763e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007642:	2302      	movs	r3, #2
 8007644:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007648:	2300      	movs	r3, #0
 800764a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800764e:	2303      	movs	r3, #3
 8007650:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007654:	2307      	movs	r3, #7
 8007656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800765a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800765e:	4619      	mov	r1, r3
 8007660:	4809      	ldr	r0, [pc, #36]	@ (8007688 <HAL_UART_MspInit+0xc8>)
 8007662:	f000 fa61 	bl	8007b28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007666:	2200      	movs	r2, #0
 8007668:	2100      	movs	r1, #0
 800766a:	2026      	movs	r0, #38	@ 0x26
 800766c:	f000 f993 	bl	8007996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007670:	2026      	movs	r0, #38	@ 0x26
 8007672:	f000 f9ac 	bl	80079ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007676:	bf00      	nop
 8007678:	37a8      	adds	r7, #168	@ 0xa8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40004400 	.word	0x40004400
 8007684:	40023800 	.word	0x40023800
 8007688:	40020c00 	.word	0x40020c00

0800768c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800768c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80076c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007690:	f7ff fee2 	bl	8007458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007694:	480c      	ldr	r0, [pc, #48]	@ (80076c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007696:	490d      	ldr	r1, [pc, #52]	@ (80076cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007698:	4a0d      	ldr	r2, [pc, #52]	@ (80076d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800769a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800769c:	e002      	b.n	80076a4 <LoopCopyDataInit>

0800769e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800769e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80076a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80076a2:	3304      	adds	r3, #4

080076a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80076a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80076a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80076a8:	d3f9      	bcc.n	800769e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80076aa:	4a0a      	ldr	r2, [pc, #40]	@ (80076d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80076ac:	4c0a      	ldr	r4, [pc, #40]	@ (80076d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80076ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076b0:	e001      	b.n	80076b6 <LoopFillZerobss>

080076b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076b4:	3204      	adds	r2, #4

080076b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076b8:	d3fb      	bcc.n	80076b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80076ba:	f008 f8c5 	bl	800f848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80076be:	f7ff f8e3 	bl	8006888 <main>
  bx  lr    
 80076c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80076c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80076c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80076cc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80076d0:	08013a94 	.word	0x08013a94
  ldr r2, =_sbss
 80076d4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80076d8:	20003938 	.word	0x20003938

080076dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076dc:	e7fe      	b.n	80076dc <ADC_IRQHandler>

080076de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076e2:	2003      	movs	r0, #3
 80076e4:	f000 f94c 	bl	8007980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80076e8:	2000      	movs	r0, #0
 80076ea:	f000 f805 	bl	80076f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80076ee:	f7ff fe0b 	bl	8007308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007700:	4b12      	ldr	r3, [pc, #72]	@ (800774c <HAL_InitTick+0x54>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	4b12      	ldr	r3, [pc, #72]	@ (8007750 <HAL_InitTick+0x58>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	4619      	mov	r1, r3
 800770a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800770e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007712:	fbb2 f3f3 	udiv	r3, r2, r3
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f967 	bl	80079ea <HAL_SYSTICK_Config>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e00e      	b.n	8007744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b0f      	cmp	r3, #15
 800772a:	d80a      	bhi.n	8007742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800772c:	2200      	movs	r2, #0
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	f000 f92f 	bl	8007996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007738:	4a06      	ldr	r2, [pc, #24]	@ (8007754 <HAL_InitTick+0x5c>)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	e000      	b.n	8007744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20000000 	.word	0x20000000
 8007750:	20000008 	.word	0x20000008
 8007754:	20000004 	.word	0x20000004

08007758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800775c:	4b06      	ldr	r3, [pc, #24]	@ (8007778 <HAL_IncTick+0x20>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	4b06      	ldr	r3, [pc, #24]	@ (800777c <HAL_IncTick+0x24>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4413      	add	r3, r2
 8007768:	4a04      	ldr	r2, [pc, #16]	@ (800777c <HAL_IncTick+0x24>)
 800776a:	6013      	str	r3, [r2, #0]
}
 800776c:	bf00      	nop
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	20000008 	.word	0x20000008
 800777c:	200037ac 	.word	0x200037ac

08007780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  return uwTick;
 8007784:	4b03      	ldr	r3, [pc, #12]	@ (8007794 <HAL_GetTick+0x14>)
 8007786:	681b      	ldr	r3, [r3, #0]
}
 8007788:	4618      	mov	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	200037ac 	.word	0x200037ac

08007798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077a0:	f7ff ffee 	bl	8007780 <HAL_GetTick>
 80077a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b0:	d005      	beq.n	80077be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077b2:	4b0a      	ldr	r3, [pc, #40]	@ (80077dc <HAL_Delay+0x44>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80077be:	bf00      	nop
 80077c0:	f7ff ffde 	bl	8007780 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d8f7      	bhi.n	80077c0 <HAL_Delay+0x28>
  {
  }
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000008 	.word	0x20000008

080077e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007820 <__NVIC_SetPriorityGrouping+0x40>)
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80077fc:	4013      	ands	r3, r2
 80077fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007808:	4b06      	ldr	r3, [pc, #24]	@ (8007824 <__NVIC_SetPriorityGrouping+0x44>)
 800780a:	4313      	orrs	r3, r2
 800780c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800780e:	4a04      	ldr	r2, [pc, #16]	@ (8007820 <__NVIC_SetPriorityGrouping+0x40>)
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	60d3      	str	r3, [r2, #12]
}
 8007814:	bf00      	nop
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	e000ed00 	.word	0xe000ed00
 8007824:	05fa0000 	.word	0x05fa0000

08007828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007828:	b480      	push	{r7}
 800782a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800782c:	4b04      	ldr	r3, [pc, #16]	@ (8007840 <__NVIC_GetPriorityGrouping+0x18>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	0a1b      	lsrs	r3, r3, #8
 8007832:	f003 0307 	and.w	r3, r3, #7
}
 8007836:	4618      	mov	r0, r3
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	e000ed00 	.word	0xe000ed00

08007844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800784e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007852:	2b00      	cmp	r3, #0
 8007854:	db0b      	blt.n	800786e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	f003 021f 	and.w	r2, r3, #31
 800785c:	4907      	ldr	r1, [pc, #28]	@ (800787c <__NVIC_EnableIRQ+0x38>)
 800785e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	2001      	movs	r0, #1
 8007866:	fa00 f202 	lsl.w	r2, r0, r2
 800786a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800786e:	bf00      	nop
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	e000e100 	.word	0xe000e100

08007880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	4603      	mov	r3, r0
 8007888:	6039      	str	r1, [r7, #0]
 800788a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800788c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007890:	2b00      	cmp	r3, #0
 8007892:	db0a      	blt.n	80078aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	b2da      	uxtb	r2, r3
 8007898:	490c      	ldr	r1, [pc, #48]	@ (80078cc <__NVIC_SetPriority+0x4c>)
 800789a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800789e:	0112      	lsls	r2, r2, #4
 80078a0:	b2d2      	uxtb	r2, r2
 80078a2:	440b      	add	r3, r1
 80078a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078a8:	e00a      	b.n	80078c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	4908      	ldr	r1, [pc, #32]	@ (80078d0 <__NVIC_SetPriority+0x50>)
 80078b0:	79fb      	ldrb	r3, [r7, #7]
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	3b04      	subs	r3, #4
 80078b8:	0112      	lsls	r2, r2, #4
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	440b      	add	r3, r1
 80078be:	761a      	strb	r2, [r3, #24]
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	e000e100 	.word	0xe000e100
 80078d0:	e000ed00 	.word	0xe000ed00

080078d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b089      	sub	sp, #36	@ 0x24
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	f1c3 0307 	rsb	r3, r3, #7
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	bf28      	it	cs
 80078f2:	2304      	movcs	r3, #4
 80078f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	3304      	adds	r3, #4
 80078fa:	2b06      	cmp	r3, #6
 80078fc:	d902      	bls.n	8007904 <NVIC_EncodePriority+0x30>
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	3b03      	subs	r3, #3
 8007902:	e000      	b.n	8007906 <NVIC_EncodePriority+0x32>
 8007904:	2300      	movs	r3, #0
 8007906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007908:	f04f 32ff 	mov.w	r2, #4294967295
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	fa02 f303 	lsl.w	r3, r2, r3
 8007912:	43da      	mvns	r2, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	401a      	ands	r2, r3
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800791c:	f04f 31ff 	mov.w	r1, #4294967295
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	fa01 f303 	lsl.w	r3, r1, r3
 8007926:	43d9      	mvns	r1, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800792c:	4313      	orrs	r3, r2
         );
}
 800792e:	4618      	mov	r0, r3
 8007930:	3724      	adds	r7, #36	@ 0x24
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
	...

0800793c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3b01      	subs	r3, #1
 8007948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800794c:	d301      	bcc.n	8007952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800794e:	2301      	movs	r3, #1
 8007950:	e00f      	b.n	8007972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007952:	4a0a      	ldr	r2, [pc, #40]	@ (800797c <SysTick_Config+0x40>)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3b01      	subs	r3, #1
 8007958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800795a:	210f      	movs	r1, #15
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	f7ff ff8e 	bl	8007880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007964:	4b05      	ldr	r3, [pc, #20]	@ (800797c <SysTick_Config+0x40>)
 8007966:	2200      	movs	r2, #0
 8007968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800796a:	4b04      	ldr	r3, [pc, #16]	@ (800797c <SysTick_Config+0x40>)
 800796c:	2207      	movs	r2, #7
 800796e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	e000e010 	.word	0xe000e010

08007980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff ff29 	bl	80077e0 <__NVIC_SetPriorityGrouping>
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007996:	b580      	push	{r7, lr}
 8007998:	b086      	sub	sp, #24
 800799a:	af00      	add	r7, sp, #0
 800799c:	4603      	mov	r3, r0
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	607a      	str	r2, [r7, #4]
 80079a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079a8:	f7ff ff3e 	bl	8007828 <__NVIC_GetPriorityGrouping>
 80079ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	6978      	ldr	r0, [r7, #20]
 80079b4:	f7ff ff8e 	bl	80078d4 <NVIC_EncodePriority>
 80079b8:	4602      	mov	r2, r0
 80079ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079be:	4611      	mov	r1, r2
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff ff5d 	bl	8007880 <__NVIC_SetPriority>
}
 80079c6:	bf00      	nop
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	4603      	mov	r3, r0
 80079d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff ff31 	bl	8007844 <__NVIC_EnableIRQ>
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b082      	sub	sp, #8
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff ffa2 	bl	800793c <SysTick_Config>
 80079f8:	4603      	mov	r3, r0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007a10:	f7ff feb6 	bl	8007780 <HAL_GetTick>
 8007a14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d008      	beq.n	8007a34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2280      	movs	r2, #128	@ 0x80
 8007a26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e052      	b.n	8007ada <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 0216 	bic.w	r2, r2, #22
 8007a42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695a      	ldr	r2, [r3, #20]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007a52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d103      	bne.n	8007a64 <HAL_DMA_Abort+0x62>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d007      	beq.n	8007a74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f022 0208 	bic.w	r2, r2, #8
 8007a72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0201 	bic.w	r2, r2, #1
 8007a82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a84:	e013      	b.n	8007aae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a86:	f7ff fe7b 	bl	8007780 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b05      	cmp	r3, #5
 8007a92:	d90c      	bls.n	8007aae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2203      	movs	r2, #3
 8007a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e015      	b.n	8007ada <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e4      	bne.n	8007a86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ac0:	223f      	movs	r2, #63	@ 0x3f
 8007ac2:	409a      	lsls	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d004      	beq.n	8007b00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2280      	movs	r2, #128	@ 0x80
 8007afa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e00c      	b.n	8007b1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2205      	movs	r2, #5
 8007b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 0201 	bic.w	r2, r2, #1
 8007b16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
	...

08007b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b089      	sub	sp, #36	@ 0x24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007b32:	2300      	movs	r3, #0
 8007b34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007b36:	2300      	movs	r3, #0
 8007b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007b42:	2300      	movs	r3, #0
 8007b44:	61fb      	str	r3, [r7, #28]
 8007b46:	e175      	b.n	8007e34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007b48:	2201      	movs	r2, #1
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	f040 8164 	bne.w	8007e2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d005      	beq.n	8007b7e <HAL_GPIO_Init+0x56>
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f003 0303 	and.w	r3, r3, #3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d130      	bne.n	8007be0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	2203      	movs	r2, #3
 8007b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8e:	43db      	mvns	r3, r3
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	4013      	ands	r3, r2
 8007b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbc:	43db      	mvns	r3, r3
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	091b      	lsrs	r3, r3, #4
 8007bca:	f003 0201 	and.w	r2, r3, #1
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f003 0303 	and.w	r3, r3, #3
 8007be8:	2b03      	cmp	r3, #3
 8007bea:	d017      	beq.n	8007c1c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	2203      	movs	r2, #3
 8007bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfc:	43db      	mvns	r3, r3
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	4013      	ands	r3, r2
 8007c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	689a      	ldr	r2, [r3, #8]
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f003 0303 	and.w	r3, r3, #3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d123      	bne.n	8007c70 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	08da      	lsrs	r2, r3, #3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3208      	adds	r2, #8
 8007c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	220f      	movs	r2, #15
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	43db      	mvns	r3, r3
 8007c46:	69ba      	ldr	r2, [r7, #24]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	691a      	ldr	r2, [r3, #16]
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	08da      	lsrs	r2, r3, #3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	3208      	adds	r2, #8
 8007c6a:	69b9      	ldr	r1, [r7, #24]
 8007c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c80:	43db      	mvns	r3, r3
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	4013      	ands	r3, r2
 8007c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f003 0203 	and.w	r2, r3, #3
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	fa02 f303 	lsl.w	r3, r2, r3
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 80be 	beq.w	8007e2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cb2:	4b66      	ldr	r3, [pc, #408]	@ (8007e4c <HAL_GPIO_Init+0x324>)
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb6:	4a65      	ldr	r2, [pc, #404]	@ (8007e4c <HAL_GPIO_Init+0x324>)
 8007cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8007cbe:	4b63      	ldr	r3, [pc, #396]	@ (8007e4c <HAL_GPIO_Init+0x324>)
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007cca:	4a61      	ldr	r2, [pc, #388]	@ (8007e50 <HAL_GPIO_Init+0x328>)
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	089b      	lsrs	r3, r3, #2
 8007cd0:	3302      	adds	r3, #2
 8007cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	f003 0303 	and.w	r3, r3, #3
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	220f      	movs	r2, #15
 8007ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce6:	43db      	mvns	r3, r3
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	4013      	ands	r3, r2
 8007cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a58      	ldr	r2, [pc, #352]	@ (8007e54 <HAL_GPIO_Init+0x32c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d037      	beq.n	8007d66 <HAL_GPIO_Init+0x23e>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a57      	ldr	r2, [pc, #348]	@ (8007e58 <HAL_GPIO_Init+0x330>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d031      	beq.n	8007d62 <HAL_GPIO_Init+0x23a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a56      	ldr	r2, [pc, #344]	@ (8007e5c <HAL_GPIO_Init+0x334>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d02b      	beq.n	8007d5e <HAL_GPIO_Init+0x236>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a55      	ldr	r2, [pc, #340]	@ (8007e60 <HAL_GPIO_Init+0x338>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d025      	beq.n	8007d5a <HAL_GPIO_Init+0x232>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a54      	ldr	r2, [pc, #336]	@ (8007e64 <HAL_GPIO_Init+0x33c>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d01f      	beq.n	8007d56 <HAL_GPIO_Init+0x22e>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a53      	ldr	r2, [pc, #332]	@ (8007e68 <HAL_GPIO_Init+0x340>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d019      	beq.n	8007d52 <HAL_GPIO_Init+0x22a>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a52      	ldr	r2, [pc, #328]	@ (8007e6c <HAL_GPIO_Init+0x344>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <HAL_GPIO_Init+0x226>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a51      	ldr	r2, [pc, #324]	@ (8007e70 <HAL_GPIO_Init+0x348>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00d      	beq.n	8007d4a <HAL_GPIO_Init+0x222>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a50      	ldr	r2, [pc, #320]	@ (8007e74 <HAL_GPIO_Init+0x34c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d007      	beq.n	8007d46 <HAL_GPIO_Init+0x21e>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a4f      	ldr	r2, [pc, #316]	@ (8007e78 <HAL_GPIO_Init+0x350>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d101      	bne.n	8007d42 <HAL_GPIO_Init+0x21a>
 8007d3e:	2309      	movs	r3, #9
 8007d40:	e012      	b.n	8007d68 <HAL_GPIO_Init+0x240>
 8007d42:	230a      	movs	r3, #10
 8007d44:	e010      	b.n	8007d68 <HAL_GPIO_Init+0x240>
 8007d46:	2308      	movs	r3, #8
 8007d48:	e00e      	b.n	8007d68 <HAL_GPIO_Init+0x240>
 8007d4a:	2307      	movs	r3, #7
 8007d4c:	e00c      	b.n	8007d68 <HAL_GPIO_Init+0x240>
 8007d4e:	2306      	movs	r3, #6
 8007d50:	e00a      	b.n	8007d68 <HAL_GPIO_Init+0x240>
 8007d52:	2305      	movs	r3, #5
 8007d54:	e008      	b.n	8007d68 <HAL_GPIO_Init+0x240>
 8007d56:	2304      	movs	r3, #4
 8007d58:	e006      	b.n	8007d68 <HAL_GPIO_Init+0x240>
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e004      	b.n	8007d68 <HAL_GPIO_Init+0x240>
 8007d5e:	2302      	movs	r3, #2
 8007d60:	e002      	b.n	8007d68 <HAL_GPIO_Init+0x240>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <HAL_GPIO_Init+0x240>
 8007d66:	2300      	movs	r3, #0
 8007d68:	69fa      	ldr	r2, [r7, #28]
 8007d6a:	f002 0203 	and.w	r2, r2, #3
 8007d6e:	0092      	lsls	r2, r2, #2
 8007d70:	4093      	lsls	r3, r2
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007d78:	4935      	ldr	r1, [pc, #212]	@ (8007e50 <HAL_GPIO_Init+0x328>)
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	089b      	lsrs	r3, r3, #2
 8007d7e:	3302      	adds	r3, #2
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007d86:	4b3d      	ldr	r3, [pc, #244]	@ (8007e7c <HAL_GPIO_Init+0x354>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	43db      	mvns	r3, r3
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	4013      	ands	r3, r2
 8007d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007da2:	69ba      	ldr	r2, [r7, #24]
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007daa:	4a34      	ldr	r2, [pc, #208]	@ (8007e7c <HAL_GPIO_Init+0x354>)
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007db0:	4b32      	ldr	r3, [pc, #200]	@ (8007e7c <HAL_GPIO_Init+0x354>)
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	43db      	mvns	r3, r3
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007dd4:	4a29      	ldr	r2, [pc, #164]	@ (8007e7c <HAL_GPIO_Init+0x354>)
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007dda:	4b28      	ldr	r3, [pc, #160]	@ (8007e7c <HAL_GPIO_Init+0x354>)
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	43db      	mvns	r3, r3
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	4013      	ands	r3, r2
 8007de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8007e7c <HAL_GPIO_Init+0x354>)
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e04:	4b1d      	ldr	r3, [pc, #116]	@ (8007e7c <HAL_GPIO_Init+0x354>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	43db      	mvns	r3, r3
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	4013      	ands	r3, r2
 8007e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e28:	4a14      	ldr	r2, [pc, #80]	@ (8007e7c <HAL_GPIO_Init+0x354>)
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	3301      	adds	r3, #1
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	2b0f      	cmp	r3, #15
 8007e38:	f67f ae86 	bls.w	8007b48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	3724      	adds	r7, #36	@ 0x24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	40023800 	.word	0x40023800
 8007e50:	40013800 	.word	0x40013800
 8007e54:	40020000 	.word	0x40020000
 8007e58:	40020400 	.word	0x40020400
 8007e5c:	40020800 	.word	0x40020800
 8007e60:	40020c00 	.word	0x40020c00
 8007e64:	40021000 	.word	0x40021000
 8007e68:	40021400 	.word	0x40021400
 8007e6c:	40021800 	.word	0x40021800
 8007e70:	40021c00 	.word	0x40021c00
 8007e74:	40022000 	.word	0x40022000
 8007e78:	40022400 	.word	0x40022400
 8007e7c:	40013c00 	.word	0x40013c00

08007e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	807b      	strh	r3, [r7, #2]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007e90:	787b      	ldrb	r3, [r7, #1]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e96:	887a      	ldrh	r2, [r7, #2]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007e9c:	e003      	b.n	8007ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007e9e:	887b      	ldrh	r3, [r7, #2]
 8007ea0:	041a      	lsls	r2, r3, #16
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	619a      	str	r2, [r3, #24]
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ec4:	887a      	ldrh	r2, [r7, #2]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	041a      	lsls	r2, r3, #16
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	43d9      	mvns	r1, r3
 8007ed0:	887b      	ldrh	r3, [r7, #2]
 8007ed2:	400b      	ands	r3, r1
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	619a      	str	r2, [r3, #24]
}
 8007eda:	bf00      	nop
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
	...

08007ee8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e291      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 8087 	beq.w	800801a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f0c:	4b96      	ldr	r3, [pc, #600]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f003 030c 	and.w	r3, r3, #12
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	d00c      	beq.n	8007f32 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f18:	4b93      	ldr	r3, [pc, #588]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f003 030c 	and.w	r3, r3, #12
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d112      	bne.n	8007f4a <HAL_RCC_OscConfig+0x62>
 8007f24:	4b90      	ldr	r3, [pc, #576]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f30:	d10b      	bne.n	8007f4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f32:	4b8d      	ldr	r3, [pc, #564]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d06c      	beq.n	8008018 <HAL_RCC_OscConfig+0x130>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d168      	bne.n	8008018 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e26b      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f52:	d106      	bne.n	8007f62 <HAL_RCC_OscConfig+0x7a>
 8007f54:	4b84      	ldr	r3, [pc, #528]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a83      	ldr	r2, [pc, #524]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	e02e      	b.n	8007fc0 <HAL_RCC_OscConfig+0xd8>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d10c      	bne.n	8007f84 <HAL_RCC_OscConfig+0x9c>
 8007f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a7e      	ldr	r2, [pc, #504]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	4b7c      	ldr	r3, [pc, #496]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a7b      	ldr	r2, [pc, #492]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	e01d      	b.n	8007fc0 <HAL_RCC_OscConfig+0xd8>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f8c:	d10c      	bne.n	8007fa8 <HAL_RCC_OscConfig+0xc0>
 8007f8e:	4b76      	ldr	r3, [pc, #472]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a75      	ldr	r2, [pc, #468]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f98:	6013      	str	r3, [r2, #0]
 8007f9a:	4b73      	ldr	r3, [pc, #460]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a72      	ldr	r2, [pc, #456]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	e00b      	b.n	8007fc0 <HAL_RCC_OscConfig+0xd8>
 8007fa8:	4b6f      	ldr	r3, [pc, #444]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a6e      	ldr	r2, [pc, #440]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fb2:	6013      	str	r3, [r2, #0]
 8007fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a6b      	ldr	r2, [pc, #428]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007fba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d013      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc8:	f7ff fbda 	bl	8007780 <HAL_GetTick>
 8007fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fce:	e008      	b.n	8007fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fd0:	f7ff fbd6 	bl	8007780 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	2b64      	cmp	r3, #100	@ 0x64
 8007fdc:	d901      	bls.n	8007fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e21f      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fe2:	4b61      	ldr	r3, [pc, #388]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0f0      	beq.n	8007fd0 <HAL_RCC_OscConfig+0xe8>
 8007fee:	e014      	b.n	800801a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ff0:	f7ff fbc6 	bl	8007780 <HAL_GetTick>
 8007ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ff6:	e008      	b.n	800800a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ff8:	f7ff fbc2 	bl	8007780 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	2b64      	cmp	r3, #100	@ 0x64
 8008004:	d901      	bls.n	800800a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e20b      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800800a:	4b57      	ldr	r3, [pc, #348]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1f0      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x110>
 8008016:	e000      	b.n	800801a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d069      	beq.n	80080fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008026:	4b50      	ldr	r3, [pc, #320]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 030c 	and.w	r3, r3, #12
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00b      	beq.n	800804a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008032:	4b4d      	ldr	r3, [pc, #308]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	f003 030c 	and.w	r3, r3, #12
 800803a:	2b08      	cmp	r3, #8
 800803c:	d11c      	bne.n	8008078 <HAL_RCC_OscConfig+0x190>
 800803e:	4b4a      	ldr	r3, [pc, #296]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d116      	bne.n	8008078 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800804a:	4b47      	ldr	r3, [pc, #284]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d005      	beq.n	8008062 <HAL_RCC_OscConfig+0x17a>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d001      	beq.n	8008062 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e1df      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008062:	4b41      	ldr	r3, [pc, #260]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	493d      	ldr	r1, [pc, #244]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8008072:	4313      	orrs	r3, r2
 8008074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008076:	e040      	b.n	80080fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d023      	beq.n	80080c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008080:	4b39      	ldr	r3, [pc, #228]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a38      	ldr	r2, [pc, #224]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8008086:	f043 0301 	orr.w	r3, r3, #1
 800808a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808c:	f7ff fb78 	bl	8007780 <HAL_GetTick>
 8008090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008092:	e008      	b.n	80080a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008094:	f7ff fb74 	bl	8007780 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e1bd      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080a6:	4b30      	ldr	r3, [pc, #192]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0f0      	beq.n	8008094 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080b2:	4b2d      	ldr	r3, [pc, #180]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	4929      	ldr	r1, [pc, #164]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	600b      	str	r3, [r1, #0]
 80080c6:	e018      	b.n	80080fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080c8:	4b27      	ldr	r3, [pc, #156]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a26      	ldr	r2, [pc, #152]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 80080ce:	f023 0301 	bic.w	r3, r3, #1
 80080d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d4:	f7ff fb54 	bl	8007780 <HAL_GetTick>
 80080d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080da:	e008      	b.n	80080ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080dc:	f7ff fb50 	bl	8007780 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e199      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1f0      	bne.n	80080dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d038      	beq.n	8008178 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d019      	beq.n	8008142 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800810e:	4b16      	ldr	r3, [pc, #88]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8008110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008112:	4a15      	ldr	r2, [pc, #84]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8008114:	f043 0301 	orr.w	r3, r3, #1
 8008118:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800811a:	f7ff fb31 	bl	8007780 <HAL_GetTick>
 800811e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008120:	e008      	b.n	8008134 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008122:	f7ff fb2d 	bl	8007780 <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	2b02      	cmp	r3, #2
 800812e:	d901      	bls.n	8008134 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e176      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008134:	4b0c      	ldr	r3, [pc, #48]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8008136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0f0      	beq.n	8008122 <HAL_RCC_OscConfig+0x23a>
 8008140:	e01a      	b.n	8008178 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008142:	4b09      	ldr	r3, [pc, #36]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8008144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008146:	4a08      	ldr	r2, [pc, #32]	@ (8008168 <HAL_RCC_OscConfig+0x280>)
 8008148:	f023 0301 	bic.w	r3, r3, #1
 800814c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800814e:	f7ff fb17 	bl	8007780 <HAL_GetTick>
 8008152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008154:	e00a      	b.n	800816c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008156:	f7ff fb13 	bl	8007780 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d903      	bls.n	800816c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e15c      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
 8008168:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800816c:	4b91      	ldr	r3, [pc, #580]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 800816e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1ee      	bne.n	8008156 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 80a4 	beq.w	80082ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008186:	4b8b      	ldr	r3, [pc, #556]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10d      	bne.n	80081ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008192:	4b88      	ldr	r3, [pc, #544]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008196:	4a87      	ldr	r2, [pc, #540]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800819c:	6413      	str	r3, [r2, #64]	@ 0x40
 800819e:	4b85      	ldr	r3, [pc, #532]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 80081a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081a6:	60bb      	str	r3, [r7, #8]
 80081a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081aa:	2301      	movs	r3, #1
 80081ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081ae:	4b82      	ldr	r3, [pc, #520]	@ (80083b8 <HAL_RCC_OscConfig+0x4d0>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d118      	bne.n	80081ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80081ba:	4b7f      	ldr	r3, [pc, #508]	@ (80083b8 <HAL_RCC_OscConfig+0x4d0>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a7e      	ldr	r2, [pc, #504]	@ (80083b8 <HAL_RCC_OscConfig+0x4d0>)
 80081c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081c6:	f7ff fadb 	bl	8007780 <HAL_GetTick>
 80081ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081cc:	e008      	b.n	80081e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ce:	f7ff fad7 	bl	8007780 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b64      	cmp	r3, #100	@ 0x64
 80081da:	d901      	bls.n	80081e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e120      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081e0:	4b75      	ldr	r3, [pc, #468]	@ (80083b8 <HAL_RCC_OscConfig+0x4d0>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d0f0      	beq.n	80081ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d106      	bne.n	8008202 <HAL_RCC_OscConfig+0x31a>
 80081f4:	4b6f      	ldr	r3, [pc, #444]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 80081f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f8:	4a6e      	ldr	r2, [pc, #440]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008200:	e02d      	b.n	800825e <HAL_RCC_OscConfig+0x376>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10c      	bne.n	8008224 <HAL_RCC_OscConfig+0x33c>
 800820a:	4b6a      	ldr	r3, [pc, #424]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 800820c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800820e:	4a69      	ldr	r2, [pc, #420]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008210:	f023 0301 	bic.w	r3, r3, #1
 8008214:	6713      	str	r3, [r2, #112]	@ 0x70
 8008216:	4b67      	ldr	r3, [pc, #412]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821a:	4a66      	ldr	r2, [pc, #408]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 800821c:	f023 0304 	bic.w	r3, r3, #4
 8008220:	6713      	str	r3, [r2, #112]	@ 0x70
 8008222:	e01c      	b.n	800825e <HAL_RCC_OscConfig+0x376>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	2b05      	cmp	r3, #5
 800822a:	d10c      	bne.n	8008246 <HAL_RCC_OscConfig+0x35e>
 800822c:	4b61      	ldr	r3, [pc, #388]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 800822e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008230:	4a60      	ldr	r2, [pc, #384]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008232:	f043 0304 	orr.w	r3, r3, #4
 8008236:	6713      	str	r3, [r2, #112]	@ 0x70
 8008238:	4b5e      	ldr	r3, [pc, #376]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 800823a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800823c:	4a5d      	ldr	r2, [pc, #372]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 800823e:	f043 0301 	orr.w	r3, r3, #1
 8008242:	6713      	str	r3, [r2, #112]	@ 0x70
 8008244:	e00b      	b.n	800825e <HAL_RCC_OscConfig+0x376>
 8008246:	4b5b      	ldr	r3, [pc, #364]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824a:	4a5a      	ldr	r2, [pc, #360]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 800824c:	f023 0301 	bic.w	r3, r3, #1
 8008250:	6713      	str	r3, [r2, #112]	@ 0x70
 8008252:	4b58      	ldr	r3, [pc, #352]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008256:	4a57      	ldr	r2, [pc, #348]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008258:	f023 0304 	bic.w	r3, r3, #4
 800825c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d015      	beq.n	8008292 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008266:	f7ff fa8b 	bl	8007780 <HAL_GetTick>
 800826a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800826c:	e00a      	b.n	8008284 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800826e:	f7ff fa87 	bl	8007780 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800827c:	4293      	cmp	r3, r2
 800827e:	d901      	bls.n	8008284 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e0ce      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008284:	4b4b      	ldr	r3, [pc, #300]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0ee      	beq.n	800826e <HAL_RCC_OscConfig+0x386>
 8008290:	e014      	b.n	80082bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008292:	f7ff fa75 	bl	8007780 <HAL_GetTick>
 8008296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008298:	e00a      	b.n	80082b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800829a:	f7ff fa71 	bl	8007780 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e0b8      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082b0:	4b40      	ldr	r3, [pc, #256]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 80082b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1ee      	bne.n	800829a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80082bc:	7dfb      	ldrb	r3, [r7, #23]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d105      	bne.n	80082ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082c2:	4b3c      	ldr	r3, [pc, #240]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 80082c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082c6:	4a3b      	ldr	r2, [pc, #236]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 80082c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082cc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 80a4 	beq.w	8008420 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082d8:	4b36      	ldr	r3, [pc, #216]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f003 030c 	and.w	r3, r3, #12
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d06b      	beq.n	80083bc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d149      	bne.n	8008380 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ec:	4b31      	ldr	r3, [pc, #196]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a30      	ldr	r2, [pc, #192]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 80082f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f8:	f7ff fa42 	bl	8007780 <HAL_GetTick>
 80082fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082fe:	e008      	b.n	8008312 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008300:	f7ff fa3e 	bl	8007780 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	2b02      	cmp	r3, #2
 800830c:	d901      	bls.n	8008312 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e087      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008312:	4b28      	ldr	r3, [pc, #160]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1f0      	bne.n	8008300 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69da      	ldr	r2, [r3, #28]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	431a      	orrs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832c:	019b      	lsls	r3, r3, #6
 800832e:	431a      	orrs	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008334:	085b      	lsrs	r3, r3, #1
 8008336:	3b01      	subs	r3, #1
 8008338:	041b      	lsls	r3, r3, #16
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008340:	061b      	lsls	r3, r3, #24
 8008342:	4313      	orrs	r3, r2
 8008344:	4a1b      	ldr	r2, [pc, #108]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008346:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800834a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800834c:	4b19      	ldr	r3, [pc, #100]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a18      	ldr	r2, [pc, #96]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008358:	f7ff fa12 	bl	8007780 <HAL_GetTick>
 800835c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800835e:	e008      	b.n	8008372 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008360:	f7ff fa0e 	bl	8007780 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b02      	cmp	r3, #2
 800836c:	d901      	bls.n	8008372 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e057      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008372:	4b10      	ldr	r3, [pc, #64]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0f0      	beq.n	8008360 <HAL_RCC_OscConfig+0x478>
 800837e:	e04f      	b.n	8008420 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008380:	4b0c      	ldr	r3, [pc, #48]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a0b      	ldr	r2, [pc, #44]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 8008386:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800838a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800838c:	f7ff f9f8 	bl	8007780 <HAL_GetTick>
 8008390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008394:	f7ff f9f4 	bl	8007780 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e03d      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083a6:	4b03      	ldr	r3, [pc, #12]	@ (80083b4 <HAL_RCC_OscConfig+0x4cc>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1f0      	bne.n	8008394 <HAL_RCC_OscConfig+0x4ac>
 80083b2:	e035      	b.n	8008420 <HAL_RCC_OscConfig+0x538>
 80083b4:	40023800 	.word	0x40023800
 80083b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80083bc:	4b1b      	ldr	r3, [pc, #108]	@ (800842c <HAL_RCC_OscConfig+0x544>)
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d028      	beq.n	800841c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d121      	bne.n	800841c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d11a      	bne.n	800841c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80083ec:	4013      	ands	r3, r2
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80083f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d111      	bne.n	800841c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008402:	085b      	lsrs	r3, r3, #1
 8008404:	3b01      	subs	r3, #1
 8008406:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008408:	429a      	cmp	r2, r3
 800840a:	d107      	bne.n	800841c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008416:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008418:	429a      	cmp	r2, r3
 800841a:	d001      	beq.n	8008420 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e000      	b.n	8008422 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	40023800 	.word	0x40023800

08008430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e0d0      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008448:	4b6a      	ldr	r3, [pc, #424]	@ (80085f4 <HAL_RCC_ClockConfig+0x1c4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 030f 	and.w	r3, r3, #15
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d910      	bls.n	8008478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008456:	4b67      	ldr	r3, [pc, #412]	@ (80085f4 <HAL_RCC_ClockConfig+0x1c4>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f023 020f 	bic.w	r2, r3, #15
 800845e:	4965      	ldr	r1, [pc, #404]	@ (80085f4 <HAL_RCC_ClockConfig+0x1c4>)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	4313      	orrs	r3, r2
 8008464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008466:	4b63      	ldr	r3, [pc, #396]	@ (80085f4 <HAL_RCC_ClockConfig+0x1c4>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 030f 	and.w	r3, r3, #15
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	429a      	cmp	r2, r3
 8008472:	d001      	beq.n	8008478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e0b8      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b00      	cmp	r3, #0
 8008482:	d020      	beq.n	80084c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0304 	and.w	r3, r3, #4
 800848c:	2b00      	cmp	r3, #0
 800848e:	d005      	beq.n	800849c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008490:	4b59      	ldr	r3, [pc, #356]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	4a58      	ldr	r2, [pc, #352]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 8008496:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800849a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0308 	and.w	r3, r3, #8
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d005      	beq.n	80084b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084a8:	4b53      	ldr	r3, [pc, #332]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	4a52      	ldr	r2, [pc, #328]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 80084ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80084b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084b4:	4b50      	ldr	r3, [pc, #320]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	494d      	ldr	r1, [pc, #308]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0301 	and.w	r3, r3, #1
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d040      	beq.n	8008554 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d107      	bne.n	80084ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084da:	4b47      	ldr	r3, [pc, #284]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d115      	bne.n	8008512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e07f      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d107      	bne.n	8008502 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084f2:	4b41      	ldr	r3, [pc, #260]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d109      	bne.n	8008512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e073      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008502:	4b3d      	ldr	r3, [pc, #244]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e06b      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008512:	4b39      	ldr	r3, [pc, #228]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f023 0203 	bic.w	r2, r3, #3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	4936      	ldr	r1, [pc, #216]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 8008520:	4313      	orrs	r3, r2
 8008522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008524:	f7ff f92c 	bl	8007780 <HAL_GetTick>
 8008528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800852a:	e00a      	b.n	8008542 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800852c:	f7ff f928 	bl	8007780 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800853a:	4293      	cmp	r3, r2
 800853c:	d901      	bls.n	8008542 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800853e:	2303      	movs	r3, #3
 8008540:	e053      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008542:	4b2d      	ldr	r3, [pc, #180]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f003 020c 	and.w	r2, r3, #12
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	429a      	cmp	r2, r3
 8008552:	d1eb      	bne.n	800852c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008554:	4b27      	ldr	r3, [pc, #156]	@ (80085f4 <HAL_RCC_ClockConfig+0x1c4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d210      	bcs.n	8008584 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008562:	4b24      	ldr	r3, [pc, #144]	@ (80085f4 <HAL_RCC_ClockConfig+0x1c4>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f023 020f 	bic.w	r2, r3, #15
 800856a:	4922      	ldr	r1, [pc, #136]	@ (80085f4 <HAL_RCC_ClockConfig+0x1c4>)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	4313      	orrs	r3, r2
 8008570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008572:	4b20      	ldr	r3, [pc, #128]	@ (80085f4 <HAL_RCC_ClockConfig+0x1c4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 030f 	and.w	r3, r3, #15
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d001      	beq.n	8008584 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e032      	b.n	80085ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d008      	beq.n	80085a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008590:	4b19      	ldr	r3, [pc, #100]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	4916      	ldr	r1, [pc, #88]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0308 	and.w	r3, r3, #8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d009      	beq.n	80085c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80085ae:	4b12      	ldr	r3, [pc, #72]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	490e      	ldr	r1, [pc, #56]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80085c2:	f000 f821 	bl	8008608 <HAL_RCC_GetSysClockFreq>
 80085c6:	4602      	mov	r2, r0
 80085c8:	4b0b      	ldr	r3, [pc, #44]	@ (80085f8 <HAL_RCC_ClockConfig+0x1c8>)
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	091b      	lsrs	r3, r3, #4
 80085ce:	f003 030f 	and.w	r3, r3, #15
 80085d2:	490a      	ldr	r1, [pc, #40]	@ (80085fc <HAL_RCC_ClockConfig+0x1cc>)
 80085d4:	5ccb      	ldrb	r3, [r1, r3]
 80085d6:	fa22 f303 	lsr.w	r3, r2, r3
 80085da:	4a09      	ldr	r2, [pc, #36]	@ (8008600 <HAL_RCC_ClockConfig+0x1d0>)
 80085dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80085de:	4b09      	ldr	r3, [pc, #36]	@ (8008604 <HAL_RCC_ClockConfig+0x1d4>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7ff f888 	bl	80076f8 <HAL_InitTick>

  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	40023c00 	.word	0x40023c00
 80085f8:	40023800 	.word	0x40023800
 80085fc:	08013174 	.word	0x08013174
 8008600:	20000000 	.word	0x20000000
 8008604:	20000004 	.word	0x20000004

08008608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800860c:	b094      	sub	sp, #80	@ 0x50
 800860e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	647b      	str	r3, [r7, #68]	@ 0x44
 8008614:	2300      	movs	r3, #0
 8008616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008618:	2300      	movs	r3, #0
 800861a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008620:	4b79      	ldr	r3, [pc, #484]	@ (8008808 <HAL_RCC_GetSysClockFreq+0x200>)
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f003 030c 	and.w	r3, r3, #12
 8008628:	2b08      	cmp	r3, #8
 800862a:	d00d      	beq.n	8008648 <HAL_RCC_GetSysClockFreq+0x40>
 800862c:	2b08      	cmp	r3, #8
 800862e:	f200 80e1 	bhi.w	80087f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <HAL_RCC_GetSysClockFreq+0x34>
 8008636:	2b04      	cmp	r3, #4
 8008638:	d003      	beq.n	8008642 <HAL_RCC_GetSysClockFreq+0x3a>
 800863a:	e0db      	b.n	80087f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800863c:	4b73      	ldr	r3, [pc, #460]	@ (800880c <HAL_RCC_GetSysClockFreq+0x204>)
 800863e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008640:	e0db      	b.n	80087fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008642:	4b73      	ldr	r3, [pc, #460]	@ (8008810 <HAL_RCC_GetSysClockFreq+0x208>)
 8008644:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008646:	e0d8      	b.n	80087fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008648:	4b6f      	ldr	r3, [pc, #444]	@ (8008808 <HAL_RCC_GetSysClockFreq+0x200>)
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008650:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008652:	4b6d      	ldr	r3, [pc, #436]	@ (8008808 <HAL_RCC_GetSysClockFreq+0x200>)
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d063      	beq.n	8008726 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800865e:	4b6a      	ldr	r3, [pc, #424]	@ (8008808 <HAL_RCC_GetSysClockFreq+0x200>)
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	099b      	lsrs	r3, r3, #6
 8008664:	2200      	movs	r2, #0
 8008666:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008668:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800866a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008670:	633b      	str	r3, [r7, #48]	@ 0x30
 8008672:	2300      	movs	r3, #0
 8008674:	637b      	str	r3, [r7, #52]	@ 0x34
 8008676:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800867a:	4622      	mov	r2, r4
 800867c:	462b      	mov	r3, r5
 800867e:	f04f 0000 	mov.w	r0, #0
 8008682:	f04f 0100 	mov.w	r1, #0
 8008686:	0159      	lsls	r1, r3, #5
 8008688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800868c:	0150      	lsls	r0, r2, #5
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4621      	mov	r1, r4
 8008694:	1a51      	subs	r1, r2, r1
 8008696:	6139      	str	r1, [r7, #16]
 8008698:	4629      	mov	r1, r5
 800869a:	eb63 0301 	sbc.w	r3, r3, r1
 800869e:	617b      	str	r3, [r7, #20]
 80086a0:	f04f 0200 	mov.w	r2, #0
 80086a4:	f04f 0300 	mov.w	r3, #0
 80086a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086ac:	4659      	mov	r1, fp
 80086ae:	018b      	lsls	r3, r1, #6
 80086b0:	4651      	mov	r1, sl
 80086b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80086b6:	4651      	mov	r1, sl
 80086b8:	018a      	lsls	r2, r1, #6
 80086ba:	4651      	mov	r1, sl
 80086bc:	ebb2 0801 	subs.w	r8, r2, r1
 80086c0:	4659      	mov	r1, fp
 80086c2:	eb63 0901 	sbc.w	r9, r3, r1
 80086c6:	f04f 0200 	mov.w	r2, #0
 80086ca:	f04f 0300 	mov.w	r3, #0
 80086ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086da:	4690      	mov	r8, r2
 80086dc:	4699      	mov	r9, r3
 80086de:	4623      	mov	r3, r4
 80086e0:	eb18 0303 	adds.w	r3, r8, r3
 80086e4:	60bb      	str	r3, [r7, #8]
 80086e6:	462b      	mov	r3, r5
 80086e8:	eb49 0303 	adc.w	r3, r9, r3
 80086ec:	60fb      	str	r3, [r7, #12]
 80086ee:	f04f 0200 	mov.w	r2, #0
 80086f2:	f04f 0300 	mov.w	r3, #0
 80086f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80086fa:	4629      	mov	r1, r5
 80086fc:	024b      	lsls	r3, r1, #9
 80086fe:	4621      	mov	r1, r4
 8008700:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008704:	4621      	mov	r1, r4
 8008706:	024a      	lsls	r2, r1, #9
 8008708:	4610      	mov	r0, r2
 800870a:	4619      	mov	r1, r3
 800870c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800870e:	2200      	movs	r2, #0
 8008710:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008718:	f7f8 fad6 	bl	8000cc8 <__aeabi_uldivmod>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4613      	mov	r3, r2
 8008722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008724:	e058      	b.n	80087d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008726:	4b38      	ldr	r3, [pc, #224]	@ (8008808 <HAL_RCC_GetSysClockFreq+0x200>)
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	099b      	lsrs	r3, r3, #6
 800872c:	2200      	movs	r2, #0
 800872e:	4618      	mov	r0, r3
 8008730:	4611      	mov	r1, r2
 8008732:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008736:	623b      	str	r3, [r7, #32]
 8008738:	2300      	movs	r3, #0
 800873a:	627b      	str	r3, [r7, #36]	@ 0x24
 800873c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008740:	4642      	mov	r2, r8
 8008742:	464b      	mov	r3, r9
 8008744:	f04f 0000 	mov.w	r0, #0
 8008748:	f04f 0100 	mov.w	r1, #0
 800874c:	0159      	lsls	r1, r3, #5
 800874e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008752:	0150      	lsls	r0, r2, #5
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4641      	mov	r1, r8
 800875a:	ebb2 0a01 	subs.w	sl, r2, r1
 800875e:	4649      	mov	r1, r9
 8008760:	eb63 0b01 	sbc.w	fp, r3, r1
 8008764:	f04f 0200 	mov.w	r2, #0
 8008768:	f04f 0300 	mov.w	r3, #0
 800876c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008770:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008774:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008778:	ebb2 040a 	subs.w	r4, r2, sl
 800877c:	eb63 050b 	sbc.w	r5, r3, fp
 8008780:	f04f 0200 	mov.w	r2, #0
 8008784:	f04f 0300 	mov.w	r3, #0
 8008788:	00eb      	lsls	r3, r5, #3
 800878a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800878e:	00e2      	lsls	r2, r4, #3
 8008790:	4614      	mov	r4, r2
 8008792:	461d      	mov	r5, r3
 8008794:	4643      	mov	r3, r8
 8008796:	18e3      	adds	r3, r4, r3
 8008798:	603b      	str	r3, [r7, #0]
 800879a:	464b      	mov	r3, r9
 800879c:	eb45 0303 	adc.w	r3, r5, r3
 80087a0:	607b      	str	r3, [r7, #4]
 80087a2:	f04f 0200 	mov.w	r2, #0
 80087a6:	f04f 0300 	mov.w	r3, #0
 80087aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80087ae:	4629      	mov	r1, r5
 80087b0:	028b      	lsls	r3, r1, #10
 80087b2:	4621      	mov	r1, r4
 80087b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087b8:	4621      	mov	r1, r4
 80087ba:	028a      	lsls	r2, r1, #10
 80087bc:	4610      	mov	r0, r2
 80087be:	4619      	mov	r1, r3
 80087c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087c2:	2200      	movs	r2, #0
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	61fa      	str	r2, [r7, #28]
 80087c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087cc:	f7f8 fa7c 	bl	8000cc8 <__aeabi_uldivmod>
 80087d0:	4602      	mov	r2, r0
 80087d2:	460b      	mov	r3, r1
 80087d4:	4613      	mov	r3, r2
 80087d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80087d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008808 <HAL_RCC_GetSysClockFreq+0x200>)
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	0c1b      	lsrs	r3, r3, #16
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	3301      	adds	r3, #1
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80087e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80087ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087f2:	e002      	b.n	80087fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087f4:	4b05      	ldr	r3, [pc, #20]	@ (800880c <HAL_RCC_GetSysClockFreq+0x204>)
 80087f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80087f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3750      	adds	r7, #80	@ 0x50
 8008800:	46bd      	mov	sp, r7
 8008802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008806:	bf00      	nop
 8008808:	40023800 	.word	0x40023800
 800880c:	00f42400 	.word	0x00f42400
 8008810:	007a1200 	.word	0x007a1200

08008814 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008814:	b480      	push	{r7}
 8008816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008818:	4b03      	ldr	r3, [pc, #12]	@ (8008828 <HAL_RCC_GetHCLKFreq+0x14>)
 800881a:	681b      	ldr	r3, [r3, #0]
}
 800881c:	4618      	mov	r0, r3
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	20000000 	.word	0x20000000

0800882c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008830:	f7ff fff0 	bl	8008814 <HAL_RCC_GetHCLKFreq>
 8008834:	4602      	mov	r2, r0
 8008836:	4b05      	ldr	r3, [pc, #20]	@ (800884c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	0a9b      	lsrs	r3, r3, #10
 800883c:	f003 0307 	and.w	r3, r3, #7
 8008840:	4903      	ldr	r1, [pc, #12]	@ (8008850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008842:	5ccb      	ldrb	r3, [r1, r3]
 8008844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008848:	4618      	mov	r0, r3
 800884a:	bd80      	pop	{r7, pc}
 800884c:	40023800 	.word	0x40023800
 8008850:	08013184 	.word	0x08013184

08008854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008858:	f7ff ffdc 	bl	8008814 <HAL_RCC_GetHCLKFreq>
 800885c:	4602      	mov	r2, r0
 800885e:	4b05      	ldr	r3, [pc, #20]	@ (8008874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	0b5b      	lsrs	r3, r3, #13
 8008864:	f003 0307 	and.w	r3, r3, #7
 8008868:	4903      	ldr	r1, [pc, #12]	@ (8008878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800886a:	5ccb      	ldrb	r3, [r1, r3]
 800886c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008870:	4618      	mov	r0, r3
 8008872:	bd80      	pop	{r7, pc}
 8008874:	40023800 	.word	0x40023800
 8008878:	08013184 	.word	0x08013184

0800887c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008888:	2300      	movs	r3, #0
 800888a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008894:	2300      	movs	r3, #0
 8008896:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d012      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80088a4:	4b69      	ldr	r3, [pc, #420]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	4a68      	ldr	r2, [pc, #416]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80088ae:	6093      	str	r3, [r2, #8]
 80088b0:	4b66      	ldr	r3, [pc, #408]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b8:	4964      	ldr	r1, [pc, #400]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80088c6:	2301      	movs	r3, #1
 80088c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d017      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088d6:	4b5d      	ldr	r3, [pc, #372]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e4:	4959      	ldr	r1, [pc, #356]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088f4:	d101      	bne.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80088f6:	2301      	movs	r3, #1
 80088f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008902:	2301      	movs	r3, #1
 8008904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d017      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008912:	4b4e      	ldr	r3, [pc, #312]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008914:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008918:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008920:	494a      	ldr	r1, [pc, #296]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008922:	4313      	orrs	r3, r2
 8008924:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008930:	d101      	bne.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008932:	2301      	movs	r3, #1
 8008934:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800893e:	2301      	movs	r3, #1
 8008940:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800894e:	2301      	movs	r3, #1
 8008950:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0320 	and.w	r3, r3, #32
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 808b 	beq.w	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008960:	4b3a      	ldr	r3, [pc, #232]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008964:	4a39      	ldr	r2, [pc, #228]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800896a:	6413      	str	r3, [r2, #64]	@ 0x40
 800896c:	4b37      	ldr	r3, [pc, #220]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800896e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008974:	60bb      	str	r3, [r7, #8]
 8008976:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008978:	4b35      	ldr	r3, [pc, #212]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a34      	ldr	r2, [pc, #208]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800897e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008984:	f7fe fefc 	bl	8007780 <HAL_GetTick>
 8008988:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800898a:	e008      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800898c:	f7fe fef8 	bl	8007780 <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b64      	cmp	r3, #100	@ 0x64
 8008998:	d901      	bls.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e357      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800899e:	4b2c      	ldr	r3, [pc, #176]	@ (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0f0      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80089aa:	4b28      	ldr	r3, [pc, #160]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d035      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d02e      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80089c8:	4b20      	ldr	r3, [pc, #128]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80089d2:	4b1e      	ldr	r3, [pc, #120]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d6:	4a1d      	ldr	r2, [pc, #116]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089dc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80089de:	4b1b      	ldr	r3, [pc, #108]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e2:	4a1a      	ldr	r2, [pc, #104]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80089ea:	4a18      	ldr	r2, [pc, #96]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80089f0:	4b16      	ldr	r3, [pc, #88]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d114      	bne.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089fc:	f7fe fec0 	bl	8007780 <HAL_GetTick>
 8008a00:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a02:	e00a      	b.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a04:	f7fe febc 	bl	8007780 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d901      	bls.n	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e319      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d0ee      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a32:	d111      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008a34:	4b05      	ldr	r3, [pc, #20]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008a40:	4b04      	ldr	r3, [pc, #16]	@ (8008a54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008a42:	400b      	ands	r3, r1
 8008a44:	4901      	ldr	r1, [pc, #4]	@ (8008a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	608b      	str	r3, [r1, #8]
 8008a4a:	e00b      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008a4c:	40023800 	.word	0x40023800
 8008a50:	40007000 	.word	0x40007000
 8008a54:	0ffffcff 	.word	0x0ffffcff
 8008a58:	4baa      	ldr	r3, [pc, #680]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	4aa9      	ldr	r2, [pc, #676]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a5e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008a62:	6093      	str	r3, [r2, #8]
 8008a64:	4ba7      	ldr	r3, [pc, #668]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a70:	49a4      	ldr	r1, [pc, #656]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0310 	and.w	r3, r3, #16
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d010      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008a82:	4ba0      	ldr	r3, [pc, #640]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a88:	4a9e      	ldr	r2, [pc, #632]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008a92:	4b9c      	ldr	r3, [pc, #624]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a94:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9c:	4999      	ldr	r1, [pc, #612]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ab0:	4b94      	ldr	r3, [pc, #592]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ab6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008abe:	4991      	ldr	r1, [pc, #580]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ad2:	4b8c      	ldr	r3, [pc, #560]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ad8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ae0:	4988      	ldr	r1, [pc, #544]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00a      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008af4:	4b83      	ldr	r3, [pc, #524]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008afa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b02:	4980      	ldr	r1, [pc, #512]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00a      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b16:	4b7b      	ldr	r3, [pc, #492]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b1c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b24:	4977      	ldr	r1, [pc, #476]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00a      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b38:	4b72      	ldr	r3, [pc, #456]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b3e:	f023 0203 	bic.w	r2, r3, #3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b46:	496f      	ldr	r1, [pc, #444]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b60:	f023 020c 	bic.w	r2, r3, #12
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b68:	4966      	ldr	r1, [pc, #408]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00a      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008b7c:	4b61      	ldr	r3, [pc, #388]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b82:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b8a:	495e      	ldr	r1, [pc, #376]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00a      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008b9e:	4b59      	ldr	r3, [pc, #356]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ba4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bac:	4955      	ldr	r1, [pc, #340]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00a      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008bc0:	4b50      	ldr	r3, [pc, #320]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bc6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bce:	494d      	ldr	r1, [pc, #308]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00a      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008be2:	4b48      	ldr	r3, [pc, #288]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bf0:	4944      	ldr	r1, [pc, #272]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00a      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008c04:	4b3f      	ldr	r3, [pc, #252]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c0a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c12:	493c      	ldr	r1, [pc, #240]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008c26:	4b37      	ldr	r3, [pc, #220]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c2c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c34:	4933      	ldr	r1, [pc, #204]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c36:	4313      	orrs	r3, r2
 8008c38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00a      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c48:	4b2e      	ldr	r3, [pc, #184]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c56:	492b      	ldr	r1, [pc, #172]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d011      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008c6a:	4b26      	ldr	r3, [pc, #152]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c70:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c78:	4922      	ldr	r1, [pc, #136]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c88:	d101      	bne.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008caa:	4b16      	ldr	r3, [pc, #88]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cb0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cb8:	4912      	ldr	r1, [pc, #72]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00b      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cd2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cdc:	4909      	ldr	r1, [pc, #36]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d006      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 80d9 	beq.w	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008cf8:	4b02      	ldr	r3, [pc, #8]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a01      	ldr	r2, [pc, #4]	@ (8008d04 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008cfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d02:	e001      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008d04:	40023800 	.word	0x40023800
 8008d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d0a:	f7fe fd39 	bl	8007780 <HAL_GetTick>
 8008d0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d10:	e008      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008d12:	f7fe fd35 	bl	8007780 <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	2b64      	cmp	r3, #100	@ 0x64
 8008d1e:	d901      	bls.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e194      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d24:	4b6c      	ldr	r3, [pc, #432]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1f0      	bne.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d021      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d11d      	bne.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008d44:	4b64      	ldr	r3, [pc, #400]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d4a:	0c1b      	lsrs	r3, r3, #16
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008d52:	4b61      	ldr	r3, [pc, #388]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d58:	0e1b      	lsrs	r3, r3, #24
 8008d5a:	f003 030f 	and.w	r3, r3, #15
 8008d5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	019a      	lsls	r2, r3, #6
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	041b      	lsls	r3, r3, #16
 8008d6a:	431a      	orrs	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	061b      	lsls	r3, r3, #24
 8008d70:	431a      	orrs	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	071b      	lsls	r3, r3, #28
 8008d78:	4957      	ldr	r1, [pc, #348]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d004      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d94:	d00a      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d02e      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008daa:	d129      	bne.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008dac:	4b4a      	ldr	r3, [pc, #296]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008db2:	0c1b      	lsrs	r3, r3, #16
 8008db4:	f003 0303 	and.w	r3, r3, #3
 8008db8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008dba:	4b47      	ldr	r3, [pc, #284]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dc0:	0f1b      	lsrs	r3, r3, #28
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	019a      	lsls	r2, r3, #6
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	041b      	lsls	r3, r3, #16
 8008dd2:	431a      	orrs	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	061b      	lsls	r3, r3, #24
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	071b      	lsls	r3, r3, #28
 8008de0:	493d      	ldr	r1, [pc, #244]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008de8:	4b3b      	ldr	r3, [pc, #236]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dee:	f023 021f 	bic.w	r2, r3, #31
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df6:	3b01      	subs	r3, #1
 8008df8:	4937      	ldr	r1, [pc, #220]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01d      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008e0c:	4b32      	ldr	r3, [pc, #200]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e12:	0e1b      	lsrs	r3, r3, #24
 8008e14:	f003 030f 	and.w	r3, r3, #15
 8008e18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e20:	0f1b      	lsrs	r3, r3, #28
 8008e22:	f003 0307 	and.w	r3, r3, #7
 8008e26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	019a      	lsls	r2, r3, #6
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	041b      	lsls	r3, r3, #16
 8008e34:	431a      	orrs	r2, r3
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	061b      	lsls	r3, r3, #24
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	071b      	lsls	r3, r3, #28
 8008e40:	4925      	ldr	r1, [pc, #148]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d011      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	019a      	lsls	r2, r3, #6
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	041b      	lsls	r3, r3, #16
 8008e60:	431a      	orrs	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	061b      	lsls	r3, r3, #24
 8008e68:	431a      	orrs	r2, r3
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	071b      	lsls	r3, r3, #28
 8008e70:	4919      	ldr	r1, [pc, #100]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008e78:	4b17      	ldr	r3, [pc, #92]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a16      	ldr	r2, [pc, #88]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008e82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e84:	f7fe fc7c 	bl	8007780 <HAL_GetTick>
 8008e88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e8a:	e008      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008e8c:	f7fe fc78 	bl	8007780 <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	2b64      	cmp	r3, #100	@ 0x64
 8008e98:	d901      	bls.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e0d7      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d0f0      	beq.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	f040 80cd 	bne.w	800904c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008eb2:	4b09      	ldr	r3, [pc, #36]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a08      	ldr	r2, [pc, #32]	@ (8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008eb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ebe:	f7fe fc5f 	bl	8007780 <HAL_GetTick>
 8008ec2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008ec4:	e00a      	b.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008ec6:	f7fe fc5b 	bl	8007780 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b64      	cmp	r3, #100	@ 0x64
 8008ed2:	d903      	bls.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e0ba      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008ed8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008edc:	4b5e      	ldr	r3, [pc, #376]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ee8:	d0ed      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d009      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d02e      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d12a      	bne.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008f12:	4b51      	ldr	r3, [pc, #324]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f18:	0c1b      	lsrs	r3, r3, #16
 8008f1a:	f003 0303 	and.w	r3, r3, #3
 8008f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008f20:	4b4d      	ldr	r3, [pc, #308]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f26:	0f1b      	lsrs	r3, r3, #28
 8008f28:	f003 0307 	and.w	r3, r3, #7
 8008f2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	019a      	lsls	r2, r3, #6
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	041b      	lsls	r3, r3, #16
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	061b      	lsls	r3, r3, #24
 8008f40:	431a      	orrs	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	071b      	lsls	r3, r3, #28
 8008f46:	4944      	ldr	r1, [pc, #272]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008f4e:	4b42      	ldr	r3, [pc, #264]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f54:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	021b      	lsls	r3, r3, #8
 8008f60:	493d      	ldr	r1, [pc, #244]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d022      	beq.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f7c:	d11d      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008f7e:	4b36      	ldr	r3, [pc, #216]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f84:	0e1b      	lsrs	r3, r3, #24
 8008f86:	f003 030f 	and.w	r3, r3, #15
 8008f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008f8c:	4b32      	ldr	r3, [pc, #200]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f92:	0f1b      	lsrs	r3, r3, #28
 8008f94:	f003 0307 	and.w	r3, r3, #7
 8008f98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	019a      	lsls	r2, r3, #6
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a1b      	ldr	r3, [r3, #32]
 8008fa4:	041b      	lsls	r3, r3, #16
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	061b      	lsls	r3, r3, #24
 8008fac:	431a      	orrs	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	071b      	lsls	r3, r3, #28
 8008fb2:	4929      	ldr	r1, [pc, #164]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0308 	and.w	r3, r3, #8
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d028      	beq.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008fc6:	4b24      	ldr	r3, [pc, #144]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fcc:	0e1b      	lsrs	r3, r3, #24
 8008fce:	f003 030f 	and.w	r3, r3, #15
 8008fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008fd4:	4b20      	ldr	r3, [pc, #128]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fda:	0c1b      	lsrs	r3, r3, #16
 8008fdc:	f003 0303 	and.w	r3, r3, #3
 8008fe0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	019a      	lsls	r2, r3, #6
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	041b      	lsls	r3, r3, #16
 8008fec:	431a      	orrs	r2, r3
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	061b      	lsls	r3, r3, #24
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	071b      	lsls	r3, r3, #28
 8008ffa:	4917      	ldr	r1, [pc, #92]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009002:	4b15      	ldr	r3, [pc, #84]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009008:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009010:	4911      	ldr	r1, [pc, #68]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009012:	4313      	orrs	r3, r2
 8009014:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009018:	4b0f      	ldr	r3, [pc, #60]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a0e      	ldr	r2, [pc, #56]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800901e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009024:	f7fe fbac 	bl	8007780 <HAL_GetTick>
 8009028:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800902a:	e008      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800902c:	f7fe fba8 	bl	8007780 <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b64      	cmp	r3, #100	@ 0x64
 8009038:	d901      	bls.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e007      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800903e:	4b06      	ldr	r3, [pc, #24]	@ (8009058 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800904a:	d1ef      	bne.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3720      	adds	r7, #32
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	40023800 	.word	0x40023800

0800905c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e09d      	b.n	80091aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009072:	2b00      	cmp	r3, #0
 8009074:	d108      	bne.n	8009088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800907e:	d009      	beq.n	8009094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	61da      	str	r2, [r3, #28]
 8009086:	e005      	b.n	8009094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fe f8e6 	bl	8007280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090d4:	d902      	bls.n	80090dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	e002      	b.n	80090e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80090dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80090e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80090ea:	d007      	beq.n	80090fc <HAL_SPI_Init+0xa0>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090f4:	d002      	beq.n	80090fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800910c:	431a      	orrs	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	431a      	orrs	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	431a      	orrs	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	699b      	ldr	r3, [r3, #24]
 8009126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800912a:	431a      	orrs	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009134:	431a      	orrs	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800913e:	ea42 0103 	orr.w	r1, r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009146:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	430a      	orrs	r2, r1
 8009150:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	0c1b      	lsrs	r3, r3, #16
 8009158:	f003 0204 	and.w	r2, r3, #4
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009160:	f003 0310 	and.w	r3, r3, #16
 8009164:	431a      	orrs	r2, r3
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800916a:	f003 0308 	and.w	r3, r3, #8
 800916e:	431a      	orrs	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009178:	ea42 0103 	orr.w	r1, r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	430a      	orrs	r2, r1
 8009188:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	69da      	ldr	r2, [r3, #28]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009198:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b088      	sub	sp, #32
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	603b      	str	r3, [r7, #0]
 80091be:	4613      	mov	r3, r2
 80091c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d101      	bne.n	80091d4 <HAL_SPI_Transmit+0x22>
 80091d0:	2302      	movs	r3, #2
 80091d2:	e158      	b.n	8009486 <HAL_SPI_Transmit+0x2d4>
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091dc:	f7fe fad0 	bl	8007780 <HAL_GetTick>
 80091e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80091e2:	88fb      	ldrh	r3, [r7, #6]
 80091e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d002      	beq.n	80091f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80091f2:	2302      	movs	r3, #2
 80091f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80091f6:	e13d      	b.n	8009474 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d002      	beq.n	8009204 <HAL_SPI_Transmit+0x52>
 80091fe:	88fb      	ldrh	r3, [r7, #6]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d102      	bne.n	800920a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009208:	e134      	b.n	8009474 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2203      	movs	r2, #3
 800920e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	88fa      	ldrh	r2, [r7, #6]
 8009222:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	88fa      	ldrh	r2, [r7, #6]
 8009228:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2200      	movs	r2, #0
 800923c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009254:	d10f      	bne.n	8009276 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009280:	2b40      	cmp	r3, #64	@ 0x40
 8009282:	d007      	beq.n	8009294 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800929c:	d94b      	bls.n	8009336 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d002      	beq.n	80092ac <HAL_SPI_Transmit+0xfa>
 80092a6:	8afb      	ldrh	r3, [r7, #22]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d13e      	bne.n	800932a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b0:	881a      	ldrh	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092bc:	1c9a      	adds	r2, r3, #2
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80092d0:	e02b      	b.n	800932a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d112      	bne.n	8009306 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e4:	881a      	ldrh	r2, [r3, #0]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092f0:	1c9a      	adds	r2, r3, #2
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	3b01      	subs	r3, #1
 80092fe:	b29a      	uxth	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009304:	e011      	b.n	800932a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009306:	f7fe fa3b 	bl	8007780 <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	429a      	cmp	r2, r3
 8009314:	d803      	bhi.n	800931e <HAL_SPI_Transmit+0x16c>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931c:	d102      	bne.n	8009324 <HAL_SPI_Transmit+0x172>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d102      	bne.n	800932a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009328:	e0a4      	b.n	8009474 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800932e:	b29b      	uxth	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1ce      	bne.n	80092d2 <HAL_SPI_Transmit+0x120>
 8009334:	e07c      	b.n	8009430 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <HAL_SPI_Transmit+0x192>
 800933e:	8afb      	ldrh	r3, [r7, #22]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d170      	bne.n	8009426 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009348:	b29b      	uxth	r3, r3
 800934a:	2b01      	cmp	r3, #1
 800934c:	d912      	bls.n	8009374 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009352:	881a      	ldrh	r2, [r3, #0]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935e:	1c9a      	adds	r2, r3, #2
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009368:	b29b      	uxth	r3, r3
 800936a:	3b02      	subs	r3, #2
 800936c:	b29a      	uxth	r2, r3
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009372:	e058      	b.n	8009426 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	330c      	adds	r3, #12
 800937e:	7812      	ldrb	r2, [r2, #0]
 8009380:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009390:	b29b      	uxth	r3, r3
 8009392:	3b01      	subs	r3, #1
 8009394:	b29a      	uxth	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800939a:	e044      	b.n	8009426 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	d12b      	bne.n	8009402 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d912      	bls.n	80093da <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b8:	881a      	ldrh	r2, [r3, #0]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c4:	1c9a      	adds	r2, r3, #2
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	3b02      	subs	r3, #2
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80093d8:	e025      	b.n	8009426 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	330c      	adds	r3, #12
 80093e4:	7812      	ldrb	r2, [r2, #0]
 80093e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	3b01      	subs	r3, #1
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009400:	e011      	b.n	8009426 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009402:	f7fe f9bd 	bl	8007780 <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d803      	bhi.n	800941a <HAL_SPI_Transmit+0x268>
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009418:	d102      	bne.n	8009420 <HAL_SPI_Transmit+0x26e>
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d102      	bne.n	8009426 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009424:	e026      	b.n	8009474 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800942a:	b29b      	uxth	r3, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1b5      	bne.n	800939c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009430:	69ba      	ldr	r2, [r7, #24]
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 fb5b 	bl	8009af0 <SPI_EndRxTxTransaction>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2220      	movs	r2, #32
 8009444:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10a      	bne.n	8009464 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800944e:	2300      	movs	r3, #0
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	613b      	str	r3, [r7, #16]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	613b      	str	r3, [r7, #16]
 8009462:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009468:	2b00      	cmp	r3, #0
 800946a:	d002      	beq.n	8009472 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	77fb      	strb	r3, [r7, #31]
 8009470:	e000      	b.n	8009474 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009472:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009484:	7ffb      	ldrb	r3, [r7, #31]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3720      	adds	r7, #32
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}

0800948e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800948e:	b580      	push	{r7, lr}
 8009490:	b08a      	sub	sp, #40	@ 0x28
 8009492:	af00      	add	r7, sp, #0
 8009494:	60f8      	str	r0, [r7, #12]
 8009496:	60b9      	str	r1, [r7, #8]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800949c:	2301      	movs	r3, #1
 800949e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d101      	bne.n	80094b4 <HAL_SPI_TransmitReceive+0x26>
 80094b0:	2302      	movs	r3, #2
 80094b2:	e1fb      	b.n	80098ac <HAL_SPI_TransmitReceive+0x41e>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094bc:	f7fe f960 	bl	8007780 <HAL_GetTick>
 80094c0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80094c8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80094d0:	887b      	ldrh	r3, [r7, #2]
 80094d2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80094d4:	887b      	ldrh	r3, [r7, #2]
 80094d6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80094d8:	7efb      	ldrb	r3, [r7, #27]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d00e      	beq.n	80094fc <HAL_SPI_TransmitReceive+0x6e>
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094e4:	d106      	bne.n	80094f4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d102      	bne.n	80094f4 <HAL_SPI_TransmitReceive+0x66>
 80094ee:	7efb      	ldrb	r3, [r7, #27]
 80094f0:	2b04      	cmp	r3, #4
 80094f2:	d003      	beq.n	80094fc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80094f4:	2302      	movs	r3, #2
 80094f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80094fa:	e1cd      	b.n	8009898 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <HAL_SPI_TransmitReceive+0x80>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <HAL_SPI_TransmitReceive+0x80>
 8009508:	887b      	ldrh	r3, [r7, #2]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d103      	bne.n	8009516 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009514:	e1c0      	b.n	8009898 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b04      	cmp	r3, #4
 8009520:	d003      	beq.n	800952a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2205      	movs	r2, #5
 8009526:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	887a      	ldrh	r2, [r7, #2]
 800953a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	887a      	ldrh	r2, [r7, #2]
 8009542:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	887a      	ldrh	r2, [r7, #2]
 8009550:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	887a      	ldrh	r2, [r7, #2]
 8009556:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800956c:	d802      	bhi.n	8009574 <HAL_SPI_TransmitReceive+0xe6>
 800956e:	8a3b      	ldrh	r3, [r7, #16]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d908      	bls.n	8009586 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009582:	605a      	str	r2, [r3, #4]
 8009584:	e007      	b.n	8009596 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009594:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095a0:	2b40      	cmp	r3, #64	@ 0x40
 80095a2:	d007      	beq.n	80095b4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095bc:	d97c      	bls.n	80096b8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d002      	beq.n	80095cc <HAL_SPI_TransmitReceive+0x13e>
 80095c6:	8a7b      	ldrh	r3, [r7, #18]
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d169      	bne.n	80096a0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d0:	881a      	ldrh	r2, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095dc:	1c9a      	adds	r2, r3, #2
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	3b01      	subs	r3, #1
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095f0:	e056      	b.n	80096a0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d11b      	bne.n	8009638 <HAL_SPI_TransmitReceive+0x1aa>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009604:	b29b      	uxth	r3, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	d016      	beq.n	8009638 <HAL_SPI_TransmitReceive+0x1aa>
 800960a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960c:	2b01      	cmp	r3, #1
 800960e:	d113      	bne.n	8009638 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009614:	881a      	ldrh	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009620:	1c9a      	adds	r2, r3, #2
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800962a:	b29b      	uxth	r3, r3
 800962c:	3b01      	subs	r3, #1
 800962e:	b29a      	uxth	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b01      	cmp	r3, #1
 8009644:	d11c      	bne.n	8009680 <HAL_SPI_TransmitReceive+0x1f2>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800964c:	b29b      	uxth	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d016      	beq.n	8009680 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68da      	ldr	r2, [r3, #12]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800965c:	b292      	uxth	r2, r2
 800965e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009664:	1c9a      	adds	r2, r3, #2
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009670:	b29b      	uxth	r3, r3
 8009672:	3b01      	subs	r3, #1
 8009674:	b29a      	uxth	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800967c:	2301      	movs	r3, #1
 800967e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009680:	f7fe f87e 	bl	8007780 <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800968c:	429a      	cmp	r2, r3
 800968e:	d807      	bhi.n	80096a0 <HAL_SPI_TransmitReceive+0x212>
 8009690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009696:	d003      	beq.n	80096a0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009698:	2303      	movs	r3, #3
 800969a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800969e:	e0fb      	b.n	8009898 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1a3      	bne.n	80095f2 <HAL_SPI_TransmitReceive+0x164>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d19d      	bne.n	80095f2 <HAL_SPI_TransmitReceive+0x164>
 80096b6:	e0df      	b.n	8009878 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d003      	beq.n	80096c8 <HAL_SPI_TransmitReceive+0x23a>
 80096c0:	8a7b      	ldrh	r3, [r7, #18]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	f040 80cb 	bne.w	800985e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d912      	bls.n	80096f8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d6:	881a      	ldrh	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e2:	1c9a      	adds	r2, r3, #2
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	3b02      	subs	r3, #2
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80096f6:	e0b2      	b.n	800985e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	330c      	adds	r3, #12
 8009702:	7812      	ldrb	r2, [r2, #0]
 8009704:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009714:	b29b      	uxth	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800971e:	e09e      	b.n	800985e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b02      	cmp	r3, #2
 800972c:	d134      	bne.n	8009798 <HAL_SPI_TransmitReceive+0x30a>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009732:	b29b      	uxth	r3, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	d02f      	beq.n	8009798 <HAL_SPI_TransmitReceive+0x30a>
 8009738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973a:	2b01      	cmp	r3, #1
 800973c:	d12c      	bne.n	8009798 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009742:	b29b      	uxth	r3, r3
 8009744:	2b01      	cmp	r3, #1
 8009746:	d912      	bls.n	800976e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974c:	881a      	ldrh	r2, [r3, #0]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009758:	1c9a      	adds	r2, r3, #2
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009762:	b29b      	uxth	r3, r3
 8009764:	3b02      	subs	r3, #2
 8009766:	b29a      	uxth	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800976c:	e012      	b.n	8009794 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	330c      	adds	r3, #12
 8009778:	7812      	ldrb	r2, [r2, #0]
 800977a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800978a:	b29b      	uxth	r3, r3
 800978c:	3b01      	subs	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009794:	2300      	movs	r3, #0
 8009796:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d148      	bne.n	8009838 <HAL_SPI_TransmitReceive+0x3aa>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d042      	beq.n	8009838 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d923      	bls.n	8009806 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097c8:	b292      	uxth	r2, r2
 80097ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d0:	1c9a      	adds	r2, r3, #2
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80097dc:	b29b      	uxth	r3, r3
 80097de:	3b02      	subs	r3, #2
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d81f      	bhi.n	8009834 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685a      	ldr	r2, [r3, #4]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009802:	605a      	str	r2, [r3, #4]
 8009804:	e016      	b.n	8009834 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f103 020c 	add.w	r2, r3, #12
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009812:	7812      	ldrb	r2, [r2, #0]
 8009814:	b2d2      	uxtb	r2, r2
 8009816:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800981c:	1c5a      	adds	r2, r3, #1
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009828:	b29b      	uxth	r3, r3
 800982a:	3b01      	subs	r3, #1
 800982c:	b29a      	uxth	r2, r3
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009834:	2301      	movs	r3, #1
 8009836:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009838:	f7fd ffa2 	bl	8007780 <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009844:	429a      	cmp	r2, r3
 8009846:	d803      	bhi.n	8009850 <HAL_SPI_TransmitReceive+0x3c2>
 8009848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984e:	d102      	bne.n	8009856 <HAL_SPI_TransmitReceive+0x3c8>
 8009850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009852:	2b00      	cmp	r3, #0
 8009854:	d103      	bne.n	800985e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009856:	2303      	movs	r3, #3
 8009858:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800985c:	e01c      	b.n	8009898 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009862:	b29b      	uxth	r3, r3
 8009864:	2b00      	cmp	r3, #0
 8009866:	f47f af5b 	bne.w	8009720 <HAL_SPI_TransmitReceive+0x292>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009870:	b29b      	uxth	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	f47f af54 	bne.w	8009720 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009878:	69fa      	ldr	r2, [r7, #28]
 800987a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f000 f937 	bl	8009af0 <SPI_EndRxTxTransaction>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d006      	beq.n	8009896 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2220      	movs	r2, #32
 8009892:	661a      	str	r2, [r3, #96]	@ 0x60
 8009894:	e000      	b.n	8009898 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009896:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2201      	movs	r2, #1
 800989c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80098a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3728      	adds	r7, #40	@ 0x28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	603b      	str	r3, [r7, #0]
 80098c0:	4613      	mov	r3, r2
 80098c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80098c4:	f7fd ff5c 	bl	8007780 <HAL_GetTick>
 80098c8:	4602      	mov	r2, r0
 80098ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098cc:	1a9b      	subs	r3, r3, r2
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4413      	add	r3, r2
 80098d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80098d4:	f7fd ff54 	bl	8007780 <HAL_GetTick>
 80098d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80098da:	4b39      	ldr	r3, [pc, #228]	@ (80099c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	015b      	lsls	r3, r3, #5
 80098e0:	0d1b      	lsrs	r3, r3, #20
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	fb02 f303 	mul.w	r3, r2, r3
 80098e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098ea:	e054      	b.n	8009996 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f2:	d050      	beq.n	8009996 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098f4:	f7fd ff44 	bl	8007780 <HAL_GetTick>
 80098f8:	4602      	mov	r2, r0
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	1ad3      	subs	r3, r2, r3
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	429a      	cmp	r2, r3
 8009902:	d902      	bls.n	800990a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d13d      	bne.n	8009986 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009918:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009922:	d111      	bne.n	8009948 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800992c:	d004      	beq.n	8009938 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009936:	d107      	bne.n	8009948 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009946:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009950:	d10f      	bne.n	8009972 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009970:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e017      	b.n	80099b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d101      	bne.n	8009990 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800998c:	2300      	movs	r3, #0
 800998e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	3b01      	subs	r3, #1
 8009994:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	689a      	ldr	r2, [r3, #8]
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	4013      	ands	r3, r2
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	bf0c      	ite	eq
 80099a6:	2301      	moveq	r3, #1
 80099a8:	2300      	movne	r3, #0
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	461a      	mov	r2, r3
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d19b      	bne.n	80098ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3720      	adds	r7, #32
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20000000 	.word	0x20000000

080099c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	@ 0x28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80099d6:	f7fd fed3 	bl	8007780 <HAL_GetTick>
 80099da:	4602      	mov	r2, r0
 80099dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099de:	1a9b      	subs	r3, r3, r2
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	4413      	add	r3, r2
 80099e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80099e6:	f7fd fecb 	bl	8007780 <HAL_GetTick>
 80099ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	330c      	adds	r3, #12
 80099f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099f4:	4b3d      	ldr	r3, [pc, #244]	@ (8009aec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	00da      	lsls	r2, r3, #3
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	0d1b      	lsrs	r3, r3, #20
 8009a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a06:	fb02 f303 	mul.w	r3, r2, r3
 8009a0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009a0c:	e060      	b.n	8009ad0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009a14:	d107      	bne.n	8009a26 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d104      	bne.n	8009a26 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009a24:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2c:	d050      	beq.n	8009ad0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a2e:	f7fd fea7 	bl	8007780 <HAL_GetTick>
 8009a32:	4602      	mov	r2, r0
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d902      	bls.n	8009a44 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d13d      	bne.n	8009ac0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	685a      	ldr	r2, [r3, #4]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009a52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a5c:	d111      	bne.n	8009a82 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a66:	d004      	beq.n	8009a72 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a70:	d107      	bne.n	8009a82 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a8a:	d10f      	bne.n	8009aac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009aaa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e010      	b.n	8009ae2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689a      	ldr	r2, [r3, #8]
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	4013      	ands	r3, r2
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d196      	bne.n	8009a0e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3728      	adds	r7, #40	@ 0x28
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	20000000 	.word	0x20000000

08009af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af02      	add	r7, sp, #8
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f7ff ff5b 	bl	80099c4 <SPI_WaitFifoStateUntilTimeout>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d007      	beq.n	8009b24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b18:	f043 0220 	orr.w	r2, r3, #32
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e046      	b.n	8009bb2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b24:	4b25      	ldr	r3, [pc, #148]	@ (8009bbc <SPI_EndRxTxTransaction+0xcc>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a25      	ldr	r2, [pc, #148]	@ (8009bc0 <SPI_EndRxTxTransaction+0xd0>)
 8009b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b2e:	0d5b      	lsrs	r3, r3, #21
 8009b30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009b34:	fb02 f303 	mul.w	r3, r2, r3
 8009b38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b42:	d112      	bne.n	8009b6a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2180      	movs	r1, #128	@ 0x80
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f7ff feb0 	bl	80098b4 <SPI_WaitFlagStateUntilTimeout>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d016      	beq.n	8009b88 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b5e:	f043 0220 	orr.w	r2, r3, #32
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e023      	b.n	8009bb2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00a      	beq.n	8009b86 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	3b01      	subs	r3, #1
 8009b74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b80:	2b80      	cmp	r3, #128	@ 0x80
 8009b82:	d0f2      	beq.n	8009b6a <SPI_EndRxTxTransaction+0x7a>
 8009b84:	e000      	b.n	8009b88 <SPI_EndRxTxTransaction+0x98>
        break;
 8009b86:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009b94:	68f8      	ldr	r0, [r7, #12]
 8009b96:	f7ff ff15 	bl	80099c4 <SPI_WaitFifoStateUntilTimeout>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d007      	beq.n	8009bb0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ba4:	f043 0220 	orr.w	r2, r3, #32
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009bac:	2303      	movs	r3, #3
 8009bae:	e000      	b.n	8009bb2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000000 	.word	0x20000000
 8009bc0:	165e9f81 	.word	0x165e9f81

08009bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e049      	b.n	8009c6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d106      	bne.n	8009bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f7fd fc92 	bl	8007514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	3304      	adds	r3, #4
 8009c00:	4619      	mov	r1, r3
 8009c02:	4610      	mov	r0, r2
 8009c04:	f000 fa50 	bl	800a0a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b082      	sub	sp, #8
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d122      	bne.n	8009cce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	f003 0302 	and.w	r3, r3, #2
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d11b      	bne.n	8009cce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f06f 0202 	mvn.w	r2, #2
 8009c9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	f003 0303 	and.w	r3, r3, #3
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f9d9 	bl	800a06c <HAL_TIM_IC_CaptureCallback>
 8009cba:	e005      	b.n	8009cc8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f9cb 	bl	800a058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f9dc 	bl	800a080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	f003 0304 	and.w	r3, r3, #4
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	d122      	bne.n	8009d22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f003 0304 	and.w	r3, r3, #4
 8009ce6:	2b04      	cmp	r3, #4
 8009ce8:	d11b      	bne.n	8009d22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f06f 0204 	mvn.w	r2, #4
 8009cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d003      	beq.n	8009d10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f9af 	bl	800a06c <HAL_TIM_IC_CaptureCallback>
 8009d0e:	e005      	b.n	8009d1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f9a1 	bl	800a058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f9b2 	bl	800a080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	f003 0308 	and.w	r3, r3, #8
 8009d2c:	2b08      	cmp	r3, #8
 8009d2e:	d122      	bne.n	8009d76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	f003 0308 	and.w	r3, r3, #8
 8009d3a:	2b08      	cmp	r3, #8
 8009d3c:	d11b      	bne.n	8009d76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f06f 0208 	mvn.w	r2, #8
 8009d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2204      	movs	r2, #4
 8009d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	69db      	ldr	r3, [r3, #28]
 8009d54:	f003 0303 	and.w	r3, r3, #3
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f985 	bl	800a06c <HAL_TIM_IC_CaptureCallback>
 8009d62:	e005      	b.n	8009d70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f977 	bl	800a058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f988 	bl	800a080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	f003 0310 	and.w	r3, r3, #16
 8009d80:	2b10      	cmp	r3, #16
 8009d82:	d122      	bne.n	8009dca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	f003 0310 	and.w	r3, r3, #16
 8009d8e:	2b10      	cmp	r3, #16
 8009d90:	d11b      	bne.n	8009dca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f06f 0210 	mvn.w	r2, #16
 8009d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2208      	movs	r2, #8
 8009da0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	69db      	ldr	r3, [r3, #28]
 8009da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d003      	beq.n	8009db8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f95b 	bl	800a06c <HAL_TIM_IC_CaptureCallback>
 8009db6:	e005      	b.n	8009dc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f94d 	bl	800a058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f95e 	bl	800a080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d10e      	bne.n	8009df6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d107      	bne.n	8009df6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f06f 0201 	mvn.w	r2, #1
 8009dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f927 	bl	800a044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e00:	2b80      	cmp	r3, #128	@ 0x80
 8009e02:	d10e      	bne.n	8009e22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e0e:	2b80      	cmp	r3, #128	@ 0x80
 8009e10:	d107      	bne.n	8009e22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fb15 	bl	800a44c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e30:	d10e      	bne.n	8009e50 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e3c:	2b80      	cmp	r3, #128	@ 0x80
 8009e3e:	d107      	bne.n	8009e50 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fb08 	bl	800a460 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e5a:	2b40      	cmp	r3, #64	@ 0x40
 8009e5c:	d10e      	bne.n	8009e7c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e68:	2b40      	cmp	r3, #64	@ 0x40
 8009e6a:	d107      	bne.n	8009e7c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f90c 	bl	800a094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	f003 0320 	and.w	r3, r3, #32
 8009e86:	2b20      	cmp	r3, #32
 8009e88:	d10e      	bne.n	8009ea8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f003 0320 	and.w	r3, r3, #32
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	d107      	bne.n	8009ea8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f06f 0220 	mvn.w	r2, #32
 8009ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fac8 	bl	800a438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ea8:	bf00      	nop
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d101      	bne.n	8009ecc <HAL_TIM_ConfigClockSource+0x1c>
 8009ec8:	2302      	movs	r3, #2
 8009eca:	e0b4      	b.n	800a036 <HAL_TIM_ConfigClockSource+0x186>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	4b56      	ldr	r3, [pc, #344]	@ (800a040 <HAL_TIM_ConfigClockSource+0x190>)
 8009ee8:	4013      	ands	r3, r2
 8009eea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ef2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f04:	d03e      	beq.n	8009f84 <HAL_TIM_ConfigClockSource+0xd4>
 8009f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f0a:	f200 8087 	bhi.w	800a01c <HAL_TIM_ConfigClockSource+0x16c>
 8009f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f12:	f000 8086 	beq.w	800a022 <HAL_TIM_ConfigClockSource+0x172>
 8009f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f1a:	d87f      	bhi.n	800a01c <HAL_TIM_ConfigClockSource+0x16c>
 8009f1c:	2b70      	cmp	r3, #112	@ 0x70
 8009f1e:	d01a      	beq.n	8009f56 <HAL_TIM_ConfigClockSource+0xa6>
 8009f20:	2b70      	cmp	r3, #112	@ 0x70
 8009f22:	d87b      	bhi.n	800a01c <HAL_TIM_ConfigClockSource+0x16c>
 8009f24:	2b60      	cmp	r3, #96	@ 0x60
 8009f26:	d050      	beq.n	8009fca <HAL_TIM_ConfigClockSource+0x11a>
 8009f28:	2b60      	cmp	r3, #96	@ 0x60
 8009f2a:	d877      	bhi.n	800a01c <HAL_TIM_ConfigClockSource+0x16c>
 8009f2c:	2b50      	cmp	r3, #80	@ 0x50
 8009f2e:	d03c      	beq.n	8009faa <HAL_TIM_ConfigClockSource+0xfa>
 8009f30:	2b50      	cmp	r3, #80	@ 0x50
 8009f32:	d873      	bhi.n	800a01c <HAL_TIM_ConfigClockSource+0x16c>
 8009f34:	2b40      	cmp	r3, #64	@ 0x40
 8009f36:	d058      	beq.n	8009fea <HAL_TIM_ConfigClockSource+0x13a>
 8009f38:	2b40      	cmp	r3, #64	@ 0x40
 8009f3a:	d86f      	bhi.n	800a01c <HAL_TIM_ConfigClockSource+0x16c>
 8009f3c:	2b30      	cmp	r3, #48	@ 0x30
 8009f3e:	d064      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x15a>
 8009f40:	2b30      	cmp	r3, #48	@ 0x30
 8009f42:	d86b      	bhi.n	800a01c <HAL_TIM_ConfigClockSource+0x16c>
 8009f44:	2b20      	cmp	r3, #32
 8009f46:	d060      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x15a>
 8009f48:	2b20      	cmp	r3, #32
 8009f4a:	d867      	bhi.n	800a01c <HAL_TIM_ConfigClockSource+0x16c>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d05c      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x15a>
 8009f50:	2b10      	cmp	r3, #16
 8009f52:	d05a      	beq.n	800a00a <HAL_TIM_ConfigClockSource+0x15a>
 8009f54:	e062      	b.n	800a01c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f66:	f000 f9b9 	bl	800a2dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009f78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	609a      	str	r2, [r3, #8]
      break;
 8009f82:	e04f      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f94:	f000 f9a2 	bl	800a2dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689a      	ldr	r2, [r3, #8]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009fa6:	609a      	str	r2, [r3, #8]
      break;
 8009fa8:	e03c      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	f000 f916 	bl	800a1e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2150      	movs	r1, #80	@ 0x50
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 f96f 	bl	800a2a6 <TIM_ITRx_SetConfig>
      break;
 8009fc8:	e02c      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f000 f935 	bl	800a246 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2160      	movs	r1, #96	@ 0x60
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 f95f 	bl	800a2a6 <TIM_ITRx_SetConfig>
      break;
 8009fe8:	e01c      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f000 f8f6 	bl	800a1e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2140      	movs	r1, #64	@ 0x40
 800a002:	4618      	mov	r0, r3
 800a004:	f000 f94f 	bl	800a2a6 <TIM_ITRx_SetConfig>
      break;
 800a008:	e00c      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4619      	mov	r1, r3
 800a014:	4610      	mov	r0, r2
 800a016:	f000 f946 	bl	800a2a6 <TIM_ITRx_SetConfig>
      break;
 800a01a:	e003      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	73fb      	strb	r3, [r7, #15]
      break;
 800a020:	e000      	b.n	800a024 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a022:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a034:	7bfb      	ldrb	r3, [r7, #15]
}
 800a036:	4618      	mov	r0, r3
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	fffeff88 	.word	0xfffeff88

0800a044 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4a40      	ldr	r2, [pc, #256]	@ (800a1bc <TIM_Base_SetConfig+0x114>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d013      	beq.n	800a0e8 <TIM_Base_SetConfig+0x40>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0c6:	d00f      	beq.n	800a0e8 <TIM_Base_SetConfig+0x40>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a3d      	ldr	r2, [pc, #244]	@ (800a1c0 <TIM_Base_SetConfig+0x118>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d00b      	beq.n	800a0e8 <TIM_Base_SetConfig+0x40>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a3c      	ldr	r2, [pc, #240]	@ (800a1c4 <TIM_Base_SetConfig+0x11c>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d007      	beq.n	800a0e8 <TIM_Base_SetConfig+0x40>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a3b      	ldr	r2, [pc, #236]	@ (800a1c8 <TIM_Base_SetConfig+0x120>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d003      	beq.n	800a0e8 <TIM_Base_SetConfig+0x40>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a3a      	ldr	r2, [pc, #232]	@ (800a1cc <TIM_Base_SetConfig+0x124>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d108      	bne.n	800a0fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	4a2f      	ldr	r2, [pc, #188]	@ (800a1bc <TIM_Base_SetConfig+0x114>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d02b      	beq.n	800a15a <TIM_Base_SetConfig+0xb2>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a108:	d027      	beq.n	800a15a <TIM_Base_SetConfig+0xb2>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a2c      	ldr	r2, [pc, #176]	@ (800a1c0 <TIM_Base_SetConfig+0x118>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d023      	beq.n	800a15a <TIM_Base_SetConfig+0xb2>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a2b      	ldr	r2, [pc, #172]	@ (800a1c4 <TIM_Base_SetConfig+0x11c>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d01f      	beq.n	800a15a <TIM_Base_SetConfig+0xb2>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a2a      	ldr	r2, [pc, #168]	@ (800a1c8 <TIM_Base_SetConfig+0x120>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d01b      	beq.n	800a15a <TIM_Base_SetConfig+0xb2>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a29      	ldr	r2, [pc, #164]	@ (800a1cc <TIM_Base_SetConfig+0x124>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d017      	beq.n	800a15a <TIM_Base_SetConfig+0xb2>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a28      	ldr	r2, [pc, #160]	@ (800a1d0 <TIM_Base_SetConfig+0x128>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d013      	beq.n	800a15a <TIM_Base_SetConfig+0xb2>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a27      	ldr	r2, [pc, #156]	@ (800a1d4 <TIM_Base_SetConfig+0x12c>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d00f      	beq.n	800a15a <TIM_Base_SetConfig+0xb2>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a26      	ldr	r2, [pc, #152]	@ (800a1d8 <TIM_Base_SetConfig+0x130>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d00b      	beq.n	800a15a <TIM_Base_SetConfig+0xb2>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a25      	ldr	r2, [pc, #148]	@ (800a1dc <TIM_Base_SetConfig+0x134>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d007      	beq.n	800a15a <TIM_Base_SetConfig+0xb2>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a24      	ldr	r2, [pc, #144]	@ (800a1e0 <TIM_Base_SetConfig+0x138>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d003      	beq.n	800a15a <TIM_Base_SetConfig+0xb2>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a23      	ldr	r2, [pc, #140]	@ (800a1e4 <TIM_Base_SetConfig+0x13c>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d108      	bne.n	800a16c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	4313      	orrs	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	695b      	ldr	r3, [r3, #20]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	689a      	ldr	r2, [r3, #8]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a0a      	ldr	r2, [pc, #40]	@ (800a1bc <TIM_Base_SetConfig+0x114>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d003      	beq.n	800a1a0 <TIM_Base_SetConfig+0xf8>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a0c      	ldr	r2, [pc, #48]	@ (800a1cc <TIM_Base_SetConfig+0x124>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d103      	bne.n	800a1a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	691a      	ldr	r2, [r3, #16]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	615a      	str	r2, [r3, #20]
}
 800a1ae:	bf00      	nop
 800a1b0:	3714      	adds	r7, #20
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr
 800a1ba:	bf00      	nop
 800a1bc:	40010000 	.word	0x40010000
 800a1c0:	40000400 	.word	0x40000400
 800a1c4:	40000800 	.word	0x40000800
 800a1c8:	40000c00 	.word	0x40000c00
 800a1cc:	40010400 	.word	0x40010400
 800a1d0:	40014000 	.word	0x40014000
 800a1d4:	40014400 	.word	0x40014400
 800a1d8:	40014800 	.word	0x40014800
 800a1dc:	40001800 	.word	0x40001800
 800a1e0:	40001c00 	.word	0x40001c00
 800a1e4:	40002000 	.word	0x40002000

0800a1e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
 800a1f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	f023 0201 	bic.w	r2, r3, #1
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	011b      	lsls	r3, r3, #4
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f023 030a 	bic.w	r3, r3, #10
 800a224:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	621a      	str	r2, [r3, #32]
}
 800a23a:	bf00      	nop
 800a23c:	371c      	adds	r7, #28
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a246:	b480      	push	{r7}
 800a248:	b087      	sub	sp, #28
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	60f8      	str	r0, [r7, #12]
 800a24e:	60b9      	str	r1, [r7, #8]
 800a250:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6a1b      	ldr	r3, [r3, #32]
 800a256:	f023 0210 	bic.w	r2, r3, #16
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6a1b      	ldr	r3, [r3, #32]
 800a268:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a270:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	031b      	lsls	r3, r3, #12
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	4313      	orrs	r3, r2
 800a27a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a282:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	011b      	lsls	r3, r3, #4
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	621a      	str	r2, [r3, #32]
}
 800a29a:	bf00      	nop
 800a29c:	371c      	adds	r7, #28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	f043 0307 	orr.w	r3, r3, #7
 800a2c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	609a      	str	r2, [r3, #8]
}
 800a2d0:	bf00      	nop
 800a2d2:	3714      	adds	r7, #20
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b087      	sub	sp, #28
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
 800a2e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	689b      	ldr	r3, [r3, #8]
 800a2ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	021a      	lsls	r2, r3, #8
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	431a      	orrs	r2, r3
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	4313      	orrs	r3, r2
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	4313      	orrs	r3, r2
 800a308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	609a      	str	r2, [r3, #8]
}
 800a310:	bf00      	nop
 800a312:	371c      	adds	r7, #28
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d101      	bne.n	800a334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a330:	2302      	movs	r3, #2
 800a332:	e06d      	b.n	800a410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2202      	movs	r2, #2
 800a340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a30      	ldr	r2, [pc, #192]	@ (800a41c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d004      	beq.n	800a368 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a2f      	ldr	r2, [pc, #188]	@ (800a420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d108      	bne.n	800a37a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a36e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	68fa      	ldr	r2, [r7, #12]
 800a376:	4313      	orrs	r3, r2
 800a378:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a380:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	4313      	orrs	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a20      	ldr	r2, [pc, #128]	@ (800a41c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d022      	beq.n	800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3a6:	d01d      	beq.n	800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a424 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d018      	beq.n	800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a1c      	ldr	r2, [pc, #112]	@ (800a428 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d013      	beq.n	800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a1a      	ldr	r2, [pc, #104]	@ (800a42c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d00e      	beq.n	800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a15      	ldr	r2, [pc, #84]	@ (800a420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d009      	beq.n	800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a16      	ldr	r2, [pc, #88]	@ (800a430 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d004      	beq.n	800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a15      	ldr	r2, [pc, #84]	@ (800a434 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d10c      	bne.n	800a3fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	40010000 	.word	0x40010000
 800a420:	40010400 	.word	0x40010400
 800a424:	40000400 	.word	0x40000400
 800a428:	40000800 	.word	0x40000800
 800a42c:	40000c00 	.word	0x40000c00
 800a430:	40014000 	.word	0x40014000
 800a434:	40001800 	.word	0x40001800

0800a438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e040      	b.n	800a508 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d106      	bne.n	800a49c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7fd f892 	bl	80075c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2224      	movs	r2, #36	@ 0x24
 800a4a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f022 0201 	bic.w	r2, r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fb1e 	bl	800aaf4 <UART_SetConfig>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d101      	bne.n	800a4c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e022      	b.n	800a508 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d002      	beq.n	800a4d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fd76 	bl	800afbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a4de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a4ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0201 	orr.w	r2, r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fdfd 	bl	800b100 <UART_CheckIdleState>
 800a506:	4603      	mov	r3, r0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b0ba      	sub	sp, #232	@ 0xe8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a536:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a53a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a53e:	4013      	ands	r3, r2
 800a540:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d115      	bne.n	800a578 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a550:	f003 0320 	and.w	r3, r3, #32
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00f      	beq.n	800a578 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a55c:	f003 0320 	and.w	r3, r3, #32
 800a560:	2b00      	cmp	r3, #0
 800a562:	d009      	beq.n	800a578 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 8297 	beq.w	800aa9c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	4798      	blx	r3
      }
      return;
 800a576:	e291      	b.n	800aa9c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a578:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	f000 8117 	beq.w	800a7b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d106      	bne.n	800a59c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a58e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a592:	4b85      	ldr	r3, [pc, #532]	@ (800a7a8 <HAL_UART_IRQHandler+0x298>)
 800a594:	4013      	ands	r3, r2
 800a596:	2b00      	cmp	r3, #0
 800a598:	f000 810a 	beq.w	800a7b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a59c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5a0:	f003 0301 	and.w	r3, r3, #1
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d011      	beq.n	800a5cc <HAL_UART_IRQHandler+0xbc>
 800a5a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00b      	beq.n	800a5cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5c2:	f043 0201 	orr.w	r2, r3, #1
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5d0:	f003 0302 	and.w	r3, r3, #2
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d011      	beq.n	800a5fc <HAL_UART_IRQHandler+0xec>
 800a5d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5dc:	f003 0301 	and.w	r3, r3, #1
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00b      	beq.n	800a5fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2202      	movs	r2, #2
 800a5ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5f2:	f043 0204 	orr.w	r2, r3, #4
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a600:	f003 0304 	and.w	r3, r3, #4
 800a604:	2b00      	cmp	r3, #0
 800a606:	d011      	beq.n	800a62c <HAL_UART_IRQHandler+0x11c>
 800a608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00b      	beq.n	800a62c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2204      	movs	r2, #4
 800a61a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a622:	f043 0202 	orr.w	r2, r3, #2
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a62c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a630:	f003 0308 	and.w	r3, r3, #8
 800a634:	2b00      	cmp	r3, #0
 800a636:	d017      	beq.n	800a668 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a63c:	f003 0320 	and.w	r3, r3, #32
 800a640:	2b00      	cmp	r3, #0
 800a642:	d105      	bne.n	800a650 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a648:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00b      	beq.n	800a668 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2208      	movs	r2, #8
 800a656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a65e:	f043 0208 	orr.w	r2, r3, #8
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a66c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a670:	2b00      	cmp	r3, #0
 800a672:	d012      	beq.n	800a69a <HAL_UART_IRQHandler+0x18a>
 800a674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a678:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00c      	beq.n	800a69a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a688:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a690:	f043 0220 	orr.w	r2, r3, #32
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f000 81fd 	beq.w	800aaa0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a6a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6aa:	f003 0320 	and.w	r3, r3, #32
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00d      	beq.n	800a6ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a6b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6b6:	f003 0320 	and.w	r3, r3, #32
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d007      	beq.n	800a6ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6e2:	2b40      	cmp	r3, #64	@ 0x40
 800a6e4:	d005      	beq.n	800a6f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a6e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a6ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d04f      	beq.n	800a792 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fe01 	bl	800b2fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a702:	2b40      	cmp	r3, #64	@ 0x40
 800a704:	d141      	bne.n	800a78a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3308      	adds	r3, #8
 800a70c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a710:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a714:	e853 3f00 	ldrex	r3, [r3]
 800a718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a71c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3308      	adds	r3, #8
 800a72e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a732:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a73e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a742:	e841 2300 	strex	r3, r2, [r1]
 800a746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a74a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1d9      	bne.n	800a706 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a756:	2b00      	cmp	r3, #0
 800a758:	d013      	beq.n	800a782 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a75e:	4a13      	ldr	r2, [pc, #76]	@ (800a7ac <HAL_UART_IRQHandler+0x29c>)
 800a760:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a766:	4618      	mov	r0, r3
 800a768:	f7fd f9bb 	bl	8007ae2 <HAL_DMA_Abort_IT>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d017      	beq.n	800a7a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a77c:	4610      	mov	r0, r2
 800a77e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a780:	e00f      	b.n	800a7a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 f9a0 	bl	800aac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a788:	e00b      	b.n	800a7a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f99c 	bl	800aac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a790:	e007      	b.n	800a7a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f998 	bl	800aac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a7a0:	e17e      	b.n	800aaa0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7a2:	bf00      	nop
    return;
 800a7a4:	e17c      	b.n	800aaa0 <HAL_UART_IRQHandler+0x590>
 800a7a6:	bf00      	nop
 800a7a8:	04000120 	.word	0x04000120
 800a7ac:	0800b3c3 	.word	0x0800b3c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	f040 814c 	bne.w	800aa52 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7be:	f003 0310 	and.w	r3, r3, #16
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f000 8145 	beq.w	800aa52 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7cc:	f003 0310 	and.w	r3, r3, #16
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 813e 	beq.w	800aa52 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2210      	movs	r2, #16
 800a7dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7e8:	2b40      	cmp	r3, #64	@ 0x40
 800a7ea:	f040 80b6 	bne.w	800a95a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a7fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 8150 	beq.w	800aaa4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a80a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a80e:	429a      	cmp	r2, r3
 800a810:	f080 8148 	bcs.w	800aaa4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a81a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a822:	69db      	ldr	r3, [r3, #28]
 800a824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a828:	f000 8086 	beq.w	800a938 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a834:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a840:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	461a      	mov	r2, r3
 800a852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a856:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a85a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a862:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a866:	e841 2300 	strex	r3, r2, [r1]
 800a86a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a86e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1da      	bne.n	800a82c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3308      	adds	r3, #8
 800a87c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a880:	e853 3f00 	ldrex	r3, [r3]
 800a884:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a888:	f023 0301 	bic.w	r3, r3, #1
 800a88c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3308      	adds	r3, #8
 800a896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a89a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a89e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a8a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a8a6:	e841 2300 	strex	r3, r2, [r1]
 800a8aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a8ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1e1      	bne.n	800a876 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3308      	adds	r3, #8
 800a8b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8bc:	e853 3f00 	ldrex	r3, [r3]
 800a8c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a8c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a8d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a8d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a8dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8de:	e841 2300 	strex	r3, r2, [r1]
 800a8e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a8e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1e3      	bne.n	800a8b2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2220      	movs	r2, #32
 800a8ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a900:	e853 3f00 	ldrex	r3, [r3]
 800a904:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a908:	f023 0310 	bic.w	r3, r3, #16
 800a90c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	461a      	mov	r2, r3
 800a916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a91a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a91c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a920:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a922:	e841 2300 	strex	r3, r2, [r1]
 800a926:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d1e4      	bne.n	800a8f8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a932:	4618      	mov	r0, r3
 800a934:	f7fd f865 	bl	8007a02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2202      	movs	r2, #2
 800a93c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	1ad3      	subs	r3, r2, r3
 800a94e:	b29b      	uxth	r3, r3
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 f8c2 	bl	800aadc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a958:	e0a4      	b.n	800aaa4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a966:	b29b      	uxth	r3, r3
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a974:	b29b      	uxth	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	f000 8096 	beq.w	800aaa8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800a97c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a980:	2b00      	cmp	r3, #0
 800a982:	f000 8091 	beq.w	800aaa8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98e:	e853 3f00 	ldrex	r3, [r3]
 800a992:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a996:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a99a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a9a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9b0:	e841 2300 	strex	r3, r2, [r1]
 800a9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a9b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1e4      	bne.n	800a986 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3308      	adds	r3, #8
 800a9c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c6:	e853 3f00 	ldrex	r3, [r3]
 800a9ca:	623b      	str	r3, [r7, #32]
   return(result);
 800a9cc:	6a3b      	ldr	r3, [r7, #32]
 800a9ce:	f023 0301 	bic.w	r3, r3, #1
 800a9d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3308      	adds	r3, #8
 800a9dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a9e0:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9e8:	e841 2300 	strex	r3, r2, [r1]
 800a9ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d1e3      	bne.n	800a9bc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2220      	movs	r2, #32
 800a9f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2200      	movs	r2, #0
 800aa06:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	e853 3f00 	ldrex	r3, [r3]
 800aa14:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f023 0310 	bic.w	r3, r3, #16
 800aa1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	461a      	mov	r2, r3
 800aa26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa2a:	61fb      	str	r3, [r7, #28]
 800aa2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2e:	69b9      	ldr	r1, [r7, #24]
 800aa30:	69fa      	ldr	r2, [r7, #28]
 800aa32:	e841 2300 	strex	r3, r2, [r1]
 800aa36:	617b      	str	r3, [r7, #20]
   return(result);
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1e4      	bne.n	800aa08 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2202      	movs	r2, #2
 800aa42:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa48:	4619      	mov	r1, r3
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f846 	bl	800aadc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa50:	e02a      	b.n	800aaa8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800aa52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00e      	beq.n	800aa7c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800aa5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d008      	beq.n	800aa7c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d01c      	beq.n	800aaac <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
    }
    return;
 800aa7a:	e017      	b.n	800aaac <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d012      	beq.n	800aaae <HAL_UART_IRQHandler+0x59e>
 800aa88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00c      	beq.n	800aaae <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 fcaa 	bl	800b3ee <UART_EndTransmit_IT>
    return;
 800aa9a:	e008      	b.n	800aaae <HAL_UART_IRQHandler+0x59e>
      return;
 800aa9c:	bf00      	nop
 800aa9e:	e006      	b.n	800aaae <HAL_UART_IRQHandler+0x59e>
    return;
 800aaa0:	bf00      	nop
 800aaa2:	e004      	b.n	800aaae <HAL_UART_IRQHandler+0x59e>
      return;
 800aaa4:	bf00      	nop
 800aaa6:	e002      	b.n	800aaae <HAL_UART_IRQHandler+0x59e>
      return;
 800aaa8:	bf00      	nop
 800aaaa:	e000      	b.n	800aaae <HAL_UART_IRQHandler+0x59e>
    return;
 800aaac:	bf00      	nop
  }

}
 800aaae:	37e8      	adds	r7, #232	@ 0xe8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	460b      	mov	r3, r1
 800aae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b088      	sub	sp, #32
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	689a      	ldr	r2, [r3, #8]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	4ba6      	ldr	r3, [pc, #664]	@ (800adb8 <UART_SetConfig+0x2c4>)
 800ab20:	4013      	ands	r3, r2
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	6812      	ldr	r2, [r2, #0]
 800ab26:	6979      	ldr	r1, [r7, #20]
 800ab28:	430b      	orrs	r3, r1
 800ab2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	430a      	orrs	r2, r1
 800ab40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	430a      	orrs	r2, r1
 800ab64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a94      	ldr	r2, [pc, #592]	@ (800adbc <UART_SetConfig+0x2c8>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d120      	bne.n	800abb2 <UART_SetConfig+0xbe>
 800ab70:	4b93      	ldr	r3, [pc, #588]	@ (800adc0 <UART_SetConfig+0x2cc>)
 800ab72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab76:	f003 0303 	and.w	r3, r3, #3
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	d816      	bhi.n	800abac <UART_SetConfig+0xb8>
 800ab7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab84 <UART_SetConfig+0x90>)
 800ab80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab84:	0800ab95 	.word	0x0800ab95
 800ab88:	0800aba1 	.word	0x0800aba1
 800ab8c:	0800ab9b 	.word	0x0800ab9b
 800ab90:	0800aba7 	.word	0x0800aba7
 800ab94:	2301      	movs	r3, #1
 800ab96:	77fb      	strb	r3, [r7, #31]
 800ab98:	e150      	b.n	800ae3c <UART_SetConfig+0x348>
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	77fb      	strb	r3, [r7, #31]
 800ab9e:	e14d      	b.n	800ae3c <UART_SetConfig+0x348>
 800aba0:	2304      	movs	r3, #4
 800aba2:	77fb      	strb	r3, [r7, #31]
 800aba4:	e14a      	b.n	800ae3c <UART_SetConfig+0x348>
 800aba6:	2308      	movs	r3, #8
 800aba8:	77fb      	strb	r3, [r7, #31]
 800abaa:	e147      	b.n	800ae3c <UART_SetConfig+0x348>
 800abac:	2310      	movs	r3, #16
 800abae:	77fb      	strb	r3, [r7, #31]
 800abb0:	e144      	b.n	800ae3c <UART_SetConfig+0x348>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a83      	ldr	r2, [pc, #524]	@ (800adc4 <UART_SetConfig+0x2d0>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d132      	bne.n	800ac22 <UART_SetConfig+0x12e>
 800abbc:	4b80      	ldr	r3, [pc, #512]	@ (800adc0 <UART_SetConfig+0x2cc>)
 800abbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abc2:	f003 030c 	and.w	r3, r3, #12
 800abc6:	2b0c      	cmp	r3, #12
 800abc8:	d828      	bhi.n	800ac1c <UART_SetConfig+0x128>
 800abca:	a201      	add	r2, pc, #4	@ (adr r2, 800abd0 <UART_SetConfig+0xdc>)
 800abcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd0:	0800ac05 	.word	0x0800ac05
 800abd4:	0800ac1d 	.word	0x0800ac1d
 800abd8:	0800ac1d 	.word	0x0800ac1d
 800abdc:	0800ac1d 	.word	0x0800ac1d
 800abe0:	0800ac11 	.word	0x0800ac11
 800abe4:	0800ac1d 	.word	0x0800ac1d
 800abe8:	0800ac1d 	.word	0x0800ac1d
 800abec:	0800ac1d 	.word	0x0800ac1d
 800abf0:	0800ac0b 	.word	0x0800ac0b
 800abf4:	0800ac1d 	.word	0x0800ac1d
 800abf8:	0800ac1d 	.word	0x0800ac1d
 800abfc:	0800ac1d 	.word	0x0800ac1d
 800ac00:	0800ac17 	.word	0x0800ac17
 800ac04:	2300      	movs	r3, #0
 800ac06:	77fb      	strb	r3, [r7, #31]
 800ac08:	e118      	b.n	800ae3c <UART_SetConfig+0x348>
 800ac0a:	2302      	movs	r3, #2
 800ac0c:	77fb      	strb	r3, [r7, #31]
 800ac0e:	e115      	b.n	800ae3c <UART_SetConfig+0x348>
 800ac10:	2304      	movs	r3, #4
 800ac12:	77fb      	strb	r3, [r7, #31]
 800ac14:	e112      	b.n	800ae3c <UART_SetConfig+0x348>
 800ac16:	2308      	movs	r3, #8
 800ac18:	77fb      	strb	r3, [r7, #31]
 800ac1a:	e10f      	b.n	800ae3c <UART_SetConfig+0x348>
 800ac1c:	2310      	movs	r3, #16
 800ac1e:	77fb      	strb	r3, [r7, #31]
 800ac20:	e10c      	b.n	800ae3c <UART_SetConfig+0x348>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a68      	ldr	r2, [pc, #416]	@ (800adc8 <UART_SetConfig+0x2d4>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d120      	bne.n	800ac6e <UART_SetConfig+0x17a>
 800ac2c:	4b64      	ldr	r3, [pc, #400]	@ (800adc0 <UART_SetConfig+0x2cc>)
 800ac2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac32:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ac36:	2b30      	cmp	r3, #48	@ 0x30
 800ac38:	d013      	beq.n	800ac62 <UART_SetConfig+0x16e>
 800ac3a:	2b30      	cmp	r3, #48	@ 0x30
 800ac3c:	d814      	bhi.n	800ac68 <UART_SetConfig+0x174>
 800ac3e:	2b20      	cmp	r3, #32
 800ac40:	d009      	beq.n	800ac56 <UART_SetConfig+0x162>
 800ac42:	2b20      	cmp	r3, #32
 800ac44:	d810      	bhi.n	800ac68 <UART_SetConfig+0x174>
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d002      	beq.n	800ac50 <UART_SetConfig+0x15c>
 800ac4a:	2b10      	cmp	r3, #16
 800ac4c:	d006      	beq.n	800ac5c <UART_SetConfig+0x168>
 800ac4e:	e00b      	b.n	800ac68 <UART_SetConfig+0x174>
 800ac50:	2300      	movs	r3, #0
 800ac52:	77fb      	strb	r3, [r7, #31]
 800ac54:	e0f2      	b.n	800ae3c <UART_SetConfig+0x348>
 800ac56:	2302      	movs	r3, #2
 800ac58:	77fb      	strb	r3, [r7, #31]
 800ac5a:	e0ef      	b.n	800ae3c <UART_SetConfig+0x348>
 800ac5c:	2304      	movs	r3, #4
 800ac5e:	77fb      	strb	r3, [r7, #31]
 800ac60:	e0ec      	b.n	800ae3c <UART_SetConfig+0x348>
 800ac62:	2308      	movs	r3, #8
 800ac64:	77fb      	strb	r3, [r7, #31]
 800ac66:	e0e9      	b.n	800ae3c <UART_SetConfig+0x348>
 800ac68:	2310      	movs	r3, #16
 800ac6a:	77fb      	strb	r3, [r7, #31]
 800ac6c:	e0e6      	b.n	800ae3c <UART_SetConfig+0x348>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a56      	ldr	r2, [pc, #344]	@ (800adcc <UART_SetConfig+0x2d8>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d120      	bne.n	800acba <UART_SetConfig+0x1c6>
 800ac78:	4b51      	ldr	r3, [pc, #324]	@ (800adc0 <UART_SetConfig+0x2cc>)
 800ac7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ac82:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac84:	d013      	beq.n	800acae <UART_SetConfig+0x1ba>
 800ac86:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac88:	d814      	bhi.n	800acb4 <UART_SetConfig+0x1c0>
 800ac8a:	2b80      	cmp	r3, #128	@ 0x80
 800ac8c:	d009      	beq.n	800aca2 <UART_SetConfig+0x1ae>
 800ac8e:	2b80      	cmp	r3, #128	@ 0x80
 800ac90:	d810      	bhi.n	800acb4 <UART_SetConfig+0x1c0>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d002      	beq.n	800ac9c <UART_SetConfig+0x1a8>
 800ac96:	2b40      	cmp	r3, #64	@ 0x40
 800ac98:	d006      	beq.n	800aca8 <UART_SetConfig+0x1b4>
 800ac9a:	e00b      	b.n	800acb4 <UART_SetConfig+0x1c0>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	77fb      	strb	r3, [r7, #31]
 800aca0:	e0cc      	b.n	800ae3c <UART_SetConfig+0x348>
 800aca2:	2302      	movs	r3, #2
 800aca4:	77fb      	strb	r3, [r7, #31]
 800aca6:	e0c9      	b.n	800ae3c <UART_SetConfig+0x348>
 800aca8:	2304      	movs	r3, #4
 800acaa:	77fb      	strb	r3, [r7, #31]
 800acac:	e0c6      	b.n	800ae3c <UART_SetConfig+0x348>
 800acae:	2308      	movs	r3, #8
 800acb0:	77fb      	strb	r3, [r7, #31]
 800acb2:	e0c3      	b.n	800ae3c <UART_SetConfig+0x348>
 800acb4:	2310      	movs	r3, #16
 800acb6:	77fb      	strb	r3, [r7, #31]
 800acb8:	e0c0      	b.n	800ae3c <UART_SetConfig+0x348>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a44      	ldr	r2, [pc, #272]	@ (800add0 <UART_SetConfig+0x2dc>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d125      	bne.n	800ad10 <UART_SetConfig+0x21c>
 800acc4:	4b3e      	ldr	r3, [pc, #248]	@ (800adc0 <UART_SetConfig+0x2cc>)
 800acc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800acca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acd2:	d017      	beq.n	800ad04 <UART_SetConfig+0x210>
 800acd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800acd8:	d817      	bhi.n	800ad0a <UART_SetConfig+0x216>
 800acda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acde:	d00b      	beq.n	800acf8 <UART_SetConfig+0x204>
 800ace0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ace4:	d811      	bhi.n	800ad0a <UART_SetConfig+0x216>
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <UART_SetConfig+0x1fe>
 800acea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acee:	d006      	beq.n	800acfe <UART_SetConfig+0x20a>
 800acf0:	e00b      	b.n	800ad0a <UART_SetConfig+0x216>
 800acf2:	2300      	movs	r3, #0
 800acf4:	77fb      	strb	r3, [r7, #31]
 800acf6:	e0a1      	b.n	800ae3c <UART_SetConfig+0x348>
 800acf8:	2302      	movs	r3, #2
 800acfa:	77fb      	strb	r3, [r7, #31]
 800acfc:	e09e      	b.n	800ae3c <UART_SetConfig+0x348>
 800acfe:	2304      	movs	r3, #4
 800ad00:	77fb      	strb	r3, [r7, #31]
 800ad02:	e09b      	b.n	800ae3c <UART_SetConfig+0x348>
 800ad04:	2308      	movs	r3, #8
 800ad06:	77fb      	strb	r3, [r7, #31]
 800ad08:	e098      	b.n	800ae3c <UART_SetConfig+0x348>
 800ad0a:	2310      	movs	r3, #16
 800ad0c:	77fb      	strb	r3, [r7, #31]
 800ad0e:	e095      	b.n	800ae3c <UART_SetConfig+0x348>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a2f      	ldr	r2, [pc, #188]	@ (800add4 <UART_SetConfig+0x2e0>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d125      	bne.n	800ad66 <UART_SetConfig+0x272>
 800ad1a:	4b29      	ldr	r3, [pc, #164]	@ (800adc0 <UART_SetConfig+0x2cc>)
 800ad1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ad24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad28:	d017      	beq.n	800ad5a <UART_SetConfig+0x266>
 800ad2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad2e:	d817      	bhi.n	800ad60 <UART_SetConfig+0x26c>
 800ad30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad34:	d00b      	beq.n	800ad4e <UART_SetConfig+0x25a>
 800ad36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad3a:	d811      	bhi.n	800ad60 <UART_SetConfig+0x26c>
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <UART_SetConfig+0x254>
 800ad40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad44:	d006      	beq.n	800ad54 <UART_SetConfig+0x260>
 800ad46:	e00b      	b.n	800ad60 <UART_SetConfig+0x26c>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	77fb      	strb	r3, [r7, #31]
 800ad4c:	e076      	b.n	800ae3c <UART_SetConfig+0x348>
 800ad4e:	2302      	movs	r3, #2
 800ad50:	77fb      	strb	r3, [r7, #31]
 800ad52:	e073      	b.n	800ae3c <UART_SetConfig+0x348>
 800ad54:	2304      	movs	r3, #4
 800ad56:	77fb      	strb	r3, [r7, #31]
 800ad58:	e070      	b.n	800ae3c <UART_SetConfig+0x348>
 800ad5a:	2308      	movs	r3, #8
 800ad5c:	77fb      	strb	r3, [r7, #31]
 800ad5e:	e06d      	b.n	800ae3c <UART_SetConfig+0x348>
 800ad60:	2310      	movs	r3, #16
 800ad62:	77fb      	strb	r3, [r7, #31]
 800ad64:	e06a      	b.n	800ae3c <UART_SetConfig+0x348>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a1b      	ldr	r2, [pc, #108]	@ (800add8 <UART_SetConfig+0x2e4>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d138      	bne.n	800ade2 <UART_SetConfig+0x2ee>
 800ad70:	4b13      	ldr	r3, [pc, #76]	@ (800adc0 <UART_SetConfig+0x2cc>)
 800ad72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ad76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ad7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad7e:	d017      	beq.n	800adb0 <UART_SetConfig+0x2bc>
 800ad80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad84:	d82a      	bhi.n	800addc <UART_SetConfig+0x2e8>
 800ad86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad8a:	d00b      	beq.n	800ada4 <UART_SetConfig+0x2b0>
 800ad8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad90:	d824      	bhi.n	800addc <UART_SetConfig+0x2e8>
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d003      	beq.n	800ad9e <UART_SetConfig+0x2aa>
 800ad96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad9a:	d006      	beq.n	800adaa <UART_SetConfig+0x2b6>
 800ad9c:	e01e      	b.n	800addc <UART_SetConfig+0x2e8>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	77fb      	strb	r3, [r7, #31]
 800ada2:	e04b      	b.n	800ae3c <UART_SetConfig+0x348>
 800ada4:	2302      	movs	r3, #2
 800ada6:	77fb      	strb	r3, [r7, #31]
 800ada8:	e048      	b.n	800ae3c <UART_SetConfig+0x348>
 800adaa:	2304      	movs	r3, #4
 800adac:	77fb      	strb	r3, [r7, #31]
 800adae:	e045      	b.n	800ae3c <UART_SetConfig+0x348>
 800adb0:	2308      	movs	r3, #8
 800adb2:	77fb      	strb	r3, [r7, #31]
 800adb4:	e042      	b.n	800ae3c <UART_SetConfig+0x348>
 800adb6:	bf00      	nop
 800adb8:	efff69f3 	.word	0xefff69f3
 800adbc:	40011000 	.word	0x40011000
 800adc0:	40023800 	.word	0x40023800
 800adc4:	40004400 	.word	0x40004400
 800adc8:	40004800 	.word	0x40004800
 800adcc:	40004c00 	.word	0x40004c00
 800add0:	40005000 	.word	0x40005000
 800add4:	40011400 	.word	0x40011400
 800add8:	40007800 	.word	0x40007800
 800addc:	2310      	movs	r3, #16
 800adde:	77fb      	strb	r3, [r7, #31]
 800ade0:	e02c      	b.n	800ae3c <UART_SetConfig+0x348>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a72      	ldr	r2, [pc, #456]	@ (800afb0 <UART_SetConfig+0x4bc>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d125      	bne.n	800ae38 <UART_SetConfig+0x344>
 800adec:	4b71      	ldr	r3, [pc, #452]	@ (800afb4 <UART_SetConfig+0x4c0>)
 800adee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adf2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800adf6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800adfa:	d017      	beq.n	800ae2c <UART_SetConfig+0x338>
 800adfc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ae00:	d817      	bhi.n	800ae32 <UART_SetConfig+0x33e>
 800ae02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae06:	d00b      	beq.n	800ae20 <UART_SetConfig+0x32c>
 800ae08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae0c:	d811      	bhi.n	800ae32 <UART_SetConfig+0x33e>
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d003      	beq.n	800ae1a <UART_SetConfig+0x326>
 800ae12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae16:	d006      	beq.n	800ae26 <UART_SetConfig+0x332>
 800ae18:	e00b      	b.n	800ae32 <UART_SetConfig+0x33e>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	77fb      	strb	r3, [r7, #31]
 800ae1e:	e00d      	b.n	800ae3c <UART_SetConfig+0x348>
 800ae20:	2302      	movs	r3, #2
 800ae22:	77fb      	strb	r3, [r7, #31]
 800ae24:	e00a      	b.n	800ae3c <UART_SetConfig+0x348>
 800ae26:	2304      	movs	r3, #4
 800ae28:	77fb      	strb	r3, [r7, #31]
 800ae2a:	e007      	b.n	800ae3c <UART_SetConfig+0x348>
 800ae2c:	2308      	movs	r3, #8
 800ae2e:	77fb      	strb	r3, [r7, #31]
 800ae30:	e004      	b.n	800ae3c <UART_SetConfig+0x348>
 800ae32:	2310      	movs	r3, #16
 800ae34:	77fb      	strb	r3, [r7, #31]
 800ae36:	e001      	b.n	800ae3c <UART_SetConfig+0x348>
 800ae38:	2310      	movs	r3, #16
 800ae3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	69db      	ldr	r3, [r3, #28]
 800ae40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ae44:	d15b      	bne.n	800aefe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ae46:	7ffb      	ldrb	r3, [r7, #31]
 800ae48:	2b08      	cmp	r3, #8
 800ae4a:	d828      	bhi.n	800ae9e <UART_SetConfig+0x3aa>
 800ae4c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae54 <UART_SetConfig+0x360>)
 800ae4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae52:	bf00      	nop
 800ae54:	0800ae79 	.word	0x0800ae79
 800ae58:	0800ae81 	.word	0x0800ae81
 800ae5c:	0800ae89 	.word	0x0800ae89
 800ae60:	0800ae9f 	.word	0x0800ae9f
 800ae64:	0800ae8f 	.word	0x0800ae8f
 800ae68:	0800ae9f 	.word	0x0800ae9f
 800ae6c:	0800ae9f 	.word	0x0800ae9f
 800ae70:	0800ae9f 	.word	0x0800ae9f
 800ae74:	0800ae97 	.word	0x0800ae97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae78:	f7fd fcd8 	bl	800882c <HAL_RCC_GetPCLK1Freq>
 800ae7c:	61b8      	str	r0, [r7, #24]
        break;
 800ae7e:	e013      	b.n	800aea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae80:	f7fd fce8 	bl	8008854 <HAL_RCC_GetPCLK2Freq>
 800ae84:	61b8      	str	r0, [r7, #24]
        break;
 800ae86:	e00f      	b.n	800aea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae88:	4b4b      	ldr	r3, [pc, #300]	@ (800afb8 <UART_SetConfig+0x4c4>)
 800ae8a:	61bb      	str	r3, [r7, #24]
        break;
 800ae8c:	e00c      	b.n	800aea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae8e:	f7fd fbbb 	bl	8008608 <HAL_RCC_GetSysClockFreq>
 800ae92:	61b8      	str	r0, [r7, #24]
        break;
 800ae94:	e008      	b.n	800aea8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae9a:	61bb      	str	r3, [r7, #24]
        break;
 800ae9c:	e004      	b.n	800aea8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	77bb      	strb	r3, [r7, #30]
        break;
 800aea6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d074      	beq.n	800af98 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	005a      	lsls	r2, r3, #1
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	085b      	lsrs	r3, r3, #1
 800aeb8:	441a      	add	r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	fbb2 f3f3 	udiv	r3, r2, r3
 800aec2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	2b0f      	cmp	r3, #15
 800aec8:	d916      	bls.n	800aef8 <UART_SetConfig+0x404>
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aed0:	d212      	bcs.n	800aef8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	f023 030f 	bic.w	r3, r3, #15
 800aeda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	085b      	lsrs	r3, r3, #1
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	f003 0307 	and.w	r3, r3, #7
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	89fb      	ldrh	r3, [r7, #14]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	89fa      	ldrh	r2, [r7, #14]
 800aef4:	60da      	str	r2, [r3, #12]
 800aef6:	e04f      	b.n	800af98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	77bb      	strb	r3, [r7, #30]
 800aefc:	e04c      	b.n	800af98 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aefe:	7ffb      	ldrb	r3, [r7, #31]
 800af00:	2b08      	cmp	r3, #8
 800af02:	d828      	bhi.n	800af56 <UART_SetConfig+0x462>
 800af04:	a201      	add	r2, pc, #4	@ (adr r2, 800af0c <UART_SetConfig+0x418>)
 800af06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0a:	bf00      	nop
 800af0c:	0800af31 	.word	0x0800af31
 800af10:	0800af39 	.word	0x0800af39
 800af14:	0800af41 	.word	0x0800af41
 800af18:	0800af57 	.word	0x0800af57
 800af1c:	0800af47 	.word	0x0800af47
 800af20:	0800af57 	.word	0x0800af57
 800af24:	0800af57 	.word	0x0800af57
 800af28:	0800af57 	.word	0x0800af57
 800af2c:	0800af4f 	.word	0x0800af4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af30:	f7fd fc7c 	bl	800882c <HAL_RCC_GetPCLK1Freq>
 800af34:	61b8      	str	r0, [r7, #24]
        break;
 800af36:	e013      	b.n	800af60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af38:	f7fd fc8c 	bl	8008854 <HAL_RCC_GetPCLK2Freq>
 800af3c:	61b8      	str	r0, [r7, #24]
        break;
 800af3e:	e00f      	b.n	800af60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af40:	4b1d      	ldr	r3, [pc, #116]	@ (800afb8 <UART_SetConfig+0x4c4>)
 800af42:	61bb      	str	r3, [r7, #24]
        break;
 800af44:	e00c      	b.n	800af60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af46:	f7fd fb5f 	bl	8008608 <HAL_RCC_GetSysClockFreq>
 800af4a:	61b8      	str	r0, [r7, #24]
        break;
 800af4c:	e008      	b.n	800af60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af52:	61bb      	str	r3, [r7, #24]
        break;
 800af54:	e004      	b.n	800af60 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800af56:	2300      	movs	r3, #0
 800af58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	77bb      	strb	r3, [r7, #30]
        break;
 800af5e:	bf00      	nop
    }

    if (pclk != 0U)
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d018      	beq.n	800af98 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	085a      	lsrs	r2, r3, #1
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	441a      	add	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	fbb2 f3f3 	udiv	r3, r2, r3
 800af78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	2b0f      	cmp	r3, #15
 800af7e:	d909      	bls.n	800af94 <UART_SetConfig+0x4a0>
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af86:	d205      	bcs.n	800af94 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	60da      	str	r2, [r3, #12]
 800af92:	e001      	b.n	800af98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800afa4:	7fbb      	ldrb	r3, [r7, #30]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3720      	adds	r7, #32
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	40007c00 	.word	0x40007c00
 800afb4:	40023800 	.word	0x40023800
 800afb8:	00f42400 	.word	0x00f42400

0800afbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b083      	sub	sp, #12
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00a      	beq.n	800afe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	430a      	orrs	r2, r1
 800afe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afea:	f003 0302 	and.w	r3, r3, #2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00a      	beq.n	800b008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	430a      	orrs	r2, r1
 800b006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b00c:	f003 0304 	and.w	r3, r3, #4
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00a      	beq.n	800b02a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	430a      	orrs	r2, r1
 800b028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02e:	f003 0308 	and.w	r3, r3, #8
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00a      	beq.n	800b04c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	430a      	orrs	r2, r1
 800b04a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b050:	f003 0310 	and.w	r3, r3, #16
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00a      	beq.n	800b06e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	430a      	orrs	r2, r1
 800b06c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b072:	f003 0320 	and.w	r3, r3, #32
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00a      	beq.n	800b090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	430a      	orrs	r2, r1
 800b08e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d01a      	beq.n	800b0d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	430a      	orrs	r2, r1
 800b0b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0ba:	d10a      	bne.n	800b0d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	430a      	orrs	r2, r1
 800b0d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d00a      	beq.n	800b0f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	430a      	orrs	r2, r1
 800b0f2:	605a      	str	r2, [r3, #4]
  }
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af02      	add	r7, sp, #8
 800b106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b110:	f7fc fb36 	bl	8007780 <HAL_GetTick>
 800b114:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 0308 	and.w	r3, r3, #8
 800b120:	2b08      	cmp	r3, #8
 800b122:	d10e      	bne.n	800b142 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b124:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f81b 	bl	800b16e <UART_WaitOnFlagUntilTimeout>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d001      	beq.n	800b142 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b13e:	2303      	movs	r3, #3
 800b140:	e011      	b.n	800b166 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2220      	movs	r2, #32
 800b146:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2220      	movs	r2, #32
 800b14c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b09c      	sub	sp, #112	@ 0x70
 800b172:	af00      	add	r7, sp, #0
 800b174:	60f8      	str	r0, [r7, #12]
 800b176:	60b9      	str	r1, [r7, #8]
 800b178:	603b      	str	r3, [r7, #0]
 800b17a:	4613      	mov	r3, r2
 800b17c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b17e:	e0a7      	b.n	800b2d0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b180:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b186:	f000 80a3 	beq.w	800b2d0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b18a:	f7fc faf9 	bl	8007780 <HAL_GetTick>
 800b18e:	4602      	mov	r2, r0
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b196:	429a      	cmp	r2, r3
 800b198:	d302      	bcc.n	800b1a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800b19a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d13f      	bne.n	800b220 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1a8:	e853 3f00 	ldrex	r3, [r3]
 800b1ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b1ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1b0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b1b4:	667b      	str	r3, [r7, #100]	@ 0x64
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1c0:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b1c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b1cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e6      	bne.n	800b1a0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1e4:	f023 0301 	bic.w	r3, r3, #1
 800b1e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3308      	adds	r3, #8
 800b1f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b1f2:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b1f4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b1f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1fa:	e841 2300 	strex	r3, r2, [r1]
 800b1fe:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1e5      	bne.n	800b1d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2220      	movs	r2, #32
 800b20a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2220      	movs	r2, #32
 800b210:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e068      	b.n	800b2f2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f003 0304 	and.w	r3, r3, #4
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d050      	beq.n	800b2d0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b23c:	d148      	bne.n	800b2d0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b246:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b250:	e853 3f00 	ldrex	r3, [r3]
 800b254:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b258:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b25c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b266:	637b      	str	r3, [r7, #52]	@ 0x34
 800b268:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b26c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b26e:	e841 2300 	strex	r3, r2, [r1]
 800b272:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1e6      	bne.n	800b248 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	3308      	adds	r3, #8
 800b280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	e853 3f00 	ldrex	r3, [r3]
 800b288:	613b      	str	r3, [r7, #16]
   return(result);
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	f023 0301 	bic.w	r3, r3, #1
 800b290:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	3308      	adds	r3, #8
 800b298:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b29a:	623a      	str	r2, [r7, #32]
 800b29c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29e:	69f9      	ldr	r1, [r7, #28]
 800b2a0:	6a3a      	ldr	r2, [r7, #32]
 800b2a2:	e841 2300 	strex	r3, r2, [r1]
 800b2a6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1e5      	bne.n	800b27a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2220      	movs	r2, #32
 800b2b2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2220      	movs	r2, #32
 800b2b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2220      	movs	r2, #32
 800b2c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	e010      	b.n	800b2f2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	69da      	ldr	r2, [r3, #28]
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	4013      	ands	r3, r2
 800b2da:	68ba      	ldr	r2, [r7, #8]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	bf0c      	ite	eq
 800b2e0:	2301      	moveq	r3, #1
 800b2e2:	2300      	movne	r3, #0
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	79fb      	ldrb	r3, [r7, #7]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	f43f af48 	beq.w	800b180 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3770      	adds	r7, #112	@ 0x70
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2fa:	b480      	push	{r7}
 800b2fc:	b095      	sub	sp, #84	@ 0x54
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b30a:	e853 3f00 	ldrex	r3, [r3]
 800b30e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b312:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	461a      	mov	r2, r3
 800b31e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b320:	643b      	str	r3, [r7, #64]	@ 0x40
 800b322:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b324:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b326:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b328:	e841 2300 	strex	r3, r2, [r1]
 800b32c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1e6      	bne.n	800b302 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	3308      	adds	r3, #8
 800b33a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33c:	6a3b      	ldr	r3, [r7, #32]
 800b33e:	e853 3f00 	ldrex	r3, [r3]
 800b342:	61fb      	str	r3, [r7, #28]
   return(result);
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	f023 0301 	bic.w	r3, r3, #1
 800b34a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3308      	adds	r3, #8
 800b352:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b354:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b356:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b358:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b35a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b35c:	e841 2300 	strex	r3, r2, [r1]
 800b360:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e5      	bne.n	800b334 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d118      	bne.n	800b3a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	e853 3f00 	ldrex	r3, [r3]
 800b37c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	f023 0310 	bic.w	r3, r3, #16
 800b384:	647b      	str	r3, [r7, #68]	@ 0x44
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	461a      	mov	r2, r3
 800b38c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b38e:	61bb      	str	r3, [r7, #24]
 800b390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b392:	6979      	ldr	r1, [r7, #20]
 800b394:	69ba      	ldr	r2, [r7, #24]
 800b396:	e841 2300 	strex	r3, r2, [r1]
 800b39a:	613b      	str	r3, [r7, #16]
   return(result);
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1e6      	bne.n	800b370 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2220      	movs	r2, #32
 800b3a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b3b6:	bf00      	nop
 800b3b8:	3754      	adds	r7, #84	@ 0x54
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr

0800b3c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b084      	sub	sp, #16
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f7ff fb71 	bl	800aac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3e6:	bf00      	nop
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b088      	sub	sp, #32
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	e853 3f00 	ldrex	r3, [r3]
 800b402:	60bb      	str	r3, [r7, #8]
   return(result);
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b40a:	61fb      	str	r3, [r7, #28]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	461a      	mov	r2, r3
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	61bb      	str	r3, [r7, #24]
 800b416:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b418:	6979      	ldr	r1, [r7, #20]
 800b41a:	69ba      	ldr	r2, [r7, #24]
 800b41c:	e841 2300 	strex	r3, r2, [r1]
 800b420:	613b      	str	r3, [r7, #16]
   return(result);
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1e6      	bne.n	800b3f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2220      	movs	r2, #32
 800b42c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7ff fb3d 	bl	800aab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b43a:	bf00      	nop
 800b43c:	3720      	adds	r7, #32
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
	...

0800b444 <MX_FATFS_Init>:


/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b448:	4904      	ldr	r1, [pc, #16]	@ (800b45c <MX_FATFS_Init+0x18>)
 800b44a:	4805      	ldr	r0, [pc, #20]	@ (800b460 <MX_FATFS_Init+0x1c>)
 800b44c:	f002 fb14 	bl	800da78 <FATFS_LinkDriver>
 800b450:	4603      	mov	r3, r0
 800b452:	461a      	mov	r2, r3
 800b454:	4b03      	ldr	r3, [pc, #12]	@ (800b464 <MX_FATFS_Init+0x20>)
 800b456:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b458:	bf00      	nop
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	200037b4 	.word	0x200037b4
 800b460:	2000000c 	.word	0x2000000c
 800b464:	200037b0 	.word	0x200037b0

0800b468 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b468:	b480      	push	{r7}
 800b46a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b46c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b46e:	4618      	mov	r0, r3
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <disk_status>:
    disk_ioctl
#endif
};


DSTATUS disk_status(BYTE pdrv) {
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	4603      	mov	r3, r0
 800b480:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 800b482:	79fb      	ldrb	r3, [r7, #7]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <disk_status+0x14>
        return 0;  // OK
 800b488:	2300      	movs	r3, #0
 800b48a:	e000      	b.n	800b48e <disk_status+0x16>
    }
    return STA_NOINIT;
 800b48c:	2301      	movs	r3, #1
}
 800b48e:	4618      	mov	r0, r3
 800b490:	370c      	adds	r7, #12
 800b492:	46bd      	mov	sp, r7
 800b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b498:	4770      	bx	lr

0800b49a <disk_initialize>:

DSTATUS disk_initialize(BYTE pdrv) {
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b082      	sub	sp, #8
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	71fb      	strb	r3, [r7, #7]
    if (pdrv == DEV_MMC) {
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d108      	bne.n	800b4bc <disk_initialize+0x22>
        return (SD_Init() == SD_OK) ? 0 : STA_NOINIT;
 800b4aa:	f7fb fddb 	bl	8007064 <SD_Init>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	bf14      	ite	ne
 800b4b4:	2301      	movne	r3, #1
 800b4b6:	2300      	moveq	r3, #0
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	e000      	b.n	800b4be <disk_initialize+0x24>
    }
    return STA_NOINIT;
 800b4bc:	2301      	movs	r3, #1
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <disk_read>:

DRESULT disk_read(BYTE pdrv, BYTE* buff, LBA_t sector, UINT count) {
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b086      	sub	sp, #24
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	603b      	str	r3, [r7, #0]
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	73fb      	strb	r3, [r7, #15]
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d102      	bne.n	800b4e2 <disk_read+0x1c>
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <disk_read+0x20>
 800b4e2:	2304      	movs	r3, #4
 800b4e4:	e01a      	b.n	800b51c <disk_read+0x56>

    for (UINT i = 0; i < count; i++) {
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	617b      	str	r3, [r7, #20]
 800b4ea:	e012      	b.n	800b512 <disk_read+0x4c>
        if (SD_ReadBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	0258      	lsls	r0, r3, #9
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	025b      	lsls	r3, r3, #9
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	f7fb fdf9 	bl	80070f4 <SD_ReadBlock>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d001      	beq.n	800b50c <disk_read+0x46>
            return RES_ERROR;
 800b508:	2301      	movs	r3, #1
 800b50a:	e007      	b.n	800b51c <disk_read+0x56>
    for (UINT i = 0; i < count; i++) {
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	3301      	adds	r3, #1
 800b510:	617b      	str	r3, [r7, #20]
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d3e8      	bcc.n	800b4ec <disk_read+0x26>
    }

    return RES_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <disk_write>:

DRESULT disk_write(BYTE pdrv, const BYTE* buff, LBA_t sector, UINT count) {
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60b9      	str	r1, [r7, #8]
 800b52c:	607a      	str	r2, [r7, #4]
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	4603      	mov	r3, r0
 800b532:	73fb      	strb	r3, [r7, #15]
#if FF_FS_READONLY
    return RES_WRPRT;
#else
    if (pdrv != DEV_MMC || count == 0) return RES_PARERR;
 800b534:	7bfb      	ldrb	r3, [r7, #15]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d102      	bne.n	800b540 <disk_write+0x1c>
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d101      	bne.n	800b544 <disk_write+0x20>
 800b540:	2304      	movs	r3, #4
 800b542:	e01a      	b.n	800b57a <disk_write+0x56>

    for (UINT i = 0; i < count; i++) {
 800b544:	2300      	movs	r3, #0
 800b546:	617b      	str	r3, [r7, #20]
 800b548:	e012      	b.n	800b570 <disk_write+0x4c>
        if (SD_WriteBlock((sector + i) * 512, buff + (512 * i)) != SD_OK)
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	4413      	add	r3, r2
 800b550:	0258      	lsls	r0, r3, #9
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	025b      	lsls	r3, r3, #9
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	4413      	add	r3, r2
 800b55a:	4619      	mov	r1, r3
 800b55c:	f7fb fe0e 	bl	800717c <SD_WriteBlock>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d001      	beq.n	800b56a <disk_write+0x46>
            return RES_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	e007      	b.n	800b57a <disk_write+0x56>
    for (UINT i = 0; i < count; i++) {
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	3301      	adds	r3, #1
 800b56e:	617b      	str	r3, [r7, #20]
 800b570:	697a      	ldr	r2, [r7, #20]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	429a      	cmp	r2, r3
 800b576:	d3e8      	bcc.n	800b54a <disk_write+0x26>
    }

    return RES_OK;
 800b578:	2300      	movs	r3, #0
#endif
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3718      	adds	r7, #24
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
	...

0800b584 <disk_ioctl>:

DRESULT disk_ioctl(BYTE pdrv, BYTE cmd, void* buff) {
 800b584:	b480      	push	{r7}
 800b586:	b083      	sub	sp, #12
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	603a      	str	r2, [r7, #0]
 800b58e:	71fb      	strb	r3, [r7, #7]
 800b590:	460b      	mov	r3, r1
 800b592:	71bb      	strb	r3, [r7, #6]
    if (pdrv != DEV_MMC) return RES_PARERR;
 800b594:	79fb      	ldrb	r3, [r7, #7]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <disk_ioctl+0x1a>
 800b59a:	2304      	movs	r3, #4
 800b59c:	e022      	b.n	800b5e4 <disk_ioctl+0x60>

    switch (cmd) {
 800b59e:	79bb      	ldrb	r3, [r7, #6]
 800b5a0:	2b03      	cmp	r3, #3
 800b5a2:	d81e      	bhi.n	800b5e2 <disk_ioctl+0x5e>
 800b5a4:	a201      	add	r2, pc, #4	@ (adr r2, 800b5ac <disk_ioctl+0x28>)
 800b5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5aa:	bf00      	nop
 800b5ac:	0800b5bd 	.word	0x0800b5bd
 800b5b0:	0800b5c1 	.word	0x0800b5c1
 800b5b4:	0800b5cd 	.word	0x0800b5cd
 800b5b8:	0800b5d9 	.word	0x0800b5d9
        case CTRL_SYNC:
            return RES_OK;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	e011      	b.n	800b5e4 <disk_ioctl+0x60>
        case GET_SECTOR_COUNT:
            *(DWORD*)buff = 32768;  // Exemplo: 16 MB
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b5c6:	601a      	str	r2, [r3, #0]
            return RES_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	e00b      	b.n	800b5e4 <disk_ioctl+0x60>
        case GET_SECTOR_SIZE:
            *(WORD*)buff = 512;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5d2:	801a      	strh	r2, [r3, #0]
            return RES_OK;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	e005      	b.n	800b5e4 <disk_ioctl+0x60>
        case GET_BLOCK_SIZE:
            *(DWORD*)buff = 1;
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	601a      	str	r2, [r3, #0]
            return RES_OK;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	e000      	b.n	800b5e4 <disk_ioctl+0x60>
    }

    return RES_PARERR;
 800b5e2:	2304      	movs	r3, #4
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b600:	89fb      	ldrh	r3, [r7, #14]
 800b602:	021b      	lsls	r3, r3, #8
 800b604:	b21a      	sxth	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	b21b      	sxth	r3, r3
 800b60c:	4313      	orrs	r3, r2
 800b60e:	b21b      	sxth	r3, r3
 800b610:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b612:	89fb      	ldrh	r3, [r7, #14]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	3303      	adds	r3, #3
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	021b      	lsls	r3, r3, #8
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	3202      	adds	r2, #2
 800b638:	7812      	ldrb	r2, [r2, #0]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	021b      	lsls	r3, r3, #8
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	3201      	adds	r2, #1
 800b646:	7812      	ldrb	r2, [r2, #0]
 800b648:	4313      	orrs	r3, r2
 800b64a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	021b      	lsls	r3, r3, #8
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	7812      	ldrb	r2, [r2, #0]
 800b654:	4313      	orrs	r3, r2
 800b656:	60fb      	str	r3, [r7, #12]
	return rv;
 800b658:	68fb      	ldr	r3, [r7, #12]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b666:	b480      	push	{r7}
 800b668:	b083      	sub	sp, #12
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	460b      	mov	r3, r1
 800b670:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	1c5a      	adds	r2, r3, #1
 800b676:	607a      	str	r2, [r7, #4]
 800b678:	887a      	ldrh	r2, [r7, #2]
 800b67a:	b2d2      	uxtb	r2, r2
 800b67c:	701a      	strb	r2, [r3, #0]
 800b67e:	887b      	ldrh	r3, [r7, #2]
 800b680:	0a1b      	lsrs	r3, r3, #8
 800b682:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	607a      	str	r2, [r7, #4]
 800b68a:	887a      	ldrh	r2, [r7, #2]
 800b68c:	b2d2      	uxtb	r2, r2
 800b68e:	701a      	strb	r2, [r3, #0]
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	1c5a      	adds	r2, r3, #1
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	701a      	strb	r2, [r3, #0]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	0a1b      	lsrs	r3, r3, #8
 800b6b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	607a      	str	r2, [r7, #4]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	b2d2      	uxtb	r2, r2
 800b6c2:	701a      	strb	r2, [r3, #0]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	0a1b      	lsrs	r3, r3, #8
 800b6c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	1c5a      	adds	r2, r3, #1
 800b6ce:	607a      	str	r2, [r7, #4]
 800b6d0:	683a      	ldr	r2, [r7, #0]
 800b6d2:	b2d2      	uxtb	r2, r2
 800b6d4:	701a      	strb	r2, [r3, #0]
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	0a1b      	lsrs	r3, r3, #8
 800b6da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	1c5a      	adds	r2, r3, #1
 800b6e0:	607a      	str	r2, [r7, #4]
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	b2d2      	uxtb	r2, r2
 800b6e6:	701a      	strb	r2, [r3, #0]
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b6f4:	b480      	push	{r7}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00d      	beq.n	800b72a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b70e:	693a      	ldr	r2, [r7, #16]
 800b710:	1c53      	adds	r3, r2, #1
 800b712:	613b      	str	r3, [r7, #16]
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	1c59      	adds	r1, r3, #1
 800b718:	6179      	str	r1, [r7, #20]
 800b71a:	7812      	ldrb	r2, [r2, #0]
 800b71c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3b01      	subs	r3, #1
 800b722:	607b      	str	r3, [r7, #4]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1f1      	bne.n	800b70e <mem_cpy+0x1a>
	}
}
 800b72a:	bf00      	nop
 800b72c:	371c      	adds	r7, #28
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b736:	b480      	push	{r7}
 800b738:	b087      	sub	sp, #28
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	1c5a      	adds	r2, r3, #1
 800b74a:	617a      	str	r2, [r7, #20]
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	b2d2      	uxtb	r2, r2
 800b750:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	3b01      	subs	r3, #1
 800b756:	607b      	str	r3, [r7, #4]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1f3      	bne.n	800b746 <mem_set+0x10>
}
 800b75e:	bf00      	nop
 800b760:	bf00      	nop
 800b762:	371c      	adds	r7, #28
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b76c:	b480      	push	{r7}
 800b76e:	b089      	sub	sp, #36	@ 0x24
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	61fb      	str	r3, [r7, #28]
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b780:	2300      	movs	r3, #0
 800b782:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b784:	69fb      	ldr	r3, [r7, #28]
 800b786:	1c5a      	adds	r2, r3, #1
 800b788:	61fa      	str	r2, [r7, #28]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	4619      	mov	r1, r3
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	1c5a      	adds	r2, r3, #1
 800b792:	61ba      	str	r2, [r7, #24]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	1acb      	subs	r3, r1, r3
 800b798:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	3b01      	subs	r3, #1
 800b79e:	607b      	str	r3, [r7, #4]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d002      	beq.n	800b7ac <mem_cmp+0x40>
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d0eb      	beq.n	800b784 <mem_cmp+0x18>

	return r;
 800b7ac:	697b      	ldr	r3, [r7, #20]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3724      	adds	r7, #36	@ 0x24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b7ba:	b480      	push	{r7}
 800b7bc:	b083      	sub	sp, #12
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
 800b7c2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b7c4:	e002      	b.n	800b7cc <chk_chr+0x12>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	607b      	str	r3, [r7, #4]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d005      	beq.n	800b7e0 <chk_chr+0x26>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	461a      	mov	r2, r3
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d1f2      	bne.n	800b7c6 <chk_chr+0xc>
	return *str;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	781b      	ldrb	r3, [r3, #0]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	60bb      	str	r3, [r7, #8]
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	e029      	b.n	800b858 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b804:	4a27      	ldr	r2, [pc, #156]	@ (800b8a4 <chk_lock+0xb4>)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	011b      	lsls	r3, r3, #4
 800b80a:	4413      	add	r3, r2
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d01d      	beq.n	800b84e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b812:	4a24      	ldr	r2, [pc, #144]	@ (800b8a4 <chk_lock+0xb4>)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	011b      	lsls	r3, r3, #4
 800b818:	4413      	add	r3, r2
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	429a      	cmp	r2, r3
 800b822:	d116      	bne.n	800b852 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b824:	4a1f      	ldr	r2, [pc, #124]	@ (800b8a4 <chk_lock+0xb4>)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	011b      	lsls	r3, r3, #4
 800b82a:	4413      	add	r3, r2
 800b82c:	3304      	adds	r3, #4
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b834:	429a      	cmp	r2, r3
 800b836:	d10c      	bne.n	800b852 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b838:	4a1a      	ldr	r2, [pc, #104]	@ (800b8a4 <chk_lock+0xb4>)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	011b      	lsls	r3, r3, #4
 800b83e:	4413      	add	r3, r2
 800b840:	3308      	adds	r3, #8
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b848:	429a      	cmp	r2, r3
 800b84a:	d102      	bne.n	800b852 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b84c:	e007      	b.n	800b85e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b84e:	2301      	movs	r3, #1
 800b850:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	3301      	adds	r3, #1
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d9d2      	bls.n	800b804 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b02      	cmp	r3, #2
 800b862:	d109      	bne.n	800b878 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d102      	bne.n	800b870 <chk_lock+0x80>
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d101      	bne.n	800b874 <chk_lock+0x84>
 800b870:	2300      	movs	r3, #0
 800b872:	e010      	b.n	800b896 <chk_lock+0xa6>
 800b874:	2312      	movs	r3, #18
 800b876:	e00e      	b.n	800b896 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d108      	bne.n	800b890 <chk_lock+0xa0>
 800b87e:	4a09      	ldr	r2, [pc, #36]	@ (800b8a4 <chk_lock+0xb4>)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	011b      	lsls	r3, r3, #4
 800b884:	4413      	add	r3, r2
 800b886:	330c      	adds	r3, #12
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b88e:	d101      	bne.n	800b894 <chk_lock+0xa4>
 800b890:	2310      	movs	r3, #16
 800b892:	e000      	b.n	800b896 <chk_lock+0xa6>
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	200037c0 	.word	0x200037c0

0800b8a8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	607b      	str	r3, [r7, #4]
 800b8b2:	e002      	b.n	800b8ba <enq_lock+0x12>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	607b      	str	r3, [r7, #4]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d806      	bhi.n	800b8ce <enq_lock+0x26>
 800b8c0:	4a09      	ldr	r2, [pc, #36]	@ (800b8e8 <enq_lock+0x40>)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	011b      	lsls	r3, r3, #4
 800b8c6:	4413      	add	r3, r2
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1f2      	bne.n	800b8b4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	bf14      	ite	ne
 800b8d4:	2301      	movne	r3, #1
 800b8d6:	2300      	moveq	r3, #0
 800b8d8:	b2db      	uxtb	r3, r3
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	200037c0 	.word	0x200037c0

0800b8ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	60fb      	str	r3, [r7, #12]
 800b8fa:	e01f      	b.n	800b93c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b8fc:	4a41      	ldr	r2, [pc, #260]	@ (800ba04 <inc_lock+0x118>)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	011b      	lsls	r3, r3, #4
 800b902:	4413      	add	r3, r2
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d113      	bne.n	800b936 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b90e:	4a3d      	ldr	r2, [pc, #244]	@ (800ba04 <inc_lock+0x118>)
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	011b      	lsls	r3, r3, #4
 800b914:	4413      	add	r3, r2
 800b916:	3304      	adds	r3, #4
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b91e:	429a      	cmp	r2, r3
 800b920:	d109      	bne.n	800b936 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b922:	4a38      	ldr	r2, [pc, #224]	@ (800ba04 <inc_lock+0x118>)
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	011b      	lsls	r3, r3, #4
 800b928:	4413      	add	r3, r2
 800b92a:	3308      	adds	r3, #8
 800b92c:	681a      	ldr	r2, [r3, #0]
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b932:	429a      	cmp	r2, r3
 800b934:	d006      	beq.n	800b944 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3301      	adds	r3, #1
 800b93a:	60fb      	str	r3, [r7, #12]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d9dc      	bls.n	800b8fc <inc_lock+0x10>
 800b942:	e000      	b.n	800b946 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b944:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2b02      	cmp	r3, #2
 800b94a:	d132      	bne.n	800b9b2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b94c:	2300      	movs	r3, #0
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	e002      	b.n	800b958 <inc_lock+0x6c>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	3301      	adds	r3, #1
 800b956:	60fb      	str	r3, [r7, #12]
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d806      	bhi.n	800b96c <inc_lock+0x80>
 800b95e:	4a29      	ldr	r2, [pc, #164]	@ (800ba04 <inc_lock+0x118>)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	011b      	lsls	r3, r3, #4
 800b964:	4413      	add	r3, r2
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d1f2      	bne.n	800b952 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d101      	bne.n	800b976 <inc_lock+0x8a>
 800b972:	2300      	movs	r3, #0
 800b974:	e040      	b.n	800b9f8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	4922      	ldr	r1, [pc, #136]	@ (800ba04 <inc_lock+0x118>)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	011b      	lsls	r3, r3, #4
 800b980:	440b      	add	r3, r1
 800b982:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	689a      	ldr	r2, [r3, #8]
 800b988:	491e      	ldr	r1, [pc, #120]	@ (800ba04 <inc_lock+0x118>)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	011b      	lsls	r3, r3, #4
 800b98e:	440b      	add	r3, r1
 800b990:	3304      	adds	r3, #4
 800b992:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	695a      	ldr	r2, [r3, #20]
 800b998:	491a      	ldr	r1, [pc, #104]	@ (800ba04 <inc_lock+0x118>)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	011b      	lsls	r3, r3, #4
 800b99e:	440b      	add	r3, r1
 800b9a0:	3308      	adds	r3, #8
 800b9a2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b9a4:	4a17      	ldr	r2, [pc, #92]	@ (800ba04 <inc_lock+0x118>)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	011b      	lsls	r3, r3, #4
 800b9aa:	4413      	add	r3, r2
 800b9ac:	330c      	adds	r3, #12
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d009      	beq.n	800b9cc <inc_lock+0xe0>
 800b9b8:	4a12      	ldr	r2, [pc, #72]	@ (800ba04 <inc_lock+0x118>)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	011b      	lsls	r3, r3, #4
 800b9be:	4413      	add	r3, r2
 800b9c0:	330c      	adds	r3, #12
 800b9c2:	881b      	ldrh	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <inc_lock+0xe0>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	e015      	b.n	800b9f8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d108      	bne.n	800b9e4 <inc_lock+0xf8>
 800b9d2:	4a0c      	ldr	r2, [pc, #48]	@ (800ba04 <inc_lock+0x118>)
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	011b      	lsls	r3, r3, #4
 800b9d8:	4413      	add	r3, r2
 800b9da:	330c      	adds	r3, #12
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	e001      	b.n	800b9e8 <inc_lock+0xfc>
 800b9e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b9e8:	4906      	ldr	r1, [pc, #24]	@ (800ba04 <inc_lock+0x118>)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	011b      	lsls	r3, r3, #4
 800b9ee:	440b      	add	r3, r1
 800b9f0:	330c      	adds	r3, #12
 800b9f2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	3301      	adds	r3, #1
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	200037c0 	.word	0x200037c0

0800ba08 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3b01      	subs	r3, #1
 800ba14:	607b      	str	r3, [r7, #4]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d825      	bhi.n	800ba68 <dec_lock+0x60>
		n = Files[i].ctr;
 800ba1c:	4a17      	ldr	r2, [pc, #92]	@ (800ba7c <dec_lock+0x74>)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	011b      	lsls	r3, r3, #4
 800ba22:	4413      	add	r3, r2
 800ba24:	330c      	adds	r3, #12
 800ba26:	881b      	ldrh	r3, [r3, #0]
 800ba28:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ba2a:	89fb      	ldrh	r3, [r7, #14]
 800ba2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba30:	d101      	bne.n	800ba36 <dec_lock+0x2e>
 800ba32:	2300      	movs	r3, #0
 800ba34:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ba36:	89fb      	ldrh	r3, [r7, #14]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <dec_lock+0x3a>
 800ba3c:	89fb      	ldrh	r3, [r7, #14]
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ba42:	4a0e      	ldr	r2, [pc, #56]	@ (800ba7c <dec_lock+0x74>)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	011b      	lsls	r3, r3, #4
 800ba48:	4413      	add	r3, r2
 800ba4a:	330c      	adds	r3, #12
 800ba4c:	89fa      	ldrh	r2, [r7, #14]
 800ba4e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ba50:	89fb      	ldrh	r3, [r7, #14]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d105      	bne.n	800ba62 <dec_lock+0x5a>
 800ba56:	4a09      	ldr	r2, [pc, #36]	@ (800ba7c <dec_lock+0x74>)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	011b      	lsls	r3, r3, #4
 800ba5c:	4413      	add	r3, r2
 800ba5e:	2200      	movs	r2, #0
 800ba60:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	737b      	strb	r3, [r7, #13]
 800ba66:	e001      	b.n	800ba6c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ba68:	2302      	movs	r3, #2
 800ba6a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ba6c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3714      	adds	r7, #20
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	200037c0 	.word	0x200037c0

0800ba80 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ba88:	2300      	movs	r3, #0
 800ba8a:	60fb      	str	r3, [r7, #12]
 800ba8c:	e010      	b.n	800bab0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ba8e:	4a0d      	ldr	r2, [pc, #52]	@ (800bac4 <clear_lock+0x44>)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	011b      	lsls	r3, r3, #4
 800ba94:	4413      	add	r3, r2
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d105      	bne.n	800baaa <clear_lock+0x2a>
 800ba9e:	4a09      	ldr	r2, [pc, #36]	@ (800bac4 <clear_lock+0x44>)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	011b      	lsls	r3, r3, #4
 800baa4:	4413      	add	r3, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3301      	adds	r3, #1
 800baae:	60fb      	str	r3, [r7, #12]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d9eb      	bls.n	800ba8e <clear_lock+0xe>
	}
}
 800bab6:	bf00      	nop
 800bab8:	bf00      	nop
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	200037c0 	.word	0x200037c0

0800bac8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	78db      	ldrb	r3, [r3, #3]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d034      	beq.n	800bb46 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	7858      	ldrb	r0, [r3, #1]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800baec:	2301      	movs	r3, #1
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	f7ff fd18 	bl	800b524 <disk_write>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d002      	beq.n	800bb00 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bafa:	2301      	movs	r3, #1
 800bafc:	73fb      	strb	r3, [r7, #15]
 800bafe:	e022      	b.n	800bb46 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a1b      	ldr	r3, [r3, #32]
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	1ad2      	subs	r2, r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	699b      	ldr	r3, [r3, #24]
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d217      	bcs.n	800bb46 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	789b      	ldrb	r3, [r3, #2]
 800bb1a:	613b      	str	r3, [r7, #16]
 800bb1c:	e010      	b.n	800bb40 <sync_window+0x78>
					wsect += fs->fsize;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	697a      	ldr	r2, [r7, #20]
 800bb24:	4413      	add	r3, r2
 800bb26:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	7858      	ldrb	r0, [r3, #1]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb32:	2301      	movs	r3, #1
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	f7ff fcf5 	bl	800b524 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	613b      	str	r3, [r7, #16]
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d8eb      	bhi.n	800bb1e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3718      	adds	r7, #24
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d01b      	beq.n	800bba0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7ff ffad 	bl	800bac8 <sync_window>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d113      	bne.n	800bba0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	7858      	ldrb	r0, [r3, #1]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bb82:	2301      	movs	r3, #1
 800bb84:	683a      	ldr	r2, [r7, #0]
 800bb86:	f7ff fc9e 	bl	800b4c6 <disk_read>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d004      	beq.n	800bb9a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bb90:	f04f 33ff 	mov.w	r3, #4294967295
 800bb94:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bb96:	2301      	movs	r3, #1
 800bb98:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
	...

0800bbac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f7ff ff87 	bl	800bac8 <sync_window>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bbbe:	7bfb      	ldrb	r3, [r7, #15]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d158      	bne.n	800bc76 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	2b03      	cmp	r3, #3
 800bbca:	d148      	bne.n	800bc5e <sync_fs+0xb2>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	791b      	ldrb	r3, [r3, #4]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d144      	bne.n	800bc5e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	3330      	adds	r3, #48	@ 0x30
 800bbd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbdc:	2100      	movs	r1, #0
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff fda9 	bl	800b736 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	3330      	adds	r3, #48	@ 0x30
 800bbe8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bbec:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7ff fd38 	bl	800b666 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	3330      	adds	r3, #48	@ 0x30
 800bbfa:	4921      	ldr	r1, [pc, #132]	@ (800bc80 <sync_fs+0xd4>)
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7ff fd4d 	bl	800b69c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	3330      	adds	r3, #48	@ 0x30
 800bc06:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bc0a:	491e      	ldr	r1, [pc, #120]	@ (800bc84 <sync_fs+0xd8>)
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7ff fd45 	bl	800b69c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	3330      	adds	r3, #48	@ 0x30
 800bc16:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	4610      	mov	r0, r2
 800bc22:	f7ff fd3b 	bl	800b69c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	3330      	adds	r3, #48	@ 0x30
 800bc2a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	4619      	mov	r1, r3
 800bc34:	4610      	mov	r0, r2
 800bc36:	f7ff fd31 	bl	800b69c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	69db      	ldr	r3, [r3, #28]
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	7858      	ldrb	r0, [r3, #1]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc52:	2301      	movs	r3, #1
 800bc54:	f7ff fc66 	bl	800b524 <disk_write>
			fs->fsi_flag = 0;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	785b      	ldrb	r3, [r3, #1]
 800bc62:	2200      	movs	r2, #0
 800bc64:	2100      	movs	r1, #0
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7ff fc8c 	bl	800b584 <disk_ioctl>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d001      	beq.n	800bc76 <sync_fs+0xca>
 800bc72:	2301      	movs	r3, #1
 800bc74:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bc76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	41615252 	.word	0x41615252
 800bc84:	61417272 	.word	0x61417272

0800bc88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	3b02      	subs	r3, #2
 800bc96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	695b      	ldr	r3, [r3, #20]
 800bc9c:	3b02      	subs	r3, #2
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d301      	bcc.n	800bca8 <clust2sect+0x20>
 800bca4:	2300      	movs	r3, #0
 800bca6:	e008      	b.n	800bcba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	895b      	ldrh	r3, [r3, #10]
 800bcac:	461a      	mov	r2, r3
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	fb03 f202 	mul.w	r2, r3, r2
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb8:	4413      	add	r3, r2
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	370c      	adds	r7, #12
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b086      	sub	sp, #24
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d904      	bls.n	800bce6 <get_fat+0x20>
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d302      	bcc.n	800bcec <get_fat+0x26>
		val = 1;	/* Internal error */
 800bce6:	2301      	movs	r3, #1
 800bce8:	617b      	str	r3, [r7, #20]
 800bcea:	e08e      	b.n	800be0a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bcec:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	781b      	ldrb	r3, [r3, #0]
 800bcf6:	2b03      	cmp	r3, #3
 800bcf8:	d061      	beq.n	800bdbe <get_fat+0xf8>
 800bcfa:	2b03      	cmp	r3, #3
 800bcfc:	dc7b      	bgt.n	800bdf6 <get_fat+0x130>
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d002      	beq.n	800bd08 <get_fat+0x42>
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d041      	beq.n	800bd8a <get_fat+0xc4>
 800bd06:	e076      	b.n	800bdf6 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	60fb      	str	r3, [r7, #12]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	085b      	lsrs	r3, r3, #1
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	4413      	add	r3, r2
 800bd14:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	6a1a      	ldr	r2, [r3, #32]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	0a5b      	lsrs	r3, r3, #9
 800bd1e:	4413      	add	r3, r2
 800bd20:	4619      	mov	r1, r3
 800bd22:	6938      	ldr	r0, [r7, #16]
 800bd24:	f7ff ff14 	bl	800bb50 <move_window>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d166      	bne.n	800bdfc <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	1c5a      	adds	r2, r3, #1
 800bd32:	60fa      	str	r2, [r7, #12]
 800bd34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd38:	693a      	ldr	r2, [r7, #16]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd40:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	6a1a      	ldr	r2, [r3, #32]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	0a5b      	lsrs	r3, r3, #9
 800bd4a:	4413      	add	r3, r2
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6938      	ldr	r0, [r7, #16]
 800bd50:	f7ff fefe 	bl	800bb50 <move_window>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d152      	bne.n	800be00 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd60:	693a      	ldr	r2, [r7, #16]
 800bd62:	4413      	add	r3, r2
 800bd64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bd68:	021b      	lsls	r3, r3, #8
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	f003 0301 	and.w	r3, r3, #1
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d002      	beq.n	800bd80 <get_fat+0xba>
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	091b      	lsrs	r3, r3, #4
 800bd7e:	e002      	b.n	800bd86 <get_fat+0xc0>
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bd86:	617b      	str	r3, [r7, #20]
			break;
 800bd88:	e03f      	b.n	800be0a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	6a1a      	ldr	r2, [r3, #32]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	0a1b      	lsrs	r3, r3, #8
 800bd92:	4413      	add	r3, r2
 800bd94:	4619      	mov	r1, r3
 800bd96:	6938      	ldr	r0, [r7, #16]
 800bd98:	f7ff feda 	bl	800bb50 <move_window>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d130      	bne.n	800be04 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	005b      	lsls	r3, r3, #1
 800bdac:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bdb0:	4413      	add	r3, r2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff fc1c 	bl	800b5f0 <ld_word>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	617b      	str	r3, [r7, #20]
			break;
 800bdbc:	e025      	b.n	800be0a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	6a1a      	ldr	r2, [r3, #32]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	09db      	lsrs	r3, r3, #7
 800bdc6:	4413      	add	r3, r2
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6938      	ldr	r0, [r7, #16]
 800bdcc:	f7ff fec0 	bl	800bb50 <move_window>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d118      	bne.n	800be08 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bde4:	4413      	add	r3, r2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7ff fc1a 	bl	800b620 <ld_dword>
 800bdec:	4603      	mov	r3, r0
 800bdee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bdf2:	617b      	str	r3, [r7, #20]
			break;
 800bdf4:	e009      	b.n	800be0a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	617b      	str	r3, [r7, #20]
 800bdfa:	e006      	b.n	800be0a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bdfc:	bf00      	nop
 800bdfe:	e004      	b.n	800be0a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800be00:	bf00      	nop
 800be02:	e002      	b.n	800be0a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800be04:	bf00      	nop
 800be06:	e000      	b.n	800be0a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800be08:	bf00      	nop
		}
	}

	return val;
 800be0a:	697b      	ldr	r3, [r7, #20]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3718      	adds	r7, #24
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800be14:	b590      	push	{r4, r7, lr}
 800be16:	b089      	sub	sp, #36	@ 0x24
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800be20:	2302      	movs	r3, #2
 800be22:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	2b01      	cmp	r3, #1
 800be28:	f240 80d9 	bls.w	800bfde <put_fat+0x1ca>
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	695b      	ldr	r3, [r3, #20]
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	429a      	cmp	r2, r3
 800be34:	f080 80d3 	bcs.w	800bfde <put_fat+0x1ca>
		switch (fs->fs_type) {
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	2b03      	cmp	r3, #3
 800be3e:	f000 8096 	beq.w	800bf6e <put_fat+0x15a>
 800be42:	2b03      	cmp	r3, #3
 800be44:	f300 80cb 	bgt.w	800bfde <put_fat+0x1ca>
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d002      	beq.n	800be52 <put_fat+0x3e>
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d06e      	beq.n	800bf2e <put_fat+0x11a>
 800be50:	e0c5      	b.n	800bfde <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	61bb      	str	r3, [r7, #24]
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	085b      	lsrs	r3, r3, #1
 800be5a:	69ba      	ldr	r2, [r7, #24]
 800be5c:	4413      	add	r3, r2
 800be5e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6a1a      	ldr	r2, [r3, #32]
 800be64:	69bb      	ldr	r3, [r7, #24]
 800be66:	0a5b      	lsrs	r3, r3, #9
 800be68:	4413      	add	r3, r2
 800be6a:	4619      	mov	r1, r3
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f7ff fe6f 	bl	800bb50 <move_window>
 800be72:	4603      	mov	r3, r0
 800be74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be76:	7ffb      	ldrb	r3, [r7, #31]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f040 80a9 	bne.w	800bfd0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	1c59      	adds	r1, r3, #1
 800be88:	61b9      	str	r1, [r7, #24]
 800be8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be8e:	4413      	add	r3, r2
 800be90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	f003 0301 	and.w	r3, r3, #1
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00d      	beq.n	800beb8 <put_fat+0xa4>
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	b25b      	sxtb	r3, r3
 800bea2:	f003 030f 	and.w	r3, r3, #15
 800bea6:	b25a      	sxtb	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	011b      	lsls	r3, r3, #4
 800beae:	b25b      	sxtb	r3, r3
 800beb0:	4313      	orrs	r3, r2
 800beb2:	b25b      	sxtb	r3, r3
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	e001      	b.n	800bebc <put_fat+0xa8>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2201      	movs	r2, #1
 800bec4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6a1a      	ldr	r2, [r3, #32]
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	0a5b      	lsrs	r3, r3, #9
 800bece:	4413      	add	r3, r2
 800bed0:	4619      	mov	r1, r3
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f7ff fe3c 	bl	800bb50 <move_window>
 800bed8:	4603      	mov	r3, r0
 800beda:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bedc:	7ffb      	ldrb	r3, [r7, #31]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d178      	bne.n	800bfd4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beee:	4413      	add	r3, r2
 800bef0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	f003 0301 	and.w	r3, r3, #1
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d003      	beq.n	800bf04 <put_fat+0xf0>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	091b      	lsrs	r3, r3, #4
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	e00e      	b.n	800bf22 <put_fat+0x10e>
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	b25b      	sxtb	r3, r3
 800bf0a:	f023 030f 	bic.w	r3, r3, #15
 800bf0e:	b25a      	sxtb	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	0a1b      	lsrs	r3, r3, #8
 800bf14:	b25b      	sxtb	r3, r3
 800bf16:	f003 030f 	and.w	r3, r3, #15
 800bf1a:	b25b      	sxtb	r3, r3
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	b25b      	sxtb	r3, r3
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	697a      	ldr	r2, [r7, #20]
 800bf24:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2201      	movs	r2, #1
 800bf2a:	70da      	strb	r2, [r3, #3]
			break;
 800bf2c:	e057      	b.n	800bfde <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6a1a      	ldr	r2, [r3, #32]
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	0a1b      	lsrs	r3, r3, #8
 800bf36:	4413      	add	r3, r2
 800bf38:	4619      	mov	r1, r3
 800bf3a:	68f8      	ldr	r0, [r7, #12]
 800bf3c:	f7ff fe08 	bl	800bb50 <move_window>
 800bf40:	4603      	mov	r3, r0
 800bf42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf44:	7ffb      	ldrb	r3, [r7, #31]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d146      	bne.n	800bfd8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	005b      	lsls	r3, r3, #1
 800bf54:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bf58:	4413      	add	r3, r2
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	b292      	uxth	r2, r2
 800bf5e:	4611      	mov	r1, r2
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7ff fb80 	bl	800b666 <st_word>
			fs->wflag = 1;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	70da      	strb	r2, [r3, #3]
			break;
 800bf6c:	e037      	b.n	800bfde <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6a1a      	ldr	r2, [r3, #32]
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	09db      	lsrs	r3, r3, #7
 800bf76:	4413      	add	r3, r2
 800bf78:	4619      	mov	r1, r3
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f7ff fde8 	bl	800bb50 <move_window>
 800bf80:	4603      	mov	r3, r0
 800bf82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bf84:	7ffb      	ldrb	r3, [r7, #31]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d128      	bne.n	800bfdc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bf9e:	4413      	add	r3, r2
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7ff fb3d 	bl	800b620 <ld_dword>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bfac:	4323      	orrs	r3, r4
 800bfae:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bfbe:	4413      	add	r3, r2
 800bfc0:	6879      	ldr	r1, [r7, #4]
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7ff fb6a 	bl	800b69c <st_dword>
			fs->wflag = 1;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	70da      	strb	r2, [r3, #3]
			break;
 800bfce:	e006      	b.n	800bfde <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bfd0:	bf00      	nop
 800bfd2:	e004      	b.n	800bfde <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bfd4:	bf00      	nop
 800bfd6:	e002      	b.n	800bfde <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bfd8:	bf00      	nop
 800bfda:	e000      	b.n	800bfde <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bfdc:	bf00      	nop
		}
	}
	return res;
 800bfde:	7ffb      	ldrb	r3, [r7, #31]
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3724      	adds	r7, #36	@ 0x24
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd90      	pop	{r4, r7, pc}

0800bfe8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b088      	sub	sp, #32
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bff4:	2300      	movs	r3, #0
 800bff6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d904      	bls.n	800c00e <remove_chain+0x26>
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d301      	bcc.n	800c012 <remove_chain+0x2a>
 800c00e:	2302      	movs	r3, #2
 800c010:	e04b      	b.n	800c0aa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00c      	beq.n	800c032 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c018:	f04f 32ff 	mov.w	r2, #4294967295
 800c01c:	6879      	ldr	r1, [r7, #4]
 800c01e:	69b8      	ldr	r0, [r7, #24]
 800c020:	f7ff fef8 	bl	800be14 <put_fat>
 800c024:	4603      	mov	r3, r0
 800c026:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c028:	7ffb      	ldrb	r3, [r7, #31]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <remove_chain+0x4a>
 800c02e:	7ffb      	ldrb	r3, [r7, #31]
 800c030:	e03b      	b.n	800c0aa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c032:	68b9      	ldr	r1, [r7, #8]
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f7ff fe46 	bl	800bcc6 <get_fat>
 800c03a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d031      	beq.n	800c0a6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d101      	bne.n	800c04c <remove_chain+0x64>
 800c048:	2302      	movs	r3, #2
 800c04a:	e02e      	b.n	800c0aa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c052:	d101      	bne.n	800c058 <remove_chain+0x70>
 800c054:	2301      	movs	r3, #1
 800c056:	e028      	b.n	800c0aa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c058:	2200      	movs	r2, #0
 800c05a:	68b9      	ldr	r1, [r7, #8]
 800c05c:	69b8      	ldr	r0, [r7, #24]
 800c05e:	f7ff fed9 	bl	800be14 <put_fat>
 800c062:	4603      	mov	r3, r0
 800c064:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c066:	7ffb      	ldrb	r3, [r7, #31]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d001      	beq.n	800c070 <remove_chain+0x88>
 800c06c:	7ffb      	ldrb	r3, [r7, #31]
 800c06e:	e01c      	b.n	800c0aa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	691a      	ldr	r2, [r3, #16]
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	695b      	ldr	r3, [r3, #20]
 800c078:	3b02      	subs	r3, #2
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d20b      	bcs.n	800c096 <remove_chain+0xae>
			fs->free_clst++;
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	791b      	ldrb	r3, [r3, #4]
 800c08c:	f043 0301 	orr.w	r3, r3, #1
 800c090:	b2da      	uxtb	r2, r3
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	695b      	ldr	r3, [r3, #20]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d3c6      	bcc.n	800c032 <remove_chain+0x4a>
 800c0a4:	e000      	b.n	800c0a8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c0a6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3720      	adds	r7, #32
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b088      	sub	sp, #32
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d10d      	bne.n	800c0e4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	68db      	ldr	r3, [r3, #12]
 800c0cc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d004      	beq.n	800c0de <create_chain+0x2c>
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	695b      	ldr	r3, [r3, #20]
 800c0d8:	69ba      	ldr	r2, [r7, #24]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d31b      	bcc.n	800c116 <create_chain+0x64>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	61bb      	str	r3, [r7, #24]
 800c0e2:	e018      	b.n	800c116 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c0e4:	6839      	ldr	r1, [r7, #0]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7ff fded 	bl	800bcc6 <get_fat>
 800c0ec:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d801      	bhi.n	800c0f8 <create_chain+0x46>
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	e070      	b.n	800c1da <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0fe:	d101      	bne.n	800c104 <create_chain+0x52>
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	e06a      	b.n	800c1da <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	695b      	ldr	r3, [r3, #20]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d201      	bcs.n	800c112 <create_chain+0x60>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	e063      	b.n	800c1da <create_chain+0x128>
		scl = clst;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	3301      	adds	r3, #1
 800c11e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	695b      	ldr	r3, [r3, #20]
 800c124:	69fa      	ldr	r2, [r7, #28]
 800c126:	429a      	cmp	r2, r3
 800c128:	d307      	bcc.n	800c13a <create_chain+0x88>
				ncl = 2;
 800c12a:	2302      	movs	r3, #2
 800c12c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c12e:	69fa      	ldr	r2, [r7, #28]
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	429a      	cmp	r2, r3
 800c134:	d901      	bls.n	800c13a <create_chain+0x88>
 800c136:	2300      	movs	r3, #0
 800c138:	e04f      	b.n	800c1da <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c13a:	69f9      	ldr	r1, [r7, #28]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7ff fdc2 	bl	800bcc6 <get_fat>
 800c142:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00e      	beq.n	800c168 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d003      	beq.n	800c158 <create_chain+0xa6>
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c156:	d101      	bne.n	800c15c <create_chain+0xaa>
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	e03e      	b.n	800c1da <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c15c:	69fa      	ldr	r2, [r7, #28]
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	429a      	cmp	r2, r3
 800c162:	d1da      	bne.n	800c11a <create_chain+0x68>
 800c164:	2300      	movs	r3, #0
 800c166:	e038      	b.n	800c1da <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c168:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c16a:	f04f 32ff 	mov.w	r2, #4294967295
 800c16e:	69f9      	ldr	r1, [r7, #28]
 800c170:	6938      	ldr	r0, [r7, #16]
 800c172:	f7ff fe4f 	bl	800be14 <put_fat>
 800c176:	4603      	mov	r3, r0
 800c178:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c17a:	7dfb      	ldrb	r3, [r7, #23]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d109      	bne.n	800c194 <create_chain+0xe2>
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d006      	beq.n	800c194 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c186:	69fa      	ldr	r2, [r7, #28]
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6938      	ldr	r0, [r7, #16]
 800c18c:	f7ff fe42 	bl	800be14 <put_fat>
 800c190:	4603      	mov	r3, r0
 800c192:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c194:	7dfb      	ldrb	r3, [r7, #23]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d116      	bne.n	800c1c8 <create_chain+0x116>
		fs->last_clst = ncl;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	69fa      	ldr	r2, [r7, #28]
 800c19e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	691a      	ldr	r2, [r3, #16]
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	695b      	ldr	r3, [r3, #20]
 800c1a8:	3b02      	subs	r3, #2
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d804      	bhi.n	800c1b8 <create_chain+0x106>
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	1e5a      	subs	r2, r3, #1
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	791b      	ldrb	r3, [r3, #4]
 800c1bc:	f043 0301 	orr.w	r3, r3, #1
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	711a      	strb	r2, [r3, #4]
 800c1c6:	e007      	b.n	800c1d8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c1c8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d102      	bne.n	800c1d4 <create_chain+0x122>
 800c1ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c1d2:	e000      	b.n	800c1d6 <create_chain+0x124>
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c1d8:	69fb      	ldr	r3, [r7, #28]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3720      	adds	r7, #32
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c1e2:	b480      	push	{r7}
 800c1e4:	b087      	sub	sp, #28
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
 800c1ea:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	0a5b      	lsrs	r3, r3, #9
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	8952      	ldrh	r2, [r2, #10]
 800c202:	fbb3 f3f2 	udiv	r3, r3, r2
 800c206:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	1d1a      	adds	r2, r3, #4
 800c20c:	613a      	str	r2, [r7, #16]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d101      	bne.n	800c21c <clmt_clust+0x3a>
 800c218:	2300      	movs	r3, #0
 800c21a:	e010      	b.n	800c23e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c21c:	697a      	ldr	r2, [r7, #20]
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	429a      	cmp	r2, r3
 800c222:	d307      	bcc.n	800c234 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c224:	697a      	ldr	r2, [r7, #20]
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	617b      	str	r3, [r7, #20]
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	3304      	adds	r3, #4
 800c230:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c232:	e7e9      	b.n	800c208 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c234:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	4413      	add	r3, r2
}
 800c23e:	4618      	mov	r0, r3
 800c240:	371c      	adds	r7, #28
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b086      	sub	sp, #24
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c260:	d204      	bcs.n	800c26c <dir_sdi+0x22>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	f003 031f 	and.w	r3, r3, #31
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c26c:	2302      	movs	r3, #2
 800c26e:	e063      	b.n	800c338 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d106      	bne.n	800c290 <dir_sdi+0x46>
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	2b02      	cmp	r3, #2
 800c288:	d902      	bls.n	800c290 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c28e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d10c      	bne.n	800c2b0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	095b      	lsrs	r3, r3, #5
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	8912      	ldrh	r2, [r2, #8]
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d301      	bcc.n	800c2a6 <dir_sdi+0x5c>
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	e048      	b.n	800c338 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	61da      	str	r2, [r3, #28]
 800c2ae:	e029      	b.n	800c304 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	895b      	ldrh	r3, [r3, #10]
 800c2b4:	025b      	lsls	r3, r3, #9
 800c2b6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2b8:	e019      	b.n	800c2ee <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6979      	ldr	r1, [r7, #20]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7ff fd01 	bl	800bcc6 <get_fat>
 800c2c4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2cc:	d101      	bne.n	800c2d2 <dir_sdi+0x88>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e032      	b.n	800c338 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d904      	bls.n	800c2e2 <dir_sdi+0x98>
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	695b      	ldr	r3, [r3, #20]
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d301      	bcc.n	800c2e6 <dir_sdi+0x9c>
 800c2e2:	2302      	movs	r3, #2
 800c2e4:	e028      	b.n	800c338 <dir_sdi+0xee>
			ofs -= csz;
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d2e1      	bcs.n	800c2ba <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c2f6:	6979      	ldr	r1, [r7, #20]
 800c2f8:	6938      	ldr	r0, [r7, #16]
 800c2fa:	f7ff fcc5 	bl	800bc88 <clust2sect>
 800c2fe:	4602      	mov	r2, r0
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	69db      	ldr	r3, [r3, #28]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d101      	bne.n	800c316 <dir_sdi+0xcc>
 800c312:	2302      	movs	r3, #2
 800c314:	e010      	b.n	800c338 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	69da      	ldr	r2, [r3, #28]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	0a5b      	lsrs	r3, r3, #9
 800c31e:	441a      	add	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c330:	441a      	add	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c336:	2300      	movs	r3, #0
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3718      	adds	r7, #24
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b086      	sub	sp, #24
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	695b      	ldr	r3, [r3, #20]
 800c354:	3320      	adds	r3, #32
 800c356:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	69db      	ldr	r3, [r3, #28]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d003      	beq.n	800c368 <dir_next+0x28>
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c366:	d301      	bcc.n	800c36c <dir_next+0x2c>
 800c368:	2304      	movs	r3, #4
 800c36a:	e0aa      	b.n	800c4c2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c372:	2b00      	cmp	r3, #0
 800c374:	f040 8098 	bne.w	800c4a8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	69db      	ldr	r3, [r3, #28]
 800c37c:	1c5a      	adds	r2, r3, #1
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d10b      	bne.n	800c3a2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	095b      	lsrs	r3, r3, #5
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	8912      	ldrh	r2, [r2, #8]
 800c392:	4293      	cmp	r3, r2
 800c394:	f0c0 8088 	bcc.w	800c4a8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	61da      	str	r2, [r3, #28]
 800c39e:	2304      	movs	r3, #4
 800c3a0:	e08f      	b.n	800c4c2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	0a5b      	lsrs	r3, r3, #9
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	8952      	ldrh	r2, [r2, #10]
 800c3aa:	3a01      	subs	r2, #1
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d17a      	bne.n	800c4a8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	4610      	mov	r0, r2
 800c3bc:	f7ff fc83 	bl	800bcc6 <get_fat>
 800c3c0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d801      	bhi.n	800c3cc <dir_next+0x8c>
 800c3c8:	2302      	movs	r3, #2
 800c3ca:	e07a      	b.n	800c4c2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d2:	d101      	bne.n	800c3d8 <dir_next+0x98>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e074      	b.n	800c4c2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	695b      	ldr	r3, [r3, #20]
 800c3dc:	697a      	ldr	r2, [r7, #20]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d358      	bcc.n	800c494 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d104      	bne.n	800c3f2 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	61da      	str	r2, [r3, #28]
 800c3ee:	2304      	movs	r3, #4
 800c3f0:	e067      	b.n	800c4c2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	4610      	mov	r0, r2
 800c3fc:	f7ff fe59 	bl	800c0b2 <create_chain>
 800c400:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d101      	bne.n	800c40c <dir_next+0xcc>
 800c408:	2307      	movs	r3, #7
 800c40a:	e05a      	b.n	800c4c2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d101      	bne.n	800c416 <dir_next+0xd6>
 800c412:	2302      	movs	r3, #2
 800c414:	e055      	b.n	800c4c2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c41c:	d101      	bne.n	800c422 <dir_next+0xe2>
 800c41e:	2301      	movs	r3, #1
 800c420:	e04f      	b.n	800c4c2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f7ff fb50 	bl	800bac8 <sync_window>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <dir_next+0xf2>
 800c42e:	2301      	movs	r3, #1
 800c430:	e047      	b.n	800c4c2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	3330      	adds	r3, #48	@ 0x30
 800c436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c43a:	2100      	movs	r1, #0
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff f97a 	bl	800b736 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c442:	2300      	movs	r3, #0
 800c444:	613b      	str	r3, [r7, #16]
 800c446:	6979      	ldr	r1, [r7, #20]
 800c448:	68f8      	ldr	r0, [r7, #12]
 800c44a:	f7ff fc1d 	bl	800bc88 <clust2sect>
 800c44e:	4602      	mov	r2, r0
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c454:	e012      	b.n	800c47c <dir_next+0x13c>
						fs->wflag = 1;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2201      	movs	r2, #1
 800c45a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f7ff fb33 	bl	800bac8 <sync_window>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d001      	beq.n	800c46c <dir_next+0x12c>
 800c468:	2301      	movs	r3, #1
 800c46a:	e02a      	b.n	800c4c2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	3301      	adds	r3, #1
 800c470:	613b      	str	r3, [r7, #16]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	895b      	ldrh	r3, [r3, #10]
 800c480:	461a      	mov	r2, r3
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	4293      	cmp	r3, r2
 800c486:	d3e6      	bcc.n	800c456 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	1ad2      	subs	r2, r2, r3
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	697a      	ldr	r2, [r7, #20]
 800c498:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c49a:	6979      	ldr	r1, [r7, #20]
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f7ff fbf3 	bl	800bc88 <clust2sect>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4ba:	441a      	add	r2, r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4c0:	2300      	movs	r3, #0
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3718      	adds	r7, #24
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b086      	sub	sp, #24
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
 800c4d2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c4da:	2100      	movs	r1, #0
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7ff feb4 	bl	800c24a <dir_sdi>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c4e6:	7dfb      	ldrb	r3, [r7, #23]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d12b      	bne.n	800c544 <dir_alloc+0x7a>
		n = 0;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	69db      	ldr	r3, [r3, #28]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f7ff fb2a 	bl	800bb50 <move_window>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c500:	7dfb      	ldrb	r3, [r7, #23]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d11d      	bne.n	800c542 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6a1b      	ldr	r3, [r3, #32]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	2be5      	cmp	r3, #229	@ 0xe5
 800c50e:	d004      	beq.n	800c51a <dir_alloc+0x50>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6a1b      	ldr	r3, [r3, #32]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d107      	bne.n	800c52a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	3301      	adds	r3, #1
 800c51e:	613b      	str	r3, [r7, #16]
 800c520:	693a      	ldr	r2, [r7, #16]
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	429a      	cmp	r2, r3
 800c526:	d102      	bne.n	800c52e <dir_alloc+0x64>
 800c528:	e00c      	b.n	800c544 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c52a:	2300      	movs	r3, #0
 800c52c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c52e:	2101      	movs	r1, #1
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7ff ff05 	bl	800c340 <dir_next>
 800c536:	4603      	mov	r3, r0
 800c538:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c53a:	7dfb      	ldrb	r3, [r7, #23]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d0d7      	beq.n	800c4f0 <dir_alloc+0x26>
 800c540:	e000      	b.n	800c544 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c542:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c544:	7dfb      	ldrb	r3, [r7, #23]
 800c546:	2b04      	cmp	r3, #4
 800c548:	d101      	bne.n	800c54e <dir_alloc+0x84>
 800c54a:	2307      	movs	r3, #7
 800c54c:	75fb      	strb	r3, [r7, #23]
	return res;
 800c54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3718      	adds	r7, #24
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	331a      	adds	r3, #26
 800c566:	4618      	mov	r0, r3
 800c568:	f7ff f842 	bl	800b5f0 <ld_word>
 800c56c:	4603      	mov	r3, r0
 800c56e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	2b03      	cmp	r3, #3
 800c576:	d109      	bne.n	800c58c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	3314      	adds	r3, #20
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7ff f837 	bl	800b5f0 <ld_word>
 800c582:	4603      	mov	r3, r0
 800c584:	041b      	lsls	r3, r3, #16
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	4313      	orrs	r3, r2
 800c58a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c58c:	68fb      	ldr	r3, [r7, #12]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	60f8      	str	r0, [r7, #12]
 800c59e:	60b9      	str	r1, [r7, #8]
 800c5a0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	331a      	adds	r3, #26
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	b292      	uxth	r2, r2
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7ff f85a 	bl	800b666 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	2b03      	cmp	r3, #3
 800c5b8:	d109      	bne.n	800c5ce <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	f103 0214 	add.w	r2, r3, #20
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	0c1b      	lsrs	r3, r3, #16
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	4610      	mov	r0, r2
 800c5ca:	f7ff f84c 	bl	800b666 <st_word>
	}
}
 800c5ce:	bf00      	nop
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b086      	sub	sp, #24
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f7ff fe2f 	bl	800c24a <dir_sdi>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c5f0:	7dfb      	ldrb	r3, [r7, #23]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d001      	beq.n	800c5fa <dir_find+0x24>
 800c5f6:	7dfb      	ldrb	r3, [r7, #23]
 800c5f8:	e03e      	b.n	800c678 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	69db      	ldr	r3, [r3, #28]
 800c5fe:	4619      	mov	r1, r3
 800c600:	6938      	ldr	r0, [r7, #16]
 800c602:	f7ff faa5 	bl	800bb50 <move_window>
 800c606:	4603      	mov	r3, r0
 800c608:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c60a:	7dfb      	ldrb	r3, [r7, #23]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d12f      	bne.n	800c670 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6a1b      	ldr	r3, [r3, #32]
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c618:	7bfb      	ldrb	r3, [r7, #15]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d102      	bne.n	800c624 <dir_find+0x4e>
 800c61e:	2304      	movs	r3, #4
 800c620:	75fb      	strb	r3, [r7, #23]
 800c622:	e028      	b.n	800c676 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6a1b      	ldr	r3, [r3, #32]
 800c628:	330b      	adds	r3, #11
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c630:	b2da      	uxtb	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6a1b      	ldr	r3, [r3, #32]
 800c63a:	330b      	adds	r3, #11
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	f003 0308 	and.w	r3, r3, #8
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10a      	bne.n	800c65c <dir_find+0x86>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6a18      	ldr	r0, [r3, #32]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	3324      	adds	r3, #36	@ 0x24
 800c64e:	220b      	movs	r2, #11
 800c650:	4619      	mov	r1, r3
 800c652:	f7ff f88b 	bl	800b76c <mem_cmp>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00b      	beq.n	800c674 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c65c:	2100      	movs	r1, #0
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f7ff fe6e 	bl	800c340 <dir_next>
 800c664:	4603      	mov	r3, r0
 800c666:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c668:	7dfb      	ldrb	r3, [r7, #23]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d0c5      	beq.n	800c5fa <dir_find+0x24>
 800c66e:	e002      	b.n	800c676 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c670:	bf00      	nop
 800c672:	e000      	b.n	800c676 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c674:	bf00      	nop

	return res;
 800c676:	7dfb      	ldrb	r3, [r7, #23]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3718      	adds	r7, #24
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c68e:	2101      	movs	r1, #1
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7ff ff1a 	bl	800c4ca <dir_alloc>
 800c696:	4603      	mov	r3, r0
 800c698:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d11c      	bne.n	800c6da <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	68b8      	ldr	r0, [r7, #8]
 800c6a8:	f7ff fa52 	bl	800bb50 <move_window>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c6b0:	7bfb      	ldrb	r3, [r7, #15]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d111      	bne.n	800c6da <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a1b      	ldr	r3, [r3, #32]
 800c6ba:	2220      	movs	r2, #32
 800c6bc:	2100      	movs	r1, #0
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7ff f839 	bl	800b736 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6a18      	ldr	r0, [r3, #32]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	3324      	adds	r3, #36	@ 0x24
 800c6cc:	220b      	movs	r2, #11
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	f7ff f810 	bl	800b6f4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b088      	sub	sp, #32
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	60fb      	str	r3, [r7, #12]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	3324      	adds	r3, #36	@ 0x24
 800c6f8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c6fa:	220b      	movs	r2, #11
 800c6fc:	2120      	movs	r1, #32
 800c6fe:	68b8      	ldr	r0, [r7, #8]
 800c700:	f7ff f819 	bl	800b736 <mem_set>
	si = i = 0; ni = 8;
 800c704:	2300      	movs	r3, #0
 800c706:	613b      	str	r3, [r7, #16]
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	61fb      	str	r3, [r7, #28]
 800c70c:	2308      	movs	r3, #8
 800c70e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	1c5a      	adds	r2, r3, #1
 800c714:	61fa      	str	r2, [r7, #28]
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	4413      	add	r3, r2
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c71e:	7efb      	ldrb	r3, [r7, #27]
 800c720:	2b20      	cmp	r3, #32
 800c722:	d94e      	bls.n	800c7c2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c724:	7efb      	ldrb	r3, [r7, #27]
 800c726:	2b2f      	cmp	r3, #47	@ 0x2f
 800c728:	d006      	beq.n	800c738 <create_name+0x54>
 800c72a:	7efb      	ldrb	r3, [r7, #27]
 800c72c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c72e:	d110      	bne.n	800c752 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c730:	e002      	b.n	800c738 <create_name+0x54>
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	3301      	adds	r3, #1
 800c736:	61fb      	str	r3, [r7, #28]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	4413      	add	r3, r2
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	2b2f      	cmp	r3, #47	@ 0x2f
 800c742:	d0f6      	beq.n	800c732 <create_name+0x4e>
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	4413      	add	r3, r2
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c74e:	d0f0      	beq.n	800c732 <create_name+0x4e>
			break;
 800c750:	e038      	b.n	800c7c4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c752:	7efb      	ldrb	r3, [r7, #27]
 800c754:	2b2e      	cmp	r3, #46	@ 0x2e
 800c756:	d003      	beq.n	800c760 <create_name+0x7c>
 800c758:	693a      	ldr	r2, [r7, #16]
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d30c      	bcc.n	800c77a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	2b0b      	cmp	r3, #11
 800c764:	d002      	beq.n	800c76c <create_name+0x88>
 800c766:	7efb      	ldrb	r3, [r7, #27]
 800c768:	2b2e      	cmp	r3, #46	@ 0x2e
 800c76a:	d001      	beq.n	800c770 <create_name+0x8c>
 800c76c:	2306      	movs	r3, #6
 800c76e:	e044      	b.n	800c7fa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c770:	2308      	movs	r3, #8
 800c772:	613b      	str	r3, [r7, #16]
 800c774:	230b      	movs	r3, #11
 800c776:	617b      	str	r3, [r7, #20]
			continue;
 800c778:	e022      	b.n	800c7c0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c77a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	da04      	bge.n	800c78c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c782:	7efb      	ldrb	r3, [r7, #27]
 800c784:	3b80      	subs	r3, #128	@ 0x80
 800c786:	4a1f      	ldr	r2, [pc, #124]	@ (800c804 <create_name+0x120>)
 800c788:	5cd3      	ldrb	r3, [r2, r3]
 800c78a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c78c:	7efb      	ldrb	r3, [r7, #27]
 800c78e:	4619      	mov	r1, r3
 800c790:	481d      	ldr	r0, [pc, #116]	@ (800c808 <create_name+0x124>)
 800c792:	f7ff f812 	bl	800b7ba <chk_chr>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d001      	beq.n	800c7a0 <create_name+0xbc>
 800c79c:	2306      	movs	r3, #6
 800c79e:	e02c      	b.n	800c7fa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c7a0:	7efb      	ldrb	r3, [r7, #27]
 800c7a2:	2b60      	cmp	r3, #96	@ 0x60
 800c7a4:	d905      	bls.n	800c7b2 <create_name+0xce>
 800c7a6:	7efb      	ldrb	r3, [r7, #27]
 800c7a8:	2b7a      	cmp	r3, #122	@ 0x7a
 800c7aa:	d802      	bhi.n	800c7b2 <create_name+0xce>
 800c7ac:	7efb      	ldrb	r3, [r7, #27]
 800c7ae:	3b20      	subs	r3, #32
 800c7b0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	1c5a      	adds	r2, r3, #1
 800c7b6:	613a      	str	r2, [r7, #16]
 800c7b8:	68ba      	ldr	r2, [r7, #8]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	7efa      	ldrb	r2, [r7, #27]
 800c7be:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c7c0:	e7a6      	b.n	800c710 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c7c2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	441a      	add	r2, r3
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d101      	bne.n	800c7d8 <create_name+0xf4>
 800c7d4:	2306      	movs	r3, #6
 800c7d6:	e010      	b.n	800c7fa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2be5      	cmp	r3, #229	@ 0xe5
 800c7de:	d102      	bne.n	800c7e6 <create_name+0x102>
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2205      	movs	r2, #5
 800c7e4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c7e6:	7efb      	ldrb	r3, [r7, #27]
 800c7e8:	2b20      	cmp	r3, #32
 800c7ea:	d801      	bhi.n	800c7f0 <create_name+0x10c>
 800c7ec:	2204      	movs	r2, #4
 800c7ee:	e000      	b.n	800c7f2 <create_name+0x10e>
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	330b      	adds	r3, #11
 800c7f6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c7f8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3720      	adds	r7, #32
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	0801318c 	.word	0x0801318c
 800c808:	08013130 	.word	0x08013130

0800c80c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c820:	e002      	b.n	800c828 <follow_path+0x1c>
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	3301      	adds	r3, #1
 800c826:	603b      	str	r3, [r7, #0]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c82e:	d0f8      	beq.n	800c822 <follow_path+0x16>
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	2b5c      	cmp	r3, #92	@ 0x5c
 800c836:	d0f4      	beq.n	800c822 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	2200      	movs	r2, #0
 800c83c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	2b1f      	cmp	r3, #31
 800c844:	d80a      	bhi.n	800c85c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2280      	movs	r2, #128	@ 0x80
 800c84a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c84e:	2100      	movs	r1, #0
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff fcfa 	bl	800c24a <dir_sdi>
 800c856:	4603      	mov	r3, r0
 800c858:	75fb      	strb	r3, [r7, #23]
 800c85a:	e043      	b.n	800c8e4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c85c:	463b      	mov	r3, r7
 800c85e:	4619      	mov	r1, r3
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f7ff ff3f 	bl	800c6e4 <create_name>
 800c866:	4603      	mov	r3, r0
 800c868:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c86a:	7dfb      	ldrb	r3, [r7, #23]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d134      	bne.n	800c8da <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f7ff feb0 	bl	800c5d6 <dir_find>
 800c876:	4603      	mov	r3, r0
 800c878:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c880:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c882:	7dfb      	ldrb	r3, [r7, #23]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00a      	beq.n	800c89e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c888:	7dfb      	ldrb	r3, [r7, #23]
 800c88a:	2b04      	cmp	r3, #4
 800c88c:	d127      	bne.n	800c8de <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c88e:	7afb      	ldrb	r3, [r7, #11]
 800c890:	f003 0304 	and.w	r3, r3, #4
 800c894:	2b00      	cmp	r3, #0
 800c896:	d122      	bne.n	800c8de <follow_path+0xd2>
 800c898:	2305      	movs	r3, #5
 800c89a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c89c:	e01f      	b.n	800c8de <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c89e:	7afb      	ldrb	r3, [r7, #11]
 800c8a0:	f003 0304 	and.w	r3, r3, #4
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d11c      	bne.n	800c8e2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	799b      	ldrb	r3, [r3, #6]
 800c8ac:	f003 0310 	and.w	r3, r3, #16
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d102      	bne.n	800c8ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c8b4:	2305      	movs	r3, #5
 800c8b6:	75fb      	strb	r3, [r7, #23]
 800c8b8:	e014      	b.n	800c8e4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	695b      	ldr	r3, [r3, #20]
 800c8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c8:	4413      	add	r3, r2
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	68f8      	ldr	r0, [r7, #12]
 800c8ce:	f7ff fe43 	bl	800c558 <ld_clust>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c8d8:	e7c0      	b.n	800c85c <follow_path+0x50>
			if (res != FR_OK) break;
 800c8da:	bf00      	nop
 800c8dc:	e002      	b.n	800c8e4 <follow_path+0xd8>
				break;
 800c8de:	bf00      	nop
 800c8e0:	e000      	b.n	800c8e4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c8e2:	bf00      	nop
			}
		}
	}

	return res;
 800c8e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b087      	sub	sp, #28
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8fa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d031      	beq.n	800c968 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	617b      	str	r3, [r7, #20]
 800c90a:	e002      	b.n	800c912 <get_ldnumber+0x24>
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	3301      	adds	r3, #1
 800c910:	617b      	str	r3, [r7, #20]
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	2b20      	cmp	r3, #32
 800c918:	d903      	bls.n	800c922 <get_ldnumber+0x34>
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	2b3a      	cmp	r3, #58	@ 0x3a
 800c920:	d1f4      	bne.n	800c90c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	2b3a      	cmp	r3, #58	@ 0x3a
 800c928:	d11c      	bne.n	800c964 <get_ldnumber+0x76>
			tp = *path;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	1c5a      	adds	r2, r3, #1
 800c934:	60fa      	str	r2, [r7, #12]
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	3b30      	subs	r3, #48	@ 0x30
 800c93a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	2b09      	cmp	r3, #9
 800c940:	d80e      	bhi.n	800c960 <get_ldnumber+0x72>
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	429a      	cmp	r2, r3
 800c948:	d10a      	bne.n	800c960 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d107      	bne.n	800c960 <get_ldnumber+0x72>
					vol = (int)i;
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	3301      	adds	r3, #1
 800c958:	617b      	str	r3, [r7, #20]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	e002      	b.n	800c96a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c964:	2300      	movs	r3, #0
 800c966:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c968:	693b      	ldr	r3, [r7, #16]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	371c      	adds	r7, #28
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr
	...

0800c978 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	70da      	strb	r2, [r3, #3]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f04f 32ff 	mov.w	r2, #4294967295
 800c98e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c990:	6839      	ldr	r1, [r7, #0]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f7ff f8dc 	bl	800bb50 <move_window>
 800c998:	4603      	mov	r3, r0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d001      	beq.n	800c9a2 <check_fs+0x2a>
 800c99e:	2304      	movs	r3, #4
 800c9a0:	e038      	b.n	800ca14 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	3330      	adds	r3, #48	@ 0x30
 800c9a6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7fe fe20 	bl	800b5f0 <ld_word>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d001      	beq.n	800c9c0 <check_fs+0x48>
 800c9bc:	2303      	movs	r3, #3
 800c9be:	e029      	b.n	800ca14 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9c6:	2be9      	cmp	r3, #233	@ 0xe9
 800c9c8:	d009      	beq.n	800c9de <check_fs+0x66>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c9d0:	2beb      	cmp	r3, #235	@ 0xeb
 800c9d2:	d11e      	bne.n	800ca12 <check_fs+0x9a>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c9da:	2b90      	cmp	r3, #144	@ 0x90
 800c9dc:	d119      	bne.n	800ca12 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	3330      	adds	r3, #48	@ 0x30
 800c9e2:	3336      	adds	r3, #54	@ 0x36
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe fe1b 	bl	800b620 <ld_dword>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c9f0:	4a0a      	ldr	r2, [pc, #40]	@ (800ca1c <check_fs+0xa4>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d101      	bne.n	800c9fa <check_fs+0x82>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	e00c      	b.n	800ca14 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	3330      	adds	r3, #48	@ 0x30
 800c9fe:	3352      	adds	r3, #82	@ 0x52
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7fe fe0d 	bl	800b620 <ld_dword>
 800ca06:	4603      	mov	r3, r0
 800ca08:	4a05      	ldr	r2, [pc, #20]	@ (800ca20 <check_fs+0xa8>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d101      	bne.n	800ca12 <check_fs+0x9a>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	e000      	b.n	800ca14 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ca12:	2302      	movs	r3, #2
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	00544146 	.word	0x00544146
 800ca20:	33544146 	.word	0x33544146

0800ca24 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b096      	sub	sp, #88	@ 0x58
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	4613      	mov	r3, r2
 800ca30:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	2200      	movs	r2, #0
 800ca36:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f7ff ff58 	bl	800c8ee <get_ldnumber>
 800ca3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ca40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	da01      	bge.n	800ca4a <find_volume+0x26>
 800ca46:	230b      	movs	r3, #11
 800ca48:	e22d      	b.n	800cea6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ca4a:	4aa1      	ldr	r2, [pc, #644]	@ (800ccd0 <find_volume+0x2ac>)
 800ca4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca52:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ca54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d101      	bne.n	800ca5e <find_volume+0x3a>
 800ca5a:	230c      	movs	r3, #12
 800ca5c:	e223      	b.n	800cea6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca62:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ca64:	79fb      	ldrb	r3, [r7, #7]
 800ca66:	f023 0301 	bic.w	r3, r3, #1
 800ca6a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ca6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d01a      	beq.n	800caaa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ca74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca76:	785b      	ldrb	r3, [r3, #1]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7fe fcfd 	bl	800b478 <disk_status>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ca84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca88:	f003 0301 	and.w	r3, r3, #1
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10c      	bne.n	800caaa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ca90:	79fb      	ldrb	r3, [r7, #7]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d007      	beq.n	800caa6 <find_volume+0x82>
 800ca96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ca9a:	f003 0304 	and.w	r3, r3, #4
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d001      	beq.n	800caa6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800caa2:	230a      	movs	r3, #10
 800caa4:	e1ff      	b.n	800cea6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800caa6:	2300      	movs	r3, #0
 800caa8:	e1fd      	b.n	800cea6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800caaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caac:	2200      	movs	r2, #0
 800caae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caba:	785b      	ldrb	r3, [r3, #1]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7fe fcec 	bl	800b49a <disk_initialize>
 800cac2:	4603      	mov	r3, r0
 800cac4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cac8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cacc:	f003 0301 	and.w	r3, r3, #1
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d001      	beq.n	800cad8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cad4:	2303      	movs	r3, #3
 800cad6:	e1e6      	b.n	800cea6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cad8:	79fb      	ldrb	r3, [r7, #7]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d007      	beq.n	800caee <find_volume+0xca>
 800cade:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cae2:	f003 0304 	and.w	r3, r3, #4
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d001      	beq.n	800caee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800caea:	230a      	movs	r3, #10
 800caec:	e1db      	b.n	800cea6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800caf2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800caf4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800caf6:	f7ff ff3f 	bl	800c978 <check_fs>
 800cafa:	4603      	mov	r3, r0
 800cafc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cb00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb04:	2b02      	cmp	r3, #2
 800cb06:	d149      	bne.n	800cb9c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb08:	2300      	movs	r3, #0
 800cb0a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb0c:	e01e      	b.n	800cb4c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb10:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cb14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb16:	011b      	lsls	r3, r3, #4
 800cb18:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cb1c:	4413      	add	r3, r2
 800cb1e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb22:	3304      	adds	r3, #4
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d006      	beq.n	800cb38 <find_volume+0x114>
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7fe fd76 	bl	800b620 <ld_dword>
 800cb34:	4602      	mov	r2, r0
 800cb36:	e000      	b.n	800cb3a <find_volume+0x116>
 800cb38:	2200      	movs	r2, #0
 800cb3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	3358      	adds	r3, #88	@ 0x58
 800cb40:	443b      	add	r3, r7
 800cb42:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cb46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb48:	3301      	adds	r3, #1
 800cb4a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb4e:	2b03      	cmp	r3, #3
 800cb50:	d9dd      	bls.n	800cb0e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cb52:	2300      	movs	r3, #0
 800cb54:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cb56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d002      	beq.n	800cb62 <find_volume+0x13e>
 800cb5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb5e:	3b01      	subs	r3, #1
 800cb60:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cb62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	3358      	adds	r3, #88	@ 0x58
 800cb68:	443b      	add	r3, r7
 800cb6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cb6e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cb70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d005      	beq.n	800cb82 <find_volume+0x15e>
 800cb76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cb78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cb7a:	f7ff fefd 	bl	800c978 <check_fs>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	e000      	b.n	800cb84 <find_volume+0x160>
 800cb82:	2303      	movs	r3, #3
 800cb84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cb88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d905      	bls.n	800cb9c <find_volume+0x178>
 800cb90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb92:	3301      	adds	r3, #1
 800cb94:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb98:	2b03      	cmp	r3, #3
 800cb9a:	d9e2      	bls.n	800cb62 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cb9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cba0:	2b04      	cmp	r3, #4
 800cba2:	d101      	bne.n	800cba8 <find_volume+0x184>
 800cba4:	2301      	movs	r3, #1
 800cba6:	e17e      	b.n	800cea6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cba8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d901      	bls.n	800cbb4 <find_volume+0x190>
 800cbb0:	230d      	movs	r3, #13
 800cbb2:	e178      	b.n	800cea6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb6:	3330      	adds	r3, #48	@ 0x30
 800cbb8:	330b      	adds	r3, #11
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fe fd18 	bl	800b5f0 <ld_word>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cbc6:	d001      	beq.n	800cbcc <find_volume+0x1a8>
 800cbc8:	230d      	movs	r3, #13
 800cbca:	e16c      	b.n	800cea6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbce:	3330      	adds	r3, #48	@ 0x30
 800cbd0:	3316      	adds	r3, #22
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fe fd0c 	bl	800b5f0 <ld_word>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cbdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d106      	bne.n	800cbf0 <find_volume+0x1cc>
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe4:	3330      	adds	r3, #48	@ 0x30
 800cbe6:	3324      	adds	r3, #36	@ 0x24
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7fe fd19 	bl	800b620 <ld_dword>
 800cbee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbf4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800cbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbfe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cc00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc02:	789b      	ldrb	r3, [r3, #2]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d005      	beq.n	800cc14 <find_volume+0x1f0>
 800cc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0a:	789b      	ldrb	r3, [r3, #2]
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d001      	beq.n	800cc14 <find_volume+0x1f0>
 800cc10:	230d      	movs	r3, #13
 800cc12:	e148      	b.n	800cea6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc16:	789b      	ldrb	r3, [r3, #2]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc1c:	fb02 f303 	mul.w	r3, r2, r3
 800cc20:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc28:	461a      	mov	r2, r3
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cc2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc30:	895b      	ldrh	r3, [r3, #10]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d008      	beq.n	800cc48 <find_volume+0x224>
 800cc36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc38:	895b      	ldrh	r3, [r3, #10]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3e:	895b      	ldrh	r3, [r3, #10]
 800cc40:	3b01      	subs	r3, #1
 800cc42:	4013      	ands	r3, r2
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d001      	beq.n	800cc4c <find_volume+0x228>
 800cc48:	230d      	movs	r3, #13
 800cc4a:	e12c      	b.n	800cea6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4e:	3330      	adds	r3, #48	@ 0x30
 800cc50:	3311      	adds	r3, #17
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fe fccc 	bl	800b5f0 <ld_word>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc62:	891b      	ldrh	r3, [r3, #8]
 800cc64:	f003 030f 	and.w	r3, r3, #15
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d001      	beq.n	800cc72 <find_volume+0x24e>
 800cc6e:	230d      	movs	r3, #13
 800cc70:	e119      	b.n	800cea6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc74:	3330      	adds	r3, #48	@ 0x30
 800cc76:	3313      	adds	r3, #19
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fe fcb9 	bl	800b5f0 <ld_word>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cc82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d106      	bne.n	800cc96 <find_volume+0x272>
 800cc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8a:	3330      	adds	r3, #48	@ 0x30
 800cc8c:	3320      	adds	r3, #32
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fe fcc6 	bl	800b620 <ld_dword>
 800cc94:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cc96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc98:	3330      	adds	r3, #48	@ 0x30
 800cc9a:	330e      	adds	r3, #14
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7fe fca7 	bl	800b5f0 <ld_word>
 800cca2:	4603      	mov	r3, r0
 800cca4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cca6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d101      	bne.n	800ccb0 <find_volume+0x28c>
 800ccac:	230d      	movs	r3, #13
 800ccae:	e0fa      	b.n	800cea6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ccb0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ccb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccb4:	4413      	add	r3, r2
 800ccb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccb8:	8912      	ldrh	r2, [r2, #8]
 800ccba:	0912      	lsrs	r2, r2, #4
 800ccbc:	b292      	uxth	r2, r2
 800ccbe:	4413      	add	r3, r2
 800ccc0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ccc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d204      	bcs.n	800ccd4 <find_volume+0x2b0>
 800ccca:	230d      	movs	r3, #13
 800cccc:	e0eb      	b.n	800cea6 <find_volume+0x482>
 800ccce:	bf00      	nop
 800ccd0:	200037b8 	.word	0x200037b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ccd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccd8:	1ad3      	subs	r3, r2, r3
 800ccda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccdc:	8952      	ldrh	r2, [r2, #10]
 800ccde:	fbb3 f3f2 	udiv	r3, r3, r2
 800cce2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d101      	bne.n	800ccee <find_volume+0x2ca>
 800ccea:	230d      	movs	r3, #13
 800ccec:	e0db      	b.n	800cea6 <find_volume+0x482>
		fmt = FS_FAT32;
 800ccee:	2303      	movs	r3, #3
 800ccf0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ccf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d802      	bhi.n	800cd04 <find_volume+0x2e0>
 800ccfe:	2302      	movs	r3, #2
 800cd00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd06:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d802      	bhi.n	800cd14 <find_volume+0x2f0>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd16:	1c9a      	adds	r2, r3, #2
 800cd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd20:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cd22:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cd24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd26:	441a      	add	r2, r3
 800cd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd2a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cd2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd30:	441a      	add	r2, r3
 800cd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd34:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800cd36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd3a:	2b03      	cmp	r3, #3
 800cd3c:	d11e      	bne.n	800cd7c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd40:	3330      	adds	r3, #48	@ 0x30
 800cd42:	332a      	adds	r3, #42	@ 0x2a
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fe fc53 	bl	800b5f0 <ld_word>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d001      	beq.n	800cd54 <find_volume+0x330>
 800cd50:	230d      	movs	r3, #13
 800cd52:	e0a8      	b.n	800cea6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd56:	891b      	ldrh	r3, [r3, #8]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d001      	beq.n	800cd60 <find_volume+0x33c>
 800cd5c:	230d      	movs	r3, #13
 800cd5e:	e0a2      	b.n	800cea6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd62:	3330      	adds	r3, #48	@ 0x30
 800cd64:	332c      	adds	r3, #44	@ 0x2c
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fe fc5a 	bl	800b620 <ld_dword>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd70:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd74:	695b      	ldr	r3, [r3, #20]
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd7a:	e01f      	b.n	800cdbc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd7e:	891b      	ldrh	r3, [r3, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d101      	bne.n	800cd88 <find_volume+0x364>
 800cd84:	230d      	movs	r3, #13
 800cd86:	e08e      	b.n	800cea6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8a:	6a1a      	ldr	r2, [r3, #32]
 800cd8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd8e:	441a      	add	r2, r3
 800cd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd92:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cd94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cd98:	2b02      	cmp	r3, #2
 800cd9a:	d103      	bne.n	800cda4 <find_volume+0x380>
 800cd9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9e:	695b      	ldr	r3, [r3, #20]
 800cda0:	005b      	lsls	r3, r3, #1
 800cda2:	e00a      	b.n	800cdba <find_volume+0x396>
 800cda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cda6:	695a      	ldr	r2, [r3, #20]
 800cda8:	4613      	mov	r3, r2
 800cdaa:	005b      	lsls	r3, r3, #1
 800cdac:	4413      	add	r3, r2
 800cdae:	085a      	lsrs	r2, r3, #1
 800cdb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb2:	695b      	ldr	r3, [r3, #20]
 800cdb4:	f003 0301 	and.w	r3, r3, #1
 800cdb8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cdba:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdbe:	699a      	ldr	r2, [r3, #24]
 800cdc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdc2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800cdc6:	0a5b      	lsrs	r3, r3, #9
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d201      	bcs.n	800cdd0 <find_volume+0x3ac>
 800cdcc:	230d      	movs	r3, #13
 800cdce:	e06a      	b.n	800cea6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cdd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdd6:	611a      	str	r2, [r3, #16]
 800cdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdda:	691a      	ldr	r2, [r3, #16]
 800cddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdde:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cde2:	2280      	movs	r2, #128	@ 0x80
 800cde4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cde6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cdea:	2b03      	cmp	r3, #3
 800cdec:	d149      	bne.n	800ce82 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cdee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf0:	3330      	adds	r3, #48	@ 0x30
 800cdf2:	3330      	adds	r3, #48	@ 0x30
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fe fbfb 	bl	800b5f0 <ld_word>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d140      	bne.n	800ce82 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ce00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce02:	3301      	adds	r3, #1
 800ce04:	4619      	mov	r1, r3
 800ce06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce08:	f7fe fea2 	bl	800bb50 <move_window>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d137      	bne.n	800ce82 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800ce12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce14:	2200      	movs	r2, #0
 800ce16:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ce18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1a:	3330      	adds	r3, #48	@ 0x30
 800ce1c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ce20:	4618      	mov	r0, r3
 800ce22:	f7fe fbe5 	bl	800b5f0 <ld_word>
 800ce26:	4603      	mov	r3, r0
 800ce28:	461a      	mov	r2, r3
 800ce2a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d127      	bne.n	800ce82 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ce32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce34:	3330      	adds	r3, #48	@ 0x30
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7fe fbf2 	bl	800b620 <ld_dword>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	4a1c      	ldr	r2, [pc, #112]	@ (800ceb0 <find_volume+0x48c>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d11e      	bne.n	800ce82 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce46:	3330      	adds	r3, #48	@ 0x30
 800ce48:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fe fbe7 	bl	800b620 <ld_dword>
 800ce52:	4603      	mov	r3, r0
 800ce54:	4a17      	ldr	r2, [pc, #92]	@ (800ceb4 <find_volume+0x490>)
 800ce56:	4293      	cmp	r3, r2
 800ce58:	d113      	bne.n	800ce82 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce5c:	3330      	adds	r3, #48	@ 0x30
 800ce5e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fe fbdc 	bl	800b620 <ld_dword>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce6c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce70:	3330      	adds	r3, #48	@ 0x30
 800ce72:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fe fbd2 	bl	800b620 <ld_dword>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce80:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ce82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce84:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ce88:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce8a:	4b0b      	ldr	r3, [pc, #44]	@ (800ceb8 <find_volume+0x494>)
 800ce8c:	881b      	ldrh	r3, [r3, #0]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	b29a      	uxth	r2, r3
 800ce92:	4b09      	ldr	r3, [pc, #36]	@ (800ceb8 <find_volume+0x494>)
 800ce94:	801a      	strh	r2, [r3, #0]
 800ce96:	4b08      	ldr	r3, [pc, #32]	@ (800ceb8 <find_volume+0x494>)
 800ce98:	881a      	ldrh	r2, [r3, #0]
 800ce9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce9c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ce9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cea0:	f7fe fdee 	bl	800ba80 <clear_lock>
#endif
	return FR_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3758      	adds	r7, #88	@ 0x58
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	41615252 	.word	0x41615252
 800ceb4:	61417272 	.word	0x61417272
 800ceb8:	200037bc 	.word	0x200037bc

0800cebc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cec6:	2309      	movs	r3, #9
 800cec8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d01c      	beq.n	800cf0a <validate+0x4e>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d018      	beq.n	800cf0a <validate+0x4e>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d013      	beq.n	800cf0a <validate+0x4e>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	889a      	ldrh	r2, [r3, #4]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	88db      	ldrh	r3, [r3, #6]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d10c      	bne.n	800cf0a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	785b      	ldrb	r3, [r3, #1]
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe fabe 	bl	800b478 <disk_status>
 800cefc:	4603      	mov	r3, r0
 800cefe:	f003 0301 	and.w	r3, r3, #1
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d101      	bne.n	800cf0a <validate+0x4e>
			res = FR_OK;
 800cf06:	2300      	movs	r3, #0
 800cf08:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d102      	bne.n	800cf16 <validate+0x5a>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	e000      	b.n	800cf18 <validate+0x5c>
 800cf16:	2300      	movs	r3, #0
 800cf18:	683a      	ldr	r2, [r7, #0]
 800cf1a:	6013      	str	r3, [r2, #0]
	return res;
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
	...

0800cf28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b088      	sub	sp, #32
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	4613      	mov	r3, r2
 800cf34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cf3a:	f107 0310 	add.w	r3, r7, #16
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7ff fcd5 	bl	800c8ee <get_ldnumber>
 800cf44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf46:	69fb      	ldr	r3, [r7, #28]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	da01      	bge.n	800cf50 <f_mount+0x28>
 800cf4c:	230b      	movs	r3, #11
 800cf4e:	e02b      	b.n	800cfa8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cf50:	4a17      	ldr	r2, [pc, #92]	@ (800cfb0 <f_mount+0x88>)
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d005      	beq.n	800cf6c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cf60:	69b8      	ldr	r0, [r7, #24]
 800cf62:	f7fe fd8d 	bl	800ba80 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d002      	beq.n	800cf78 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	490d      	ldr	r1, [pc, #52]	@ (800cfb0 <f_mount+0x88>)
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d002      	beq.n	800cf8e <f_mount+0x66>
 800cf88:	79fb      	ldrb	r3, [r7, #7]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d001      	beq.n	800cf92 <f_mount+0x6a>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	e00a      	b.n	800cfa8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cf92:	f107 010c 	add.w	r1, r7, #12
 800cf96:	f107 0308 	add.w	r3, r7, #8
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7ff fd41 	bl	800ca24 <find_volume>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cfa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3720      	adds	r7, #32
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	200037b8 	.word	0x200037b8

0800cfb4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b098      	sub	sp, #96	@ 0x60
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d101      	bne.n	800cfcc <f_open+0x18>
 800cfc8:	2309      	movs	r3, #9
 800cfca:	e1a9      	b.n	800d320 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cfcc:	79fb      	ldrb	r3, [r7, #7]
 800cfce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cfd2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cfd4:	79fa      	ldrb	r2, [r7, #7]
 800cfd6:	f107 0110 	add.w	r1, r7, #16
 800cfda:	f107 0308 	add.w	r3, r7, #8
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7ff fd20 	bl	800ca24 <find_volume>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cfea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	f040 818d 	bne.w	800d30e <f_open+0x35a>
		dj.obj.fs = fs;
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	f107 0314 	add.w	r3, r7, #20
 800cffe:	4611      	mov	r1, r2
 800d000:	4618      	mov	r0, r3
 800d002:	f7ff fc03 	bl	800c80c <follow_path>
 800d006:	4603      	mov	r3, r0
 800d008:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d00c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d010:	2b00      	cmp	r3, #0
 800d012:	d118      	bne.n	800d046 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d014:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d018:	b25b      	sxtb	r3, r3
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	da03      	bge.n	800d026 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d01e:	2306      	movs	r3, #6
 800d020:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d024:	e00f      	b.n	800d046 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d026:	79fb      	ldrb	r3, [r7, #7]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	bf8c      	ite	hi
 800d02c:	2301      	movhi	r3, #1
 800d02e:	2300      	movls	r3, #0
 800d030:	b2db      	uxtb	r3, r3
 800d032:	461a      	mov	r2, r3
 800d034:	f107 0314 	add.w	r3, r7, #20
 800d038:	4611      	mov	r1, r2
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fe fbd8 	bl	800b7f0 <chk_lock>
 800d040:	4603      	mov	r3, r0
 800d042:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d046:	79fb      	ldrb	r3, [r7, #7]
 800d048:	f003 031c 	and.w	r3, r3, #28
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d07f      	beq.n	800d150 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d050:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d054:	2b00      	cmp	r3, #0
 800d056:	d017      	beq.n	800d088 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d058:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d05c:	2b04      	cmp	r3, #4
 800d05e:	d10e      	bne.n	800d07e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d060:	f7fe fc22 	bl	800b8a8 <enq_lock>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d006      	beq.n	800d078 <f_open+0xc4>
 800d06a:	f107 0314 	add.w	r3, r7, #20
 800d06e:	4618      	mov	r0, r3
 800d070:	f7ff fb06 	bl	800c680 <dir_register>
 800d074:	4603      	mov	r3, r0
 800d076:	e000      	b.n	800d07a <f_open+0xc6>
 800d078:	2312      	movs	r3, #18
 800d07a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d07e:	79fb      	ldrb	r3, [r7, #7]
 800d080:	f043 0308 	orr.w	r3, r3, #8
 800d084:	71fb      	strb	r3, [r7, #7]
 800d086:	e010      	b.n	800d0aa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d088:	7ebb      	ldrb	r3, [r7, #26]
 800d08a:	f003 0311 	and.w	r3, r3, #17
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d003      	beq.n	800d09a <f_open+0xe6>
					res = FR_DENIED;
 800d092:	2307      	movs	r3, #7
 800d094:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d098:	e007      	b.n	800d0aa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d09a:	79fb      	ldrb	r3, [r7, #7]
 800d09c:	f003 0304 	and.w	r3, r3, #4
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d002      	beq.n	800d0aa <f_open+0xf6>
 800d0a4:	2308      	movs	r3, #8
 800d0a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d0aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d168      	bne.n	800d184 <f_open+0x1d0>
 800d0b2:	79fb      	ldrb	r3, [r7, #7]
 800d0b4:	f003 0308 	and.w	r3, r3, #8
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d063      	beq.n	800d184 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d0bc:	f7fe f9d4 	bl	800b468 <get_fattime>
 800d0c0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0c4:	330e      	adds	r3, #14
 800d0c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fe fae7 	bl	800b69c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0d0:	3316      	adds	r3, #22
 800d0d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7fe fae1 	bl	800b69c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d0da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0dc:	330b      	adds	r3, #11
 800d0de:	2220      	movs	r2, #32
 800d0e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7ff fa35 	bl	800c558 <ld_clust>
 800d0ee:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7ff fa4d 	bl	800c596 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0fe:	331c      	adds	r3, #28
 800d100:	2100      	movs	r1, #0
 800d102:	4618      	mov	r0, r3
 800d104:	f7fe faca 	bl	800b69c <st_dword>
					fs->wflag = 1;
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	2201      	movs	r2, #1
 800d10c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d10e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d110:	2b00      	cmp	r3, #0
 800d112:	d037      	beq.n	800d184 <f_open+0x1d0>
						dw = fs->winsect;
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d118:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d11a:	f107 0314 	add.w	r3, r7, #20
 800d11e:	2200      	movs	r2, #0
 800d120:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d122:	4618      	mov	r0, r3
 800d124:	f7fe ff60 	bl	800bfe8 <remove_chain>
 800d128:	4603      	mov	r3, r0
 800d12a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d12e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d132:	2b00      	cmp	r3, #0
 800d134:	d126      	bne.n	800d184 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7fe fd08 	bl	800bb50 <move_window>
 800d140:	4603      	mov	r3, r0
 800d142:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d14a:	3a01      	subs	r2, #1
 800d14c:	60da      	str	r2, [r3, #12]
 800d14e:	e019      	b.n	800d184 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d150:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d154:	2b00      	cmp	r3, #0
 800d156:	d115      	bne.n	800d184 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d158:	7ebb      	ldrb	r3, [r7, #26]
 800d15a:	f003 0310 	and.w	r3, r3, #16
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d003      	beq.n	800d16a <f_open+0x1b6>
					res = FR_NO_FILE;
 800d162:	2304      	movs	r3, #4
 800d164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d168:	e00c      	b.n	800d184 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d16a:	79fb      	ldrb	r3, [r7, #7]
 800d16c:	f003 0302 	and.w	r3, r3, #2
 800d170:	2b00      	cmp	r3, #0
 800d172:	d007      	beq.n	800d184 <f_open+0x1d0>
 800d174:	7ebb      	ldrb	r3, [r7, #26]
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d002      	beq.n	800d184 <f_open+0x1d0>
						res = FR_DENIED;
 800d17e:	2307      	movs	r3, #7
 800d180:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d184:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d126      	bne.n	800d1da <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d18c:	79fb      	ldrb	r3, [r7, #7]
 800d18e:	f003 0308 	and.w	r3, r3, #8
 800d192:	2b00      	cmp	r3, #0
 800d194:	d003      	beq.n	800d19e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d196:	79fb      	ldrb	r3, [r7, #7]
 800d198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d19c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d1a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d1ac:	79fb      	ldrb	r3, [r7, #7]
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	bf8c      	ite	hi
 800d1b2:	2301      	movhi	r3, #1
 800d1b4:	2300      	movls	r3, #0
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	f107 0314 	add.w	r3, r7, #20
 800d1be:	4611      	mov	r1, r2
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fe fb93 	bl	800b8ec <inc_lock>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d102      	bne.n	800d1da <f_open+0x226>
 800d1d4:	2302      	movs	r3, #2
 800d1d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d1da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	f040 8095 	bne.w	800d30e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1e8:	4611      	mov	r1, r2
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7ff f9b4 	bl	800c558 <ld_clust>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d1f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1f8:	331c      	adds	r3, #28
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f7fe fa10 	bl	800b620 <ld_dword>
 800d200:	4602      	mov	r2, r0
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d20c:	693a      	ldr	r2, [r7, #16]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	88da      	ldrh	r2, [r3, #6]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	79fa      	ldrb	r2, [r7, #7]
 800d21e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2200      	movs	r2, #0
 800d22a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2200      	movs	r2, #0
 800d230:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	3330      	adds	r3, #48	@ 0x30
 800d236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d23a:	2100      	movs	r1, #0
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7fe fa7a 	bl	800b736 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d242:	79fb      	ldrb	r3, [r7, #7]
 800d244:	f003 0320 	and.w	r3, r3, #32
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d060      	beq.n	800d30e <f_open+0x35a>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d05c      	beq.n	800d30e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	68da      	ldr	r2, [r3, #12]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	895b      	ldrh	r3, [r3, #10]
 800d260:	025b      	lsls	r3, r3, #9
 800d262:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d270:	e016      	b.n	800d2a0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d276:	4618      	mov	r0, r3
 800d278:	f7fe fd25 	bl	800bcc6 <get_fat>
 800d27c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d27e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d280:	2b01      	cmp	r3, #1
 800d282:	d802      	bhi.n	800d28a <f_open+0x2d6>
 800d284:	2302      	movs	r3, #2
 800d286:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d28a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d290:	d102      	bne.n	800d298 <f_open+0x2e4>
 800d292:	2301      	movs	r3, #1
 800d294:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d298:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d29a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d2a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d103      	bne.n	800d2b0 <f_open+0x2fc>
 800d2a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d2aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d8e0      	bhi.n	800d272 <f_open+0x2be>
				}
				fp->clust = clst;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d2b4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d2b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d127      	bne.n	800d30e <f_open+0x35a>
 800d2be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d022      	beq.n	800d30e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7fe fcdb 	bl	800bc88 <clust2sect>
 800d2d2:	6478      	str	r0, [r7, #68]	@ 0x44
 800d2d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d103      	bne.n	800d2e2 <f_open+0x32e>
						res = FR_INT_ERR;
 800d2da:	2302      	movs	r3, #2
 800d2dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d2e0:	e015      	b.n	800d30e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d2e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2e4:	0a5a      	lsrs	r2, r3, #9
 800d2e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2e8:	441a      	add	r2, r3
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	7858      	ldrb	r0, [r3, #1]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6a1a      	ldr	r2, [r3, #32]
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	f7fe f8e2 	bl	800b4c6 <disk_read>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d002      	beq.n	800d30e <f_open+0x35a>
 800d308:	2301      	movs	r3, #1
 800d30a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d30e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d312:	2b00      	cmp	r3, #0
 800d314:	d002      	beq.n	800d31c <f_open+0x368>
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d31c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d320:	4618      	mov	r0, r3
 800d322:	3760      	adds	r7, #96	@ 0x60
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b08e      	sub	sp, #56	@ 0x38
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
 800d334:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2200      	movs	r2, #0
 800d33e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f107 0214 	add.w	r2, r7, #20
 800d346:	4611      	mov	r1, r2
 800d348:	4618      	mov	r0, r3
 800d34a:	f7ff fdb7 	bl	800cebc <validate>
 800d34e:	4603      	mov	r3, r0
 800d350:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d354:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d107      	bne.n	800d36c <f_read+0x44>
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	7d5b      	ldrb	r3, [r3, #21]
 800d360:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d364:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d002      	beq.n	800d372 <f_read+0x4a>
 800d36c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d370:	e115      	b.n	800d59e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	7d1b      	ldrb	r3, [r3, #20]
 800d376:	f003 0301 	and.w	r3, r3, #1
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d101      	bne.n	800d382 <f_read+0x5a>
 800d37e:	2307      	movs	r3, #7
 800d380:	e10d      	b.n	800d59e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	68da      	ldr	r2, [r3, #12]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	699b      	ldr	r3, [r3, #24]
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	6a3b      	ldr	r3, [r7, #32]
 800d392:	429a      	cmp	r2, r3
 800d394:	f240 80fe 	bls.w	800d594 <f_read+0x26c>
 800d398:	6a3b      	ldr	r3, [r7, #32]
 800d39a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d39c:	e0fa      	b.n	800d594 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	699b      	ldr	r3, [r3, #24]
 800d3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f040 80c6 	bne.w	800d538 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	699b      	ldr	r3, [r3, #24]
 800d3b0:	0a5b      	lsrs	r3, r3, #9
 800d3b2:	697a      	ldr	r2, [r7, #20]
 800d3b4:	8952      	ldrh	r2, [r2, #10]
 800d3b6:	3a01      	subs	r2, #1
 800d3b8:	4013      	ands	r3, r2
 800d3ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d12f      	bne.n	800d422 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	699b      	ldr	r3, [r3, #24]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d103      	bne.n	800d3d2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	689b      	ldr	r3, [r3, #8]
 800d3ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3d0:	e013      	b.n	800d3fa <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d007      	beq.n	800d3ea <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	4619      	mov	r1, r3
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f7fe fefe 	bl	800c1e2 <clmt_clust>
 800d3e6:	6338      	str	r0, [r7, #48]	@ 0x30
 800d3e8:	e007      	b.n	800d3fa <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	69db      	ldr	r3, [r3, #28]
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	f7fe fc67 	bl	800bcc6 <get_fat>
 800d3f8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d804      	bhi.n	800d40a <f_read+0xe2>
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2202      	movs	r2, #2
 800d404:	755a      	strb	r2, [r3, #21]
 800d406:	2302      	movs	r3, #2
 800d408:	e0c9      	b.n	800d59e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d410:	d104      	bne.n	800d41c <f_read+0xf4>
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2201      	movs	r2, #1
 800d416:	755a      	strb	r2, [r3, #21]
 800d418:	2301      	movs	r3, #1
 800d41a:	e0c0      	b.n	800d59e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d420:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d422:	697a      	ldr	r2, [r7, #20]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	69db      	ldr	r3, [r3, #28]
 800d428:	4619      	mov	r1, r3
 800d42a:	4610      	mov	r0, r2
 800d42c:	f7fe fc2c 	bl	800bc88 <clust2sect>
 800d430:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d104      	bne.n	800d442 <f_read+0x11a>
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2202      	movs	r2, #2
 800d43c:	755a      	strb	r2, [r3, #21]
 800d43e:	2302      	movs	r3, #2
 800d440:	e0ad      	b.n	800d59e <f_read+0x276>
			sect += csect;
 800d442:	69ba      	ldr	r2, [r7, #24]
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	4413      	add	r3, r2
 800d448:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	0a5b      	lsrs	r3, r3, #9
 800d44e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d452:	2b00      	cmp	r3, #0
 800d454:	d039      	beq.n	800d4ca <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d456:	69fa      	ldr	r2, [r7, #28]
 800d458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d45a:	4413      	add	r3, r2
 800d45c:	697a      	ldr	r2, [r7, #20]
 800d45e:	8952      	ldrh	r2, [r2, #10]
 800d460:	4293      	cmp	r3, r2
 800d462:	d905      	bls.n	800d470 <f_read+0x148>
					cc = fs->csize - csect;
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	895b      	ldrh	r3, [r3, #10]
 800d468:	461a      	mov	r2, r3
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	1ad3      	subs	r3, r2, r3
 800d46e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	7858      	ldrb	r0, [r3, #1]
 800d474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d476:	69ba      	ldr	r2, [r7, #24]
 800d478:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d47a:	f7fe f824 	bl	800b4c6 <disk_read>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d004      	beq.n	800d48e <f_read+0x166>
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2201      	movs	r2, #1
 800d488:	755a      	strb	r2, [r3, #21]
 800d48a:	2301      	movs	r3, #1
 800d48c:	e087      	b.n	800d59e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	7d1b      	ldrb	r3, [r3, #20]
 800d492:	b25b      	sxtb	r3, r3
 800d494:	2b00      	cmp	r3, #0
 800d496:	da14      	bge.n	800d4c2 <f_read+0x19a>
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6a1a      	ldr	r2, [r3, #32]
 800d49c:	69bb      	ldr	r3, [r7, #24]
 800d49e:	1ad3      	subs	r3, r2, r3
 800d4a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d90d      	bls.n	800d4c2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6a1a      	ldr	r2, [r3, #32]
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	1ad3      	subs	r3, r2, r3
 800d4ae:	025b      	lsls	r3, r3, #9
 800d4b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4b2:	18d0      	adds	r0, r2, r3
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	3330      	adds	r3, #48	@ 0x30
 800d4b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4bc:	4619      	mov	r1, r3
 800d4be:	f7fe f919 	bl	800b6f4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4c4:	025b      	lsls	r3, r3, #9
 800d4c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d4c8:	e050      	b.n	800d56c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6a1b      	ldr	r3, [r3, #32]
 800d4ce:	69ba      	ldr	r2, [r7, #24]
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d02e      	beq.n	800d532 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	7d1b      	ldrb	r3, [r3, #20]
 800d4d8:	b25b      	sxtb	r3, r3
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	da18      	bge.n	800d510 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	7858      	ldrb	r0, [r3, #1]
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6a1a      	ldr	r2, [r3, #32]
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	f7fe f819 	bl	800b524 <disk_write>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d004      	beq.n	800d502 <f_read+0x1da>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	755a      	strb	r2, [r3, #21]
 800d4fe:	2301      	movs	r3, #1
 800d500:	e04d      	b.n	800d59e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	7d1b      	ldrb	r3, [r3, #20]
 800d506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	7858      	ldrb	r0, [r3, #1]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d51a:	2301      	movs	r3, #1
 800d51c:	69ba      	ldr	r2, [r7, #24]
 800d51e:	f7fd ffd2 	bl	800b4c6 <disk_read>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d004      	beq.n	800d532 <f_read+0x20a>
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2201      	movs	r2, #1
 800d52c:	755a      	strb	r2, [r3, #21]
 800d52e:	2301      	movs	r3, #1
 800d530:	e035      	b.n	800d59e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	69ba      	ldr	r2, [r7, #24]
 800d536:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	699b      	ldr	r3, [r3, #24]
 800d53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d540:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d544:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d901      	bls.n	800d552 <f_read+0x22a>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	699b      	ldr	r3, [r3, #24]
 800d55c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d560:	4413      	add	r3, r2
 800d562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d564:	4619      	mov	r1, r3
 800d566:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d568:	f7fe f8c4 	bl	800b6f4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d56c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d56e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d570:	4413      	add	r3, r2
 800d572:	627b      	str	r3, [r7, #36]	@ 0x24
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	699a      	ldr	r2, [r3, #24]
 800d578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d57a:	441a      	add	r2, r3
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	619a      	str	r2, [r3, #24]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d586:	441a      	add	r2, r3
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	601a      	str	r2, [r3, #0]
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2b00      	cmp	r3, #0
 800d598:	f47f af01 	bne.w	800d39e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d59c:	2300      	movs	r3, #0
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3738      	adds	r7, #56	@ 0x38
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b08c      	sub	sp, #48	@ 0x30
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	60f8      	str	r0, [r7, #12]
 800d5ae:	60b9      	str	r1, [r7, #8]
 800d5b0:	607a      	str	r2, [r7, #4]
 800d5b2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f107 0210 	add.w	r2, r7, #16
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7ff fc78 	bl	800cebc <validate>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d5d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d107      	bne.n	800d5ea <f_write+0x44>
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	7d5b      	ldrb	r3, [r3, #21]
 800d5de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d5e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d002      	beq.n	800d5f0 <f_write+0x4a>
 800d5ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d5ee:	e14b      	b.n	800d888 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	7d1b      	ldrb	r3, [r3, #20]
 800d5f4:	f003 0302 	and.w	r3, r3, #2
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d101      	bne.n	800d600 <f_write+0x5a>
 800d5fc:	2307      	movs	r3, #7
 800d5fe:	e143      	b.n	800d888 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	699a      	ldr	r2, [r3, #24]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	441a      	add	r2, r3
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	f080 812d 	bcs.w	800d86c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	699b      	ldr	r3, [r3, #24]
 800d616:	43db      	mvns	r3, r3
 800d618:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d61a:	e127      	b.n	800d86c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d624:	2b00      	cmp	r3, #0
 800d626:	f040 80e3 	bne.w	800d7f0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	699b      	ldr	r3, [r3, #24]
 800d62e:	0a5b      	lsrs	r3, r3, #9
 800d630:	693a      	ldr	r2, [r7, #16]
 800d632:	8952      	ldrh	r2, [r2, #10]
 800d634:	3a01      	subs	r2, #1
 800d636:	4013      	ands	r3, r2
 800d638:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d143      	bne.n	800d6c8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	699b      	ldr	r3, [r3, #24]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d10c      	bne.n	800d662 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d650:	2b00      	cmp	r3, #0
 800d652:	d11a      	bne.n	800d68a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2100      	movs	r1, #0
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fe fd2a 	bl	800c0b2 <create_chain>
 800d65e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d660:	e013      	b.n	800d68a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d666:	2b00      	cmp	r3, #0
 800d668:	d007      	beq.n	800d67a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	699b      	ldr	r3, [r3, #24]
 800d66e:	4619      	mov	r1, r3
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	f7fe fdb6 	bl	800c1e2 <clmt_clust>
 800d676:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d678:	e007      	b.n	800d68a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d67a:	68fa      	ldr	r2, [r7, #12]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	69db      	ldr	r3, [r3, #28]
 800d680:	4619      	mov	r1, r3
 800d682:	4610      	mov	r0, r2
 800d684:	f7fe fd15 	bl	800c0b2 <create_chain>
 800d688:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f000 80f2 	beq.w	800d876 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d694:	2b01      	cmp	r3, #1
 800d696:	d104      	bne.n	800d6a2 <f_write+0xfc>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2202      	movs	r2, #2
 800d69c:	755a      	strb	r2, [r3, #21]
 800d69e:	2302      	movs	r3, #2
 800d6a0:	e0f2      	b.n	800d888 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6a8:	d104      	bne.n	800d6b4 <f_write+0x10e>
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	755a      	strb	r2, [r3, #21]
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e0e9      	b.n	800d888 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6b8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d102      	bne.n	800d6c8 <f_write+0x122>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6c6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	7d1b      	ldrb	r3, [r3, #20]
 800d6cc:	b25b      	sxtb	r3, r3
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	da18      	bge.n	800d704 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	7858      	ldrb	r0, [r3, #1]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6a1a      	ldr	r2, [r3, #32]
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	f7fd ff1f 	bl	800b524 <disk_write>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d004      	beq.n	800d6f6 <f_write+0x150>
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	755a      	strb	r2, [r3, #21]
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e0c8      	b.n	800d888 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	7d1b      	ldrb	r3, [r3, #20]
 800d6fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6fe:	b2da      	uxtb	r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d704:	693a      	ldr	r2, [r7, #16]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	69db      	ldr	r3, [r3, #28]
 800d70a:	4619      	mov	r1, r3
 800d70c:	4610      	mov	r0, r2
 800d70e:	f7fe fabb 	bl	800bc88 <clust2sect>
 800d712:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d104      	bne.n	800d724 <f_write+0x17e>
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2202      	movs	r2, #2
 800d71e:	755a      	strb	r2, [r3, #21]
 800d720:	2302      	movs	r3, #2
 800d722:	e0b1      	b.n	800d888 <f_write+0x2e2>
			sect += csect;
 800d724:	697a      	ldr	r2, [r7, #20]
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	4413      	add	r3, r2
 800d72a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	0a5b      	lsrs	r3, r3, #9
 800d730:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d732:	6a3b      	ldr	r3, [r7, #32]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d03c      	beq.n	800d7b2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d738:	69ba      	ldr	r2, [r7, #24]
 800d73a:	6a3b      	ldr	r3, [r7, #32]
 800d73c:	4413      	add	r3, r2
 800d73e:	693a      	ldr	r2, [r7, #16]
 800d740:	8952      	ldrh	r2, [r2, #10]
 800d742:	4293      	cmp	r3, r2
 800d744:	d905      	bls.n	800d752 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	895b      	ldrh	r3, [r3, #10]
 800d74a:	461a      	mov	r2, r3
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	1ad3      	subs	r3, r2, r3
 800d750:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	7858      	ldrb	r0, [r3, #1]
 800d756:	6a3b      	ldr	r3, [r7, #32]
 800d758:	697a      	ldr	r2, [r7, #20]
 800d75a:	69f9      	ldr	r1, [r7, #28]
 800d75c:	f7fd fee2 	bl	800b524 <disk_write>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d004      	beq.n	800d770 <f_write+0x1ca>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2201      	movs	r2, #1
 800d76a:	755a      	strb	r2, [r3, #21]
 800d76c:	2301      	movs	r3, #1
 800d76e:	e08b      	b.n	800d888 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	6a1a      	ldr	r2, [r3, #32]
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	1ad3      	subs	r3, r2, r3
 800d778:	6a3a      	ldr	r2, [r7, #32]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d915      	bls.n	800d7aa <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6a1a      	ldr	r2, [r3, #32]
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	1ad3      	subs	r3, r2, r3
 800d78c:	025b      	lsls	r3, r3, #9
 800d78e:	69fa      	ldr	r2, [r7, #28]
 800d790:	4413      	add	r3, r2
 800d792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d796:	4619      	mov	r1, r3
 800d798:	f7fd ffac 	bl	800b6f4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	7d1b      	ldrb	r3, [r3, #20]
 800d7a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d7aa:	6a3b      	ldr	r3, [r7, #32]
 800d7ac:	025b      	lsls	r3, r3, #9
 800d7ae:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d7b0:	e03f      	b.n	800d832 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	6a1b      	ldr	r3, [r3, #32]
 800d7b6:	697a      	ldr	r2, [r7, #20]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d016      	beq.n	800d7ea <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	699a      	ldr	r2, [r3, #24]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d210      	bcs.n	800d7ea <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	7858      	ldrb	r0, [r3, #1]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	697a      	ldr	r2, [r7, #20]
 800d7d6:	f7fd fe76 	bl	800b4c6 <disk_read>
 800d7da:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d004      	beq.n	800d7ea <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	755a      	strb	r2, [r3, #21]
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e04e      	b.n	800d888 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	697a      	ldr	r2, [r7, #20]
 800d7ee:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	699b      	ldr	r3, [r3, #24]
 800d7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7f8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d7fc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d7fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	429a      	cmp	r2, r3
 800d804:	d901      	bls.n	800d80a <f_write+0x264>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	699b      	ldr	r3, [r3, #24]
 800d814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d818:	4413      	add	r3, r2
 800d81a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d81c:	69f9      	ldr	r1, [r7, #28]
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fd ff68 	bl	800b6f4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	7d1b      	ldrb	r3, [r3, #20]
 800d828:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d82c:	b2da      	uxtb	r2, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d832:	69fa      	ldr	r2, [r7, #28]
 800d834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d836:	4413      	add	r3, r2
 800d838:	61fb      	str	r3, [r7, #28]
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	699a      	ldr	r2, [r3, #24]
 800d83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d840:	441a      	add	r2, r3
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	619a      	str	r2, [r3, #24]
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	68da      	ldr	r2, [r3, #12]
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	699b      	ldr	r3, [r3, #24]
 800d84e:	429a      	cmp	r2, r3
 800d850:	bf38      	it	cc
 800d852:	461a      	movcc	r2, r3
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	60da      	str	r2, [r3, #12]
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d85e:	441a      	add	r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	601a      	str	r2, [r3, #0]
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	f47f aed4 	bne.w	800d61c <f_write+0x76>
 800d874:	e000      	b.n	800d878 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d876:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	7d1b      	ldrb	r3, [r3, #20]
 800d87c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d880:	b2da      	uxtb	r2, r3
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d886:	2300      	movs	r3, #0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3730      	adds	r7, #48	@ 0x30
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f107 0208 	add.w	r2, r7, #8
 800d89e:	4611      	mov	r1, r2
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7ff fb0b 	bl	800cebc <validate>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d8aa:	7dfb      	ldrb	r3, [r7, #23]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d168      	bne.n	800d982 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	7d1b      	ldrb	r3, [r3, #20]
 800d8b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d062      	beq.n	800d982 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	7d1b      	ldrb	r3, [r3, #20]
 800d8c0:	b25b      	sxtb	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	da15      	bge.n	800d8f2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	7858      	ldrb	r0, [r3, #1]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6a1a      	ldr	r2, [r3, #32]
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	f7fd fe25 	bl	800b524 <disk_write>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d001      	beq.n	800d8e4 <f_sync+0x54>
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e04f      	b.n	800d984 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	7d1b      	ldrb	r3, [r3, #20]
 800d8e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d8f2:	f7fd fdb9 	bl	800b468 <get_fattime>
 800d8f6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8fe:	4619      	mov	r1, r3
 800d900:	4610      	mov	r0, r2
 800d902:	f7fe f925 	bl	800bb50 <move_window>
 800d906:	4603      	mov	r3, r0
 800d908:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d90a:	7dfb      	ldrb	r3, [r7, #23]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d138      	bne.n	800d982 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d914:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	330b      	adds	r3, #11
 800d91a:	781a      	ldrb	r2, [r3, #0]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	330b      	adds	r3, #11
 800d920:	f042 0220 	orr.w	r2, r2, #32
 800d924:	b2d2      	uxtb	r2, r2
 800d926:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6818      	ldr	r0, [r3, #0]
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	461a      	mov	r2, r3
 800d932:	68f9      	ldr	r1, [r7, #12]
 800d934:	f7fe fe2f 	bl	800c596 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f103 021c 	add.w	r2, r3, #28
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	4619      	mov	r1, r3
 800d944:	4610      	mov	r0, r2
 800d946:	f7fd fea9 	bl	800b69c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	3316      	adds	r3, #22
 800d94e:	6939      	ldr	r1, [r7, #16]
 800d950:	4618      	mov	r0, r3
 800d952:	f7fd fea3 	bl	800b69c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	3312      	adds	r3, #18
 800d95a:	2100      	movs	r1, #0
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fd fe82 	bl	800b666 <st_word>
					fs->wflag = 1;
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	2201      	movs	r2, #1
 800d966:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7fe f91e 	bl	800bbac <sync_fs>
 800d970:	4603      	mov	r3, r0
 800d972:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	7d1b      	ldrb	r3, [r3, #20]
 800d978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d97c:	b2da      	uxtb	r2, r3
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d982:	7dfb      	ldrb	r3, [r7, #23]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3718      	adds	r7, #24
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f7ff ff7b 	bl	800d890 <f_sync>
 800d99a:	4603      	mov	r3, r0
 800d99c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d99e:	7bfb      	ldrb	r3, [r7, #15]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d118      	bne.n	800d9d6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f107 0208 	add.w	r2, r7, #8
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f7ff fa85 	bl	800cebc <validate>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d9b6:	7bfb      	ldrb	r3, [r7, #15]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10c      	bne.n	800d9d6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	691b      	ldr	r3, [r3, #16]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7fe f821 	bl	800ba08 <dec_lock>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d9ca:	7bfb      	ldrb	r3, [r7, #15]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d102      	bne.n	800d9d6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3710      	adds	r7, #16
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b087      	sub	sp, #28
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d9f6:	4b1f      	ldr	r3, [pc, #124]	@ (800da74 <FATFS_LinkDriverEx+0x94>)
 800d9f8:	7a5b      	ldrb	r3, [r3, #9]
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d131      	bne.n	800da64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800da00:	4b1c      	ldr	r3, [pc, #112]	@ (800da74 <FATFS_LinkDriverEx+0x94>)
 800da02:	7a5b      	ldrb	r3, [r3, #9]
 800da04:	b2db      	uxtb	r3, r3
 800da06:	461a      	mov	r2, r3
 800da08:	4b1a      	ldr	r3, [pc, #104]	@ (800da74 <FATFS_LinkDriverEx+0x94>)
 800da0a:	2100      	movs	r1, #0
 800da0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800da0e:	4b19      	ldr	r3, [pc, #100]	@ (800da74 <FATFS_LinkDriverEx+0x94>)
 800da10:	7a5b      	ldrb	r3, [r3, #9]
 800da12:	b2db      	uxtb	r3, r3
 800da14:	4a17      	ldr	r2, [pc, #92]	@ (800da74 <FATFS_LinkDriverEx+0x94>)
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4413      	add	r3, r2
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800da1e:	4b15      	ldr	r3, [pc, #84]	@ (800da74 <FATFS_LinkDriverEx+0x94>)
 800da20:	7a5b      	ldrb	r3, [r3, #9]
 800da22:	b2db      	uxtb	r3, r3
 800da24:	461a      	mov	r2, r3
 800da26:	4b13      	ldr	r3, [pc, #76]	@ (800da74 <FATFS_LinkDriverEx+0x94>)
 800da28:	4413      	add	r3, r2
 800da2a:	79fa      	ldrb	r2, [r7, #7]
 800da2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800da2e:	4b11      	ldr	r3, [pc, #68]	@ (800da74 <FATFS_LinkDriverEx+0x94>)
 800da30:	7a5b      	ldrb	r3, [r3, #9]
 800da32:	b2db      	uxtb	r3, r3
 800da34:	1c5a      	adds	r2, r3, #1
 800da36:	b2d1      	uxtb	r1, r2
 800da38:	4a0e      	ldr	r2, [pc, #56]	@ (800da74 <FATFS_LinkDriverEx+0x94>)
 800da3a:	7251      	strb	r1, [r2, #9]
 800da3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800da3e:	7dbb      	ldrb	r3, [r7, #22]
 800da40:	3330      	adds	r3, #48	@ 0x30
 800da42:	b2da      	uxtb	r2, r3
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	3301      	adds	r3, #1
 800da4c:	223a      	movs	r2, #58	@ 0x3a
 800da4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	3302      	adds	r3, #2
 800da54:	222f      	movs	r2, #47	@ 0x2f
 800da56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	3303      	adds	r3, #3
 800da5c:	2200      	movs	r2, #0
 800da5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800da60:	2300      	movs	r3, #0
 800da62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800da64:	7dfb      	ldrb	r3, [r7, #23]
}
 800da66:	4618      	mov	r0, r3
 800da68:	371c      	adds	r7, #28
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	200037e0 	.word	0x200037e0

0800da78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800da82:	2200      	movs	r2, #0
 800da84:	6839      	ldr	r1, [r7, #0]
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f7ff ffaa 	bl	800d9e0 <FATFS_LinkDriverEx>
 800da8c:	4603      	mov	r3, r0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <sulp>:
 800da96:	b570      	push	{r4, r5, r6, lr}
 800da98:	4604      	mov	r4, r0
 800da9a:	460d      	mov	r5, r1
 800da9c:	ec45 4b10 	vmov	d0, r4, r5
 800daa0:	4616      	mov	r6, r2
 800daa2:	f003 fd41 	bl	8011528 <__ulp>
 800daa6:	ec51 0b10 	vmov	r0, r1, d0
 800daaa:	b17e      	cbz	r6, 800dacc <sulp+0x36>
 800daac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dab0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	dd09      	ble.n	800dacc <sulp+0x36>
 800dab8:	051b      	lsls	r3, r3, #20
 800daba:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dabe:	2400      	movs	r4, #0
 800dac0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dac4:	4622      	mov	r2, r4
 800dac6:	462b      	mov	r3, r5
 800dac8:	f7f2 fdb6 	bl	8000638 <__aeabi_dmul>
 800dacc:	ec41 0b10 	vmov	d0, r0, r1
 800dad0:	bd70      	pop	{r4, r5, r6, pc}
 800dad2:	0000      	movs	r0, r0
 800dad4:	0000      	movs	r0, r0
	...

0800dad8 <_strtod_l>:
 800dad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dadc:	b09f      	sub	sp, #124	@ 0x7c
 800dade:	460c      	mov	r4, r1
 800dae0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800dae2:	2200      	movs	r2, #0
 800dae4:	921a      	str	r2, [sp, #104]	@ 0x68
 800dae6:	9005      	str	r0, [sp, #20]
 800dae8:	f04f 0a00 	mov.w	sl, #0
 800daec:	f04f 0b00 	mov.w	fp, #0
 800daf0:	460a      	mov	r2, r1
 800daf2:	9219      	str	r2, [sp, #100]	@ 0x64
 800daf4:	7811      	ldrb	r1, [r2, #0]
 800daf6:	292b      	cmp	r1, #43	@ 0x2b
 800daf8:	d04a      	beq.n	800db90 <_strtod_l+0xb8>
 800dafa:	d838      	bhi.n	800db6e <_strtod_l+0x96>
 800dafc:	290d      	cmp	r1, #13
 800dafe:	d832      	bhi.n	800db66 <_strtod_l+0x8e>
 800db00:	2908      	cmp	r1, #8
 800db02:	d832      	bhi.n	800db6a <_strtod_l+0x92>
 800db04:	2900      	cmp	r1, #0
 800db06:	d03b      	beq.n	800db80 <_strtod_l+0xa8>
 800db08:	2200      	movs	r2, #0
 800db0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800db0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800db0e:	782a      	ldrb	r2, [r5, #0]
 800db10:	2a30      	cmp	r2, #48	@ 0x30
 800db12:	f040 80b3 	bne.w	800dc7c <_strtod_l+0x1a4>
 800db16:	786a      	ldrb	r2, [r5, #1]
 800db18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800db1c:	2a58      	cmp	r2, #88	@ 0x58
 800db1e:	d16e      	bne.n	800dbfe <_strtod_l+0x126>
 800db20:	9302      	str	r3, [sp, #8]
 800db22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db24:	9301      	str	r3, [sp, #4]
 800db26:	ab1a      	add	r3, sp, #104	@ 0x68
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	4a8e      	ldr	r2, [pc, #568]	@ (800dd64 <_strtod_l+0x28c>)
 800db2c:	9805      	ldr	r0, [sp, #20]
 800db2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800db30:	a919      	add	r1, sp, #100	@ 0x64
 800db32:	f002 fdeb 	bl	801070c <__gethex>
 800db36:	f010 060f 	ands.w	r6, r0, #15
 800db3a:	4604      	mov	r4, r0
 800db3c:	d005      	beq.n	800db4a <_strtod_l+0x72>
 800db3e:	2e06      	cmp	r6, #6
 800db40:	d128      	bne.n	800db94 <_strtod_l+0xbc>
 800db42:	3501      	adds	r5, #1
 800db44:	2300      	movs	r3, #0
 800db46:	9519      	str	r5, [sp, #100]	@ 0x64
 800db48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f040 858e 	bne.w	800e66e <_strtod_l+0xb96>
 800db52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db54:	b1cb      	cbz	r3, 800db8a <_strtod_l+0xb2>
 800db56:	4652      	mov	r2, sl
 800db58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800db5c:	ec43 2b10 	vmov	d0, r2, r3
 800db60:	b01f      	add	sp, #124	@ 0x7c
 800db62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db66:	2920      	cmp	r1, #32
 800db68:	d1ce      	bne.n	800db08 <_strtod_l+0x30>
 800db6a:	3201      	adds	r2, #1
 800db6c:	e7c1      	b.n	800daf2 <_strtod_l+0x1a>
 800db6e:	292d      	cmp	r1, #45	@ 0x2d
 800db70:	d1ca      	bne.n	800db08 <_strtod_l+0x30>
 800db72:	2101      	movs	r1, #1
 800db74:	910b      	str	r1, [sp, #44]	@ 0x2c
 800db76:	1c51      	adds	r1, r2, #1
 800db78:	9119      	str	r1, [sp, #100]	@ 0x64
 800db7a:	7852      	ldrb	r2, [r2, #1]
 800db7c:	2a00      	cmp	r2, #0
 800db7e:	d1c5      	bne.n	800db0c <_strtod_l+0x34>
 800db80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800db82:	9419      	str	r4, [sp, #100]	@ 0x64
 800db84:	2b00      	cmp	r3, #0
 800db86:	f040 8570 	bne.w	800e66a <_strtod_l+0xb92>
 800db8a:	4652      	mov	r2, sl
 800db8c:	465b      	mov	r3, fp
 800db8e:	e7e5      	b.n	800db5c <_strtod_l+0x84>
 800db90:	2100      	movs	r1, #0
 800db92:	e7ef      	b.n	800db74 <_strtod_l+0x9c>
 800db94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db96:	b13a      	cbz	r2, 800dba8 <_strtod_l+0xd0>
 800db98:	2135      	movs	r1, #53	@ 0x35
 800db9a:	a81c      	add	r0, sp, #112	@ 0x70
 800db9c:	f003 fdbe 	bl	801171c <__copybits>
 800dba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dba2:	9805      	ldr	r0, [sp, #20]
 800dba4:	f003 f98c 	bl	8010ec0 <_Bfree>
 800dba8:	3e01      	subs	r6, #1
 800dbaa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800dbac:	2e04      	cmp	r6, #4
 800dbae:	d806      	bhi.n	800dbbe <_strtod_l+0xe6>
 800dbb0:	e8df f006 	tbb	[pc, r6]
 800dbb4:	201d0314 	.word	0x201d0314
 800dbb8:	14          	.byte	0x14
 800dbb9:	00          	.byte	0x00
 800dbba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800dbbe:	05e1      	lsls	r1, r4, #23
 800dbc0:	bf48      	it	mi
 800dbc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800dbc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dbca:	0d1b      	lsrs	r3, r3, #20
 800dbcc:	051b      	lsls	r3, r3, #20
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1bb      	bne.n	800db4a <_strtod_l+0x72>
 800dbd2:	f001 fe33 	bl	800f83c <__errno>
 800dbd6:	2322      	movs	r3, #34	@ 0x22
 800dbd8:	6003      	str	r3, [r0, #0]
 800dbda:	e7b6      	b.n	800db4a <_strtod_l+0x72>
 800dbdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800dbe0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800dbe4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800dbe8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dbec:	e7e7      	b.n	800dbbe <_strtod_l+0xe6>
 800dbee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800dd6c <_strtod_l+0x294>
 800dbf2:	e7e4      	b.n	800dbbe <_strtod_l+0xe6>
 800dbf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800dbf8:	f04f 3aff 	mov.w	sl, #4294967295
 800dbfc:	e7df      	b.n	800dbbe <_strtod_l+0xe6>
 800dbfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc00:	1c5a      	adds	r2, r3, #1
 800dc02:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc04:	785b      	ldrb	r3, [r3, #1]
 800dc06:	2b30      	cmp	r3, #48	@ 0x30
 800dc08:	d0f9      	beq.n	800dbfe <_strtod_l+0x126>
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d09d      	beq.n	800db4a <_strtod_l+0x72>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc14:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc16:	2300      	movs	r3, #0
 800dc18:	9308      	str	r3, [sp, #32]
 800dc1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc1c:	461f      	mov	r7, r3
 800dc1e:	220a      	movs	r2, #10
 800dc20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800dc22:	7805      	ldrb	r5, [r0, #0]
 800dc24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800dc28:	b2d9      	uxtb	r1, r3
 800dc2a:	2909      	cmp	r1, #9
 800dc2c:	d928      	bls.n	800dc80 <_strtod_l+0x1a8>
 800dc2e:	494e      	ldr	r1, [pc, #312]	@ (800dd68 <_strtod_l+0x290>)
 800dc30:	2201      	movs	r2, #1
 800dc32:	f001 fd4a 	bl	800f6ca <strncmp>
 800dc36:	2800      	cmp	r0, #0
 800dc38:	d032      	beq.n	800dca0 <_strtod_l+0x1c8>
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	462a      	mov	r2, r5
 800dc3e:	4681      	mov	r9, r0
 800dc40:	463d      	mov	r5, r7
 800dc42:	4603      	mov	r3, r0
 800dc44:	2a65      	cmp	r2, #101	@ 0x65
 800dc46:	d001      	beq.n	800dc4c <_strtod_l+0x174>
 800dc48:	2a45      	cmp	r2, #69	@ 0x45
 800dc4a:	d114      	bne.n	800dc76 <_strtod_l+0x19e>
 800dc4c:	b91d      	cbnz	r5, 800dc56 <_strtod_l+0x17e>
 800dc4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc50:	4302      	orrs	r2, r0
 800dc52:	d095      	beq.n	800db80 <_strtod_l+0xa8>
 800dc54:	2500      	movs	r5, #0
 800dc56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dc58:	1c62      	adds	r2, r4, #1
 800dc5a:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc5c:	7862      	ldrb	r2, [r4, #1]
 800dc5e:	2a2b      	cmp	r2, #43	@ 0x2b
 800dc60:	d077      	beq.n	800dd52 <_strtod_l+0x27a>
 800dc62:	2a2d      	cmp	r2, #45	@ 0x2d
 800dc64:	d07b      	beq.n	800dd5e <_strtod_l+0x286>
 800dc66:	f04f 0c00 	mov.w	ip, #0
 800dc6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dc6e:	2909      	cmp	r1, #9
 800dc70:	f240 8082 	bls.w	800dd78 <_strtod_l+0x2a0>
 800dc74:	9419      	str	r4, [sp, #100]	@ 0x64
 800dc76:	f04f 0800 	mov.w	r8, #0
 800dc7a:	e0a2      	b.n	800ddc2 <_strtod_l+0x2ea>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	e7c7      	b.n	800dc10 <_strtod_l+0x138>
 800dc80:	2f08      	cmp	r7, #8
 800dc82:	bfd5      	itete	le
 800dc84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800dc86:	9908      	ldrgt	r1, [sp, #32]
 800dc88:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800dc90:	f100 0001 	add.w	r0, r0, #1
 800dc94:	bfd4      	ite	le
 800dc96:	930a      	strle	r3, [sp, #40]	@ 0x28
 800dc98:	9308      	strgt	r3, [sp, #32]
 800dc9a:	3701      	adds	r7, #1
 800dc9c:	9019      	str	r0, [sp, #100]	@ 0x64
 800dc9e:	e7bf      	b.n	800dc20 <_strtod_l+0x148>
 800dca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dca2:	1c5a      	adds	r2, r3, #1
 800dca4:	9219      	str	r2, [sp, #100]	@ 0x64
 800dca6:	785a      	ldrb	r2, [r3, #1]
 800dca8:	b37f      	cbz	r7, 800dd0a <_strtod_l+0x232>
 800dcaa:	4681      	mov	r9, r0
 800dcac:	463d      	mov	r5, r7
 800dcae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dcb2:	2b09      	cmp	r3, #9
 800dcb4:	d912      	bls.n	800dcdc <_strtod_l+0x204>
 800dcb6:	2301      	movs	r3, #1
 800dcb8:	e7c4      	b.n	800dc44 <_strtod_l+0x16c>
 800dcba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dcbc:	1c5a      	adds	r2, r3, #1
 800dcbe:	9219      	str	r2, [sp, #100]	@ 0x64
 800dcc0:	785a      	ldrb	r2, [r3, #1]
 800dcc2:	3001      	adds	r0, #1
 800dcc4:	2a30      	cmp	r2, #48	@ 0x30
 800dcc6:	d0f8      	beq.n	800dcba <_strtod_l+0x1e2>
 800dcc8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dccc:	2b08      	cmp	r3, #8
 800dcce:	f200 84d3 	bhi.w	800e678 <_strtod_l+0xba0>
 800dcd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dcd4:	930c      	str	r3, [sp, #48]	@ 0x30
 800dcd6:	4681      	mov	r9, r0
 800dcd8:	2000      	movs	r0, #0
 800dcda:	4605      	mov	r5, r0
 800dcdc:	3a30      	subs	r2, #48	@ 0x30
 800dcde:	f100 0301 	add.w	r3, r0, #1
 800dce2:	d02a      	beq.n	800dd3a <_strtod_l+0x262>
 800dce4:	4499      	add	r9, r3
 800dce6:	eb00 0c05 	add.w	ip, r0, r5
 800dcea:	462b      	mov	r3, r5
 800dcec:	210a      	movs	r1, #10
 800dcee:	4563      	cmp	r3, ip
 800dcf0:	d10d      	bne.n	800dd0e <_strtod_l+0x236>
 800dcf2:	1c69      	adds	r1, r5, #1
 800dcf4:	4401      	add	r1, r0
 800dcf6:	4428      	add	r0, r5
 800dcf8:	2808      	cmp	r0, #8
 800dcfa:	dc16      	bgt.n	800dd2a <_strtod_l+0x252>
 800dcfc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dcfe:	230a      	movs	r3, #10
 800dd00:	fb03 2300 	mla	r3, r3, r0, r2
 800dd04:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd06:	2300      	movs	r3, #0
 800dd08:	e018      	b.n	800dd3c <_strtod_l+0x264>
 800dd0a:	4638      	mov	r0, r7
 800dd0c:	e7da      	b.n	800dcc4 <_strtod_l+0x1ec>
 800dd0e:	2b08      	cmp	r3, #8
 800dd10:	f103 0301 	add.w	r3, r3, #1
 800dd14:	dc03      	bgt.n	800dd1e <_strtod_l+0x246>
 800dd16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dd18:	434e      	muls	r6, r1
 800dd1a:	960a      	str	r6, [sp, #40]	@ 0x28
 800dd1c:	e7e7      	b.n	800dcee <_strtod_l+0x216>
 800dd1e:	2b10      	cmp	r3, #16
 800dd20:	bfde      	ittt	le
 800dd22:	9e08      	ldrle	r6, [sp, #32]
 800dd24:	434e      	mulle	r6, r1
 800dd26:	9608      	strle	r6, [sp, #32]
 800dd28:	e7e1      	b.n	800dcee <_strtod_l+0x216>
 800dd2a:	280f      	cmp	r0, #15
 800dd2c:	dceb      	bgt.n	800dd06 <_strtod_l+0x22e>
 800dd2e:	9808      	ldr	r0, [sp, #32]
 800dd30:	230a      	movs	r3, #10
 800dd32:	fb03 2300 	mla	r3, r3, r0, r2
 800dd36:	9308      	str	r3, [sp, #32]
 800dd38:	e7e5      	b.n	800dd06 <_strtod_l+0x22e>
 800dd3a:	4629      	mov	r1, r5
 800dd3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd3e:	1c50      	adds	r0, r2, #1
 800dd40:	9019      	str	r0, [sp, #100]	@ 0x64
 800dd42:	7852      	ldrb	r2, [r2, #1]
 800dd44:	4618      	mov	r0, r3
 800dd46:	460d      	mov	r5, r1
 800dd48:	e7b1      	b.n	800dcae <_strtod_l+0x1d6>
 800dd4a:	f04f 0900 	mov.w	r9, #0
 800dd4e:	2301      	movs	r3, #1
 800dd50:	e77d      	b.n	800dc4e <_strtod_l+0x176>
 800dd52:	f04f 0c00 	mov.w	ip, #0
 800dd56:	1ca2      	adds	r2, r4, #2
 800dd58:	9219      	str	r2, [sp, #100]	@ 0x64
 800dd5a:	78a2      	ldrb	r2, [r4, #2]
 800dd5c:	e785      	b.n	800dc6a <_strtod_l+0x192>
 800dd5e:	f04f 0c01 	mov.w	ip, #1
 800dd62:	e7f8      	b.n	800dd56 <_strtod_l+0x27e>
 800dd64:	08013224 	.word	0x08013224
 800dd68:	0801320c 	.word	0x0801320c
 800dd6c:	7ff00000 	.word	0x7ff00000
 800dd70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd72:	1c51      	adds	r1, r2, #1
 800dd74:	9119      	str	r1, [sp, #100]	@ 0x64
 800dd76:	7852      	ldrb	r2, [r2, #1]
 800dd78:	2a30      	cmp	r2, #48	@ 0x30
 800dd7a:	d0f9      	beq.n	800dd70 <_strtod_l+0x298>
 800dd7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dd80:	2908      	cmp	r1, #8
 800dd82:	f63f af78 	bhi.w	800dc76 <_strtod_l+0x19e>
 800dd86:	3a30      	subs	r2, #48	@ 0x30
 800dd88:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dd8e:	f04f 080a 	mov.w	r8, #10
 800dd92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd94:	1c56      	adds	r6, r2, #1
 800dd96:	9619      	str	r6, [sp, #100]	@ 0x64
 800dd98:	7852      	ldrb	r2, [r2, #1]
 800dd9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dd9e:	f1be 0f09 	cmp.w	lr, #9
 800dda2:	d939      	bls.n	800de18 <_strtod_l+0x340>
 800dda4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dda6:	1a76      	subs	r6, r6, r1
 800dda8:	2e08      	cmp	r6, #8
 800ddaa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ddae:	dc03      	bgt.n	800ddb8 <_strtod_l+0x2e0>
 800ddb0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ddb2:	4588      	cmp	r8, r1
 800ddb4:	bfa8      	it	ge
 800ddb6:	4688      	movge	r8, r1
 800ddb8:	f1bc 0f00 	cmp.w	ip, #0
 800ddbc:	d001      	beq.n	800ddc2 <_strtod_l+0x2ea>
 800ddbe:	f1c8 0800 	rsb	r8, r8, #0
 800ddc2:	2d00      	cmp	r5, #0
 800ddc4:	d14e      	bne.n	800de64 <_strtod_l+0x38c>
 800ddc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ddc8:	4308      	orrs	r0, r1
 800ddca:	f47f aebe 	bne.w	800db4a <_strtod_l+0x72>
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f47f aed6 	bne.w	800db80 <_strtod_l+0xa8>
 800ddd4:	2a69      	cmp	r2, #105	@ 0x69
 800ddd6:	d028      	beq.n	800de2a <_strtod_l+0x352>
 800ddd8:	dc25      	bgt.n	800de26 <_strtod_l+0x34e>
 800ddda:	2a49      	cmp	r2, #73	@ 0x49
 800dddc:	d025      	beq.n	800de2a <_strtod_l+0x352>
 800ddde:	2a4e      	cmp	r2, #78	@ 0x4e
 800dde0:	f47f aece 	bne.w	800db80 <_strtod_l+0xa8>
 800dde4:	499b      	ldr	r1, [pc, #620]	@ (800e054 <_strtod_l+0x57c>)
 800dde6:	a819      	add	r0, sp, #100	@ 0x64
 800dde8:	f002 feb2 	bl	8010b50 <__match>
 800ddec:	2800      	cmp	r0, #0
 800ddee:	f43f aec7 	beq.w	800db80 <_strtod_l+0xa8>
 800ddf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	2b28      	cmp	r3, #40	@ 0x28
 800ddf8:	d12e      	bne.n	800de58 <_strtod_l+0x380>
 800ddfa:	4997      	ldr	r1, [pc, #604]	@ (800e058 <_strtod_l+0x580>)
 800ddfc:	aa1c      	add	r2, sp, #112	@ 0x70
 800ddfe:	a819      	add	r0, sp, #100	@ 0x64
 800de00:	f002 feba 	bl	8010b78 <__hexnan>
 800de04:	2805      	cmp	r0, #5
 800de06:	d127      	bne.n	800de58 <_strtod_l+0x380>
 800de08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800de0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800de0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800de12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800de16:	e698      	b.n	800db4a <_strtod_l+0x72>
 800de18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800de1a:	fb08 2101 	mla	r1, r8, r1, r2
 800de1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800de22:	920e      	str	r2, [sp, #56]	@ 0x38
 800de24:	e7b5      	b.n	800dd92 <_strtod_l+0x2ba>
 800de26:	2a6e      	cmp	r2, #110	@ 0x6e
 800de28:	e7da      	b.n	800dde0 <_strtod_l+0x308>
 800de2a:	498c      	ldr	r1, [pc, #560]	@ (800e05c <_strtod_l+0x584>)
 800de2c:	a819      	add	r0, sp, #100	@ 0x64
 800de2e:	f002 fe8f 	bl	8010b50 <__match>
 800de32:	2800      	cmp	r0, #0
 800de34:	f43f aea4 	beq.w	800db80 <_strtod_l+0xa8>
 800de38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de3a:	4989      	ldr	r1, [pc, #548]	@ (800e060 <_strtod_l+0x588>)
 800de3c:	3b01      	subs	r3, #1
 800de3e:	a819      	add	r0, sp, #100	@ 0x64
 800de40:	9319      	str	r3, [sp, #100]	@ 0x64
 800de42:	f002 fe85 	bl	8010b50 <__match>
 800de46:	b910      	cbnz	r0, 800de4e <_strtod_l+0x376>
 800de48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de4a:	3301      	adds	r3, #1
 800de4c:	9319      	str	r3, [sp, #100]	@ 0x64
 800de4e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e070 <_strtod_l+0x598>
 800de52:	f04f 0a00 	mov.w	sl, #0
 800de56:	e678      	b.n	800db4a <_strtod_l+0x72>
 800de58:	4882      	ldr	r0, [pc, #520]	@ (800e064 <_strtod_l+0x58c>)
 800de5a:	f001 fd2d 	bl	800f8b8 <nan>
 800de5e:	ec5b ab10 	vmov	sl, fp, d0
 800de62:	e672      	b.n	800db4a <_strtod_l+0x72>
 800de64:	eba8 0309 	sub.w	r3, r8, r9
 800de68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800de6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800de6c:	2f00      	cmp	r7, #0
 800de6e:	bf08      	it	eq
 800de70:	462f      	moveq	r7, r5
 800de72:	2d10      	cmp	r5, #16
 800de74:	462c      	mov	r4, r5
 800de76:	bfa8      	it	ge
 800de78:	2410      	movge	r4, #16
 800de7a:	f7f2 fb63 	bl	8000544 <__aeabi_ui2d>
 800de7e:	2d09      	cmp	r5, #9
 800de80:	4682      	mov	sl, r0
 800de82:	468b      	mov	fp, r1
 800de84:	dc13      	bgt.n	800deae <_strtod_l+0x3d6>
 800de86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de88:	2b00      	cmp	r3, #0
 800de8a:	f43f ae5e 	beq.w	800db4a <_strtod_l+0x72>
 800de8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de90:	dd78      	ble.n	800df84 <_strtod_l+0x4ac>
 800de92:	2b16      	cmp	r3, #22
 800de94:	dc5f      	bgt.n	800df56 <_strtod_l+0x47e>
 800de96:	4974      	ldr	r1, [pc, #464]	@ (800e068 <_strtod_l+0x590>)
 800de98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dea0:	4652      	mov	r2, sl
 800dea2:	465b      	mov	r3, fp
 800dea4:	f7f2 fbc8 	bl	8000638 <__aeabi_dmul>
 800dea8:	4682      	mov	sl, r0
 800deaa:	468b      	mov	fp, r1
 800deac:	e64d      	b.n	800db4a <_strtod_l+0x72>
 800deae:	4b6e      	ldr	r3, [pc, #440]	@ (800e068 <_strtod_l+0x590>)
 800deb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800deb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800deb8:	f7f2 fbbe 	bl	8000638 <__aeabi_dmul>
 800debc:	4682      	mov	sl, r0
 800debe:	9808      	ldr	r0, [sp, #32]
 800dec0:	468b      	mov	fp, r1
 800dec2:	f7f2 fb3f 	bl	8000544 <__aeabi_ui2d>
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	4650      	mov	r0, sl
 800decc:	4659      	mov	r1, fp
 800dece:	f7f2 f9fd 	bl	80002cc <__adddf3>
 800ded2:	2d0f      	cmp	r5, #15
 800ded4:	4682      	mov	sl, r0
 800ded6:	468b      	mov	fp, r1
 800ded8:	ddd5      	ble.n	800de86 <_strtod_l+0x3ae>
 800deda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dedc:	1b2c      	subs	r4, r5, r4
 800dede:	441c      	add	r4, r3
 800dee0:	2c00      	cmp	r4, #0
 800dee2:	f340 8096 	ble.w	800e012 <_strtod_l+0x53a>
 800dee6:	f014 030f 	ands.w	r3, r4, #15
 800deea:	d00a      	beq.n	800df02 <_strtod_l+0x42a>
 800deec:	495e      	ldr	r1, [pc, #376]	@ (800e068 <_strtod_l+0x590>)
 800deee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800def2:	4652      	mov	r2, sl
 800def4:	465b      	mov	r3, fp
 800def6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800defa:	f7f2 fb9d 	bl	8000638 <__aeabi_dmul>
 800defe:	4682      	mov	sl, r0
 800df00:	468b      	mov	fp, r1
 800df02:	f034 040f 	bics.w	r4, r4, #15
 800df06:	d073      	beq.n	800dff0 <_strtod_l+0x518>
 800df08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800df0c:	dd48      	ble.n	800dfa0 <_strtod_l+0x4c8>
 800df0e:	2400      	movs	r4, #0
 800df10:	46a0      	mov	r8, r4
 800df12:	940a      	str	r4, [sp, #40]	@ 0x28
 800df14:	46a1      	mov	r9, r4
 800df16:	9a05      	ldr	r2, [sp, #20]
 800df18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e070 <_strtod_l+0x598>
 800df1c:	2322      	movs	r3, #34	@ 0x22
 800df1e:	6013      	str	r3, [r2, #0]
 800df20:	f04f 0a00 	mov.w	sl, #0
 800df24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df26:	2b00      	cmp	r3, #0
 800df28:	f43f ae0f 	beq.w	800db4a <_strtod_l+0x72>
 800df2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800df2e:	9805      	ldr	r0, [sp, #20]
 800df30:	f002 ffc6 	bl	8010ec0 <_Bfree>
 800df34:	9805      	ldr	r0, [sp, #20]
 800df36:	4649      	mov	r1, r9
 800df38:	f002 ffc2 	bl	8010ec0 <_Bfree>
 800df3c:	9805      	ldr	r0, [sp, #20]
 800df3e:	4641      	mov	r1, r8
 800df40:	f002 ffbe 	bl	8010ec0 <_Bfree>
 800df44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800df46:	9805      	ldr	r0, [sp, #20]
 800df48:	f002 ffba 	bl	8010ec0 <_Bfree>
 800df4c:	9805      	ldr	r0, [sp, #20]
 800df4e:	4621      	mov	r1, r4
 800df50:	f002 ffb6 	bl	8010ec0 <_Bfree>
 800df54:	e5f9      	b.n	800db4a <_strtod_l+0x72>
 800df56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800df5c:	4293      	cmp	r3, r2
 800df5e:	dbbc      	blt.n	800deda <_strtod_l+0x402>
 800df60:	4c41      	ldr	r4, [pc, #260]	@ (800e068 <_strtod_l+0x590>)
 800df62:	f1c5 050f 	rsb	r5, r5, #15
 800df66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800df6a:	4652      	mov	r2, sl
 800df6c:	465b      	mov	r3, fp
 800df6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df72:	f7f2 fb61 	bl	8000638 <__aeabi_dmul>
 800df76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df78:	1b5d      	subs	r5, r3, r5
 800df7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800df7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df82:	e78f      	b.n	800dea4 <_strtod_l+0x3cc>
 800df84:	3316      	adds	r3, #22
 800df86:	dba8      	blt.n	800deda <_strtod_l+0x402>
 800df88:	4b37      	ldr	r3, [pc, #220]	@ (800e068 <_strtod_l+0x590>)
 800df8a:	eba9 0808 	sub.w	r8, r9, r8
 800df8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800df92:	e9d8 2300 	ldrd	r2, r3, [r8]
 800df96:	4650      	mov	r0, sl
 800df98:	4659      	mov	r1, fp
 800df9a:	f7f2 fc77 	bl	800088c <__aeabi_ddiv>
 800df9e:	e783      	b.n	800dea8 <_strtod_l+0x3d0>
 800dfa0:	4b32      	ldr	r3, [pc, #200]	@ (800e06c <_strtod_l+0x594>)
 800dfa2:	9308      	str	r3, [sp, #32]
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	1124      	asrs	r4, r4, #4
 800dfa8:	4650      	mov	r0, sl
 800dfaa:	4659      	mov	r1, fp
 800dfac:	461e      	mov	r6, r3
 800dfae:	2c01      	cmp	r4, #1
 800dfb0:	dc21      	bgt.n	800dff6 <_strtod_l+0x51e>
 800dfb2:	b10b      	cbz	r3, 800dfb8 <_strtod_l+0x4e0>
 800dfb4:	4682      	mov	sl, r0
 800dfb6:	468b      	mov	fp, r1
 800dfb8:	492c      	ldr	r1, [pc, #176]	@ (800e06c <_strtod_l+0x594>)
 800dfba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800dfbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dfc2:	4652      	mov	r2, sl
 800dfc4:	465b      	mov	r3, fp
 800dfc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfca:	f7f2 fb35 	bl	8000638 <__aeabi_dmul>
 800dfce:	4b28      	ldr	r3, [pc, #160]	@ (800e070 <_strtod_l+0x598>)
 800dfd0:	460a      	mov	r2, r1
 800dfd2:	400b      	ands	r3, r1
 800dfd4:	4927      	ldr	r1, [pc, #156]	@ (800e074 <_strtod_l+0x59c>)
 800dfd6:	428b      	cmp	r3, r1
 800dfd8:	4682      	mov	sl, r0
 800dfda:	d898      	bhi.n	800df0e <_strtod_l+0x436>
 800dfdc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800dfe0:	428b      	cmp	r3, r1
 800dfe2:	bf86      	itte	hi
 800dfe4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e078 <_strtod_l+0x5a0>
 800dfe8:	f04f 3aff 	movhi.w	sl, #4294967295
 800dfec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800dff0:	2300      	movs	r3, #0
 800dff2:	9308      	str	r3, [sp, #32]
 800dff4:	e07a      	b.n	800e0ec <_strtod_l+0x614>
 800dff6:	07e2      	lsls	r2, r4, #31
 800dff8:	d505      	bpl.n	800e006 <_strtod_l+0x52e>
 800dffa:	9b08      	ldr	r3, [sp, #32]
 800dffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e000:	f7f2 fb1a 	bl	8000638 <__aeabi_dmul>
 800e004:	2301      	movs	r3, #1
 800e006:	9a08      	ldr	r2, [sp, #32]
 800e008:	3208      	adds	r2, #8
 800e00a:	3601      	adds	r6, #1
 800e00c:	1064      	asrs	r4, r4, #1
 800e00e:	9208      	str	r2, [sp, #32]
 800e010:	e7cd      	b.n	800dfae <_strtod_l+0x4d6>
 800e012:	d0ed      	beq.n	800dff0 <_strtod_l+0x518>
 800e014:	4264      	negs	r4, r4
 800e016:	f014 020f 	ands.w	r2, r4, #15
 800e01a:	d00a      	beq.n	800e032 <_strtod_l+0x55a>
 800e01c:	4b12      	ldr	r3, [pc, #72]	@ (800e068 <_strtod_l+0x590>)
 800e01e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e022:	4650      	mov	r0, sl
 800e024:	4659      	mov	r1, fp
 800e026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02a:	f7f2 fc2f 	bl	800088c <__aeabi_ddiv>
 800e02e:	4682      	mov	sl, r0
 800e030:	468b      	mov	fp, r1
 800e032:	1124      	asrs	r4, r4, #4
 800e034:	d0dc      	beq.n	800dff0 <_strtod_l+0x518>
 800e036:	2c1f      	cmp	r4, #31
 800e038:	dd20      	ble.n	800e07c <_strtod_l+0x5a4>
 800e03a:	2400      	movs	r4, #0
 800e03c:	46a0      	mov	r8, r4
 800e03e:	940a      	str	r4, [sp, #40]	@ 0x28
 800e040:	46a1      	mov	r9, r4
 800e042:	9a05      	ldr	r2, [sp, #20]
 800e044:	2322      	movs	r3, #34	@ 0x22
 800e046:	f04f 0a00 	mov.w	sl, #0
 800e04a:	f04f 0b00 	mov.w	fp, #0
 800e04e:	6013      	str	r3, [r2, #0]
 800e050:	e768      	b.n	800df24 <_strtod_l+0x44c>
 800e052:	bf00      	nop
 800e054:	0801326d 	.word	0x0801326d
 800e058:	08013210 	.word	0x08013210
 800e05c:	08013265 	.word	0x08013265
 800e060:	08013351 	.word	0x08013351
 800e064:	0801334d 	.word	0x0801334d
 800e068:	080134b8 	.word	0x080134b8
 800e06c:	08013490 	.word	0x08013490
 800e070:	7ff00000 	.word	0x7ff00000
 800e074:	7ca00000 	.word	0x7ca00000
 800e078:	7fefffff 	.word	0x7fefffff
 800e07c:	f014 0310 	ands.w	r3, r4, #16
 800e080:	bf18      	it	ne
 800e082:	236a      	movne	r3, #106	@ 0x6a
 800e084:	4ea9      	ldr	r6, [pc, #676]	@ (800e32c <_strtod_l+0x854>)
 800e086:	9308      	str	r3, [sp, #32]
 800e088:	4650      	mov	r0, sl
 800e08a:	4659      	mov	r1, fp
 800e08c:	2300      	movs	r3, #0
 800e08e:	07e2      	lsls	r2, r4, #31
 800e090:	d504      	bpl.n	800e09c <_strtod_l+0x5c4>
 800e092:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e096:	f7f2 facf 	bl	8000638 <__aeabi_dmul>
 800e09a:	2301      	movs	r3, #1
 800e09c:	1064      	asrs	r4, r4, #1
 800e09e:	f106 0608 	add.w	r6, r6, #8
 800e0a2:	d1f4      	bne.n	800e08e <_strtod_l+0x5b6>
 800e0a4:	b10b      	cbz	r3, 800e0aa <_strtod_l+0x5d2>
 800e0a6:	4682      	mov	sl, r0
 800e0a8:	468b      	mov	fp, r1
 800e0aa:	9b08      	ldr	r3, [sp, #32]
 800e0ac:	b1b3      	cbz	r3, 800e0dc <_strtod_l+0x604>
 800e0ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e0b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	4659      	mov	r1, fp
 800e0ba:	dd0f      	ble.n	800e0dc <_strtod_l+0x604>
 800e0bc:	2b1f      	cmp	r3, #31
 800e0be:	dd55      	ble.n	800e16c <_strtod_l+0x694>
 800e0c0:	2b34      	cmp	r3, #52	@ 0x34
 800e0c2:	bfde      	ittt	le
 800e0c4:	f04f 33ff 	movle.w	r3, #4294967295
 800e0c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e0cc:	4093      	lslle	r3, r2
 800e0ce:	f04f 0a00 	mov.w	sl, #0
 800e0d2:	bfcc      	ite	gt
 800e0d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e0d8:	ea03 0b01 	andle.w	fp, r3, r1
 800e0dc:	2200      	movs	r2, #0
 800e0de:	2300      	movs	r3, #0
 800e0e0:	4650      	mov	r0, sl
 800e0e2:	4659      	mov	r1, fp
 800e0e4:	f7f2 fd10 	bl	8000b08 <__aeabi_dcmpeq>
 800e0e8:	2800      	cmp	r0, #0
 800e0ea:	d1a6      	bne.n	800e03a <_strtod_l+0x562>
 800e0ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e0f2:	9805      	ldr	r0, [sp, #20]
 800e0f4:	462b      	mov	r3, r5
 800e0f6:	463a      	mov	r2, r7
 800e0f8:	f002 ff4a 	bl	8010f90 <__s2b>
 800e0fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e0fe:	2800      	cmp	r0, #0
 800e100:	f43f af05 	beq.w	800df0e <_strtod_l+0x436>
 800e104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e106:	2a00      	cmp	r2, #0
 800e108:	eba9 0308 	sub.w	r3, r9, r8
 800e10c:	bfa8      	it	ge
 800e10e:	2300      	movge	r3, #0
 800e110:	9312      	str	r3, [sp, #72]	@ 0x48
 800e112:	2400      	movs	r4, #0
 800e114:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e118:	9316      	str	r3, [sp, #88]	@ 0x58
 800e11a:	46a0      	mov	r8, r4
 800e11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e11e:	9805      	ldr	r0, [sp, #20]
 800e120:	6859      	ldr	r1, [r3, #4]
 800e122:	f002 fe8d 	bl	8010e40 <_Balloc>
 800e126:	4681      	mov	r9, r0
 800e128:	2800      	cmp	r0, #0
 800e12a:	f43f aef4 	beq.w	800df16 <_strtod_l+0x43e>
 800e12e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e130:	691a      	ldr	r2, [r3, #16]
 800e132:	3202      	adds	r2, #2
 800e134:	f103 010c 	add.w	r1, r3, #12
 800e138:	0092      	lsls	r2, r2, #2
 800e13a:	300c      	adds	r0, #12
 800e13c:	f001 fbab 	bl	800f896 <memcpy>
 800e140:	ec4b ab10 	vmov	d0, sl, fp
 800e144:	9805      	ldr	r0, [sp, #20]
 800e146:	aa1c      	add	r2, sp, #112	@ 0x70
 800e148:	a91b      	add	r1, sp, #108	@ 0x6c
 800e14a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e14e:	f003 fa5b 	bl	8011608 <__d2b>
 800e152:	901a      	str	r0, [sp, #104]	@ 0x68
 800e154:	2800      	cmp	r0, #0
 800e156:	f43f aede 	beq.w	800df16 <_strtod_l+0x43e>
 800e15a:	9805      	ldr	r0, [sp, #20]
 800e15c:	2101      	movs	r1, #1
 800e15e:	f002 ffad 	bl	80110bc <__i2b>
 800e162:	4680      	mov	r8, r0
 800e164:	b948      	cbnz	r0, 800e17a <_strtod_l+0x6a2>
 800e166:	f04f 0800 	mov.w	r8, #0
 800e16a:	e6d4      	b.n	800df16 <_strtod_l+0x43e>
 800e16c:	f04f 32ff 	mov.w	r2, #4294967295
 800e170:	fa02 f303 	lsl.w	r3, r2, r3
 800e174:	ea03 0a0a 	and.w	sl, r3, sl
 800e178:	e7b0      	b.n	800e0dc <_strtod_l+0x604>
 800e17a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e17c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e17e:	2d00      	cmp	r5, #0
 800e180:	bfab      	itete	ge
 800e182:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e184:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e186:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e188:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e18a:	bfac      	ite	ge
 800e18c:	18ef      	addge	r7, r5, r3
 800e18e:	1b5e      	sublt	r6, r3, r5
 800e190:	9b08      	ldr	r3, [sp, #32]
 800e192:	1aed      	subs	r5, r5, r3
 800e194:	4415      	add	r5, r2
 800e196:	4b66      	ldr	r3, [pc, #408]	@ (800e330 <_strtod_l+0x858>)
 800e198:	3d01      	subs	r5, #1
 800e19a:	429d      	cmp	r5, r3
 800e19c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e1a0:	da50      	bge.n	800e244 <_strtod_l+0x76c>
 800e1a2:	1b5b      	subs	r3, r3, r5
 800e1a4:	2b1f      	cmp	r3, #31
 800e1a6:	eba2 0203 	sub.w	r2, r2, r3
 800e1aa:	f04f 0101 	mov.w	r1, #1
 800e1ae:	dc3d      	bgt.n	800e22c <_strtod_l+0x754>
 800e1b0:	fa01 f303 	lsl.w	r3, r1, r3
 800e1b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e1ba:	18bd      	adds	r5, r7, r2
 800e1bc:	9b08      	ldr	r3, [sp, #32]
 800e1be:	42af      	cmp	r7, r5
 800e1c0:	4416      	add	r6, r2
 800e1c2:	441e      	add	r6, r3
 800e1c4:	463b      	mov	r3, r7
 800e1c6:	bfa8      	it	ge
 800e1c8:	462b      	movge	r3, r5
 800e1ca:	42b3      	cmp	r3, r6
 800e1cc:	bfa8      	it	ge
 800e1ce:	4633      	movge	r3, r6
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	bfc2      	ittt	gt
 800e1d4:	1aed      	subgt	r5, r5, r3
 800e1d6:	1af6      	subgt	r6, r6, r3
 800e1d8:	1aff      	subgt	r7, r7, r3
 800e1da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	dd16      	ble.n	800e20e <_strtod_l+0x736>
 800e1e0:	4641      	mov	r1, r8
 800e1e2:	9805      	ldr	r0, [sp, #20]
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	f003 f829 	bl	801123c <__pow5mult>
 800e1ea:	4680      	mov	r8, r0
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	d0ba      	beq.n	800e166 <_strtod_l+0x68e>
 800e1f0:	4601      	mov	r1, r0
 800e1f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e1f4:	9805      	ldr	r0, [sp, #20]
 800e1f6:	f002 ff77 	bl	80110e8 <__multiply>
 800e1fa:	900e      	str	r0, [sp, #56]	@ 0x38
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	f43f ae8a 	beq.w	800df16 <_strtod_l+0x43e>
 800e202:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e204:	9805      	ldr	r0, [sp, #20]
 800e206:	f002 fe5b 	bl	8010ec0 <_Bfree>
 800e20a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e20c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e20e:	2d00      	cmp	r5, #0
 800e210:	dc1d      	bgt.n	800e24e <_strtod_l+0x776>
 800e212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e214:	2b00      	cmp	r3, #0
 800e216:	dd23      	ble.n	800e260 <_strtod_l+0x788>
 800e218:	4649      	mov	r1, r9
 800e21a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e21c:	9805      	ldr	r0, [sp, #20]
 800e21e:	f003 f80d 	bl	801123c <__pow5mult>
 800e222:	4681      	mov	r9, r0
 800e224:	b9e0      	cbnz	r0, 800e260 <_strtod_l+0x788>
 800e226:	f04f 0900 	mov.w	r9, #0
 800e22a:	e674      	b.n	800df16 <_strtod_l+0x43e>
 800e22c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e230:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e234:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e238:	35e2      	adds	r5, #226	@ 0xe2
 800e23a:	fa01 f305 	lsl.w	r3, r1, r5
 800e23e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e240:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e242:	e7ba      	b.n	800e1ba <_strtod_l+0x6e2>
 800e244:	2300      	movs	r3, #0
 800e246:	9310      	str	r3, [sp, #64]	@ 0x40
 800e248:	2301      	movs	r3, #1
 800e24a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e24c:	e7b5      	b.n	800e1ba <_strtod_l+0x6e2>
 800e24e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e250:	9805      	ldr	r0, [sp, #20]
 800e252:	462a      	mov	r2, r5
 800e254:	f003 f84c 	bl	80112f0 <__lshift>
 800e258:	901a      	str	r0, [sp, #104]	@ 0x68
 800e25a:	2800      	cmp	r0, #0
 800e25c:	d1d9      	bne.n	800e212 <_strtod_l+0x73a>
 800e25e:	e65a      	b.n	800df16 <_strtod_l+0x43e>
 800e260:	2e00      	cmp	r6, #0
 800e262:	dd07      	ble.n	800e274 <_strtod_l+0x79c>
 800e264:	4649      	mov	r1, r9
 800e266:	9805      	ldr	r0, [sp, #20]
 800e268:	4632      	mov	r2, r6
 800e26a:	f003 f841 	bl	80112f0 <__lshift>
 800e26e:	4681      	mov	r9, r0
 800e270:	2800      	cmp	r0, #0
 800e272:	d0d8      	beq.n	800e226 <_strtod_l+0x74e>
 800e274:	2f00      	cmp	r7, #0
 800e276:	dd08      	ble.n	800e28a <_strtod_l+0x7b2>
 800e278:	4641      	mov	r1, r8
 800e27a:	9805      	ldr	r0, [sp, #20]
 800e27c:	463a      	mov	r2, r7
 800e27e:	f003 f837 	bl	80112f0 <__lshift>
 800e282:	4680      	mov	r8, r0
 800e284:	2800      	cmp	r0, #0
 800e286:	f43f ae46 	beq.w	800df16 <_strtod_l+0x43e>
 800e28a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e28c:	9805      	ldr	r0, [sp, #20]
 800e28e:	464a      	mov	r2, r9
 800e290:	f003 f8b6 	bl	8011400 <__mdiff>
 800e294:	4604      	mov	r4, r0
 800e296:	2800      	cmp	r0, #0
 800e298:	f43f ae3d 	beq.w	800df16 <_strtod_l+0x43e>
 800e29c:	68c3      	ldr	r3, [r0, #12]
 800e29e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	60c3      	str	r3, [r0, #12]
 800e2a4:	4641      	mov	r1, r8
 800e2a6:	f003 f88f 	bl	80113c8 <__mcmp>
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	da46      	bge.n	800e33c <_strtod_l+0x864>
 800e2ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2b0:	ea53 030a 	orrs.w	r3, r3, sl
 800e2b4:	d16c      	bne.n	800e390 <_strtod_l+0x8b8>
 800e2b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d168      	bne.n	800e390 <_strtod_l+0x8b8>
 800e2be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2c2:	0d1b      	lsrs	r3, r3, #20
 800e2c4:	051b      	lsls	r3, r3, #20
 800e2c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e2ca:	d961      	bls.n	800e390 <_strtod_l+0x8b8>
 800e2cc:	6963      	ldr	r3, [r4, #20]
 800e2ce:	b913      	cbnz	r3, 800e2d6 <_strtod_l+0x7fe>
 800e2d0:	6923      	ldr	r3, [r4, #16]
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	dd5c      	ble.n	800e390 <_strtod_l+0x8b8>
 800e2d6:	4621      	mov	r1, r4
 800e2d8:	2201      	movs	r2, #1
 800e2da:	9805      	ldr	r0, [sp, #20]
 800e2dc:	f003 f808 	bl	80112f0 <__lshift>
 800e2e0:	4641      	mov	r1, r8
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	f003 f870 	bl	80113c8 <__mcmp>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	dd51      	ble.n	800e390 <_strtod_l+0x8b8>
 800e2ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e2f0:	9a08      	ldr	r2, [sp, #32]
 800e2f2:	0d1b      	lsrs	r3, r3, #20
 800e2f4:	051b      	lsls	r3, r3, #20
 800e2f6:	2a00      	cmp	r2, #0
 800e2f8:	d06b      	beq.n	800e3d2 <_strtod_l+0x8fa>
 800e2fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e2fe:	d868      	bhi.n	800e3d2 <_strtod_l+0x8fa>
 800e300:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e304:	f67f ae9d 	bls.w	800e042 <_strtod_l+0x56a>
 800e308:	4b0a      	ldr	r3, [pc, #40]	@ (800e334 <_strtod_l+0x85c>)
 800e30a:	4650      	mov	r0, sl
 800e30c:	4659      	mov	r1, fp
 800e30e:	2200      	movs	r2, #0
 800e310:	f7f2 f992 	bl	8000638 <__aeabi_dmul>
 800e314:	4b08      	ldr	r3, [pc, #32]	@ (800e338 <_strtod_l+0x860>)
 800e316:	400b      	ands	r3, r1
 800e318:	4682      	mov	sl, r0
 800e31a:	468b      	mov	fp, r1
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f47f ae05 	bne.w	800df2c <_strtod_l+0x454>
 800e322:	9a05      	ldr	r2, [sp, #20]
 800e324:	2322      	movs	r3, #34	@ 0x22
 800e326:	6013      	str	r3, [r2, #0]
 800e328:	e600      	b.n	800df2c <_strtod_l+0x454>
 800e32a:	bf00      	nop
 800e32c:	08013238 	.word	0x08013238
 800e330:	fffffc02 	.word	0xfffffc02
 800e334:	39500000 	.word	0x39500000
 800e338:	7ff00000 	.word	0x7ff00000
 800e33c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e340:	d165      	bne.n	800e40e <_strtod_l+0x936>
 800e342:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e348:	b35a      	cbz	r2, 800e3a2 <_strtod_l+0x8ca>
 800e34a:	4a9f      	ldr	r2, [pc, #636]	@ (800e5c8 <_strtod_l+0xaf0>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d12b      	bne.n	800e3a8 <_strtod_l+0x8d0>
 800e350:	9b08      	ldr	r3, [sp, #32]
 800e352:	4651      	mov	r1, sl
 800e354:	b303      	cbz	r3, 800e398 <_strtod_l+0x8c0>
 800e356:	4b9d      	ldr	r3, [pc, #628]	@ (800e5cc <_strtod_l+0xaf4>)
 800e358:	465a      	mov	r2, fp
 800e35a:	4013      	ands	r3, r2
 800e35c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e360:	f04f 32ff 	mov.w	r2, #4294967295
 800e364:	d81b      	bhi.n	800e39e <_strtod_l+0x8c6>
 800e366:	0d1b      	lsrs	r3, r3, #20
 800e368:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e36c:	fa02 f303 	lsl.w	r3, r2, r3
 800e370:	4299      	cmp	r1, r3
 800e372:	d119      	bne.n	800e3a8 <_strtod_l+0x8d0>
 800e374:	4b96      	ldr	r3, [pc, #600]	@ (800e5d0 <_strtod_l+0xaf8>)
 800e376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e378:	429a      	cmp	r2, r3
 800e37a:	d102      	bne.n	800e382 <_strtod_l+0x8aa>
 800e37c:	3101      	adds	r1, #1
 800e37e:	f43f adca 	beq.w	800df16 <_strtod_l+0x43e>
 800e382:	4b92      	ldr	r3, [pc, #584]	@ (800e5cc <_strtod_l+0xaf4>)
 800e384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e386:	401a      	ands	r2, r3
 800e388:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e38c:	f04f 0a00 	mov.w	sl, #0
 800e390:	9b08      	ldr	r3, [sp, #32]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1b8      	bne.n	800e308 <_strtod_l+0x830>
 800e396:	e5c9      	b.n	800df2c <_strtod_l+0x454>
 800e398:	f04f 33ff 	mov.w	r3, #4294967295
 800e39c:	e7e8      	b.n	800e370 <_strtod_l+0x898>
 800e39e:	4613      	mov	r3, r2
 800e3a0:	e7e6      	b.n	800e370 <_strtod_l+0x898>
 800e3a2:	ea53 030a 	orrs.w	r3, r3, sl
 800e3a6:	d0a1      	beq.n	800e2ec <_strtod_l+0x814>
 800e3a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e3aa:	b1db      	cbz	r3, 800e3e4 <_strtod_l+0x90c>
 800e3ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e3ae:	4213      	tst	r3, r2
 800e3b0:	d0ee      	beq.n	800e390 <_strtod_l+0x8b8>
 800e3b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3b4:	9a08      	ldr	r2, [sp, #32]
 800e3b6:	4650      	mov	r0, sl
 800e3b8:	4659      	mov	r1, fp
 800e3ba:	b1bb      	cbz	r3, 800e3ec <_strtod_l+0x914>
 800e3bc:	f7ff fb6b 	bl	800da96 <sulp>
 800e3c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3c4:	ec53 2b10 	vmov	r2, r3, d0
 800e3c8:	f7f1 ff80 	bl	80002cc <__adddf3>
 800e3cc:	4682      	mov	sl, r0
 800e3ce:	468b      	mov	fp, r1
 800e3d0:	e7de      	b.n	800e390 <_strtod_l+0x8b8>
 800e3d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e3d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e3da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e3de:	f04f 3aff 	mov.w	sl, #4294967295
 800e3e2:	e7d5      	b.n	800e390 <_strtod_l+0x8b8>
 800e3e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e3e6:	ea13 0f0a 	tst.w	r3, sl
 800e3ea:	e7e1      	b.n	800e3b0 <_strtod_l+0x8d8>
 800e3ec:	f7ff fb53 	bl	800da96 <sulp>
 800e3f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e3f4:	ec53 2b10 	vmov	r2, r3, d0
 800e3f8:	f7f1 ff66 	bl	80002c8 <__aeabi_dsub>
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	2300      	movs	r3, #0
 800e400:	4682      	mov	sl, r0
 800e402:	468b      	mov	fp, r1
 800e404:	f7f2 fb80 	bl	8000b08 <__aeabi_dcmpeq>
 800e408:	2800      	cmp	r0, #0
 800e40a:	d0c1      	beq.n	800e390 <_strtod_l+0x8b8>
 800e40c:	e619      	b.n	800e042 <_strtod_l+0x56a>
 800e40e:	4641      	mov	r1, r8
 800e410:	4620      	mov	r0, r4
 800e412:	f003 f951 	bl	80116b8 <__ratio>
 800e416:	ec57 6b10 	vmov	r6, r7, d0
 800e41a:	2200      	movs	r2, #0
 800e41c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e420:	4630      	mov	r0, r6
 800e422:	4639      	mov	r1, r7
 800e424:	f7f2 fb84 	bl	8000b30 <__aeabi_dcmple>
 800e428:	2800      	cmp	r0, #0
 800e42a:	d06f      	beq.n	800e50c <_strtod_l+0xa34>
 800e42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d17a      	bne.n	800e528 <_strtod_l+0xa50>
 800e432:	f1ba 0f00 	cmp.w	sl, #0
 800e436:	d158      	bne.n	800e4ea <_strtod_l+0xa12>
 800e438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e43a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d15a      	bne.n	800e4f8 <_strtod_l+0xa20>
 800e442:	4b64      	ldr	r3, [pc, #400]	@ (800e5d4 <_strtod_l+0xafc>)
 800e444:	2200      	movs	r2, #0
 800e446:	4630      	mov	r0, r6
 800e448:	4639      	mov	r1, r7
 800e44a:	f7f2 fb67 	bl	8000b1c <__aeabi_dcmplt>
 800e44e:	2800      	cmp	r0, #0
 800e450:	d159      	bne.n	800e506 <_strtod_l+0xa2e>
 800e452:	4630      	mov	r0, r6
 800e454:	4639      	mov	r1, r7
 800e456:	4b60      	ldr	r3, [pc, #384]	@ (800e5d8 <_strtod_l+0xb00>)
 800e458:	2200      	movs	r2, #0
 800e45a:	f7f2 f8ed 	bl	8000638 <__aeabi_dmul>
 800e45e:	4606      	mov	r6, r0
 800e460:	460f      	mov	r7, r1
 800e462:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e466:	9606      	str	r6, [sp, #24]
 800e468:	9307      	str	r3, [sp, #28]
 800e46a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e46e:	4d57      	ldr	r5, [pc, #348]	@ (800e5cc <_strtod_l+0xaf4>)
 800e470:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e476:	401d      	ands	r5, r3
 800e478:	4b58      	ldr	r3, [pc, #352]	@ (800e5dc <_strtod_l+0xb04>)
 800e47a:	429d      	cmp	r5, r3
 800e47c:	f040 80b2 	bne.w	800e5e4 <_strtod_l+0xb0c>
 800e480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e482:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e486:	ec4b ab10 	vmov	d0, sl, fp
 800e48a:	f003 f84d 	bl	8011528 <__ulp>
 800e48e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e492:	ec51 0b10 	vmov	r0, r1, d0
 800e496:	f7f2 f8cf 	bl	8000638 <__aeabi_dmul>
 800e49a:	4652      	mov	r2, sl
 800e49c:	465b      	mov	r3, fp
 800e49e:	f7f1 ff15 	bl	80002cc <__adddf3>
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	4949      	ldr	r1, [pc, #292]	@ (800e5cc <_strtod_l+0xaf4>)
 800e4a6:	4a4e      	ldr	r2, [pc, #312]	@ (800e5e0 <_strtod_l+0xb08>)
 800e4a8:	4019      	ands	r1, r3
 800e4aa:	4291      	cmp	r1, r2
 800e4ac:	4682      	mov	sl, r0
 800e4ae:	d942      	bls.n	800e536 <_strtod_l+0xa5e>
 800e4b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e4b2:	4b47      	ldr	r3, [pc, #284]	@ (800e5d0 <_strtod_l+0xaf8>)
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d103      	bne.n	800e4c0 <_strtod_l+0x9e8>
 800e4b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	f43f ad2b 	beq.w	800df16 <_strtod_l+0x43e>
 800e4c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e5d0 <_strtod_l+0xaf8>
 800e4c4:	f04f 3aff 	mov.w	sl, #4294967295
 800e4c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4ca:	9805      	ldr	r0, [sp, #20]
 800e4cc:	f002 fcf8 	bl	8010ec0 <_Bfree>
 800e4d0:	9805      	ldr	r0, [sp, #20]
 800e4d2:	4649      	mov	r1, r9
 800e4d4:	f002 fcf4 	bl	8010ec0 <_Bfree>
 800e4d8:	9805      	ldr	r0, [sp, #20]
 800e4da:	4641      	mov	r1, r8
 800e4dc:	f002 fcf0 	bl	8010ec0 <_Bfree>
 800e4e0:	9805      	ldr	r0, [sp, #20]
 800e4e2:	4621      	mov	r1, r4
 800e4e4:	f002 fcec 	bl	8010ec0 <_Bfree>
 800e4e8:	e618      	b.n	800e11c <_strtod_l+0x644>
 800e4ea:	f1ba 0f01 	cmp.w	sl, #1
 800e4ee:	d103      	bne.n	800e4f8 <_strtod_l+0xa20>
 800e4f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f43f ada5 	beq.w	800e042 <_strtod_l+0x56a>
 800e4f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e5a8 <_strtod_l+0xad0>
 800e4fc:	4f35      	ldr	r7, [pc, #212]	@ (800e5d4 <_strtod_l+0xafc>)
 800e4fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e502:	2600      	movs	r6, #0
 800e504:	e7b1      	b.n	800e46a <_strtod_l+0x992>
 800e506:	4f34      	ldr	r7, [pc, #208]	@ (800e5d8 <_strtod_l+0xb00>)
 800e508:	2600      	movs	r6, #0
 800e50a:	e7aa      	b.n	800e462 <_strtod_l+0x98a>
 800e50c:	4b32      	ldr	r3, [pc, #200]	@ (800e5d8 <_strtod_l+0xb00>)
 800e50e:	4630      	mov	r0, r6
 800e510:	4639      	mov	r1, r7
 800e512:	2200      	movs	r2, #0
 800e514:	f7f2 f890 	bl	8000638 <__aeabi_dmul>
 800e518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e51a:	4606      	mov	r6, r0
 800e51c:	460f      	mov	r7, r1
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d09f      	beq.n	800e462 <_strtod_l+0x98a>
 800e522:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e526:	e7a0      	b.n	800e46a <_strtod_l+0x992>
 800e528:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e5b0 <_strtod_l+0xad8>
 800e52c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e530:	ec57 6b17 	vmov	r6, r7, d7
 800e534:	e799      	b.n	800e46a <_strtod_l+0x992>
 800e536:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e53a:	9b08      	ldr	r3, [sp, #32]
 800e53c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1c1      	bne.n	800e4c8 <_strtod_l+0x9f0>
 800e544:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e548:	0d1b      	lsrs	r3, r3, #20
 800e54a:	051b      	lsls	r3, r3, #20
 800e54c:	429d      	cmp	r5, r3
 800e54e:	d1bb      	bne.n	800e4c8 <_strtod_l+0x9f0>
 800e550:	4630      	mov	r0, r6
 800e552:	4639      	mov	r1, r7
 800e554:	f7f2 fbd0 	bl	8000cf8 <__aeabi_d2lz>
 800e558:	f7f2 f840 	bl	80005dc <__aeabi_l2d>
 800e55c:	4602      	mov	r2, r0
 800e55e:	460b      	mov	r3, r1
 800e560:	4630      	mov	r0, r6
 800e562:	4639      	mov	r1, r7
 800e564:	f7f1 feb0 	bl	80002c8 <__aeabi_dsub>
 800e568:	460b      	mov	r3, r1
 800e56a:	4602      	mov	r2, r0
 800e56c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e570:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e576:	ea46 060a 	orr.w	r6, r6, sl
 800e57a:	431e      	orrs	r6, r3
 800e57c:	d06f      	beq.n	800e65e <_strtod_l+0xb86>
 800e57e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e5b8 <_strtod_l+0xae0>)
 800e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e584:	f7f2 faca 	bl	8000b1c <__aeabi_dcmplt>
 800e588:	2800      	cmp	r0, #0
 800e58a:	f47f accf 	bne.w	800df2c <_strtod_l+0x454>
 800e58e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e5c0 <_strtod_l+0xae8>)
 800e590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e598:	f7f2 fade 	bl	8000b58 <__aeabi_dcmpgt>
 800e59c:	2800      	cmp	r0, #0
 800e59e:	d093      	beq.n	800e4c8 <_strtod_l+0x9f0>
 800e5a0:	e4c4      	b.n	800df2c <_strtod_l+0x454>
 800e5a2:	bf00      	nop
 800e5a4:	f3af 8000 	nop.w
 800e5a8:	00000000 	.word	0x00000000
 800e5ac:	bff00000 	.word	0xbff00000
 800e5b0:	00000000 	.word	0x00000000
 800e5b4:	3ff00000 	.word	0x3ff00000
 800e5b8:	94a03595 	.word	0x94a03595
 800e5bc:	3fdfffff 	.word	0x3fdfffff
 800e5c0:	35afe535 	.word	0x35afe535
 800e5c4:	3fe00000 	.word	0x3fe00000
 800e5c8:	000fffff 	.word	0x000fffff
 800e5cc:	7ff00000 	.word	0x7ff00000
 800e5d0:	7fefffff 	.word	0x7fefffff
 800e5d4:	3ff00000 	.word	0x3ff00000
 800e5d8:	3fe00000 	.word	0x3fe00000
 800e5dc:	7fe00000 	.word	0x7fe00000
 800e5e0:	7c9fffff 	.word	0x7c9fffff
 800e5e4:	9b08      	ldr	r3, [sp, #32]
 800e5e6:	b323      	cbz	r3, 800e632 <_strtod_l+0xb5a>
 800e5e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e5ec:	d821      	bhi.n	800e632 <_strtod_l+0xb5a>
 800e5ee:	a328      	add	r3, pc, #160	@ (adr r3, 800e690 <_strtod_l+0xbb8>)
 800e5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	4639      	mov	r1, r7
 800e5f8:	f7f2 fa9a 	bl	8000b30 <__aeabi_dcmple>
 800e5fc:	b1a0      	cbz	r0, 800e628 <_strtod_l+0xb50>
 800e5fe:	4639      	mov	r1, r7
 800e600:	4630      	mov	r0, r6
 800e602:	f7f2 faf1 	bl	8000be8 <__aeabi_d2uiz>
 800e606:	2801      	cmp	r0, #1
 800e608:	bf38      	it	cc
 800e60a:	2001      	movcc	r0, #1
 800e60c:	f7f1 ff9a 	bl	8000544 <__aeabi_ui2d>
 800e610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e612:	4606      	mov	r6, r0
 800e614:	460f      	mov	r7, r1
 800e616:	b9fb      	cbnz	r3, 800e658 <_strtod_l+0xb80>
 800e618:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e61c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e61e:	9315      	str	r3, [sp, #84]	@ 0x54
 800e620:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e624:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e628:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e62a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e62e:	1b5b      	subs	r3, r3, r5
 800e630:	9311      	str	r3, [sp, #68]	@ 0x44
 800e632:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e636:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e63a:	f002 ff75 	bl	8011528 <__ulp>
 800e63e:	4650      	mov	r0, sl
 800e640:	ec53 2b10 	vmov	r2, r3, d0
 800e644:	4659      	mov	r1, fp
 800e646:	f7f1 fff7 	bl	8000638 <__aeabi_dmul>
 800e64a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e64e:	f7f1 fe3d 	bl	80002cc <__adddf3>
 800e652:	4682      	mov	sl, r0
 800e654:	468b      	mov	fp, r1
 800e656:	e770      	b.n	800e53a <_strtod_l+0xa62>
 800e658:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e65c:	e7e0      	b.n	800e620 <_strtod_l+0xb48>
 800e65e:	a30e      	add	r3, pc, #56	@ (adr r3, 800e698 <_strtod_l+0xbc0>)
 800e660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e664:	f7f2 fa5a 	bl	8000b1c <__aeabi_dcmplt>
 800e668:	e798      	b.n	800e59c <_strtod_l+0xac4>
 800e66a:	2300      	movs	r3, #0
 800e66c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e66e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e670:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e672:	6013      	str	r3, [r2, #0]
 800e674:	f7ff ba6d 	b.w	800db52 <_strtod_l+0x7a>
 800e678:	2a65      	cmp	r2, #101	@ 0x65
 800e67a:	f43f ab66 	beq.w	800dd4a <_strtod_l+0x272>
 800e67e:	2a45      	cmp	r2, #69	@ 0x45
 800e680:	f43f ab63 	beq.w	800dd4a <_strtod_l+0x272>
 800e684:	2301      	movs	r3, #1
 800e686:	f7ff bb9e 	b.w	800ddc6 <_strtod_l+0x2ee>
 800e68a:	bf00      	nop
 800e68c:	f3af 8000 	nop.w
 800e690:	ffc00000 	.word	0xffc00000
 800e694:	41dfffff 	.word	0x41dfffff
 800e698:	94a03595 	.word	0x94a03595
 800e69c:	3fcfffff 	.word	0x3fcfffff

0800e6a0 <_strtod_r>:
 800e6a0:	4b01      	ldr	r3, [pc, #4]	@ (800e6a8 <_strtod_r+0x8>)
 800e6a2:	f7ff ba19 	b.w	800dad8 <_strtod_l>
 800e6a6:	bf00      	nop
 800e6a8:	2000002c 	.word	0x2000002c

0800e6ac <strtof>:
 800e6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6b0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800e770 <strtof+0xc4>
 800e6b4:	4b29      	ldr	r3, [pc, #164]	@ (800e75c <strtof+0xb0>)
 800e6b6:	460a      	mov	r2, r1
 800e6b8:	ed2d 8b02 	vpush	{d8}
 800e6bc:	4601      	mov	r1, r0
 800e6be:	f8d8 0000 	ldr.w	r0, [r8]
 800e6c2:	f7ff fa09 	bl	800dad8 <_strtod_l>
 800e6c6:	ec55 4b10 	vmov	r4, r5, d0
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	462b      	mov	r3, r5
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	f7f2 fa4b 	bl	8000b6c <__aeabi_dcmpun>
 800e6d6:	b190      	cbz	r0, 800e6fe <strtof+0x52>
 800e6d8:	2d00      	cmp	r5, #0
 800e6da:	4821      	ldr	r0, [pc, #132]	@ (800e760 <strtof+0xb4>)
 800e6dc:	da09      	bge.n	800e6f2 <strtof+0x46>
 800e6de:	f001 f8f3 	bl	800f8c8 <nanf>
 800e6e2:	eeb1 8a40 	vneg.f32	s16, s0
 800e6e6:	eeb0 0a48 	vmov.f32	s0, s16
 800e6ea:	ecbd 8b02 	vpop	{d8}
 800e6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f2:	ecbd 8b02 	vpop	{d8}
 800e6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fa:	f001 b8e5 	b.w	800f8c8 <nanf>
 800e6fe:	4620      	mov	r0, r4
 800e700:	4629      	mov	r1, r5
 800e702:	f7f2 fa91 	bl	8000c28 <__aeabi_d2f>
 800e706:	ee08 0a10 	vmov	s16, r0
 800e70a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800e764 <strtof+0xb8>
 800e70e:	eeb0 7ac8 	vabs.f32	s14, s16
 800e712:	eeb4 7a67 	vcmp.f32	s14, s15
 800e716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71a:	dd11      	ble.n	800e740 <strtof+0x94>
 800e71c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800e720:	4b11      	ldr	r3, [pc, #68]	@ (800e768 <strtof+0xbc>)
 800e722:	f04f 32ff 	mov.w	r2, #4294967295
 800e726:	4620      	mov	r0, r4
 800e728:	4639      	mov	r1, r7
 800e72a:	f7f2 fa1f 	bl	8000b6c <__aeabi_dcmpun>
 800e72e:	b980      	cbnz	r0, 800e752 <strtof+0xa6>
 800e730:	4b0d      	ldr	r3, [pc, #52]	@ (800e768 <strtof+0xbc>)
 800e732:	f04f 32ff 	mov.w	r2, #4294967295
 800e736:	4620      	mov	r0, r4
 800e738:	4639      	mov	r1, r7
 800e73a:	f7f2 f9f9 	bl	8000b30 <__aeabi_dcmple>
 800e73e:	b940      	cbnz	r0, 800e752 <strtof+0xa6>
 800e740:	ee18 3a10 	vmov	r3, s16
 800e744:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e748:	d1cd      	bne.n	800e6e6 <strtof+0x3a>
 800e74a:	4b08      	ldr	r3, [pc, #32]	@ (800e76c <strtof+0xc0>)
 800e74c:	402b      	ands	r3, r5
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d0c9      	beq.n	800e6e6 <strtof+0x3a>
 800e752:	f8d8 3000 	ldr.w	r3, [r8]
 800e756:	2222      	movs	r2, #34	@ 0x22
 800e758:	601a      	str	r2, [r3, #0]
 800e75a:	e7c4      	b.n	800e6e6 <strtof+0x3a>
 800e75c:	2000002c 	.word	0x2000002c
 800e760:	0801334d 	.word	0x0801334d
 800e764:	7f7fffff 	.word	0x7f7fffff
 800e768:	7fefffff 	.word	0x7fefffff
 800e76c:	7ff00000 	.word	0x7ff00000
 800e770:	20000198 	.word	0x20000198

0800e774 <__cvt>:
 800e774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e778:	ec57 6b10 	vmov	r6, r7, d0
 800e77c:	2f00      	cmp	r7, #0
 800e77e:	460c      	mov	r4, r1
 800e780:	4619      	mov	r1, r3
 800e782:	463b      	mov	r3, r7
 800e784:	bfbb      	ittet	lt
 800e786:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e78a:	461f      	movlt	r7, r3
 800e78c:	2300      	movge	r3, #0
 800e78e:	232d      	movlt	r3, #45	@ 0x2d
 800e790:	700b      	strb	r3, [r1, #0]
 800e792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e794:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e798:	4691      	mov	r9, r2
 800e79a:	f023 0820 	bic.w	r8, r3, #32
 800e79e:	bfbc      	itt	lt
 800e7a0:	4632      	movlt	r2, r6
 800e7a2:	4616      	movlt	r6, r2
 800e7a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e7a8:	d005      	beq.n	800e7b6 <__cvt+0x42>
 800e7aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e7ae:	d100      	bne.n	800e7b2 <__cvt+0x3e>
 800e7b0:	3401      	adds	r4, #1
 800e7b2:	2102      	movs	r1, #2
 800e7b4:	e000      	b.n	800e7b8 <__cvt+0x44>
 800e7b6:	2103      	movs	r1, #3
 800e7b8:	ab03      	add	r3, sp, #12
 800e7ba:	9301      	str	r3, [sp, #4]
 800e7bc:	ab02      	add	r3, sp, #8
 800e7be:	9300      	str	r3, [sp, #0]
 800e7c0:	ec47 6b10 	vmov	d0, r6, r7
 800e7c4:	4653      	mov	r3, sl
 800e7c6:	4622      	mov	r2, r4
 800e7c8:	f001 f92a 	bl	800fa20 <_dtoa_r>
 800e7cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e7d0:	4605      	mov	r5, r0
 800e7d2:	d119      	bne.n	800e808 <__cvt+0x94>
 800e7d4:	f019 0f01 	tst.w	r9, #1
 800e7d8:	d00e      	beq.n	800e7f8 <__cvt+0x84>
 800e7da:	eb00 0904 	add.w	r9, r0, r4
 800e7de:	2200      	movs	r2, #0
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	4639      	mov	r1, r7
 800e7e6:	f7f2 f98f 	bl	8000b08 <__aeabi_dcmpeq>
 800e7ea:	b108      	cbz	r0, 800e7f0 <__cvt+0x7c>
 800e7ec:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7f0:	2230      	movs	r2, #48	@ 0x30
 800e7f2:	9b03      	ldr	r3, [sp, #12]
 800e7f4:	454b      	cmp	r3, r9
 800e7f6:	d31e      	bcc.n	800e836 <__cvt+0xc2>
 800e7f8:	9b03      	ldr	r3, [sp, #12]
 800e7fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7fc:	1b5b      	subs	r3, r3, r5
 800e7fe:	4628      	mov	r0, r5
 800e800:	6013      	str	r3, [r2, #0]
 800e802:	b004      	add	sp, #16
 800e804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e808:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e80c:	eb00 0904 	add.w	r9, r0, r4
 800e810:	d1e5      	bne.n	800e7de <__cvt+0x6a>
 800e812:	7803      	ldrb	r3, [r0, #0]
 800e814:	2b30      	cmp	r3, #48	@ 0x30
 800e816:	d10a      	bne.n	800e82e <__cvt+0xba>
 800e818:	2200      	movs	r2, #0
 800e81a:	2300      	movs	r3, #0
 800e81c:	4630      	mov	r0, r6
 800e81e:	4639      	mov	r1, r7
 800e820:	f7f2 f972 	bl	8000b08 <__aeabi_dcmpeq>
 800e824:	b918      	cbnz	r0, 800e82e <__cvt+0xba>
 800e826:	f1c4 0401 	rsb	r4, r4, #1
 800e82a:	f8ca 4000 	str.w	r4, [sl]
 800e82e:	f8da 3000 	ldr.w	r3, [sl]
 800e832:	4499      	add	r9, r3
 800e834:	e7d3      	b.n	800e7de <__cvt+0x6a>
 800e836:	1c59      	adds	r1, r3, #1
 800e838:	9103      	str	r1, [sp, #12]
 800e83a:	701a      	strb	r2, [r3, #0]
 800e83c:	e7d9      	b.n	800e7f2 <__cvt+0x7e>

0800e83e <__exponent>:
 800e83e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e840:	2900      	cmp	r1, #0
 800e842:	bfba      	itte	lt
 800e844:	4249      	neglt	r1, r1
 800e846:	232d      	movlt	r3, #45	@ 0x2d
 800e848:	232b      	movge	r3, #43	@ 0x2b
 800e84a:	2909      	cmp	r1, #9
 800e84c:	7002      	strb	r2, [r0, #0]
 800e84e:	7043      	strb	r3, [r0, #1]
 800e850:	dd29      	ble.n	800e8a6 <__exponent+0x68>
 800e852:	f10d 0307 	add.w	r3, sp, #7
 800e856:	461d      	mov	r5, r3
 800e858:	270a      	movs	r7, #10
 800e85a:	461a      	mov	r2, r3
 800e85c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e860:	fb07 1416 	mls	r4, r7, r6, r1
 800e864:	3430      	adds	r4, #48	@ 0x30
 800e866:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e86a:	460c      	mov	r4, r1
 800e86c:	2c63      	cmp	r4, #99	@ 0x63
 800e86e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e872:	4631      	mov	r1, r6
 800e874:	dcf1      	bgt.n	800e85a <__exponent+0x1c>
 800e876:	3130      	adds	r1, #48	@ 0x30
 800e878:	1e94      	subs	r4, r2, #2
 800e87a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e87e:	1c41      	adds	r1, r0, #1
 800e880:	4623      	mov	r3, r4
 800e882:	42ab      	cmp	r3, r5
 800e884:	d30a      	bcc.n	800e89c <__exponent+0x5e>
 800e886:	f10d 0309 	add.w	r3, sp, #9
 800e88a:	1a9b      	subs	r3, r3, r2
 800e88c:	42ac      	cmp	r4, r5
 800e88e:	bf88      	it	hi
 800e890:	2300      	movhi	r3, #0
 800e892:	3302      	adds	r3, #2
 800e894:	4403      	add	r3, r0
 800e896:	1a18      	subs	r0, r3, r0
 800e898:	b003      	add	sp, #12
 800e89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e89c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e8a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e8a4:	e7ed      	b.n	800e882 <__exponent+0x44>
 800e8a6:	2330      	movs	r3, #48	@ 0x30
 800e8a8:	3130      	adds	r1, #48	@ 0x30
 800e8aa:	7083      	strb	r3, [r0, #2]
 800e8ac:	70c1      	strb	r1, [r0, #3]
 800e8ae:	1d03      	adds	r3, r0, #4
 800e8b0:	e7f1      	b.n	800e896 <__exponent+0x58>
	...

0800e8b4 <_printf_float>:
 800e8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8b8:	b08d      	sub	sp, #52	@ 0x34
 800e8ba:	460c      	mov	r4, r1
 800e8bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e8c0:	4616      	mov	r6, r2
 800e8c2:	461f      	mov	r7, r3
 800e8c4:	4605      	mov	r5, r0
 800e8c6:	f000 ff6f 	bl	800f7a8 <_localeconv_r>
 800e8ca:	6803      	ldr	r3, [r0, #0]
 800e8cc:	9304      	str	r3, [sp, #16]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7f1 fcee 	bl	80002b0 <strlen>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8d8:	f8d8 3000 	ldr.w	r3, [r8]
 800e8dc:	9005      	str	r0, [sp, #20]
 800e8de:	3307      	adds	r3, #7
 800e8e0:	f023 0307 	bic.w	r3, r3, #7
 800e8e4:	f103 0208 	add.w	r2, r3, #8
 800e8e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e8ec:	f8d4 b000 	ldr.w	fp, [r4]
 800e8f0:	f8c8 2000 	str.w	r2, [r8]
 800e8f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e8f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e8fc:	9307      	str	r3, [sp, #28]
 800e8fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800e902:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e90a:	4b9c      	ldr	r3, [pc, #624]	@ (800eb7c <_printf_float+0x2c8>)
 800e90c:	f04f 32ff 	mov.w	r2, #4294967295
 800e910:	f7f2 f92c 	bl	8000b6c <__aeabi_dcmpun>
 800e914:	bb70      	cbnz	r0, 800e974 <_printf_float+0xc0>
 800e916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e91a:	4b98      	ldr	r3, [pc, #608]	@ (800eb7c <_printf_float+0x2c8>)
 800e91c:	f04f 32ff 	mov.w	r2, #4294967295
 800e920:	f7f2 f906 	bl	8000b30 <__aeabi_dcmple>
 800e924:	bb30      	cbnz	r0, 800e974 <_printf_float+0xc0>
 800e926:	2200      	movs	r2, #0
 800e928:	2300      	movs	r3, #0
 800e92a:	4640      	mov	r0, r8
 800e92c:	4649      	mov	r1, r9
 800e92e:	f7f2 f8f5 	bl	8000b1c <__aeabi_dcmplt>
 800e932:	b110      	cbz	r0, 800e93a <_printf_float+0x86>
 800e934:	232d      	movs	r3, #45	@ 0x2d
 800e936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e93a:	4a91      	ldr	r2, [pc, #580]	@ (800eb80 <_printf_float+0x2cc>)
 800e93c:	4b91      	ldr	r3, [pc, #580]	@ (800eb84 <_printf_float+0x2d0>)
 800e93e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e942:	bf94      	ite	ls
 800e944:	4690      	movls	r8, r2
 800e946:	4698      	movhi	r8, r3
 800e948:	2303      	movs	r3, #3
 800e94a:	6123      	str	r3, [r4, #16]
 800e94c:	f02b 0304 	bic.w	r3, fp, #4
 800e950:	6023      	str	r3, [r4, #0]
 800e952:	f04f 0900 	mov.w	r9, #0
 800e956:	9700      	str	r7, [sp, #0]
 800e958:	4633      	mov	r3, r6
 800e95a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e95c:	4621      	mov	r1, r4
 800e95e:	4628      	mov	r0, r5
 800e960:	f000 f9d2 	bl	800ed08 <_printf_common>
 800e964:	3001      	adds	r0, #1
 800e966:	f040 808d 	bne.w	800ea84 <_printf_float+0x1d0>
 800e96a:	f04f 30ff 	mov.w	r0, #4294967295
 800e96e:	b00d      	add	sp, #52	@ 0x34
 800e970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e974:	4642      	mov	r2, r8
 800e976:	464b      	mov	r3, r9
 800e978:	4640      	mov	r0, r8
 800e97a:	4649      	mov	r1, r9
 800e97c:	f7f2 f8f6 	bl	8000b6c <__aeabi_dcmpun>
 800e980:	b140      	cbz	r0, 800e994 <_printf_float+0xe0>
 800e982:	464b      	mov	r3, r9
 800e984:	2b00      	cmp	r3, #0
 800e986:	bfbc      	itt	lt
 800e988:	232d      	movlt	r3, #45	@ 0x2d
 800e98a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e98e:	4a7e      	ldr	r2, [pc, #504]	@ (800eb88 <_printf_float+0x2d4>)
 800e990:	4b7e      	ldr	r3, [pc, #504]	@ (800eb8c <_printf_float+0x2d8>)
 800e992:	e7d4      	b.n	800e93e <_printf_float+0x8a>
 800e994:	6863      	ldr	r3, [r4, #4]
 800e996:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e99a:	9206      	str	r2, [sp, #24]
 800e99c:	1c5a      	adds	r2, r3, #1
 800e99e:	d13b      	bne.n	800ea18 <_printf_float+0x164>
 800e9a0:	2306      	movs	r3, #6
 800e9a2:	6063      	str	r3, [r4, #4]
 800e9a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	6022      	str	r2, [r4, #0]
 800e9ac:	9303      	str	r3, [sp, #12]
 800e9ae:	ab0a      	add	r3, sp, #40	@ 0x28
 800e9b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e9b4:	ab09      	add	r3, sp, #36	@ 0x24
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	6861      	ldr	r1, [r4, #4]
 800e9ba:	ec49 8b10 	vmov	d0, r8, r9
 800e9be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	f7ff fed6 	bl	800e774 <__cvt>
 800e9c8:	9b06      	ldr	r3, [sp, #24]
 800e9ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9cc:	2b47      	cmp	r3, #71	@ 0x47
 800e9ce:	4680      	mov	r8, r0
 800e9d0:	d129      	bne.n	800ea26 <_printf_float+0x172>
 800e9d2:	1cc8      	adds	r0, r1, #3
 800e9d4:	db02      	blt.n	800e9dc <_printf_float+0x128>
 800e9d6:	6863      	ldr	r3, [r4, #4]
 800e9d8:	4299      	cmp	r1, r3
 800e9da:	dd41      	ble.n	800ea60 <_printf_float+0x1ac>
 800e9dc:	f1aa 0a02 	sub.w	sl, sl, #2
 800e9e0:	fa5f fa8a 	uxtb.w	sl, sl
 800e9e4:	3901      	subs	r1, #1
 800e9e6:	4652      	mov	r2, sl
 800e9e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e9ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800e9ee:	f7ff ff26 	bl	800e83e <__exponent>
 800e9f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e9f4:	1813      	adds	r3, r2, r0
 800e9f6:	2a01      	cmp	r2, #1
 800e9f8:	4681      	mov	r9, r0
 800e9fa:	6123      	str	r3, [r4, #16]
 800e9fc:	dc02      	bgt.n	800ea04 <_printf_float+0x150>
 800e9fe:	6822      	ldr	r2, [r4, #0]
 800ea00:	07d2      	lsls	r2, r2, #31
 800ea02:	d501      	bpl.n	800ea08 <_printf_float+0x154>
 800ea04:	3301      	adds	r3, #1
 800ea06:	6123      	str	r3, [r4, #16]
 800ea08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d0a2      	beq.n	800e956 <_printf_float+0xa2>
 800ea10:	232d      	movs	r3, #45	@ 0x2d
 800ea12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea16:	e79e      	b.n	800e956 <_printf_float+0xa2>
 800ea18:	9a06      	ldr	r2, [sp, #24]
 800ea1a:	2a47      	cmp	r2, #71	@ 0x47
 800ea1c:	d1c2      	bne.n	800e9a4 <_printf_float+0xf0>
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d1c0      	bne.n	800e9a4 <_printf_float+0xf0>
 800ea22:	2301      	movs	r3, #1
 800ea24:	e7bd      	b.n	800e9a2 <_printf_float+0xee>
 800ea26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea2a:	d9db      	bls.n	800e9e4 <_printf_float+0x130>
 800ea2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ea30:	d118      	bne.n	800ea64 <_printf_float+0x1b0>
 800ea32:	2900      	cmp	r1, #0
 800ea34:	6863      	ldr	r3, [r4, #4]
 800ea36:	dd0b      	ble.n	800ea50 <_printf_float+0x19c>
 800ea38:	6121      	str	r1, [r4, #16]
 800ea3a:	b913      	cbnz	r3, 800ea42 <_printf_float+0x18e>
 800ea3c:	6822      	ldr	r2, [r4, #0]
 800ea3e:	07d0      	lsls	r0, r2, #31
 800ea40:	d502      	bpl.n	800ea48 <_printf_float+0x194>
 800ea42:	3301      	adds	r3, #1
 800ea44:	440b      	add	r3, r1
 800ea46:	6123      	str	r3, [r4, #16]
 800ea48:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ea4a:	f04f 0900 	mov.w	r9, #0
 800ea4e:	e7db      	b.n	800ea08 <_printf_float+0x154>
 800ea50:	b913      	cbnz	r3, 800ea58 <_printf_float+0x1a4>
 800ea52:	6822      	ldr	r2, [r4, #0]
 800ea54:	07d2      	lsls	r2, r2, #31
 800ea56:	d501      	bpl.n	800ea5c <_printf_float+0x1a8>
 800ea58:	3302      	adds	r3, #2
 800ea5a:	e7f4      	b.n	800ea46 <_printf_float+0x192>
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e7f2      	b.n	800ea46 <_printf_float+0x192>
 800ea60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ea64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea66:	4299      	cmp	r1, r3
 800ea68:	db05      	blt.n	800ea76 <_printf_float+0x1c2>
 800ea6a:	6823      	ldr	r3, [r4, #0]
 800ea6c:	6121      	str	r1, [r4, #16]
 800ea6e:	07d8      	lsls	r0, r3, #31
 800ea70:	d5ea      	bpl.n	800ea48 <_printf_float+0x194>
 800ea72:	1c4b      	adds	r3, r1, #1
 800ea74:	e7e7      	b.n	800ea46 <_printf_float+0x192>
 800ea76:	2900      	cmp	r1, #0
 800ea78:	bfd4      	ite	le
 800ea7a:	f1c1 0202 	rsble	r2, r1, #2
 800ea7e:	2201      	movgt	r2, #1
 800ea80:	4413      	add	r3, r2
 800ea82:	e7e0      	b.n	800ea46 <_printf_float+0x192>
 800ea84:	6823      	ldr	r3, [r4, #0]
 800ea86:	055a      	lsls	r2, r3, #21
 800ea88:	d407      	bmi.n	800ea9a <_printf_float+0x1e6>
 800ea8a:	6923      	ldr	r3, [r4, #16]
 800ea8c:	4642      	mov	r2, r8
 800ea8e:	4631      	mov	r1, r6
 800ea90:	4628      	mov	r0, r5
 800ea92:	47b8      	blx	r7
 800ea94:	3001      	adds	r0, #1
 800ea96:	d12b      	bne.n	800eaf0 <_printf_float+0x23c>
 800ea98:	e767      	b.n	800e96a <_printf_float+0xb6>
 800ea9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea9e:	f240 80dd 	bls.w	800ec5c <_printf_float+0x3a8>
 800eaa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	f7f2 f82d 	bl	8000b08 <__aeabi_dcmpeq>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	d033      	beq.n	800eb1a <_printf_float+0x266>
 800eab2:	4a37      	ldr	r2, [pc, #220]	@ (800eb90 <_printf_float+0x2dc>)
 800eab4:	2301      	movs	r3, #1
 800eab6:	4631      	mov	r1, r6
 800eab8:	4628      	mov	r0, r5
 800eaba:	47b8      	blx	r7
 800eabc:	3001      	adds	r0, #1
 800eabe:	f43f af54 	beq.w	800e96a <_printf_float+0xb6>
 800eac2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800eac6:	4543      	cmp	r3, r8
 800eac8:	db02      	blt.n	800ead0 <_printf_float+0x21c>
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	07d8      	lsls	r0, r3, #31
 800eace:	d50f      	bpl.n	800eaf0 <_printf_float+0x23c>
 800ead0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ead4:	4631      	mov	r1, r6
 800ead6:	4628      	mov	r0, r5
 800ead8:	47b8      	blx	r7
 800eada:	3001      	adds	r0, #1
 800eadc:	f43f af45 	beq.w	800e96a <_printf_float+0xb6>
 800eae0:	f04f 0900 	mov.w	r9, #0
 800eae4:	f108 38ff 	add.w	r8, r8, #4294967295
 800eae8:	f104 0a1a 	add.w	sl, r4, #26
 800eaec:	45c8      	cmp	r8, r9
 800eaee:	dc09      	bgt.n	800eb04 <_printf_float+0x250>
 800eaf0:	6823      	ldr	r3, [r4, #0]
 800eaf2:	079b      	lsls	r3, r3, #30
 800eaf4:	f100 8103 	bmi.w	800ecfe <_printf_float+0x44a>
 800eaf8:	68e0      	ldr	r0, [r4, #12]
 800eafa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eafc:	4298      	cmp	r0, r3
 800eafe:	bfb8      	it	lt
 800eb00:	4618      	movlt	r0, r3
 800eb02:	e734      	b.n	800e96e <_printf_float+0xba>
 800eb04:	2301      	movs	r3, #1
 800eb06:	4652      	mov	r2, sl
 800eb08:	4631      	mov	r1, r6
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	47b8      	blx	r7
 800eb0e:	3001      	adds	r0, #1
 800eb10:	f43f af2b 	beq.w	800e96a <_printf_float+0xb6>
 800eb14:	f109 0901 	add.w	r9, r9, #1
 800eb18:	e7e8      	b.n	800eaec <_printf_float+0x238>
 800eb1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	dc39      	bgt.n	800eb94 <_printf_float+0x2e0>
 800eb20:	4a1b      	ldr	r2, [pc, #108]	@ (800eb90 <_printf_float+0x2dc>)
 800eb22:	2301      	movs	r3, #1
 800eb24:	4631      	mov	r1, r6
 800eb26:	4628      	mov	r0, r5
 800eb28:	47b8      	blx	r7
 800eb2a:	3001      	adds	r0, #1
 800eb2c:	f43f af1d 	beq.w	800e96a <_printf_float+0xb6>
 800eb30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eb34:	ea59 0303 	orrs.w	r3, r9, r3
 800eb38:	d102      	bne.n	800eb40 <_printf_float+0x28c>
 800eb3a:	6823      	ldr	r3, [r4, #0]
 800eb3c:	07d9      	lsls	r1, r3, #31
 800eb3e:	d5d7      	bpl.n	800eaf0 <_printf_float+0x23c>
 800eb40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb44:	4631      	mov	r1, r6
 800eb46:	4628      	mov	r0, r5
 800eb48:	47b8      	blx	r7
 800eb4a:	3001      	adds	r0, #1
 800eb4c:	f43f af0d 	beq.w	800e96a <_printf_float+0xb6>
 800eb50:	f04f 0a00 	mov.w	sl, #0
 800eb54:	f104 0b1a 	add.w	fp, r4, #26
 800eb58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb5a:	425b      	negs	r3, r3
 800eb5c:	4553      	cmp	r3, sl
 800eb5e:	dc01      	bgt.n	800eb64 <_printf_float+0x2b0>
 800eb60:	464b      	mov	r3, r9
 800eb62:	e793      	b.n	800ea8c <_printf_float+0x1d8>
 800eb64:	2301      	movs	r3, #1
 800eb66:	465a      	mov	r2, fp
 800eb68:	4631      	mov	r1, r6
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	47b8      	blx	r7
 800eb6e:	3001      	adds	r0, #1
 800eb70:	f43f aefb 	beq.w	800e96a <_printf_float+0xb6>
 800eb74:	f10a 0a01 	add.w	sl, sl, #1
 800eb78:	e7ee      	b.n	800eb58 <_printf_float+0x2a4>
 800eb7a:	bf00      	nop
 800eb7c:	7fefffff 	.word	0x7fefffff
 800eb80:	08013260 	.word	0x08013260
 800eb84:	08013264 	.word	0x08013264
 800eb88:	08013268 	.word	0x08013268
 800eb8c:	0801326c 	.word	0x0801326c
 800eb90:	08013270 	.word	0x08013270
 800eb94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb9a:	4553      	cmp	r3, sl
 800eb9c:	bfa8      	it	ge
 800eb9e:	4653      	movge	r3, sl
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	4699      	mov	r9, r3
 800eba4:	dc36      	bgt.n	800ec14 <_printf_float+0x360>
 800eba6:	f04f 0b00 	mov.w	fp, #0
 800ebaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebae:	f104 021a 	add.w	r2, r4, #26
 800ebb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ebb4:	9306      	str	r3, [sp, #24]
 800ebb6:	eba3 0309 	sub.w	r3, r3, r9
 800ebba:	455b      	cmp	r3, fp
 800ebbc:	dc31      	bgt.n	800ec22 <_printf_float+0x36e>
 800ebbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebc0:	459a      	cmp	sl, r3
 800ebc2:	dc3a      	bgt.n	800ec3a <_printf_float+0x386>
 800ebc4:	6823      	ldr	r3, [r4, #0]
 800ebc6:	07da      	lsls	r2, r3, #31
 800ebc8:	d437      	bmi.n	800ec3a <_printf_float+0x386>
 800ebca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebcc:	ebaa 0903 	sub.w	r9, sl, r3
 800ebd0:	9b06      	ldr	r3, [sp, #24]
 800ebd2:	ebaa 0303 	sub.w	r3, sl, r3
 800ebd6:	4599      	cmp	r9, r3
 800ebd8:	bfa8      	it	ge
 800ebda:	4699      	movge	r9, r3
 800ebdc:	f1b9 0f00 	cmp.w	r9, #0
 800ebe0:	dc33      	bgt.n	800ec4a <_printf_float+0x396>
 800ebe2:	f04f 0800 	mov.w	r8, #0
 800ebe6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebea:	f104 0b1a 	add.w	fp, r4, #26
 800ebee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebf0:	ebaa 0303 	sub.w	r3, sl, r3
 800ebf4:	eba3 0309 	sub.w	r3, r3, r9
 800ebf8:	4543      	cmp	r3, r8
 800ebfa:	f77f af79 	ble.w	800eaf0 <_printf_float+0x23c>
 800ebfe:	2301      	movs	r3, #1
 800ec00:	465a      	mov	r2, fp
 800ec02:	4631      	mov	r1, r6
 800ec04:	4628      	mov	r0, r5
 800ec06:	47b8      	blx	r7
 800ec08:	3001      	adds	r0, #1
 800ec0a:	f43f aeae 	beq.w	800e96a <_printf_float+0xb6>
 800ec0e:	f108 0801 	add.w	r8, r8, #1
 800ec12:	e7ec      	b.n	800ebee <_printf_float+0x33a>
 800ec14:	4642      	mov	r2, r8
 800ec16:	4631      	mov	r1, r6
 800ec18:	4628      	mov	r0, r5
 800ec1a:	47b8      	blx	r7
 800ec1c:	3001      	adds	r0, #1
 800ec1e:	d1c2      	bne.n	800eba6 <_printf_float+0x2f2>
 800ec20:	e6a3      	b.n	800e96a <_printf_float+0xb6>
 800ec22:	2301      	movs	r3, #1
 800ec24:	4631      	mov	r1, r6
 800ec26:	4628      	mov	r0, r5
 800ec28:	9206      	str	r2, [sp, #24]
 800ec2a:	47b8      	blx	r7
 800ec2c:	3001      	adds	r0, #1
 800ec2e:	f43f ae9c 	beq.w	800e96a <_printf_float+0xb6>
 800ec32:	9a06      	ldr	r2, [sp, #24]
 800ec34:	f10b 0b01 	add.w	fp, fp, #1
 800ec38:	e7bb      	b.n	800ebb2 <_printf_float+0x2fe>
 800ec3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec3e:	4631      	mov	r1, r6
 800ec40:	4628      	mov	r0, r5
 800ec42:	47b8      	blx	r7
 800ec44:	3001      	adds	r0, #1
 800ec46:	d1c0      	bne.n	800ebca <_printf_float+0x316>
 800ec48:	e68f      	b.n	800e96a <_printf_float+0xb6>
 800ec4a:	9a06      	ldr	r2, [sp, #24]
 800ec4c:	464b      	mov	r3, r9
 800ec4e:	4442      	add	r2, r8
 800ec50:	4631      	mov	r1, r6
 800ec52:	4628      	mov	r0, r5
 800ec54:	47b8      	blx	r7
 800ec56:	3001      	adds	r0, #1
 800ec58:	d1c3      	bne.n	800ebe2 <_printf_float+0x32e>
 800ec5a:	e686      	b.n	800e96a <_printf_float+0xb6>
 800ec5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ec60:	f1ba 0f01 	cmp.w	sl, #1
 800ec64:	dc01      	bgt.n	800ec6a <_printf_float+0x3b6>
 800ec66:	07db      	lsls	r3, r3, #31
 800ec68:	d536      	bpl.n	800ecd8 <_printf_float+0x424>
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	4642      	mov	r2, r8
 800ec6e:	4631      	mov	r1, r6
 800ec70:	4628      	mov	r0, r5
 800ec72:	47b8      	blx	r7
 800ec74:	3001      	adds	r0, #1
 800ec76:	f43f ae78 	beq.w	800e96a <_printf_float+0xb6>
 800ec7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec7e:	4631      	mov	r1, r6
 800ec80:	4628      	mov	r0, r5
 800ec82:	47b8      	blx	r7
 800ec84:	3001      	adds	r0, #1
 800ec86:	f43f ae70 	beq.w	800e96a <_printf_float+0xb6>
 800ec8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ec8e:	2200      	movs	r2, #0
 800ec90:	2300      	movs	r3, #0
 800ec92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec96:	f7f1 ff37 	bl	8000b08 <__aeabi_dcmpeq>
 800ec9a:	b9c0      	cbnz	r0, 800ecce <_printf_float+0x41a>
 800ec9c:	4653      	mov	r3, sl
 800ec9e:	f108 0201 	add.w	r2, r8, #1
 800eca2:	4631      	mov	r1, r6
 800eca4:	4628      	mov	r0, r5
 800eca6:	47b8      	blx	r7
 800eca8:	3001      	adds	r0, #1
 800ecaa:	d10c      	bne.n	800ecc6 <_printf_float+0x412>
 800ecac:	e65d      	b.n	800e96a <_printf_float+0xb6>
 800ecae:	2301      	movs	r3, #1
 800ecb0:	465a      	mov	r2, fp
 800ecb2:	4631      	mov	r1, r6
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	47b8      	blx	r7
 800ecb8:	3001      	adds	r0, #1
 800ecba:	f43f ae56 	beq.w	800e96a <_printf_float+0xb6>
 800ecbe:	f108 0801 	add.w	r8, r8, #1
 800ecc2:	45d0      	cmp	r8, sl
 800ecc4:	dbf3      	blt.n	800ecae <_printf_float+0x3fa>
 800ecc6:	464b      	mov	r3, r9
 800ecc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800eccc:	e6df      	b.n	800ea8e <_printf_float+0x1da>
 800ecce:	f04f 0800 	mov.w	r8, #0
 800ecd2:	f104 0b1a 	add.w	fp, r4, #26
 800ecd6:	e7f4      	b.n	800ecc2 <_printf_float+0x40e>
 800ecd8:	2301      	movs	r3, #1
 800ecda:	4642      	mov	r2, r8
 800ecdc:	e7e1      	b.n	800eca2 <_printf_float+0x3ee>
 800ecde:	2301      	movs	r3, #1
 800ece0:	464a      	mov	r2, r9
 800ece2:	4631      	mov	r1, r6
 800ece4:	4628      	mov	r0, r5
 800ece6:	47b8      	blx	r7
 800ece8:	3001      	adds	r0, #1
 800ecea:	f43f ae3e 	beq.w	800e96a <_printf_float+0xb6>
 800ecee:	f108 0801 	add.w	r8, r8, #1
 800ecf2:	68e3      	ldr	r3, [r4, #12]
 800ecf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ecf6:	1a5b      	subs	r3, r3, r1
 800ecf8:	4543      	cmp	r3, r8
 800ecfa:	dcf0      	bgt.n	800ecde <_printf_float+0x42a>
 800ecfc:	e6fc      	b.n	800eaf8 <_printf_float+0x244>
 800ecfe:	f04f 0800 	mov.w	r8, #0
 800ed02:	f104 0919 	add.w	r9, r4, #25
 800ed06:	e7f4      	b.n	800ecf2 <_printf_float+0x43e>

0800ed08 <_printf_common>:
 800ed08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed0c:	4616      	mov	r6, r2
 800ed0e:	4698      	mov	r8, r3
 800ed10:	688a      	ldr	r2, [r1, #8]
 800ed12:	690b      	ldr	r3, [r1, #16]
 800ed14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	bfb8      	it	lt
 800ed1c:	4613      	movlt	r3, r2
 800ed1e:	6033      	str	r3, [r6, #0]
 800ed20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ed24:	4607      	mov	r7, r0
 800ed26:	460c      	mov	r4, r1
 800ed28:	b10a      	cbz	r2, 800ed2e <_printf_common+0x26>
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	6033      	str	r3, [r6, #0]
 800ed2e:	6823      	ldr	r3, [r4, #0]
 800ed30:	0699      	lsls	r1, r3, #26
 800ed32:	bf42      	ittt	mi
 800ed34:	6833      	ldrmi	r3, [r6, #0]
 800ed36:	3302      	addmi	r3, #2
 800ed38:	6033      	strmi	r3, [r6, #0]
 800ed3a:	6825      	ldr	r5, [r4, #0]
 800ed3c:	f015 0506 	ands.w	r5, r5, #6
 800ed40:	d106      	bne.n	800ed50 <_printf_common+0x48>
 800ed42:	f104 0a19 	add.w	sl, r4, #25
 800ed46:	68e3      	ldr	r3, [r4, #12]
 800ed48:	6832      	ldr	r2, [r6, #0]
 800ed4a:	1a9b      	subs	r3, r3, r2
 800ed4c:	42ab      	cmp	r3, r5
 800ed4e:	dc26      	bgt.n	800ed9e <_printf_common+0x96>
 800ed50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ed54:	6822      	ldr	r2, [r4, #0]
 800ed56:	3b00      	subs	r3, #0
 800ed58:	bf18      	it	ne
 800ed5a:	2301      	movne	r3, #1
 800ed5c:	0692      	lsls	r2, r2, #26
 800ed5e:	d42b      	bmi.n	800edb8 <_printf_common+0xb0>
 800ed60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ed64:	4641      	mov	r1, r8
 800ed66:	4638      	mov	r0, r7
 800ed68:	47c8      	blx	r9
 800ed6a:	3001      	adds	r0, #1
 800ed6c:	d01e      	beq.n	800edac <_printf_common+0xa4>
 800ed6e:	6823      	ldr	r3, [r4, #0]
 800ed70:	6922      	ldr	r2, [r4, #16]
 800ed72:	f003 0306 	and.w	r3, r3, #6
 800ed76:	2b04      	cmp	r3, #4
 800ed78:	bf02      	ittt	eq
 800ed7a:	68e5      	ldreq	r5, [r4, #12]
 800ed7c:	6833      	ldreq	r3, [r6, #0]
 800ed7e:	1aed      	subeq	r5, r5, r3
 800ed80:	68a3      	ldr	r3, [r4, #8]
 800ed82:	bf0c      	ite	eq
 800ed84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed88:	2500      	movne	r5, #0
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	bfc4      	itt	gt
 800ed8e:	1a9b      	subgt	r3, r3, r2
 800ed90:	18ed      	addgt	r5, r5, r3
 800ed92:	2600      	movs	r6, #0
 800ed94:	341a      	adds	r4, #26
 800ed96:	42b5      	cmp	r5, r6
 800ed98:	d11a      	bne.n	800edd0 <_printf_common+0xc8>
 800ed9a:	2000      	movs	r0, #0
 800ed9c:	e008      	b.n	800edb0 <_printf_common+0xa8>
 800ed9e:	2301      	movs	r3, #1
 800eda0:	4652      	mov	r2, sl
 800eda2:	4641      	mov	r1, r8
 800eda4:	4638      	mov	r0, r7
 800eda6:	47c8      	blx	r9
 800eda8:	3001      	adds	r0, #1
 800edaa:	d103      	bne.n	800edb4 <_printf_common+0xac>
 800edac:	f04f 30ff 	mov.w	r0, #4294967295
 800edb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edb4:	3501      	adds	r5, #1
 800edb6:	e7c6      	b.n	800ed46 <_printf_common+0x3e>
 800edb8:	18e1      	adds	r1, r4, r3
 800edba:	1c5a      	adds	r2, r3, #1
 800edbc:	2030      	movs	r0, #48	@ 0x30
 800edbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800edc2:	4422      	add	r2, r4
 800edc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800edc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800edcc:	3302      	adds	r3, #2
 800edce:	e7c7      	b.n	800ed60 <_printf_common+0x58>
 800edd0:	2301      	movs	r3, #1
 800edd2:	4622      	mov	r2, r4
 800edd4:	4641      	mov	r1, r8
 800edd6:	4638      	mov	r0, r7
 800edd8:	47c8      	blx	r9
 800edda:	3001      	adds	r0, #1
 800eddc:	d0e6      	beq.n	800edac <_printf_common+0xa4>
 800edde:	3601      	adds	r6, #1
 800ede0:	e7d9      	b.n	800ed96 <_printf_common+0x8e>
	...

0800ede4 <_printf_i>:
 800ede4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ede8:	7e0f      	ldrb	r7, [r1, #24]
 800edea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800edec:	2f78      	cmp	r7, #120	@ 0x78
 800edee:	4691      	mov	r9, r2
 800edf0:	4680      	mov	r8, r0
 800edf2:	460c      	mov	r4, r1
 800edf4:	469a      	mov	sl, r3
 800edf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800edfa:	d807      	bhi.n	800ee0c <_printf_i+0x28>
 800edfc:	2f62      	cmp	r7, #98	@ 0x62
 800edfe:	d80a      	bhi.n	800ee16 <_printf_i+0x32>
 800ee00:	2f00      	cmp	r7, #0
 800ee02:	f000 80d2 	beq.w	800efaa <_printf_i+0x1c6>
 800ee06:	2f58      	cmp	r7, #88	@ 0x58
 800ee08:	f000 80b9 	beq.w	800ef7e <_printf_i+0x19a>
 800ee0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ee14:	e03a      	b.n	800ee8c <_printf_i+0xa8>
 800ee16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ee1a:	2b15      	cmp	r3, #21
 800ee1c:	d8f6      	bhi.n	800ee0c <_printf_i+0x28>
 800ee1e:	a101      	add	r1, pc, #4	@ (adr r1, 800ee24 <_printf_i+0x40>)
 800ee20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee24:	0800ee7d 	.word	0x0800ee7d
 800ee28:	0800ee91 	.word	0x0800ee91
 800ee2c:	0800ee0d 	.word	0x0800ee0d
 800ee30:	0800ee0d 	.word	0x0800ee0d
 800ee34:	0800ee0d 	.word	0x0800ee0d
 800ee38:	0800ee0d 	.word	0x0800ee0d
 800ee3c:	0800ee91 	.word	0x0800ee91
 800ee40:	0800ee0d 	.word	0x0800ee0d
 800ee44:	0800ee0d 	.word	0x0800ee0d
 800ee48:	0800ee0d 	.word	0x0800ee0d
 800ee4c:	0800ee0d 	.word	0x0800ee0d
 800ee50:	0800ef91 	.word	0x0800ef91
 800ee54:	0800eebb 	.word	0x0800eebb
 800ee58:	0800ef4b 	.word	0x0800ef4b
 800ee5c:	0800ee0d 	.word	0x0800ee0d
 800ee60:	0800ee0d 	.word	0x0800ee0d
 800ee64:	0800efb3 	.word	0x0800efb3
 800ee68:	0800ee0d 	.word	0x0800ee0d
 800ee6c:	0800eebb 	.word	0x0800eebb
 800ee70:	0800ee0d 	.word	0x0800ee0d
 800ee74:	0800ee0d 	.word	0x0800ee0d
 800ee78:	0800ef53 	.word	0x0800ef53
 800ee7c:	6833      	ldr	r3, [r6, #0]
 800ee7e:	1d1a      	adds	r2, r3, #4
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	6032      	str	r2, [r6, #0]
 800ee84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	e09d      	b.n	800efcc <_printf_i+0x1e8>
 800ee90:	6833      	ldr	r3, [r6, #0]
 800ee92:	6820      	ldr	r0, [r4, #0]
 800ee94:	1d19      	adds	r1, r3, #4
 800ee96:	6031      	str	r1, [r6, #0]
 800ee98:	0606      	lsls	r6, r0, #24
 800ee9a:	d501      	bpl.n	800eea0 <_printf_i+0xbc>
 800ee9c:	681d      	ldr	r5, [r3, #0]
 800ee9e:	e003      	b.n	800eea8 <_printf_i+0xc4>
 800eea0:	0645      	lsls	r5, r0, #25
 800eea2:	d5fb      	bpl.n	800ee9c <_printf_i+0xb8>
 800eea4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eea8:	2d00      	cmp	r5, #0
 800eeaa:	da03      	bge.n	800eeb4 <_printf_i+0xd0>
 800eeac:	232d      	movs	r3, #45	@ 0x2d
 800eeae:	426d      	negs	r5, r5
 800eeb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eeb4:	4859      	ldr	r0, [pc, #356]	@ (800f01c <_printf_i+0x238>)
 800eeb6:	230a      	movs	r3, #10
 800eeb8:	e011      	b.n	800eede <_printf_i+0xfa>
 800eeba:	6821      	ldr	r1, [r4, #0]
 800eebc:	6833      	ldr	r3, [r6, #0]
 800eebe:	0608      	lsls	r0, r1, #24
 800eec0:	f853 5b04 	ldr.w	r5, [r3], #4
 800eec4:	d402      	bmi.n	800eecc <_printf_i+0xe8>
 800eec6:	0649      	lsls	r1, r1, #25
 800eec8:	bf48      	it	mi
 800eeca:	b2ad      	uxthmi	r5, r5
 800eecc:	2f6f      	cmp	r7, #111	@ 0x6f
 800eece:	4853      	ldr	r0, [pc, #332]	@ (800f01c <_printf_i+0x238>)
 800eed0:	6033      	str	r3, [r6, #0]
 800eed2:	bf14      	ite	ne
 800eed4:	230a      	movne	r3, #10
 800eed6:	2308      	moveq	r3, #8
 800eed8:	2100      	movs	r1, #0
 800eeda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eede:	6866      	ldr	r6, [r4, #4]
 800eee0:	60a6      	str	r6, [r4, #8]
 800eee2:	2e00      	cmp	r6, #0
 800eee4:	bfa2      	ittt	ge
 800eee6:	6821      	ldrge	r1, [r4, #0]
 800eee8:	f021 0104 	bicge.w	r1, r1, #4
 800eeec:	6021      	strge	r1, [r4, #0]
 800eeee:	b90d      	cbnz	r5, 800eef4 <_printf_i+0x110>
 800eef0:	2e00      	cmp	r6, #0
 800eef2:	d04b      	beq.n	800ef8c <_printf_i+0x1a8>
 800eef4:	4616      	mov	r6, r2
 800eef6:	fbb5 f1f3 	udiv	r1, r5, r3
 800eefa:	fb03 5711 	mls	r7, r3, r1, r5
 800eefe:	5dc7      	ldrb	r7, [r0, r7]
 800ef00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef04:	462f      	mov	r7, r5
 800ef06:	42bb      	cmp	r3, r7
 800ef08:	460d      	mov	r5, r1
 800ef0a:	d9f4      	bls.n	800eef6 <_printf_i+0x112>
 800ef0c:	2b08      	cmp	r3, #8
 800ef0e:	d10b      	bne.n	800ef28 <_printf_i+0x144>
 800ef10:	6823      	ldr	r3, [r4, #0]
 800ef12:	07df      	lsls	r7, r3, #31
 800ef14:	d508      	bpl.n	800ef28 <_printf_i+0x144>
 800ef16:	6923      	ldr	r3, [r4, #16]
 800ef18:	6861      	ldr	r1, [r4, #4]
 800ef1a:	4299      	cmp	r1, r3
 800ef1c:	bfde      	ittt	le
 800ef1e:	2330      	movle	r3, #48	@ 0x30
 800ef20:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef24:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef28:	1b92      	subs	r2, r2, r6
 800ef2a:	6122      	str	r2, [r4, #16]
 800ef2c:	f8cd a000 	str.w	sl, [sp]
 800ef30:	464b      	mov	r3, r9
 800ef32:	aa03      	add	r2, sp, #12
 800ef34:	4621      	mov	r1, r4
 800ef36:	4640      	mov	r0, r8
 800ef38:	f7ff fee6 	bl	800ed08 <_printf_common>
 800ef3c:	3001      	adds	r0, #1
 800ef3e:	d14a      	bne.n	800efd6 <_printf_i+0x1f2>
 800ef40:	f04f 30ff 	mov.w	r0, #4294967295
 800ef44:	b004      	add	sp, #16
 800ef46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef4a:	6823      	ldr	r3, [r4, #0]
 800ef4c:	f043 0320 	orr.w	r3, r3, #32
 800ef50:	6023      	str	r3, [r4, #0]
 800ef52:	4833      	ldr	r0, [pc, #204]	@ (800f020 <_printf_i+0x23c>)
 800ef54:	2778      	movs	r7, #120	@ 0x78
 800ef56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ef5a:	6823      	ldr	r3, [r4, #0]
 800ef5c:	6831      	ldr	r1, [r6, #0]
 800ef5e:	061f      	lsls	r7, r3, #24
 800ef60:	f851 5b04 	ldr.w	r5, [r1], #4
 800ef64:	d402      	bmi.n	800ef6c <_printf_i+0x188>
 800ef66:	065f      	lsls	r7, r3, #25
 800ef68:	bf48      	it	mi
 800ef6a:	b2ad      	uxthmi	r5, r5
 800ef6c:	6031      	str	r1, [r6, #0]
 800ef6e:	07d9      	lsls	r1, r3, #31
 800ef70:	bf44      	itt	mi
 800ef72:	f043 0320 	orrmi.w	r3, r3, #32
 800ef76:	6023      	strmi	r3, [r4, #0]
 800ef78:	b11d      	cbz	r5, 800ef82 <_printf_i+0x19e>
 800ef7a:	2310      	movs	r3, #16
 800ef7c:	e7ac      	b.n	800eed8 <_printf_i+0xf4>
 800ef7e:	4827      	ldr	r0, [pc, #156]	@ (800f01c <_printf_i+0x238>)
 800ef80:	e7e9      	b.n	800ef56 <_printf_i+0x172>
 800ef82:	6823      	ldr	r3, [r4, #0]
 800ef84:	f023 0320 	bic.w	r3, r3, #32
 800ef88:	6023      	str	r3, [r4, #0]
 800ef8a:	e7f6      	b.n	800ef7a <_printf_i+0x196>
 800ef8c:	4616      	mov	r6, r2
 800ef8e:	e7bd      	b.n	800ef0c <_printf_i+0x128>
 800ef90:	6833      	ldr	r3, [r6, #0]
 800ef92:	6825      	ldr	r5, [r4, #0]
 800ef94:	6961      	ldr	r1, [r4, #20]
 800ef96:	1d18      	adds	r0, r3, #4
 800ef98:	6030      	str	r0, [r6, #0]
 800ef9a:	062e      	lsls	r6, r5, #24
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	d501      	bpl.n	800efa4 <_printf_i+0x1c0>
 800efa0:	6019      	str	r1, [r3, #0]
 800efa2:	e002      	b.n	800efaa <_printf_i+0x1c6>
 800efa4:	0668      	lsls	r0, r5, #25
 800efa6:	d5fb      	bpl.n	800efa0 <_printf_i+0x1bc>
 800efa8:	8019      	strh	r1, [r3, #0]
 800efaa:	2300      	movs	r3, #0
 800efac:	6123      	str	r3, [r4, #16]
 800efae:	4616      	mov	r6, r2
 800efb0:	e7bc      	b.n	800ef2c <_printf_i+0x148>
 800efb2:	6833      	ldr	r3, [r6, #0]
 800efb4:	1d1a      	adds	r2, r3, #4
 800efb6:	6032      	str	r2, [r6, #0]
 800efb8:	681e      	ldr	r6, [r3, #0]
 800efba:	6862      	ldr	r2, [r4, #4]
 800efbc:	2100      	movs	r1, #0
 800efbe:	4630      	mov	r0, r6
 800efc0:	f7f1 f926 	bl	8000210 <memchr>
 800efc4:	b108      	cbz	r0, 800efca <_printf_i+0x1e6>
 800efc6:	1b80      	subs	r0, r0, r6
 800efc8:	6060      	str	r0, [r4, #4]
 800efca:	6863      	ldr	r3, [r4, #4]
 800efcc:	6123      	str	r3, [r4, #16]
 800efce:	2300      	movs	r3, #0
 800efd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efd4:	e7aa      	b.n	800ef2c <_printf_i+0x148>
 800efd6:	6923      	ldr	r3, [r4, #16]
 800efd8:	4632      	mov	r2, r6
 800efda:	4649      	mov	r1, r9
 800efdc:	4640      	mov	r0, r8
 800efde:	47d0      	blx	sl
 800efe0:	3001      	adds	r0, #1
 800efe2:	d0ad      	beq.n	800ef40 <_printf_i+0x15c>
 800efe4:	6823      	ldr	r3, [r4, #0]
 800efe6:	079b      	lsls	r3, r3, #30
 800efe8:	d413      	bmi.n	800f012 <_printf_i+0x22e>
 800efea:	68e0      	ldr	r0, [r4, #12]
 800efec:	9b03      	ldr	r3, [sp, #12]
 800efee:	4298      	cmp	r0, r3
 800eff0:	bfb8      	it	lt
 800eff2:	4618      	movlt	r0, r3
 800eff4:	e7a6      	b.n	800ef44 <_printf_i+0x160>
 800eff6:	2301      	movs	r3, #1
 800eff8:	4632      	mov	r2, r6
 800effa:	4649      	mov	r1, r9
 800effc:	4640      	mov	r0, r8
 800effe:	47d0      	blx	sl
 800f000:	3001      	adds	r0, #1
 800f002:	d09d      	beq.n	800ef40 <_printf_i+0x15c>
 800f004:	3501      	adds	r5, #1
 800f006:	68e3      	ldr	r3, [r4, #12]
 800f008:	9903      	ldr	r1, [sp, #12]
 800f00a:	1a5b      	subs	r3, r3, r1
 800f00c:	42ab      	cmp	r3, r5
 800f00e:	dcf2      	bgt.n	800eff6 <_printf_i+0x212>
 800f010:	e7eb      	b.n	800efea <_printf_i+0x206>
 800f012:	2500      	movs	r5, #0
 800f014:	f104 0619 	add.w	r6, r4, #25
 800f018:	e7f5      	b.n	800f006 <_printf_i+0x222>
 800f01a:	bf00      	nop
 800f01c:	08013272 	.word	0x08013272
 800f020:	08013283 	.word	0x08013283

0800f024 <_scanf_float>:
 800f024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f028:	b087      	sub	sp, #28
 800f02a:	4617      	mov	r7, r2
 800f02c:	9303      	str	r3, [sp, #12]
 800f02e:	688b      	ldr	r3, [r1, #8]
 800f030:	1e5a      	subs	r2, r3, #1
 800f032:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f036:	bf81      	itttt	hi
 800f038:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f03c:	eb03 0b05 	addhi.w	fp, r3, r5
 800f040:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f044:	608b      	strhi	r3, [r1, #8]
 800f046:	680b      	ldr	r3, [r1, #0]
 800f048:	460a      	mov	r2, r1
 800f04a:	f04f 0500 	mov.w	r5, #0
 800f04e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800f052:	f842 3b1c 	str.w	r3, [r2], #28
 800f056:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f05a:	4680      	mov	r8, r0
 800f05c:	460c      	mov	r4, r1
 800f05e:	bf98      	it	ls
 800f060:	f04f 0b00 	movls.w	fp, #0
 800f064:	9201      	str	r2, [sp, #4]
 800f066:	4616      	mov	r6, r2
 800f068:	46aa      	mov	sl, r5
 800f06a:	46a9      	mov	r9, r5
 800f06c:	9502      	str	r5, [sp, #8]
 800f06e:	68a2      	ldr	r2, [r4, #8]
 800f070:	b152      	cbz	r2, 800f088 <_scanf_float+0x64>
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	2b4e      	cmp	r3, #78	@ 0x4e
 800f078:	d864      	bhi.n	800f144 <_scanf_float+0x120>
 800f07a:	2b40      	cmp	r3, #64	@ 0x40
 800f07c:	d83c      	bhi.n	800f0f8 <_scanf_float+0xd4>
 800f07e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800f082:	b2c8      	uxtb	r0, r1
 800f084:	280e      	cmp	r0, #14
 800f086:	d93a      	bls.n	800f0fe <_scanf_float+0xda>
 800f088:	f1b9 0f00 	cmp.w	r9, #0
 800f08c:	d003      	beq.n	800f096 <_scanf_float+0x72>
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f094:	6023      	str	r3, [r4, #0]
 800f096:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f09a:	f1ba 0f01 	cmp.w	sl, #1
 800f09e:	f200 8117 	bhi.w	800f2d0 <_scanf_float+0x2ac>
 800f0a2:	9b01      	ldr	r3, [sp, #4]
 800f0a4:	429e      	cmp	r6, r3
 800f0a6:	f200 8108 	bhi.w	800f2ba <_scanf_float+0x296>
 800f0aa:	2001      	movs	r0, #1
 800f0ac:	b007      	add	sp, #28
 800f0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800f0b6:	2a0d      	cmp	r2, #13
 800f0b8:	d8e6      	bhi.n	800f088 <_scanf_float+0x64>
 800f0ba:	a101      	add	r1, pc, #4	@ (adr r1, 800f0c0 <_scanf_float+0x9c>)
 800f0bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f0c0:	0800f207 	.word	0x0800f207
 800f0c4:	0800f089 	.word	0x0800f089
 800f0c8:	0800f089 	.word	0x0800f089
 800f0cc:	0800f089 	.word	0x0800f089
 800f0d0:	0800f267 	.word	0x0800f267
 800f0d4:	0800f23f 	.word	0x0800f23f
 800f0d8:	0800f089 	.word	0x0800f089
 800f0dc:	0800f089 	.word	0x0800f089
 800f0e0:	0800f215 	.word	0x0800f215
 800f0e4:	0800f089 	.word	0x0800f089
 800f0e8:	0800f089 	.word	0x0800f089
 800f0ec:	0800f089 	.word	0x0800f089
 800f0f0:	0800f089 	.word	0x0800f089
 800f0f4:	0800f1cd 	.word	0x0800f1cd
 800f0f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800f0fc:	e7db      	b.n	800f0b6 <_scanf_float+0x92>
 800f0fe:	290e      	cmp	r1, #14
 800f100:	d8c2      	bhi.n	800f088 <_scanf_float+0x64>
 800f102:	a001      	add	r0, pc, #4	@ (adr r0, 800f108 <_scanf_float+0xe4>)
 800f104:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f108:	0800f1bd 	.word	0x0800f1bd
 800f10c:	0800f089 	.word	0x0800f089
 800f110:	0800f1bd 	.word	0x0800f1bd
 800f114:	0800f253 	.word	0x0800f253
 800f118:	0800f089 	.word	0x0800f089
 800f11c:	0800f165 	.word	0x0800f165
 800f120:	0800f1a3 	.word	0x0800f1a3
 800f124:	0800f1a3 	.word	0x0800f1a3
 800f128:	0800f1a3 	.word	0x0800f1a3
 800f12c:	0800f1a3 	.word	0x0800f1a3
 800f130:	0800f1a3 	.word	0x0800f1a3
 800f134:	0800f1a3 	.word	0x0800f1a3
 800f138:	0800f1a3 	.word	0x0800f1a3
 800f13c:	0800f1a3 	.word	0x0800f1a3
 800f140:	0800f1a3 	.word	0x0800f1a3
 800f144:	2b6e      	cmp	r3, #110	@ 0x6e
 800f146:	d809      	bhi.n	800f15c <_scanf_float+0x138>
 800f148:	2b60      	cmp	r3, #96	@ 0x60
 800f14a:	d8b2      	bhi.n	800f0b2 <_scanf_float+0x8e>
 800f14c:	2b54      	cmp	r3, #84	@ 0x54
 800f14e:	d07b      	beq.n	800f248 <_scanf_float+0x224>
 800f150:	2b59      	cmp	r3, #89	@ 0x59
 800f152:	d199      	bne.n	800f088 <_scanf_float+0x64>
 800f154:	2d07      	cmp	r5, #7
 800f156:	d197      	bne.n	800f088 <_scanf_float+0x64>
 800f158:	2508      	movs	r5, #8
 800f15a:	e02c      	b.n	800f1b6 <_scanf_float+0x192>
 800f15c:	2b74      	cmp	r3, #116	@ 0x74
 800f15e:	d073      	beq.n	800f248 <_scanf_float+0x224>
 800f160:	2b79      	cmp	r3, #121	@ 0x79
 800f162:	e7f6      	b.n	800f152 <_scanf_float+0x12e>
 800f164:	6821      	ldr	r1, [r4, #0]
 800f166:	05c8      	lsls	r0, r1, #23
 800f168:	d51b      	bpl.n	800f1a2 <_scanf_float+0x17e>
 800f16a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f16e:	6021      	str	r1, [r4, #0]
 800f170:	f109 0901 	add.w	r9, r9, #1
 800f174:	f1bb 0f00 	cmp.w	fp, #0
 800f178:	d003      	beq.n	800f182 <_scanf_float+0x15e>
 800f17a:	3201      	adds	r2, #1
 800f17c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f180:	60a2      	str	r2, [r4, #8]
 800f182:	68a3      	ldr	r3, [r4, #8]
 800f184:	3b01      	subs	r3, #1
 800f186:	60a3      	str	r3, [r4, #8]
 800f188:	6923      	ldr	r3, [r4, #16]
 800f18a:	3301      	adds	r3, #1
 800f18c:	6123      	str	r3, [r4, #16]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	3b01      	subs	r3, #1
 800f192:	2b00      	cmp	r3, #0
 800f194:	607b      	str	r3, [r7, #4]
 800f196:	f340 8087 	ble.w	800f2a8 <_scanf_float+0x284>
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	3301      	adds	r3, #1
 800f19e:	603b      	str	r3, [r7, #0]
 800f1a0:	e765      	b.n	800f06e <_scanf_float+0x4a>
 800f1a2:	eb1a 0105 	adds.w	r1, sl, r5
 800f1a6:	f47f af6f 	bne.w	800f088 <_scanf_float+0x64>
 800f1aa:	6822      	ldr	r2, [r4, #0]
 800f1ac:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f1b0:	6022      	str	r2, [r4, #0]
 800f1b2:	460d      	mov	r5, r1
 800f1b4:	468a      	mov	sl, r1
 800f1b6:	f806 3b01 	strb.w	r3, [r6], #1
 800f1ba:	e7e2      	b.n	800f182 <_scanf_float+0x15e>
 800f1bc:	6822      	ldr	r2, [r4, #0]
 800f1be:	0610      	lsls	r0, r2, #24
 800f1c0:	f57f af62 	bpl.w	800f088 <_scanf_float+0x64>
 800f1c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f1c8:	6022      	str	r2, [r4, #0]
 800f1ca:	e7f4      	b.n	800f1b6 <_scanf_float+0x192>
 800f1cc:	f1ba 0f00 	cmp.w	sl, #0
 800f1d0:	d10e      	bne.n	800f1f0 <_scanf_float+0x1cc>
 800f1d2:	f1b9 0f00 	cmp.w	r9, #0
 800f1d6:	d10e      	bne.n	800f1f6 <_scanf_float+0x1d2>
 800f1d8:	6822      	ldr	r2, [r4, #0]
 800f1da:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f1de:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f1e2:	d108      	bne.n	800f1f6 <_scanf_float+0x1d2>
 800f1e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f1e8:	6022      	str	r2, [r4, #0]
 800f1ea:	f04f 0a01 	mov.w	sl, #1
 800f1ee:	e7e2      	b.n	800f1b6 <_scanf_float+0x192>
 800f1f0:	f1ba 0f02 	cmp.w	sl, #2
 800f1f4:	d055      	beq.n	800f2a2 <_scanf_float+0x27e>
 800f1f6:	2d01      	cmp	r5, #1
 800f1f8:	d002      	beq.n	800f200 <_scanf_float+0x1dc>
 800f1fa:	2d04      	cmp	r5, #4
 800f1fc:	f47f af44 	bne.w	800f088 <_scanf_float+0x64>
 800f200:	3501      	adds	r5, #1
 800f202:	b2ed      	uxtb	r5, r5
 800f204:	e7d7      	b.n	800f1b6 <_scanf_float+0x192>
 800f206:	f1ba 0f01 	cmp.w	sl, #1
 800f20a:	f47f af3d 	bne.w	800f088 <_scanf_float+0x64>
 800f20e:	f04f 0a02 	mov.w	sl, #2
 800f212:	e7d0      	b.n	800f1b6 <_scanf_float+0x192>
 800f214:	b97d      	cbnz	r5, 800f236 <_scanf_float+0x212>
 800f216:	f1b9 0f00 	cmp.w	r9, #0
 800f21a:	f47f af38 	bne.w	800f08e <_scanf_float+0x6a>
 800f21e:	6822      	ldr	r2, [r4, #0]
 800f220:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f224:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f228:	f040 8108 	bne.w	800f43c <_scanf_float+0x418>
 800f22c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f230:	6022      	str	r2, [r4, #0]
 800f232:	2501      	movs	r5, #1
 800f234:	e7bf      	b.n	800f1b6 <_scanf_float+0x192>
 800f236:	2d03      	cmp	r5, #3
 800f238:	d0e2      	beq.n	800f200 <_scanf_float+0x1dc>
 800f23a:	2d05      	cmp	r5, #5
 800f23c:	e7de      	b.n	800f1fc <_scanf_float+0x1d8>
 800f23e:	2d02      	cmp	r5, #2
 800f240:	f47f af22 	bne.w	800f088 <_scanf_float+0x64>
 800f244:	2503      	movs	r5, #3
 800f246:	e7b6      	b.n	800f1b6 <_scanf_float+0x192>
 800f248:	2d06      	cmp	r5, #6
 800f24a:	f47f af1d 	bne.w	800f088 <_scanf_float+0x64>
 800f24e:	2507      	movs	r5, #7
 800f250:	e7b1      	b.n	800f1b6 <_scanf_float+0x192>
 800f252:	6822      	ldr	r2, [r4, #0]
 800f254:	0591      	lsls	r1, r2, #22
 800f256:	f57f af17 	bpl.w	800f088 <_scanf_float+0x64>
 800f25a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f25e:	6022      	str	r2, [r4, #0]
 800f260:	f8cd 9008 	str.w	r9, [sp, #8]
 800f264:	e7a7      	b.n	800f1b6 <_scanf_float+0x192>
 800f266:	6822      	ldr	r2, [r4, #0]
 800f268:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f26c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f270:	d006      	beq.n	800f280 <_scanf_float+0x25c>
 800f272:	0550      	lsls	r0, r2, #21
 800f274:	f57f af08 	bpl.w	800f088 <_scanf_float+0x64>
 800f278:	f1b9 0f00 	cmp.w	r9, #0
 800f27c:	f000 80de 	beq.w	800f43c <_scanf_float+0x418>
 800f280:	0591      	lsls	r1, r2, #22
 800f282:	bf58      	it	pl
 800f284:	9902      	ldrpl	r1, [sp, #8]
 800f286:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f28a:	bf58      	it	pl
 800f28c:	eba9 0101 	subpl.w	r1, r9, r1
 800f290:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f294:	bf58      	it	pl
 800f296:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f29a:	6022      	str	r2, [r4, #0]
 800f29c:	f04f 0900 	mov.w	r9, #0
 800f2a0:	e789      	b.n	800f1b6 <_scanf_float+0x192>
 800f2a2:	f04f 0a03 	mov.w	sl, #3
 800f2a6:	e786      	b.n	800f1b6 <_scanf_float+0x192>
 800f2a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f2ac:	4639      	mov	r1, r7
 800f2ae:	4640      	mov	r0, r8
 800f2b0:	4798      	blx	r3
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	f43f aedb 	beq.w	800f06e <_scanf_float+0x4a>
 800f2b8:	e6e6      	b.n	800f088 <_scanf_float+0x64>
 800f2ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f2c2:	463a      	mov	r2, r7
 800f2c4:	4640      	mov	r0, r8
 800f2c6:	4798      	blx	r3
 800f2c8:	6923      	ldr	r3, [r4, #16]
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	6123      	str	r3, [r4, #16]
 800f2ce:	e6e8      	b.n	800f0a2 <_scanf_float+0x7e>
 800f2d0:	1e6b      	subs	r3, r5, #1
 800f2d2:	2b06      	cmp	r3, #6
 800f2d4:	d824      	bhi.n	800f320 <_scanf_float+0x2fc>
 800f2d6:	2d02      	cmp	r5, #2
 800f2d8:	d836      	bhi.n	800f348 <_scanf_float+0x324>
 800f2da:	9b01      	ldr	r3, [sp, #4]
 800f2dc:	429e      	cmp	r6, r3
 800f2de:	f67f aee4 	bls.w	800f0aa <_scanf_float+0x86>
 800f2e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f2ea:	463a      	mov	r2, r7
 800f2ec:	4640      	mov	r0, r8
 800f2ee:	4798      	blx	r3
 800f2f0:	6923      	ldr	r3, [r4, #16]
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	6123      	str	r3, [r4, #16]
 800f2f6:	e7f0      	b.n	800f2da <_scanf_float+0x2b6>
 800f2f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f2fc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f300:	463a      	mov	r2, r7
 800f302:	4640      	mov	r0, r8
 800f304:	4798      	blx	r3
 800f306:	6923      	ldr	r3, [r4, #16]
 800f308:	3b01      	subs	r3, #1
 800f30a:	6123      	str	r3, [r4, #16]
 800f30c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f310:	fa5f fa8a 	uxtb.w	sl, sl
 800f314:	f1ba 0f02 	cmp.w	sl, #2
 800f318:	d1ee      	bne.n	800f2f8 <_scanf_float+0x2d4>
 800f31a:	3d03      	subs	r5, #3
 800f31c:	b2ed      	uxtb	r5, r5
 800f31e:	1b76      	subs	r6, r6, r5
 800f320:	6823      	ldr	r3, [r4, #0]
 800f322:	05da      	lsls	r2, r3, #23
 800f324:	d530      	bpl.n	800f388 <_scanf_float+0x364>
 800f326:	055b      	lsls	r3, r3, #21
 800f328:	d511      	bpl.n	800f34e <_scanf_float+0x32a>
 800f32a:	9b01      	ldr	r3, [sp, #4]
 800f32c:	429e      	cmp	r6, r3
 800f32e:	f67f aebc 	bls.w	800f0aa <_scanf_float+0x86>
 800f332:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f336:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f33a:	463a      	mov	r2, r7
 800f33c:	4640      	mov	r0, r8
 800f33e:	4798      	blx	r3
 800f340:	6923      	ldr	r3, [r4, #16]
 800f342:	3b01      	subs	r3, #1
 800f344:	6123      	str	r3, [r4, #16]
 800f346:	e7f0      	b.n	800f32a <_scanf_float+0x306>
 800f348:	46aa      	mov	sl, r5
 800f34a:	46b3      	mov	fp, r6
 800f34c:	e7de      	b.n	800f30c <_scanf_float+0x2e8>
 800f34e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f352:	6923      	ldr	r3, [r4, #16]
 800f354:	2965      	cmp	r1, #101	@ 0x65
 800f356:	f103 33ff 	add.w	r3, r3, #4294967295
 800f35a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f35e:	6123      	str	r3, [r4, #16]
 800f360:	d00c      	beq.n	800f37c <_scanf_float+0x358>
 800f362:	2945      	cmp	r1, #69	@ 0x45
 800f364:	d00a      	beq.n	800f37c <_scanf_float+0x358>
 800f366:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f36a:	463a      	mov	r2, r7
 800f36c:	4640      	mov	r0, r8
 800f36e:	4798      	blx	r3
 800f370:	6923      	ldr	r3, [r4, #16]
 800f372:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f376:	3b01      	subs	r3, #1
 800f378:	1eb5      	subs	r5, r6, #2
 800f37a:	6123      	str	r3, [r4, #16]
 800f37c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f380:	463a      	mov	r2, r7
 800f382:	4640      	mov	r0, r8
 800f384:	4798      	blx	r3
 800f386:	462e      	mov	r6, r5
 800f388:	6822      	ldr	r2, [r4, #0]
 800f38a:	f012 0210 	ands.w	r2, r2, #16
 800f38e:	d001      	beq.n	800f394 <_scanf_float+0x370>
 800f390:	2000      	movs	r0, #0
 800f392:	e68b      	b.n	800f0ac <_scanf_float+0x88>
 800f394:	7032      	strb	r2, [r6, #0]
 800f396:	6823      	ldr	r3, [r4, #0]
 800f398:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f39c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f3a0:	d11c      	bne.n	800f3dc <_scanf_float+0x3b8>
 800f3a2:	9b02      	ldr	r3, [sp, #8]
 800f3a4:	454b      	cmp	r3, r9
 800f3a6:	eba3 0209 	sub.w	r2, r3, r9
 800f3aa:	d123      	bne.n	800f3f4 <_scanf_float+0x3d0>
 800f3ac:	9901      	ldr	r1, [sp, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	4640      	mov	r0, r8
 800f3b2:	f7ff f975 	bl	800e6a0 <_strtod_r>
 800f3b6:	9b03      	ldr	r3, [sp, #12]
 800f3b8:	6821      	ldr	r1, [r4, #0]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	f011 0f02 	tst.w	r1, #2
 800f3c0:	ec57 6b10 	vmov	r6, r7, d0
 800f3c4:	f103 0204 	add.w	r2, r3, #4
 800f3c8:	d01f      	beq.n	800f40a <_scanf_float+0x3e6>
 800f3ca:	9903      	ldr	r1, [sp, #12]
 800f3cc:	600a      	str	r2, [r1, #0]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	e9c3 6700 	strd	r6, r7, [r3]
 800f3d4:	68e3      	ldr	r3, [r4, #12]
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	60e3      	str	r3, [r4, #12]
 800f3da:	e7d9      	b.n	800f390 <_scanf_float+0x36c>
 800f3dc:	9b04      	ldr	r3, [sp, #16]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d0e4      	beq.n	800f3ac <_scanf_float+0x388>
 800f3e2:	9905      	ldr	r1, [sp, #20]
 800f3e4:	230a      	movs	r3, #10
 800f3e6:	3101      	adds	r1, #1
 800f3e8:	4640      	mov	r0, r8
 800f3ea:	f002 fa55 	bl	8011898 <_strtol_r>
 800f3ee:	9b04      	ldr	r3, [sp, #16]
 800f3f0:	9e05      	ldr	r6, [sp, #20]
 800f3f2:	1ac2      	subs	r2, r0, r3
 800f3f4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f3f8:	429e      	cmp	r6, r3
 800f3fa:	bf28      	it	cs
 800f3fc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f400:	4910      	ldr	r1, [pc, #64]	@ (800f444 <_scanf_float+0x420>)
 800f402:	4630      	mov	r0, r6
 800f404:	f000 f8f6 	bl	800f5f4 <siprintf>
 800f408:	e7d0      	b.n	800f3ac <_scanf_float+0x388>
 800f40a:	f011 0f04 	tst.w	r1, #4
 800f40e:	9903      	ldr	r1, [sp, #12]
 800f410:	600a      	str	r2, [r1, #0]
 800f412:	d1dc      	bne.n	800f3ce <_scanf_float+0x3aa>
 800f414:	681d      	ldr	r5, [r3, #0]
 800f416:	4632      	mov	r2, r6
 800f418:	463b      	mov	r3, r7
 800f41a:	4630      	mov	r0, r6
 800f41c:	4639      	mov	r1, r7
 800f41e:	f7f1 fba5 	bl	8000b6c <__aeabi_dcmpun>
 800f422:	b128      	cbz	r0, 800f430 <_scanf_float+0x40c>
 800f424:	4808      	ldr	r0, [pc, #32]	@ (800f448 <_scanf_float+0x424>)
 800f426:	f000 fa4f 	bl	800f8c8 <nanf>
 800f42a:	ed85 0a00 	vstr	s0, [r5]
 800f42e:	e7d1      	b.n	800f3d4 <_scanf_float+0x3b0>
 800f430:	4630      	mov	r0, r6
 800f432:	4639      	mov	r1, r7
 800f434:	f7f1 fbf8 	bl	8000c28 <__aeabi_d2f>
 800f438:	6028      	str	r0, [r5, #0]
 800f43a:	e7cb      	b.n	800f3d4 <_scanf_float+0x3b0>
 800f43c:	f04f 0900 	mov.w	r9, #0
 800f440:	e629      	b.n	800f096 <_scanf_float+0x72>
 800f442:	bf00      	nop
 800f444:	08013294 	.word	0x08013294
 800f448:	0801334d 	.word	0x0801334d

0800f44c <std>:
 800f44c:	2300      	movs	r3, #0
 800f44e:	b510      	push	{r4, lr}
 800f450:	4604      	mov	r4, r0
 800f452:	e9c0 3300 	strd	r3, r3, [r0]
 800f456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f45a:	6083      	str	r3, [r0, #8]
 800f45c:	8181      	strh	r1, [r0, #12]
 800f45e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f460:	81c2      	strh	r2, [r0, #14]
 800f462:	6183      	str	r3, [r0, #24]
 800f464:	4619      	mov	r1, r3
 800f466:	2208      	movs	r2, #8
 800f468:	305c      	adds	r0, #92	@ 0x5c
 800f46a:	f000 f926 	bl	800f6ba <memset>
 800f46e:	4b0d      	ldr	r3, [pc, #52]	@ (800f4a4 <std+0x58>)
 800f470:	6263      	str	r3, [r4, #36]	@ 0x24
 800f472:	4b0d      	ldr	r3, [pc, #52]	@ (800f4a8 <std+0x5c>)
 800f474:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f476:	4b0d      	ldr	r3, [pc, #52]	@ (800f4ac <std+0x60>)
 800f478:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f47a:	4b0d      	ldr	r3, [pc, #52]	@ (800f4b0 <std+0x64>)
 800f47c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f47e:	4b0d      	ldr	r3, [pc, #52]	@ (800f4b4 <std+0x68>)
 800f480:	6224      	str	r4, [r4, #32]
 800f482:	429c      	cmp	r4, r3
 800f484:	d006      	beq.n	800f494 <std+0x48>
 800f486:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f48a:	4294      	cmp	r4, r2
 800f48c:	d002      	beq.n	800f494 <std+0x48>
 800f48e:	33d0      	adds	r3, #208	@ 0xd0
 800f490:	429c      	cmp	r4, r3
 800f492:	d105      	bne.n	800f4a0 <std+0x54>
 800f494:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f49c:	f000 b9f8 	b.w	800f890 <__retarget_lock_init_recursive>
 800f4a0:	bd10      	pop	{r4, pc}
 800f4a2:	bf00      	nop
 800f4a4:	0800f635 	.word	0x0800f635
 800f4a8:	0800f657 	.word	0x0800f657
 800f4ac:	0800f68f 	.word	0x0800f68f
 800f4b0:	0800f6b3 	.word	0x0800f6b3
 800f4b4:	200037ec 	.word	0x200037ec

0800f4b8 <stdio_exit_handler>:
 800f4b8:	4a02      	ldr	r2, [pc, #8]	@ (800f4c4 <stdio_exit_handler+0xc>)
 800f4ba:	4903      	ldr	r1, [pc, #12]	@ (800f4c8 <stdio_exit_handler+0x10>)
 800f4bc:	4803      	ldr	r0, [pc, #12]	@ (800f4cc <stdio_exit_handler+0x14>)
 800f4be:	f000 b869 	b.w	800f594 <_fwalk_sglue>
 800f4c2:	bf00      	nop
 800f4c4:	20000020 	.word	0x20000020
 800f4c8:	08011ef1 	.word	0x08011ef1
 800f4cc:	2000019c 	.word	0x2000019c

0800f4d0 <cleanup_stdio>:
 800f4d0:	6841      	ldr	r1, [r0, #4]
 800f4d2:	4b0c      	ldr	r3, [pc, #48]	@ (800f504 <cleanup_stdio+0x34>)
 800f4d4:	4299      	cmp	r1, r3
 800f4d6:	b510      	push	{r4, lr}
 800f4d8:	4604      	mov	r4, r0
 800f4da:	d001      	beq.n	800f4e0 <cleanup_stdio+0x10>
 800f4dc:	f002 fd08 	bl	8011ef0 <_fflush_r>
 800f4e0:	68a1      	ldr	r1, [r4, #8]
 800f4e2:	4b09      	ldr	r3, [pc, #36]	@ (800f508 <cleanup_stdio+0x38>)
 800f4e4:	4299      	cmp	r1, r3
 800f4e6:	d002      	beq.n	800f4ee <cleanup_stdio+0x1e>
 800f4e8:	4620      	mov	r0, r4
 800f4ea:	f002 fd01 	bl	8011ef0 <_fflush_r>
 800f4ee:	68e1      	ldr	r1, [r4, #12]
 800f4f0:	4b06      	ldr	r3, [pc, #24]	@ (800f50c <cleanup_stdio+0x3c>)
 800f4f2:	4299      	cmp	r1, r3
 800f4f4:	d004      	beq.n	800f500 <cleanup_stdio+0x30>
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4fc:	f002 bcf8 	b.w	8011ef0 <_fflush_r>
 800f500:	bd10      	pop	{r4, pc}
 800f502:	bf00      	nop
 800f504:	200037ec 	.word	0x200037ec
 800f508:	20003854 	.word	0x20003854
 800f50c:	200038bc 	.word	0x200038bc

0800f510 <global_stdio_init.part.0>:
 800f510:	b510      	push	{r4, lr}
 800f512:	4b0b      	ldr	r3, [pc, #44]	@ (800f540 <global_stdio_init.part.0+0x30>)
 800f514:	4c0b      	ldr	r4, [pc, #44]	@ (800f544 <global_stdio_init.part.0+0x34>)
 800f516:	4a0c      	ldr	r2, [pc, #48]	@ (800f548 <global_stdio_init.part.0+0x38>)
 800f518:	601a      	str	r2, [r3, #0]
 800f51a:	4620      	mov	r0, r4
 800f51c:	2200      	movs	r2, #0
 800f51e:	2104      	movs	r1, #4
 800f520:	f7ff ff94 	bl	800f44c <std>
 800f524:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f528:	2201      	movs	r2, #1
 800f52a:	2109      	movs	r1, #9
 800f52c:	f7ff ff8e 	bl	800f44c <std>
 800f530:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f534:	2202      	movs	r2, #2
 800f536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f53a:	2112      	movs	r1, #18
 800f53c:	f7ff bf86 	b.w	800f44c <std>
 800f540:	20003924 	.word	0x20003924
 800f544:	200037ec 	.word	0x200037ec
 800f548:	0800f4b9 	.word	0x0800f4b9

0800f54c <__sfp_lock_acquire>:
 800f54c:	4801      	ldr	r0, [pc, #4]	@ (800f554 <__sfp_lock_acquire+0x8>)
 800f54e:	f000 b9a0 	b.w	800f892 <__retarget_lock_acquire_recursive>
 800f552:	bf00      	nop
 800f554:	2000392d 	.word	0x2000392d

0800f558 <__sfp_lock_release>:
 800f558:	4801      	ldr	r0, [pc, #4]	@ (800f560 <__sfp_lock_release+0x8>)
 800f55a:	f000 b99b 	b.w	800f894 <__retarget_lock_release_recursive>
 800f55e:	bf00      	nop
 800f560:	2000392d 	.word	0x2000392d

0800f564 <__sinit>:
 800f564:	b510      	push	{r4, lr}
 800f566:	4604      	mov	r4, r0
 800f568:	f7ff fff0 	bl	800f54c <__sfp_lock_acquire>
 800f56c:	6a23      	ldr	r3, [r4, #32]
 800f56e:	b11b      	cbz	r3, 800f578 <__sinit+0x14>
 800f570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f574:	f7ff bff0 	b.w	800f558 <__sfp_lock_release>
 800f578:	4b04      	ldr	r3, [pc, #16]	@ (800f58c <__sinit+0x28>)
 800f57a:	6223      	str	r3, [r4, #32]
 800f57c:	4b04      	ldr	r3, [pc, #16]	@ (800f590 <__sinit+0x2c>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d1f5      	bne.n	800f570 <__sinit+0xc>
 800f584:	f7ff ffc4 	bl	800f510 <global_stdio_init.part.0>
 800f588:	e7f2      	b.n	800f570 <__sinit+0xc>
 800f58a:	bf00      	nop
 800f58c:	0800f4d1 	.word	0x0800f4d1
 800f590:	20003924 	.word	0x20003924

0800f594 <_fwalk_sglue>:
 800f594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f598:	4607      	mov	r7, r0
 800f59a:	4688      	mov	r8, r1
 800f59c:	4614      	mov	r4, r2
 800f59e:	2600      	movs	r6, #0
 800f5a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5a4:	f1b9 0901 	subs.w	r9, r9, #1
 800f5a8:	d505      	bpl.n	800f5b6 <_fwalk_sglue+0x22>
 800f5aa:	6824      	ldr	r4, [r4, #0]
 800f5ac:	2c00      	cmp	r4, #0
 800f5ae:	d1f7      	bne.n	800f5a0 <_fwalk_sglue+0xc>
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5b6:	89ab      	ldrh	r3, [r5, #12]
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	d907      	bls.n	800f5cc <_fwalk_sglue+0x38>
 800f5bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	d003      	beq.n	800f5cc <_fwalk_sglue+0x38>
 800f5c4:	4629      	mov	r1, r5
 800f5c6:	4638      	mov	r0, r7
 800f5c8:	47c0      	blx	r8
 800f5ca:	4306      	orrs	r6, r0
 800f5cc:	3568      	adds	r5, #104	@ 0x68
 800f5ce:	e7e9      	b.n	800f5a4 <_fwalk_sglue+0x10>

0800f5d0 <iprintf>:
 800f5d0:	b40f      	push	{r0, r1, r2, r3}
 800f5d2:	b507      	push	{r0, r1, r2, lr}
 800f5d4:	4906      	ldr	r1, [pc, #24]	@ (800f5f0 <iprintf+0x20>)
 800f5d6:	ab04      	add	r3, sp, #16
 800f5d8:	6808      	ldr	r0, [r1, #0]
 800f5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5de:	6881      	ldr	r1, [r0, #8]
 800f5e0:	9301      	str	r3, [sp, #4]
 800f5e2:	f002 fae9 	bl	8011bb8 <_vfiprintf_r>
 800f5e6:	b003      	add	sp, #12
 800f5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5ec:	b004      	add	sp, #16
 800f5ee:	4770      	bx	lr
 800f5f0:	20000198 	.word	0x20000198

0800f5f4 <siprintf>:
 800f5f4:	b40e      	push	{r1, r2, r3}
 800f5f6:	b500      	push	{lr}
 800f5f8:	b09c      	sub	sp, #112	@ 0x70
 800f5fa:	ab1d      	add	r3, sp, #116	@ 0x74
 800f5fc:	9002      	str	r0, [sp, #8]
 800f5fe:	9006      	str	r0, [sp, #24]
 800f600:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f604:	4809      	ldr	r0, [pc, #36]	@ (800f62c <siprintf+0x38>)
 800f606:	9107      	str	r1, [sp, #28]
 800f608:	9104      	str	r1, [sp, #16]
 800f60a:	4909      	ldr	r1, [pc, #36]	@ (800f630 <siprintf+0x3c>)
 800f60c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f610:	9105      	str	r1, [sp, #20]
 800f612:	6800      	ldr	r0, [r0, #0]
 800f614:	9301      	str	r3, [sp, #4]
 800f616:	a902      	add	r1, sp, #8
 800f618:	f002 f9a8 	bl	801196c <_svfiprintf_r>
 800f61c:	9b02      	ldr	r3, [sp, #8]
 800f61e:	2200      	movs	r2, #0
 800f620:	701a      	strb	r2, [r3, #0]
 800f622:	b01c      	add	sp, #112	@ 0x70
 800f624:	f85d eb04 	ldr.w	lr, [sp], #4
 800f628:	b003      	add	sp, #12
 800f62a:	4770      	bx	lr
 800f62c:	20000198 	.word	0x20000198
 800f630:	ffff0208 	.word	0xffff0208

0800f634 <__sread>:
 800f634:	b510      	push	{r4, lr}
 800f636:	460c      	mov	r4, r1
 800f638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f63c:	f000 f8da 	bl	800f7f4 <_read_r>
 800f640:	2800      	cmp	r0, #0
 800f642:	bfab      	itete	ge
 800f644:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f646:	89a3      	ldrhlt	r3, [r4, #12]
 800f648:	181b      	addge	r3, r3, r0
 800f64a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f64e:	bfac      	ite	ge
 800f650:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f652:	81a3      	strhlt	r3, [r4, #12]
 800f654:	bd10      	pop	{r4, pc}

0800f656 <__swrite>:
 800f656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f65a:	461f      	mov	r7, r3
 800f65c:	898b      	ldrh	r3, [r1, #12]
 800f65e:	05db      	lsls	r3, r3, #23
 800f660:	4605      	mov	r5, r0
 800f662:	460c      	mov	r4, r1
 800f664:	4616      	mov	r6, r2
 800f666:	d505      	bpl.n	800f674 <__swrite+0x1e>
 800f668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f66c:	2302      	movs	r3, #2
 800f66e:	2200      	movs	r2, #0
 800f670:	f000 f8ae 	bl	800f7d0 <_lseek_r>
 800f674:	89a3      	ldrh	r3, [r4, #12]
 800f676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f67a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f67e:	81a3      	strh	r3, [r4, #12]
 800f680:	4632      	mov	r2, r6
 800f682:	463b      	mov	r3, r7
 800f684:	4628      	mov	r0, r5
 800f686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f68a:	f000 b8c5 	b.w	800f818 <_write_r>

0800f68e <__sseek>:
 800f68e:	b510      	push	{r4, lr}
 800f690:	460c      	mov	r4, r1
 800f692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f696:	f000 f89b 	bl	800f7d0 <_lseek_r>
 800f69a:	1c43      	adds	r3, r0, #1
 800f69c:	89a3      	ldrh	r3, [r4, #12]
 800f69e:	bf15      	itete	ne
 800f6a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f6a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f6a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f6aa:	81a3      	strheq	r3, [r4, #12]
 800f6ac:	bf18      	it	ne
 800f6ae:	81a3      	strhne	r3, [r4, #12]
 800f6b0:	bd10      	pop	{r4, pc}

0800f6b2 <__sclose>:
 800f6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6b6:	f000 b87b 	b.w	800f7b0 <_close_r>

0800f6ba <memset>:
 800f6ba:	4402      	add	r2, r0
 800f6bc:	4603      	mov	r3, r0
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d100      	bne.n	800f6c4 <memset+0xa>
 800f6c2:	4770      	bx	lr
 800f6c4:	f803 1b01 	strb.w	r1, [r3], #1
 800f6c8:	e7f9      	b.n	800f6be <memset+0x4>

0800f6ca <strncmp>:
 800f6ca:	b510      	push	{r4, lr}
 800f6cc:	b16a      	cbz	r2, 800f6ea <strncmp+0x20>
 800f6ce:	3901      	subs	r1, #1
 800f6d0:	1884      	adds	r4, r0, r2
 800f6d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d103      	bne.n	800f6e6 <strncmp+0x1c>
 800f6de:	42a0      	cmp	r0, r4
 800f6e0:	d001      	beq.n	800f6e6 <strncmp+0x1c>
 800f6e2:	2a00      	cmp	r2, #0
 800f6e4:	d1f5      	bne.n	800f6d2 <strncmp+0x8>
 800f6e6:	1ad0      	subs	r0, r2, r3
 800f6e8:	bd10      	pop	{r4, pc}
 800f6ea:	4610      	mov	r0, r2
 800f6ec:	e7fc      	b.n	800f6e8 <strncmp+0x1e>
	...

0800f6f0 <strtok>:
 800f6f0:	4b16      	ldr	r3, [pc, #88]	@ (800f74c <strtok+0x5c>)
 800f6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f6:	681f      	ldr	r7, [r3, #0]
 800f6f8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f6fa:	4605      	mov	r5, r0
 800f6fc:	460e      	mov	r6, r1
 800f6fe:	b9ec      	cbnz	r4, 800f73c <strtok+0x4c>
 800f700:	2050      	movs	r0, #80	@ 0x50
 800f702:	f001 fad5 	bl	8010cb0 <malloc>
 800f706:	4602      	mov	r2, r0
 800f708:	6478      	str	r0, [r7, #68]	@ 0x44
 800f70a:	b920      	cbnz	r0, 800f716 <strtok+0x26>
 800f70c:	4b10      	ldr	r3, [pc, #64]	@ (800f750 <strtok+0x60>)
 800f70e:	4811      	ldr	r0, [pc, #68]	@ (800f754 <strtok+0x64>)
 800f710:	215b      	movs	r1, #91	@ 0x5b
 800f712:	f000 f8df 	bl	800f8d4 <__assert_func>
 800f716:	e9c0 4400 	strd	r4, r4, [r0]
 800f71a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f71e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f722:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f726:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f72a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f72e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f732:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f736:	6184      	str	r4, [r0, #24]
 800f738:	7704      	strb	r4, [r0, #28]
 800f73a:	6244      	str	r4, [r0, #36]	@ 0x24
 800f73c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f73e:	4631      	mov	r1, r6
 800f740:	4628      	mov	r0, r5
 800f742:	2301      	movs	r3, #1
 800f744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f748:	f000 b806 	b.w	800f758 <__strtok_r>
 800f74c:	20000198 	.word	0x20000198
 800f750:	08013299 	.word	0x08013299
 800f754:	080132b0 	.word	0x080132b0

0800f758 <__strtok_r>:
 800f758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f75a:	4604      	mov	r4, r0
 800f75c:	b908      	cbnz	r0, 800f762 <__strtok_r+0xa>
 800f75e:	6814      	ldr	r4, [r2, #0]
 800f760:	b144      	cbz	r4, 800f774 <__strtok_r+0x1c>
 800f762:	4620      	mov	r0, r4
 800f764:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f768:	460f      	mov	r7, r1
 800f76a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f76e:	b91e      	cbnz	r6, 800f778 <__strtok_r+0x20>
 800f770:	b965      	cbnz	r5, 800f78c <__strtok_r+0x34>
 800f772:	6015      	str	r5, [r2, #0]
 800f774:	2000      	movs	r0, #0
 800f776:	e005      	b.n	800f784 <__strtok_r+0x2c>
 800f778:	42b5      	cmp	r5, r6
 800f77a:	d1f6      	bne.n	800f76a <__strtok_r+0x12>
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1f0      	bne.n	800f762 <__strtok_r+0xa>
 800f780:	6014      	str	r4, [r2, #0]
 800f782:	7003      	strb	r3, [r0, #0]
 800f784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f786:	461c      	mov	r4, r3
 800f788:	e00c      	b.n	800f7a4 <__strtok_r+0x4c>
 800f78a:	b915      	cbnz	r5, 800f792 <__strtok_r+0x3a>
 800f78c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f790:	460e      	mov	r6, r1
 800f792:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f796:	42ab      	cmp	r3, r5
 800f798:	d1f7      	bne.n	800f78a <__strtok_r+0x32>
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d0f3      	beq.n	800f786 <__strtok_r+0x2e>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f7a4:	6014      	str	r4, [r2, #0]
 800f7a6:	e7ed      	b.n	800f784 <__strtok_r+0x2c>

0800f7a8 <_localeconv_r>:
 800f7a8:	4800      	ldr	r0, [pc, #0]	@ (800f7ac <_localeconv_r+0x4>)
 800f7aa:	4770      	bx	lr
 800f7ac:	2000011c 	.word	0x2000011c

0800f7b0 <_close_r>:
 800f7b0:	b538      	push	{r3, r4, r5, lr}
 800f7b2:	4d06      	ldr	r5, [pc, #24]	@ (800f7cc <_close_r+0x1c>)
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	4604      	mov	r4, r0
 800f7b8:	4608      	mov	r0, r1
 800f7ba:	602b      	str	r3, [r5, #0]
 800f7bc:	f003 fc1e 	bl	8012ffc <_close>
 800f7c0:	1c43      	adds	r3, r0, #1
 800f7c2:	d102      	bne.n	800f7ca <_close_r+0x1a>
 800f7c4:	682b      	ldr	r3, [r5, #0]
 800f7c6:	b103      	cbz	r3, 800f7ca <_close_r+0x1a>
 800f7c8:	6023      	str	r3, [r4, #0]
 800f7ca:	bd38      	pop	{r3, r4, r5, pc}
 800f7cc:	20003928 	.word	0x20003928

0800f7d0 <_lseek_r>:
 800f7d0:	b538      	push	{r3, r4, r5, lr}
 800f7d2:	4d07      	ldr	r5, [pc, #28]	@ (800f7f0 <_lseek_r+0x20>)
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	4608      	mov	r0, r1
 800f7d8:	4611      	mov	r1, r2
 800f7da:	2200      	movs	r2, #0
 800f7dc:	602a      	str	r2, [r5, #0]
 800f7de:	461a      	mov	r2, r3
 800f7e0:	f003 fc34 	bl	801304c <_lseek>
 800f7e4:	1c43      	adds	r3, r0, #1
 800f7e6:	d102      	bne.n	800f7ee <_lseek_r+0x1e>
 800f7e8:	682b      	ldr	r3, [r5, #0]
 800f7ea:	b103      	cbz	r3, 800f7ee <_lseek_r+0x1e>
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	bd38      	pop	{r3, r4, r5, pc}
 800f7f0:	20003928 	.word	0x20003928

0800f7f4 <_read_r>:
 800f7f4:	b538      	push	{r3, r4, r5, lr}
 800f7f6:	4d07      	ldr	r5, [pc, #28]	@ (800f814 <_read_r+0x20>)
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	4608      	mov	r0, r1
 800f7fc:	4611      	mov	r1, r2
 800f7fe:	2200      	movs	r2, #0
 800f800:	602a      	str	r2, [r5, #0]
 800f802:	461a      	mov	r2, r3
 800f804:	f003 fc2a 	bl	801305c <_read>
 800f808:	1c43      	adds	r3, r0, #1
 800f80a:	d102      	bne.n	800f812 <_read_r+0x1e>
 800f80c:	682b      	ldr	r3, [r5, #0]
 800f80e:	b103      	cbz	r3, 800f812 <_read_r+0x1e>
 800f810:	6023      	str	r3, [r4, #0]
 800f812:	bd38      	pop	{r3, r4, r5, pc}
 800f814:	20003928 	.word	0x20003928

0800f818 <_write_r>:
 800f818:	b538      	push	{r3, r4, r5, lr}
 800f81a:	4d07      	ldr	r5, [pc, #28]	@ (800f838 <_write_r+0x20>)
 800f81c:	4604      	mov	r4, r0
 800f81e:	4608      	mov	r0, r1
 800f820:	4611      	mov	r1, r2
 800f822:	2200      	movs	r2, #0
 800f824:	602a      	str	r2, [r5, #0]
 800f826:	461a      	mov	r2, r3
 800f828:	f003 fc20 	bl	801306c <_write>
 800f82c:	1c43      	adds	r3, r0, #1
 800f82e:	d102      	bne.n	800f836 <_write_r+0x1e>
 800f830:	682b      	ldr	r3, [r5, #0]
 800f832:	b103      	cbz	r3, 800f836 <_write_r+0x1e>
 800f834:	6023      	str	r3, [r4, #0]
 800f836:	bd38      	pop	{r3, r4, r5, pc}
 800f838:	20003928 	.word	0x20003928

0800f83c <__errno>:
 800f83c:	4b01      	ldr	r3, [pc, #4]	@ (800f844 <__errno+0x8>)
 800f83e:	6818      	ldr	r0, [r3, #0]
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	20000198 	.word	0x20000198

0800f848 <__libc_init_array>:
 800f848:	b570      	push	{r4, r5, r6, lr}
 800f84a:	4d0d      	ldr	r5, [pc, #52]	@ (800f880 <__libc_init_array+0x38>)
 800f84c:	4c0d      	ldr	r4, [pc, #52]	@ (800f884 <__libc_init_array+0x3c>)
 800f84e:	1b64      	subs	r4, r4, r5
 800f850:	10a4      	asrs	r4, r4, #2
 800f852:	2600      	movs	r6, #0
 800f854:	42a6      	cmp	r6, r4
 800f856:	d109      	bne.n	800f86c <__libc_init_array+0x24>
 800f858:	4d0b      	ldr	r5, [pc, #44]	@ (800f888 <__libc_init_array+0x40>)
 800f85a:	4c0c      	ldr	r4, [pc, #48]	@ (800f88c <__libc_init_array+0x44>)
 800f85c:	f003 fc10 	bl	8013080 <_init>
 800f860:	1b64      	subs	r4, r4, r5
 800f862:	10a4      	asrs	r4, r4, #2
 800f864:	2600      	movs	r6, #0
 800f866:	42a6      	cmp	r6, r4
 800f868:	d105      	bne.n	800f876 <__libc_init_array+0x2e>
 800f86a:	bd70      	pop	{r4, r5, r6, pc}
 800f86c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f870:	4798      	blx	r3
 800f872:	3601      	adds	r6, #1
 800f874:	e7ee      	b.n	800f854 <__libc_init_array+0xc>
 800f876:	f855 3b04 	ldr.w	r3, [r5], #4
 800f87a:	4798      	blx	r3
 800f87c:	3601      	adds	r6, #1
 800f87e:	e7f2      	b.n	800f866 <__libc_init_array+0x1e>
 800f880:	08013a8c 	.word	0x08013a8c
 800f884:	08013a8c 	.word	0x08013a8c
 800f888:	08013a8c 	.word	0x08013a8c
 800f88c:	08013a90 	.word	0x08013a90

0800f890 <__retarget_lock_init_recursive>:
 800f890:	4770      	bx	lr

0800f892 <__retarget_lock_acquire_recursive>:
 800f892:	4770      	bx	lr

0800f894 <__retarget_lock_release_recursive>:
 800f894:	4770      	bx	lr

0800f896 <memcpy>:
 800f896:	440a      	add	r2, r1
 800f898:	4291      	cmp	r1, r2
 800f89a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f89e:	d100      	bne.n	800f8a2 <memcpy+0xc>
 800f8a0:	4770      	bx	lr
 800f8a2:	b510      	push	{r4, lr}
 800f8a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8ac:	4291      	cmp	r1, r2
 800f8ae:	d1f9      	bne.n	800f8a4 <memcpy+0xe>
 800f8b0:	bd10      	pop	{r4, pc}
 800f8b2:	0000      	movs	r0, r0
 800f8b4:	0000      	movs	r0, r0
	...

0800f8b8 <nan>:
 800f8b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f8c0 <nan+0x8>
 800f8bc:	4770      	bx	lr
 800f8be:	bf00      	nop
 800f8c0:	00000000 	.word	0x00000000
 800f8c4:	7ff80000 	.word	0x7ff80000

0800f8c8 <nanf>:
 800f8c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f8d0 <nanf+0x8>
 800f8cc:	4770      	bx	lr
 800f8ce:	bf00      	nop
 800f8d0:	7fc00000 	.word	0x7fc00000

0800f8d4 <__assert_func>:
 800f8d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8d6:	4614      	mov	r4, r2
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4b09      	ldr	r3, [pc, #36]	@ (800f900 <__assert_func+0x2c>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	4605      	mov	r5, r0
 800f8e0:	68d8      	ldr	r0, [r3, #12]
 800f8e2:	b954      	cbnz	r4, 800f8fa <__assert_func+0x26>
 800f8e4:	4b07      	ldr	r3, [pc, #28]	@ (800f904 <__assert_func+0x30>)
 800f8e6:	461c      	mov	r4, r3
 800f8e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8ec:	9100      	str	r1, [sp, #0]
 800f8ee:	462b      	mov	r3, r5
 800f8f0:	4905      	ldr	r1, [pc, #20]	@ (800f908 <__assert_func+0x34>)
 800f8f2:	f002 fb25 	bl	8011f40 <fiprintf>
 800f8f6:	f002 fbf3 	bl	80120e0 <abort>
 800f8fa:	4b04      	ldr	r3, [pc, #16]	@ (800f90c <__assert_func+0x38>)
 800f8fc:	e7f4      	b.n	800f8e8 <__assert_func+0x14>
 800f8fe:	bf00      	nop
 800f900:	20000198 	.word	0x20000198
 800f904:	0801334d 	.word	0x0801334d
 800f908:	0801331f 	.word	0x0801331f
 800f90c:	08013312 	.word	0x08013312

0800f910 <quorem>:
 800f910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f914:	6903      	ldr	r3, [r0, #16]
 800f916:	690c      	ldr	r4, [r1, #16]
 800f918:	42a3      	cmp	r3, r4
 800f91a:	4607      	mov	r7, r0
 800f91c:	db7e      	blt.n	800fa1c <quorem+0x10c>
 800f91e:	3c01      	subs	r4, #1
 800f920:	f101 0814 	add.w	r8, r1, #20
 800f924:	00a3      	lsls	r3, r4, #2
 800f926:	f100 0514 	add.w	r5, r0, #20
 800f92a:	9300      	str	r3, [sp, #0]
 800f92c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f930:	9301      	str	r3, [sp, #4]
 800f932:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f936:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f93a:	3301      	adds	r3, #1
 800f93c:	429a      	cmp	r2, r3
 800f93e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f942:	fbb2 f6f3 	udiv	r6, r2, r3
 800f946:	d32e      	bcc.n	800f9a6 <quorem+0x96>
 800f948:	f04f 0a00 	mov.w	sl, #0
 800f94c:	46c4      	mov	ip, r8
 800f94e:	46ae      	mov	lr, r5
 800f950:	46d3      	mov	fp, sl
 800f952:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f956:	b298      	uxth	r0, r3
 800f958:	fb06 a000 	mla	r0, r6, r0, sl
 800f95c:	0c02      	lsrs	r2, r0, #16
 800f95e:	0c1b      	lsrs	r3, r3, #16
 800f960:	fb06 2303 	mla	r3, r6, r3, r2
 800f964:	f8de 2000 	ldr.w	r2, [lr]
 800f968:	b280      	uxth	r0, r0
 800f96a:	b292      	uxth	r2, r2
 800f96c:	1a12      	subs	r2, r2, r0
 800f96e:	445a      	add	r2, fp
 800f970:	f8de 0000 	ldr.w	r0, [lr]
 800f974:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f978:	b29b      	uxth	r3, r3
 800f97a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f97e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f982:	b292      	uxth	r2, r2
 800f984:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f988:	45e1      	cmp	r9, ip
 800f98a:	f84e 2b04 	str.w	r2, [lr], #4
 800f98e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f992:	d2de      	bcs.n	800f952 <quorem+0x42>
 800f994:	9b00      	ldr	r3, [sp, #0]
 800f996:	58eb      	ldr	r3, [r5, r3]
 800f998:	b92b      	cbnz	r3, 800f9a6 <quorem+0x96>
 800f99a:	9b01      	ldr	r3, [sp, #4]
 800f99c:	3b04      	subs	r3, #4
 800f99e:	429d      	cmp	r5, r3
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	d32f      	bcc.n	800fa04 <quorem+0xf4>
 800f9a4:	613c      	str	r4, [r7, #16]
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	f001 fd0e 	bl	80113c8 <__mcmp>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	db25      	blt.n	800f9fc <quorem+0xec>
 800f9b0:	4629      	mov	r1, r5
 800f9b2:	2000      	movs	r0, #0
 800f9b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800f9b8:	f8d1 c000 	ldr.w	ip, [r1]
 800f9bc:	fa1f fe82 	uxth.w	lr, r2
 800f9c0:	fa1f f38c 	uxth.w	r3, ip
 800f9c4:	eba3 030e 	sub.w	r3, r3, lr
 800f9c8:	4403      	add	r3, r0
 800f9ca:	0c12      	lsrs	r2, r2, #16
 800f9cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f9d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9da:	45c1      	cmp	r9, r8
 800f9dc:	f841 3b04 	str.w	r3, [r1], #4
 800f9e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f9e4:	d2e6      	bcs.n	800f9b4 <quorem+0xa4>
 800f9e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f9ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f9ee:	b922      	cbnz	r2, 800f9fa <quorem+0xea>
 800f9f0:	3b04      	subs	r3, #4
 800f9f2:	429d      	cmp	r5, r3
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	d30b      	bcc.n	800fa10 <quorem+0x100>
 800f9f8:	613c      	str	r4, [r7, #16]
 800f9fa:	3601      	adds	r6, #1
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	b003      	add	sp, #12
 800fa00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa04:	6812      	ldr	r2, [r2, #0]
 800fa06:	3b04      	subs	r3, #4
 800fa08:	2a00      	cmp	r2, #0
 800fa0a:	d1cb      	bne.n	800f9a4 <quorem+0x94>
 800fa0c:	3c01      	subs	r4, #1
 800fa0e:	e7c6      	b.n	800f99e <quorem+0x8e>
 800fa10:	6812      	ldr	r2, [r2, #0]
 800fa12:	3b04      	subs	r3, #4
 800fa14:	2a00      	cmp	r2, #0
 800fa16:	d1ef      	bne.n	800f9f8 <quorem+0xe8>
 800fa18:	3c01      	subs	r4, #1
 800fa1a:	e7ea      	b.n	800f9f2 <quorem+0xe2>
 800fa1c:	2000      	movs	r0, #0
 800fa1e:	e7ee      	b.n	800f9fe <quorem+0xee>

0800fa20 <_dtoa_r>:
 800fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa24:	69c7      	ldr	r7, [r0, #28]
 800fa26:	b099      	sub	sp, #100	@ 0x64
 800fa28:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fa2c:	ec55 4b10 	vmov	r4, r5, d0
 800fa30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fa32:	9109      	str	r1, [sp, #36]	@ 0x24
 800fa34:	4683      	mov	fp, r0
 800fa36:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fa3a:	b97f      	cbnz	r7, 800fa5c <_dtoa_r+0x3c>
 800fa3c:	2010      	movs	r0, #16
 800fa3e:	f001 f937 	bl	8010cb0 <malloc>
 800fa42:	4602      	mov	r2, r0
 800fa44:	f8cb 001c 	str.w	r0, [fp, #28]
 800fa48:	b920      	cbnz	r0, 800fa54 <_dtoa_r+0x34>
 800fa4a:	4ba7      	ldr	r3, [pc, #668]	@ (800fce8 <_dtoa_r+0x2c8>)
 800fa4c:	21ef      	movs	r1, #239	@ 0xef
 800fa4e:	48a7      	ldr	r0, [pc, #668]	@ (800fcec <_dtoa_r+0x2cc>)
 800fa50:	f7ff ff40 	bl	800f8d4 <__assert_func>
 800fa54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fa58:	6007      	str	r7, [r0, #0]
 800fa5a:	60c7      	str	r7, [r0, #12]
 800fa5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa60:	6819      	ldr	r1, [r3, #0]
 800fa62:	b159      	cbz	r1, 800fa7c <_dtoa_r+0x5c>
 800fa64:	685a      	ldr	r2, [r3, #4]
 800fa66:	604a      	str	r2, [r1, #4]
 800fa68:	2301      	movs	r3, #1
 800fa6a:	4093      	lsls	r3, r2
 800fa6c:	608b      	str	r3, [r1, #8]
 800fa6e:	4658      	mov	r0, fp
 800fa70:	f001 fa26 	bl	8010ec0 <_Bfree>
 800fa74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	601a      	str	r2, [r3, #0]
 800fa7c:	1e2b      	subs	r3, r5, #0
 800fa7e:	bfb9      	ittee	lt
 800fa80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fa84:	9303      	strlt	r3, [sp, #12]
 800fa86:	2300      	movge	r3, #0
 800fa88:	6033      	strge	r3, [r6, #0]
 800fa8a:	9f03      	ldr	r7, [sp, #12]
 800fa8c:	4b98      	ldr	r3, [pc, #608]	@ (800fcf0 <_dtoa_r+0x2d0>)
 800fa8e:	bfbc      	itt	lt
 800fa90:	2201      	movlt	r2, #1
 800fa92:	6032      	strlt	r2, [r6, #0]
 800fa94:	43bb      	bics	r3, r7
 800fa96:	d112      	bne.n	800fabe <_dtoa_r+0x9e>
 800fa98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fa9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fa9e:	6013      	str	r3, [r2, #0]
 800faa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800faa4:	4323      	orrs	r3, r4
 800faa6:	f000 854d 	beq.w	8010544 <_dtoa_r+0xb24>
 800faaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800faac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fd04 <_dtoa_r+0x2e4>
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	f000 854f 	beq.w	8010554 <_dtoa_r+0xb34>
 800fab6:	f10a 0303 	add.w	r3, sl, #3
 800faba:	f000 bd49 	b.w	8010550 <_dtoa_r+0xb30>
 800fabe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fac2:	2200      	movs	r2, #0
 800fac4:	ec51 0b17 	vmov	r0, r1, d7
 800fac8:	2300      	movs	r3, #0
 800faca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800face:	f7f1 f81b 	bl	8000b08 <__aeabi_dcmpeq>
 800fad2:	4680      	mov	r8, r0
 800fad4:	b158      	cbz	r0, 800faee <_dtoa_r+0xce>
 800fad6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fad8:	2301      	movs	r3, #1
 800fada:	6013      	str	r3, [r2, #0]
 800fadc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fade:	b113      	cbz	r3, 800fae6 <_dtoa_r+0xc6>
 800fae0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fae2:	4b84      	ldr	r3, [pc, #528]	@ (800fcf4 <_dtoa_r+0x2d4>)
 800fae4:	6013      	str	r3, [r2, #0]
 800fae6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fd08 <_dtoa_r+0x2e8>
 800faea:	f000 bd33 	b.w	8010554 <_dtoa_r+0xb34>
 800faee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800faf2:	aa16      	add	r2, sp, #88	@ 0x58
 800faf4:	a917      	add	r1, sp, #92	@ 0x5c
 800faf6:	4658      	mov	r0, fp
 800faf8:	f001 fd86 	bl	8011608 <__d2b>
 800fafc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fb00:	4681      	mov	r9, r0
 800fb02:	2e00      	cmp	r6, #0
 800fb04:	d077      	beq.n	800fbf6 <_dtoa_r+0x1d6>
 800fb06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fb08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fb0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fb18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fb1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fb20:	4619      	mov	r1, r3
 800fb22:	2200      	movs	r2, #0
 800fb24:	4b74      	ldr	r3, [pc, #464]	@ (800fcf8 <_dtoa_r+0x2d8>)
 800fb26:	f7f0 fbcf 	bl	80002c8 <__aeabi_dsub>
 800fb2a:	a369      	add	r3, pc, #420	@ (adr r3, 800fcd0 <_dtoa_r+0x2b0>)
 800fb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb30:	f7f0 fd82 	bl	8000638 <__aeabi_dmul>
 800fb34:	a368      	add	r3, pc, #416	@ (adr r3, 800fcd8 <_dtoa_r+0x2b8>)
 800fb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3a:	f7f0 fbc7 	bl	80002cc <__adddf3>
 800fb3e:	4604      	mov	r4, r0
 800fb40:	4630      	mov	r0, r6
 800fb42:	460d      	mov	r5, r1
 800fb44:	f7f0 fd0e 	bl	8000564 <__aeabi_i2d>
 800fb48:	a365      	add	r3, pc, #404	@ (adr r3, 800fce0 <_dtoa_r+0x2c0>)
 800fb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4e:	f7f0 fd73 	bl	8000638 <__aeabi_dmul>
 800fb52:	4602      	mov	r2, r0
 800fb54:	460b      	mov	r3, r1
 800fb56:	4620      	mov	r0, r4
 800fb58:	4629      	mov	r1, r5
 800fb5a:	f7f0 fbb7 	bl	80002cc <__adddf3>
 800fb5e:	4604      	mov	r4, r0
 800fb60:	460d      	mov	r5, r1
 800fb62:	f7f1 f819 	bl	8000b98 <__aeabi_d2iz>
 800fb66:	2200      	movs	r2, #0
 800fb68:	4607      	mov	r7, r0
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	4629      	mov	r1, r5
 800fb70:	f7f0 ffd4 	bl	8000b1c <__aeabi_dcmplt>
 800fb74:	b140      	cbz	r0, 800fb88 <_dtoa_r+0x168>
 800fb76:	4638      	mov	r0, r7
 800fb78:	f7f0 fcf4 	bl	8000564 <__aeabi_i2d>
 800fb7c:	4622      	mov	r2, r4
 800fb7e:	462b      	mov	r3, r5
 800fb80:	f7f0 ffc2 	bl	8000b08 <__aeabi_dcmpeq>
 800fb84:	b900      	cbnz	r0, 800fb88 <_dtoa_r+0x168>
 800fb86:	3f01      	subs	r7, #1
 800fb88:	2f16      	cmp	r7, #22
 800fb8a:	d851      	bhi.n	800fc30 <_dtoa_r+0x210>
 800fb8c:	4b5b      	ldr	r3, [pc, #364]	@ (800fcfc <_dtoa_r+0x2dc>)
 800fb8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb9a:	f7f0 ffbf 	bl	8000b1c <__aeabi_dcmplt>
 800fb9e:	2800      	cmp	r0, #0
 800fba0:	d048      	beq.n	800fc34 <_dtoa_r+0x214>
 800fba2:	3f01      	subs	r7, #1
 800fba4:	2300      	movs	r3, #0
 800fba6:	9312      	str	r3, [sp, #72]	@ 0x48
 800fba8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fbaa:	1b9b      	subs	r3, r3, r6
 800fbac:	1e5a      	subs	r2, r3, #1
 800fbae:	bf44      	itt	mi
 800fbb0:	f1c3 0801 	rsbmi	r8, r3, #1
 800fbb4:	2300      	movmi	r3, #0
 800fbb6:	9208      	str	r2, [sp, #32]
 800fbb8:	bf54      	ite	pl
 800fbba:	f04f 0800 	movpl.w	r8, #0
 800fbbe:	9308      	strmi	r3, [sp, #32]
 800fbc0:	2f00      	cmp	r7, #0
 800fbc2:	db39      	blt.n	800fc38 <_dtoa_r+0x218>
 800fbc4:	9b08      	ldr	r3, [sp, #32]
 800fbc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fbc8:	443b      	add	r3, r7
 800fbca:	9308      	str	r3, [sp, #32]
 800fbcc:	2300      	movs	r3, #0
 800fbce:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbd2:	2b09      	cmp	r3, #9
 800fbd4:	d864      	bhi.n	800fca0 <_dtoa_r+0x280>
 800fbd6:	2b05      	cmp	r3, #5
 800fbd8:	bfc4      	itt	gt
 800fbda:	3b04      	subgt	r3, #4
 800fbdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800fbde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbe0:	f1a3 0302 	sub.w	r3, r3, #2
 800fbe4:	bfcc      	ite	gt
 800fbe6:	2400      	movgt	r4, #0
 800fbe8:	2401      	movle	r4, #1
 800fbea:	2b03      	cmp	r3, #3
 800fbec:	d863      	bhi.n	800fcb6 <_dtoa_r+0x296>
 800fbee:	e8df f003 	tbb	[pc, r3]
 800fbf2:	372a      	.short	0x372a
 800fbf4:	5535      	.short	0x5535
 800fbf6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fbfa:	441e      	add	r6, r3
 800fbfc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fc00:	2b20      	cmp	r3, #32
 800fc02:	bfc1      	itttt	gt
 800fc04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fc08:	409f      	lslgt	r7, r3
 800fc0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fc0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fc12:	bfd6      	itet	le
 800fc14:	f1c3 0320 	rsble	r3, r3, #32
 800fc18:	ea47 0003 	orrgt.w	r0, r7, r3
 800fc1c:	fa04 f003 	lslle.w	r0, r4, r3
 800fc20:	f7f0 fc90 	bl	8000544 <__aeabi_ui2d>
 800fc24:	2201      	movs	r2, #1
 800fc26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fc2a:	3e01      	subs	r6, #1
 800fc2c:	9214      	str	r2, [sp, #80]	@ 0x50
 800fc2e:	e777      	b.n	800fb20 <_dtoa_r+0x100>
 800fc30:	2301      	movs	r3, #1
 800fc32:	e7b8      	b.n	800fba6 <_dtoa_r+0x186>
 800fc34:	9012      	str	r0, [sp, #72]	@ 0x48
 800fc36:	e7b7      	b.n	800fba8 <_dtoa_r+0x188>
 800fc38:	427b      	negs	r3, r7
 800fc3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	eba8 0807 	sub.w	r8, r8, r7
 800fc42:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fc44:	e7c4      	b.n	800fbd0 <_dtoa_r+0x1b0>
 800fc46:	2300      	movs	r3, #0
 800fc48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	dc35      	bgt.n	800fcbc <_dtoa_r+0x29c>
 800fc50:	2301      	movs	r3, #1
 800fc52:	9300      	str	r3, [sp, #0]
 800fc54:	9307      	str	r3, [sp, #28]
 800fc56:	461a      	mov	r2, r3
 800fc58:	920e      	str	r2, [sp, #56]	@ 0x38
 800fc5a:	e00b      	b.n	800fc74 <_dtoa_r+0x254>
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	e7f3      	b.n	800fc48 <_dtoa_r+0x228>
 800fc60:	2300      	movs	r3, #0
 800fc62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fc64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc66:	18fb      	adds	r3, r7, r3
 800fc68:	9300      	str	r3, [sp, #0]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	9307      	str	r3, [sp, #28]
 800fc70:	bfb8      	it	lt
 800fc72:	2301      	movlt	r3, #1
 800fc74:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fc78:	2100      	movs	r1, #0
 800fc7a:	2204      	movs	r2, #4
 800fc7c:	f102 0514 	add.w	r5, r2, #20
 800fc80:	429d      	cmp	r5, r3
 800fc82:	d91f      	bls.n	800fcc4 <_dtoa_r+0x2a4>
 800fc84:	6041      	str	r1, [r0, #4]
 800fc86:	4658      	mov	r0, fp
 800fc88:	f001 f8da 	bl	8010e40 <_Balloc>
 800fc8c:	4682      	mov	sl, r0
 800fc8e:	2800      	cmp	r0, #0
 800fc90:	d13c      	bne.n	800fd0c <_dtoa_r+0x2ec>
 800fc92:	4b1b      	ldr	r3, [pc, #108]	@ (800fd00 <_dtoa_r+0x2e0>)
 800fc94:	4602      	mov	r2, r0
 800fc96:	f240 11af 	movw	r1, #431	@ 0x1af
 800fc9a:	e6d8      	b.n	800fa4e <_dtoa_r+0x2e>
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	e7e0      	b.n	800fc62 <_dtoa_r+0x242>
 800fca0:	2401      	movs	r4, #1
 800fca2:	2300      	movs	r3, #0
 800fca4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fca6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fca8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcac:	9300      	str	r3, [sp, #0]
 800fcae:	9307      	str	r3, [sp, #28]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	2312      	movs	r3, #18
 800fcb4:	e7d0      	b.n	800fc58 <_dtoa_r+0x238>
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fcba:	e7f5      	b.n	800fca8 <_dtoa_r+0x288>
 800fcbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	9307      	str	r3, [sp, #28]
 800fcc2:	e7d7      	b.n	800fc74 <_dtoa_r+0x254>
 800fcc4:	3101      	adds	r1, #1
 800fcc6:	0052      	lsls	r2, r2, #1
 800fcc8:	e7d8      	b.n	800fc7c <_dtoa_r+0x25c>
 800fcca:	bf00      	nop
 800fccc:	f3af 8000 	nop.w
 800fcd0:	636f4361 	.word	0x636f4361
 800fcd4:	3fd287a7 	.word	0x3fd287a7
 800fcd8:	8b60c8b3 	.word	0x8b60c8b3
 800fcdc:	3fc68a28 	.word	0x3fc68a28
 800fce0:	509f79fb 	.word	0x509f79fb
 800fce4:	3fd34413 	.word	0x3fd34413
 800fce8:	08013299 	.word	0x08013299
 800fcec:	0801335b 	.word	0x0801335b
 800fcf0:	7ff00000 	.word	0x7ff00000
 800fcf4:	08013271 	.word	0x08013271
 800fcf8:	3ff80000 	.word	0x3ff80000
 800fcfc:	080134b8 	.word	0x080134b8
 800fd00:	080133b3 	.word	0x080133b3
 800fd04:	08013357 	.word	0x08013357
 800fd08:	08013270 	.word	0x08013270
 800fd0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fd10:	6018      	str	r0, [r3, #0]
 800fd12:	9b07      	ldr	r3, [sp, #28]
 800fd14:	2b0e      	cmp	r3, #14
 800fd16:	f200 80a4 	bhi.w	800fe62 <_dtoa_r+0x442>
 800fd1a:	2c00      	cmp	r4, #0
 800fd1c:	f000 80a1 	beq.w	800fe62 <_dtoa_r+0x442>
 800fd20:	2f00      	cmp	r7, #0
 800fd22:	dd33      	ble.n	800fd8c <_dtoa_r+0x36c>
 800fd24:	4bad      	ldr	r3, [pc, #692]	@ (800ffdc <_dtoa_r+0x5bc>)
 800fd26:	f007 020f 	and.w	r2, r7, #15
 800fd2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd2e:	ed93 7b00 	vldr	d7, [r3]
 800fd32:	05f8      	lsls	r0, r7, #23
 800fd34:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fd38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fd3c:	d516      	bpl.n	800fd6c <_dtoa_r+0x34c>
 800fd3e:	4ba8      	ldr	r3, [pc, #672]	@ (800ffe0 <_dtoa_r+0x5c0>)
 800fd40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fd44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd48:	f7f0 fda0 	bl	800088c <__aeabi_ddiv>
 800fd4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd50:	f004 040f 	and.w	r4, r4, #15
 800fd54:	2603      	movs	r6, #3
 800fd56:	4da2      	ldr	r5, [pc, #648]	@ (800ffe0 <_dtoa_r+0x5c0>)
 800fd58:	b954      	cbnz	r4, 800fd70 <_dtoa_r+0x350>
 800fd5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd62:	f7f0 fd93 	bl	800088c <__aeabi_ddiv>
 800fd66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd6a:	e028      	b.n	800fdbe <_dtoa_r+0x39e>
 800fd6c:	2602      	movs	r6, #2
 800fd6e:	e7f2      	b.n	800fd56 <_dtoa_r+0x336>
 800fd70:	07e1      	lsls	r1, r4, #31
 800fd72:	d508      	bpl.n	800fd86 <_dtoa_r+0x366>
 800fd74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fd78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd7c:	f7f0 fc5c 	bl	8000638 <__aeabi_dmul>
 800fd80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fd84:	3601      	adds	r6, #1
 800fd86:	1064      	asrs	r4, r4, #1
 800fd88:	3508      	adds	r5, #8
 800fd8a:	e7e5      	b.n	800fd58 <_dtoa_r+0x338>
 800fd8c:	f000 80d2 	beq.w	800ff34 <_dtoa_r+0x514>
 800fd90:	427c      	negs	r4, r7
 800fd92:	4b92      	ldr	r3, [pc, #584]	@ (800ffdc <_dtoa_r+0x5bc>)
 800fd94:	4d92      	ldr	r5, [pc, #584]	@ (800ffe0 <_dtoa_r+0x5c0>)
 800fd96:	f004 020f 	and.w	r2, r4, #15
 800fd9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fda6:	f7f0 fc47 	bl	8000638 <__aeabi_dmul>
 800fdaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdae:	1124      	asrs	r4, r4, #4
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	2602      	movs	r6, #2
 800fdb4:	2c00      	cmp	r4, #0
 800fdb6:	f040 80b2 	bne.w	800ff1e <_dtoa_r+0x4fe>
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d1d3      	bne.n	800fd66 <_dtoa_r+0x346>
 800fdbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fdc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	f000 80b7 	beq.w	800ff38 <_dtoa_r+0x518>
 800fdca:	4b86      	ldr	r3, [pc, #536]	@ (800ffe4 <_dtoa_r+0x5c4>)
 800fdcc:	2200      	movs	r2, #0
 800fdce:	4620      	mov	r0, r4
 800fdd0:	4629      	mov	r1, r5
 800fdd2:	f7f0 fea3 	bl	8000b1c <__aeabi_dcmplt>
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	f000 80ae 	beq.w	800ff38 <_dtoa_r+0x518>
 800fddc:	9b07      	ldr	r3, [sp, #28]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	f000 80aa 	beq.w	800ff38 <_dtoa_r+0x518>
 800fde4:	9b00      	ldr	r3, [sp, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	dd37      	ble.n	800fe5a <_dtoa_r+0x43a>
 800fdea:	1e7b      	subs	r3, r7, #1
 800fdec:	9304      	str	r3, [sp, #16]
 800fdee:	4620      	mov	r0, r4
 800fdf0:	4b7d      	ldr	r3, [pc, #500]	@ (800ffe8 <_dtoa_r+0x5c8>)
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	4629      	mov	r1, r5
 800fdf6:	f7f0 fc1f 	bl	8000638 <__aeabi_dmul>
 800fdfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdfe:	9c00      	ldr	r4, [sp, #0]
 800fe00:	3601      	adds	r6, #1
 800fe02:	4630      	mov	r0, r6
 800fe04:	f7f0 fbae 	bl	8000564 <__aeabi_i2d>
 800fe08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe0c:	f7f0 fc14 	bl	8000638 <__aeabi_dmul>
 800fe10:	4b76      	ldr	r3, [pc, #472]	@ (800ffec <_dtoa_r+0x5cc>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	f7f0 fa5a 	bl	80002cc <__adddf3>
 800fe18:	4605      	mov	r5, r0
 800fe1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fe1e:	2c00      	cmp	r4, #0
 800fe20:	f040 808d 	bne.w	800ff3e <_dtoa_r+0x51e>
 800fe24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe28:	4b71      	ldr	r3, [pc, #452]	@ (800fff0 <_dtoa_r+0x5d0>)
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	f7f0 fa4c 	bl	80002c8 <__aeabi_dsub>
 800fe30:	4602      	mov	r2, r0
 800fe32:	460b      	mov	r3, r1
 800fe34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fe38:	462a      	mov	r2, r5
 800fe3a:	4633      	mov	r3, r6
 800fe3c:	f7f0 fe8c 	bl	8000b58 <__aeabi_dcmpgt>
 800fe40:	2800      	cmp	r0, #0
 800fe42:	f040 828b 	bne.w	801035c <_dtoa_r+0x93c>
 800fe46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe4a:	462a      	mov	r2, r5
 800fe4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fe50:	f7f0 fe64 	bl	8000b1c <__aeabi_dcmplt>
 800fe54:	2800      	cmp	r0, #0
 800fe56:	f040 8128 	bne.w	80100aa <_dtoa_r+0x68a>
 800fe5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fe5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fe62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f2c0 815a 	blt.w	801011e <_dtoa_r+0x6fe>
 800fe6a:	2f0e      	cmp	r7, #14
 800fe6c:	f300 8157 	bgt.w	801011e <_dtoa_r+0x6fe>
 800fe70:	4b5a      	ldr	r3, [pc, #360]	@ (800ffdc <_dtoa_r+0x5bc>)
 800fe72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe76:	ed93 7b00 	vldr	d7, [r3]
 800fe7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	ed8d 7b00 	vstr	d7, [sp]
 800fe82:	da03      	bge.n	800fe8c <_dtoa_r+0x46c>
 800fe84:	9b07      	ldr	r3, [sp, #28]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	f340 8101 	ble.w	801008e <_dtoa_r+0x66e>
 800fe8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fe90:	4656      	mov	r6, sl
 800fe92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe96:	4620      	mov	r0, r4
 800fe98:	4629      	mov	r1, r5
 800fe9a:	f7f0 fcf7 	bl	800088c <__aeabi_ddiv>
 800fe9e:	f7f0 fe7b 	bl	8000b98 <__aeabi_d2iz>
 800fea2:	4680      	mov	r8, r0
 800fea4:	f7f0 fb5e 	bl	8000564 <__aeabi_i2d>
 800fea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800feac:	f7f0 fbc4 	bl	8000638 <__aeabi_dmul>
 800feb0:	4602      	mov	r2, r0
 800feb2:	460b      	mov	r3, r1
 800feb4:	4620      	mov	r0, r4
 800feb6:	4629      	mov	r1, r5
 800feb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800febc:	f7f0 fa04 	bl	80002c8 <__aeabi_dsub>
 800fec0:	f806 4b01 	strb.w	r4, [r6], #1
 800fec4:	9d07      	ldr	r5, [sp, #28]
 800fec6:	eba6 040a 	sub.w	r4, r6, sl
 800feca:	42a5      	cmp	r5, r4
 800fecc:	4602      	mov	r2, r0
 800fece:	460b      	mov	r3, r1
 800fed0:	f040 8117 	bne.w	8010102 <_dtoa_r+0x6e2>
 800fed4:	f7f0 f9fa 	bl	80002cc <__adddf3>
 800fed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fedc:	4604      	mov	r4, r0
 800fede:	460d      	mov	r5, r1
 800fee0:	f7f0 fe3a 	bl	8000b58 <__aeabi_dcmpgt>
 800fee4:	2800      	cmp	r0, #0
 800fee6:	f040 80f9 	bne.w	80100dc <_dtoa_r+0x6bc>
 800feea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800feee:	4620      	mov	r0, r4
 800fef0:	4629      	mov	r1, r5
 800fef2:	f7f0 fe09 	bl	8000b08 <__aeabi_dcmpeq>
 800fef6:	b118      	cbz	r0, 800ff00 <_dtoa_r+0x4e0>
 800fef8:	f018 0f01 	tst.w	r8, #1
 800fefc:	f040 80ee 	bne.w	80100dc <_dtoa_r+0x6bc>
 800ff00:	4649      	mov	r1, r9
 800ff02:	4658      	mov	r0, fp
 800ff04:	f000 ffdc 	bl	8010ec0 <_Bfree>
 800ff08:	2300      	movs	r3, #0
 800ff0a:	7033      	strb	r3, [r6, #0]
 800ff0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ff0e:	3701      	adds	r7, #1
 800ff10:	601f      	str	r7, [r3, #0]
 800ff12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f000 831d 	beq.w	8010554 <_dtoa_r+0xb34>
 800ff1a:	601e      	str	r6, [r3, #0]
 800ff1c:	e31a      	b.n	8010554 <_dtoa_r+0xb34>
 800ff1e:	07e2      	lsls	r2, r4, #31
 800ff20:	d505      	bpl.n	800ff2e <_dtoa_r+0x50e>
 800ff22:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ff26:	f7f0 fb87 	bl	8000638 <__aeabi_dmul>
 800ff2a:	3601      	adds	r6, #1
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	1064      	asrs	r4, r4, #1
 800ff30:	3508      	adds	r5, #8
 800ff32:	e73f      	b.n	800fdb4 <_dtoa_r+0x394>
 800ff34:	2602      	movs	r6, #2
 800ff36:	e742      	b.n	800fdbe <_dtoa_r+0x39e>
 800ff38:	9c07      	ldr	r4, [sp, #28]
 800ff3a:	9704      	str	r7, [sp, #16]
 800ff3c:	e761      	b.n	800fe02 <_dtoa_r+0x3e2>
 800ff3e:	4b27      	ldr	r3, [pc, #156]	@ (800ffdc <_dtoa_r+0x5bc>)
 800ff40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ff42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff4a:	4454      	add	r4, sl
 800ff4c:	2900      	cmp	r1, #0
 800ff4e:	d053      	beq.n	800fff8 <_dtoa_r+0x5d8>
 800ff50:	4928      	ldr	r1, [pc, #160]	@ (800fff4 <_dtoa_r+0x5d4>)
 800ff52:	2000      	movs	r0, #0
 800ff54:	f7f0 fc9a 	bl	800088c <__aeabi_ddiv>
 800ff58:	4633      	mov	r3, r6
 800ff5a:	462a      	mov	r2, r5
 800ff5c:	f7f0 f9b4 	bl	80002c8 <__aeabi_dsub>
 800ff60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ff64:	4656      	mov	r6, sl
 800ff66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff6a:	f7f0 fe15 	bl	8000b98 <__aeabi_d2iz>
 800ff6e:	4605      	mov	r5, r0
 800ff70:	f7f0 faf8 	bl	8000564 <__aeabi_i2d>
 800ff74:	4602      	mov	r2, r0
 800ff76:	460b      	mov	r3, r1
 800ff78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff7c:	f7f0 f9a4 	bl	80002c8 <__aeabi_dsub>
 800ff80:	3530      	adds	r5, #48	@ 0x30
 800ff82:	4602      	mov	r2, r0
 800ff84:	460b      	mov	r3, r1
 800ff86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ff8a:	f806 5b01 	strb.w	r5, [r6], #1
 800ff8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ff92:	f7f0 fdc3 	bl	8000b1c <__aeabi_dcmplt>
 800ff96:	2800      	cmp	r0, #0
 800ff98:	d171      	bne.n	801007e <_dtoa_r+0x65e>
 800ff9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff9e:	4911      	ldr	r1, [pc, #68]	@ (800ffe4 <_dtoa_r+0x5c4>)
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	f7f0 f991 	bl	80002c8 <__aeabi_dsub>
 800ffa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ffaa:	f7f0 fdb7 	bl	8000b1c <__aeabi_dcmplt>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	f040 8095 	bne.w	80100de <_dtoa_r+0x6be>
 800ffb4:	42a6      	cmp	r6, r4
 800ffb6:	f43f af50 	beq.w	800fe5a <_dtoa_r+0x43a>
 800ffba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ffbe:	4b0a      	ldr	r3, [pc, #40]	@ (800ffe8 <_dtoa_r+0x5c8>)
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	f7f0 fb39 	bl	8000638 <__aeabi_dmul>
 800ffc6:	4b08      	ldr	r3, [pc, #32]	@ (800ffe8 <_dtoa_r+0x5c8>)
 800ffc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ffcc:	2200      	movs	r2, #0
 800ffce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffd2:	f7f0 fb31 	bl	8000638 <__aeabi_dmul>
 800ffd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffda:	e7c4      	b.n	800ff66 <_dtoa_r+0x546>
 800ffdc:	080134b8 	.word	0x080134b8
 800ffe0:	08013490 	.word	0x08013490
 800ffe4:	3ff00000 	.word	0x3ff00000
 800ffe8:	40240000 	.word	0x40240000
 800ffec:	401c0000 	.word	0x401c0000
 800fff0:	40140000 	.word	0x40140000
 800fff4:	3fe00000 	.word	0x3fe00000
 800fff8:	4631      	mov	r1, r6
 800fffa:	4628      	mov	r0, r5
 800fffc:	f7f0 fb1c 	bl	8000638 <__aeabi_dmul>
 8010000:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010004:	9415      	str	r4, [sp, #84]	@ 0x54
 8010006:	4656      	mov	r6, sl
 8010008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801000c:	f7f0 fdc4 	bl	8000b98 <__aeabi_d2iz>
 8010010:	4605      	mov	r5, r0
 8010012:	f7f0 faa7 	bl	8000564 <__aeabi_i2d>
 8010016:	4602      	mov	r2, r0
 8010018:	460b      	mov	r3, r1
 801001a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801001e:	f7f0 f953 	bl	80002c8 <__aeabi_dsub>
 8010022:	3530      	adds	r5, #48	@ 0x30
 8010024:	f806 5b01 	strb.w	r5, [r6], #1
 8010028:	4602      	mov	r2, r0
 801002a:	460b      	mov	r3, r1
 801002c:	42a6      	cmp	r6, r4
 801002e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010032:	f04f 0200 	mov.w	r2, #0
 8010036:	d124      	bne.n	8010082 <_dtoa_r+0x662>
 8010038:	4bac      	ldr	r3, [pc, #688]	@ (80102ec <_dtoa_r+0x8cc>)
 801003a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801003e:	f7f0 f945 	bl	80002cc <__adddf3>
 8010042:	4602      	mov	r2, r0
 8010044:	460b      	mov	r3, r1
 8010046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801004a:	f7f0 fd85 	bl	8000b58 <__aeabi_dcmpgt>
 801004e:	2800      	cmp	r0, #0
 8010050:	d145      	bne.n	80100de <_dtoa_r+0x6be>
 8010052:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010056:	49a5      	ldr	r1, [pc, #660]	@ (80102ec <_dtoa_r+0x8cc>)
 8010058:	2000      	movs	r0, #0
 801005a:	f7f0 f935 	bl	80002c8 <__aeabi_dsub>
 801005e:	4602      	mov	r2, r0
 8010060:	460b      	mov	r3, r1
 8010062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010066:	f7f0 fd59 	bl	8000b1c <__aeabi_dcmplt>
 801006a:	2800      	cmp	r0, #0
 801006c:	f43f aef5 	beq.w	800fe5a <_dtoa_r+0x43a>
 8010070:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010072:	1e73      	subs	r3, r6, #1
 8010074:	9315      	str	r3, [sp, #84]	@ 0x54
 8010076:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801007a:	2b30      	cmp	r3, #48	@ 0x30
 801007c:	d0f8      	beq.n	8010070 <_dtoa_r+0x650>
 801007e:	9f04      	ldr	r7, [sp, #16]
 8010080:	e73e      	b.n	800ff00 <_dtoa_r+0x4e0>
 8010082:	4b9b      	ldr	r3, [pc, #620]	@ (80102f0 <_dtoa_r+0x8d0>)
 8010084:	f7f0 fad8 	bl	8000638 <__aeabi_dmul>
 8010088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801008c:	e7bc      	b.n	8010008 <_dtoa_r+0x5e8>
 801008e:	d10c      	bne.n	80100aa <_dtoa_r+0x68a>
 8010090:	4b98      	ldr	r3, [pc, #608]	@ (80102f4 <_dtoa_r+0x8d4>)
 8010092:	2200      	movs	r2, #0
 8010094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010098:	f7f0 face 	bl	8000638 <__aeabi_dmul>
 801009c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100a0:	f7f0 fd50 	bl	8000b44 <__aeabi_dcmpge>
 80100a4:	2800      	cmp	r0, #0
 80100a6:	f000 8157 	beq.w	8010358 <_dtoa_r+0x938>
 80100aa:	2400      	movs	r4, #0
 80100ac:	4625      	mov	r5, r4
 80100ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100b0:	43db      	mvns	r3, r3
 80100b2:	9304      	str	r3, [sp, #16]
 80100b4:	4656      	mov	r6, sl
 80100b6:	2700      	movs	r7, #0
 80100b8:	4621      	mov	r1, r4
 80100ba:	4658      	mov	r0, fp
 80100bc:	f000 ff00 	bl	8010ec0 <_Bfree>
 80100c0:	2d00      	cmp	r5, #0
 80100c2:	d0dc      	beq.n	801007e <_dtoa_r+0x65e>
 80100c4:	b12f      	cbz	r7, 80100d2 <_dtoa_r+0x6b2>
 80100c6:	42af      	cmp	r7, r5
 80100c8:	d003      	beq.n	80100d2 <_dtoa_r+0x6b2>
 80100ca:	4639      	mov	r1, r7
 80100cc:	4658      	mov	r0, fp
 80100ce:	f000 fef7 	bl	8010ec0 <_Bfree>
 80100d2:	4629      	mov	r1, r5
 80100d4:	4658      	mov	r0, fp
 80100d6:	f000 fef3 	bl	8010ec0 <_Bfree>
 80100da:	e7d0      	b.n	801007e <_dtoa_r+0x65e>
 80100dc:	9704      	str	r7, [sp, #16]
 80100de:	4633      	mov	r3, r6
 80100e0:	461e      	mov	r6, r3
 80100e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100e6:	2a39      	cmp	r2, #57	@ 0x39
 80100e8:	d107      	bne.n	80100fa <_dtoa_r+0x6da>
 80100ea:	459a      	cmp	sl, r3
 80100ec:	d1f8      	bne.n	80100e0 <_dtoa_r+0x6c0>
 80100ee:	9a04      	ldr	r2, [sp, #16]
 80100f0:	3201      	adds	r2, #1
 80100f2:	9204      	str	r2, [sp, #16]
 80100f4:	2230      	movs	r2, #48	@ 0x30
 80100f6:	f88a 2000 	strb.w	r2, [sl]
 80100fa:	781a      	ldrb	r2, [r3, #0]
 80100fc:	3201      	adds	r2, #1
 80100fe:	701a      	strb	r2, [r3, #0]
 8010100:	e7bd      	b.n	801007e <_dtoa_r+0x65e>
 8010102:	4b7b      	ldr	r3, [pc, #492]	@ (80102f0 <_dtoa_r+0x8d0>)
 8010104:	2200      	movs	r2, #0
 8010106:	f7f0 fa97 	bl	8000638 <__aeabi_dmul>
 801010a:	2200      	movs	r2, #0
 801010c:	2300      	movs	r3, #0
 801010e:	4604      	mov	r4, r0
 8010110:	460d      	mov	r5, r1
 8010112:	f7f0 fcf9 	bl	8000b08 <__aeabi_dcmpeq>
 8010116:	2800      	cmp	r0, #0
 8010118:	f43f aebb 	beq.w	800fe92 <_dtoa_r+0x472>
 801011c:	e6f0      	b.n	800ff00 <_dtoa_r+0x4e0>
 801011e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010120:	2a00      	cmp	r2, #0
 8010122:	f000 80db 	beq.w	80102dc <_dtoa_r+0x8bc>
 8010126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010128:	2a01      	cmp	r2, #1
 801012a:	f300 80bf 	bgt.w	80102ac <_dtoa_r+0x88c>
 801012e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010130:	2a00      	cmp	r2, #0
 8010132:	f000 80b7 	beq.w	80102a4 <_dtoa_r+0x884>
 8010136:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801013a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801013c:	4646      	mov	r6, r8
 801013e:	9a08      	ldr	r2, [sp, #32]
 8010140:	2101      	movs	r1, #1
 8010142:	441a      	add	r2, r3
 8010144:	4658      	mov	r0, fp
 8010146:	4498      	add	r8, r3
 8010148:	9208      	str	r2, [sp, #32]
 801014a:	f000 ffb7 	bl	80110bc <__i2b>
 801014e:	4605      	mov	r5, r0
 8010150:	b15e      	cbz	r6, 801016a <_dtoa_r+0x74a>
 8010152:	9b08      	ldr	r3, [sp, #32]
 8010154:	2b00      	cmp	r3, #0
 8010156:	dd08      	ble.n	801016a <_dtoa_r+0x74a>
 8010158:	42b3      	cmp	r3, r6
 801015a:	9a08      	ldr	r2, [sp, #32]
 801015c:	bfa8      	it	ge
 801015e:	4633      	movge	r3, r6
 8010160:	eba8 0803 	sub.w	r8, r8, r3
 8010164:	1af6      	subs	r6, r6, r3
 8010166:	1ad3      	subs	r3, r2, r3
 8010168:	9308      	str	r3, [sp, #32]
 801016a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801016c:	b1f3      	cbz	r3, 80101ac <_dtoa_r+0x78c>
 801016e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010170:	2b00      	cmp	r3, #0
 8010172:	f000 80b7 	beq.w	80102e4 <_dtoa_r+0x8c4>
 8010176:	b18c      	cbz	r4, 801019c <_dtoa_r+0x77c>
 8010178:	4629      	mov	r1, r5
 801017a:	4622      	mov	r2, r4
 801017c:	4658      	mov	r0, fp
 801017e:	f001 f85d 	bl	801123c <__pow5mult>
 8010182:	464a      	mov	r2, r9
 8010184:	4601      	mov	r1, r0
 8010186:	4605      	mov	r5, r0
 8010188:	4658      	mov	r0, fp
 801018a:	f000 ffad 	bl	80110e8 <__multiply>
 801018e:	4649      	mov	r1, r9
 8010190:	9004      	str	r0, [sp, #16]
 8010192:	4658      	mov	r0, fp
 8010194:	f000 fe94 	bl	8010ec0 <_Bfree>
 8010198:	9b04      	ldr	r3, [sp, #16]
 801019a:	4699      	mov	r9, r3
 801019c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801019e:	1b1a      	subs	r2, r3, r4
 80101a0:	d004      	beq.n	80101ac <_dtoa_r+0x78c>
 80101a2:	4649      	mov	r1, r9
 80101a4:	4658      	mov	r0, fp
 80101a6:	f001 f849 	bl	801123c <__pow5mult>
 80101aa:	4681      	mov	r9, r0
 80101ac:	2101      	movs	r1, #1
 80101ae:	4658      	mov	r0, fp
 80101b0:	f000 ff84 	bl	80110bc <__i2b>
 80101b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80101b6:	4604      	mov	r4, r0
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f000 81cf 	beq.w	801055c <_dtoa_r+0xb3c>
 80101be:	461a      	mov	r2, r3
 80101c0:	4601      	mov	r1, r0
 80101c2:	4658      	mov	r0, fp
 80101c4:	f001 f83a 	bl	801123c <__pow5mult>
 80101c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	4604      	mov	r4, r0
 80101ce:	f300 8095 	bgt.w	80102fc <_dtoa_r+0x8dc>
 80101d2:	9b02      	ldr	r3, [sp, #8]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	f040 8087 	bne.w	80102e8 <_dtoa_r+0x8c8>
 80101da:	9b03      	ldr	r3, [sp, #12]
 80101dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	f040 8089 	bne.w	80102f8 <_dtoa_r+0x8d8>
 80101e6:	9b03      	ldr	r3, [sp, #12]
 80101e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80101ec:	0d1b      	lsrs	r3, r3, #20
 80101ee:	051b      	lsls	r3, r3, #20
 80101f0:	b12b      	cbz	r3, 80101fe <_dtoa_r+0x7de>
 80101f2:	9b08      	ldr	r3, [sp, #32]
 80101f4:	3301      	adds	r3, #1
 80101f6:	9308      	str	r3, [sp, #32]
 80101f8:	f108 0801 	add.w	r8, r8, #1
 80101fc:	2301      	movs	r3, #1
 80101fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010202:	2b00      	cmp	r3, #0
 8010204:	f000 81b0 	beq.w	8010568 <_dtoa_r+0xb48>
 8010208:	6923      	ldr	r3, [r4, #16]
 801020a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801020e:	6918      	ldr	r0, [r3, #16]
 8010210:	f000 ff08 	bl	8011024 <__hi0bits>
 8010214:	f1c0 0020 	rsb	r0, r0, #32
 8010218:	9b08      	ldr	r3, [sp, #32]
 801021a:	4418      	add	r0, r3
 801021c:	f010 001f 	ands.w	r0, r0, #31
 8010220:	d077      	beq.n	8010312 <_dtoa_r+0x8f2>
 8010222:	f1c0 0320 	rsb	r3, r0, #32
 8010226:	2b04      	cmp	r3, #4
 8010228:	dd6b      	ble.n	8010302 <_dtoa_r+0x8e2>
 801022a:	9b08      	ldr	r3, [sp, #32]
 801022c:	f1c0 001c 	rsb	r0, r0, #28
 8010230:	4403      	add	r3, r0
 8010232:	4480      	add	r8, r0
 8010234:	4406      	add	r6, r0
 8010236:	9308      	str	r3, [sp, #32]
 8010238:	f1b8 0f00 	cmp.w	r8, #0
 801023c:	dd05      	ble.n	801024a <_dtoa_r+0x82a>
 801023e:	4649      	mov	r1, r9
 8010240:	4642      	mov	r2, r8
 8010242:	4658      	mov	r0, fp
 8010244:	f001 f854 	bl	80112f0 <__lshift>
 8010248:	4681      	mov	r9, r0
 801024a:	9b08      	ldr	r3, [sp, #32]
 801024c:	2b00      	cmp	r3, #0
 801024e:	dd05      	ble.n	801025c <_dtoa_r+0x83c>
 8010250:	4621      	mov	r1, r4
 8010252:	461a      	mov	r2, r3
 8010254:	4658      	mov	r0, fp
 8010256:	f001 f84b 	bl	80112f0 <__lshift>
 801025a:	4604      	mov	r4, r0
 801025c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801025e:	2b00      	cmp	r3, #0
 8010260:	d059      	beq.n	8010316 <_dtoa_r+0x8f6>
 8010262:	4621      	mov	r1, r4
 8010264:	4648      	mov	r0, r9
 8010266:	f001 f8af 	bl	80113c8 <__mcmp>
 801026a:	2800      	cmp	r0, #0
 801026c:	da53      	bge.n	8010316 <_dtoa_r+0x8f6>
 801026e:	1e7b      	subs	r3, r7, #1
 8010270:	9304      	str	r3, [sp, #16]
 8010272:	4649      	mov	r1, r9
 8010274:	2300      	movs	r3, #0
 8010276:	220a      	movs	r2, #10
 8010278:	4658      	mov	r0, fp
 801027a:	f000 fe43 	bl	8010f04 <__multadd>
 801027e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010280:	4681      	mov	r9, r0
 8010282:	2b00      	cmp	r3, #0
 8010284:	f000 8172 	beq.w	801056c <_dtoa_r+0xb4c>
 8010288:	2300      	movs	r3, #0
 801028a:	4629      	mov	r1, r5
 801028c:	220a      	movs	r2, #10
 801028e:	4658      	mov	r0, fp
 8010290:	f000 fe38 	bl	8010f04 <__multadd>
 8010294:	9b00      	ldr	r3, [sp, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	4605      	mov	r5, r0
 801029a:	dc67      	bgt.n	801036c <_dtoa_r+0x94c>
 801029c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801029e:	2b02      	cmp	r3, #2
 80102a0:	dc41      	bgt.n	8010326 <_dtoa_r+0x906>
 80102a2:	e063      	b.n	801036c <_dtoa_r+0x94c>
 80102a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80102a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80102aa:	e746      	b.n	801013a <_dtoa_r+0x71a>
 80102ac:	9b07      	ldr	r3, [sp, #28]
 80102ae:	1e5c      	subs	r4, r3, #1
 80102b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102b2:	42a3      	cmp	r3, r4
 80102b4:	bfbf      	itttt	lt
 80102b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80102b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80102ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80102bc:	1ae3      	sublt	r3, r4, r3
 80102be:	bfb4      	ite	lt
 80102c0:	18d2      	addlt	r2, r2, r3
 80102c2:	1b1c      	subge	r4, r3, r4
 80102c4:	9b07      	ldr	r3, [sp, #28]
 80102c6:	bfbc      	itt	lt
 80102c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80102ca:	2400      	movlt	r4, #0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	bfb5      	itete	lt
 80102d0:	eba8 0603 	sublt.w	r6, r8, r3
 80102d4:	9b07      	ldrge	r3, [sp, #28]
 80102d6:	2300      	movlt	r3, #0
 80102d8:	4646      	movge	r6, r8
 80102da:	e730      	b.n	801013e <_dtoa_r+0x71e>
 80102dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80102de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80102e0:	4646      	mov	r6, r8
 80102e2:	e735      	b.n	8010150 <_dtoa_r+0x730>
 80102e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80102e6:	e75c      	b.n	80101a2 <_dtoa_r+0x782>
 80102e8:	2300      	movs	r3, #0
 80102ea:	e788      	b.n	80101fe <_dtoa_r+0x7de>
 80102ec:	3fe00000 	.word	0x3fe00000
 80102f0:	40240000 	.word	0x40240000
 80102f4:	40140000 	.word	0x40140000
 80102f8:	9b02      	ldr	r3, [sp, #8]
 80102fa:	e780      	b.n	80101fe <_dtoa_r+0x7de>
 80102fc:	2300      	movs	r3, #0
 80102fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8010300:	e782      	b.n	8010208 <_dtoa_r+0x7e8>
 8010302:	d099      	beq.n	8010238 <_dtoa_r+0x818>
 8010304:	9a08      	ldr	r2, [sp, #32]
 8010306:	331c      	adds	r3, #28
 8010308:	441a      	add	r2, r3
 801030a:	4498      	add	r8, r3
 801030c:	441e      	add	r6, r3
 801030e:	9208      	str	r2, [sp, #32]
 8010310:	e792      	b.n	8010238 <_dtoa_r+0x818>
 8010312:	4603      	mov	r3, r0
 8010314:	e7f6      	b.n	8010304 <_dtoa_r+0x8e4>
 8010316:	9b07      	ldr	r3, [sp, #28]
 8010318:	9704      	str	r7, [sp, #16]
 801031a:	2b00      	cmp	r3, #0
 801031c:	dc20      	bgt.n	8010360 <_dtoa_r+0x940>
 801031e:	9300      	str	r3, [sp, #0]
 8010320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010322:	2b02      	cmp	r3, #2
 8010324:	dd1e      	ble.n	8010364 <_dtoa_r+0x944>
 8010326:	9b00      	ldr	r3, [sp, #0]
 8010328:	2b00      	cmp	r3, #0
 801032a:	f47f aec0 	bne.w	80100ae <_dtoa_r+0x68e>
 801032e:	4621      	mov	r1, r4
 8010330:	2205      	movs	r2, #5
 8010332:	4658      	mov	r0, fp
 8010334:	f000 fde6 	bl	8010f04 <__multadd>
 8010338:	4601      	mov	r1, r0
 801033a:	4604      	mov	r4, r0
 801033c:	4648      	mov	r0, r9
 801033e:	f001 f843 	bl	80113c8 <__mcmp>
 8010342:	2800      	cmp	r0, #0
 8010344:	f77f aeb3 	ble.w	80100ae <_dtoa_r+0x68e>
 8010348:	4656      	mov	r6, sl
 801034a:	2331      	movs	r3, #49	@ 0x31
 801034c:	f806 3b01 	strb.w	r3, [r6], #1
 8010350:	9b04      	ldr	r3, [sp, #16]
 8010352:	3301      	adds	r3, #1
 8010354:	9304      	str	r3, [sp, #16]
 8010356:	e6ae      	b.n	80100b6 <_dtoa_r+0x696>
 8010358:	9c07      	ldr	r4, [sp, #28]
 801035a:	9704      	str	r7, [sp, #16]
 801035c:	4625      	mov	r5, r4
 801035e:	e7f3      	b.n	8010348 <_dtoa_r+0x928>
 8010360:	9b07      	ldr	r3, [sp, #28]
 8010362:	9300      	str	r3, [sp, #0]
 8010364:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010366:	2b00      	cmp	r3, #0
 8010368:	f000 8104 	beq.w	8010574 <_dtoa_r+0xb54>
 801036c:	2e00      	cmp	r6, #0
 801036e:	dd05      	ble.n	801037c <_dtoa_r+0x95c>
 8010370:	4629      	mov	r1, r5
 8010372:	4632      	mov	r2, r6
 8010374:	4658      	mov	r0, fp
 8010376:	f000 ffbb 	bl	80112f0 <__lshift>
 801037a:	4605      	mov	r5, r0
 801037c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801037e:	2b00      	cmp	r3, #0
 8010380:	d05a      	beq.n	8010438 <_dtoa_r+0xa18>
 8010382:	6869      	ldr	r1, [r5, #4]
 8010384:	4658      	mov	r0, fp
 8010386:	f000 fd5b 	bl	8010e40 <_Balloc>
 801038a:	4606      	mov	r6, r0
 801038c:	b928      	cbnz	r0, 801039a <_dtoa_r+0x97a>
 801038e:	4b84      	ldr	r3, [pc, #528]	@ (80105a0 <_dtoa_r+0xb80>)
 8010390:	4602      	mov	r2, r0
 8010392:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010396:	f7ff bb5a 	b.w	800fa4e <_dtoa_r+0x2e>
 801039a:	692a      	ldr	r2, [r5, #16]
 801039c:	3202      	adds	r2, #2
 801039e:	0092      	lsls	r2, r2, #2
 80103a0:	f105 010c 	add.w	r1, r5, #12
 80103a4:	300c      	adds	r0, #12
 80103a6:	f7ff fa76 	bl	800f896 <memcpy>
 80103aa:	2201      	movs	r2, #1
 80103ac:	4631      	mov	r1, r6
 80103ae:	4658      	mov	r0, fp
 80103b0:	f000 ff9e 	bl	80112f0 <__lshift>
 80103b4:	f10a 0301 	add.w	r3, sl, #1
 80103b8:	9307      	str	r3, [sp, #28]
 80103ba:	9b00      	ldr	r3, [sp, #0]
 80103bc:	4453      	add	r3, sl
 80103be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103c0:	9b02      	ldr	r3, [sp, #8]
 80103c2:	f003 0301 	and.w	r3, r3, #1
 80103c6:	462f      	mov	r7, r5
 80103c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80103ca:	4605      	mov	r5, r0
 80103cc:	9b07      	ldr	r3, [sp, #28]
 80103ce:	4621      	mov	r1, r4
 80103d0:	3b01      	subs	r3, #1
 80103d2:	4648      	mov	r0, r9
 80103d4:	9300      	str	r3, [sp, #0]
 80103d6:	f7ff fa9b 	bl	800f910 <quorem>
 80103da:	4639      	mov	r1, r7
 80103dc:	9002      	str	r0, [sp, #8]
 80103de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80103e2:	4648      	mov	r0, r9
 80103e4:	f000 fff0 	bl	80113c8 <__mcmp>
 80103e8:	462a      	mov	r2, r5
 80103ea:	9008      	str	r0, [sp, #32]
 80103ec:	4621      	mov	r1, r4
 80103ee:	4658      	mov	r0, fp
 80103f0:	f001 f806 	bl	8011400 <__mdiff>
 80103f4:	68c2      	ldr	r2, [r0, #12]
 80103f6:	4606      	mov	r6, r0
 80103f8:	bb02      	cbnz	r2, 801043c <_dtoa_r+0xa1c>
 80103fa:	4601      	mov	r1, r0
 80103fc:	4648      	mov	r0, r9
 80103fe:	f000 ffe3 	bl	80113c8 <__mcmp>
 8010402:	4602      	mov	r2, r0
 8010404:	4631      	mov	r1, r6
 8010406:	4658      	mov	r0, fp
 8010408:	920e      	str	r2, [sp, #56]	@ 0x38
 801040a:	f000 fd59 	bl	8010ec0 <_Bfree>
 801040e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010410:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010412:	9e07      	ldr	r6, [sp, #28]
 8010414:	ea43 0102 	orr.w	r1, r3, r2
 8010418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801041a:	4319      	orrs	r1, r3
 801041c:	d110      	bne.n	8010440 <_dtoa_r+0xa20>
 801041e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010422:	d029      	beq.n	8010478 <_dtoa_r+0xa58>
 8010424:	9b08      	ldr	r3, [sp, #32]
 8010426:	2b00      	cmp	r3, #0
 8010428:	dd02      	ble.n	8010430 <_dtoa_r+0xa10>
 801042a:	9b02      	ldr	r3, [sp, #8]
 801042c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010430:	9b00      	ldr	r3, [sp, #0]
 8010432:	f883 8000 	strb.w	r8, [r3]
 8010436:	e63f      	b.n	80100b8 <_dtoa_r+0x698>
 8010438:	4628      	mov	r0, r5
 801043a:	e7bb      	b.n	80103b4 <_dtoa_r+0x994>
 801043c:	2201      	movs	r2, #1
 801043e:	e7e1      	b.n	8010404 <_dtoa_r+0x9e4>
 8010440:	9b08      	ldr	r3, [sp, #32]
 8010442:	2b00      	cmp	r3, #0
 8010444:	db04      	blt.n	8010450 <_dtoa_r+0xa30>
 8010446:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010448:	430b      	orrs	r3, r1
 801044a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801044c:	430b      	orrs	r3, r1
 801044e:	d120      	bne.n	8010492 <_dtoa_r+0xa72>
 8010450:	2a00      	cmp	r2, #0
 8010452:	dded      	ble.n	8010430 <_dtoa_r+0xa10>
 8010454:	4649      	mov	r1, r9
 8010456:	2201      	movs	r2, #1
 8010458:	4658      	mov	r0, fp
 801045a:	f000 ff49 	bl	80112f0 <__lshift>
 801045e:	4621      	mov	r1, r4
 8010460:	4681      	mov	r9, r0
 8010462:	f000 ffb1 	bl	80113c8 <__mcmp>
 8010466:	2800      	cmp	r0, #0
 8010468:	dc03      	bgt.n	8010472 <_dtoa_r+0xa52>
 801046a:	d1e1      	bne.n	8010430 <_dtoa_r+0xa10>
 801046c:	f018 0f01 	tst.w	r8, #1
 8010470:	d0de      	beq.n	8010430 <_dtoa_r+0xa10>
 8010472:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010476:	d1d8      	bne.n	801042a <_dtoa_r+0xa0a>
 8010478:	9a00      	ldr	r2, [sp, #0]
 801047a:	2339      	movs	r3, #57	@ 0x39
 801047c:	7013      	strb	r3, [r2, #0]
 801047e:	4633      	mov	r3, r6
 8010480:	461e      	mov	r6, r3
 8010482:	3b01      	subs	r3, #1
 8010484:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010488:	2a39      	cmp	r2, #57	@ 0x39
 801048a:	d052      	beq.n	8010532 <_dtoa_r+0xb12>
 801048c:	3201      	adds	r2, #1
 801048e:	701a      	strb	r2, [r3, #0]
 8010490:	e612      	b.n	80100b8 <_dtoa_r+0x698>
 8010492:	2a00      	cmp	r2, #0
 8010494:	dd07      	ble.n	80104a6 <_dtoa_r+0xa86>
 8010496:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801049a:	d0ed      	beq.n	8010478 <_dtoa_r+0xa58>
 801049c:	9a00      	ldr	r2, [sp, #0]
 801049e:	f108 0301 	add.w	r3, r8, #1
 80104a2:	7013      	strb	r3, [r2, #0]
 80104a4:	e608      	b.n	80100b8 <_dtoa_r+0x698>
 80104a6:	9b07      	ldr	r3, [sp, #28]
 80104a8:	9a07      	ldr	r2, [sp, #28]
 80104aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80104ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d028      	beq.n	8010506 <_dtoa_r+0xae6>
 80104b4:	4649      	mov	r1, r9
 80104b6:	2300      	movs	r3, #0
 80104b8:	220a      	movs	r2, #10
 80104ba:	4658      	mov	r0, fp
 80104bc:	f000 fd22 	bl	8010f04 <__multadd>
 80104c0:	42af      	cmp	r7, r5
 80104c2:	4681      	mov	r9, r0
 80104c4:	f04f 0300 	mov.w	r3, #0
 80104c8:	f04f 020a 	mov.w	r2, #10
 80104cc:	4639      	mov	r1, r7
 80104ce:	4658      	mov	r0, fp
 80104d0:	d107      	bne.n	80104e2 <_dtoa_r+0xac2>
 80104d2:	f000 fd17 	bl	8010f04 <__multadd>
 80104d6:	4607      	mov	r7, r0
 80104d8:	4605      	mov	r5, r0
 80104da:	9b07      	ldr	r3, [sp, #28]
 80104dc:	3301      	adds	r3, #1
 80104de:	9307      	str	r3, [sp, #28]
 80104e0:	e774      	b.n	80103cc <_dtoa_r+0x9ac>
 80104e2:	f000 fd0f 	bl	8010f04 <__multadd>
 80104e6:	4629      	mov	r1, r5
 80104e8:	4607      	mov	r7, r0
 80104ea:	2300      	movs	r3, #0
 80104ec:	220a      	movs	r2, #10
 80104ee:	4658      	mov	r0, fp
 80104f0:	f000 fd08 	bl	8010f04 <__multadd>
 80104f4:	4605      	mov	r5, r0
 80104f6:	e7f0      	b.n	80104da <_dtoa_r+0xaba>
 80104f8:	9b00      	ldr	r3, [sp, #0]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	bfcc      	ite	gt
 80104fe:	461e      	movgt	r6, r3
 8010500:	2601      	movle	r6, #1
 8010502:	4456      	add	r6, sl
 8010504:	2700      	movs	r7, #0
 8010506:	4649      	mov	r1, r9
 8010508:	2201      	movs	r2, #1
 801050a:	4658      	mov	r0, fp
 801050c:	f000 fef0 	bl	80112f0 <__lshift>
 8010510:	4621      	mov	r1, r4
 8010512:	4681      	mov	r9, r0
 8010514:	f000 ff58 	bl	80113c8 <__mcmp>
 8010518:	2800      	cmp	r0, #0
 801051a:	dcb0      	bgt.n	801047e <_dtoa_r+0xa5e>
 801051c:	d102      	bne.n	8010524 <_dtoa_r+0xb04>
 801051e:	f018 0f01 	tst.w	r8, #1
 8010522:	d1ac      	bne.n	801047e <_dtoa_r+0xa5e>
 8010524:	4633      	mov	r3, r6
 8010526:	461e      	mov	r6, r3
 8010528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801052c:	2a30      	cmp	r2, #48	@ 0x30
 801052e:	d0fa      	beq.n	8010526 <_dtoa_r+0xb06>
 8010530:	e5c2      	b.n	80100b8 <_dtoa_r+0x698>
 8010532:	459a      	cmp	sl, r3
 8010534:	d1a4      	bne.n	8010480 <_dtoa_r+0xa60>
 8010536:	9b04      	ldr	r3, [sp, #16]
 8010538:	3301      	adds	r3, #1
 801053a:	9304      	str	r3, [sp, #16]
 801053c:	2331      	movs	r3, #49	@ 0x31
 801053e:	f88a 3000 	strb.w	r3, [sl]
 8010542:	e5b9      	b.n	80100b8 <_dtoa_r+0x698>
 8010544:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010546:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80105a4 <_dtoa_r+0xb84>
 801054a:	b11b      	cbz	r3, 8010554 <_dtoa_r+0xb34>
 801054c:	f10a 0308 	add.w	r3, sl, #8
 8010550:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010552:	6013      	str	r3, [r2, #0]
 8010554:	4650      	mov	r0, sl
 8010556:	b019      	add	sp, #100	@ 0x64
 8010558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801055e:	2b01      	cmp	r3, #1
 8010560:	f77f ae37 	ble.w	80101d2 <_dtoa_r+0x7b2>
 8010564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010566:	930a      	str	r3, [sp, #40]	@ 0x28
 8010568:	2001      	movs	r0, #1
 801056a:	e655      	b.n	8010218 <_dtoa_r+0x7f8>
 801056c:	9b00      	ldr	r3, [sp, #0]
 801056e:	2b00      	cmp	r3, #0
 8010570:	f77f aed6 	ble.w	8010320 <_dtoa_r+0x900>
 8010574:	4656      	mov	r6, sl
 8010576:	4621      	mov	r1, r4
 8010578:	4648      	mov	r0, r9
 801057a:	f7ff f9c9 	bl	800f910 <quorem>
 801057e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010582:	f806 8b01 	strb.w	r8, [r6], #1
 8010586:	9b00      	ldr	r3, [sp, #0]
 8010588:	eba6 020a 	sub.w	r2, r6, sl
 801058c:	4293      	cmp	r3, r2
 801058e:	ddb3      	ble.n	80104f8 <_dtoa_r+0xad8>
 8010590:	4649      	mov	r1, r9
 8010592:	2300      	movs	r3, #0
 8010594:	220a      	movs	r2, #10
 8010596:	4658      	mov	r0, fp
 8010598:	f000 fcb4 	bl	8010f04 <__multadd>
 801059c:	4681      	mov	r9, r0
 801059e:	e7ea      	b.n	8010576 <_dtoa_r+0xb56>
 80105a0:	080133b3 	.word	0x080133b3
 80105a4:	0801334e 	.word	0x0801334e

080105a8 <_free_r>:
 80105a8:	b538      	push	{r3, r4, r5, lr}
 80105aa:	4605      	mov	r5, r0
 80105ac:	2900      	cmp	r1, #0
 80105ae:	d041      	beq.n	8010634 <_free_r+0x8c>
 80105b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105b4:	1f0c      	subs	r4, r1, #4
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	bfb8      	it	lt
 80105ba:	18e4      	addlt	r4, r4, r3
 80105bc:	f000 fc34 	bl	8010e28 <__malloc_lock>
 80105c0:	4a1d      	ldr	r2, [pc, #116]	@ (8010638 <_free_r+0x90>)
 80105c2:	6813      	ldr	r3, [r2, #0]
 80105c4:	b933      	cbnz	r3, 80105d4 <_free_r+0x2c>
 80105c6:	6063      	str	r3, [r4, #4]
 80105c8:	6014      	str	r4, [r2, #0]
 80105ca:	4628      	mov	r0, r5
 80105cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80105d0:	f000 bc30 	b.w	8010e34 <__malloc_unlock>
 80105d4:	42a3      	cmp	r3, r4
 80105d6:	d908      	bls.n	80105ea <_free_r+0x42>
 80105d8:	6820      	ldr	r0, [r4, #0]
 80105da:	1821      	adds	r1, r4, r0
 80105dc:	428b      	cmp	r3, r1
 80105de:	bf01      	itttt	eq
 80105e0:	6819      	ldreq	r1, [r3, #0]
 80105e2:	685b      	ldreq	r3, [r3, #4]
 80105e4:	1809      	addeq	r1, r1, r0
 80105e6:	6021      	streq	r1, [r4, #0]
 80105e8:	e7ed      	b.n	80105c6 <_free_r+0x1e>
 80105ea:	461a      	mov	r2, r3
 80105ec:	685b      	ldr	r3, [r3, #4]
 80105ee:	b10b      	cbz	r3, 80105f4 <_free_r+0x4c>
 80105f0:	42a3      	cmp	r3, r4
 80105f2:	d9fa      	bls.n	80105ea <_free_r+0x42>
 80105f4:	6811      	ldr	r1, [r2, #0]
 80105f6:	1850      	adds	r0, r2, r1
 80105f8:	42a0      	cmp	r0, r4
 80105fa:	d10b      	bne.n	8010614 <_free_r+0x6c>
 80105fc:	6820      	ldr	r0, [r4, #0]
 80105fe:	4401      	add	r1, r0
 8010600:	1850      	adds	r0, r2, r1
 8010602:	4283      	cmp	r3, r0
 8010604:	6011      	str	r1, [r2, #0]
 8010606:	d1e0      	bne.n	80105ca <_free_r+0x22>
 8010608:	6818      	ldr	r0, [r3, #0]
 801060a:	685b      	ldr	r3, [r3, #4]
 801060c:	6053      	str	r3, [r2, #4]
 801060e:	4408      	add	r0, r1
 8010610:	6010      	str	r0, [r2, #0]
 8010612:	e7da      	b.n	80105ca <_free_r+0x22>
 8010614:	d902      	bls.n	801061c <_free_r+0x74>
 8010616:	230c      	movs	r3, #12
 8010618:	602b      	str	r3, [r5, #0]
 801061a:	e7d6      	b.n	80105ca <_free_r+0x22>
 801061c:	6820      	ldr	r0, [r4, #0]
 801061e:	1821      	adds	r1, r4, r0
 8010620:	428b      	cmp	r3, r1
 8010622:	bf04      	itt	eq
 8010624:	6819      	ldreq	r1, [r3, #0]
 8010626:	685b      	ldreq	r3, [r3, #4]
 8010628:	6063      	str	r3, [r4, #4]
 801062a:	bf04      	itt	eq
 801062c:	1809      	addeq	r1, r1, r0
 801062e:	6021      	streq	r1, [r4, #0]
 8010630:	6054      	str	r4, [r2, #4]
 8010632:	e7ca      	b.n	80105ca <_free_r+0x22>
 8010634:	bd38      	pop	{r3, r4, r5, pc}
 8010636:	bf00      	nop
 8010638:	20003934 	.word	0x20003934

0801063c <rshift>:
 801063c:	6903      	ldr	r3, [r0, #16]
 801063e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010642:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010646:	ea4f 1261 	mov.w	r2, r1, asr #5
 801064a:	f100 0414 	add.w	r4, r0, #20
 801064e:	dd45      	ble.n	80106dc <rshift+0xa0>
 8010650:	f011 011f 	ands.w	r1, r1, #31
 8010654:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010658:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801065c:	d10c      	bne.n	8010678 <rshift+0x3c>
 801065e:	f100 0710 	add.w	r7, r0, #16
 8010662:	4629      	mov	r1, r5
 8010664:	42b1      	cmp	r1, r6
 8010666:	d334      	bcc.n	80106d2 <rshift+0x96>
 8010668:	1a9b      	subs	r3, r3, r2
 801066a:	009b      	lsls	r3, r3, #2
 801066c:	1eea      	subs	r2, r5, #3
 801066e:	4296      	cmp	r6, r2
 8010670:	bf38      	it	cc
 8010672:	2300      	movcc	r3, #0
 8010674:	4423      	add	r3, r4
 8010676:	e015      	b.n	80106a4 <rshift+0x68>
 8010678:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801067c:	f1c1 0820 	rsb	r8, r1, #32
 8010680:	40cf      	lsrs	r7, r1
 8010682:	f105 0e04 	add.w	lr, r5, #4
 8010686:	46a1      	mov	r9, r4
 8010688:	4576      	cmp	r6, lr
 801068a:	46f4      	mov	ip, lr
 801068c:	d815      	bhi.n	80106ba <rshift+0x7e>
 801068e:	1a9a      	subs	r2, r3, r2
 8010690:	0092      	lsls	r2, r2, #2
 8010692:	3a04      	subs	r2, #4
 8010694:	3501      	adds	r5, #1
 8010696:	42ae      	cmp	r6, r5
 8010698:	bf38      	it	cc
 801069a:	2200      	movcc	r2, #0
 801069c:	18a3      	adds	r3, r4, r2
 801069e:	50a7      	str	r7, [r4, r2]
 80106a0:	b107      	cbz	r7, 80106a4 <rshift+0x68>
 80106a2:	3304      	adds	r3, #4
 80106a4:	1b1a      	subs	r2, r3, r4
 80106a6:	42a3      	cmp	r3, r4
 80106a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80106ac:	bf08      	it	eq
 80106ae:	2300      	moveq	r3, #0
 80106b0:	6102      	str	r2, [r0, #16]
 80106b2:	bf08      	it	eq
 80106b4:	6143      	streq	r3, [r0, #20]
 80106b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106ba:	f8dc c000 	ldr.w	ip, [ip]
 80106be:	fa0c fc08 	lsl.w	ip, ip, r8
 80106c2:	ea4c 0707 	orr.w	r7, ip, r7
 80106c6:	f849 7b04 	str.w	r7, [r9], #4
 80106ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 80106ce:	40cf      	lsrs	r7, r1
 80106d0:	e7da      	b.n	8010688 <rshift+0x4c>
 80106d2:	f851 cb04 	ldr.w	ip, [r1], #4
 80106d6:	f847 cf04 	str.w	ip, [r7, #4]!
 80106da:	e7c3      	b.n	8010664 <rshift+0x28>
 80106dc:	4623      	mov	r3, r4
 80106de:	e7e1      	b.n	80106a4 <rshift+0x68>

080106e0 <__hexdig_fun>:
 80106e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80106e4:	2b09      	cmp	r3, #9
 80106e6:	d802      	bhi.n	80106ee <__hexdig_fun+0xe>
 80106e8:	3820      	subs	r0, #32
 80106ea:	b2c0      	uxtb	r0, r0
 80106ec:	4770      	bx	lr
 80106ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80106f2:	2b05      	cmp	r3, #5
 80106f4:	d801      	bhi.n	80106fa <__hexdig_fun+0x1a>
 80106f6:	3847      	subs	r0, #71	@ 0x47
 80106f8:	e7f7      	b.n	80106ea <__hexdig_fun+0xa>
 80106fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80106fe:	2b05      	cmp	r3, #5
 8010700:	d801      	bhi.n	8010706 <__hexdig_fun+0x26>
 8010702:	3827      	subs	r0, #39	@ 0x27
 8010704:	e7f1      	b.n	80106ea <__hexdig_fun+0xa>
 8010706:	2000      	movs	r0, #0
 8010708:	4770      	bx	lr
	...

0801070c <__gethex>:
 801070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010710:	b085      	sub	sp, #20
 8010712:	468a      	mov	sl, r1
 8010714:	9302      	str	r3, [sp, #8]
 8010716:	680b      	ldr	r3, [r1, #0]
 8010718:	9001      	str	r0, [sp, #4]
 801071a:	4690      	mov	r8, r2
 801071c:	1c9c      	adds	r4, r3, #2
 801071e:	46a1      	mov	r9, r4
 8010720:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010724:	2830      	cmp	r0, #48	@ 0x30
 8010726:	d0fa      	beq.n	801071e <__gethex+0x12>
 8010728:	eba9 0303 	sub.w	r3, r9, r3
 801072c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010730:	f7ff ffd6 	bl	80106e0 <__hexdig_fun>
 8010734:	4605      	mov	r5, r0
 8010736:	2800      	cmp	r0, #0
 8010738:	d168      	bne.n	801080c <__gethex+0x100>
 801073a:	49a0      	ldr	r1, [pc, #640]	@ (80109bc <__gethex+0x2b0>)
 801073c:	2201      	movs	r2, #1
 801073e:	4648      	mov	r0, r9
 8010740:	f7fe ffc3 	bl	800f6ca <strncmp>
 8010744:	4607      	mov	r7, r0
 8010746:	2800      	cmp	r0, #0
 8010748:	d167      	bne.n	801081a <__gethex+0x10e>
 801074a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801074e:	4626      	mov	r6, r4
 8010750:	f7ff ffc6 	bl	80106e0 <__hexdig_fun>
 8010754:	2800      	cmp	r0, #0
 8010756:	d062      	beq.n	801081e <__gethex+0x112>
 8010758:	4623      	mov	r3, r4
 801075a:	7818      	ldrb	r0, [r3, #0]
 801075c:	2830      	cmp	r0, #48	@ 0x30
 801075e:	4699      	mov	r9, r3
 8010760:	f103 0301 	add.w	r3, r3, #1
 8010764:	d0f9      	beq.n	801075a <__gethex+0x4e>
 8010766:	f7ff ffbb 	bl	80106e0 <__hexdig_fun>
 801076a:	fab0 f580 	clz	r5, r0
 801076e:	096d      	lsrs	r5, r5, #5
 8010770:	f04f 0b01 	mov.w	fp, #1
 8010774:	464a      	mov	r2, r9
 8010776:	4616      	mov	r6, r2
 8010778:	3201      	adds	r2, #1
 801077a:	7830      	ldrb	r0, [r6, #0]
 801077c:	f7ff ffb0 	bl	80106e0 <__hexdig_fun>
 8010780:	2800      	cmp	r0, #0
 8010782:	d1f8      	bne.n	8010776 <__gethex+0x6a>
 8010784:	498d      	ldr	r1, [pc, #564]	@ (80109bc <__gethex+0x2b0>)
 8010786:	2201      	movs	r2, #1
 8010788:	4630      	mov	r0, r6
 801078a:	f7fe ff9e 	bl	800f6ca <strncmp>
 801078e:	2800      	cmp	r0, #0
 8010790:	d13f      	bne.n	8010812 <__gethex+0x106>
 8010792:	b944      	cbnz	r4, 80107a6 <__gethex+0x9a>
 8010794:	1c74      	adds	r4, r6, #1
 8010796:	4622      	mov	r2, r4
 8010798:	4616      	mov	r6, r2
 801079a:	3201      	adds	r2, #1
 801079c:	7830      	ldrb	r0, [r6, #0]
 801079e:	f7ff ff9f 	bl	80106e0 <__hexdig_fun>
 80107a2:	2800      	cmp	r0, #0
 80107a4:	d1f8      	bne.n	8010798 <__gethex+0x8c>
 80107a6:	1ba4      	subs	r4, r4, r6
 80107a8:	00a7      	lsls	r7, r4, #2
 80107aa:	7833      	ldrb	r3, [r6, #0]
 80107ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80107b0:	2b50      	cmp	r3, #80	@ 0x50
 80107b2:	d13e      	bne.n	8010832 <__gethex+0x126>
 80107b4:	7873      	ldrb	r3, [r6, #1]
 80107b6:	2b2b      	cmp	r3, #43	@ 0x2b
 80107b8:	d033      	beq.n	8010822 <__gethex+0x116>
 80107ba:	2b2d      	cmp	r3, #45	@ 0x2d
 80107bc:	d034      	beq.n	8010828 <__gethex+0x11c>
 80107be:	1c71      	adds	r1, r6, #1
 80107c0:	2400      	movs	r4, #0
 80107c2:	7808      	ldrb	r0, [r1, #0]
 80107c4:	f7ff ff8c 	bl	80106e0 <__hexdig_fun>
 80107c8:	1e43      	subs	r3, r0, #1
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	2b18      	cmp	r3, #24
 80107ce:	d830      	bhi.n	8010832 <__gethex+0x126>
 80107d0:	f1a0 0210 	sub.w	r2, r0, #16
 80107d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80107d8:	f7ff ff82 	bl	80106e0 <__hexdig_fun>
 80107dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80107e0:	fa5f fc8c 	uxtb.w	ip, ip
 80107e4:	f1bc 0f18 	cmp.w	ip, #24
 80107e8:	f04f 030a 	mov.w	r3, #10
 80107ec:	d91e      	bls.n	801082c <__gethex+0x120>
 80107ee:	b104      	cbz	r4, 80107f2 <__gethex+0xe6>
 80107f0:	4252      	negs	r2, r2
 80107f2:	4417      	add	r7, r2
 80107f4:	f8ca 1000 	str.w	r1, [sl]
 80107f8:	b1ed      	cbz	r5, 8010836 <__gethex+0x12a>
 80107fa:	f1bb 0f00 	cmp.w	fp, #0
 80107fe:	bf0c      	ite	eq
 8010800:	2506      	moveq	r5, #6
 8010802:	2500      	movne	r5, #0
 8010804:	4628      	mov	r0, r5
 8010806:	b005      	add	sp, #20
 8010808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801080c:	2500      	movs	r5, #0
 801080e:	462c      	mov	r4, r5
 8010810:	e7b0      	b.n	8010774 <__gethex+0x68>
 8010812:	2c00      	cmp	r4, #0
 8010814:	d1c7      	bne.n	80107a6 <__gethex+0x9a>
 8010816:	4627      	mov	r7, r4
 8010818:	e7c7      	b.n	80107aa <__gethex+0x9e>
 801081a:	464e      	mov	r6, r9
 801081c:	462f      	mov	r7, r5
 801081e:	2501      	movs	r5, #1
 8010820:	e7c3      	b.n	80107aa <__gethex+0x9e>
 8010822:	2400      	movs	r4, #0
 8010824:	1cb1      	adds	r1, r6, #2
 8010826:	e7cc      	b.n	80107c2 <__gethex+0xb6>
 8010828:	2401      	movs	r4, #1
 801082a:	e7fb      	b.n	8010824 <__gethex+0x118>
 801082c:	fb03 0002 	mla	r0, r3, r2, r0
 8010830:	e7ce      	b.n	80107d0 <__gethex+0xc4>
 8010832:	4631      	mov	r1, r6
 8010834:	e7de      	b.n	80107f4 <__gethex+0xe8>
 8010836:	eba6 0309 	sub.w	r3, r6, r9
 801083a:	3b01      	subs	r3, #1
 801083c:	4629      	mov	r1, r5
 801083e:	2b07      	cmp	r3, #7
 8010840:	dc0a      	bgt.n	8010858 <__gethex+0x14c>
 8010842:	9801      	ldr	r0, [sp, #4]
 8010844:	f000 fafc 	bl	8010e40 <_Balloc>
 8010848:	4604      	mov	r4, r0
 801084a:	b940      	cbnz	r0, 801085e <__gethex+0x152>
 801084c:	4b5c      	ldr	r3, [pc, #368]	@ (80109c0 <__gethex+0x2b4>)
 801084e:	4602      	mov	r2, r0
 8010850:	21e4      	movs	r1, #228	@ 0xe4
 8010852:	485c      	ldr	r0, [pc, #368]	@ (80109c4 <__gethex+0x2b8>)
 8010854:	f7ff f83e 	bl	800f8d4 <__assert_func>
 8010858:	3101      	adds	r1, #1
 801085a:	105b      	asrs	r3, r3, #1
 801085c:	e7ef      	b.n	801083e <__gethex+0x132>
 801085e:	f100 0a14 	add.w	sl, r0, #20
 8010862:	2300      	movs	r3, #0
 8010864:	4655      	mov	r5, sl
 8010866:	469b      	mov	fp, r3
 8010868:	45b1      	cmp	r9, r6
 801086a:	d337      	bcc.n	80108dc <__gethex+0x1d0>
 801086c:	f845 bb04 	str.w	fp, [r5], #4
 8010870:	eba5 050a 	sub.w	r5, r5, sl
 8010874:	10ad      	asrs	r5, r5, #2
 8010876:	6125      	str	r5, [r4, #16]
 8010878:	4658      	mov	r0, fp
 801087a:	f000 fbd3 	bl	8011024 <__hi0bits>
 801087e:	016d      	lsls	r5, r5, #5
 8010880:	f8d8 6000 	ldr.w	r6, [r8]
 8010884:	1a2d      	subs	r5, r5, r0
 8010886:	42b5      	cmp	r5, r6
 8010888:	dd54      	ble.n	8010934 <__gethex+0x228>
 801088a:	1bad      	subs	r5, r5, r6
 801088c:	4629      	mov	r1, r5
 801088e:	4620      	mov	r0, r4
 8010890:	f000 ff67 	bl	8011762 <__any_on>
 8010894:	4681      	mov	r9, r0
 8010896:	b178      	cbz	r0, 80108b8 <__gethex+0x1ac>
 8010898:	1e6b      	subs	r3, r5, #1
 801089a:	1159      	asrs	r1, r3, #5
 801089c:	f003 021f 	and.w	r2, r3, #31
 80108a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80108a4:	f04f 0901 	mov.w	r9, #1
 80108a8:	fa09 f202 	lsl.w	r2, r9, r2
 80108ac:	420a      	tst	r2, r1
 80108ae:	d003      	beq.n	80108b8 <__gethex+0x1ac>
 80108b0:	454b      	cmp	r3, r9
 80108b2:	dc36      	bgt.n	8010922 <__gethex+0x216>
 80108b4:	f04f 0902 	mov.w	r9, #2
 80108b8:	4629      	mov	r1, r5
 80108ba:	4620      	mov	r0, r4
 80108bc:	f7ff febe 	bl	801063c <rshift>
 80108c0:	442f      	add	r7, r5
 80108c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80108c6:	42bb      	cmp	r3, r7
 80108c8:	da42      	bge.n	8010950 <__gethex+0x244>
 80108ca:	9801      	ldr	r0, [sp, #4]
 80108cc:	4621      	mov	r1, r4
 80108ce:	f000 faf7 	bl	8010ec0 <_Bfree>
 80108d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80108d4:	2300      	movs	r3, #0
 80108d6:	6013      	str	r3, [r2, #0]
 80108d8:	25a3      	movs	r5, #163	@ 0xa3
 80108da:	e793      	b.n	8010804 <__gethex+0xf8>
 80108dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80108e0:	2a2e      	cmp	r2, #46	@ 0x2e
 80108e2:	d012      	beq.n	801090a <__gethex+0x1fe>
 80108e4:	2b20      	cmp	r3, #32
 80108e6:	d104      	bne.n	80108f2 <__gethex+0x1e6>
 80108e8:	f845 bb04 	str.w	fp, [r5], #4
 80108ec:	f04f 0b00 	mov.w	fp, #0
 80108f0:	465b      	mov	r3, fp
 80108f2:	7830      	ldrb	r0, [r6, #0]
 80108f4:	9303      	str	r3, [sp, #12]
 80108f6:	f7ff fef3 	bl	80106e0 <__hexdig_fun>
 80108fa:	9b03      	ldr	r3, [sp, #12]
 80108fc:	f000 000f 	and.w	r0, r0, #15
 8010900:	4098      	lsls	r0, r3
 8010902:	ea4b 0b00 	orr.w	fp, fp, r0
 8010906:	3304      	adds	r3, #4
 8010908:	e7ae      	b.n	8010868 <__gethex+0x15c>
 801090a:	45b1      	cmp	r9, r6
 801090c:	d8ea      	bhi.n	80108e4 <__gethex+0x1d8>
 801090e:	492b      	ldr	r1, [pc, #172]	@ (80109bc <__gethex+0x2b0>)
 8010910:	9303      	str	r3, [sp, #12]
 8010912:	2201      	movs	r2, #1
 8010914:	4630      	mov	r0, r6
 8010916:	f7fe fed8 	bl	800f6ca <strncmp>
 801091a:	9b03      	ldr	r3, [sp, #12]
 801091c:	2800      	cmp	r0, #0
 801091e:	d1e1      	bne.n	80108e4 <__gethex+0x1d8>
 8010920:	e7a2      	b.n	8010868 <__gethex+0x15c>
 8010922:	1ea9      	subs	r1, r5, #2
 8010924:	4620      	mov	r0, r4
 8010926:	f000 ff1c 	bl	8011762 <__any_on>
 801092a:	2800      	cmp	r0, #0
 801092c:	d0c2      	beq.n	80108b4 <__gethex+0x1a8>
 801092e:	f04f 0903 	mov.w	r9, #3
 8010932:	e7c1      	b.n	80108b8 <__gethex+0x1ac>
 8010934:	da09      	bge.n	801094a <__gethex+0x23e>
 8010936:	1b75      	subs	r5, r6, r5
 8010938:	4621      	mov	r1, r4
 801093a:	9801      	ldr	r0, [sp, #4]
 801093c:	462a      	mov	r2, r5
 801093e:	f000 fcd7 	bl	80112f0 <__lshift>
 8010942:	1b7f      	subs	r7, r7, r5
 8010944:	4604      	mov	r4, r0
 8010946:	f100 0a14 	add.w	sl, r0, #20
 801094a:	f04f 0900 	mov.w	r9, #0
 801094e:	e7b8      	b.n	80108c2 <__gethex+0x1b6>
 8010950:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010954:	42bd      	cmp	r5, r7
 8010956:	dd6f      	ble.n	8010a38 <__gethex+0x32c>
 8010958:	1bed      	subs	r5, r5, r7
 801095a:	42ae      	cmp	r6, r5
 801095c:	dc34      	bgt.n	80109c8 <__gethex+0x2bc>
 801095e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010962:	2b02      	cmp	r3, #2
 8010964:	d022      	beq.n	80109ac <__gethex+0x2a0>
 8010966:	2b03      	cmp	r3, #3
 8010968:	d024      	beq.n	80109b4 <__gethex+0x2a8>
 801096a:	2b01      	cmp	r3, #1
 801096c:	d115      	bne.n	801099a <__gethex+0x28e>
 801096e:	42ae      	cmp	r6, r5
 8010970:	d113      	bne.n	801099a <__gethex+0x28e>
 8010972:	2e01      	cmp	r6, #1
 8010974:	d10b      	bne.n	801098e <__gethex+0x282>
 8010976:	9a02      	ldr	r2, [sp, #8]
 8010978:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801097c:	6013      	str	r3, [r2, #0]
 801097e:	2301      	movs	r3, #1
 8010980:	6123      	str	r3, [r4, #16]
 8010982:	f8ca 3000 	str.w	r3, [sl]
 8010986:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010988:	2562      	movs	r5, #98	@ 0x62
 801098a:	601c      	str	r4, [r3, #0]
 801098c:	e73a      	b.n	8010804 <__gethex+0xf8>
 801098e:	1e71      	subs	r1, r6, #1
 8010990:	4620      	mov	r0, r4
 8010992:	f000 fee6 	bl	8011762 <__any_on>
 8010996:	2800      	cmp	r0, #0
 8010998:	d1ed      	bne.n	8010976 <__gethex+0x26a>
 801099a:	9801      	ldr	r0, [sp, #4]
 801099c:	4621      	mov	r1, r4
 801099e:	f000 fa8f 	bl	8010ec0 <_Bfree>
 80109a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80109a4:	2300      	movs	r3, #0
 80109a6:	6013      	str	r3, [r2, #0]
 80109a8:	2550      	movs	r5, #80	@ 0x50
 80109aa:	e72b      	b.n	8010804 <__gethex+0xf8>
 80109ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d1f3      	bne.n	801099a <__gethex+0x28e>
 80109b2:	e7e0      	b.n	8010976 <__gethex+0x26a>
 80109b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d1dd      	bne.n	8010976 <__gethex+0x26a>
 80109ba:	e7ee      	b.n	801099a <__gethex+0x28e>
 80109bc:	0801320c 	.word	0x0801320c
 80109c0:	080133b3 	.word	0x080133b3
 80109c4:	080133c4 	.word	0x080133c4
 80109c8:	1e6f      	subs	r7, r5, #1
 80109ca:	f1b9 0f00 	cmp.w	r9, #0
 80109ce:	d130      	bne.n	8010a32 <__gethex+0x326>
 80109d0:	b127      	cbz	r7, 80109dc <__gethex+0x2d0>
 80109d2:	4639      	mov	r1, r7
 80109d4:	4620      	mov	r0, r4
 80109d6:	f000 fec4 	bl	8011762 <__any_on>
 80109da:	4681      	mov	r9, r0
 80109dc:	117a      	asrs	r2, r7, #5
 80109de:	2301      	movs	r3, #1
 80109e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80109e4:	f007 071f 	and.w	r7, r7, #31
 80109e8:	40bb      	lsls	r3, r7
 80109ea:	4213      	tst	r3, r2
 80109ec:	4629      	mov	r1, r5
 80109ee:	4620      	mov	r0, r4
 80109f0:	bf18      	it	ne
 80109f2:	f049 0902 	orrne.w	r9, r9, #2
 80109f6:	f7ff fe21 	bl	801063c <rshift>
 80109fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80109fe:	1b76      	subs	r6, r6, r5
 8010a00:	2502      	movs	r5, #2
 8010a02:	f1b9 0f00 	cmp.w	r9, #0
 8010a06:	d047      	beq.n	8010a98 <__gethex+0x38c>
 8010a08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a0c:	2b02      	cmp	r3, #2
 8010a0e:	d015      	beq.n	8010a3c <__gethex+0x330>
 8010a10:	2b03      	cmp	r3, #3
 8010a12:	d017      	beq.n	8010a44 <__gethex+0x338>
 8010a14:	2b01      	cmp	r3, #1
 8010a16:	d109      	bne.n	8010a2c <__gethex+0x320>
 8010a18:	f019 0f02 	tst.w	r9, #2
 8010a1c:	d006      	beq.n	8010a2c <__gethex+0x320>
 8010a1e:	f8da 3000 	ldr.w	r3, [sl]
 8010a22:	ea49 0903 	orr.w	r9, r9, r3
 8010a26:	f019 0f01 	tst.w	r9, #1
 8010a2a:	d10e      	bne.n	8010a4a <__gethex+0x33e>
 8010a2c:	f045 0510 	orr.w	r5, r5, #16
 8010a30:	e032      	b.n	8010a98 <__gethex+0x38c>
 8010a32:	f04f 0901 	mov.w	r9, #1
 8010a36:	e7d1      	b.n	80109dc <__gethex+0x2d0>
 8010a38:	2501      	movs	r5, #1
 8010a3a:	e7e2      	b.n	8010a02 <__gethex+0x2f6>
 8010a3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a3e:	f1c3 0301 	rsb	r3, r3, #1
 8010a42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d0f0      	beq.n	8010a2c <__gethex+0x320>
 8010a4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010a4e:	f104 0314 	add.w	r3, r4, #20
 8010a52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010a56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010a5a:	f04f 0c00 	mov.w	ip, #0
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010a68:	d01b      	beq.n	8010aa2 <__gethex+0x396>
 8010a6a:	3201      	adds	r2, #1
 8010a6c:	6002      	str	r2, [r0, #0]
 8010a6e:	2d02      	cmp	r5, #2
 8010a70:	f104 0314 	add.w	r3, r4, #20
 8010a74:	d13c      	bne.n	8010af0 <__gethex+0x3e4>
 8010a76:	f8d8 2000 	ldr.w	r2, [r8]
 8010a7a:	3a01      	subs	r2, #1
 8010a7c:	42b2      	cmp	r2, r6
 8010a7e:	d109      	bne.n	8010a94 <__gethex+0x388>
 8010a80:	1171      	asrs	r1, r6, #5
 8010a82:	2201      	movs	r2, #1
 8010a84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010a88:	f006 061f 	and.w	r6, r6, #31
 8010a8c:	fa02 f606 	lsl.w	r6, r2, r6
 8010a90:	421e      	tst	r6, r3
 8010a92:	d13a      	bne.n	8010b0a <__gethex+0x3fe>
 8010a94:	f045 0520 	orr.w	r5, r5, #32
 8010a98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a9a:	601c      	str	r4, [r3, #0]
 8010a9c:	9b02      	ldr	r3, [sp, #8]
 8010a9e:	601f      	str	r7, [r3, #0]
 8010aa0:	e6b0      	b.n	8010804 <__gethex+0xf8>
 8010aa2:	4299      	cmp	r1, r3
 8010aa4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010aa8:	d8d9      	bhi.n	8010a5e <__gethex+0x352>
 8010aaa:	68a3      	ldr	r3, [r4, #8]
 8010aac:	459b      	cmp	fp, r3
 8010aae:	db17      	blt.n	8010ae0 <__gethex+0x3d4>
 8010ab0:	6861      	ldr	r1, [r4, #4]
 8010ab2:	9801      	ldr	r0, [sp, #4]
 8010ab4:	3101      	adds	r1, #1
 8010ab6:	f000 f9c3 	bl	8010e40 <_Balloc>
 8010aba:	4681      	mov	r9, r0
 8010abc:	b918      	cbnz	r0, 8010ac6 <__gethex+0x3ba>
 8010abe:	4b1a      	ldr	r3, [pc, #104]	@ (8010b28 <__gethex+0x41c>)
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	2184      	movs	r1, #132	@ 0x84
 8010ac4:	e6c5      	b.n	8010852 <__gethex+0x146>
 8010ac6:	6922      	ldr	r2, [r4, #16]
 8010ac8:	3202      	adds	r2, #2
 8010aca:	f104 010c 	add.w	r1, r4, #12
 8010ace:	0092      	lsls	r2, r2, #2
 8010ad0:	300c      	adds	r0, #12
 8010ad2:	f7fe fee0 	bl	800f896 <memcpy>
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	9801      	ldr	r0, [sp, #4]
 8010ada:	f000 f9f1 	bl	8010ec0 <_Bfree>
 8010ade:	464c      	mov	r4, r9
 8010ae0:	6923      	ldr	r3, [r4, #16]
 8010ae2:	1c5a      	adds	r2, r3, #1
 8010ae4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010ae8:	6122      	str	r2, [r4, #16]
 8010aea:	2201      	movs	r2, #1
 8010aec:	615a      	str	r2, [r3, #20]
 8010aee:	e7be      	b.n	8010a6e <__gethex+0x362>
 8010af0:	6922      	ldr	r2, [r4, #16]
 8010af2:	455a      	cmp	r2, fp
 8010af4:	dd0b      	ble.n	8010b0e <__gethex+0x402>
 8010af6:	2101      	movs	r1, #1
 8010af8:	4620      	mov	r0, r4
 8010afa:	f7ff fd9f 	bl	801063c <rshift>
 8010afe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b02:	3701      	adds	r7, #1
 8010b04:	42bb      	cmp	r3, r7
 8010b06:	f6ff aee0 	blt.w	80108ca <__gethex+0x1be>
 8010b0a:	2501      	movs	r5, #1
 8010b0c:	e7c2      	b.n	8010a94 <__gethex+0x388>
 8010b0e:	f016 061f 	ands.w	r6, r6, #31
 8010b12:	d0fa      	beq.n	8010b0a <__gethex+0x3fe>
 8010b14:	4453      	add	r3, sl
 8010b16:	f1c6 0620 	rsb	r6, r6, #32
 8010b1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010b1e:	f000 fa81 	bl	8011024 <__hi0bits>
 8010b22:	42b0      	cmp	r0, r6
 8010b24:	dbe7      	blt.n	8010af6 <__gethex+0x3ea>
 8010b26:	e7f0      	b.n	8010b0a <__gethex+0x3fe>
 8010b28:	080133b3 	.word	0x080133b3

08010b2c <L_shift>:
 8010b2c:	f1c2 0208 	rsb	r2, r2, #8
 8010b30:	0092      	lsls	r2, r2, #2
 8010b32:	b570      	push	{r4, r5, r6, lr}
 8010b34:	f1c2 0620 	rsb	r6, r2, #32
 8010b38:	6843      	ldr	r3, [r0, #4]
 8010b3a:	6804      	ldr	r4, [r0, #0]
 8010b3c:	fa03 f506 	lsl.w	r5, r3, r6
 8010b40:	432c      	orrs	r4, r5
 8010b42:	40d3      	lsrs	r3, r2
 8010b44:	6004      	str	r4, [r0, #0]
 8010b46:	f840 3f04 	str.w	r3, [r0, #4]!
 8010b4a:	4288      	cmp	r0, r1
 8010b4c:	d3f4      	bcc.n	8010b38 <L_shift+0xc>
 8010b4e:	bd70      	pop	{r4, r5, r6, pc}

08010b50 <__match>:
 8010b50:	b530      	push	{r4, r5, lr}
 8010b52:	6803      	ldr	r3, [r0, #0]
 8010b54:	3301      	adds	r3, #1
 8010b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b5a:	b914      	cbnz	r4, 8010b62 <__match+0x12>
 8010b5c:	6003      	str	r3, [r0, #0]
 8010b5e:	2001      	movs	r0, #1
 8010b60:	bd30      	pop	{r4, r5, pc}
 8010b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010b6a:	2d19      	cmp	r5, #25
 8010b6c:	bf98      	it	ls
 8010b6e:	3220      	addls	r2, #32
 8010b70:	42a2      	cmp	r2, r4
 8010b72:	d0f0      	beq.n	8010b56 <__match+0x6>
 8010b74:	2000      	movs	r0, #0
 8010b76:	e7f3      	b.n	8010b60 <__match+0x10>

08010b78 <__hexnan>:
 8010b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b7c:	680b      	ldr	r3, [r1, #0]
 8010b7e:	6801      	ldr	r1, [r0, #0]
 8010b80:	115e      	asrs	r6, r3, #5
 8010b82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010b86:	f013 031f 	ands.w	r3, r3, #31
 8010b8a:	b087      	sub	sp, #28
 8010b8c:	bf18      	it	ne
 8010b8e:	3604      	addne	r6, #4
 8010b90:	2500      	movs	r5, #0
 8010b92:	1f37      	subs	r7, r6, #4
 8010b94:	4682      	mov	sl, r0
 8010b96:	4690      	mov	r8, r2
 8010b98:	9301      	str	r3, [sp, #4]
 8010b9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010b9e:	46b9      	mov	r9, r7
 8010ba0:	463c      	mov	r4, r7
 8010ba2:	9502      	str	r5, [sp, #8]
 8010ba4:	46ab      	mov	fp, r5
 8010ba6:	784a      	ldrb	r2, [r1, #1]
 8010ba8:	1c4b      	adds	r3, r1, #1
 8010baa:	9303      	str	r3, [sp, #12]
 8010bac:	b342      	cbz	r2, 8010c00 <__hexnan+0x88>
 8010bae:	4610      	mov	r0, r2
 8010bb0:	9105      	str	r1, [sp, #20]
 8010bb2:	9204      	str	r2, [sp, #16]
 8010bb4:	f7ff fd94 	bl	80106e0 <__hexdig_fun>
 8010bb8:	2800      	cmp	r0, #0
 8010bba:	d151      	bne.n	8010c60 <__hexnan+0xe8>
 8010bbc:	9a04      	ldr	r2, [sp, #16]
 8010bbe:	9905      	ldr	r1, [sp, #20]
 8010bc0:	2a20      	cmp	r2, #32
 8010bc2:	d818      	bhi.n	8010bf6 <__hexnan+0x7e>
 8010bc4:	9b02      	ldr	r3, [sp, #8]
 8010bc6:	459b      	cmp	fp, r3
 8010bc8:	dd13      	ble.n	8010bf2 <__hexnan+0x7a>
 8010bca:	454c      	cmp	r4, r9
 8010bcc:	d206      	bcs.n	8010bdc <__hexnan+0x64>
 8010bce:	2d07      	cmp	r5, #7
 8010bd0:	dc04      	bgt.n	8010bdc <__hexnan+0x64>
 8010bd2:	462a      	mov	r2, r5
 8010bd4:	4649      	mov	r1, r9
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	f7ff ffa8 	bl	8010b2c <L_shift>
 8010bdc:	4544      	cmp	r4, r8
 8010bde:	d952      	bls.n	8010c86 <__hexnan+0x10e>
 8010be0:	2300      	movs	r3, #0
 8010be2:	f1a4 0904 	sub.w	r9, r4, #4
 8010be6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010bea:	f8cd b008 	str.w	fp, [sp, #8]
 8010bee:	464c      	mov	r4, r9
 8010bf0:	461d      	mov	r5, r3
 8010bf2:	9903      	ldr	r1, [sp, #12]
 8010bf4:	e7d7      	b.n	8010ba6 <__hexnan+0x2e>
 8010bf6:	2a29      	cmp	r2, #41	@ 0x29
 8010bf8:	d157      	bne.n	8010caa <__hexnan+0x132>
 8010bfa:	3102      	adds	r1, #2
 8010bfc:	f8ca 1000 	str.w	r1, [sl]
 8010c00:	f1bb 0f00 	cmp.w	fp, #0
 8010c04:	d051      	beq.n	8010caa <__hexnan+0x132>
 8010c06:	454c      	cmp	r4, r9
 8010c08:	d206      	bcs.n	8010c18 <__hexnan+0xa0>
 8010c0a:	2d07      	cmp	r5, #7
 8010c0c:	dc04      	bgt.n	8010c18 <__hexnan+0xa0>
 8010c0e:	462a      	mov	r2, r5
 8010c10:	4649      	mov	r1, r9
 8010c12:	4620      	mov	r0, r4
 8010c14:	f7ff ff8a 	bl	8010b2c <L_shift>
 8010c18:	4544      	cmp	r4, r8
 8010c1a:	d936      	bls.n	8010c8a <__hexnan+0x112>
 8010c1c:	f1a8 0204 	sub.w	r2, r8, #4
 8010c20:	4623      	mov	r3, r4
 8010c22:	f853 1b04 	ldr.w	r1, [r3], #4
 8010c26:	f842 1f04 	str.w	r1, [r2, #4]!
 8010c2a:	429f      	cmp	r7, r3
 8010c2c:	d2f9      	bcs.n	8010c22 <__hexnan+0xaa>
 8010c2e:	1b3b      	subs	r3, r7, r4
 8010c30:	f023 0303 	bic.w	r3, r3, #3
 8010c34:	3304      	adds	r3, #4
 8010c36:	3401      	adds	r4, #1
 8010c38:	3e03      	subs	r6, #3
 8010c3a:	42b4      	cmp	r4, r6
 8010c3c:	bf88      	it	hi
 8010c3e:	2304      	movhi	r3, #4
 8010c40:	4443      	add	r3, r8
 8010c42:	2200      	movs	r2, #0
 8010c44:	f843 2b04 	str.w	r2, [r3], #4
 8010c48:	429f      	cmp	r7, r3
 8010c4a:	d2fb      	bcs.n	8010c44 <__hexnan+0xcc>
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	b91b      	cbnz	r3, 8010c58 <__hexnan+0xe0>
 8010c50:	4547      	cmp	r7, r8
 8010c52:	d128      	bne.n	8010ca6 <__hexnan+0x12e>
 8010c54:	2301      	movs	r3, #1
 8010c56:	603b      	str	r3, [r7, #0]
 8010c58:	2005      	movs	r0, #5
 8010c5a:	b007      	add	sp, #28
 8010c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c60:	3501      	adds	r5, #1
 8010c62:	2d08      	cmp	r5, #8
 8010c64:	f10b 0b01 	add.w	fp, fp, #1
 8010c68:	dd06      	ble.n	8010c78 <__hexnan+0x100>
 8010c6a:	4544      	cmp	r4, r8
 8010c6c:	d9c1      	bls.n	8010bf2 <__hexnan+0x7a>
 8010c6e:	2300      	movs	r3, #0
 8010c70:	f844 3c04 	str.w	r3, [r4, #-4]
 8010c74:	2501      	movs	r5, #1
 8010c76:	3c04      	subs	r4, #4
 8010c78:	6822      	ldr	r2, [r4, #0]
 8010c7a:	f000 000f 	and.w	r0, r0, #15
 8010c7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010c82:	6020      	str	r0, [r4, #0]
 8010c84:	e7b5      	b.n	8010bf2 <__hexnan+0x7a>
 8010c86:	2508      	movs	r5, #8
 8010c88:	e7b3      	b.n	8010bf2 <__hexnan+0x7a>
 8010c8a:	9b01      	ldr	r3, [sp, #4]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d0dd      	beq.n	8010c4c <__hexnan+0xd4>
 8010c90:	f1c3 0320 	rsb	r3, r3, #32
 8010c94:	f04f 32ff 	mov.w	r2, #4294967295
 8010c98:	40da      	lsrs	r2, r3
 8010c9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010c9e:	4013      	ands	r3, r2
 8010ca0:	f846 3c04 	str.w	r3, [r6, #-4]
 8010ca4:	e7d2      	b.n	8010c4c <__hexnan+0xd4>
 8010ca6:	3f04      	subs	r7, #4
 8010ca8:	e7d0      	b.n	8010c4c <__hexnan+0xd4>
 8010caa:	2004      	movs	r0, #4
 8010cac:	e7d5      	b.n	8010c5a <__hexnan+0xe2>
	...

08010cb0 <malloc>:
 8010cb0:	4b02      	ldr	r3, [pc, #8]	@ (8010cbc <malloc+0xc>)
 8010cb2:	4601      	mov	r1, r0
 8010cb4:	6818      	ldr	r0, [r3, #0]
 8010cb6:	f000 b825 	b.w	8010d04 <_malloc_r>
 8010cba:	bf00      	nop
 8010cbc:	20000198 	.word	0x20000198

08010cc0 <sbrk_aligned>:
 8010cc0:	b570      	push	{r4, r5, r6, lr}
 8010cc2:	4e0f      	ldr	r6, [pc, #60]	@ (8010d00 <sbrk_aligned+0x40>)
 8010cc4:	460c      	mov	r4, r1
 8010cc6:	6831      	ldr	r1, [r6, #0]
 8010cc8:	4605      	mov	r5, r0
 8010cca:	b911      	cbnz	r1, 8010cd2 <sbrk_aligned+0x12>
 8010ccc:	f001 f9f8 	bl	80120c0 <_sbrk_r>
 8010cd0:	6030      	str	r0, [r6, #0]
 8010cd2:	4621      	mov	r1, r4
 8010cd4:	4628      	mov	r0, r5
 8010cd6:	f001 f9f3 	bl	80120c0 <_sbrk_r>
 8010cda:	1c43      	adds	r3, r0, #1
 8010cdc:	d103      	bne.n	8010ce6 <sbrk_aligned+0x26>
 8010cde:	f04f 34ff 	mov.w	r4, #4294967295
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	bd70      	pop	{r4, r5, r6, pc}
 8010ce6:	1cc4      	adds	r4, r0, #3
 8010ce8:	f024 0403 	bic.w	r4, r4, #3
 8010cec:	42a0      	cmp	r0, r4
 8010cee:	d0f8      	beq.n	8010ce2 <sbrk_aligned+0x22>
 8010cf0:	1a21      	subs	r1, r4, r0
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	f001 f9e4 	bl	80120c0 <_sbrk_r>
 8010cf8:	3001      	adds	r0, #1
 8010cfa:	d1f2      	bne.n	8010ce2 <sbrk_aligned+0x22>
 8010cfc:	e7ef      	b.n	8010cde <sbrk_aligned+0x1e>
 8010cfe:	bf00      	nop
 8010d00:	20003930 	.word	0x20003930

08010d04 <_malloc_r>:
 8010d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d08:	1ccd      	adds	r5, r1, #3
 8010d0a:	f025 0503 	bic.w	r5, r5, #3
 8010d0e:	3508      	adds	r5, #8
 8010d10:	2d0c      	cmp	r5, #12
 8010d12:	bf38      	it	cc
 8010d14:	250c      	movcc	r5, #12
 8010d16:	2d00      	cmp	r5, #0
 8010d18:	4606      	mov	r6, r0
 8010d1a:	db01      	blt.n	8010d20 <_malloc_r+0x1c>
 8010d1c:	42a9      	cmp	r1, r5
 8010d1e:	d904      	bls.n	8010d2a <_malloc_r+0x26>
 8010d20:	230c      	movs	r3, #12
 8010d22:	6033      	str	r3, [r6, #0]
 8010d24:	2000      	movs	r0, #0
 8010d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010e00 <_malloc_r+0xfc>
 8010d2e:	f000 f87b 	bl	8010e28 <__malloc_lock>
 8010d32:	f8d8 3000 	ldr.w	r3, [r8]
 8010d36:	461c      	mov	r4, r3
 8010d38:	bb44      	cbnz	r4, 8010d8c <_malloc_r+0x88>
 8010d3a:	4629      	mov	r1, r5
 8010d3c:	4630      	mov	r0, r6
 8010d3e:	f7ff ffbf 	bl	8010cc0 <sbrk_aligned>
 8010d42:	1c43      	adds	r3, r0, #1
 8010d44:	4604      	mov	r4, r0
 8010d46:	d158      	bne.n	8010dfa <_malloc_r+0xf6>
 8010d48:	f8d8 4000 	ldr.w	r4, [r8]
 8010d4c:	4627      	mov	r7, r4
 8010d4e:	2f00      	cmp	r7, #0
 8010d50:	d143      	bne.n	8010dda <_malloc_r+0xd6>
 8010d52:	2c00      	cmp	r4, #0
 8010d54:	d04b      	beq.n	8010dee <_malloc_r+0xea>
 8010d56:	6823      	ldr	r3, [r4, #0]
 8010d58:	4639      	mov	r1, r7
 8010d5a:	4630      	mov	r0, r6
 8010d5c:	eb04 0903 	add.w	r9, r4, r3
 8010d60:	f001 f9ae 	bl	80120c0 <_sbrk_r>
 8010d64:	4581      	cmp	r9, r0
 8010d66:	d142      	bne.n	8010dee <_malloc_r+0xea>
 8010d68:	6821      	ldr	r1, [r4, #0]
 8010d6a:	1a6d      	subs	r5, r5, r1
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	4630      	mov	r0, r6
 8010d70:	f7ff ffa6 	bl	8010cc0 <sbrk_aligned>
 8010d74:	3001      	adds	r0, #1
 8010d76:	d03a      	beq.n	8010dee <_malloc_r+0xea>
 8010d78:	6823      	ldr	r3, [r4, #0]
 8010d7a:	442b      	add	r3, r5
 8010d7c:	6023      	str	r3, [r4, #0]
 8010d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8010d82:	685a      	ldr	r2, [r3, #4]
 8010d84:	bb62      	cbnz	r2, 8010de0 <_malloc_r+0xdc>
 8010d86:	f8c8 7000 	str.w	r7, [r8]
 8010d8a:	e00f      	b.n	8010dac <_malloc_r+0xa8>
 8010d8c:	6822      	ldr	r2, [r4, #0]
 8010d8e:	1b52      	subs	r2, r2, r5
 8010d90:	d420      	bmi.n	8010dd4 <_malloc_r+0xd0>
 8010d92:	2a0b      	cmp	r2, #11
 8010d94:	d917      	bls.n	8010dc6 <_malloc_r+0xc2>
 8010d96:	1961      	adds	r1, r4, r5
 8010d98:	42a3      	cmp	r3, r4
 8010d9a:	6025      	str	r5, [r4, #0]
 8010d9c:	bf18      	it	ne
 8010d9e:	6059      	strne	r1, [r3, #4]
 8010da0:	6863      	ldr	r3, [r4, #4]
 8010da2:	bf08      	it	eq
 8010da4:	f8c8 1000 	streq.w	r1, [r8]
 8010da8:	5162      	str	r2, [r4, r5]
 8010daa:	604b      	str	r3, [r1, #4]
 8010dac:	4630      	mov	r0, r6
 8010dae:	f000 f841 	bl	8010e34 <__malloc_unlock>
 8010db2:	f104 000b 	add.w	r0, r4, #11
 8010db6:	1d23      	adds	r3, r4, #4
 8010db8:	f020 0007 	bic.w	r0, r0, #7
 8010dbc:	1ac2      	subs	r2, r0, r3
 8010dbe:	bf1c      	itt	ne
 8010dc0:	1a1b      	subne	r3, r3, r0
 8010dc2:	50a3      	strne	r3, [r4, r2]
 8010dc4:	e7af      	b.n	8010d26 <_malloc_r+0x22>
 8010dc6:	6862      	ldr	r2, [r4, #4]
 8010dc8:	42a3      	cmp	r3, r4
 8010dca:	bf0c      	ite	eq
 8010dcc:	f8c8 2000 	streq.w	r2, [r8]
 8010dd0:	605a      	strne	r2, [r3, #4]
 8010dd2:	e7eb      	b.n	8010dac <_malloc_r+0xa8>
 8010dd4:	4623      	mov	r3, r4
 8010dd6:	6864      	ldr	r4, [r4, #4]
 8010dd8:	e7ae      	b.n	8010d38 <_malloc_r+0x34>
 8010dda:	463c      	mov	r4, r7
 8010ddc:	687f      	ldr	r7, [r7, #4]
 8010dde:	e7b6      	b.n	8010d4e <_malloc_r+0x4a>
 8010de0:	461a      	mov	r2, r3
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	42a3      	cmp	r3, r4
 8010de6:	d1fb      	bne.n	8010de0 <_malloc_r+0xdc>
 8010de8:	2300      	movs	r3, #0
 8010dea:	6053      	str	r3, [r2, #4]
 8010dec:	e7de      	b.n	8010dac <_malloc_r+0xa8>
 8010dee:	230c      	movs	r3, #12
 8010df0:	6033      	str	r3, [r6, #0]
 8010df2:	4630      	mov	r0, r6
 8010df4:	f000 f81e 	bl	8010e34 <__malloc_unlock>
 8010df8:	e794      	b.n	8010d24 <_malloc_r+0x20>
 8010dfa:	6005      	str	r5, [r0, #0]
 8010dfc:	e7d6      	b.n	8010dac <_malloc_r+0xa8>
 8010dfe:	bf00      	nop
 8010e00:	20003934 	.word	0x20003934

08010e04 <__ascii_mbtowc>:
 8010e04:	b082      	sub	sp, #8
 8010e06:	b901      	cbnz	r1, 8010e0a <__ascii_mbtowc+0x6>
 8010e08:	a901      	add	r1, sp, #4
 8010e0a:	b142      	cbz	r2, 8010e1e <__ascii_mbtowc+0x1a>
 8010e0c:	b14b      	cbz	r3, 8010e22 <__ascii_mbtowc+0x1e>
 8010e0e:	7813      	ldrb	r3, [r2, #0]
 8010e10:	600b      	str	r3, [r1, #0]
 8010e12:	7812      	ldrb	r2, [r2, #0]
 8010e14:	1e10      	subs	r0, r2, #0
 8010e16:	bf18      	it	ne
 8010e18:	2001      	movne	r0, #1
 8010e1a:	b002      	add	sp, #8
 8010e1c:	4770      	bx	lr
 8010e1e:	4610      	mov	r0, r2
 8010e20:	e7fb      	b.n	8010e1a <__ascii_mbtowc+0x16>
 8010e22:	f06f 0001 	mvn.w	r0, #1
 8010e26:	e7f8      	b.n	8010e1a <__ascii_mbtowc+0x16>

08010e28 <__malloc_lock>:
 8010e28:	4801      	ldr	r0, [pc, #4]	@ (8010e30 <__malloc_lock+0x8>)
 8010e2a:	f7fe bd32 	b.w	800f892 <__retarget_lock_acquire_recursive>
 8010e2e:	bf00      	nop
 8010e30:	2000392c 	.word	0x2000392c

08010e34 <__malloc_unlock>:
 8010e34:	4801      	ldr	r0, [pc, #4]	@ (8010e3c <__malloc_unlock+0x8>)
 8010e36:	f7fe bd2d 	b.w	800f894 <__retarget_lock_release_recursive>
 8010e3a:	bf00      	nop
 8010e3c:	2000392c 	.word	0x2000392c

08010e40 <_Balloc>:
 8010e40:	b570      	push	{r4, r5, r6, lr}
 8010e42:	69c6      	ldr	r6, [r0, #28]
 8010e44:	4604      	mov	r4, r0
 8010e46:	460d      	mov	r5, r1
 8010e48:	b976      	cbnz	r6, 8010e68 <_Balloc+0x28>
 8010e4a:	2010      	movs	r0, #16
 8010e4c:	f7ff ff30 	bl	8010cb0 <malloc>
 8010e50:	4602      	mov	r2, r0
 8010e52:	61e0      	str	r0, [r4, #28]
 8010e54:	b920      	cbnz	r0, 8010e60 <_Balloc+0x20>
 8010e56:	4b18      	ldr	r3, [pc, #96]	@ (8010eb8 <_Balloc+0x78>)
 8010e58:	4818      	ldr	r0, [pc, #96]	@ (8010ebc <_Balloc+0x7c>)
 8010e5a:	216b      	movs	r1, #107	@ 0x6b
 8010e5c:	f7fe fd3a 	bl	800f8d4 <__assert_func>
 8010e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e64:	6006      	str	r6, [r0, #0]
 8010e66:	60c6      	str	r6, [r0, #12]
 8010e68:	69e6      	ldr	r6, [r4, #28]
 8010e6a:	68f3      	ldr	r3, [r6, #12]
 8010e6c:	b183      	cbz	r3, 8010e90 <_Balloc+0x50>
 8010e6e:	69e3      	ldr	r3, [r4, #28]
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e76:	b9b8      	cbnz	r0, 8010ea8 <_Balloc+0x68>
 8010e78:	2101      	movs	r1, #1
 8010e7a:	fa01 f605 	lsl.w	r6, r1, r5
 8010e7e:	1d72      	adds	r2, r6, #5
 8010e80:	0092      	lsls	r2, r2, #2
 8010e82:	4620      	mov	r0, r4
 8010e84:	f001 f933 	bl	80120ee <_calloc_r>
 8010e88:	b160      	cbz	r0, 8010ea4 <_Balloc+0x64>
 8010e8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e8e:	e00e      	b.n	8010eae <_Balloc+0x6e>
 8010e90:	2221      	movs	r2, #33	@ 0x21
 8010e92:	2104      	movs	r1, #4
 8010e94:	4620      	mov	r0, r4
 8010e96:	f001 f92a 	bl	80120ee <_calloc_r>
 8010e9a:	69e3      	ldr	r3, [r4, #28]
 8010e9c:	60f0      	str	r0, [r6, #12]
 8010e9e:	68db      	ldr	r3, [r3, #12]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d1e4      	bne.n	8010e6e <_Balloc+0x2e>
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	bd70      	pop	{r4, r5, r6, pc}
 8010ea8:	6802      	ldr	r2, [r0, #0]
 8010eaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010eae:	2300      	movs	r3, #0
 8010eb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010eb4:	e7f7      	b.n	8010ea6 <_Balloc+0x66>
 8010eb6:	bf00      	nop
 8010eb8:	08013299 	.word	0x08013299
 8010ebc:	08013424 	.word	0x08013424

08010ec0 <_Bfree>:
 8010ec0:	b570      	push	{r4, r5, r6, lr}
 8010ec2:	69c6      	ldr	r6, [r0, #28]
 8010ec4:	4605      	mov	r5, r0
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	b976      	cbnz	r6, 8010ee8 <_Bfree+0x28>
 8010eca:	2010      	movs	r0, #16
 8010ecc:	f7ff fef0 	bl	8010cb0 <malloc>
 8010ed0:	4602      	mov	r2, r0
 8010ed2:	61e8      	str	r0, [r5, #28]
 8010ed4:	b920      	cbnz	r0, 8010ee0 <_Bfree+0x20>
 8010ed6:	4b09      	ldr	r3, [pc, #36]	@ (8010efc <_Bfree+0x3c>)
 8010ed8:	4809      	ldr	r0, [pc, #36]	@ (8010f00 <_Bfree+0x40>)
 8010eda:	218f      	movs	r1, #143	@ 0x8f
 8010edc:	f7fe fcfa 	bl	800f8d4 <__assert_func>
 8010ee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ee4:	6006      	str	r6, [r0, #0]
 8010ee6:	60c6      	str	r6, [r0, #12]
 8010ee8:	b13c      	cbz	r4, 8010efa <_Bfree+0x3a>
 8010eea:	69eb      	ldr	r3, [r5, #28]
 8010eec:	6862      	ldr	r2, [r4, #4]
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ef4:	6021      	str	r1, [r4, #0]
 8010ef6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010efa:	bd70      	pop	{r4, r5, r6, pc}
 8010efc:	08013299 	.word	0x08013299
 8010f00:	08013424 	.word	0x08013424

08010f04 <__multadd>:
 8010f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f08:	690d      	ldr	r5, [r1, #16]
 8010f0a:	4607      	mov	r7, r0
 8010f0c:	460c      	mov	r4, r1
 8010f0e:	461e      	mov	r6, r3
 8010f10:	f101 0c14 	add.w	ip, r1, #20
 8010f14:	2000      	movs	r0, #0
 8010f16:	f8dc 3000 	ldr.w	r3, [ip]
 8010f1a:	b299      	uxth	r1, r3
 8010f1c:	fb02 6101 	mla	r1, r2, r1, r6
 8010f20:	0c1e      	lsrs	r6, r3, #16
 8010f22:	0c0b      	lsrs	r3, r1, #16
 8010f24:	fb02 3306 	mla	r3, r2, r6, r3
 8010f28:	b289      	uxth	r1, r1
 8010f2a:	3001      	adds	r0, #1
 8010f2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010f30:	4285      	cmp	r5, r0
 8010f32:	f84c 1b04 	str.w	r1, [ip], #4
 8010f36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010f3a:	dcec      	bgt.n	8010f16 <__multadd+0x12>
 8010f3c:	b30e      	cbz	r6, 8010f82 <__multadd+0x7e>
 8010f3e:	68a3      	ldr	r3, [r4, #8]
 8010f40:	42ab      	cmp	r3, r5
 8010f42:	dc19      	bgt.n	8010f78 <__multadd+0x74>
 8010f44:	6861      	ldr	r1, [r4, #4]
 8010f46:	4638      	mov	r0, r7
 8010f48:	3101      	adds	r1, #1
 8010f4a:	f7ff ff79 	bl	8010e40 <_Balloc>
 8010f4e:	4680      	mov	r8, r0
 8010f50:	b928      	cbnz	r0, 8010f5e <__multadd+0x5a>
 8010f52:	4602      	mov	r2, r0
 8010f54:	4b0c      	ldr	r3, [pc, #48]	@ (8010f88 <__multadd+0x84>)
 8010f56:	480d      	ldr	r0, [pc, #52]	@ (8010f8c <__multadd+0x88>)
 8010f58:	21ba      	movs	r1, #186	@ 0xba
 8010f5a:	f7fe fcbb 	bl	800f8d4 <__assert_func>
 8010f5e:	6922      	ldr	r2, [r4, #16]
 8010f60:	3202      	adds	r2, #2
 8010f62:	f104 010c 	add.w	r1, r4, #12
 8010f66:	0092      	lsls	r2, r2, #2
 8010f68:	300c      	adds	r0, #12
 8010f6a:	f7fe fc94 	bl	800f896 <memcpy>
 8010f6e:	4621      	mov	r1, r4
 8010f70:	4638      	mov	r0, r7
 8010f72:	f7ff ffa5 	bl	8010ec0 <_Bfree>
 8010f76:	4644      	mov	r4, r8
 8010f78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f7c:	3501      	adds	r5, #1
 8010f7e:	615e      	str	r6, [r3, #20]
 8010f80:	6125      	str	r5, [r4, #16]
 8010f82:	4620      	mov	r0, r4
 8010f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f88:	080133b3 	.word	0x080133b3
 8010f8c:	08013424 	.word	0x08013424

08010f90 <__s2b>:
 8010f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f94:	460c      	mov	r4, r1
 8010f96:	4615      	mov	r5, r2
 8010f98:	461f      	mov	r7, r3
 8010f9a:	2209      	movs	r2, #9
 8010f9c:	3308      	adds	r3, #8
 8010f9e:	4606      	mov	r6, r0
 8010fa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fa4:	2100      	movs	r1, #0
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	db09      	blt.n	8010fc0 <__s2b+0x30>
 8010fac:	4630      	mov	r0, r6
 8010fae:	f7ff ff47 	bl	8010e40 <_Balloc>
 8010fb2:	b940      	cbnz	r0, 8010fc6 <__s2b+0x36>
 8010fb4:	4602      	mov	r2, r0
 8010fb6:	4b19      	ldr	r3, [pc, #100]	@ (801101c <__s2b+0x8c>)
 8010fb8:	4819      	ldr	r0, [pc, #100]	@ (8011020 <__s2b+0x90>)
 8010fba:	21d3      	movs	r1, #211	@ 0xd3
 8010fbc:	f7fe fc8a 	bl	800f8d4 <__assert_func>
 8010fc0:	0052      	lsls	r2, r2, #1
 8010fc2:	3101      	adds	r1, #1
 8010fc4:	e7f0      	b.n	8010fa8 <__s2b+0x18>
 8010fc6:	9b08      	ldr	r3, [sp, #32]
 8010fc8:	6143      	str	r3, [r0, #20]
 8010fca:	2d09      	cmp	r5, #9
 8010fcc:	f04f 0301 	mov.w	r3, #1
 8010fd0:	6103      	str	r3, [r0, #16]
 8010fd2:	dd16      	ble.n	8011002 <__s2b+0x72>
 8010fd4:	f104 0909 	add.w	r9, r4, #9
 8010fd8:	46c8      	mov	r8, r9
 8010fda:	442c      	add	r4, r5
 8010fdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010fe0:	4601      	mov	r1, r0
 8010fe2:	3b30      	subs	r3, #48	@ 0x30
 8010fe4:	220a      	movs	r2, #10
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	f7ff ff8c 	bl	8010f04 <__multadd>
 8010fec:	45a0      	cmp	r8, r4
 8010fee:	d1f5      	bne.n	8010fdc <__s2b+0x4c>
 8010ff0:	f1a5 0408 	sub.w	r4, r5, #8
 8010ff4:	444c      	add	r4, r9
 8010ff6:	1b2d      	subs	r5, r5, r4
 8010ff8:	1963      	adds	r3, r4, r5
 8010ffa:	42bb      	cmp	r3, r7
 8010ffc:	db04      	blt.n	8011008 <__s2b+0x78>
 8010ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011002:	340a      	adds	r4, #10
 8011004:	2509      	movs	r5, #9
 8011006:	e7f6      	b.n	8010ff6 <__s2b+0x66>
 8011008:	f814 3b01 	ldrb.w	r3, [r4], #1
 801100c:	4601      	mov	r1, r0
 801100e:	3b30      	subs	r3, #48	@ 0x30
 8011010:	220a      	movs	r2, #10
 8011012:	4630      	mov	r0, r6
 8011014:	f7ff ff76 	bl	8010f04 <__multadd>
 8011018:	e7ee      	b.n	8010ff8 <__s2b+0x68>
 801101a:	bf00      	nop
 801101c:	080133b3 	.word	0x080133b3
 8011020:	08013424 	.word	0x08013424

08011024 <__hi0bits>:
 8011024:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011028:	4603      	mov	r3, r0
 801102a:	bf36      	itet	cc
 801102c:	0403      	lslcc	r3, r0, #16
 801102e:	2000      	movcs	r0, #0
 8011030:	2010      	movcc	r0, #16
 8011032:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011036:	bf3c      	itt	cc
 8011038:	021b      	lslcc	r3, r3, #8
 801103a:	3008      	addcc	r0, #8
 801103c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011040:	bf3c      	itt	cc
 8011042:	011b      	lslcc	r3, r3, #4
 8011044:	3004      	addcc	r0, #4
 8011046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801104a:	bf3c      	itt	cc
 801104c:	009b      	lslcc	r3, r3, #2
 801104e:	3002      	addcc	r0, #2
 8011050:	2b00      	cmp	r3, #0
 8011052:	db05      	blt.n	8011060 <__hi0bits+0x3c>
 8011054:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011058:	f100 0001 	add.w	r0, r0, #1
 801105c:	bf08      	it	eq
 801105e:	2020      	moveq	r0, #32
 8011060:	4770      	bx	lr

08011062 <__lo0bits>:
 8011062:	6803      	ldr	r3, [r0, #0]
 8011064:	4602      	mov	r2, r0
 8011066:	f013 0007 	ands.w	r0, r3, #7
 801106a:	d00b      	beq.n	8011084 <__lo0bits+0x22>
 801106c:	07d9      	lsls	r1, r3, #31
 801106e:	d421      	bmi.n	80110b4 <__lo0bits+0x52>
 8011070:	0798      	lsls	r0, r3, #30
 8011072:	bf49      	itett	mi
 8011074:	085b      	lsrmi	r3, r3, #1
 8011076:	089b      	lsrpl	r3, r3, #2
 8011078:	2001      	movmi	r0, #1
 801107a:	6013      	strmi	r3, [r2, #0]
 801107c:	bf5c      	itt	pl
 801107e:	6013      	strpl	r3, [r2, #0]
 8011080:	2002      	movpl	r0, #2
 8011082:	4770      	bx	lr
 8011084:	b299      	uxth	r1, r3
 8011086:	b909      	cbnz	r1, 801108c <__lo0bits+0x2a>
 8011088:	0c1b      	lsrs	r3, r3, #16
 801108a:	2010      	movs	r0, #16
 801108c:	b2d9      	uxtb	r1, r3
 801108e:	b909      	cbnz	r1, 8011094 <__lo0bits+0x32>
 8011090:	3008      	adds	r0, #8
 8011092:	0a1b      	lsrs	r3, r3, #8
 8011094:	0719      	lsls	r1, r3, #28
 8011096:	bf04      	itt	eq
 8011098:	091b      	lsreq	r3, r3, #4
 801109a:	3004      	addeq	r0, #4
 801109c:	0799      	lsls	r1, r3, #30
 801109e:	bf04      	itt	eq
 80110a0:	089b      	lsreq	r3, r3, #2
 80110a2:	3002      	addeq	r0, #2
 80110a4:	07d9      	lsls	r1, r3, #31
 80110a6:	d403      	bmi.n	80110b0 <__lo0bits+0x4e>
 80110a8:	085b      	lsrs	r3, r3, #1
 80110aa:	f100 0001 	add.w	r0, r0, #1
 80110ae:	d003      	beq.n	80110b8 <__lo0bits+0x56>
 80110b0:	6013      	str	r3, [r2, #0]
 80110b2:	4770      	bx	lr
 80110b4:	2000      	movs	r0, #0
 80110b6:	4770      	bx	lr
 80110b8:	2020      	movs	r0, #32
 80110ba:	4770      	bx	lr

080110bc <__i2b>:
 80110bc:	b510      	push	{r4, lr}
 80110be:	460c      	mov	r4, r1
 80110c0:	2101      	movs	r1, #1
 80110c2:	f7ff febd 	bl	8010e40 <_Balloc>
 80110c6:	4602      	mov	r2, r0
 80110c8:	b928      	cbnz	r0, 80110d6 <__i2b+0x1a>
 80110ca:	4b05      	ldr	r3, [pc, #20]	@ (80110e0 <__i2b+0x24>)
 80110cc:	4805      	ldr	r0, [pc, #20]	@ (80110e4 <__i2b+0x28>)
 80110ce:	f240 1145 	movw	r1, #325	@ 0x145
 80110d2:	f7fe fbff 	bl	800f8d4 <__assert_func>
 80110d6:	2301      	movs	r3, #1
 80110d8:	6144      	str	r4, [r0, #20]
 80110da:	6103      	str	r3, [r0, #16]
 80110dc:	bd10      	pop	{r4, pc}
 80110de:	bf00      	nop
 80110e0:	080133b3 	.word	0x080133b3
 80110e4:	08013424 	.word	0x08013424

080110e8 <__multiply>:
 80110e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ec:	4614      	mov	r4, r2
 80110ee:	690a      	ldr	r2, [r1, #16]
 80110f0:	6923      	ldr	r3, [r4, #16]
 80110f2:	429a      	cmp	r2, r3
 80110f4:	bfa8      	it	ge
 80110f6:	4623      	movge	r3, r4
 80110f8:	460f      	mov	r7, r1
 80110fa:	bfa4      	itt	ge
 80110fc:	460c      	movge	r4, r1
 80110fe:	461f      	movge	r7, r3
 8011100:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011104:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011108:	68a3      	ldr	r3, [r4, #8]
 801110a:	6861      	ldr	r1, [r4, #4]
 801110c:	eb0a 0609 	add.w	r6, sl, r9
 8011110:	42b3      	cmp	r3, r6
 8011112:	b085      	sub	sp, #20
 8011114:	bfb8      	it	lt
 8011116:	3101      	addlt	r1, #1
 8011118:	f7ff fe92 	bl	8010e40 <_Balloc>
 801111c:	b930      	cbnz	r0, 801112c <__multiply+0x44>
 801111e:	4602      	mov	r2, r0
 8011120:	4b44      	ldr	r3, [pc, #272]	@ (8011234 <__multiply+0x14c>)
 8011122:	4845      	ldr	r0, [pc, #276]	@ (8011238 <__multiply+0x150>)
 8011124:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011128:	f7fe fbd4 	bl	800f8d4 <__assert_func>
 801112c:	f100 0514 	add.w	r5, r0, #20
 8011130:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011134:	462b      	mov	r3, r5
 8011136:	2200      	movs	r2, #0
 8011138:	4543      	cmp	r3, r8
 801113a:	d321      	bcc.n	8011180 <__multiply+0x98>
 801113c:	f107 0114 	add.w	r1, r7, #20
 8011140:	f104 0214 	add.w	r2, r4, #20
 8011144:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011148:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801114c:	9302      	str	r3, [sp, #8]
 801114e:	1b13      	subs	r3, r2, r4
 8011150:	3b15      	subs	r3, #21
 8011152:	f023 0303 	bic.w	r3, r3, #3
 8011156:	3304      	adds	r3, #4
 8011158:	f104 0715 	add.w	r7, r4, #21
 801115c:	42ba      	cmp	r2, r7
 801115e:	bf38      	it	cc
 8011160:	2304      	movcc	r3, #4
 8011162:	9301      	str	r3, [sp, #4]
 8011164:	9b02      	ldr	r3, [sp, #8]
 8011166:	9103      	str	r1, [sp, #12]
 8011168:	428b      	cmp	r3, r1
 801116a:	d80c      	bhi.n	8011186 <__multiply+0x9e>
 801116c:	2e00      	cmp	r6, #0
 801116e:	dd03      	ble.n	8011178 <__multiply+0x90>
 8011170:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011174:	2b00      	cmp	r3, #0
 8011176:	d05b      	beq.n	8011230 <__multiply+0x148>
 8011178:	6106      	str	r6, [r0, #16]
 801117a:	b005      	add	sp, #20
 801117c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011180:	f843 2b04 	str.w	r2, [r3], #4
 8011184:	e7d8      	b.n	8011138 <__multiply+0x50>
 8011186:	f8b1 a000 	ldrh.w	sl, [r1]
 801118a:	f1ba 0f00 	cmp.w	sl, #0
 801118e:	d024      	beq.n	80111da <__multiply+0xf2>
 8011190:	f104 0e14 	add.w	lr, r4, #20
 8011194:	46a9      	mov	r9, r5
 8011196:	f04f 0c00 	mov.w	ip, #0
 801119a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801119e:	f8d9 3000 	ldr.w	r3, [r9]
 80111a2:	fa1f fb87 	uxth.w	fp, r7
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80111ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80111b0:	f8d9 7000 	ldr.w	r7, [r9]
 80111b4:	4463      	add	r3, ip
 80111b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80111ba:	fb0a c70b 	mla	r7, sl, fp, ip
 80111be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80111c8:	4572      	cmp	r2, lr
 80111ca:	f849 3b04 	str.w	r3, [r9], #4
 80111ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80111d2:	d8e2      	bhi.n	801119a <__multiply+0xb2>
 80111d4:	9b01      	ldr	r3, [sp, #4]
 80111d6:	f845 c003 	str.w	ip, [r5, r3]
 80111da:	9b03      	ldr	r3, [sp, #12]
 80111dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80111e0:	3104      	adds	r1, #4
 80111e2:	f1b9 0f00 	cmp.w	r9, #0
 80111e6:	d021      	beq.n	801122c <__multiply+0x144>
 80111e8:	682b      	ldr	r3, [r5, #0]
 80111ea:	f104 0c14 	add.w	ip, r4, #20
 80111ee:	46ae      	mov	lr, r5
 80111f0:	f04f 0a00 	mov.w	sl, #0
 80111f4:	f8bc b000 	ldrh.w	fp, [ip]
 80111f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80111fc:	fb09 770b 	mla	r7, r9, fp, r7
 8011200:	4457      	add	r7, sl
 8011202:	b29b      	uxth	r3, r3
 8011204:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011208:	f84e 3b04 	str.w	r3, [lr], #4
 801120c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011210:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011214:	f8be 3000 	ldrh.w	r3, [lr]
 8011218:	fb09 330a 	mla	r3, r9, sl, r3
 801121c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011220:	4562      	cmp	r2, ip
 8011222:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011226:	d8e5      	bhi.n	80111f4 <__multiply+0x10c>
 8011228:	9f01      	ldr	r7, [sp, #4]
 801122a:	51eb      	str	r3, [r5, r7]
 801122c:	3504      	adds	r5, #4
 801122e:	e799      	b.n	8011164 <__multiply+0x7c>
 8011230:	3e01      	subs	r6, #1
 8011232:	e79b      	b.n	801116c <__multiply+0x84>
 8011234:	080133b3 	.word	0x080133b3
 8011238:	08013424 	.word	0x08013424

0801123c <__pow5mult>:
 801123c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011240:	4615      	mov	r5, r2
 8011242:	f012 0203 	ands.w	r2, r2, #3
 8011246:	4607      	mov	r7, r0
 8011248:	460e      	mov	r6, r1
 801124a:	d007      	beq.n	801125c <__pow5mult+0x20>
 801124c:	4c25      	ldr	r4, [pc, #148]	@ (80112e4 <__pow5mult+0xa8>)
 801124e:	3a01      	subs	r2, #1
 8011250:	2300      	movs	r3, #0
 8011252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011256:	f7ff fe55 	bl	8010f04 <__multadd>
 801125a:	4606      	mov	r6, r0
 801125c:	10ad      	asrs	r5, r5, #2
 801125e:	d03d      	beq.n	80112dc <__pow5mult+0xa0>
 8011260:	69fc      	ldr	r4, [r7, #28]
 8011262:	b97c      	cbnz	r4, 8011284 <__pow5mult+0x48>
 8011264:	2010      	movs	r0, #16
 8011266:	f7ff fd23 	bl	8010cb0 <malloc>
 801126a:	4602      	mov	r2, r0
 801126c:	61f8      	str	r0, [r7, #28]
 801126e:	b928      	cbnz	r0, 801127c <__pow5mult+0x40>
 8011270:	4b1d      	ldr	r3, [pc, #116]	@ (80112e8 <__pow5mult+0xac>)
 8011272:	481e      	ldr	r0, [pc, #120]	@ (80112ec <__pow5mult+0xb0>)
 8011274:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011278:	f7fe fb2c 	bl	800f8d4 <__assert_func>
 801127c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011280:	6004      	str	r4, [r0, #0]
 8011282:	60c4      	str	r4, [r0, #12]
 8011284:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801128c:	b94c      	cbnz	r4, 80112a2 <__pow5mult+0x66>
 801128e:	f240 2171 	movw	r1, #625	@ 0x271
 8011292:	4638      	mov	r0, r7
 8011294:	f7ff ff12 	bl	80110bc <__i2b>
 8011298:	2300      	movs	r3, #0
 801129a:	f8c8 0008 	str.w	r0, [r8, #8]
 801129e:	4604      	mov	r4, r0
 80112a0:	6003      	str	r3, [r0, #0]
 80112a2:	f04f 0900 	mov.w	r9, #0
 80112a6:	07eb      	lsls	r3, r5, #31
 80112a8:	d50a      	bpl.n	80112c0 <__pow5mult+0x84>
 80112aa:	4631      	mov	r1, r6
 80112ac:	4622      	mov	r2, r4
 80112ae:	4638      	mov	r0, r7
 80112b0:	f7ff ff1a 	bl	80110e8 <__multiply>
 80112b4:	4631      	mov	r1, r6
 80112b6:	4680      	mov	r8, r0
 80112b8:	4638      	mov	r0, r7
 80112ba:	f7ff fe01 	bl	8010ec0 <_Bfree>
 80112be:	4646      	mov	r6, r8
 80112c0:	106d      	asrs	r5, r5, #1
 80112c2:	d00b      	beq.n	80112dc <__pow5mult+0xa0>
 80112c4:	6820      	ldr	r0, [r4, #0]
 80112c6:	b938      	cbnz	r0, 80112d8 <__pow5mult+0x9c>
 80112c8:	4622      	mov	r2, r4
 80112ca:	4621      	mov	r1, r4
 80112cc:	4638      	mov	r0, r7
 80112ce:	f7ff ff0b 	bl	80110e8 <__multiply>
 80112d2:	6020      	str	r0, [r4, #0]
 80112d4:	f8c0 9000 	str.w	r9, [r0]
 80112d8:	4604      	mov	r4, r0
 80112da:	e7e4      	b.n	80112a6 <__pow5mult+0x6a>
 80112dc:	4630      	mov	r0, r6
 80112de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112e2:	bf00      	nop
 80112e4:	08013480 	.word	0x08013480
 80112e8:	08013299 	.word	0x08013299
 80112ec:	08013424 	.word	0x08013424

080112f0 <__lshift>:
 80112f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112f4:	460c      	mov	r4, r1
 80112f6:	6849      	ldr	r1, [r1, #4]
 80112f8:	6923      	ldr	r3, [r4, #16]
 80112fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80112fe:	68a3      	ldr	r3, [r4, #8]
 8011300:	4607      	mov	r7, r0
 8011302:	4691      	mov	r9, r2
 8011304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011308:	f108 0601 	add.w	r6, r8, #1
 801130c:	42b3      	cmp	r3, r6
 801130e:	db0b      	blt.n	8011328 <__lshift+0x38>
 8011310:	4638      	mov	r0, r7
 8011312:	f7ff fd95 	bl	8010e40 <_Balloc>
 8011316:	4605      	mov	r5, r0
 8011318:	b948      	cbnz	r0, 801132e <__lshift+0x3e>
 801131a:	4602      	mov	r2, r0
 801131c:	4b28      	ldr	r3, [pc, #160]	@ (80113c0 <__lshift+0xd0>)
 801131e:	4829      	ldr	r0, [pc, #164]	@ (80113c4 <__lshift+0xd4>)
 8011320:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011324:	f7fe fad6 	bl	800f8d4 <__assert_func>
 8011328:	3101      	adds	r1, #1
 801132a:	005b      	lsls	r3, r3, #1
 801132c:	e7ee      	b.n	801130c <__lshift+0x1c>
 801132e:	2300      	movs	r3, #0
 8011330:	f100 0114 	add.w	r1, r0, #20
 8011334:	f100 0210 	add.w	r2, r0, #16
 8011338:	4618      	mov	r0, r3
 801133a:	4553      	cmp	r3, sl
 801133c:	db33      	blt.n	80113a6 <__lshift+0xb6>
 801133e:	6920      	ldr	r0, [r4, #16]
 8011340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011344:	f104 0314 	add.w	r3, r4, #20
 8011348:	f019 091f 	ands.w	r9, r9, #31
 801134c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011350:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011354:	d02b      	beq.n	80113ae <__lshift+0xbe>
 8011356:	f1c9 0e20 	rsb	lr, r9, #32
 801135a:	468a      	mov	sl, r1
 801135c:	2200      	movs	r2, #0
 801135e:	6818      	ldr	r0, [r3, #0]
 8011360:	fa00 f009 	lsl.w	r0, r0, r9
 8011364:	4310      	orrs	r0, r2
 8011366:	f84a 0b04 	str.w	r0, [sl], #4
 801136a:	f853 2b04 	ldr.w	r2, [r3], #4
 801136e:	459c      	cmp	ip, r3
 8011370:	fa22 f20e 	lsr.w	r2, r2, lr
 8011374:	d8f3      	bhi.n	801135e <__lshift+0x6e>
 8011376:	ebac 0304 	sub.w	r3, ip, r4
 801137a:	3b15      	subs	r3, #21
 801137c:	f023 0303 	bic.w	r3, r3, #3
 8011380:	3304      	adds	r3, #4
 8011382:	f104 0015 	add.w	r0, r4, #21
 8011386:	4584      	cmp	ip, r0
 8011388:	bf38      	it	cc
 801138a:	2304      	movcc	r3, #4
 801138c:	50ca      	str	r2, [r1, r3]
 801138e:	b10a      	cbz	r2, 8011394 <__lshift+0xa4>
 8011390:	f108 0602 	add.w	r6, r8, #2
 8011394:	3e01      	subs	r6, #1
 8011396:	4638      	mov	r0, r7
 8011398:	612e      	str	r6, [r5, #16]
 801139a:	4621      	mov	r1, r4
 801139c:	f7ff fd90 	bl	8010ec0 <_Bfree>
 80113a0:	4628      	mov	r0, r5
 80113a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80113aa:	3301      	adds	r3, #1
 80113ac:	e7c5      	b.n	801133a <__lshift+0x4a>
 80113ae:	3904      	subs	r1, #4
 80113b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80113b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80113b8:	459c      	cmp	ip, r3
 80113ba:	d8f9      	bhi.n	80113b0 <__lshift+0xc0>
 80113bc:	e7ea      	b.n	8011394 <__lshift+0xa4>
 80113be:	bf00      	nop
 80113c0:	080133b3 	.word	0x080133b3
 80113c4:	08013424 	.word	0x08013424

080113c8 <__mcmp>:
 80113c8:	690a      	ldr	r2, [r1, #16]
 80113ca:	4603      	mov	r3, r0
 80113cc:	6900      	ldr	r0, [r0, #16]
 80113ce:	1a80      	subs	r0, r0, r2
 80113d0:	b530      	push	{r4, r5, lr}
 80113d2:	d10e      	bne.n	80113f2 <__mcmp+0x2a>
 80113d4:	3314      	adds	r3, #20
 80113d6:	3114      	adds	r1, #20
 80113d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80113dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80113e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80113e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80113e8:	4295      	cmp	r5, r2
 80113ea:	d003      	beq.n	80113f4 <__mcmp+0x2c>
 80113ec:	d205      	bcs.n	80113fa <__mcmp+0x32>
 80113ee:	f04f 30ff 	mov.w	r0, #4294967295
 80113f2:	bd30      	pop	{r4, r5, pc}
 80113f4:	42a3      	cmp	r3, r4
 80113f6:	d3f3      	bcc.n	80113e0 <__mcmp+0x18>
 80113f8:	e7fb      	b.n	80113f2 <__mcmp+0x2a>
 80113fa:	2001      	movs	r0, #1
 80113fc:	e7f9      	b.n	80113f2 <__mcmp+0x2a>
	...

08011400 <__mdiff>:
 8011400:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011404:	4689      	mov	r9, r1
 8011406:	4606      	mov	r6, r0
 8011408:	4611      	mov	r1, r2
 801140a:	4648      	mov	r0, r9
 801140c:	4614      	mov	r4, r2
 801140e:	f7ff ffdb 	bl	80113c8 <__mcmp>
 8011412:	1e05      	subs	r5, r0, #0
 8011414:	d112      	bne.n	801143c <__mdiff+0x3c>
 8011416:	4629      	mov	r1, r5
 8011418:	4630      	mov	r0, r6
 801141a:	f7ff fd11 	bl	8010e40 <_Balloc>
 801141e:	4602      	mov	r2, r0
 8011420:	b928      	cbnz	r0, 801142e <__mdiff+0x2e>
 8011422:	4b3f      	ldr	r3, [pc, #252]	@ (8011520 <__mdiff+0x120>)
 8011424:	f240 2137 	movw	r1, #567	@ 0x237
 8011428:	483e      	ldr	r0, [pc, #248]	@ (8011524 <__mdiff+0x124>)
 801142a:	f7fe fa53 	bl	800f8d4 <__assert_func>
 801142e:	2301      	movs	r3, #1
 8011430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011434:	4610      	mov	r0, r2
 8011436:	b003      	add	sp, #12
 8011438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801143c:	bfbc      	itt	lt
 801143e:	464b      	movlt	r3, r9
 8011440:	46a1      	movlt	r9, r4
 8011442:	4630      	mov	r0, r6
 8011444:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011448:	bfba      	itte	lt
 801144a:	461c      	movlt	r4, r3
 801144c:	2501      	movlt	r5, #1
 801144e:	2500      	movge	r5, #0
 8011450:	f7ff fcf6 	bl	8010e40 <_Balloc>
 8011454:	4602      	mov	r2, r0
 8011456:	b918      	cbnz	r0, 8011460 <__mdiff+0x60>
 8011458:	4b31      	ldr	r3, [pc, #196]	@ (8011520 <__mdiff+0x120>)
 801145a:	f240 2145 	movw	r1, #581	@ 0x245
 801145e:	e7e3      	b.n	8011428 <__mdiff+0x28>
 8011460:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011464:	6926      	ldr	r6, [r4, #16]
 8011466:	60c5      	str	r5, [r0, #12]
 8011468:	f109 0310 	add.w	r3, r9, #16
 801146c:	f109 0514 	add.w	r5, r9, #20
 8011470:	f104 0e14 	add.w	lr, r4, #20
 8011474:	f100 0b14 	add.w	fp, r0, #20
 8011478:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801147c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011480:	9301      	str	r3, [sp, #4]
 8011482:	46d9      	mov	r9, fp
 8011484:	f04f 0c00 	mov.w	ip, #0
 8011488:	9b01      	ldr	r3, [sp, #4]
 801148a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801148e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011492:	9301      	str	r3, [sp, #4]
 8011494:	fa1f f38a 	uxth.w	r3, sl
 8011498:	4619      	mov	r1, r3
 801149a:	b283      	uxth	r3, r0
 801149c:	1acb      	subs	r3, r1, r3
 801149e:	0c00      	lsrs	r0, r0, #16
 80114a0:	4463      	add	r3, ip
 80114a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80114a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80114b0:	4576      	cmp	r6, lr
 80114b2:	f849 3b04 	str.w	r3, [r9], #4
 80114b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80114ba:	d8e5      	bhi.n	8011488 <__mdiff+0x88>
 80114bc:	1b33      	subs	r3, r6, r4
 80114be:	3b15      	subs	r3, #21
 80114c0:	f023 0303 	bic.w	r3, r3, #3
 80114c4:	3415      	adds	r4, #21
 80114c6:	3304      	adds	r3, #4
 80114c8:	42a6      	cmp	r6, r4
 80114ca:	bf38      	it	cc
 80114cc:	2304      	movcc	r3, #4
 80114ce:	441d      	add	r5, r3
 80114d0:	445b      	add	r3, fp
 80114d2:	461e      	mov	r6, r3
 80114d4:	462c      	mov	r4, r5
 80114d6:	4544      	cmp	r4, r8
 80114d8:	d30e      	bcc.n	80114f8 <__mdiff+0xf8>
 80114da:	f108 0103 	add.w	r1, r8, #3
 80114de:	1b49      	subs	r1, r1, r5
 80114e0:	f021 0103 	bic.w	r1, r1, #3
 80114e4:	3d03      	subs	r5, #3
 80114e6:	45a8      	cmp	r8, r5
 80114e8:	bf38      	it	cc
 80114ea:	2100      	movcc	r1, #0
 80114ec:	440b      	add	r3, r1
 80114ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80114f2:	b191      	cbz	r1, 801151a <__mdiff+0x11a>
 80114f4:	6117      	str	r7, [r2, #16]
 80114f6:	e79d      	b.n	8011434 <__mdiff+0x34>
 80114f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80114fc:	46e6      	mov	lr, ip
 80114fe:	0c08      	lsrs	r0, r1, #16
 8011500:	fa1c fc81 	uxtah	ip, ip, r1
 8011504:	4471      	add	r1, lr
 8011506:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801150a:	b289      	uxth	r1, r1
 801150c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011510:	f846 1b04 	str.w	r1, [r6], #4
 8011514:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011518:	e7dd      	b.n	80114d6 <__mdiff+0xd6>
 801151a:	3f01      	subs	r7, #1
 801151c:	e7e7      	b.n	80114ee <__mdiff+0xee>
 801151e:	bf00      	nop
 8011520:	080133b3 	.word	0x080133b3
 8011524:	08013424 	.word	0x08013424

08011528 <__ulp>:
 8011528:	b082      	sub	sp, #8
 801152a:	ed8d 0b00 	vstr	d0, [sp]
 801152e:	9a01      	ldr	r2, [sp, #4]
 8011530:	4b0f      	ldr	r3, [pc, #60]	@ (8011570 <__ulp+0x48>)
 8011532:	4013      	ands	r3, r2
 8011534:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011538:	2b00      	cmp	r3, #0
 801153a:	dc08      	bgt.n	801154e <__ulp+0x26>
 801153c:	425b      	negs	r3, r3
 801153e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011542:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011546:	da04      	bge.n	8011552 <__ulp+0x2a>
 8011548:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801154c:	4113      	asrs	r3, r2
 801154e:	2200      	movs	r2, #0
 8011550:	e008      	b.n	8011564 <__ulp+0x3c>
 8011552:	f1a2 0314 	sub.w	r3, r2, #20
 8011556:	2b1e      	cmp	r3, #30
 8011558:	bfda      	itte	le
 801155a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801155e:	40da      	lsrle	r2, r3
 8011560:	2201      	movgt	r2, #1
 8011562:	2300      	movs	r3, #0
 8011564:	4619      	mov	r1, r3
 8011566:	4610      	mov	r0, r2
 8011568:	ec41 0b10 	vmov	d0, r0, r1
 801156c:	b002      	add	sp, #8
 801156e:	4770      	bx	lr
 8011570:	7ff00000 	.word	0x7ff00000

08011574 <__b2d>:
 8011574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011578:	6906      	ldr	r6, [r0, #16]
 801157a:	f100 0814 	add.w	r8, r0, #20
 801157e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011582:	1f37      	subs	r7, r6, #4
 8011584:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011588:	4610      	mov	r0, r2
 801158a:	f7ff fd4b 	bl	8011024 <__hi0bits>
 801158e:	f1c0 0320 	rsb	r3, r0, #32
 8011592:	280a      	cmp	r0, #10
 8011594:	600b      	str	r3, [r1, #0]
 8011596:	491b      	ldr	r1, [pc, #108]	@ (8011604 <__b2d+0x90>)
 8011598:	dc15      	bgt.n	80115c6 <__b2d+0x52>
 801159a:	f1c0 0c0b 	rsb	ip, r0, #11
 801159e:	fa22 f30c 	lsr.w	r3, r2, ip
 80115a2:	45b8      	cmp	r8, r7
 80115a4:	ea43 0501 	orr.w	r5, r3, r1
 80115a8:	bf34      	ite	cc
 80115aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80115ae:	2300      	movcs	r3, #0
 80115b0:	3015      	adds	r0, #21
 80115b2:	fa02 f000 	lsl.w	r0, r2, r0
 80115b6:	fa23 f30c 	lsr.w	r3, r3, ip
 80115ba:	4303      	orrs	r3, r0
 80115bc:	461c      	mov	r4, r3
 80115be:	ec45 4b10 	vmov	d0, r4, r5
 80115c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115c6:	45b8      	cmp	r8, r7
 80115c8:	bf3a      	itte	cc
 80115ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80115ce:	f1a6 0708 	subcc.w	r7, r6, #8
 80115d2:	2300      	movcs	r3, #0
 80115d4:	380b      	subs	r0, #11
 80115d6:	d012      	beq.n	80115fe <__b2d+0x8a>
 80115d8:	f1c0 0120 	rsb	r1, r0, #32
 80115dc:	fa23 f401 	lsr.w	r4, r3, r1
 80115e0:	4082      	lsls	r2, r0
 80115e2:	4322      	orrs	r2, r4
 80115e4:	4547      	cmp	r7, r8
 80115e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80115ea:	bf8c      	ite	hi
 80115ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80115f0:	2200      	movls	r2, #0
 80115f2:	4083      	lsls	r3, r0
 80115f4:	40ca      	lsrs	r2, r1
 80115f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80115fa:	4313      	orrs	r3, r2
 80115fc:	e7de      	b.n	80115bc <__b2d+0x48>
 80115fe:	ea42 0501 	orr.w	r5, r2, r1
 8011602:	e7db      	b.n	80115bc <__b2d+0x48>
 8011604:	3ff00000 	.word	0x3ff00000

08011608 <__d2b>:
 8011608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801160c:	460f      	mov	r7, r1
 801160e:	2101      	movs	r1, #1
 8011610:	ec59 8b10 	vmov	r8, r9, d0
 8011614:	4616      	mov	r6, r2
 8011616:	f7ff fc13 	bl	8010e40 <_Balloc>
 801161a:	4604      	mov	r4, r0
 801161c:	b930      	cbnz	r0, 801162c <__d2b+0x24>
 801161e:	4602      	mov	r2, r0
 8011620:	4b23      	ldr	r3, [pc, #140]	@ (80116b0 <__d2b+0xa8>)
 8011622:	4824      	ldr	r0, [pc, #144]	@ (80116b4 <__d2b+0xac>)
 8011624:	f240 310f 	movw	r1, #783	@ 0x30f
 8011628:	f7fe f954 	bl	800f8d4 <__assert_func>
 801162c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011634:	b10d      	cbz	r5, 801163a <__d2b+0x32>
 8011636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801163a:	9301      	str	r3, [sp, #4]
 801163c:	f1b8 0300 	subs.w	r3, r8, #0
 8011640:	d023      	beq.n	801168a <__d2b+0x82>
 8011642:	4668      	mov	r0, sp
 8011644:	9300      	str	r3, [sp, #0]
 8011646:	f7ff fd0c 	bl	8011062 <__lo0bits>
 801164a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801164e:	b1d0      	cbz	r0, 8011686 <__d2b+0x7e>
 8011650:	f1c0 0320 	rsb	r3, r0, #32
 8011654:	fa02 f303 	lsl.w	r3, r2, r3
 8011658:	430b      	orrs	r3, r1
 801165a:	40c2      	lsrs	r2, r0
 801165c:	6163      	str	r3, [r4, #20]
 801165e:	9201      	str	r2, [sp, #4]
 8011660:	9b01      	ldr	r3, [sp, #4]
 8011662:	61a3      	str	r3, [r4, #24]
 8011664:	2b00      	cmp	r3, #0
 8011666:	bf0c      	ite	eq
 8011668:	2201      	moveq	r2, #1
 801166a:	2202      	movne	r2, #2
 801166c:	6122      	str	r2, [r4, #16]
 801166e:	b1a5      	cbz	r5, 801169a <__d2b+0x92>
 8011670:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011674:	4405      	add	r5, r0
 8011676:	603d      	str	r5, [r7, #0]
 8011678:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801167c:	6030      	str	r0, [r6, #0]
 801167e:	4620      	mov	r0, r4
 8011680:	b003      	add	sp, #12
 8011682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011686:	6161      	str	r1, [r4, #20]
 8011688:	e7ea      	b.n	8011660 <__d2b+0x58>
 801168a:	a801      	add	r0, sp, #4
 801168c:	f7ff fce9 	bl	8011062 <__lo0bits>
 8011690:	9b01      	ldr	r3, [sp, #4]
 8011692:	6163      	str	r3, [r4, #20]
 8011694:	3020      	adds	r0, #32
 8011696:	2201      	movs	r2, #1
 8011698:	e7e8      	b.n	801166c <__d2b+0x64>
 801169a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801169e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80116a2:	6038      	str	r0, [r7, #0]
 80116a4:	6918      	ldr	r0, [r3, #16]
 80116a6:	f7ff fcbd 	bl	8011024 <__hi0bits>
 80116aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80116ae:	e7e5      	b.n	801167c <__d2b+0x74>
 80116b0:	080133b3 	.word	0x080133b3
 80116b4:	08013424 	.word	0x08013424

080116b8 <__ratio>:
 80116b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116bc:	b085      	sub	sp, #20
 80116be:	e9cd 1000 	strd	r1, r0, [sp]
 80116c2:	a902      	add	r1, sp, #8
 80116c4:	f7ff ff56 	bl	8011574 <__b2d>
 80116c8:	9800      	ldr	r0, [sp, #0]
 80116ca:	a903      	add	r1, sp, #12
 80116cc:	ec55 4b10 	vmov	r4, r5, d0
 80116d0:	f7ff ff50 	bl	8011574 <__b2d>
 80116d4:	9b01      	ldr	r3, [sp, #4]
 80116d6:	6919      	ldr	r1, [r3, #16]
 80116d8:	9b00      	ldr	r3, [sp, #0]
 80116da:	691b      	ldr	r3, [r3, #16]
 80116dc:	1ac9      	subs	r1, r1, r3
 80116de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80116e2:	1a9b      	subs	r3, r3, r2
 80116e4:	ec5b ab10 	vmov	sl, fp, d0
 80116e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	bfce      	itee	gt
 80116f0:	462a      	movgt	r2, r5
 80116f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80116f6:	465a      	movle	r2, fp
 80116f8:	462f      	mov	r7, r5
 80116fa:	46d9      	mov	r9, fp
 80116fc:	bfcc      	ite	gt
 80116fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011702:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011706:	464b      	mov	r3, r9
 8011708:	4652      	mov	r2, sl
 801170a:	4620      	mov	r0, r4
 801170c:	4639      	mov	r1, r7
 801170e:	f7ef f8bd 	bl	800088c <__aeabi_ddiv>
 8011712:	ec41 0b10 	vmov	d0, r0, r1
 8011716:	b005      	add	sp, #20
 8011718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801171c <__copybits>:
 801171c:	3901      	subs	r1, #1
 801171e:	b570      	push	{r4, r5, r6, lr}
 8011720:	1149      	asrs	r1, r1, #5
 8011722:	6914      	ldr	r4, [r2, #16]
 8011724:	3101      	adds	r1, #1
 8011726:	f102 0314 	add.w	r3, r2, #20
 801172a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801172e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011732:	1f05      	subs	r5, r0, #4
 8011734:	42a3      	cmp	r3, r4
 8011736:	d30c      	bcc.n	8011752 <__copybits+0x36>
 8011738:	1aa3      	subs	r3, r4, r2
 801173a:	3b11      	subs	r3, #17
 801173c:	f023 0303 	bic.w	r3, r3, #3
 8011740:	3211      	adds	r2, #17
 8011742:	42a2      	cmp	r2, r4
 8011744:	bf88      	it	hi
 8011746:	2300      	movhi	r3, #0
 8011748:	4418      	add	r0, r3
 801174a:	2300      	movs	r3, #0
 801174c:	4288      	cmp	r0, r1
 801174e:	d305      	bcc.n	801175c <__copybits+0x40>
 8011750:	bd70      	pop	{r4, r5, r6, pc}
 8011752:	f853 6b04 	ldr.w	r6, [r3], #4
 8011756:	f845 6f04 	str.w	r6, [r5, #4]!
 801175a:	e7eb      	b.n	8011734 <__copybits+0x18>
 801175c:	f840 3b04 	str.w	r3, [r0], #4
 8011760:	e7f4      	b.n	801174c <__copybits+0x30>

08011762 <__any_on>:
 8011762:	f100 0214 	add.w	r2, r0, #20
 8011766:	6900      	ldr	r0, [r0, #16]
 8011768:	114b      	asrs	r3, r1, #5
 801176a:	4298      	cmp	r0, r3
 801176c:	b510      	push	{r4, lr}
 801176e:	db11      	blt.n	8011794 <__any_on+0x32>
 8011770:	dd0a      	ble.n	8011788 <__any_on+0x26>
 8011772:	f011 011f 	ands.w	r1, r1, #31
 8011776:	d007      	beq.n	8011788 <__any_on+0x26>
 8011778:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801177c:	fa24 f001 	lsr.w	r0, r4, r1
 8011780:	fa00 f101 	lsl.w	r1, r0, r1
 8011784:	428c      	cmp	r4, r1
 8011786:	d10b      	bne.n	80117a0 <__any_on+0x3e>
 8011788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801178c:	4293      	cmp	r3, r2
 801178e:	d803      	bhi.n	8011798 <__any_on+0x36>
 8011790:	2000      	movs	r0, #0
 8011792:	bd10      	pop	{r4, pc}
 8011794:	4603      	mov	r3, r0
 8011796:	e7f7      	b.n	8011788 <__any_on+0x26>
 8011798:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801179c:	2900      	cmp	r1, #0
 801179e:	d0f5      	beq.n	801178c <__any_on+0x2a>
 80117a0:	2001      	movs	r0, #1
 80117a2:	e7f6      	b.n	8011792 <__any_on+0x30>

080117a4 <_strtol_l.constprop.0>:
 80117a4:	2b24      	cmp	r3, #36	@ 0x24
 80117a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117aa:	4686      	mov	lr, r0
 80117ac:	4690      	mov	r8, r2
 80117ae:	d801      	bhi.n	80117b4 <_strtol_l.constprop.0+0x10>
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	d106      	bne.n	80117c2 <_strtol_l.constprop.0+0x1e>
 80117b4:	f7fe f842 	bl	800f83c <__errno>
 80117b8:	2316      	movs	r3, #22
 80117ba:	6003      	str	r3, [r0, #0]
 80117bc:	2000      	movs	r0, #0
 80117be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117c2:	4834      	ldr	r0, [pc, #208]	@ (8011894 <_strtol_l.constprop.0+0xf0>)
 80117c4:	460d      	mov	r5, r1
 80117c6:	462a      	mov	r2, r5
 80117c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80117cc:	5d06      	ldrb	r6, [r0, r4]
 80117ce:	f016 0608 	ands.w	r6, r6, #8
 80117d2:	d1f8      	bne.n	80117c6 <_strtol_l.constprop.0+0x22>
 80117d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80117d6:	d12d      	bne.n	8011834 <_strtol_l.constprop.0+0x90>
 80117d8:	782c      	ldrb	r4, [r5, #0]
 80117da:	2601      	movs	r6, #1
 80117dc:	1c95      	adds	r5, r2, #2
 80117de:	f033 0210 	bics.w	r2, r3, #16
 80117e2:	d109      	bne.n	80117f8 <_strtol_l.constprop.0+0x54>
 80117e4:	2c30      	cmp	r4, #48	@ 0x30
 80117e6:	d12a      	bne.n	801183e <_strtol_l.constprop.0+0x9a>
 80117e8:	782a      	ldrb	r2, [r5, #0]
 80117ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80117ee:	2a58      	cmp	r2, #88	@ 0x58
 80117f0:	d125      	bne.n	801183e <_strtol_l.constprop.0+0x9a>
 80117f2:	786c      	ldrb	r4, [r5, #1]
 80117f4:	2310      	movs	r3, #16
 80117f6:	3502      	adds	r5, #2
 80117f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80117fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011800:	2200      	movs	r2, #0
 8011802:	fbbc f9f3 	udiv	r9, ip, r3
 8011806:	4610      	mov	r0, r2
 8011808:	fb03 ca19 	mls	sl, r3, r9, ip
 801180c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011810:	2f09      	cmp	r7, #9
 8011812:	d81b      	bhi.n	801184c <_strtol_l.constprop.0+0xa8>
 8011814:	463c      	mov	r4, r7
 8011816:	42a3      	cmp	r3, r4
 8011818:	dd27      	ble.n	801186a <_strtol_l.constprop.0+0xc6>
 801181a:	1c57      	adds	r7, r2, #1
 801181c:	d007      	beq.n	801182e <_strtol_l.constprop.0+0x8a>
 801181e:	4581      	cmp	r9, r0
 8011820:	d320      	bcc.n	8011864 <_strtol_l.constprop.0+0xc0>
 8011822:	d101      	bne.n	8011828 <_strtol_l.constprop.0+0x84>
 8011824:	45a2      	cmp	sl, r4
 8011826:	db1d      	blt.n	8011864 <_strtol_l.constprop.0+0xc0>
 8011828:	fb00 4003 	mla	r0, r0, r3, r4
 801182c:	2201      	movs	r2, #1
 801182e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011832:	e7eb      	b.n	801180c <_strtol_l.constprop.0+0x68>
 8011834:	2c2b      	cmp	r4, #43	@ 0x2b
 8011836:	bf04      	itt	eq
 8011838:	782c      	ldrbeq	r4, [r5, #0]
 801183a:	1c95      	addeq	r5, r2, #2
 801183c:	e7cf      	b.n	80117de <_strtol_l.constprop.0+0x3a>
 801183e:	2b00      	cmp	r3, #0
 8011840:	d1da      	bne.n	80117f8 <_strtol_l.constprop.0+0x54>
 8011842:	2c30      	cmp	r4, #48	@ 0x30
 8011844:	bf0c      	ite	eq
 8011846:	2308      	moveq	r3, #8
 8011848:	230a      	movne	r3, #10
 801184a:	e7d5      	b.n	80117f8 <_strtol_l.constprop.0+0x54>
 801184c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011850:	2f19      	cmp	r7, #25
 8011852:	d801      	bhi.n	8011858 <_strtol_l.constprop.0+0xb4>
 8011854:	3c37      	subs	r4, #55	@ 0x37
 8011856:	e7de      	b.n	8011816 <_strtol_l.constprop.0+0x72>
 8011858:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801185c:	2f19      	cmp	r7, #25
 801185e:	d804      	bhi.n	801186a <_strtol_l.constprop.0+0xc6>
 8011860:	3c57      	subs	r4, #87	@ 0x57
 8011862:	e7d8      	b.n	8011816 <_strtol_l.constprop.0+0x72>
 8011864:	f04f 32ff 	mov.w	r2, #4294967295
 8011868:	e7e1      	b.n	801182e <_strtol_l.constprop.0+0x8a>
 801186a:	1c53      	adds	r3, r2, #1
 801186c:	d108      	bne.n	8011880 <_strtol_l.constprop.0+0xdc>
 801186e:	2322      	movs	r3, #34	@ 0x22
 8011870:	f8ce 3000 	str.w	r3, [lr]
 8011874:	4660      	mov	r0, ip
 8011876:	f1b8 0f00 	cmp.w	r8, #0
 801187a:	d0a0      	beq.n	80117be <_strtol_l.constprop.0+0x1a>
 801187c:	1e69      	subs	r1, r5, #1
 801187e:	e006      	b.n	801188e <_strtol_l.constprop.0+0xea>
 8011880:	b106      	cbz	r6, 8011884 <_strtol_l.constprop.0+0xe0>
 8011882:	4240      	negs	r0, r0
 8011884:	f1b8 0f00 	cmp.w	r8, #0
 8011888:	d099      	beq.n	80117be <_strtol_l.constprop.0+0x1a>
 801188a:	2a00      	cmp	r2, #0
 801188c:	d1f6      	bne.n	801187c <_strtol_l.constprop.0+0xd8>
 801188e:	f8c8 1000 	str.w	r1, [r8]
 8011892:	e794      	b.n	80117be <_strtol_l.constprop.0+0x1a>
 8011894:	08013581 	.word	0x08013581

08011898 <_strtol_r>:
 8011898:	f7ff bf84 	b.w	80117a4 <_strtol_l.constprop.0>

0801189c <__ascii_wctomb>:
 801189c:	4603      	mov	r3, r0
 801189e:	4608      	mov	r0, r1
 80118a0:	b141      	cbz	r1, 80118b4 <__ascii_wctomb+0x18>
 80118a2:	2aff      	cmp	r2, #255	@ 0xff
 80118a4:	d904      	bls.n	80118b0 <__ascii_wctomb+0x14>
 80118a6:	228a      	movs	r2, #138	@ 0x8a
 80118a8:	601a      	str	r2, [r3, #0]
 80118aa:	f04f 30ff 	mov.w	r0, #4294967295
 80118ae:	4770      	bx	lr
 80118b0:	700a      	strb	r2, [r1, #0]
 80118b2:	2001      	movs	r0, #1
 80118b4:	4770      	bx	lr

080118b6 <__ssputs_r>:
 80118b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118ba:	688e      	ldr	r6, [r1, #8]
 80118bc:	461f      	mov	r7, r3
 80118be:	42be      	cmp	r6, r7
 80118c0:	680b      	ldr	r3, [r1, #0]
 80118c2:	4682      	mov	sl, r0
 80118c4:	460c      	mov	r4, r1
 80118c6:	4690      	mov	r8, r2
 80118c8:	d82d      	bhi.n	8011926 <__ssputs_r+0x70>
 80118ca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80118ce:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80118d2:	d026      	beq.n	8011922 <__ssputs_r+0x6c>
 80118d4:	6965      	ldr	r5, [r4, #20]
 80118d6:	6909      	ldr	r1, [r1, #16]
 80118d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118dc:	eba3 0901 	sub.w	r9, r3, r1
 80118e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80118e4:	1c7b      	adds	r3, r7, #1
 80118e6:	444b      	add	r3, r9
 80118e8:	106d      	asrs	r5, r5, #1
 80118ea:	429d      	cmp	r5, r3
 80118ec:	bf38      	it	cc
 80118ee:	461d      	movcc	r5, r3
 80118f0:	0553      	lsls	r3, r2, #21
 80118f2:	d527      	bpl.n	8011944 <__ssputs_r+0x8e>
 80118f4:	4629      	mov	r1, r5
 80118f6:	f7ff fa05 	bl	8010d04 <_malloc_r>
 80118fa:	4606      	mov	r6, r0
 80118fc:	b360      	cbz	r0, 8011958 <__ssputs_r+0xa2>
 80118fe:	6921      	ldr	r1, [r4, #16]
 8011900:	464a      	mov	r2, r9
 8011902:	f7fd ffc8 	bl	800f896 <memcpy>
 8011906:	89a3      	ldrh	r3, [r4, #12]
 8011908:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801190c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011910:	81a3      	strh	r3, [r4, #12]
 8011912:	6126      	str	r6, [r4, #16]
 8011914:	6165      	str	r5, [r4, #20]
 8011916:	444e      	add	r6, r9
 8011918:	eba5 0509 	sub.w	r5, r5, r9
 801191c:	6026      	str	r6, [r4, #0]
 801191e:	60a5      	str	r5, [r4, #8]
 8011920:	463e      	mov	r6, r7
 8011922:	42be      	cmp	r6, r7
 8011924:	d900      	bls.n	8011928 <__ssputs_r+0x72>
 8011926:	463e      	mov	r6, r7
 8011928:	6820      	ldr	r0, [r4, #0]
 801192a:	4632      	mov	r2, r6
 801192c:	4641      	mov	r1, r8
 801192e:	f000 fbad 	bl	801208c <memmove>
 8011932:	68a3      	ldr	r3, [r4, #8]
 8011934:	1b9b      	subs	r3, r3, r6
 8011936:	60a3      	str	r3, [r4, #8]
 8011938:	6823      	ldr	r3, [r4, #0]
 801193a:	4433      	add	r3, r6
 801193c:	6023      	str	r3, [r4, #0]
 801193e:	2000      	movs	r0, #0
 8011940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011944:	462a      	mov	r2, r5
 8011946:	f000 fbe6 	bl	8012116 <_realloc_r>
 801194a:	4606      	mov	r6, r0
 801194c:	2800      	cmp	r0, #0
 801194e:	d1e0      	bne.n	8011912 <__ssputs_r+0x5c>
 8011950:	6921      	ldr	r1, [r4, #16]
 8011952:	4650      	mov	r0, sl
 8011954:	f7fe fe28 	bl	80105a8 <_free_r>
 8011958:	230c      	movs	r3, #12
 801195a:	f8ca 3000 	str.w	r3, [sl]
 801195e:	89a3      	ldrh	r3, [r4, #12]
 8011960:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011964:	81a3      	strh	r3, [r4, #12]
 8011966:	f04f 30ff 	mov.w	r0, #4294967295
 801196a:	e7e9      	b.n	8011940 <__ssputs_r+0x8a>

0801196c <_svfiprintf_r>:
 801196c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011970:	4698      	mov	r8, r3
 8011972:	898b      	ldrh	r3, [r1, #12]
 8011974:	061b      	lsls	r3, r3, #24
 8011976:	b09d      	sub	sp, #116	@ 0x74
 8011978:	4607      	mov	r7, r0
 801197a:	460d      	mov	r5, r1
 801197c:	4614      	mov	r4, r2
 801197e:	d510      	bpl.n	80119a2 <_svfiprintf_r+0x36>
 8011980:	690b      	ldr	r3, [r1, #16]
 8011982:	b973      	cbnz	r3, 80119a2 <_svfiprintf_r+0x36>
 8011984:	2140      	movs	r1, #64	@ 0x40
 8011986:	f7ff f9bd 	bl	8010d04 <_malloc_r>
 801198a:	6028      	str	r0, [r5, #0]
 801198c:	6128      	str	r0, [r5, #16]
 801198e:	b930      	cbnz	r0, 801199e <_svfiprintf_r+0x32>
 8011990:	230c      	movs	r3, #12
 8011992:	603b      	str	r3, [r7, #0]
 8011994:	f04f 30ff 	mov.w	r0, #4294967295
 8011998:	b01d      	add	sp, #116	@ 0x74
 801199a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801199e:	2340      	movs	r3, #64	@ 0x40
 80119a0:	616b      	str	r3, [r5, #20]
 80119a2:	2300      	movs	r3, #0
 80119a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80119a6:	2320      	movs	r3, #32
 80119a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80119ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80119b0:	2330      	movs	r3, #48	@ 0x30
 80119b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011b50 <_svfiprintf_r+0x1e4>
 80119b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80119ba:	f04f 0901 	mov.w	r9, #1
 80119be:	4623      	mov	r3, r4
 80119c0:	469a      	mov	sl, r3
 80119c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119c6:	b10a      	cbz	r2, 80119cc <_svfiprintf_r+0x60>
 80119c8:	2a25      	cmp	r2, #37	@ 0x25
 80119ca:	d1f9      	bne.n	80119c0 <_svfiprintf_r+0x54>
 80119cc:	ebba 0b04 	subs.w	fp, sl, r4
 80119d0:	d00b      	beq.n	80119ea <_svfiprintf_r+0x7e>
 80119d2:	465b      	mov	r3, fp
 80119d4:	4622      	mov	r2, r4
 80119d6:	4629      	mov	r1, r5
 80119d8:	4638      	mov	r0, r7
 80119da:	f7ff ff6c 	bl	80118b6 <__ssputs_r>
 80119de:	3001      	adds	r0, #1
 80119e0:	f000 80a7 	beq.w	8011b32 <_svfiprintf_r+0x1c6>
 80119e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119e6:	445a      	add	r2, fp
 80119e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80119ea:	f89a 3000 	ldrb.w	r3, [sl]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f000 809f 	beq.w	8011b32 <_svfiprintf_r+0x1c6>
 80119f4:	2300      	movs	r3, #0
 80119f6:	f04f 32ff 	mov.w	r2, #4294967295
 80119fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119fe:	f10a 0a01 	add.w	sl, sl, #1
 8011a02:	9304      	str	r3, [sp, #16]
 8011a04:	9307      	str	r3, [sp, #28]
 8011a06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a0c:	4654      	mov	r4, sl
 8011a0e:	2205      	movs	r2, #5
 8011a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a14:	484e      	ldr	r0, [pc, #312]	@ (8011b50 <_svfiprintf_r+0x1e4>)
 8011a16:	f7ee fbfb 	bl	8000210 <memchr>
 8011a1a:	9a04      	ldr	r2, [sp, #16]
 8011a1c:	b9d8      	cbnz	r0, 8011a56 <_svfiprintf_r+0xea>
 8011a1e:	06d0      	lsls	r0, r2, #27
 8011a20:	bf44      	itt	mi
 8011a22:	2320      	movmi	r3, #32
 8011a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a28:	0711      	lsls	r1, r2, #28
 8011a2a:	bf44      	itt	mi
 8011a2c:	232b      	movmi	r3, #43	@ 0x2b
 8011a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a32:	f89a 3000 	ldrb.w	r3, [sl]
 8011a36:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a38:	d015      	beq.n	8011a66 <_svfiprintf_r+0xfa>
 8011a3a:	9a07      	ldr	r2, [sp, #28]
 8011a3c:	4654      	mov	r4, sl
 8011a3e:	2000      	movs	r0, #0
 8011a40:	f04f 0c0a 	mov.w	ip, #10
 8011a44:	4621      	mov	r1, r4
 8011a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a4a:	3b30      	subs	r3, #48	@ 0x30
 8011a4c:	2b09      	cmp	r3, #9
 8011a4e:	d94b      	bls.n	8011ae8 <_svfiprintf_r+0x17c>
 8011a50:	b1b0      	cbz	r0, 8011a80 <_svfiprintf_r+0x114>
 8011a52:	9207      	str	r2, [sp, #28]
 8011a54:	e014      	b.n	8011a80 <_svfiprintf_r+0x114>
 8011a56:	eba0 0308 	sub.w	r3, r0, r8
 8011a5a:	fa09 f303 	lsl.w	r3, r9, r3
 8011a5e:	4313      	orrs	r3, r2
 8011a60:	9304      	str	r3, [sp, #16]
 8011a62:	46a2      	mov	sl, r4
 8011a64:	e7d2      	b.n	8011a0c <_svfiprintf_r+0xa0>
 8011a66:	9b03      	ldr	r3, [sp, #12]
 8011a68:	1d19      	adds	r1, r3, #4
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	9103      	str	r1, [sp, #12]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	bfbb      	ittet	lt
 8011a72:	425b      	neglt	r3, r3
 8011a74:	f042 0202 	orrlt.w	r2, r2, #2
 8011a78:	9307      	strge	r3, [sp, #28]
 8011a7a:	9307      	strlt	r3, [sp, #28]
 8011a7c:	bfb8      	it	lt
 8011a7e:	9204      	strlt	r2, [sp, #16]
 8011a80:	7823      	ldrb	r3, [r4, #0]
 8011a82:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a84:	d10a      	bne.n	8011a9c <_svfiprintf_r+0x130>
 8011a86:	7863      	ldrb	r3, [r4, #1]
 8011a88:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a8a:	d132      	bne.n	8011af2 <_svfiprintf_r+0x186>
 8011a8c:	9b03      	ldr	r3, [sp, #12]
 8011a8e:	1d1a      	adds	r2, r3, #4
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	9203      	str	r2, [sp, #12]
 8011a94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011a98:	3402      	adds	r4, #2
 8011a9a:	9305      	str	r3, [sp, #20]
 8011a9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011b60 <_svfiprintf_r+0x1f4>
 8011aa0:	7821      	ldrb	r1, [r4, #0]
 8011aa2:	2203      	movs	r2, #3
 8011aa4:	4650      	mov	r0, sl
 8011aa6:	f7ee fbb3 	bl	8000210 <memchr>
 8011aaa:	b138      	cbz	r0, 8011abc <_svfiprintf_r+0x150>
 8011aac:	9b04      	ldr	r3, [sp, #16]
 8011aae:	eba0 000a 	sub.w	r0, r0, sl
 8011ab2:	2240      	movs	r2, #64	@ 0x40
 8011ab4:	4082      	lsls	r2, r0
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	3401      	adds	r4, #1
 8011aba:	9304      	str	r3, [sp, #16]
 8011abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ac0:	4824      	ldr	r0, [pc, #144]	@ (8011b54 <_svfiprintf_r+0x1e8>)
 8011ac2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011ac6:	2206      	movs	r2, #6
 8011ac8:	f7ee fba2 	bl	8000210 <memchr>
 8011acc:	2800      	cmp	r0, #0
 8011ace:	d036      	beq.n	8011b3e <_svfiprintf_r+0x1d2>
 8011ad0:	4b21      	ldr	r3, [pc, #132]	@ (8011b58 <_svfiprintf_r+0x1ec>)
 8011ad2:	bb1b      	cbnz	r3, 8011b1c <_svfiprintf_r+0x1b0>
 8011ad4:	9b03      	ldr	r3, [sp, #12]
 8011ad6:	3307      	adds	r3, #7
 8011ad8:	f023 0307 	bic.w	r3, r3, #7
 8011adc:	3308      	adds	r3, #8
 8011ade:	9303      	str	r3, [sp, #12]
 8011ae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ae2:	4433      	add	r3, r6
 8011ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ae6:	e76a      	b.n	80119be <_svfiprintf_r+0x52>
 8011ae8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011aec:	460c      	mov	r4, r1
 8011aee:	2001      	movs	r0, #1
 8011af0:	e7a8      	b.n	8011a44 <_svfiprintf_r+0xd8>
 8011af2:	2300      	movs	r3, #0
 8011af4:	3401      	adds	r4, #1
 8011af6:	9305      	str	r3, [sp, #20]
 8011af8:	4619      	mov	r1, r3
 8011afa:	f04f 0c0a 	mov.w	ip, #10
 8011afe:	4620      	mov	r0, r4
 8011b00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b04:	3a30      	subs	r2, #48	@ 0x30
 8011b06:	2a09      	cmp	r2, #9
 8011b08:	d903      	bls.n	8011b12 <_svfiprintf_r+0x1a6>
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d0c6      	beq.n	8011a9c <_svfiprintf_r+0x130>
 8011b0e:	9105      	str	r1, [sp, #20]
 8011b10:	e7c4      	b.n	8011a9c <_svfiprintf_r+0x130>
 8011b12:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b16:	4604      	mov	r4, r0
 8011b18:	2301      	movs	r3, #1
 8011b1a:	e7f0      	b.n	8011afe <_svfiprintf_r+0x192>
 8011b1c:	ab03      	add	r3, sp, #12
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	462a      	mov	r2, r5
 8011b22:	4b0e      	ldr	r3, [pc, #56]	@ (8011b5c <_svfiprintf_r+0x1f0>)
 8011b24:	a904      	add	r1, sp, #16
 8011b26:	4638      	mov	r0, r7
 8011b28:	f7fc fec4 	bl	800e8b4 <_printf_float>
 8011b2c:	1c42      	adds	r2, r0, #1
 8011b2e:	4606      	mov	r6, r0
 8011b30:	d1d6      	bne.n	8011ae0 <_svfiprintf_r+0x174>
 8011b32:	89ab      	ldrh	r3, [r5, #12]
 8011b34:	065b      	lsls	r3, r3, #25
 8011b36:	f53f af2d 	bmi.w	8011994 <_svfiprintf_r+0x28>
 8011b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b3c:	e72c      	b.n	8011998 <_svfiprintf_r+0x2c>
 8011b3e:	ab03      	add	r3, sp, #12
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	462a      	mov	r2, r5
 8011b44:	4b05      	ldr	r3, [pc, #20]	@ (8011b5c <_svfiprintf_r+0x1f0>)
 8011b46:	a904      	add	r1, sp, #16
 8011b48:	4638      	mov	r0, r7
 8011b4a:	f7fd f94b 	bl	800ede4 <_printf_i>
 8011b4e:	e7ed      	b.n	8011b2c <_svfiprintf_r+0x1c0>
 8011b50:	08013681 	.word	0x08013681
 8011b54:	0801368b 	.word	0x0801368b
 8011b58:	0800e8b5 	.word	0x0800e8b5
 8011b5c:	080118b7 	.word	0x080118b7
 8011b60:	08013687 	.word	0x08013687

08011b64 <__sfputc_r>:
 8011b64:	6893      	ldr	r3, [r2, #8]
 8011b66:	3b01      	subs	r3, #1
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	b410      	push	{r4}
 8011b6c:	6093      	str	r3, [r2, #8]
 8011b6e:	da08      	bge.n	8011b82 <__sfputc_r+0x1e>
 8011b70:	6994      	ldr	r4, [r2, #24]
 8011b72:	42a3      	cmp	r3, r4
 8011b74:	db01      	blt.n	8011b7a <__sfputc_r+0x16>
 8011b76:	290a      	cmp	r1, #10
 8011b78:	d103      	bne.n	8011b82 <__sfputc_r+0x1e>
 8011b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b7e:	f000 b9f1 	b.w	8011f64 <__swbuf_r>
 8011b82:	6813      	ldr	r3, [r2, #0]
 8011b84:	1c58      	adds	r0, r3, #1
 8011b86:	6010      	str	r0, [r2, #0]
 8011b88:	7019      	strb	r1, [r3, #0]
 8011b8a:	4608      	mov	r0, r1
 8011b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b90:	4770      	bx	lr

08011b92 <__sfputs_r>:
 8011b92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b94:	4606      	mov	r6, r0
 8011b96:	460f      	mov	r7, r1
 8011b98:	4614      	mov	r4, r2
 8011b9a:	18d5      	adds	r5, r2, r3
 8011b9c:	42ac      	cmp	r4, r5
 8011b9e:	d101      	bne.n	8011ba4 <__sfputs_r+0x12>
 8011ba0:	2000      	movs	r0, #0
 8011ba2:	e007      	b.n	8011bb4 <__sfputs_r+0x22>
 8011ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ba8:	463a      	mov	r2, r7
 8011baa:	4630      	mov	r0, r6
 8011bac:	f7ff ffda 	bl	8011b64 <__sfputc_r>
 8011bb0:	1c43      	adds	r3, r0, #1
 8011bb2:	d1f3      	bne.n	8011b9c <__sfputs_r+0xa>
 8011bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011bb8 <_vfiprintf_r>:
 8011bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bbc:	460d      	mov	r5, r1
 8011bbe:	b09d      	sub	sp, #116	@ 0x74
 8011bc0:	4614      	mov	r4, r2
 8011bc2:	4698      	mov	r8, r3
 8011bc4:	4606      	mov	r6, r0
 8011bc6:	b118      	cbz	r0, 8011bd0 <_vfiprintf_r+0x18>
 8011bc8:	6a03      	ldr	r3, [r0, #32]
 8011bca:	b90b      	cbnz	r3, 8011bd0 <_vfiprintf_r+0x18>
 8011bcc:	f7fd fcca 	bl	800f564 <__sinit>
 8011bd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bd2:	07d9      	lsls	r1, r3, #31
 8011bd4:	d405      	bmi.n	8011be2 <_vfiprintf_r+0x2a>
 8011bd6:	89ab      	ldrh	r3, [r5, #12]
 8011bd8:	059a      	lsls	r2, r3, #22
 8011bda:	d402      	bmi.n	8011be2 <_vfiprintf_r+0x2a>
 8011bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011bde:	f7fd fe58 	bl	800f892 <__retarget_lock_acquire_recursive>
 8011be2:	89ab      	ldrh	r3, [r5, #12]
 8011be4:	071b      	lsls	r3, r3, #28
 8011be6:	d501      	bpl.n	8011bec <_vfiprintf_r+0x34>
 8011be8:	692b      	ldr	r3, [r5, #16]
 8011bea:	b99b      	cbnz	r3, 8011c14 <_vfiprintf_r+0x5c>
 8011bec:	4629      	mov	r1, r5
 8011bee:	4630      	mov	r0, r6
 8011bf0:	f000 f9f6 	bl	8011fe0 <__swsetup_r>
 8011bf4:	b170      	cbz	r0, 8011c14 <_vfiprintf_r+0x5c>
 8011bf6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011bf8:	07dc      	lsls	r4, r3, #31
 8011bfa:	d504      	bpl.n	8011c06 <_vfiprintf_r+0x4e>
 8011bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8011c00:	b01d      	add	sp, #116	@ 0x74
 8011c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c06:	89ab      	ldrh	r3, [r5, #12]
 8011c08:	0598      	lsls	r0, r3, #22
 8011c0a:	d4f7      	bmi.n	8011bfc <_vfiprintf_r+0x44>
 8011c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c0e:	f7fd fe41 	bl	800f894 <__retarget_lock_release_recursive>
 8011c12:	e7f3      	b.n	8011bfc <_vfiprintf_r+0x44>
 8011c14:	2300      	movs	r3, #0
 8011c16:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c18:	2320      	movs	r3, #32
 8011c1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c22:	2330      	movs	r3, #48	@ 0x30
 8011c24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011dd4 <_vfiprintf_r+0x21c>
 8011c28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c2c:	f04f 0901 	mov.w	r9, #1
 8011c30:	4623      	mov	r3, r4
 8011c32:	469a      	mov	sl, r3
 8011c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c38:	b10a      	cbz	r2, 8011c3e <_vfiprintf_r+0x86>
 8011c3a:	2a25      	cmp	r2, #37	@ 0x25
 8011c3c:	d1f9      	bne.n	8011c32 <_vfiprintf_r+0x7a>
 8011c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8011c42:	d00b      	beq.n	8011c5c <_vfiprintf_r+0xa4>
 8011c44:	465b      	mov	r3, fp
 8011c46:	4622      	mov	r2, r4
 8011c48:	4629      	mov	r1, r5
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	f7ff ffa1 	bl	8011b92 <__sfputs_r>
 8011c50:	3001      	adds	r0, #1
 8011c52:	f000 80a7 	beq.w	8011da4 <_vfiprintf_r+0x1ec>
 8011c56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c58:	445a      	add	r2, fp
 8011c5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8011c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	f000 809f 	beq.w	8011da4 <_vfiprintf_r+0x1ec>
 8011c66:	2300      	movs	r3, #0
 8011c68:	f04f 32ff 	mov.w	r2, #4294967295
 8011c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c70:	f10a 0a01 	add.w	sl, sl, #1
 8011c74:	9304      	str	r3, [sp, #16]
 8011c76:	9307      	str	r3, [sp, #28]
 8011c78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011c7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8011c7e:	4654      	mov	r4, sl
 8011c80:	2205      	movs	r2, #5
 8011c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c86:	4853      	ldr	r0, [pc, #332]	@ (8011dd4 <_vfiprintf_r+0x21c>)
 8011c88:	f7ee fac2 	bl	8000210 <memchr>
 8011c8c:	9a04      	ldr	r2, [sp, #16]
 8011c8e:	b9d8      	cbnz	r0, 8011cc8 <_vfiprintf_r+0x110>
 8011c90:	06d1      	lsls	r1, r2, #27
 8011c92:	bf44      	itt	mi
 8011c94:	2320      	movmi	r3, #32
 8011c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011c9a:	0713      	lsls	r3, r2, #28
 8011c9c:	bf44      	itt	mi
 8011c9e:	232b      	movmi	r3, #43	@ 0x2b
 8011ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ca8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011caa:	d015      	beq.n	8011cd8 <_vfiprintf_r+0x120>
 8011cac:	9a07      	ldr	r2, [sp, #28]
 8011cae:	4654      	mov	r4, sl
 8011cb0:	2000      	movs	r0, #0
 8011cb2:	f04f 0c0a 	mov.w	ip, #10
 8011cb6:	4621      	mov	r1, r4
 8011cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cbc:	3b30      	subs	r3, #48	@ 0x30
 8011cbe:	2b09      	cmp	r3, #9
 8011cc0:	d94b      	bls.n	8011d5a <_vfiprintf_r+0x1a2>
 8011cc2:	b1b0      	cbz	r0, 8011cf2 <_vfiprintf_r+0x13a>
 8011cc4:	9207      	str	r2, [sp, #28]
 8011cc6:	e014      	b.n	8011cf2 <_vfiprintf_r+0x13a>
 8011cc8:	eba0 0308 	sub.w	r3, r0, r8
 8011ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8011cd0:	4313      	orrs	r3, r2
 8011cd2:	9304      	str	r3, [sp, #16]
 8011cd4:	46a2      	mov	sl, r4
 8011cd6:	e7d2      	b.n	8011c7e <_vfiprintf_r+0xc6>
 8011cd8:	9b03      	ldr	r3, [sp, #12]
 8011cda:	1d19      	adds	r1, r3, #4
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	9103      	str	r1, [sp, #12]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	bfbb      	ittet	lt
 8011ce4:	425b      	neglt	r3, r3
 8011ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8011cea:	9307      	strge	r3, [sp, #28]
 8011cec:	9307      	strlt	r3, [sp, #28]
 8011cee:	bfb8      	it	lt
 8011cf0:	9204      	strlt	r2, [sp, #16]
 8011cf2:	7823      	ldrb	r3, [r4, #0]
 8011cf4:	2b2e      	cmp	r3, #46	@ 0x2e
 8011cf6:	d10a      	bne.n	8011d0e <_vfiprintf_r+0x156>
 8011cf8:	7863      	ldrb	r3, [r4, #1]
 8011cfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cfc:	d132      	bne.n	8011d64 <_vfiprintf_r+0x1ac>
 8011cfe:	9b03      	ldr	r3, [sp, #12]
 8011d00:	1d1a      	adds	r2, r3, #4
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	9203      	str	r2, [sp, #12]
 8011d06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d0a:	3402      	adds	r4, #2
 8011d0c:	9305      	str	r3, [sp, #20]
 8011d0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011de4 <_vfiprintf_r+0x22c>
 8011d12:	7821      	ldrb	r1, [r4, #0]
 8011d14:	2203      	movs	r2, #3
 8011d16:	4650      	mov	r0, sl
 8011d18:	f7ee fa7a 	bl	8000210 <memchr>
 8011d1c:	b138      	cbz	r0, 8011d2e <_vfiprintf_r+0x176>
 8011d1e:	9b04      	ldr	r3, [sp, #16]
 8011d20:	eba0 000a 	sub.w	r0, r0, sl
 8011d24:	2240      	movs	r2, #64	@ 0x40
 8011d26:	4082      	lsls	r2, r0
 8011d28:	4313      	orrs	r3, r2
 8011d2a:	3401      	adds	r4, #1
 8011d2c:	9304      	str	r3, [sp, #16]
 8011d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d32:	4829      	ldr	r0, [pc, #164]	@ (8011dd8 <_vfiprintf_r+0x220>)
 8011d34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d38:	2206      	movs	r2, #6
 8011d3a:	f7ee fa69 	bl	8000210 <memchr>
 8011d3e:	2800      	cmp	r0, #0
 8011d40:	d03f      	beq.n	8011dc2 <_vfiprintf_r+0x20a>
 8011d42:	4b26      	ldr	r3, [pc, #152]	@ (8011ddc <_vfiprintf_r+0x224>)
 8011d44:	bb1b      	cbnz	r3, 8011d8e <_vfiprintf_r+0x1d6>
 8011d46:	9b03      	ldr	r3, [sp, #12]
 8011d48:	3307      	adds	r3, #7
 8011d4a:	f023 0307 	bic.w	r3, r3, #7
 8011d4e:	3308      	adds	r3, #8
 8011d50:	9303      	str	r3, [sp, #12]
 8011d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d54:	443b      	add	r3, r7
 8011d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8011d58:	e76a      	b.n	8011c30 <_vfiprintf_r+0x78>
 8011d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d5e:	460c      	mov	r4, r1
 8011d60:	2001      	movs	r0, #1
 8011d62:	e7a8      	b.n	8011cb6 <_vfiprintf_r+0xfe>
 8011d64:	2300      	movs	r3, #0
 8011d66:	3401      	adds	r4, #1
 8011d68:	9305      	str	r3, [sp, #20]
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	f04f 0c0a 	mov.w	ip, #10
 8011d70:	4620      	mov	r0, r4
 8011d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d76:	3a30      	subs	r2, #48	@ 0x30
 8011d78:	2a09      	cmp	r2, #9
 8011d7a:	d903      	bls.n	8011d84 <_vfiprintf_r+0x1cc>
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d0c6      	beq.n	8011d0e <_vfiprintf_r+0x156>
 8011d80:	9105      	str	r1, [sp, #20]
 8011d82:	e7c4      	b.n	8011d0e <_vfiprintf_r+0x156>
 8011d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d88:	4604      	mov	r4, r0
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	e7f0      	b.n	8011d70 <_vfiprintf_r+0x1b8>
 8011d8e:	ab03      	add	r3, sp, #12
 8011d90:	9300      	str	r3, [sp, #0]
 8011d92:	462a      	mov	r2, r5
 8011d94:	4b12      	ldr	r3, [pc, #72]	@ (8011de0 <_vfiprintf_r+0x228>)
 8011d96:	a904      	add	r1, sp, #16
 8011d98:	4630      	mov	r0, r6
 8011d9a:	f7fc fd8b 	bl	800e8b4 <_printf_float>
 8011d9e:	4607      	mov	r7, r0
 8011da0:	1c78      	adds	r0, r7, #1
 8011da2:	d1d6      	bne.n	8011d52 <_vfiprintf_r+0x19a>
 8011da4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011da6:	07d9      	lsls	r1, r3, #31
 8011da8:	d405      	bmi.n	8011db6 <_vfiprintf_r+0x1fe>
 8011daa:	89ab      	ldrh	r3, [r5, #12]
 8011dac:	059a      	lsls	r2, r3, #22
 8011dae:	d402      	bmi.n	8011db6 <_vfiprintf_r+0x1fe>
 8011db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011db2:	f7fd fd6f 	bl	800f894 <__retarget_lock_release_recursive>
 8011db6:	89ab      	ldrh	r3, [r5, #12]
 8011db8:	065b      	lsls	r3, r3, #25
 8011dba:	f53f af1f 	bmi.w	8011bfc <_vfiprintf_r+0x44>
 8011dbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011dc0:	e71e      	b.n	8011c00 <_vfiprintf_r+0x48>
 8011dc2:	ab03      	add	r3, sp, #12
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	462a      	mov	r2, r5
 8011dc8:	4b05      	ldr	r3, [pc, #20]	@ (8011de0 <_vfiprintf_r+0x228>)
 8011dca:	a904      	add	r1, sp, #16
 8011dcc:	4630      	mov	r0, r6
 8011dce:	f7fd f809 	bl	800ede4 <_printf_i>
 8011dd2:	e7e4      	b.n	8011d9e <_vfiprintf_r+0x1e6>
 8011dd4:	08013681 	.word	0x08013681
 8011dd8:	0801368b 	.word	0x0801368b
 8011ddc:	0800e8b5 	.word	0x0800e8b5
 8011de0:	08011b93 	.word	0x08011b93
 8011de4:	08013687 	.word	0x08013687

08011de8 <__sflush_r>:
 8011de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011df0:	0716      	lsls	r6, r2, #28
 8011df2:	4605      	mov	r5, r0
 8011df4:	460c      	mov	r4, r1
 8011df6:	d454      	bmi.n	8011ea2 <__sflush_r+0xba>
 8011df8:	684b      	ldr	r3, [r1, #4]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	dc02      	bgt.n	8011e04 <__sflush_r+0x1c>
 8011dfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	dd48      	ble.n	8011e96 <__sflush_r+0xae>
 8011e04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e06:	2e00      	cmp	r6, #0
 8011e08:	d045      	beq.n	8011e96 <__sflush_r+0xae>
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011e10:	682f      	ldr	r7, [r5, #0]
 8011e12:	6a21      	ldr	r1, [r4, #32]
 8011e14:	602b      	str	r3, [r5, #0]
 8011e16:	d030      	beq.n	8011e7a <__sflush_r+0x92>
 8011e18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011e1a:	89a3      	ldrh	r3, [r4, #12]
 8011e1c:	0759      	lsls	r1, r3, #29
 8011e1e:	d505      	bpl.n	8011e2c <__sflush_r+0x44>
 8011e20:	6863      	ldr	r3, [r4, #4]
 8011e22:	1ad2      	subs	r2, r2, r3
 8011e24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011e26:	b10b      	cbz	r3, 8011e2c <__sflush_r+0x44>
 8011e28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e2a:	1ad2      	subs	r2, r2, r3
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e30:	6a21      	ldr	r1, [r4, #32]
 8011e32:	4628      	mov	r0, r5
 8011e34:	47b0      	blx	r6
 8011e36:	1c43      	adds	r3, r0, #1
 8011e38:	89a3      	ldrh	r3, [r4, #12]
 8011e3a:	d106      	bne.n	8011e4a <__sflush_r+0x62>
 8011e3c:	6829      	ldr	r1, [r5, #0]
 8011e3e:	291d      	cmp	r1, #29
 8011e40:	d82b      	bhi.n	8011e9a <__sflush_r+0xb2>
 8011e42:	4a2a      	ldr	r2, [pc, #168]	@ (8011eec <__sflush_r+0x104>)
 8011e44:	410a      	asrs	r2, r1
 8011e46:	07d6      	lsls	r6, r2, #31
 8011e48:	d427      	bmi.n	8011e9a <__sflush_r+0xb2>
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	6062      	str	r2, [r4, #4]
 8011e4e:	04d9      	lsls	r1, r3, #19
 8011e50:	6922      	ldr	r2, [r4, #16]
 8011e52:	6022      	str	r2, [r4, #0]
 8011e54:	d504      	bpl.n	8011e60 <__sflush_r+0x78>
 8011e56:	1c42      	adds	r2, r0, #1
 8011e58:	d101      	bne.n	8011e5e <__sflush_r+0x76>
 8011e5a:	682b      	ldr	r3, [r5, #0]
 8011e5c:	b903      	cbnz	r3, 8011e60 <__sflush_r+0x78>
 8011e5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011e60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e62:	602f      	str	r7, [r5, #0]
 8011e64:	b1b9      	cbz	r1, 8011e96 <__sflush_r+0xae>
 8011e66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e6a:	4299      	cmp	r1, r3
 8011e6c:	d002      	beq.n	8011e74 <__sflush_r+0x8c>
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f7fe fb9a 	bl	80105a8 <_free_r>
 8011e74:	2300      	movs	r3, #0
 8011e76:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e78:	e00d      	b.n	8011e96 <__sflush_r+0xae>
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	47b0      	blx	r6
 8011e80:	4602      	mov	r2, r0
 8011e82:	1c50      	adds	r0, r2, #1
 8011e84:	d1c9      	bne.n	8011e1a <__sflush_r+0x32>
 8011e86:	682b      	ldr	r3, [r5, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d0c6      	beq.n	8011e1a <__sflush_r+0x32>
 8011e8c:	2b1d      	cmp	r3, #29
 8011e8e:	d001      	beq.n	8011e94 <__sflush_r+0xac>
 8011e90:	2b16      	cmp	r3, #22
 8011e92:	d11e      	bne.n	8011ed2 <__sflush_r+0xea>
 8011e94:	602f      	str	r7, [r5, #0]
 8011e96:	2000      	movs	r0, #0
 8011e98:	e022      	b.n	8011ee0 <__sflush_r+0xf8>
 8011e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e9e:	b21b      	sxth	r3, r3
 8011ea0:	e01b      	b.n	8011eda <__sflush_r+0xf2>
 8011ea2:	690f      	ldr	r7, [r1, #16]
 8011ea4:	2f00      	cmp	r7, #0
 8011ea6:	d0f6      	beq.n	8011e96 <__sflush_r+0xae>
 8011ea8:	0793      	lsls	r3, r2, #30
 8011eaa:	680e      	ldr	r6, [r1, #0]
 8011eac:	bf08      	it	eq
 8011eae:	694b      	ldreq	r3, [r1, #20]
 8011eb0:	600f      	str	r7, [r1, #0]
 8011eb2:	bf18      	it	ne
 8011eb4:	2300      	movne	r3, #0
 8011eb6:	eba6 0807 	sub.w	r8, r6, r7
 8011eba:	608b      	str	r3, [r1, #8]
 8011ebc:	f1b8 0f00 	cmp.w	r8, #0
 8011ec0:	dde9      	ble.n	8011e96 <__sflush_r+0xae>
 8011ec2:	6a21      	ldr	r1, [r4, #32]
 8011ec4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011ec6:	4643      	mov	r3, r8
 8011ec8:	463a      	mov	r2, r7
 8011eca:	4628      	mov	r0, r5
 8011ecc:	47b0      	blx	r6
 8011ece:	2800      	cmp	r0, #0
 8011ed0:	dc08      	bgt.n	8011ee4 <__sflush_r+0xfc>
 8011ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011eda:	81a3      	strh	r3, [r4, #12]
 8011edc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ee4:	4407      	add	r7, r0
 8011ee6:	eba8 0800 	sub.w	r8, r8, r0
 8011eea:	e7e7      	b.n	8011ebc <__sflush_r+0xd4>
 8011eec:	dfbffffe 	.word	0xdfbffffe

08011ef0 <_fflush_r>:
 8011ef0:	b538      	push	{r3, r4, r5, lr}
 8011ef2:	690b      	ldr	r3, [r1, #16]
 8011ef4:	4605      	mov	r5, r0
 8011ef6:	460c      	mov	r4, r1
 8011ef8:	b913      	cbnz	r3, 8011f00 <_fflush_r+0x10>
 8011efa:	2500      	movs	r5, #0
 8011efc:	4628      	mov	r0, r5
 8011efe:	bd38      	pop	{r3, r4, r5, pc}
 8011f00:	b118      	cbz	r0, 8011f0a <_fflush_r+0x1a>
 8011f02:	6a03      	ldr	r3, [r0, #32]
 8011f04:	b90b      	cbnz	r3, 8011f0a <_fflush_r+0x1a>
 8011f06:	f7fd fb2d 	bl	800f564 <__sinit>
 8011f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d0f3      	beq.n	8011efa <_fflush_r+0xa>
 8011f12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011f14:	07d0      	lsls	r0, r2, #31
 8011f16:	d404      	bmi.n	8011f22 <_fflush_r+0x32>
 8011f18:	0599      	lsls	r1, r3, #22
 8011f1a:	d402      	bmi.n	8011f22 <_fflush_r+0x32>
 8011f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f1e:	f7fd fcb8 	bl	800f892 <__retarget_lock_acquire_recursive>
 8011f22:	4628      	mov	r0, r5
 8011f24:	4621      	mov	r1, r4
 8011f26:	f7ff ff5f 	bl	8011de8 <__sflush_r>
 8011f2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f2c:	07da      	lsls	r2, r3, #31
 8011f2e:	4605      	mov	r5, r0
 8011f30:	d4e4      	bmi.n	8011efc <_fflush_r+0xc>
 8011f32:	89a3      	ldrh	r3, [r4, #12]
 8011f34:	059b      	lsls	r3, r3, #22
 8011f36:	d4e1      	bmi.n	8011efc <_fflush_r+0xc>
 8011f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f3a:	f7fd fcab 	bl	800f894 <__retarget_lock_release_recursive>
 8011f3e:	e7dd      	b.n	8011efc <_fflush_r+0xc>

08011f40 <fiprintf>:
 8011f40:	b40e      	push	{r1, r2, r3}
 8011f42:	b503      	push	{r0, r1, lr}
 8011f44:	4601      	mov	r1, r0
 8011f46:	ab03      	add	r3, sp, #12
 8011f48:	4805      	ldr	r0, [pc, #20]	@ (8011f60 <fiprintf+0x20>)
 8011f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f4e:	6800      	ldr	r0, [r0, #0]
 8011f50:	9301      	str	r3, [sp, #4]
 8011f52:	f7ff fe31 	bl	8011bb8 <_vfiprintf_r>
 8011f56:	b002      	add	sp, #8
 8011f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f5c:	b003      	add	sp, #12
 8011f5e:	4770      	bx	lr
 8011f60:	20000198 	.word	0x20000198

08011f64 <__swbuf_r>:
 8011f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f66:	460e      	mov	r6, r1
 8011f68:	4614      	mov	r4, r2
 8011f6a:	4605      	mov	r5, r0
 8011f6c:	b118      	cbz	r0, 8011f76 <__swbuf_r+0x12>
 8011f6e:	6a03      	ldr	r3, [r0, #32]
 8011f70:	b90b      	cbnz	r3, 8011f76 <__swbuf_r+0x12>
 8011f72:	f7fd faf7 	bl	800f564 <__sinit>
 8011f76:	69a3      	ldr	r3, [r4, #24]
 8011f78:	60a3      	str	r3, [r4, #8]
 8011f7a:	89a3      	ldrh	r3, [r4, #12]
 8011f7c:	071a      	lsls	r2, r3, #28
 8011f7e:	d501      	bpl.n	8011f84 <__swbuf_r+0x20>
 8011f80:	6923      	ldr	r3, [r4, #16]
 8011f82:	b943      	cbnz	r3, 8011f96 <__swbuf_r+0x32>
 8011f84:	4621      	mov	r1, r4
 8011f86:	4628      	mov	r0, r5
 8011f88:	f000 f82a 	bl	8011fe0 <__swsetup_r>
 8011f8c:	b118      	cbz	r0, 8011f96 <__swbuf_r+0x32>
 8011f8e:	f04f 37ff 	mov.w	r7, #4294967295
 8011f92:	4638      	mov	r0, r7
 8011f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f96:	6823      	ldr	r3, [r4, #0]
 8011f98:	6922      	ldr	r2, [r4, #16]
 8011f9a:	1a98      	subs	r0, r3, r2
 8011f9c:	6963      	ldr	r3, [r4, #20]
 8011f9e:	b2f6      	uxtb	r6, r6
 8011fa0:	4283      	cmp	r3, r0
 8011fa2:	4637      	mov	r7, r6
 8011fa4:	dc05      	bgt.n	8011fb2 <__swbuf_r+0x4e>
 8011fa6:	4621      	mov	r1, r4
 8011fa8:	4628      	mov	r0, r5
 8011faa:	f7ff ffa1 	bl	8011ef0 <_fflush_r>
 8011fae:	2800      	cmp	r0, #0
 8011fb0:	d1ed      	bne.n	8011f8e <__swbuf_r+0x2a>
 8011fb2:	68a3      	ldr	r3, [r4, #8]
 8011fb4:	3b01      	subs	r3, #1
 8011fb6:	60a3      	str	r3, [r4, #8]
 8011fb8:	6823      	ldr	r3, [r4, #0]
 8011fba:	1c5a      	adds	r2, r3, #1
 8011fbc:	6022      	str	r2, [r4, #0]
 8011fbe:	701e      	strb	r6, [r3, #0]
 8011fc0:	6962      	ldr	r2, [r4, #20]
 8011fc2:	1c43      	adds	r3, r0, #1
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d004      	beq.n	8011fd2 <__swbuf_r+0x6e>
 8011fc8:	89a3      	ldrh	r3, [r4, #12]
 8011fca:	07db      	lsls	r3, r3, #31
 8011fcc:	d5e1      	bpl.n	8011f92 <__swbuf_r+0x2e>
 8011fce:	2e0a      	cmp	r6, #10
 8011fd0:	d1df      	bne.n	8011f92 <__swbuf_r+0x2e>
 8011fd2:	4621      	mov	r1, r4
 8011fd4:	4628      	mov	r0, r5
 8011fd6:	f7ff ff8b 	bl	8011ef0 <_fflush_r>
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	d0d9      	beq.n	8011f92 <__swbuf_r+0x2e>
 8011fde:	e7d6      	b.n	8011f8e <__swbuf_r+0x2a>

08011fe0 <__swsetup_r>:
 8011fe0:	b538      	push	{r3, r4, r5, lr}
 8011fe2:	4b29      	ldr	r3, [pc, #164]	@ (8012088 <__swsetup_r+0xa8>)
 8011fe4:	4605      	mov	r5, r0
 8011fe6:	6818      	ldr	r0, [r3, #0]
 8011fe8:	460c      	mov	r4, r1
 8011fea:	b118      	cbz	r0, 8011ff4 <__swsetup_r+0x14>
 8011fec:	6a03      	ldr	r3, [r0, #32]
 8011fee:	b90b      	cbnz	r3, 8011ff4 <__swsetup_r+0x14>
 8011ff0:	f7fd fab8 	bl	800f564 <__sinit>
 8011ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ff8:	0719      	lsls	r1, r3, #28
 8011ffa:	d422      	bmi.n	8012042 <__swsetup_r+0x62>
 8011ffc:	06da      	lsls	r2, r3, #27
 8011ffe:	d407      	bmi.n	8012010 <__swsetup_r+0x30>
 8012000:	2209      	movs	r2, #9
 8012002:	602a      	str	r2, [r5, #0]
 8012004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012008:	81a3      	strh	r3, [r4, #12]
 801200a:	f04f 30ff 	mov.w	r0, #4294967295
 801200e:	e033      	b.n	8012078 <__swsetup_r+0x98>
 8012010:	0758      	lsls	r0, r3, #29
 8012012:	d512      	bpl.n	801203a <__swsetup_r+0x5a>
 8012014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012016:	b141      	cbz	r1, 801202a <__swsetup_r+0x4a>
 8012018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801201c:	4299      	cmp	r1, r3
 801201e:	d002      	beq.n	8012026 <__swsetup_r+0x46>
 8012020:	4628      	mov	r0, r5
 8012022:	f7fe fac1 	bl	80105a8 <_free_r>
 8012026:	2300      	movs	r3, #0
 8012028:	6363      	str	r3, [r4, #52]	@ 0x34
 801202a:	89a3      	ldrh	r3, [r4, #12]
 801202c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012030:	81a3      	strh	r3, [r4, #12]
 8012032:	2300      	movs	r3, #0
 8012034:	6063      	str	r3, [r4, #4]
 8012036:	6923      	ldr	r3, [r4, #16]
 8012038:	6023      	str	r3, [r4, #0]
 801203a:	89a3      	ldrh	r3, [r4, #12]
 801203c:	f043 0308 	orr.w	r3, r3, #8
 8012040:	81a3      	strh	r3, [r4, #12]
 8012042:	6923      	ldr	r3, [r4, #16]
 8012044:	b94b      	cbnz	r3, 801205a <__swsetup_r+0x7a>
 8012046:	89a3      	ldrh	r3, [r4, #12]
 8012048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801204c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012050:	d003      	beq.n	801205a <__swsetup_r+0x7a>
 8012052:	4621      	mov	r1, r4
 8012054:	4628      	mov	r0, r5
 8012056:	f000 f8b2 	bl	80121be <__smakebuf_r>
 801205a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801205e:	f013 0201 	ands.w	r2, r3, #1
 8012062:	d00a      	beq.n	801207a <__swsetup_r+0x9a>
 8012064:	2200      	movs	r2, #0
 8012066:	60a2      	str	r2, [r4, #8]
 8012068:	6962      	ldr	r2, [r4, #20]
 801206a:	4252      	negs	r2, r2
 801206c:	61a2      	str	r2, [r4, #24]
 801206e:	6922      	ldr	r2, [r4, #16]
 8012070:	b942      	cbnz	r2, 8012084 <__swsetup_r+0xa4>
 8012072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012076:	d1c5      	bne.n	8012004 <__swsetup_r+0x24>
 8012078:	bd38      	pop	{r3, r4, r5, pc}
 801207a:	0799      	lsls	r1, r3, #30
 801207c:	bf58      	it	pl
 801207e:	6962      	ldrpl	r2, [r4, #20]
 8012080:	60a2      	str	r2, [r4, #8]
 8012082:	e7f4      	b.n	801206e <__swsetup_r+0x8e>
 8012084:	2000      	movs	r0, #0
 8012086:	e7f7      	b.n	8012078 <__swsetup_r+0x98>
 8012088:	20000198 	.word	0x20000198

0801208c <memmove>:
 801208c:	4288      	cmp	r0, r1
 801208e:	b510      	push	{r4, lr}
 8012090:	eb01 0402 	add.w	r4, r1, r2
 8012094:	d902      	bls.n	801209c <memmove+0x10>
 8012096:	4284      	cmp	r4, r0
 8012098:	4623      	mov	r3, r4
 801209a:	d807      	bhi.n	80120ac <memmove+0x20>
 801209c:	1e43      	subs	r3, r0, #1
 801209e:	42a1      	cmp	r1, r4
 80120a0:	d008      	beq.n	80120b4 <memmove+0x28>
 80120a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80120a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80120aa:	e7f8      	b.n	801209e <memmove+0x12>
 80120ac:	4402      	add	r2, r0
 80120ae:	4601      	mov	r1, r0
 80120b0:	428a      	cmp	r2, r1
 80120b2:	d100      	bne.n	80120b6 <memmove+0x2a>
 80120b4:	bd10      	pop	{r4, pc}
 80120b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80120ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80120be:	e7f7      	b.n	80120b0 <memmove+0x24>

080120c0 <_sbrk_r>:
 80120c0:	b538      	push	{r3, r4, r5, lr}
 80120c2:	4d06      	ldr	r5, [pc, #24]	@ (80120dc <_sbrk_r+0x1c>)
 80120c4:	2300      	movs	r3, #0
 80120c6:	4604      	mov	r4, r0
 80120c8:	4608      	mov	r0, r1
 80120ca:	602b      	str	r3, [r5, #0]
 80120cc:	f7f5 f98e 	bl	80073ec <_sbrk>
 80120d0:	1c43      	adds	r3, r0, #1
 80120d2:	d102      	bne.n	80120da <_sbrk_r+0x1a>
 80120d4:	682b      	ldr	r3, [r5, #0]
 80120d6:	b103      	cbz	r3, 80120da <_sbrk_r+0x1a>
 80120d8:	6023      	str	r3, [r4, #0]
 80120da:	bd38      	pop	{r3, r4, r5, pc}
 80120dc:	20003928 	.word	0x20003928

080120e0 <abort>:
 80120e0:	b508      	push	{r3, lr}
 80120e2:	2006      	movs	r0, #6
 80120e4:	f000 f8d0 	bl	8012288 <raise>
 80120e8:	2001      	movs	r0, #1
 80120ea:	f000 ffc7 	bl	801307c <_exit>

080120ee <_calloc_r>:
 80120ee:	b570      	push	{r4, r5, r6, lr}
 80120f0:	fba1 5402 	umull	r5, r4, r1, r2
 80120f4:	b93c      	cbnz	r4, 8012106 <_calloc_r+0x18>
 80120f6:	4629      	mov	r1, r5
 80120f8:	f7fe fe04 	bl	8010d04 <_malloc_r>
 80120fc:	4606      	mov	r6, r0
 80120fe:	b928      	cbnz	r0, 801210c <_calloc_r+0x1e>
 8012100:	2600      	movs	r6, #0
 8012102:	4630      	mov	r0, r6
 8012104:	bd70      	pop	{r4, r5, r6, pc}
 8012106:	220c      	movs	r2, #12
 8012108:	6002      	str	r2, [r0, #0]
 801210a:	e7f9      	b.n	8012100 <_calloc_r+0x12>
 801210c:	462a      	mov	r2, r5
 801210e:	4621      	mov	r1, r4
 8012110:	f7fd fad3 	bl	800f6ba <memset>
 8012114:	e7f5      	b.n	8012102 <_calloc_r+0x14>

08012116 <_realloc_r>:
 8012116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801211a:	4680      	mov	r8, r0
 801211c:	4615      	mov	r5, r2
 801211e:	460c      	mov	r4, r1
 8012120:	b921      	cbnz	r1, 801212c <_realloc_r+0x16>
 8012122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012126:	4611      	mov	r1, r2
 8012128:	f7fe bdec 	b.w	8010d04 <_malloc_r>
 801212c:	b92a      	cbnz	r2, 801213a <_realloc_r+0x24>
 801212e:	f7fe fa3b 	bl	80105a8 <_free_r>
 8012132:	2400      	movs	r4, #0
 8012134:	4620      	mov	r0, r4
 8012136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801213a:	f000 f8e3 	bl	8012304 <_malloc_usable_size_r>
 801213e:	4285      	cmp	r5, r0
 8012140:	4606      	mov	r6, r0
 8012142:	d802      	bhi.n	801214a <_realloc_r+0x34>
 8012144:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012148:	d8f4      	bhi.n	8012134 <_realloc_r+0x1e>
 801214a:	4629      	mov	r1, r5
 801214c:	4640      	mov	r0, r8
 801214e:	f7fe fdd9 	bl	8010d04 <_malloc_r>
 8012152:	4607      	mov	r7, r0
 8012154:	2800      	cmp	r0, #0
 8012156:	d0ec      	beq.n	8012132 <_realloc_r+0x1c>
 8012158:	42b5      	cmp	r5, r6
 801215a:	462a      	mov	r2, r5
 801215c:	4621      	mov	r1, r4
 801215e:	bf28      	it	cs
 8012160:	4632      	movcs	r2, r6
 8012162:	f7fd fb98 	bl	800f896 <memcpy>
 8012166:	4621      	mov	r1, r4
 8012168:	4640      	mov	r0, r8
 801216a:	f7fe fa1d 	bl	80105a8 <_free_r>
 801216e:	463c      	mov	r4, r7
 8012170:	e7e0      	b.n	8012134 <_realloc_r+0x1e>

08012172 <__swhatbuf_r>:
 8012172:	b570      	push	{r4, r5, r6, lr}
 8012174:	460c      	mov	r4, r1
 8012176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801217a:	2900      	cmp	r1, #0
 801217c:	b096      	sub	sp, #88	@ 0x58
 801217e:	4615      	mov	r5, r2
 8012180:	461e      	mov	r6, r3
 8012182:	da0d      	bge.n	80121a0 <__swhatbuf_r+0x2e>
 8012184:	89a3      	ldrh	r3, [r4, #12]
 8012186:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801218a:	f04f 0100 	mov.w	r1, #0
 801218e:	bf14      	ite	ne
 8012190:	2340      	movne	r3, #64	@ 0x40
 8012192:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012196:	2000      	movs	r0, #0
 8012198:	6031      	str	r1, [r6, #0]
 801219a:	602b      	str	r3, [r5, #0]
 801219c:	b016      	add	sp, #88	@ 0x58
 801219e:	bd70      	pop	{r4, r5, r6, pc}
 80121a0:	466a      	mov	r2, sp
 80121a2:	f000 f879 	bl	8012298 <_fstat_r>
 80121a6:	2800      	cmp	r0, #0
 80121a8:	dbec      	blt.n	8012184 <__swhatbuf_r+0x12>
 80121aa:	9901      	ldr	r1, [sp, #4]
 80121ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80121b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80121b4:	4259      	negs	r1, r3
 80121b6:	4159      	adcs	r1, r3
 80121b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80121bc:	e7eb      	b.n	8012196 <__swhatbuf_r+0x24>

080121be <__smakebuf_r>:
 80121be:	898b      	ldrh	r3, [r1, #12]
 80121c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121c2:	079d      	lsls	r5, r3, #30
 80121c4:	4606      	mov	r6, r0
 80121c6:	460c      	mov	r4, r1
 80121c8:	d507      	bpl.n	80121da <__smakebuf_r+0x1c>
 80121ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80121ce:	6023      	str	r3, [r4, #0]
 80121d0:	6123      	str	r3, [r4, #16]
 80121d2:	2301      	movs	r3, #1
 80121d4:	6163      	str	r3, [r4, #20]
 80121d6:	b003      	add	sp, #12
 80121d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121da:	ab01      	add	r3, sp, #4
 80121dc:	466a      	mov	r2, sp
 80121de:	f7ff ffc8 	bl	8012172 <__swhatbuf_r>
 80121e2:	9f00      	ldr	r7, [sp, #0]
 80121e4:	4605      	mov	r5, r0
 80121e6:	4639      	mov	r1, r7
 80121e8:	4630      	mov	r0, r6
 80121ea:	f7fe fd8b 	bl	8010d04 <_malloc_r>
 80121ee:	b948      	cbnz	r0, 8012204 <__smakebuf_r+0x46>
 80121f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121f4:	059a      	lsls	r2, r3, #22
 80121f6:	d4ee      	bmi.n	80121d6 <__smakebuf_r+0x18>
 80121f8:	f023 0303 	bic.w	r3, r3, #3
 80121fc:	f043 0302 	orr.w	r3, r3, #2
 8012200:	81a3      	strh	r3, [r4, #12]
 8012202:	e7e2      	b.n	80121ca <__smakebuf_r+0xc>
 8012204:	89a3      	ldrh	r3, [r4, #12]
 8012206:	6020      	str	r0, [r4, #0]
 8012208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801220c:	81a3      	strh	r3, [r4, #12]
 801220e:	9b01      	ldr	r3, [sp, #4]
 8012210:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012214:	b15b      	cbz	r3, 801222e <__smakebuf_r+0x70>
 8012216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801221a:	4630      	mov	r0, r6
 801221c:	f000 f84e 	bl	80122bc <_isatty_r>
 8012220:	b128      	cbz	r0, 801222e <__smakebuf_r+0x70>
 8012222:	89a3      	ldrh	r3, [r4, #12]
 8012224:	f023 0303 	bic.w	r3, r3, #3
 8012228:	f043 0301 	orr.w	r3, r3, #1
 801222c:	81a3      	strh	r3, [r4, #12]
 801222e:	89a3      	ldrh	r3, [r4, #12]
 8012230:	431d      	orrs	r5, r3
 8012232:	81a5      	strh	r5, [r4, #12]
 8012234:	e7cf      	b.n	80121d6 <__smakebuf_r+0x18>

08012236 <_raise_r>:
 8012236:	291f      	cmp	r1, #31
 8012238:	b538      	push	{r3, r4, r5, lr}
 801223a:	4605      	mov	r5, r0
 801223c:	460c      	mov	r4, r1
 801223e:	d904      	bls.n	801224a <_raise_r+0x14>
 8012240:	2316      	movs	r3, #22
 8012242:	6003      	str	r3, [r0, #0]
 8012244:	f04f 30ff 	mov.w	r0, #4294967295
 8012248:	bd38      	pop	{r3, r4, r5, pc}
 801224a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801224c:	b112      	cbz	r2, 8012254 <_raise_r+0x1e>
 801224e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012252:	b94b      	cbnz	r3, 8012268 <_raise_r+0x32>
 8012254:	4628      	mov	r0, r5
 8012256:	f000 f853 	bl	8012300 <_getpid_r>
 801225a:	4622      	mov	r2, r4
 801225c:	4601      	mov	r1, r0
 801225e:	4628      	mov	r0, r5
 8012260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012264:	f000 b83a 	b.w	80122dc <_kill_r>
 8012268:	2b01      	cmp	r3, #1
 801226a:	d00a      	beq.n	8012282 <_raise_r+0x4c>
 801226c:	1c59      	adds	r1, r3, #1
 801226e:	d103      	bne.n	8012278 <_raise_r+0x42>
 8012270:	2316      	movs	r3, #22
 8012272:	6003      	str	r3, [r0, #0]
 8012274:	2001      	movs	r0, #1
 8012276:	e7e7      	b.n	8012248 <_raise_r+0x12>
 8012278:	2100      	movs	r1, #0
 801227a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801227e:	4620      	mov	r0, r4
 8012280:	4798      	blx	r3
 8012282:	2000      	movs	r0, #0
 8012284:	e7e0      	b.n	8012248 <_raise_r+0x12>
	...

08012288 <raise>:
 8012288:	4b02      	ldr	r3, [pc, #8]	@ (8012294 <raise+0xc>)
 801228a:	4601      	mov	r1, r0
 801228c:	6818      	ldr	r0, [r3, #0]
 801228e:	f7ff bfd2 	b.w	8012236 <_raise_r>
 8012292:	bf00      	nop
 8012294:	20000198 	.word	0x20000198

08012298 <_fstat_r>:
 8012298:	b538      	push	{r3, r4, r5, lr}
 801229a:	4d07      	ldr	r5, [pc, #28]	@ (80122b8 <_fstat_r+0x20>)
 801229c:	2300      	movs	r3, #0
 801229e:	4604      	mov	r4, r0
 80122a0:	4608      	mov	r0, r1
 80122a2:	4611      	mov	r1, r2
 80122a4:	602b      	str	r3, [r5, #0]
 80122a6:	f000 feb1 	bl	801300c <_fstat>
 80122aa:	1c43      	adds	r3, r0, #1
 80122ac:	d102      	bne.n	80122b4 <_fstat_r+0x1c>
 80122ae:	682b      	ldr	r3, [r5, #0]
 80122b0:	b103      	cbz	r3, 80122b4 <_fstat_r+0x1c>
 80122b2:	6023      	str	r3, [r4, #0]
 80122b4:	bd38      	pop	{r3, r4, r5, pc}
 80122b6:	bf00      	nop
 80122b8:	20003928 	.word	0x20003928

080122bc <_isatty_r>:
 80122bc:	b538      	push	{r3, r4, r5, lr}
 80122be:	4d06      	ldr	r5, [pc, #24]	@ (80122d8 <_isatty_r+0x1c>)
 80122c0:	2300      	movs	r3, #0
 80122c2:	4604      	mov	r4, r0
 80122c4:	4608      	mov	r0, r1
 80122c6:	602b      	str	r3, [r5, #0]
 80122c8:	f000 feb0 	bl	801302c <_isatty>
 80122cc:	1c43      	adds	r3, r0, #1
 80122ce:	d102      	bne.n	80122d6 <_isatty_r+0x1a>
 80122d0:	682b      	ldr	r3, [r5, #0]
 80122d2:	b103      	cbz	r3, 80122d6 <_isatty_r+0x1a>
 80122d4:	6023      	str	r3, [r4, #0]
 80122d6:	bd38      	pop	{r3, r4, r5, pc}
 80122d8:	20003928 	.word	0x20003928

080122dc <_kill_r>:
 80122dc:	b538      	push	{r3, r4, r5, lr}
 80122de:	4d07      	ldr	r5, [pc, #28]	@ (80122fc <_kill_r+0x20>)
 80122e0:	2300      	movs	r3, #0
 80122e2:	4604      	mov	r4, r0
 80122e4:	4608      	mov	r0, r1
 80122e6:	4611      	mov	r1, r2
 80122e8:	602b      	str	r3, [r5, #0]
 80122ea:	f000 fea7 	bl	801303c <_kill>
 80122ee:	1c43      	adds	r3, r0, #1
 80122f0:	d102      	bne.n	80122f8 <_kill_r+0x1c>
 80122f2:	682b      	ldr	r3, [r5, #0]
 80122f4:	b103      	cbz	r3, 80122f8 <_kill_r+0x1c>
 80122f6:	6023      	str	r3, [r4, #0]
 80122f8:	bd38      	pop	{r3, r4, r5, pc}
 80122fa:	bf00      	nop
 80122fc:	20003928 	.word	0x20003928

08012300 <_getpid_r>:
 8012300:	f000 be8c 	b.w	801301c <_getpid>

08012304 <_malloc_usable_size_r>:
 8012304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012308:	1f18      	subs	r0, r3, #4
 801230a:	2b00      	cmp	r3, #0
 801230c:	bfbc      	itt	lt
 801230e:	580b      	ldrlt	r3, [r1, r0]
 8012310:	18c0      	addlt	r0, r0, r3
 8012312:	4770      	bx	lr

08012314 <sqrtf>:
 8012314:	b508      	push	{r3, lr}
 8012316:	ed2d 8b02 	vpush	{d8}
 801231a:	eeb0 8a40 	vmov.f32	s16, s0
 801231e:	f000 f97d 	bl	801261c <__ieee754_sqrtf>
 8012322:	eeb4 8a48 	vcmp.f32	s16, s16
 8012326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801232a:	d60c      	bvs.n	8012346 <sqrtf+0x32>
 801232c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801234c <sqrtf+0x38>
 8012330:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012338:	d505      	bpl.n	8012346 <sqrtf+0x32>
 801233a:	f7fd fa7f 	bl	800f83c <__errno>
 801233e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012342:	2321      	movs	r3, #33	@ 0x21
 8012344:	6003      	str	r3, [r0, #0]
 8012346:	ecbd 8b02 	vpop	{d8}
 801234a:	bd08      	pop	{r3, pc}
 801234c:	00000000 	.word	0x00000000

08012350 <atanf>:
 8012350:	b538      	push	{r3, r4, r5, lr}
 8012352:	ee10 5a10 	vmov	r5, s0
 8012356:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801235a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801235e:	eef0 7a40 	vmov.f32	s15, s0
 8012362:	d310      	bcc.n	8012386 <atanf+0x36>
 8012364:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8012368:	d904      	bls.n	8012374 <atanf+0x24>
 801236a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801236e:	eeb0 0a67 	vmov.f32	s0, s15
 8012372:	bd38      	pop	{r3, r4, r5, pc}
 8012374:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80124ac <atanf+0x15c>
 8012378:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80124b0 <atanf+0x160>
 801237c:	2d00      	cmp	r5, #0
 801237e:	bfc8      	it	gt
 8012380:	eef0 7a47 	vmovgt.f32	s15, s14
 8012384:	e7f3      	b.n	801236e <atanf+0x1e>
 8012386:	4b4b      	ldr	r3, [pc, #300]	@ (80124b4 <atanf+0x164>)
 8012388:	429c      	cmp	r4, r3
 801238a:	d810      	bhi.n	80123ae <atanf+0x5e>
 801238c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8012390:	d20a      	bcs.n	80123a8 <atanf+0x58>
 8012392:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80124b8 <atanf+0x168>
 8012396:	ee30 7a07 	vadd.f32	s14, s0, s14
 801239a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801239e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80123a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a6:	dce2      	bgt.n	801236e <atanf+0x1e>
 80123a8:	f04f 33ff 	mov.w	r3, #4294967295
 80123ac:	e013      	b.n	80123d6 <atanf+0x86>
 80123ae:	f000 f8e7 	bl	8012580 <fabsf>
 80123b2:	4b42      	ldr	r3, [pc, #264]	@ (80124bc <atanf+0x16c>)
 80123b4:	429c      	cmp	r4, r3
 80123b6:	d84f      	bhi.n	8012458 <atanf+0x108>
 80123b8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80123bc:	429c      	cmp	r4, r3
 80123be:	d841      	bhi.n	8012444 <atanf+0xf4>
 80123c0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80123c4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80123c8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80123cc:	2300      	movs	r3, #0
 80123ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80123d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80123d6:	1c5a      	adds	r2, r3, #1
 80123d8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80123dc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80124c0 <atanf+0x170>
 80123e0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80124c4 <atanf+0x174>
 80123e4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80124c8 <atanf+0x178>
 80123e8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80123ec:	eee6 5a87 	vfma.f32	s11, s13, s14
 80123f0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80124cc <atanf+0x17c>
 80123f4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80123f8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80124d0 <atanf+0x180>
 80123fc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012400:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80124d4 <atanf+0x184>
 8012404:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012408:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80124d8 <atanf+0x188>
 801240c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012410:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80124dc <atanf+0x18c>
 8012414:	eea6 5a87 	vfma.f32	s10, s13, s14
 8012418:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80124e0 <atanf+0x190>
 801241c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012420:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80124e4 <atanf+0x194>
 8012424:	eea7 5a26 	vfma.f32	s10, s14, s13
 8012428:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80124e8 <atanf+0x198>
 801242c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012430:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012434:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012438:	ee27 7a87 	vmul.f32	s14, s15, s14
 801243c:	d121      	bne.n	8012482 <atanf+0x132>
 801243e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012442:	e794      	b.n	801236e <atanf+0x1e>
 8012444:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012448:	ee30 7a67 	vsub.f32	s14, s0, s15
 801244c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012450:	2301      	movs	r3, #1
 8012452:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012456:	e7be      	b.n	80123d6 <atanf+0x86>
 8012458:	4b24      	ldr	r3, [pc, #144]	@ (80124ec <atanf+0x19c>)
 801245a:	429c      	cmp	r4, r3
 801245c:	d80b      	bhi.n	8012476 <atanf+0x126>
 801245e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8012462:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012466:	eea0 7a27 	vfma.f32	s14, s0, s15
 801246a:	2302      	movs	r3, #2
 801246c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012474:	e7af      	b.n	80123d6 <atanf+0x86>
 8012476:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801247a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801247e:	2303      	movs	r3, #3
 8012480:	e7a9      	b.n	80123d6 <atanf+0x86>
 8012482:	4a1b      	ldr	r2, [pc, #108]	@ (80124f0 <atanf+0x1a0>)
 8012484:	491b      	ldr	r1, [pc, #108]	@ (80124f4 <atanf+0x1a4>)
 8012486:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801248a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801248e:	edd3 6a00 	vldr	s13, [r3]
 8012492:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012496:	2d00      	cmp	r5, #0
 8012498:	ee37 7a67 	vsub.f32	s14, s14, s15
 801249c:	edd2 7a00 	vldr	s15, [r2]
 80124a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80124a4:	bfb8      	it	lt
 80124a6:	eef1 7a67 	vneglt.f32	s15, s15
 80124aa:	e760      	b.n	801236e <atanf+0x1e>
 80124ac:	bfc90fdb 	.word	0xbfc90fdb
 80124b0:	3fc90fdb 	.word	0x3fc90fdb
 80124b4:	3edfffff 	.word	0x3edfffff
 80124b8:	7149f2ca 	.word	0x7149f2ca
 80124bc:	3f97ffff 	.word	0x3f97ffff
 80124c0:	3c8569d7 	.word	0x3c8569d7
 80124c4:	3d4bda59 	.word	0x3d4bda59
 80124c8:	bd6ef16b 	.word	0xbd6ef16b
 80124cc:	3d886b35 	.word	0x3d886b35
 80124d0:	3dba2e6e 	.word	0x3dba2e6e
 80124d4:	3e124925 	.word	0x3e124925
 80124d8:	3eaaaaab 	.word	0x3eaaaaab
 80124dc:	bd15a221 	.word	0xbd15a221
 80124e0:	bd9d8795 	.word	0xbd9d8795
 80124e4:	bde38e38 	.word	0xbde38e38
 80124e8:	be4ccccd 	.word	0xbe4ccccd
 80124ec:	401bffff 	.word	0x401bffff
 80124f0:	080136a4 	.word	0x080136a4
 80124f4:	08013694 	.word	0x08013694

080124f8 <cosf>:
 80124f8:	ee10 3a10 	vmov	r3, s0
 80124fc:	b507      	push	{r0, r1, r2, lr}
 80124fe:	4a1e      	ldr	r2, [pc, #120]	@ (8012578 <cosf+0x80>)
 8012500:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012504:	4293      	cmp	r3, r2
 8012506:	d806      	bhi.n	8012516 <cosf+0x1e>
 8012508:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801257c <cosf+0x84>
 801250c:	b003      	add	sp, #12
 801250e:	f85d eb04 	ldr.w	lr, [sp], #4
 8012512:	f000 b887 	b.w	8012624 <__kernel_cosf>
 8012516:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801251a:	d304      	bcc.n	8012526 <cosf+0x2e>
 801251c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012520:	b003      	add	sp, #12
 8012522:	f85d fb04 	ldr.w	pc, [sp], #4
 8012526:	4668      	mov	r0, sp
 8012528:	f000 f91c 	bl	8012764 <__ieee754_rem_pio2f>
 801252c:	f000 0003 	and.w	r0, r0, #3
 8012530:	2801      	cmp	r0, #1
 8012532:	d009      	beq.n	8012548 <cosf+0x50>
 8012534:	2802      	cmp	r0, #2
 8012536:	d010      	beq.n	801255a <cosf+0x62>
 8012538:	b9b0      	cbnz	r0, 8012568 <cosf+0x70>
 801253a:	eddd 0a01 	vldr	s1, [sp, #4]
 801253e:	ed9d 0a00 	vldr	s0, [sp]
 8012542:	f000 f86f 	bl	8012624 <__kernel_cosf>
 8012546:	e7eb      	b.n	8012520 <cosf+0x28>
 8012548:	eddd 0a01 	vldr	s1, [sp, #4]
 801254c:	ed9d 0a00 	vldr	s0, [sp]
 8012550:	f000 f8c0 	bl	80126d4 <__kernel_sinf>
 8012554:	eeb1 0a40 	vneg.f32	s0, s0
 8012558:	e7e2      	b.n	8012520 <cosf+0x28>
 801255a:	eddd 0a01 	vldr	s1, [sp, #4]
 801255e:	ed9d 0a00 	vldr	s0, [sp]
 8012562:	f000 f85f 	bl	8012624 <__kernel_cosf>
 8012566:	e7f5      	b.n	8012554 <cosf+0x5c>
 8012568:	eddd 0a01 	vldr	s1, [sp, #4]
 801256c:	ed9d 0a00 	vldr	s0, [sp]
 8012570:	2001      	movs	r0, #1
 8012572:	f000 f8af 	bl	80126d4 <__kernel_sinf>
 8012576:	e7d3      	b.n	8012520 <cosf+0x28>
 8012578:	3f490fd8 	.word	0x3f490fd8
 801257c:	00000000 	.word	0x00000000

08012580 <fabsf>:
 8012580:	ee10 3a10 	vmov	r3, s0
 8012584:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012588:	ee00 3a10 	vmov	s0, r3
 801258c:	4770      	bx	lr
	...

08012590 <sinf>:
 8012590:	ee10 3a10 	vmov	r3, s0
 8012594:	b507      	push	{r0, r1, r2, lr}
 8012596:	4a1f      	ldr	r2, [pc, #124]	@ (8012614 <sinf+0x84>)
 8012598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801259c:	4293      	cmp	r3, r2
 801259e:	d807      	bhi.n	80125b0 <sinf+0x20>
 80125a0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8012618 <sinf+0x88>
 80125a4:	2000      	movs	r0, #0
 80125a6:	b003      	add	sp, #12
 80125a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80125ac:	f000 b892 	b.w	80126d4 <__kernel_sinf>
 80125b0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80125b4:	d304      	bcc.n	80125c0 <sinf+0x30>
 80125b6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80125ba:	b003      	add	sp, #12
 80125bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80125c0:	4668      	mov	r0, sp
 80125c2:	f000 f8cf 	bl	8012764 <__ieee754_rem_pio2f>
 80125c6:	f000 0003 	and.w	r0, r0, #3
 80125ca:	2801      	cmp	r0, #1
 80125cc:	d00a      	beq.n	80125e4 <sinf+0x54>
 80125ce:	2802      	cmp	r0, #2
 80125d0:	d00f      	beq.n	80125f2 <sinf+0x62>
 80125d2:	b9c0      	cbnz	r0, 8012606 <sinf+0x76>
 80125d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80125d8:	ed9d 0a00 	vldr	s0, [sp]
 80125dc:	2001      	movs	r0, #1
 80125de:	f000 f879 	bl	80126d4 <__kernel_sinf>
 80125e2:	e7ea      	b.n	80125ba <sinf+0x2a>
 80125e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80125e8:	ed9d 0a00 	vldr	s0, [sp]
 80125ec:	f000 f81a 	bl	8012624 <__kernel_cosf>
 80125f0:	e7e3      	b.n	80125ba <sinf+0x2a>
 80125f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80125f6:	ed9d 0a00 	vldr	s0, [sp]
 80125fa:	2001      	movs	r0, #1
 80125fc:	f000 f86a 	bl	80126d4 <__kernel_sinf>
 8012600:	eeb1 0a40 	vneg.f32	s0, s0
 8012604:	e7d9      	b.n	80125ba <sinf+0x2a>
 8012606:	eddd 0a01 	vldr	s1, [sp, #4]
 801260a:	ed9d 0a00 	vldr	s0, [sp]
 801260e:	f000 f809 	bl	8012624 <__kernel_cosf>
 8012612:	e7f5      	b.n	8012600 <sinf+0x70>
 8012614:	3f490fd8 	.word	0x3f490fd8
 8012618:	00000000 	.word	0x00000000

0801261c <__ieee754_sqrtf>:
 801261c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012620:	4770      	bx	lr
	...

08012624 <__kernel_cosf>:
 8012624:	ee10 3a10 	vmov	r3, s0
 8012628:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801262c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012630:	eef0 6a40 	vmov.f32	s13, s0
 8012634:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012638:	d204      	bcs.n	8012644 <__kernel_cosf+0x20>
 801263a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801263e:	ee17 2a90 	vmov	r2, s15
 8012642:	b342      	cbz	r2, 8012696 <__kernel_cosf+0x72>
 8012644:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012648:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80126b4 <__kernel_cosf+0x90>
 801264c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80126b8 <__kernel_cosf+0x94>
 8012650:	4a1a      	ldr	r2, [pc, #104]	@ (80126bc <__kernel_cosf+0x98>)
 8012652:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012656:	4293      	cmp	r3, r2
 8012658:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80126c0 <__kernel_cosf+0x9c>
 801265c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012660:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80126c4 <__kernel_cosf+0xa0>
 8012664:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012668:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80126c8 <__kernel_cosf+0xa4>
 801266c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012670:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80126cc <__kernel_cosf+0xa8>
 8012674:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012678:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801267c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8012680:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012684:	eee7 0a06 	vfma.f32	s1, s14, s12
 8012688:	ee67 7a27 	vmul.f32	s15, s14, s15
 801268c:	d804      	bhi.n	8012698 <__kernel_cosf+0x74>
 801268e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012692:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012696:	4770      	bx	lr
 8012698:	4a0d      	ldr	r2, [pc, #52]	@ (80126d0 <__kernel_cosf+0xac>)
 801269a:	4293      	cmp	r3, r2
 801269c:	bf9a      	itte	ls
 801269e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80126a2:	ee07 3a10 	vmovls	s14, r3
 80126a6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80126aa:	ee30 0a47 	vsub.f32	s0, s0, s14
 80126ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126b2:	e7ec      	b.n	801268e <__kernel_cosf+0x6a>
 80126b4:	ad47d74e 	.word	0xad47d74e
 80126b8:	310f74f6 	.word	0x310f74f6
 80126bc:	3e999999 	.word	0x3e999999
 80126c0:	b493f27c 	.word	0xb493f27c
 80126c4:	37d00d01 	.word	0x37d00d01
 80126c8:	bab60b61 	.word	0xbab60b61
 80126cc:	3d2aaaab 	.word	0x3d2aaaab
 80126d0:	3f480000 	.word	0x3f480000

080126d4 <__kernel_sinf>:
 80126d4:	ee10 3a10 	vmov	r3, s0
 80126d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80126dc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80126e0:	d204      	bcs.n	80126ec <__kernel_sinf+0x18>
 80126e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80126e6:	ee17 3a90 	vmov	r3, s15
 80126ea:	b35b      	cbz	r3, 8012744 <__kernel_sinf+0x70>
 80126ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 80126f0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012748 <__kernel_sinf+0x74>
 80126f4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801274c <__kernel_sinf+0x78>
 80126f8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80126fc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8012750 <__kernel_sinf+0x7c>
 8012700:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012704:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8012754 <__kernel_sinf+0x80>
 8012708:	eea7 6a87 	vfma.f32	s12, s15, s14
 801270c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8012758 <__kernel_sinf+0x84>
 8012710:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012714:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012718:	b930      	cbnz	r0, 8012728 <__kernel_sinf+0x54>
 801271a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801275c <__kernel_sinf+0x88>
 801271e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012722:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012726:	4770      	bx	lr
 8012728:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801272c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012730:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012734:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012738:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8012760 <__kernel_sinf+0x8c>
 801273c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012740:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop
 8012748:	2f2ec9d3 	.word	0x2f2ec9d3
 801274c:	b2d72f34 	.word	0xb2d72f34
 8012750:	3638ef1b 	.word	0x3638ef1b
 8012754:	b9500d01 	.word	0xb9500d01
 8012758:	3c088889 	.word	0x3c088889
 801275c:	be2aaaab 	.word	0xbe2aaaab
 8012760:	3e2aaaab 	.word	0x3e2aaaab

08012764 <__ieee754_rem_pio2f>:
 8012764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012766:	ee10 6a10 	vmov	r6, s0
 801276a:	4b88      	ldr	r3, [pc, #544]	@ (801298c <__ieee754_rem_pio2f+0x228>)
 801276c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8012770:	429d      	cmp	r5, r3
 8012772:	b087      	sub	sp, #28
 8012774:	4604      	mov	r4, r0
 8012776:	d805      	bhi.n	8012784 <__ieee754_rem_pio2f+0x20>
 8012778:	2300      	movs	r3, #0
 801277a:	ed80 0a00 	vstr	s0, [r0]
 801277e:	6043      	str	r3, [r0, #4]
 8012780:	2000      	movs	r0, #0
 8012782:	e022      	b.n	80127ca <__ieee754_rem_pio2f+0x66>
 8012784:	4b82      	ldr	r3, [pc, #520]	@ (8012990 <__ieee754_rem_pio2f+0x22c>)
 8012786:	429d      	cmp	r5, r3
 8012788:	d83a      	bhi.n	8012800 <__ieee754_rem_pio2f+0x9c>
 801278a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801278e:	2e00      	cmp	r6, #0
 8012790:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8012994 <__ieee754_rem_pio2f+0x230>
 8012794:	4a80      	ldr	r2, [pc, #512]	@ (8012998 <__ieee754_rem_pio2f+0x234>)
 8012796:	f023 030f 	bic.w	r3, r3, #15
 801279a:	dd18      	ble.n	80127ce <__ieee754_rem_pio2f+0x6a>
 801279c:	4293      	cmp	r3, r2
 801279e:	ee70 7a47 	vsub.f32	s15, s0, s14
 80127a2:	bf09      	itett	eq
 80127a4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801299c <__ieee754_rem_pio2f+0x238>
 80127a8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80129a0 <__ieee754_rem_pio2f+0x23c>
 80127ac:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80129a4 <__ieee754_rem_pio2f+0x240>
 80127b0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80127b4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80127b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80127bc:	ed80 7a00 	vstr	s14, [r0]
 80127c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80127c4:	edc0 7a01 	vstr	s15, [r0, #4]
 80127c8:	2001      	movs	r0, #1
 80127ca:	b007      	add	sp, #28
 80127cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127ce:	4293      	cmp	r3, r2
 80127d0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80127d4:	bf09      	itett	eq
 80127d6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801299c <__ieee754_rem_pio2f+0x238>
 80127da:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80129a0 <__ieee754_rem_pio2f+0x23c>
 80127de:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80129a4 <__ieee754_rem_pio2f+0x240>
 80127e2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80127e6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80127ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80127ee:	ed80 7a00 	vstr	s14, [r0]
 80127f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127f6:	edc0 7a01 	vstr	s15, [r0, #4]
 80127fa:	f04f 30ff 	mov.w	r0, #4294967295
 80127fe:	e7e4      	b.n	80127ca <__ieee754_rem_pio2f+0x66>
 8012800:	4b69      	ldr	r3, [pc, #420]	@ (80129a8 <__ieee754_rem_pio2f+0x244>)
 8012802:	429d      	cmp	r5, r3
 8012804:	d873      	bhi.n	80128ee <__ieee754_rem_pio2f+0x18a>
 8012806:	f7ff febb 	bl	8012580 <fabsf>
 801280a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80129ac <__ieee754_rem_pio2f+0x248>
 801280e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012812:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801281a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801281e:	ee17 0a90 	vmov	r0, s15
 8012822:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012994 <__ieee754_rem_pio2f+0x230>
 8012826:	eea7 0a67 	vfms.f32	s0, s14, s15
 801282a:	281f      	cmp	r0, #31
 801282c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80129a0 <__ieee754_rem_pio2f+0x23c>
 8012830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012834:	eeb1 6a47 	vneg.f32	s12, s14
 8012838:	ee70 6a67 	vsub.f32	s13, s0, s15
 801283c:	ee16 1a90 	vmov	r1, s13
 8012840:	dc09      	bgt.n	8012856 <__ieee754_rem_pio2f+0xf2>
 8012842:	4a5b      	ldr	r2, [pc, #364]	@ (80129b0 <__ieee754_rem_pio2f+0x24c>)
 8012844:	1e47      	subs	r7, r0, #1
 8012846:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801284a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801284e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012852:	4293      	cmp	r3, r2
 8012854:	d107      	bne.n	8012866 <__ieee754_rem_pio2f+0x102>
 8012856:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801285a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801285e:	2a08      	cmp	r2, #8
 8012860:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8012864:	dc14      	bgt.n	8012890 <__ieee754_rem_pio2f+0x12c>
 8012866:	6021      	str	r1, [r4, #0]
 8012868:	ed94 7a00 	vldr	s14, [r4]
 801286c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012870:	2e00      	cmp	r6, #0
 8012872:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012876:	ed84 0a01 	vstr	s0, [r4, #4]
 801287a:	daa6      	bge.n	80127ca <__ieee754_rem_pio2f+0x66>
 801287c:	eeb1 7a47 	vneg.f32	s14, s14
 8012880:	eeb1 0a40 	vneg.f32	s0, s0
 8012884:	ed84 7a00 	vstr	s14, [r4]
 8012888:	ed84 0a01 	vstr	s0, [r4, #4]
 801288c:	4240      	negs	r0, r0
 801288e:	e79c      	b.n	80127ca <__ieee754_rem_pio2f+0x66>
 8012890:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801299c <__ieee754_rem_pio2f+0x238>
 8012894:	eef0 6a40 	vmov.f32	s13, s0
 8012898:	eee6 6a25 	vfma.f32	s13, s12, s11
 801289c:	ee70 7a66 	vsub.f32	s15, s0, s13
 80128a0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80128a4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80129a4 <__ieee754_rem_pio2f+0x240>
 80128a8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80128ac:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80128b0:	ee15 2a90 	vmov	r2, s11
 80128b4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80128b8:	1a5b      	subs	r3, r3, r1
 80128ba:	2b19      	cmp	r3, #25
 80128bc:	dc04      	bgt.n	80128c8 <__ieee754_rem_pio2f+0x164>
 80128be:	edc4 5a00 	vstr	s11, [r4]
 80128c2:	eeb0 0a66 	vmov.f32	s0, s13
 80128c6:	e7cf      	b.n	8012868 <__ieee754_rem_pio2f+0x104>
 80128c8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80129b4 <__ieee754_rem_pio2f+0x250>
 80128cc:	eeb0 0a66 	vmov.f32	s0, s13
 80128d0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80128d4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80128d8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80129b8 <__ieee754_rem_pio2f+0x254>
 80128dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80128e0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80128e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80128e8:	ed84 7a00 	vstr	s14, [r4]
 80128ec:	e7bc      	b.n	8012868 <__ieee754_rem_pio2f+0x104>
 80128ee:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80128f2:	d306      	bcc.n	8012902 <__ieee754_rem_pio2f+0x19e>
 80128f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80128f8:	edc0 7a01 	vstr	s15, [r0, #4]
 80128fc:	edc0 7a00 	vstr	s15, [r0]
 8012900:	e73e      	b.n	8012780 <__ieee754_rem_pio2f+0x1c>
 8012902:	15ea      	asrs	r2, r5, #23
 8012904:	3a86      	subs	r2, #134	@ 0x86
 8012906:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801290a:	ee07 3a90 	vmov	s15, r3
 801290e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012912:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80129bc <__ieee754_rem_pio2f+0x258>
 8012916:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801291a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801291e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012922:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012926:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801292a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801292e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012932:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012936:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801293a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801293e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012942:	edcd 7a05 	vstr	s15, [sp, #20]
 8012946:	d11e      	bne.n	8012986 <__ieee754_rem_pio2f+0x222>
 8012948:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012950:	bf0c      	ite	eq
 8012952:	2301      	moveq	r3, #1
 8012954:	2302      	movne	r3, #2
 8012956:	491a      	ldr	r1, [pc, #104]	@ (80129c0 <__ieee754_rem_pio2f+0x25c>)
 8012958:	9101      	str	r1, [sp, #4]
 801295a:	2102      	movs	r1, #2
 801295c:	9100      	str	r1, [sp, #0]
 801295e:	a803      	add	r0, sp, #12
 8012960:	4621      	mov	r1, r4
 8012962:	f000 f82f 	bl	80129c4 <__kernel_rem_pio2f>
 8012966:	2e00      	cmp	r6, #0
 8012968:	f6bf af2f 	bge.w	80127ca <__ieee754_rem_pio2f+0x66>
 801296c:	edd4 7a00 	vldr	s15, [r4]
 8012970:	eef1 7a67 	vneg.f32	s15, s15
 8012974:	edc4 7a00 	vstr	s15, [r4]
 8012978:	edd4 7a01 	vldr	s15, [r4, #4]
 801297c:	eef1 7a67 	vneg.f32	s15, s15
 8012980:	edc4 7a01 	vstr	s15, [r4, #4]
 8012984:	e782      	b.n	801288c <__ieee754_rem_pio2f+0x128>
 8012986:	2303      	movs	r3, #3
 8012988:	e7e5      	b.n	8012956 <__ieee754_rem_pio2f+0x1f2>
 801298a:	bf00      	nop
 801298c:	3f490fd8 	.word	0x3f490fd8
 8012990:	4016cbe3 	.word	0x4016cbe3
 8012994:	3fc90f80 	.word	0x3fc90f80
 8012998:	3fc90fd0 	.word	0x3fc90fd0
 801299c:	37354400 	.word	0x37354400
 80129a0:	37354443 	.word	0x37354443
 80129a4:	2e85a308 	.word	0x2e85a308
 80129a8:	43490f80 	.word	0x43490f80
 80129ac:	3f22f984 	.word	0x3f22f984
 80129b0:	080136b4 	.word	0x080136b4
 80129b4:	2e85a300 	.word	0x2e85a300
 80129b8:	248d3132 	.word	0x248d3132
 80129bc:	43800000 	.word	0x43800000
 80129c0:	08013734 	.word	0x08013734

080129c4 <__kernel_rem_pio2f>:
 80129c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c8:	ed2d 8b04 	vpush	{d8-d9}
 80129cc:	b0d9      	sub	sp, #356	@ 0x164
 80129ce:	4690      	mov	r8, r2
 80129d0:	9001      	str	r0, [sp, #4]
 80129d2:	4ab9      	ldr	r2, [pc, #740]	@ (8012cb8 <__kernel_rem_pio2f+0x2f4>)
 80129d4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80129d6:	f118 0f04 	cmn.w	r8, #4
 80129da:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80129de:	460f      	mov	r7, r1
 80129e0:	f103 3bff 	add.w	fp, r3, #4294967295
 80129e4:	db27      	blt.n	8012a36 <__kernel_rem_pio2f+0x72>
 80129e6:	f1b8 0203 	subs.w	r2, r8, #3
 80129ea:	bf48      	it	mi
 80129ec:	f108 0204 	addmi.w	r2, r8, #4
 80129f0:	10d2      	asrs	r2, r2, #3
 80129f2:	1c55      	adds	r5, r2, #1
 80129f4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80129f6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8012cc8 <__kernel_rem_pio2f+0x304>
 80129fa:	00e8      	lsls	r0, r5, #3
 80129fc:	eba2 060b 	sub.w	r6, r2, fp
 8012a00:	9002      	str	r0, [sp, #8]
 8012a02:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8012a06:	eb0a 0c0b 	add.w	ip, sl, fp
 8012a0a:	ac1c      	add	r4, sp, #112	@ 0x70
 8012a0c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8012a10:	2000      	movs	r0, #0
 8012a12:	4560      	cmp	r0, ip
 8012a14:	dd11      	ble.n	8012a3a <__kernel_rem_pio2f+0x76>
 8012a16:	a91c      	add	r1, sp, #112	@ 0x70
 8012a18:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8012a1c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8012a20:	f04f 0c00 	mov.w	ip, #0
 8012a24:	45d4      	cmp	ip, sl
 8012a26:	dc27      	bgt.n	8012a78 <__kernel_rem_pio2f+0xb4>
 8012a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012a2c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8012cc8 <__kernel_rem_pio2f+0x304>
 8012a30:	4606      	mov	r6, r0
 8012a32:	2400      	movs	r4, #0
 8012a34:	e016      	b.n	8012a64 <__kernel_rem_pio2f+0xa0>
 8012a36:	2200      	movs	r2, #0
 8012a38:	e7db      	b.n	80129f2 <__kernel_rem_pio2f+0x2e>
 8012a3a:	42c6      	cmn	r6, r0
 8012a3c:	bf5d      	ittte	pl
 8012a3e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8012a42:	ee07 1a90 	vmovpl	s15, r1
 8012a46:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012a4a:	eef0 7a47 	vmovmi.f32	s15, s14
 8012a4e:	ece4 7a01 	vstmia	r4!, {s15}
 8012a52:	3001      	adds	r0, #1
 8012a54:	e7dd      	b.n	8012a12 <__kernel_rem_pio2f+0x4e>
 8012a56:	ecfe 6a01 	vldmia	lr!, {s13}
 8012a5a:	ed96 7a00 	vldr	s14, [r6]
 8012a5e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012a62:	3401      	adds	r4, #1
 8012a64:	455c      	cmp	r4, fp
 8012a66:	f1a6 0604 	sub.w	r6, r6, #4
 8012a6a:	ddf4      	ble.n	8012a56 <__kernel_rem_pio2f+0x92>
 8012a6c:	ece9 7a01 	vstmia	r9!, {s15}
 8012a70:	f10c 0c01 	add.w	ip, ip, #1
 8012a74:	3004      	adds	r0, #4
 8012a76:	e7d5      	b.n	8012a24 <__kernel_rem_pio2f+0x60>
 8012a78:	a908      	add	r1, sp, #32
 8012a7a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012a7e:	9104      	str	r1, [sp, #16]
 8012a80:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8012a82:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8012cc4 <__kernel_rem_pio2f+0x300>
 8012a86:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8012cc0 <__kernel_rem_pio2f+0x2fc>
 8012a8a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8012a8e:	9203      	str	r2, [sp, #12]
 8012a90:	4654      	mov	r4, sl
 8012a92:	00a2      	lsls	r2, r4, #2
 8012a94:	9205      	str	r2, [sp, #20]
 8012a96:	aa58      	add	r2, sp, #352	@ 0x160
 8012a98:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8012a9c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8012aa0:	a944      	add	r1, sp, #272	@ 0x110
 8012aa2:	aa08      	add	r2, sp, #32
 8012aa4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8012aa8:	4694      	mov	ip, r2
 8012aaa:	4626      	mov	r6, r4
 8012aac:	2e00      	cmp	r6, #0
 8012aae:	f1a0 0004 	sub.w	r0, r0, #4
 8012ab2:	dc4c      	bgt.n	8012b4e <__kernel_rem_pio2f+0x18a>
 8012ab4:	4628      	mov	r0, r5
 8012ab6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012aba:	f000 f9f5 	bl	8012ea8 <scalbnf>
 8012abe:	eeb0 8a40 	vmov.f32	s16, s0
 8012ac2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8012ac6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012aca:	f000 fa53 	bl	8012f74 <floorf>
 8012ace:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8012ad2:	eea0 8a67 	vfms.f32	s16, s0, s15
 8012ad6:	2d00      	cmp	r5, #0
 8012ad8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012adc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012ae0:	ee17 9a90 	vmov	r9, s15
 8012ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ae8:	ee38 8a67 	vsub.f32	s16, s16, s15
 8012aec:	dd41      	ble.n	8012b72 <__kernel_rem_pio2f+0x1ae>
 8012aee:	f104 3cff 	add.w	ip, r4, #4294967295
 8012af2:	a908      	add	r1, sp, #32
 8012af4:	f1c5 0e08 	rsb	lr, r5, #8
 8012af8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8012afc:	fa46 f00e 	asr.w	r0, r6, lr
 8012b00:	4481      	add	r9, r0
 8012b02:	fa00 f00e 	lsl.w	r0, r0, lr
 8012b06:	1a36      	subs	r6, r6, r0
 8012b08:	f1c5 0007 	rsb	r0, r5, #7
 8012b0c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8012b10:	4106      	asrs	r6, r0
 8012b12:	2e00      	cmp	r6, #0
 8012b14:	dd3c      	ble.n	8012b90 <__kernel_rem_pio2f+0x1cc>
 8012b16:	f04f 0e00 	mov.w	lr, #0
 8012b1a:	f109 0901 	add.w	r9, r9, #1
 8012b1e:	4670      	mov	r0, lr
 8012b20:	4574      	cmp	r4, lr
 8012b22:	dc68      	bgt.n	8012bf6 <__kernel_rem_pio2f+0x232>
 8012b24:	2d00      	cmp	r5, #0
 8012b26:	dd03      	ble.n	8012b30 <__kernel_rem_pio2f+0x16c>
 8012b28:	2d01      	cmp	r5, #1
 8012b2a:	d074      	beq.n	8012c16 <__kernel_rem_pio2f+0x252>
 8012b2c:	2d02      	cmp	r5, #2
 8012b2e:	d07d      	beq.n	8012c2c <__kernel_rem_pio2f+0x268>
 8012b30:	2e02      	cmp	r6, #2
 8012b32:	d12d      	bne.n	8012b90 <__kernel_rem_pio2f+0x1cc>
 8012b34:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012b38:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012b3c:	b340      	cbz	r0, 8012b90 <__kernel_rem_pio2f+0x1cc>
 8012b3e:	4628      	mov	r0, r5
 8012b40:	9306      	str	r3, [sp, #24]
 8012b42:	f000 f9b1 	bl	8012ea8 <scalbnf>
 8012b46:	9b06      	ldr	r3, [sp, #24]
 8012b48:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012b4c:	e020      	b.n	8012b90 <__kernel_rem_pio2f+0x1cc>
 8012b4e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012b52:	3e01      	subs	r6, #1
 8012b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b5c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012b60:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012b64:	ecac 0a01 	vstmia	ip!, {s0}
 8012b68:	ed90 0a00 	vldr	s0, [r0]
 8012b6c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012b70:	e79c      	b.n	8012aac <__kernel_rem_pio2f+0xe8>
 8012b72:	d105      	bne.n	8012b80 <__kernel_rem_pio2f+0x1bc>
 8012b74:	1e60      	subs	r0, r4, #1
 8012b76:	a908      	add	r1, sp, #32
 8012b78:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8012b7c:	11f6      	asrs	r6, r6, #7
 8012b7e:	e7c8      	b.n	8012b12 <__kernel_rem_pio2f+0x14e>
 8012b80:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012b84:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b8c:	da31      	bge.n	8012bf2 <__kernel_rem_pio2f+0x22e>
 8012b8e:	2600      	movs	r6, #0
 8012b90:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b98:	f040 8098 	bne.w	8012ccc <__kernel_rem_pio2f+0x308>
 8012b9c:	1e60      	subs	r0, r4, #1
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	4550      	cmp	r0, sl
 8012ba2:	da4b      	bge.n	8012c3c <__kernel_rem_pio2f+0x278>
 8012ba4:	2a00      	cmp	r2, #0
 8012ba6:	d065      	beq.n	8012c74 <__kernel_rem_pio2f+0x2b0>
 8012ba8:	3c01      	subs	r4, #1
 8012baa:	ab08      	add	r3, sp, #32
 8012bac:	3d08      	subs	r5, #8
 8012bae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d0f8      	beq.n	8012ba8 <__kernel_rem_pio2f+0x1e4>
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012bbc:	f000 f974 	bl	8012ea8 <scalbnf>
 8012bc0:	1c63      	adds	r3, r4, #1
 8012bc2:	aa44      	add	r2, sp, #272	@ 0x110
 8012bc4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8012cc4 <__kernel_rem_pio2f+0x300>
 8012bc8:	0099      	lsls	r1, r3, #2
 8012bca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012bce:	4623      	mov	r3, r4
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	f280 80a9 	bge.w	8012d28 <__kernel_rem_pio2f+0x364>
 8012bd6:	4623      	mov	r3, r4
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	f2c0 80c7 	blt.w	8012d6c <__kernel_rem_pio2f+0x3a8>
 8012bde:	aa44      	add	r2, sp, #272	@ 0x110
 8012be0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8012be4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8012cbc <__kernel_rem_pio2f+0x2f8>
 8012be8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8012cc8 <__kernel_rem_pio2f+0x304>
 8012bec:	2000      	movs	r0, #0
 8012bee:	1ae2      	subs	r2, r4, r3
 8012bf0:	e0b1      	b.n	8012d56 <__kernel_rem_pio2f+0x392>
 8012bf2:	2602      	movs	r6, #2
 8012bf4:	e78f      	b.n	8012b16 <__kernel_rem_pio2f+0x152>
 8012bf6:	f852 1b04 	ldr.w	r1, [r2], #4
 8012bfa:	b948      	cbnz	r0, 8012c10 <__kernel_rem_pio2f+0x24c>
 8012bfc:	b121      	cbz	r1, 8012c08 <__kernel_rem_pio2f+0x244>
 8012bfe:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8012c02:	f842 1c04 	str.w	r1, [r2, #-4]
 8012c06:	2101      	movs	r1, #1
 8012c08:	f10e 0e01 	add.w	lr, lr, #1
 8012c0c:	4608      	mov	r0, r1
 8012c0e:	e787      	b.n	8012b20 <__kernel_rem_pio2f+0x15c>
 8012c10:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8012c14:	e7f5      	b.n	8012c02 <__kernel_rem_pio2f+0x23e>
 8012c16:	f104 3cff 	add.w	ip, r4, #4294967295
 8012c1a:	aa08      	add	r2, sp, #32
 8012c1c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012c20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8012c24:	a908      	add	r1, sp, #32
 8012c26:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8012c2a:	e781      	b.n	8012b30 <__kernel_rem_pio2f+0x16c>
 8012c2c:	f104 3cff 	add.w	ip, r4, #4294967295
 8012c30:	aa08      	add	r2, sp, #32
 8012c32:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8012c36:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8012c3a:	e7f3      	b.n	8012c24 <__kernel_rem_pio2f+0x260>
 8012c3c:	a908      	add	r1, sp, #32
 8012c3e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8012c42:	3801      	subs	r0, #1
 8012c44:	430a      	orrs	r2, r1
 8012c46:	e7ab      	b.n	8012ba0 <__kernel_rem_pio2f+0x1dc>
 8012c48:	3201      	adds	r2, #1
 8012c4a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8012c4e:	2e00      	cmp	r6, #0
 8012c50:	d0fa      	beq.n	8012c48 <__kernel_rem_pio2f+0x284>
 8012c52:	9905      	ldr	r1, [sp, #20]
 8012c54:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012c58:	eb0d 0001 	add.w	r0, sp, r1
 8012c5c:	18e6      	adds	r6, r4, r3
 8012c5e:	a91c      	add	r1, sp, #112	@ 0x70
 8012c60:	f104 0c01 	add.w	ip, r4, #1
 8012c64:	384c      	subs	r0, #76	@ 0x4c
 8012c66:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8012c6a:	4422      	add	r2, r4
 8012c6c:	4562      	cmp	r2, ip
 8012c6e:	da04      	bge.n	8012c7a <__kernel_rem_pio2f+0x2b6>
 8012c70:	4614      	mov	r4, r2
 8012c72:	e70e      	b.n	8012a92 <__kernel_rem_pio2f+0xce>
 8012c74:	9804      	ldr	r0, [sp, #16]
 8012c76:	2201      	movs	r2, #1
 8012c78:	e7e7      	b.n	8012c4a <__kernel_rem_pio2f+0x286>
 8012c7a:	9903      	ldr	r1, [sp, #12]
 8012c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012c80:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8012c84:	9105      	str	r1, [sp, #20]
 8012c86:	ee07 1a90 	vmov	s15, r1
 8012c8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c8e:	2400      	movs	r4, #0
 8012c90:	ece6 7a01 	vstmia	r6!, {s15}
 8012c94:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8012cc8 <__kernel_rem_pio2f+0x304>
 8012c98:	46b1      	mov	r9, r6
 8012c9a:	455c      	cmp	r4, fp
 8012c9c:	dd04      	ble.n	8012ca8 <__kernel_rem_pio2f+0x2e4>
 8012c9e:	ece0 7a01 	vstmia	r0!, {s15}
 8012ca2:	f10c 0c01 	add.w	ip, ip, #1
 8012ca6:	e7e1      	b.n	8012c6c <__kernel_rem_pio2f+0x2a8>
 8012ca8:	ecfe 6a01 	vldmia	lr!, {s13}
 8012cac:	ed39 7a01 	vldmdb	r9!, {s14}
 8012cb0:	3401      	adds	r4, #1
 8012cb2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012cb6:	e7f0      	b.n	8012c9a <__kernel_rem_pio2f+0x2d6>
 8012cb8:	08013a78 	.word	0x08013a78
 8012cbc:	08013a4c 	.word	0x08013a4c
 8012cc0:	43800000 	.word	0x43800000
 8012cc4:	3b800000 	.word	0x3b800000
 8012cc8:	00000000 	.word	0x00000000
 8012ccc:	9b02      	ldr	r3, [sp, #8]
 8012cce:	eeb0 0a48 	vmov.f32	s0, s16
 8012cd2:	eba3 0008 	sub.w	r0, r3, r8
 8012cd6:	f000 f8e7 	bl	8012ea8 <scalbnf>
 8012cda:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8012cc0 <__kernel_rem_pio2f+0x2fc>
 8012cde:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce6:	db19      	blt.n	8012d1c <__kernel_rem_pio2f+0x358>
 8012ce8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8012cc4 <__kernel_rem_pio2f+0x300>
 8012cec:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012cf0:	aa08      	add	r2, sp, #32
 8012cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012cf6:	3508      	adds	r5, #8
 8012cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012cfc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012d04:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012d08:	ee10 3a10 	vmov	r3, s0
 8012d0c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012d10:	ee17 3a90 	vmov	r3, s15
 8012d14:	3401      	adds	r4, #1
 8012d16:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012d1a:	e74c      	b.n	8012bb6 <__kernel_rem_pio2f+0x1f2>
 8012d1c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012d20:	aa08      	add	r2, sp, #32
 8012d22:	ee10 3a10 	vmov	r3, s0
 8012d26:	e7f6      	b.n	8012d16 <__kernel_rem_pio2f+0x352>
 8012d28:	a808      	add	r0, sp, #32
 8012d2a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8012d2e:	9001      	str	r0, [sp, #4]
 8012d30:	ee07 0a90 	vmov	s15, r0
 8012d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d38:	3b01      	subs	r3, #1
 8012d3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012d3e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012d42:	ed62 7a01 	vstmdb	r2!, {s15}
 8012d46:	e743      	b.n	8012bd0 <__kernel_rem_pio2f+0x20c>
 8012d48:	ecfc 6a01 	vldmia	ip!, {s13}
 8012d4c:	ecb5 7a01 	vldmia	r5!, {s14}
 8012d50:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012d54:	3001      	adds	r0, #1
 8012d56:	4550      	cmp	r0, sl
 8012d58:	dc01      	bgt.n	8012d5e <__kernel_rem_pio2f+0x39a>
 8012d5a:	4282      	cmp	r2, r0
 8012d5c:	daf4      	bge.n	8012d48 <__kernel_rem_pio2f+0x384>
 8012d5e:	a858      	add	r0, sp, #352	@ 0x160
 8012d60:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012d64:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012d68:	3b01      	subs	r3, #1
 8012d6a:	e735      	b.n	8012bd8 <__kernel_rem_pio2f+0x214>
 8012d6c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012d6e:	2b02      	cmp	r3, #2
 8012d70:	dc09      	bgt.n	8012d86 <__kernel_rem_pio2f+0x3c2>
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	dc2b      	bgt.n	8012dce <__kernel_rem_pio2f+0x40a>
 8012d76:	d044      	beq.n	8012e02 <__kernel_rem_pio2f+0x43e>
 8012d78:	f009 0007 	and.w	r0, r9, #7
 8012d7c:	b059      	add	sp, #356	@ 0x164
 8012d7e:	ecbd 8b04 	vpop	{d8-d9}
 8012d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d86:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012d88:	2b03      	cmp	r3, #3
 8012d8a:	d1f5      	bne.n	8012d78 <__kernel_rem_pio2f+0x3b4>
 8012d8c:	aa30      	add	r2, sp, #192	@ 0xc0
 8012d8e:	1f0b      	subs	r3, r1, #4
 8012d90:	4413      	add	r3, r2
 8012d92:	461a      	mov	r2, r3
 8012d94:	4620      	mov	r0, r4
 8012d96:	2800      	cmp	r0, #0
 8012d98:	f1a2 0204 	sub.w	r2, r2, #4
 8012d9c:	dc52      	bgt.n	8012e44 <__kernel_rem_pio2f+0x480>
 8012d9e:	4622      	mov	r2, r4
 8012da0:	2a01      	cmp	r2, #1
 8012da2:	f1a3 0304 	sub.w	r3, r3, #4
 8012da6:	dc5d      	bgt.n	8012e64 <__kernel_rem_pio2f+0x4a0>
 8012da8:	ab30      	add	r3, sp, #192	@ 0xc0
 8012daa:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8012cc8 <__kernel_rem_pio2f+0x304>
 8012dae:	440b      	add	r3, r1
 8012db0:	2c01      	cmp	r4, #1
 8012db2:	dc67      	bgt.n	8012e84 <__kernel_rem_pio2f+0x4c0>
 8012db4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012db8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8012dbc:	2e00      	cmp	r6, #0
 8012dbe:	d167      	bne.n	8012e90 <__kernel_rem_pio2f+0x4cc>
 8012dc0:	edc7 6a00 	vstr	s13, [r7]
 8012dc4:	ed87 7a01 	vstr	s14, [r7, #4]
 8012dc8:	edc7 7a02 	vstr	s15, [r7, #8]
 8012dcc:	e7d4      	b.n	8012d78 <__kernel_rem_pio2f+0x3b4>
 8012dce:	ab30      	add	r3, sp, #192	@ 0xc0
 8012dd0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8012cc8 <__kernel_rem_pio2f+0x304>
 8012dd4:	440b      	add	r3, r1
 8012dd6:	4622      	mov	r2, r4
 8012dd8:	2a00      	cmp	r2, #0
 8012dda:	da24      	bge.n	8012e26 <__kernel_rem_pio2f+0x462>
 8012ddc:	b34e      	cbz	r6, 8012e32 <__kernel_rem_pio2f+0x46e>
 8012dde:	eef1 7a47 	vneg.f32	s15, s14
 8012de2:	edc7 7a00 	vstr	s15, [r7]
 8012de6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8012dea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012dee:	aa31      	add	r2, sp, #196	@ 0xc4
 8012df0:	2301      	movs	r3, #1
 8012df2:	429c      	cmp	r4, r3
 8012df4:	da20      	bge.n	8012e38 <__kernel_rem_pio2f+0x474>
 8012df6:	b10e      	cbz	r6, 8012dfc <__kernel_rem_pio2f+0x438>
 8012df8:	eef1 7a67 	vneg.f32	s15, s15
 8012dfc:	edc7 7a01 	vstr	s15, [r7, #4]
 8012e00:	e7ba      	b.n	8012d78 <__kernel_rem_pio2f+0x3b4>
 8012e02:	ab30      	add	r3, sp, #192	@ 0xc0
 8012e04:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8012cc8 <__kernel_rem_pio2f+0x304>
 8012e08:	440b      	add	r3, r1
 8012e0a:	2c00      	cmp	r4, #0
 8012e0c:	da05      	bge.n	8012e1a <__kernel_rem_pio2f+0x456>
 8012e0e:	b10e      	cbz	r6, 8012e14 <__kernel_rem_pio2f+0x450>
 8012e10:	eef1 7a67 	vneg.f32	s15, s15
 8012e14:	edc7 7a00 	vstr	s15, [r7]
 8012e18:	e7ae      	b.n	8012d78 <__kernel_rem_pio2f+0x3b4>
 8012e1a:	ed33 7a01 	vldmdb	r3!, {s14}
 8012e1e:	3c01      	subs	r4, #1
 8012e20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e24:	e7f1      	b.n	8012e0a <__kernel_rem_pio2f+0x446>
 8012e26:	ed73 7a01 	vldmdb	r3!, {s15}
 8012e2a:	3a01      	subs	r2, #1
 8012e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e30:	e7d2      	b.n	8012dd8 <__kernel_rem_pio2f+0x414>
 8012e32:	eef0 7a47 	vmov.f32	s15, s14
 8012e36:	e7d4      	b.n	8012de2 <__kernel_rem_pio2f+0x41e>
 8012e38:	ecb2 7a01 	vldmia	r2!, {s14}
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e42:	e7d6      	b.n	8012df2 <__kernel_rem_pio2f+0x42e>
 8012e44:	edd2 7a00 	vldr	s15, [r2]
 8012e48:	edd2 6a01 	vldr	s13, [r2, #4]
 8012e4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012e50:	3801      	subs	r0, #1
 8012e52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e56:	ed82 7a00 	vstr	s14, [r2]
 8012e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012e5e:	edc2 7a01 	vstr	s15, [r2, #4]
 8012e62:	e798      	b.n	8012d96 <__kernel_rem_pio2f+0x3d2>
 8012e64:	edd3 7a00 	vldr	s15, [r3]
 8012e68:	edd3 6a01 	vldr	s13, [r3, #4]
 8012e6c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012e70:	3a01      	subs	r2, #1
 8012e72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e76:	ed83 7a00 	vstr	s14, [r3]
 8012e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012e7e:	edc3 7a01 	vstr	s15, [r3, #4]
 8012e82:	e78d      	b.n	8012da0 <__kernel_rem_pio2f+0x3dc>
 8012e84:	ed33 7a01 	vldmdb	r3!, {s14}
 8012e88:	3c01      	subs	r4, #1
 8012e8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e8e:	e78f      	b.n	8012db0 <__kernel_rem_pio2f+0x3ec>
 8012e90:	eef1 6a66 	vneg.f32	s13, s13
 8012e94:	eeb1 7a47 	vneg.f32	s14, s14
 8012e98:	edc7 6a00 	vstr	s13, [r7]
 8012e9c:	ed87 7a01 	vstr	s14, [r7, #4]
 8012ea0:	eef1 7a67 	vneg.f32	s15, s15
 8012ea4:	e790      	b.n	8012dc8 <__kernel_rem_pio2f+0x404>
 8012ea6:	bf00      	nop

08012ea8 <scalbnf>:
 8012ea8:	ee10 3a10 	vmov	r3, s0
 8012eac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012eb0:	d02b      	beq.n	8012f0a <scalbnf+0x62>
 8012eb2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012eb6:	d302      	bcc.n	8012ebe <scalbnf+0x16>
 8012eb8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012ebc:	4770      	bx	lr
 8012ebe:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012ec2:	d123      	bne.n	8012f0c <scalbnf+0x64>
 8012ec4:	4b24      	ldr	r3, [pc, #144]	@ (8012f58 <scalbnf+0xb0>)
 8012ec6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8012f5c <scalbnf+0xb4>
 8012eca:	4298      	cmp	r0, r3
 8012ecc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012ed0:	db17      	blt.n	8012f02 <scalbnf+0x5a>
 8012ed2:	ee10 3a10 	vmov	r3, s0
 8012ed6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012eda:	3a19      	subs	r2, #25
 8012edc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012ee0:	4288      	cmp	r0, r1
 8012ee2:	dd15      	ble.n	8012f10 <scalbnf+0x68>
 8012ee4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8012f60 <scalbnf+0xb8>
 8012ee8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012f64 <scalbnf+0xbc>
 8012eec:	ee10 3a10 	vmov	r3, s0
 8012ef0:	eeb0 7a67 	vmov.f32	s14, s15
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	bfb8      	it	lt
 8012ef8:	eef0 7a66 	vmovlt.f32	s15, s13
 8012efc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012f00:	4770      	bx	lr
 8012f02:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012f68 <scalbnf+0xc0>
 8012f06:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012f0a:	4770      	bx	lr
 8012f0c:	0dd2      	lsrs	r2, r2, #23
 8012f0e:	e7e5      	b.n	8012edc <scalbnf+0x34>
 8012f10:	4410      	add	r0, r2
 8012f12:	28fe      	cmp	r0, #254	@ 0xfe
 8012f14:	dce6      	bgt.n	8012ee4 <scalbnf+0x3c>
 8012f16:	2800      	cmp	r0, #0
 8012f18:	dd06      	ble.n	8012f28 <scalbnf+0x80>
 8012f1a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012f1e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012f22:	ee00 3a10 	vmov	s0, r3
 8012f26:	4770      	bx	lr
 8012f28:	f110 0f16 	cmn.w	r0, #22
 8012f2c:	da09      	bge.n	8012f42 <scalbnf+0x9a>
 8012f2e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8012f68 <scalbnf+0xc0>
 8012f32:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8012f6c <scalbnf+0xc4>
 8012f36:	ee10 3a10 	vmov	r3, s0
 8012f3a:	eeb0 7a67 	vmov.f32	s14, s15
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	e7d9      	b.n	8012ef6 <scalbnf+0x4e>
 8012f42:	3019      	adds	r0, #25
 8012f44:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012f48:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012f4c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012f70 <scalbnf+0xc8>
 8012f50:	ee07 3a90 	vmov	s15, r3
 8012f54:	e7d7      	b.n	8012f06 <scalbnf+0x5e>
 8012f56:	bf00      	nop
 8012f58:	ffff3cb0 	.word	0xffff3cb0
 8012f5c:	4c000000 	.word	0x4c000000
 8012f60:	7149f2ca 	.word	0x7149f2ca
 8012f64:	f149f2ca 	.word	0xf149f2ca
 8012f68:	0da24260 	.word	0x0da24260
 8012f6c:	8da24260 	.word	0x8da24260
 8012f70:	33000000 	.word	0x33000000

08012f74 <floorf>:
 8012f74:	ee10 3a10 	vmov	r3, s0
 8012f78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012f7c:	3a7f      	subs	r2, #127	@ 0x7f
 8012f7e:	2a16      	cmp	r2, #22
 8012f80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012f84:	dc2b      	bgt.n	8012fde <floorf+0x6a>
 8012f86:	2a00      	cmp	r2, #0
 8012f88:	da12      	bge.n	8012fb0 <floorf+0x3c>
 8012f8a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012ff0 <floorf+0x7c>
 8012f8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012f92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f9a:	dd06      	ble.n	8012faa <floorf+0x36>
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	da24      	bge.n	8012fea <floorf+0x76>
 8012fa0:	2900      	cmp	r1, #0
 8012fa2:	4b14      	ldr	r3, [pc, #80]	@ (8012ff4 <floorf+0x80>)
 8012fa4:	bf08      	it	eq
 8012fa6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8012faa:	ee00 3a10 	vmov	s0, r3
 8012fae:	4770      	bx	lr
 8012fb0:	4911      	ldr	r1, [pc, #68]	@ (8012ff8 <floorf+0x84>)
 8012fb2:	4111      	asrs	r1, r2
 8012fb4:	420b      	tst	r3, r1
 8012fb6:	d0fa      	beq.n	8012fae <floorf+0x3a>
 8012fb8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8012ff0 <floorf+0x7c>
 8012fbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012fc0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc8:	ddef      	ble.n	8012faa <floorf+0x36>
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	bfbe      	ittt	lt
 8012fce:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8012fd2:	fa40 f202 	asrlt.w	r2, r0, r2
 8012fd6:	189b      	addlt	r3, r3, r2
 8012fd8:	ea23 0301 	bic.w	r3, r3, r1
 8012fdc:	e7e5      	b.n	8012faa <floorf+0x36>
 8012fde:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012fe2:	d3e4      	bcc.n	8012fae <floorf+0x3a>
 8012fe4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012fe8:	4770      	bx	lr
 8012fea:	2300      	movs	r3, #0
 8012fec:	e7dd      	b.n	8012faa <floorf+0x36>
 8012fee:	bf00      	nop
 8012ff0:	7149f2ca 	.word	0x7149f2ca
 8012ff4:	bf800000 	.word	0xbf800000
 8012ff8:	007fffff 	.word	0x007fffff

08012ffc <_close>:
 8012ffc:	4b02      	ldr	r3, [pc, #8]	@ (8013008 <_close+0xc>)
 8012ffe:	2258      	movs	r2, #88	@ 0x58
 8013000:	601a      	str	r2, [r3, #0]
 8013002:	f04f 30ff 	mov.w	r0, #4294967295
 8013006:	4770      	bx	lr
 8013008:	20003928 	.word	0x20003928

0801300c <_fstat>:
 801300c:	4b02      	ldr	r3, [pc, #8]	@ (8013018 <_fstat+0xc>)
 801300e:	2258      	movs	r2, #88	@ 0x58
 8013010:	601a      	str	r2, [r3, #0]
 8013012:	f04f 30ff 	mov.w	r0, #4294967295
 8013016:	4770      	bx	lr
 8013018:	20003928 	.word	0x20003928

0801301c <_getpid>:
 801301c:	4b02      	ldr	r3, [pc, #8]	@ (8013028 <_getpid+0xc>)
 801301e:	2258      	movs	r2, #88	@ 0x58
 8013020:	601a      	str	r2, [r3, #0]
 8013022:	f04f 30ff 	mov.w	r0, #4294967295
 8013026:	4770      	bx	lr
 8013028:	20003928 	.word	0x20003928

0801302c <_isatty>:
 801302c:	4b02      	ldr	r3, [pc, #8]	@ (8013038 <_isatty+0xc>)
 801302e:	2258      	movs	r2, #88	@ 0x58
 8013030:	601a      	str	r2, [r3, #0]
 8013032:	2000      	movs	r0, #0
 8013034:	4770      	bx	lr
 8013036:	bf00      	nop
 8013038:	20003928 	.word	0x20003928

0801303c <_kill>:
 801303c:	4b02      	ldr	r3, [pc, #8]	@ (8013048 <_kill+0xc>)
 801303e:	2258      	movs	r2, #88	@ 0x58
 8013040:	601a      	str	r2, [r3, #0]
 8013042:	f04f 30ff 	mov.w	r0, #4294967295
 8013046:	4770      	bx	lr
 8013048:	20003928 	.word	0x20003928

0801304c <_lseek>:
 801304c:	4b02      	ldr	r3, [pc, #8]	@ (8013058 <_lseek+0xc>)
 801304e:	2258      	movs	r2, #88	@ 0x58
 8013050:	601a      	str	r2, [r3, #0]
 8013052:	f04f 30ff 	mov.w	r0, #4294967295
 8013056:	4770      	bx	lr
 8013058:	20003928 	.word	0x20003928

0801305c <_read>:
 801305c:	4b02      	ldr	r3, [pc, #8]	@ (8013068 <_read+0xc>)
 801305e:	2258      	movs	r2, #88	@ 0x58
 8013060:	601a      	str	r2, [r3, #0]
 8013062:	f04f 30ff 	mov.w	r0, #4294967295
 8013066:	4770      	bx	lr
 8013068:	20003928 	.word	0x20003928

0801306c <_write>:
 801306c:	4b02      	ldr	r3, [pc, #8]	@ (8013078 <_write+0xc>)
 801306e:	2258      	movs	r2, #88	@ 0x58
 8013070:	601a      	str	r2, [r3, #0]
 8013072:	f04f 30ff 	mov.w	r0, #4294967295
 8013076:	4770      	bx	lr
 8013078:	20003928 	.word	0x20003928

0801307c <_exit>:
 801307c:	e7fe      	b.n	801307c <_exit>
	...

08013080 <_init>:
 8013080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013082:	bf00      	nop
 8013084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013086:	bc08      	pop	{r3}
 8013088:	469e      	mov	lr, r3
 801308a:	4770      	bx	lr

0801308c <_fini>:
 801308c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801308e:	bf00      	nop
 8013090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013092:	bc08      	pop	{r3}
 8013094:	469e      	mov	lr, r3
 8013096:	4770      	bx	lr
