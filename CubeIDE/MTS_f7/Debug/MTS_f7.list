
MTS_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105bc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001044  08010790  08010790  00011790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117d4  080117d4  000131d4  2**0
                  CONTENTS
  4 .ARM          00000008  080117d4  080117d4  000127d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117dc  080117dc  000131d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117dc  080117dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080117e0  080117e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080117e4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003750  200001d4  080119b8  000131d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003924  080119b8  00013924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001014e  00000000  00000000  00013204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023bf  00000000  00000000  00023352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00025718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  00026450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026eb4  00000000  00000000  00026e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c83  00000000  00000000  0004dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0f13  00000000  00000000  000629d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001538e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005568  00000000  00000000  0015392c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00158e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010774 	.word	0x08010774

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08010774 	.word	0x08010774

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <inverter_matriz>:
#include <math.h>
#include "calib.h"


void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 8001024:	b480      	push	{r7}
 8001026:	b08b      	sub	sp, #44	@ 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
 8001032:	e02c      	b.n	800108e <inverter_matriz+0x6a>
        for (int j = 0; j < N; j++) {
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
 8001038:	e023      	b.n	8001082 <inverter_matriz+0x5e>
            if (i == j) {
 800103a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	429a      	cmp	r2, r3
 8001040:	d10e      	bne.n	8001060 <inverter_matriz+0x3c>
                inversa[i][j] = 1;
 8001042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	461a      	mov	r2, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	441a      	add	r2, r3
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e00d      	b.n	800107c <inverter_matriz+0x58>
            } else {
                inversa[i][j] = 0;
 8001060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	461a      	mov	r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	441a      	add	r2, r3
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < N; j++) {
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	3301      	adds	r3, #1
 8001080:	623b      	str	r3, [r7, #32]
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	2b08      	cmp	r3, #8
 8001086:	ddd8      	ble.n	800103a <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 8001088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108a:	3301      	adds	r3, #1
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
 800108e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001090:	2b08      	cmp	r3, #8
 8001092:	ddcf      	ble.n	8001034 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	e0d1      	b.n	800123e <inverter_matriz+0x21a>
    {
        float pivot = matriz[i][i];
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4613      	mov	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	441a      	add	r2, r3
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	e03e      	b.n	8001138 <inverter_matriz+0x114>
        {
            matriz[i][j] /= pivot;
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	461a      	mov	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	441a      	add	r2, r3
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	edd3 6a00 	vldr	s13, [r3]
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	461a      	mov	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	441a      	add	r2, r3
 80010e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	edc3 7a00 	vstr	s15, [r3]
            inversa[i][j] /= pivot;
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	4613      	mov	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	461a      	mov	r2, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	441a      	add	r2, r3
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	edd3 6a00 	vldr	s13, [r3]
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	4613      	mov	r3, r2
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4413      	add	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	461a      	mov	r2, r3
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	441a      	add	r2, r3
 8001120:	ed97 7a03 	vldr	s14, [r7, #12]
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4413      	add	r3, r2
 800112e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < N; j++)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	3301      	adds	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2b08      	cmp	r3, #8
 800113c:	ddbd      	ble.n	80010ba <inverter_matriz+0x96>
        }

        for (int k = 0; k < N; k++)
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	e076      	b.n	8001232 <inverter_matriz+0x20e>
        {
            if (k != i)
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	429a      	cmp	r2, r3
 800114a:	d06f      	beq.n	800122c <inverter_matriz+0x208>
            {
                float fator = matriz[k][i];
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	441a      	add	r2, r3
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	e05c      	b.n	8001226 <inverter_matriz+0x202>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	4613      	mov	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	4413      	add	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	441a      	add	r2, r3
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	ed93 7a00 	vldr	s14, [r3]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	4413      	add	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	461a      	mov	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	441a      	add	r2, r3
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	edd3 6a00 	vldr	s13, [r3]
 80011a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	461a      	mov	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	441a      	add	r2, r3
 80011b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	edc3 7a00 	vstr	s15, [r3]
                    inversa[k][j] -= fator * inversa[i][j];
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	461a      	mov	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	441a      	add	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	ed93 7a00 	vldr	s14, [r3]
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	461a      	mov	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	441a      	add	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	edd3 6a00 	vldr	s13, [r3]
 80011fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	461a      	mov	r2, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	441a      	add	r2, r3
 8001212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	edc3 7a00 	vstr	s15, [r3]
                for (int j = 0; j < N; j++)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	3301      	adds	r3, #1
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b08      	cmp	r3, #8
 800122a:	dd9f      	ble.n	800116c <inverter_matriz+0x148>
        for (int k = 0; k < N; k++)
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	3301      	adds	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b08      	cmp	r3, #8
 8001236:	dd85      	ble.n	8001144 <inverter_matriz+0x120>
    for (int i = 0; i < N; i++)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	3301      	adds	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	2b08      	cmp	r3, #8
 8001242:	f77f af2a 	ble.w	800109a <inverter_matriz+0x76>
                }
            }
        }
    }
}
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	372c      	adds	r7, #44	@ 0x2c
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	0000      	movs	r0, r0
	...

08001258 <NLLS>:


uint8_t NLLS(float *mx, float *my, float *mz, float *p)
{
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	f5ad 3db7 	sub.w	sp, sp, #93696	@ 0x16e00
 800125e:	b0fa      	sub	sp, #488	@ 0x1e8
 8001260:	af00      	add	r7, sp, #0
 8001262:	f607 74e8 	addw	r4, r7, #4072	@ 0xfe8
 8001266:	f6a4 74dc 	subw	r4, r4, #4060	@ 0xfdc
 800126a:	6020      	str	r0, [r4, #0]
 800126c:	f607 70e8 	addw	r0, r7, #4072	@ 0xfe8
 8001270:	f5a0 607e 	sub.w	r0, r0, #4064	@ 0xfe0
 8001274:	6001      	str	r1, [r0, #0]
 8001276:	f607 71e8 	addw	r1, r7, #4072	@ 0xfe8
 800127a:	f6a1 71e4 	subw	r1, r1, #4068	@ 0xfe4
 800127e:	600a      	str	r2, [r1, #0]
 8001280:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001284:	f6a2 72e8 	subw	r2, r2, #4072	@ 0xfe8
 8001288:	6013      	str	r3, [r2, #0]
    uint8_t passo = 0, loop = 1;
 800128a:	2300      	movs	r3, #0
 800128c:	4a54      	ldr	r2, [pc, #336]	@ (80013e0 <NLLS+0x188>)
 800128e:	443a      	add	r2, r7
 8001290:	7013      	strb	r3, [r2, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	4a53      	ldr	r2, [pc, #332]	@ (80013e4 <NLLS+0x18c>)
 8001296:	443a      	add	r2, r7
 8001298:	7013      	strb	r3, [r2, #0]
    float p0[9] = {1, 1, 1, 0, 0, 0, 0, 0, 0}, Be[tam], e[tam], f[tam], sx, sy, sz, bx, by, bz, rho, phi, lambida, error_ant, J, delta_J, mat_H[N][tam];
 800129a:	4b53      	ldr	r3, [pc, #332]	@ (80013e8 <NLLS+0x190>)
 800129c:	4c53      	ldr	r4, [pc, #332]	@ (80013ec <NLLS+0x194>)
 800129e:	443c      	add	r4, r7
 80012a0:	461d      	mov	r5, r3
 80012a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	682b      	ldr	r3, [r5, #0]
 80012ac:	6023      	str	r3, [r4, #0]
    float sin_phi, sin_rho, sin_lambda, cos_phi, cos_rho, cos_lambda;
    float Ht_H[N][N], Ht_e[N], inv[N][N], mul_mat[N][tam];

    for (int i=0; i < tam; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	4a4f      	ldr	r2, [pc, #316]	@ (80013f0 <NLLS+0x198>)
 80012b2:	443a      	add	r2, r7
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e012      	b.n	80012de <NLLS+0x86>
    {
        Be[i] = 1;
 80012b8:	4b4e      	ldr	r3, [pc, #312]	@ (80013f4 <NLLS+0x19c>)
 80012ba:	443b      	add	r3, r7
 80012bc:	f5a3 72fe 	sub.w	r2, r3, #508	@ 0x1fc
 80012c0:	4b4b      	ldr	r3, [pc, #300]	@ (80013f0 <NLLS+0x198>)
 80012c2:	443b      	add	r3, r7
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80012ce:	601a      	str	r2, [r3, #0]
    for (int i=0; i < tam; i++)
 80012d0:	4b47      	ldr	r3, [pc, #284]	@ (80013f0 <NLLS+0x198>)
 80012d2:	443b      	add	r3, r7
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	4a45      	ldr	r2, [pc, #276]	@ (80013f0 <NLLS+0x198>)
 80012da:	443a      	add	r2, r7
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b44      	ldr	r3, [pc, #272]	@ (80013f0 <NLLS+0x198>)
 80012e0:	443b      	add	r3, r7
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f240 4256 	movw	r2, #1110	@ 0x456
 80012e8:	4293      	cmp	r3, r2
 80012ea:	dde5      	ble.n	80012b8 <NLLS+0x60>
    }

    while(loop == 1)
 80012ec:	f003 b995 	b.w	800461a <NLLS+0x33c2>
    {
        sx = p0[0];
 80012f0:	4b3e      	ldr	r3, [pc, #248]	@ (80013ec <NLLS+0x194>)
 80012f2:	443b      	add	r3, r7
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a40      	ldr	r2, [pc, #256]	@ (80013f8 <NLLS+0x1a0>)
 80012f8:	443a      	add	r2, r7
 80012fa:	6013      	str	r3, [r2, #0]
        sy = p0[1];
 80012fc:	4b3f      	ldr	r3, [pc, #252]	@ (80013fc <NLLS+0x1a4>)
 80012fe:	443b      	add	r3, r7
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a3f      	ldr	r2, [pc, #252]	@ (8001400 <NLLS+0x1a8>)
 8001304:	443a      	add	r2, r7
 8001306:	6013      	str	r3, [r2, #0]
        sz = p0[2];
 8001308:	4b3e      	ldr	r3, [pc, #248]	@ (8001404 <NLLS+0x1ac>)
 800130a:	443b      	add	r3, r7
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a3e      	ldr	r2, [pc, #248]	@ (8001408 <NLLS+0x1b0>)
 8001310:	443a      	add	r2, r7
 8001312:	6013      	str	r3, [r2, #0]
        bx = p0[3];
 8001314:	4b3d      	ldr	r3, [pc, #244]	@ (800140c <NLLS+0x1b4>)
 8001316:	443b      	add	r3, r7
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a3d      	ldr	r2, [pc, #244]	@ (8001410 <NLLS+0x1b8>)
 800131c:	443a      	add	r2, r7
 800131e:	6013      	str	r3, [r2, #0]
        by = p0[4];
 8001320:	4b3c      	ldr	r3, [pc, #240]	@ (8001414 <NLLS+0x1bc>)
 8001322:	443b      	add	r3, r7
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a3c      	ldr	r2, [pc, #240]	@ (8001418 <NLLS+0x1c0>)
 8001328:	443a      	add	r2, r7
 800132a:	6013      	str	r3, [r2, #0]
        bz = p0[5];
 800132c:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <NLLS+0x1c4>)
 800132e:	443b      	add	r3, r7
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a3b      	ldr	r2, [pc, #236]	@ (8001420 <NLLS+0x1c8>)
 8001334:	443a      	add	r2, r7
 8001336:	6013      	str	r3, [r2, #0]
        rho = p0[6];
 8001338:	4b3a      	ldr	r3, [pc, #232]	@ (8001424 <NLLS+0x1cc>)
 800133a:	443b      	add	r3, r7
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a3a      	ldr	r2, [pc, #232]	@ (8001428 <NLLS+0x1d0>)
 8001340:	443a      	add	r2, r7
 8001342:	6013      	str	r3, [r2, #0]
        phi = p0[7];
 8001344:	4b39      	ldr	r3, [pc, #228]	@ (800142c <NLLS+0x1d4>)
 8001346:	443b      	add	r3, r7
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a39      	ldr	r2, [pc, #228]	@ (8001430 <NLLS+0x1d8>)
 800134c:	443a      	add	r2, r7
 800134e:	6013      	str	r3, [r2, #0]
        lambida = p0[8];
 8001350:	4b38      	ldr	r3, [pc, #224]	@ (8001434 <NLLS+0x1dc>)
 8001352:	443b      	add	r3, r7
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a38      	ldr	r2, [pc, #224]	@ (8001438 <NLLS+0x1e0>)
 8001358:	443a      	add	r2, r7
 800135a:	6013      	str	r3, [r2, #0]

        sin_phi = sinf(phi);
 800135c:	4b34      	ldr	r3, [pc, #208]	@ (8001430 <NLLS+0x1d8>)
 800135e:	443b      	add	r3, r7
 8001360:	ed93 0a00 	vldr	s0, [r3]
 8001364:	f00e fcc6 	bl	800fcf4 <sinf>
 8001368:	4b34      	ldr	r3, [pc, #208]	@ (800143c <NLLS+0x1e4>)
 800136a:	443b      	add	r3, r7
 800136c:	ed83 0a00 	vstr	s0, [r3]
        sin_rho = sinf(rho);
 8001370:	4b2d      	ldr	r3, [pc, #180]	@ (8001428 <NLLS+0x1d0>)
 8001372:	443b      	add	r3, r7
 8001374:	ed93 0a00 	vldr	s0, [r3]
 8001378:	f00e fcbc 	bl	800fcf4 <sinf>
 800137c:	4b30      	ldr	r3, [pc, #192]	@ (8001440 <NLLS+0x1e8>)
 800137e:	443b      	add	r3, r7
 8001380:	ed83 0a00 	vstr	s0, [r3]
        sin_lambda = sinf(lambida);
 8001384:	4b2c      	ldr	r3, [pc, #176]	@ (8001438 <NLLS+0x1e0>)
 8001386:	443b      	add	r3, r7
 8001388:	ed93 0a00 	vldr	s0, [r3]
 800138c:	f00e fcb2 	bl	800fcf4 <sinf>
 8001390:	4b2c      	ldr	r3, [pc, #176]	@ (8001444 <NLLS+0x1ec>)
 8001392:	443b      	add	r3, r7
 8001394:	ed83 0a00 	vstr	s0, [r3]
        cos_phi = cosf(phi);
 8001398:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <NLLS+0x1d8>)
 800139a:	443b      	add	r3, r7
 800139c:	ed93 0a00 	vldr	s0, [r3]
 80013a0:	f00e fc5c 	bl	800fc5c <cosf>
 80013a4:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <NLLS+0x1f0>)
 80013a6:	443b      	add	r3, r7
 80013a8:	ed83 0a00 	vstr	s0, [r3]
        cos_rho = cosf(rho);
 80013ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <NLLS+0x1d0>)
 80013ae:	443b      	add	r3, r7
 80013b0:	ed93 0a00 	vldr	s0, [r3]
 80013b4:	f00e fc52 	bl	800fc5c <cosf>
 80013b8:	4b24      	ldr	r3, [pc, #144]	@ (800144c <NLLS+0x1f4>)
 80013ba:	443b      	add	r3, r7
 80013bc:	ed83 0a00 	vstr	s0, [r3]
        cos_lambda = cosf(lambida);
 80013c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <NLLS+0x1e0>)
 80013c2:	443b      	add	r3, r7
 80013c4:	ed93 0a00 	vldr	s0, [r3]
 80013c8:	f00e fc48 	bl	800fc5c <cosf>
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <NLLS+0x1f8>)
 80013ce:	443b      	add	r3, r7
 80013d0:	ed83 0a00 	vstr	s0, [r3]

        for(int i=0; i < tam; i++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001454 <NLLS+0x1fc>)
 80013d8:	443a      	add	r2, r7
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	f002 be56 	b.w	800408c <NLLS+0x2e34>
 80013e0:	00016fe7 	.word	0x00016fe7
 80013e4:	00016fe6 	.word	0x00016fe6
 80013e8:	08010790 	.word	0x08010790
 80013ec:	00016f48 	.word	0x00016f48
 80013f0:	00016fb4 	.word	0x00016fb4
 80013f4:	00015fe8 	.word	0x00015fe8
 80013f8:	00016fe0 	.word	0x00016fe0
 80013fc:	00016f4c 	.word	0x00016f4c
 8001400:	00016fdc 	.word	0x00016fdc
 8001404:	00016f50 	.word	0x00016f50
 8001408:	00016fd8 	.word	0x00016fd8
 800140c:	00016f54 	.word	0x00016f54
 8001410:	00016fd4 	.word	0x00016fd4
 8001414:	00016f58 	.word	0x00016f58
 8001418:	00016fd0 	.word	0x00016fd0
 800141c:	00016f5c 	.word	0x00016f5c
 8001420:	00016fcc 	.word	0x00016fcc
 8001424:	00016f60 	.word	0x00016f60
 8001428:	00016fc8 	.word	0x00016fc8
 800142c:	00016f64 	.word	0x00016f64
 8001430:	00016fc4 	.word	0x00016fc4
 8001434:	00016f68 	.word	0x00016f68
 8001438:	00016fc0 	.word	0x00016fc0
 800143c:	00016f84 	.word	0x00016f84
 8001440:	00016f80 	.word	0x00016f80
 8001444:	00016f7c 	.word	0x00016f7c
 8001448:	00016f78 	.word	0x00016f78
 800144c:	00016f74 	.word	0x00016f74
 8001450:	00016f70 	.word	0x00016f70
 8001454:	00016fb0 	.word	0x00016fb0
        {
            f[i] = ((mx[i]-bx)*(mx[i]-bx))/(sx*sx) + ((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))*((sx*(my[i]-by) - sy*sin_rho*(mx[i]-bx))))/((sx*sy*cos_rho)*(sx*sy*cos_rho)) + ((sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx))*(sx*sy*cos_rho*(mz[i]-bz) - sx*sz*sin_lambda*(my[i]-by) + sy*sz*(sin_lambda*sin_rho - cos_rho*sin_phi*cos_lambda)*(mx[i]-bx)))/((sx*sy*sz*cos_rho*cos_phi*cos_lambda)*(sx*sy*sz*cos_rho*cos_phi*cos_lambda));
 8001458:	4bbf      	ldr	r3, [pc, #764]	@ (8001758 <NLLS+0x500>)
 800145a:	443b      	add	r3, r7
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001464:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	4413      	add	r3, r2
 800146c:	ed93 7a00 	vldr	s14, [r3]
 8001470:	4bba      	ldr	r3, [pc, #744]	@ (800175c <NLLS+0x504>)
 8001472:	443b      	add	r3, r7
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ee37 7a67 	vsub.f32	s14, s14, s15
 800147c:	4bb6      	ldr	r3, [pc, #728]	@ (8001758 <NLLS+0x500>)
 800147e:	443b      	add	r3, r7
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001488:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	4413      	add	r3, r2
 8001490:	edd3 6a00 	vldr	s13, [r3]
 8001494:	4bb1      	ldr	r3, [pc, #708]	@ (800175c <NLLS+0x504>)
 8001496:	443b      	add	r3, r7
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014a0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80014a4:	4bae      	ldr	r3, [pc, #696]	@ (8001760 <NLLS+0x508>)
 80014a6:	443b      	add	r3, r7
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014b4:	4ba8      	ldr	r3, [pc, #672]	@ (8001758 <NLLS+0x500>)
 80014b6:	443b      	add	r3, r7
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80014c0:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	edd3 6a00 	vldr	s13, [r3]
 80014cc:	4ba5      	ldr	r3, [pc, #660]	@ (8001764 <NLLS+0x50c>)
 80014ce:	443b      	add	r3, r7
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014d8:	4ba1      	ldr	r3, [pc, #644]	@ (8001760 <NLLS+0x508>)
 80014da:	443b      	add	r3, r7
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014e4:	4ba0      	ldr	r3, [pc, #640]	@ (8001768 <NLLS+0x510>)
 80014e6:	443b      	add	r3, r7
 80014e8:	ed93 6a00 	vldr	s12, [r3]
 80014ec:	4b9f      	ldr	r3, [pc, #636]	@ (800176c <NLLS+0x514>)
 80014ee:	443b      	add	r3, r7
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80014f8:	4b97      	ldr	r3, [pc, #604]	@ (8001758 <NLLS+0x500>)
 80014fa:	443b      	add	r3, r7
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001504:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	4413      	add	r3, r2
 800150c:	edd3 5a00 	vldr	s11, [r3]
 8001510:	4b92      	ldr	r3, [pc, #584]	@ (800175c <NLLS+0x504>)
 8001512:	443b      	add	r3, r7
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800151c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001520:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001524:	4b8c      	ldr	r3, [pc, #560]	@ (8001758 <NLLS+0x500>)
 8001526:	443b      	add	r3, r7
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001530:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	4413      	add	r3, r2
 8001538:	ed93 6a00 	vldr	s12, [r3]
 800153c:	4b89      	ldr	r3, [pc, #548]	@ (8001764 <NLLS+0x50c>)
 800153e:	443b      	add	r3, r7
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001548:	4b85      	ldr	r3, [pc, #532]	@ (8001760 <NLLS+0x508>)
 800154a:	443b      	add	r3, r7
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001554:	4b84      	ldr	r3, [pc, #528]	@ (8001768 <NLLS+0x510>)
 8001556:	443b      	add	r3, r7
 8001558:	edd3 5a00 	vldr	s11, [r3]
 800155c:	4b83      	ldr	r3, [pc, #524]	@ (800176c <NLLS+0x514>)
 800155e:	443b      	add	r3, r7
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001568:	4b7b      	ldr	r3, [pc, #492]	@ (8001758 <NLLS+0x500>)
 800156a:	443b      	add	r3, r7
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001574:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	4413      	add	r3, r2
 800157c:	ed93 5a00 	vldr	s10, [r3]
 8001580:	4b76      	ldr	r3, [pc, #472]	@ (800175c <NLLS+0x504>)
 8001582:	443b      	add	r3, r7
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	ee75 7a67 	vsub.f32	s15, s10, s15
 800158c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001590:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001594:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001598:	4b71      	ldr	r3, [pc, #452]	@ (8001760 <NLLS+0x508>)
 800159a:	443b      	add	r3, r7
 800159c:	edd3 6a00 	vldr	s13, [r3]
 80015a0:	4b71      	ldr	r3, [pc, #452]	@ (8001768 <NLLS+0x510>)
 80015a2:	443b      	add	r3, r7
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015ac:	4b70      	ldr	r3, [pc, #448]	@ (8001770 <NLLS+0x518>)
 80015ae:	443b      	add	r3, r7
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015b8:	4b69      	ldr	r3, [pc, #420]	@ (8001760 <NLLS+0x508>)
 80015ba:	443b      	add	r3, r7
 80015bc:	edd3 5a00 	vldr	s11, [r3]
 80015c0:	4b69      	ldr	r3, [pc, #420]	@ (8001768 <NLLS+0x510>)
 80015c2:	443b      	add	r3, r7
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80015cc:	4b68      	ldr	r3, [pc, #416]	@ (8001770 <NLLS+0x518>)
 80015ce:	443b      	add	r3, r7
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001760 <NLLS+0x508>)
 80015e6:	443b      	add	r3, r7
 80015e8:	edd3 6a00 	vldr	s13, [r3]
 80015ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001768 <NLLS+0x510>)
 80015ee:	443b      	add	r3, r7
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001770 <NLLS+0x518>)
 80015fa:	443b      	add	r3, r7
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001604:	4b54      	ldr	r3, [pc, #336]	@ (8001758 <NLLS+0x500>)
 8001606:	443b      	add	r3, r7
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001610:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	4413      	add	r3, r2
 8001618:	ed93 6a00 	vldr	s12, [r3]
 800161c:	4b55      	ldr	r3, [pc, #340]	@ (8001774 <NLLS+0x51c>)
 800161e:	443b      	add	r3, r7
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001628:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800162c:	4b4c      	ldr	r3, [pc, #304]	@ (8001760 <NLLS+0x508>)
 800162e:	443b      	add	r3, r7
 8001630:	ed93 6a00 	vldr	s12, [r3]
 8001634:	4b50      	ldr	r3, [pc, #320]	@ (8001778 <NLLS+0x520>)
 8001636:	443b      	add	r3, r7
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001640:	4b4e      	ldr	r3, [pc, #312]	@ (800177c <NLLS+0x524>)
 8001642:	443b      	add	r3, r7
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee26 6a27 	vmul.f32	s12, s12, s15
 800164c:	4b42      	ldr	r3, [pc, #264]	@ (8001758 <NLLS+0x500>)
 800164e:	443b      	add	r3, r7
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001658:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	4413      	add	r3, r2
 8001660:	edd3 5a00 	vldr	s11, [r3]
 8001664:	4b3f      	ldr	r3, [pc, #252]	@ (8001764 <NLLS+0x50c>)
 8001666:	443b      	add	r3, r7
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001670:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001674:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001678:	4b3b      	ldr	r3, [pc, #236]	@ (8001768 <NLLS+0x510>)
 800167a:	443b      	add	r3, r7
 800167c:	ed93 6a00 	vldr	s12, [r3]
 8001680:	4b3d      	ldr	r3, [pc, #244]	@ (8001778 <NLLS+0x520>)
 8001682:	443b      	add	r3, r7
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	ee26 6a27 	vmul.f32	s12, s12, s15
 800168c:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <NLLS+0x524>)
 800168e:	443b      	add	r3, r7
 8001690:	edd3 5a00 	vldr	s11, [r3]
 8001694:	4b35      	ldr	r3, [pc, #212]	@ (800176c <NLLS+0x514>)
 8001696:	443b      	add	r3, r7
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80016a0:	4b33      	ldr	r3, [pc, #204]	@ (8001770 <NLLS+0x518>)
 80016a2:	443b      	add	r3, r7
 80016a4:	ed93 5a00 	vldr	s10, [r3]
 80016a8:	4b35      	ldr	r3, [pc, #212]	@ (8001780 <NLLS+0x528>)
 80016aa:	443b      	add	r3, r7
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ee25 5a27 	vmul.f32	s10, s10, s15
 80016b4:	4b33      	ldr	r3, [pc, #204]	@ (8001784 <NLLS+0x52c>)
 80016b6:	443b      	add	r3, r7
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	ee65 7a27 	vmul.f32	s15, s10, s15
 80016c0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80016c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016c8:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <NLLS+0x500>)
 80016ca:	443b      	add	r3, r7
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80016d4:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	edd3 5a00 	vldr	s11, [r3]
 80016e0:	4b1e      	ldr	r3, [pc, #120]	@ (800175c <NLLS+0x504>)
 80016e2:	443b      	add	r3, r7
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80016ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016f0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <NLLS+0x508>)
 80016f6:	443b      	add	r3, r7
 80016f8:	ed93 6a00 	vldr	s12, [r3]
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <NLLS+0x510>)
 80016fe:	443b      	add	r3, r7
 8001700:	edd3 7a00 	vldr	s15, [r3]
 8001704:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <NLLS+0x518>)
 800170a:	443b      	add	r3, r7
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <NLLS+0x500>)
 8001716:	443b      	add	r3, r7
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001720:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	4413      	add	r3, r2
 8001728:	edd3 5a00 	vldr	s11, [r3]
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <NLLS+0x51c>)
 800172e:	443b      	add	r3, r7
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001738:	ee26 6a27 	vmul.f32	s12, s12, s15
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <NLLS+0x508>)
 800173e:	443b      	add	r3, r7
 8001740:	edd3 5a00 	vldr	s11, [r3]
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <NLLS+0x520>)
 8001746:	443b      	add	r3, r7
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001750:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <NLLS+0x524>)
 8001752:	443b      	add	r3, r7
 8001754:	e018      	b.n	8001788 <NLLS+0x530>
 8001756:	bf00      	nop
 8001758:	00016fb0 	.word	0x00016fb0
 800175c:	00016fd4 	.word	0x00016fd4
 8001760:	00016fe0 	.word	0x00016fe0
 8001764:	00016fd0 	.word	0x00016fd0
 8001768:	00016fdc 	.word	0x00016fdc
 800176c:	00016f80 	.word	0x00016f80
 8001770:	00016f74 	.word	0x00016f74
 8001774:	00016fcc 	.word	0x00016fcc
 8001778:	00016fd8 	.word	0x00016fd8
 800177c:	00016f7c 	.word	0x00016f7c
 8001780:	00016f84 	.word	0x00016f84
 8001784:	00016f70 	.word	0x00016f70
 8001788:	edd3 7a00 	vldr	s15, [r3]
 800178c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001790:	4bbd      	ldr	r3, [pc, #756]	@ (8001a88 <NLLS+0x830>)
 8001792:	443b      	add	r3, r7
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800179c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	ed93 5a00 	vldr	s10, [r3]
 80017a8:	4bb8      	ldr	r3, [pc, #736]	@ (8001a8c <NLLS+0x834>)
 80017aa:	443b      	add	r3, r7
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ee75 7a67 	vsub.f32	s15, s10, s15
 80017b4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017b8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017bc:	4bb4      	ldr	r3, [pc, #720]	@ (8001a90 <NLLS+0x838>)
 80017be:	443b      	add	r3, r7
 80017c0:	edd3 5a00 	vldr	s11, [r3]
 80017c4:	4bb3      	ldr	r3, [pc, #716]	@ (8001a94 <NLLS+0x83c>)
 80017c6:	443b      	add	r3, r7
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80017d0:	4bb1      	ldr	r3, [pc, #708]	@ (8001a98 <NLLS+0x840>)
 80017d2:	443b      	add	r3, r7
 80017d4:	ed93 5a00 	vldr	s10, [r3]
 80017d8:	4bb0      	ldr	r3, [pc, #704]	@ (8001a9c <NLLS+0x844>)
 80017da:	443b      	add	r3, r7
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee25 5a27 	vmul.f32	s10, s10, s15
 80017e4:	4bae      	ldr	r3, [pc, #696]	@ (8001aa0 <NLLS+0x848>)
 80017e6:	443b      	add	r3, r7
 80017e8:	edd3 4a00 	vldr	s9, [r3]
 80017ec:	4bad      	ldr	r3, [pc, #692]	@ (8001aa4 <NLLS+0x84c>)
 80017ee:	443b      	add	r3, r7
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80017f8:	4bab      	ldr	r3, [pc, #684]	@ (8001aa8 <NLLS+0x850>)
 80017fa:	443b      	add	r3, r7
 80017fc:	edd3 7a00 	vldr	s15, [r3]
 8001800:	ee64 7aa7 	vmul.f32	s15, s9, s15
 8001804:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001808:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800180c:	4b9e      	ldr	r3, [pc, #632]	@ (8001a88 <NLLS+0x830>)
 800180e:	443b      	add	r3, r7
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001818:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	4413      	add	r3, r2
 8001820:	ed93 5a00 	vldr	s10, [r3]
 8001824:	4ba1      	ldr	r3, [pc, #644]	@ (8001aac <NLLS+0x854>)
 8001826:	443b      	add	r3, r7
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001830:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001834:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001838:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800183c:	4b9c      	ldr	r3, [pc, #624]	@ (8001ab0 <NLLS+0x858>)
 800183e:	443b      	add	r3, r7
 8001840:	edd3 6a00 	vldr	s13, [r3]
 8001844:	4b92      	ldr	r3, [pc, #584]	@ (8001a90 <NLLS+0x838>)
 8001846:	443b      	add	r3, r7
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001850:	4b90      	ldr	r3, [pc, #576]	@ (8001a94 <NLLS+0x83c>)
 8001852:	443b      	add	r3, r7
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800185c:	4b90      	ldr	r3, [pc, #576]	@ (8001aa0 <NLLS+0x848>)
 800185e:	443b      	add	r3, r7
 8001860:	edd3 7a00 	vldr	s15, [r3]
 8001864:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001868:	4b92      	ldr	r3, [pc, #584]	@ (8001ab4 <NLLS+0x85c>)
 800186a:	443b      	add	r3, r7
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001874:	4b8c      	ldr	r3, [pc, #560]	@ (8001aa8 <NLLS+0x850>)
 8001876:	443b      	add	r3, r7
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001880:	4b8b      	ldr	r3, [pc, #556]	@ (8001ab0 <NLLS+0x858>)
 8001882:	443b      	add	r3, r7
 8001884:	edd3 5a00 	vldr	s11, [r3]
 8001888:	4b81      	ldr	r3, [pc, #516]	@ (8001a90 <NLLS+0x838>)
 800188a:	443b      	add	r3, r7
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001894:	4b7f      	ldr	r3, [pc, #508]	@ (8001a94 <NLLS+0x83c>)
 8001896:	443b      	add	r3, r7
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80018a0:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa0 <NLLS+0x848>)
 80018a2:	443b      	add	r3, r7
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80018ac:	4b81      	ldr	r3, [pc, #516]	@ (8001ab4 <NLLS+0x85c>)
 80018ae:	443b      	add	r3, r7
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80018b8:	4b7b      	ldr	r3, [pc, #492]	@ (8001aa8 <NLLS+0x850>)
 80018ba:	443b      	add	r3, r7
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018c8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80018cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d0:	4b79      	ldr	r3, [pc, #484]	@ (8001ab8 <NLLS+0x860>)
 80018d2:	443b      	add	r3, r7
 80018d4:	f2a3 42b4 	subw	r2, r3, #1204	@ 0x4b4
 80018d8:	4b6b      	ldr	r3, [pc, #428]	@ (8001a88 <NLLS+0x830>)
 80018da:	443b      	add	r3, r7
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	edc3 7a00 	vstr	s15, [r3]

            e[i] = (Be[i] * Be[i]) - f[i];
 80018e6:	4b75      	ldr	r3, [pc, #468]	@ (8001abc <NLLS+0x864>)
 80018e8:	443b      	add	r3, r7
 80018ea:	f5a3 72fe 	sub.w	r2, r3, #508	@ 0x1fc
 80018ee:	4b66      	ldr	r3, [pc, #408]	@ (8001a88 <NLLS+0x830>)
 80018f0:	443b      	add	r3, r7
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	ed93 7a00 	vldr	s14, [r3]
 80018fc:	4b6f      	ldr	r3, [pc, #444]	@ (8001abc <NLLS+0x864>)
 80018fe:	443b      	add	r3, r7
 8001900:	f5a3 72fe 	sub.w	r2, r3, #508	@ 0x1fc
 8001904:	4b60      	ldr	r3, [pc, #384]	@ (8001a88 <NLLS+0x830>)
 8001906:	443b      	add	r3, r7
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001916:	4b68      	ldr	r3, [pc, #416]	@ (8001ab8 <NLLS+0x860>)
 8001918:	443b      	add	r3, r7
 800191a:	f2a3 42b4 	subw	r2, r3, #1204	@ 0x4b4
 800191e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a88 <NLLS+0x830>)
 8001920:	443b      	add	r3, r7
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001930:	4b63      	ldr	r3, [pc, #396]	@ (8001ac0 <NLLS+0x868>)
 8001932:	443b      	add	r3, r7
 8001934:	f5a3 7256 	sub.w	r2, r3, #856	@ 0x358
 8001938:	4b53      	ldr	r3, [pc, #332]	@ (8001a88 <NLLS+0x830>)
 800193a:	443b      	add	r3, r7
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	edc3 7a00 	vstr	s15, [r3]

            mat_H[0][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(by - my[i]))/(sx*sx*sy*sy*cos_rho*cos_rho) - (2*((sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i]))))/((sx*sx*sx)*sy*sy*cos_rho*cos_rho) - (2*((bx - mx[i])*(bx - mx[i])))/(sx*sx*sx) - (2*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])) * (sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/((sx*sx*sx)*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho) + (2*(sy*cos_rho*(bz - mz[i]) - sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8001946:	4b50      	ldr	r3, [pc, #320]	@ (8001a88 <NLLS+0x830>)
 8001948:	443b      	add	r3, r7
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001952:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	4413      	add	r3, r2
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a8c <NLLS+0x834>)
 8001960:	443b      	add	r3, r7
 8001962:	ed93 7a00 	vldr	s14, [r3]
 8001966:	ee37 7a67 	vsub.f32	s14, s14, s15
 800196a:	4b51      	ldr	r3, [pc, #324]	@ (8001ab0 <NLLS+0x858>)
 800196c:	443b      	add	r3, r7
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001976:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <NLLS+0x838>)
 8001978:	443b      	add	r3, r7
 800197a:	edd3 6a00 	vldr	s13, [r3]
 800197e:	4b47      	ldr	r3, [pc, #284]	@ (8001a9c <NLLS+0x844>)
 8001980:	443b      	add	r3, r7
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800198a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a88 <NLLS+0x830>)
 800198c:	443b      	add	r3, r7
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001996:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	4413      	add	r3, r2
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	4b42      	ldr	r3, [pc, #264]	@ (8001aac <NLLS+0x854>)
 80019a4:	443b      	add	r3, r7
 80019a6:	ed93 6a00 	vldr	s12, [r3]
 80019aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019ba:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <NLLS+0x830>)
 80019bc:	443b      	add	r3, r7
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80019c6:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	4413      	add	r3, r2
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a8c <NLLS+0x834>)
 80019d4:	443b      	add	r3, r7
 80019d6:	edd3 6a00 	vldr	s13, [r3]
 80019da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019e2:	4b33      	ldr	r3, [pc, #204]	@ (8001ab0 <NLLS+0x858>)
 80019e4:	443b      	add	r3, r7
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019ee:	4b28      	ldr	r3, [pc, #160]	@ (8001a90 <NLLS+0x838>)
 80019f0:	443b      	add	r3, r7
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fa:	4b25      	ldr	r3, [pc, #148]	@ (8001a90 <NLLS+0x838>)
 80019fc:	443b      	add	r3, r7
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a06:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <NLLS+0x848>)
 8001a08:	443b      	add	r3, r7
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a12:	4b23      	ldr	r3, [pc, #140]	@ (8001aa0 <NLLS+0x848>)
 8001a14:	443b      	add	r3, r7
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <NLLS+0x830>)
 8001a24:	443b      	add	r3, r7
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001a2e:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	4413      	add	r3, r2
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <NLLS+0x834>)
 8001a3c:	443b      	add	r3, r7
 8001a3e:	edd3 6a00 	vldr	s13, [r3]
 8001a42:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a46:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <NLLS+0x858>)
 8001a48:	443b      	add	r3, r7
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a52:	4b0f      	ldr	r3, [pc, #60]	@ (8001a90 <NLLS+0x838>)
 8001a54:	443b      	add	r3, r7
 8001a56:	ed93 6a00 	vldr	s12, [r3]
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <NLLS+0x844>)
 8001a5c:	443b      	add	r3, r7
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a66:	4b08      	ldr	r3, [pc, #32]	@ (8001a88 <NLLS+0x830>)
 8001a68:	443b      	add	r3, r7
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001a72:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	4413      	add	r3, r2
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <NLLS+0x854>)
 8001a80:	443b      	add	r3, r7
 8001a82:	edd3 5a00 	vldr	s11, [r3]
 8001a86:	e01d      	b.n	8001ac4 <NLLS+0x86c>
 8001a88:	00016fb0 	.word	0x00016fb0
 8001a8c:	00016fd0 	.word	0x00016fd0
 8001a90:	00016fdc 	.word	0x00016fdc
 8001a94:	00016fd8 	.word	0x00016fd8
 8001a98:	00016f7c 	.word	0x00016f7c
 8001a9c:	00016f80 	.word	0x00016f80
 8001aa0:	00016f74 	.word	0x00016f74
 8001aa4:	00016f84 	.word	0x00016f84
 8001aa8:	00016f70 	.word	0x00016f70
 8001aac:	00016fd4 	.word	0x00016fd4
 8001ab0:	00016fe0 	.word	0x00016fe0
 8001ab4:	00016f78 	.word	0x00016f78
 8001ab8:	00013fe8 	.word	0x00013fe8
 8001abc:	00015fe8 	.word	0x00015fe8
 8001ac0:	00014fe8 	.word	0x00014fe8
 8001ac4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001ac8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001acc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ad0:	4bc0      	ldr	r3, [pc, #768]	@ (8001dd4 <NLLS+0xb7c>)
 8001ad2:	443b      	add	r3, r7
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001adc:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	4bbb      	ldr	r3, [pc, #748]	@ (8001dd8 <NLLS+0xb80>)
 8001aea:	443b      	add	r3, r7
 8001aec:	ed93 6a00 	vldr	s12, [r3]
 8001af0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001af4:	4bb9      	ldr	r3, [pc, #740]	@ (8001ddc <NLLS+0xb84>)
 8001af6:	443b      	add	r3, r7
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b00:	4bb7      	ldr	r3, [pc, #732]	@ (8001de0 <NLLS+0xb88>)
 8001b02:	443b      	add	r3, r7
 8001b04:	edd3 5a00 	vldr	s11, [r3]
 8001b08:	4bb6      	ldr	r3, [pc, #728]	@ (8001de4 <NLLS+0xb8c>)
 8001b0a:	443b      	add	r3, r7
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001b14:	4baf      	ldr	r3, [pc, #700]	@ (8001dd4 <NLLS+0xb7c>)
 8001b16:	443b      	add	r3, r7
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001b20:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001b24:	6812      	ldr	r2, [r2, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	4bae      	ldr	r3, [pc, #696]	@ (8001de8 <NLLS+0xb90>)
 8001b2e:	443b      	add	r3, r7
 8001b30:	ed93 5a00 	vldr	s10, [r3]
 8001b34:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001b38:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b3c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b44:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001b48:	4ba4      	ldr	r3, [pc, #656]	@ (8001ddc <NLLS+0xb84>)
 8001b4a:	443b      	add	r3, r7
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001b54:	4ba1      	ldr	r3, [pc, #644]	@ (8001ddc <NLLS+0xb84>)
 8001b56:	443b      	add	r3, r7
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b60:	4b9f      	ldr	r3, [pc, #636]	@ (8001de0 <NLLS+0xb88>)
 8001b62:	443b      	add	r3, r7
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b6c:	4b9c      	ldr	r3, [pc, #624]	@ (8001de0 <NLLS+0xb88>)
 8001b6e:	443b      	add	r3, r7
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b78:	4b9c      	ldr	r3, [pc, #624]	@ (8001dec <NLLS+0xb94>)
 8001b7a:	443b      	add	r3, r7
 8001b7c:	edd3 7a00 	vldr	s15, [r3]
 8001b80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b84:	4b99      	ldr	r3, [pc, #612]	@ (8001dec <NLLS+0xb94>)
 8001b86:	443b      	add	r3, r7
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b90:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001b94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b98:	4b8e      	ldr	r3, [pc, #568]	@ (8001dd4 <NLLS+0xb7c>)
 8001b9a:	443b      	add	r3, r7
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001ba4:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	4b8d      	ldr	r3, [pc, #564]	@ (8001de8 <NLLS+0xb90>)
 8001bb2:	443b      	add	r3, r7
 8001bb4:	edd3 6a00 	vldr	s13, [r3]
 8001bb8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bbc:	4b85      	ldr	r3, [pc, #532]	@ (8001dd4 <NLLS+0xb7c>)
 8001bbe:	443b      	add	r3, r7
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001bc8:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	4b84      	ldr	r3, [pc, #528]	@ (8001de8 <NLLS+0xb90>)
 8001bd6:	443b      	add	r3, r7
 8001bd8:	ed93 6a00 	vldr	s12, [r3]
 8001bdc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be4:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001be8:	4b7c      	ldr	r3, [pc, #496]	@ (8001ddc <NLLS+0xb84>)
 8001bea:	443b      	add	r3, r7
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001bf4:	4b79      	ldr	r3, [pc, #484]	@ (8001ddc <NLLS+0xb84>)
 8001bf6:	443b      	add	r3, r7
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c00:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c08:	4b75      	ldr	r3, [pc, #468]	@ (8001de0 <NLLS+0xb88>)
 8001c0a:	443b      	add	r3, r7
 8001c0c:	edd3 6a00 	vldr	s13, [r3]
 8001c10:	4b77      	ldr	r3, [pc, #476]	@ (8001df0 <NLLS+0xb98>)
 8001c12:	443b      	add	r3, r7
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c1c:	4b75      	ldr	r3, [pc, #468]	@ (8001df4 <NLLS+0xb9c>)
 8001c1e:	443b      	add	r3, r7
 8001c20:	ed93 6a00 	vldr	s12, [r3]
 8001c24:	4b6f      	ldr	r3, [pc, #444]	@ (8001de4 <NLLS+0xb8c>)
 8001c26:	443b      	add	r3, r7
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c30:	4b71      	ldr	r3, [pc, #452]	@ (8001df8 <NLLS+0xba0>)
 8001c32:	443b      	add	r3, r7
 8001c34:	edd3 5a00 	vldr	s11, [r3]
 8001c38:	4b6c      	ldr	r3, [pc, #432]	@ (8001dec <NLLS+0xb94>)
 8001c3a:	443b      	add	r3, r7
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001c44:	4b6d      	ldr	r3, [pc, #436]	@ (8001dfc <NLLS+0xba4>)
 8001c46:	443b      	add	r3, r7
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c50:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c58:	4b5e      	ldr	r3, [pc, #376]	@ (8001dd4 <NLLS+0xb7c>)
 8001c5a:	443b      	add	r3, r7
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001c64:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	4b5d      	ldr	r3, [pc, #372]	@ (8001de8 <NLLS+0xb90>)
 8001c72:	443b      	add	r3, r7
 8001c74:	ed93 6a00 	vldr	s12, [r3]
 8001c78:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c80:	4b56      	ldr	r3, [pc, #344]	@ (8001ddc <NLLS+0xb84>)
 8001c82:	443b      	add	r3, r7
 8001c84:	ed93 6a00 	vldr	s12, [r3]
 8001c88:	4b55      	ldr	r3, [pc, #340]	@ (8001de0 <NLLS+0xb88>)
 8001c8a:	443b      	add	r3, r7
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c94:	4b55      	ldr	r3, [pc, #340]	@ (8001dec <NLLS+0xb94>)
 8001c96:	443b      	add	r3, r7
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd4 <NLLS+0xb7c>)
 8001ca2:	443b      	add	r3, r7
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001cac:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	4b51      	ldr	r3, [pc, #324]	@ (8001e00 <NLLS+0xba8>)
 8001cba:	443b      	add	r3, r7
 8001cbc:	edd3 5a00 	vldr	s11, [r3]
 8001cc0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001cc4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cc8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ccc:	4b43      	ldr	r3, [pc, #268]	@ (8001ddc <NLLS+0xb84>)
 8001cce:	443b      	add	r3, r7
 8001cd0:	ed93 6a00 	vldr	s12, [r3]
 8001cd4:	4b46      	ldr	r3, [pc, #280]	@ (8001df0 <NLLS+0xb98>)
 8001cd6:	443b      	add	r3, r7
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ce0:	4b44      	ldr	r3, [pc, #272]	@ (8001df4 <NLLS+0xb9c>)
 8001ce2:	443b      	add	r3, r7
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cec:	4b39      	ldr	r3, [pc, #228]	@ (8001dd4 <NLLS+0xb7c>)
 8001cee:	443b      	add	r3, r7
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001cf8:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <NLLS+0xb80>)
 8001d06:	443b      	add	r3, r7
 8001d08:	edd3 5a00 	vldr	s11, [r3]
 8001d0c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001d10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d18:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <NLLS+0xb88>)
 8001d1a:	443b      	add	r3, r7
 8001d1c:	ed93 6a00 	vldr	s12, [r3]
 8001d20:	4b33      	ldr	r3, [pc, #204]	@ (8001df0 <NLLS+0xb98>)
 8001d22:	443b      	add	r3, r7
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d2c:	4b31      	ldr	r3, [pc, #196]	@ (8001df4 <NLLS+0xb9c>)
 8001d2e:	443b      	add	r3, r7
 8001d30:	edd3 5a00 	vldr	s11, [r3]
 8001d34:	4b2b      	ldr	r3, [pc, #172]	@ (8001de4 <NLLS+0xb8c>)
 8001d36:	443b      	add	r3, r7
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001d40:	4b2d      	ldr	r3, [pc, #180]	@ (8001df8 <NLLS+0xba0>)
 8001d42:	443b      	add	r3, r7
 8001d44:	ed93 5a00 	vldr	s10, [r3]
 8001d48:	4b28      	ldr	r3, [pc, #160]	@ (8001dec <NLLS+0xb94>)
 8001d4a:	443b      	add	r3, r7
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001d54:	4b29      	ldr	r3, [pc, #164]	@ (8001dfc <NLLS+0xba4>)
 8001d56:	443b      	add	r3, r7
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001d60:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001d64:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <NLLS+0xb7c>)
 8001d6a:	443b      	add	r3, r7
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001d74:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	edd3 7a00 	vldr	s15, [r3]
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <NLLS+0xb90>)
 8001d82:	443b      	add	r3, r7
 8001d84:	edd3 5a00 	vldr	s11, [r3]
 8001d88:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001d8c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <NLLS+0xb84>)
 8001d92:	443b      	add	r3, r7
 8001d94:	edd3 5a00 	vldr	s11, [r3]
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <NLLS+0xb88>)
 8001d9a:	443b      	add	r3, r7
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <NLLS+0xb94>)
 8001da6:	443b      	add	r3, r7
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <NLLS+0xb7c>)
 8001db2:	443b      	add	r3, r7
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001dbc:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <NLLS+0xba8>)
 8001dca:	443b      	add	r3, r7
 8001dcc:	ed93 5a00 	vldr	s10, [r3]
 8001dd0:	e018      	b.n	8001e04 <NLLS+0xbac>
 8001dd2:	bf00      	nop
 8001dd4:	00016fb0 	.word	0x00016fb0
 8001dd8:	00016fd0 	.word	0x00016fd0
 8001ddc:	00016fe0 	.word	0x00016fe0
 8001de0:	00016fdc 	.word	0x00016fdc
 8001de4:	00016f80 	.word	0x00016f80
 8001de8:	00016fd4 	.word	0x00016fd4
 8001dec:	00016f74 	.word	0x00016f74
 8001df0:	00016fd8 	.word	0x00016fd8
 8001df4:	00016f7c 	.word	0x00016f7c
 8001df8:	00016f70 	.word	0x00016f70
 8001dfc:	00016f84 	.word	0x00016f84
 8001e00:	00016fcc 	.word	0x00016fcc
 8001e04:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001e08:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e0c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e10:	4bc0      	ldr	r3, [pc, #768]	@ (8002114 <NLLS+0xebc>)
 8001e12:	443b      	add	r3, r7
 8001e14:	edd3 5a00 	vldr	s11, [r3]
 8001e18:	4bbf      	ldr	r3, [pc, #764]	@ (8002118 <NLLS+0xec0>)
 8001e1a:	443b      	add	r3, r7
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001e24:	4bbd      	ldr	r3, [pc, #756]	@ (800211c <NLLS+0xec4>)
 8001e26:	443b      	add	r3, r7
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001e30:	4bbb      	ldr	r3, [pc, #748]	@ (8002120 <NLLS+0xec8>)
 8001e32:	443b      	add	r3, r7
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001e3c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	edd3 7a00 	vldr	s15, [r3]
 8001e48:	4bb6      	ldr	r3, [pc, #728]	@ (8002124 <NLLS+0xecc>)
 8001e4a:	443b      	add	r3, r7
 8001e4c:	ed93 5a00 	vldr	s10, [r3]
 8001e50:	ee75 7a67 	vsub.f32	s15, s10, s15
 8001e54:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e58:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e60:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8001e64:	4bab      	ldr	r3, [pc, #684]	@ (8002114 <NLLS+0xebc>)
 8001e66:	443b      	add	r3, r7
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001e70:	4ba8      	ldr	r3, [pc, #672]	@ (8002114 <NLLS+0xebc>)
 8001e72:	443b      	add	r3, r7
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e7c:	4baa      	ldr	r3, [pc, #680]	@ (8002128 <NLLS+0xed0>)
 8001e7e:	443b      	add	r3, r7
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e88:	4ba7      	ldr	r3, [pc, #668]	@ (8002128 <NLLS+0xed0>)
 8001e8a:	443b      	add	r3, r7
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e94:	4ba0      	ldr	r3, [pc, #640]	@ (8002118 <NLLS+0xec0>)
 8001e96:	443b      	add	r3, r7
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ea0:	4b9d      	ldr	r3, [pc, #628]	@ (8002118 <NLLS+0xec0>)
 8001ea2:	443b      	add	r3, r7
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eac:	4b9f      	ldr	r3, [pc, #636]	@ (800212c <NLLS+0xed4>)
 8001eae:	443b      	add	r3, r7
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eb8:	4b9c      	ldr	r3, [pc, #624]	@ (800212c <NLLS+0xed4>)
 8001eba:	443b      	add	r3, r7
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec4:	4b9a      	ldr	r3, [pc, #616]	@ (8002130 <NLLS+0xed8>)
 8001ec6:	443b      	add	r3, r7
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
 8001ecc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ed0:	4b97      	ldr	r3, [pc, #604]	@ (8002130 <NLLS+0xed8>)
 8001ed2:	443b      	add	r3, r7
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001edc:	4b95      	ldr	r3, [pc, #596]	@ (8002134 <NLLS+0xedc>)
 8001ede:	443b      	add	r3, r7
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ee8:	4b92      	ldr	r3, [pc, #584]	@ (8002134 <NLLS+0xedc>)
 8001eea:	443b      	add	r3, r7
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ef4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001ef8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001efc:	4b8a      	ldr	r3, [pc, #552]	@ (8002128 <NLLS+0xed0>)
 8001efe:	443b      	add	r3, r7
 8001f00:	edd3 6a00 	vldr	s13, [r3]
 8001f04:	4b8b      	ldr	r3, [pc, #556]	@ (8002134 <NLLS+0xedc>)
 8001f06:	443b      	add	r3, r7
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f10:	4b83      	ldr	r3, [pc, #524]	@ (8002120 <NLLS+0xec8>)
 8001f12:	443b      	add	r3, r7
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001f1c:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	edd3 7a00 	vldr	s15, [r3]
 8001f28:	4b83      	ldr	r3, [pc, #524]	@ (8002138 <NLLS+0xee0>)
 8001f2a:	443b      	add	r3, r7
 8001f2c:	ed93 6a00 	vldr	s12, [r3]
 8001f30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f38:	4b77      	ldr	r3, [pc, #476]	@ (8002118 <NLLS+0xec0>)
 8001f3a:	443b      	add	r3, r7
 8001f3c:	ed93 6a00 	vldr	s12, [r3]
 8001f40:	4b76      	ldr	r3, [pc, #472]	@ (800211c <NLLS+0xec4>)
 8001f42:	443b      	add	r3, r7
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f4c:	4b74      	ldr	r3, [pc, #464]	@ (8002120 <NLLS+0xec8>)
 8001f4e:	443b      	add	r3, r7
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001f58:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	4413      	add	r3, r2
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	4b6f      	ldr	r3, [pc, #444]	@ (8002124 <NLLS+0xecc>)
 8001f66:	443b      	add	r3, r7
 8001f68:	edd3 5a00 	vldr	s11, [r3]
 8001f6c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001f70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f78:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	@ (8002128 <NLLS+0xed0>)
 8001f7e:	443b      	add	r3, r7
 8001f80:	ed93 6a00 	vldr	s12, [r3]
 8001f84:	4b64      	ldr	r3, [pc, #400]	@ (8002118 <NLLS+0xec0>)
 8001f86:	443b      	add	r3, r7
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f90:	4b62      	ldr	r3, [pc, #392]	@ (800211c <NLLS+0xec4>)
 8001f92:	443b      	add	r3, r7
 8001f94:	edd3 5a00 	vldr	s11, [r3]
 8001f98:	4b68      	ldr	r3, [pc, #416]	@ (800213c <NLLS+0xee4>)
 8001f9a:	443b      	add	r3, r7
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001fa4:	4b61      	ldr	r3, [pc, #388]	@ (800212c <NLLS+0xed4>)
 8001fa6:	443b      	add	r3, r7
 8001fa8:	ed93 5a00 	vldr	s10, [r3]
 8001fac:	4b61      	ldr	r3, [pc, #388]	@ (8002134 <NLLS+0xedc>)
 8001fae:	443b      	add	r3, r7
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001fb8:	4b61      	ldr	r3, [pc, #388]	@ (8002140 <NLLS+0xee8>)
 8001fba:	443b      	add	r3, r7
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ee65 7a27 	vmul.f32	s15, s10, s15
 8001fc4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001fc8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fcc:	4b54      	ldr	r3, [pc, #336]	@ (8002120 <NLLS+0xec8>)
 8001fce:	443b      	add	r3, r7
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8001fd8:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8001fdc:	6812      	ldr	r2, [r2, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	4b57      	ldr	r3, [pc, #348]	@ (8002144 <NLLS+0xeec>)
 8001fe6:	443b      	add	r3, r7
 8001fe8:	edd3 5a00 	vldr	s11, [r3]
 8001fec:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8001ff0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ff4:	4b47      	ldr	r3, [pc, #284]	@ (8002114 <NLLS+0xebc>)
 8001ff6:	443b      	add	r3, r7
 8001ff8:	edd3 5a00 	vldr	s11, [r3]
 8001ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8002128 <NLLS+0xed0>)
 8001ffe:	443b      	add	r3, r7
 8002000:	edd3 7a00 	vldr	s15, [r3]
 8002004:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002008:	4b4a      	ldr	r3, [pc, #296]	@ (8002134 <NLLS+0xedc>)
 800200a:	443b      	add	r3, r7
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002014:	4b42      	ldr	r3, [pc, #264]	@ (8002120 <NLLS+0xec8>)
 8002016:	443b      	add	r3, r7
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002020:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	4413      	add	r3, r2
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	4b42      	ldr	r3, [pc, #264]	@ (8002138 <NLLS+0xee0>)
 800202e:	443b      	add	r3, r7
 8002030:	ed93 5a00 	vldr	s10, [r3]
 8002034:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002038:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800203c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002040:	4b34      	ldr	r3, [pc, #208]	@ (8002114 <NLLS+0xebc>)
 8002042:	443b      	add	r3, r7
 8002044:	edd3 5a00 	vldr	s11, [r3]
 8002048:	4b33      	ldr	r3, [pc, #204]	@ (8002118 <NLLS+0xec0>)
 800204a:	443b      	add	r3, r7
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002054:	4b31      	ldr	r3, [pc, #196]	@ (800211c <NLLS+0xec4>)
 8002056:	443b      	add	r3, r7
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002060:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <NLLS+0xec8>)
 8002062:	443b      	add	r3, r7
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800206c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	4413      	add	r3, r2
 8002074:	edd3 7a00 	vldr	s15, [r3]
 8002078:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <NLLS+0xecc>)
 800207a:	443b      	add	r3, r7
 800207c:	ed93 5a00 	vldr	s10, [r3]
 8002080:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002084:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002088:	ee76 7a67 	vsub.f32	s15, s12, s15
 800208c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002090:	4b20      	ldr	r3, [pc, #128]	@ (8002114 <NLLS+0xebc>)
 8002092:	443b      	add	r3, r7
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800209c:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <NLLS+0xed0>)
 800209e:	443b      	add	r3, r7
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <NLLS+0xed0>)
 80020aa:	443b      	add	r3, r7
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020b4:	4b18      	ldr	r3, [pc, #96]	@ (8002118 <NLLS+0xec0>)
 80020b6:	443b      	add	r3, r7
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020c0:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <NLLS+0xec0>)
 80020c2:	443b      	add	r3, r7
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020cc:	4b17      	ldr	r3, [pc, #92]	@ (800212c <NLLS+0xed4>)
 80020ce:	443b      	add	r3, r7
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020d8:	4b14      	ldr	r3, [pc, #80]	@ (800212c <NLLS+0xed4>)
 80020da:	443b      	add	r3, r7
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020e4:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <NLLS+0xed8>)
 80020e6:	443b      	add	r3, r7
 80020e8:	edd3 7a00 	vldr	s15, [r3]
 80020ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <NLLS+0xed8>)
 80020f2:	443b      	add	r3, r7
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002134 <NLLS+0xedc>)
 80020fe:	443b      	add	r3, r7
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002108:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <NLLS+0xedc>)
 800210a:	443b      	add	r3, r7
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	e01a      	b.n	8002148 <NLLS+0xef0>
 8002112:	bf00      	nop
 8002114:	00016fe0 	.word	0x00016fe0
 8002118:	00016fd8 	.word	0x00016fd8
 800211c:	00016f7c 	.word	0x00016f7c
 8002120:	00016fb0 	.word	0x00016fb0
 8002124:	00016fd0 	.word	0x00016fd0
 8002128:	00016fdc 	.word	0x00016fdc
 800212c:	00016f70 	.word	0x00016f70
 8002130:	00016f78 	.word	0x00016f78
 8002134:	00016f74 	.word	0x00016f74
 8002138:	00016fcc 	.word	0x00016fcc
 800213c:	00016f80 	.word	0x00016f80
 8002140:	00016f84 	.word	0x00016f84
 8002144:	00016fd4 	.word	0x00016fd4
 8002148:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800214c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002154:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8002158:	443b      	add	r3, r7
 800215a:	461a      	mov	r2, r3
 800215c:	4bbe      	ldr	r3, [pc, #760]	@ (8002458 <NLLS+0x1200>)
 800215e:	443b      	add	r3, r7
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	3bf0      	subs	r3, #240	@ 0xf0
 8002168:	edc3 7a00 	vstr	s15, [r3]

            mat_H[1][i] = -(2*(by - my[i])*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*(sy*sy*sy)*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 800216c:	4bba      	ldr	r3, [pc, #744]	@ (8002458 <NLLS+0x1200>)
 800216e:	443b      	add	r3, r7
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002178:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	4413      	add	r3, r2
 8002180:	edd3 7a00 	vldr	s15, [r3]
 8002184:	4bb5      	ldr	r3, [pc, #724]	@ (800245c <NLLS+0x1204>)
 8002186:	443b      	add	r3, r7
 8002188:	ed93 7a00 	vldr	s14, [r3]
 800218c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002190:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002194:	4bb1      	ldr	r3, [pc, #708]	@ (800245c <NLLS+0x1204>)
 8002196:	443b      	add	r3, r7
 8002198:	edd3 6a00 	vldr	s13, [r3]
 800219c:	4bb0      	ldr	r3, [pc, #704]	@ (8002460 <NLLS+0x1208>)
 800219e:	443b      	add	r3, r7
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021a8:	4bae      	ldr	r3, [pc, #696]	@ (8002464 <NLLS+0x120c>)
 80021aa:	443b      	add	r3, r7
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021b4:	4bac      	ldr	r3, [pc, #688]	@ (8002468 <NLLS+0x1210>)
 80021b6:	443b      	add	r3, r7
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021c0:	4ba9      	ldr	r3, [pc, #676]	@ (8002468 <NLLS+0x1210>)
 80021c2:	443b      	add	r3, r7
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021cc:	4ba2      	ldr	r3, [pc, #648]	@ (8002458 <NLLS+0x1200>)
 80021ce:	443b      	add	r3, r7
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80021d8:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	ed93 6a00 	vldr	s12, [r3]
 80021e4:	4b9e      	ldr	r3, [pc, #632]	@ (8002460 <NLLS+0x1208>)
 80021e6:	443b      	add	r3, r7
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021f0:	4b9c      	ldr	r3, [pc, #624]	@ (8002464 <NLLS+0x120c>)
 80021f2:	443b      	add	r3, r7
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80021fc:	4b9a      	ldr	r3, [pc, #616]	@ (8002468 <NLLS+0x1210>)
 80021fe:	443b      	add	r3, r7
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002208:	4b97      	ldr	r3, [pc, #604]	@ (8002468 <NLLS+0x1210>)
 800220a:	443b      	add	r3, r7
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002214:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002218:	4b90      	ldr	r3, [pc, #576]	@ (800245c <NLLS+0x1204>)
 800221a:	443b      	add	r3, r7
 800221c:	ed93 6a00 	vldr	s12, [r3]
 8002220:	4b8f      	ldr	r3, [pc, #572]	@ (8002460 <NLLS+0x1208>)
 8002222:	443b      	add	r3, r7
 8002224:	edd3 7a00 	vldr	s15, [r3]
 8002228:	ee26 6a27 	vmul.f32	s12, s12, s15
 800222c:	4b8d      	ldr	r3, [pc, #564]	@ (8002464 <NLLS+0x120c>)
 800222e:	443b      	add	r3, r7
 8002230:	edd3 7a00 	vldr	s15, [r3]
 8002234:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002238:	4b8c      	ldr	r3, [pc, #560]	@ (800246c <NLLS+0x1214>)
 800223a:	443b      	add	r3, r7
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002244:	4b89      	ldr	r3, [pc, #548]	@ (800246c <NLLS+0x1214>)
 8002246:	443b      	add	r3, r7
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002250:	4b87      	ldr	r3, [pc, #540]	@ (8002470 <NLLS+0x1218>)
 8002252:	443b      	add	r3, r7
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ee26 6a27 	vmul.f32	s12, s12, s15
 800225c:	4b84      	ldr	r3, [pc, #528]	@ (8002470 <NLLS+0x1218>)
 800225e:	443b      	add	r3, r7
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002268:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800226c:	4b7a      	ldr	r3, [pc, #488]	@ (8002458 <NLLS+0x1200>)
 800226e:	443b      	add	r3, r7
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002278:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	4413      	add	r3, r2
 8002280:	ed93 6a00 	vldr	s12, [r3]
 8002284:	4b76      	ldr	r3, [pc, #472]	@ (8002460 <NLLS+0x1208>)
 8002286:	443b      	add	r3, r7
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002290:	4b74      	ldr	r3, [pc, #464]	@ (8002464 <NLLS+0x120c>)
 8002292:	443b      	add	r3, r7
 8002294:	edd3 7a00 	vldr	s15, [r3]
 8002298:	ee26 6a27 	vmul.f32	s12, s12, s15
 800229c:	4b73      	ldr	r3, [pc, #460]	@ (800246c <NLLS+0x1214>)
 800229e:	443b      	add	r3, r7
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022a8:	4b70      	ldr	r3, [pc, #448]	@ (800246c <NLLS+0x1214>)
 80022aa:	443b      	add	r3, r7
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022b4:	4b6e      	ldr	r3, [pc, #440]	@ (8002470 <NLLS+0x1218>)
 80022b6:	443b      	add	r3, r7
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002470 <NLLS+0x1218>)
 80022c2:	443b      	add	r3, r7
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022d0:	4b68      	ldr	r3, [pc, #416]	@ (8002474 <NLLS+0x121c>)
 80022d2:	443b      	add	r3, r7
 80022d4:	ed93 6a00 	vldr	s12, [r3]
 80022d8:	4b61      	ldr	r3, [pc, #388]	@ (8002460 <NLLS+0x1208>)
 80022da:	443b      	add	r3, r7
 80022dc:	edd3 7a00 	vldr	s15, [r3]
 80022e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022e4:	4b64      	ldr	r3, [pc, #400]	@ (8002478 <NLLS+0x1220>)
 80022e6:	443b      	add	r3, r7
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022f0:	4b62      	ldr	r3, [pc, #392]	@ (800247c <NLLS+0x1224>)
 80022f2:	443b      	add	r3, r7
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80022fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002468 <NLLS+0x1210>)
 80022fe:	443b      	add	r3, r7
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002308:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800230c:	4b52      	ldr	r3, [pc, #328]	@ (8002458 <NLLS+0x1200>)
 800230e:	443b      	add	r3, r7
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002318:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800231c:	6812      	ldr	r2, [r2, #0]
 800231e:	4413      	add	r3, r2
 8002320:	ed93 6a00 	vldr	s12, [r3]
 8002324:	4b4e      	ldr	r3, [pc, #312]	@ (8002460 <NLLS+0x1208>)
 8002326:	443b      	add	r3, r7
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002330:	4b51      	ldr	r3, [pc, #324]	@ (8002478 <NLLS+0x1220>)
 8002332:	443b      	add	r3, r7
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	ee26 6a27 	vmul.f32	s12, s12, s15
 800233c:	4b4f      	ldr	r3, [pc, #316]	@ (800247c <NLLS+0x1224>)
 800233e:	443b      	add	r3, r7
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002348:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <NLLS+0x1210>)
 800234a:	443b      	add	r3, r7
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002354:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002358:	4b49      	ldr	r3, [pc, #292]	@ (8002480 <NLLS+0x1228>)
 800235a:	443b      	add	r3, r7
 800235c:	ed93 6a00 	vldr	s12, [r3]
 8002360:	4b45      	ldr	r3, [pc, #276]	@ (8002478 <NLLS+0x1220>)
 8002362:	443b      	add	r3, r7
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ee26 6a27 	vmul.f32	s12, s12, s15
 800236c:	4b3d      	ldr	r3, [pc, #244]	@ (8002464 <NLLS+0x120c>)
 800236e:	443b      	add	r3, r7
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002378:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <NLLS+0x1210>)
 800237a:	443b      	add	r3, r7
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002384:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <NLLS+0x1210>)
 8002386:	443b      	add	r3, r7
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002390:	4b3c      	ldr	r3, [pc, #240]	@ (8002484 <NLLS+0x122c>)
 8002392:	443b      	add	r3, r7
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee66 7a27 	vmul.f32	s15, s12, s15
 800239c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80023a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002458 <NLLS+0x1200>)
 80023a2:	443b      	add	r3, r7
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80023ac:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	ed93 6a00 	vldr	s12, [r3]
 80023b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002478 <NLLS+0x1220>)
 80023ba:	443b      	add	r3, r7
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023c4:	4b27      	ldr	r3, [pc, #156]	@ (8002464 <NLLS+0x120c>)
 80023c6:	443b      	add	r3, r7
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023d0:	4b25      	ldr	r3, [pc, #148]	@ (8002468 <NLLS+0x1210>)
 80023d2:	443b      	add	r3, r7
 80023d4:	edd3 7a00 	vldr	s15, [r3]
 80023d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023dc:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <NLLS+0x1210>)
 80023de:	443b      	add	r3, r7
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80023e8:	4b26      	ldr	r3, [pc, #152]	@ (8002484 <NLLS+0x122c>)
 80023ea:	443b      	add	r3, r7
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80023f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023f8:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <NLLS+0x1228>)
 80023fa:	443b      	add	r3, r7
 80023fc:	ed93 6a00 	vldr	s12, [r3]
 8002400:	4b1d      	ldr	r3, [pc, #116]	@ (8002478 <NLLS+0x1220>)
 8002402:	443b      	add	r3, r7
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	ee26 6a27 	vmul.f32	s12, s12, s15
 800240c:	4b15      	ldr	r3, [pc, #84]	@ (8002464 <NLLS+0x120c>)
 800240e:	443b      	add	r3, r7
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002418:	4b14      	ldr	r3, [pc, #80]	@ (800246c <NLLS+0x1214>)
 800241a:	443b      	add	r3, r7
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002424:	4b11      	ldr	r3, [pc, #68]	@ (800246c <NLLS+0x1214>)
 8002426:	443b      	add	r3, r7
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002430:	4b0f      	ldr	r3, [pc, #60]	@ (8002470 <NLLS+0x1218>)
 8002432:	443b      	add	r3, r7
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee26 6a27 	vmul.f32	s12, s12, s15
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <NLLS+0x1218>)
 800243e:	443b      	add	r3, r7
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002448:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <NLLS+0x122c>)
 800244a:	443b      	add	r3, r7
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002454:	e018      	b.n	8002488 <NLLS+0x1230>
 8002456:	bf00      	nop
 8002458:	00016fb0 	.word	0x00016fb0
 800245c:	00016fd0 	.word	0x00016fd0
 8002460:	00016fe0 	.word	0x00016fe0
 8002464:	00016fd8 	.word	0x00016fd8
 8002468:	00016f7c 	.word	0x00016f7c
 800246c:	00016f70 	.word	0x00016f70
 8002470:	00016f78 	.word	0x00016f78
 8002474:	00016fcc 	.word	0x00016fcc
 8002478:	00016fdc 	.word	0x00016fdc
 800247c:	00016f74 	.word	0x00016f74
 8002480:	00016fd4 	.word	0x00016fd4
 8002484:	00016f80 	.word	0x00016f80
 8002488:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800248c:	4bbf      	ldr	r3, [pc, #764]	@ (800278c <NLLS+0x1534>)
 800248e:	443b      	add	r3, r7
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002498:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	ed93 6a00 	vldr	s12, [r3]
 80024a4:	4bba      	ldr	r3, [pc, #744]	@ (8002790 <NLLS+0x1538>)
 80024a6:	443b      	add	r3, r7
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024b0:	4bb8      	ldr	r3, [pc, #736]	@ (8002794 <NLLS+0x153c>)
 80024b2:	443b      	add	r3, r7
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024bc:	4bb6      	ldr	r3, [pc, #728]	@ (8002798 <NLLS+0x1540>)
 80024be:	443b      	add	r3, r7
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024c8:	4bb3      	ldr	r3, [pc, #716]	@ (8002798 <NLLS+0x1540>)
 80024ca:	443b      	add	r3, r7
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024d4:	4bb1      	ldr	r3, [pc, #708]	@ (800279c <NLLS+0x1544>)
 80024d6:	443b      	add	r3, r7
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024e0:	4bae      	ldr	r3, [pc, #696]	@ (800279c <NLLS+0x1544>)
 80024e2:	443b      	add	r3, r7
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80024ec:	4bac      	ldr	r3, [pc, #688]	@ (80027a0 <NLLS+0x1548>)
 80024ee:	443b      	add	r3, r7
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80024f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024fc:	4ba9      	ldr	r3, [pc, #676]	@ (80027a4 <NLLS+0x154c>)
 80024fe:	443b      	add	r3, r7
 8002500:	ed93 6a00 	vldr	s12, [r3]
 8002504:	4ba2      	ldr	r3, [pc, #648]	@ (8002790 <NLLS+0x1538>)
 8002506:	443b      	add	r3, r7
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002510:	4ba0      	ldr	r3, [pc, #640]	@ (8002794 <NLLS+0x153c>)
 8002512:	443b      	add	r3, r7
 8002514:	edd3 7a00 	vldr	s15, [r3]
 8002518:	ee26 6a27 	vmul.f32	s12, s12, s15
 800251c:	4b9e      	ldr	r3, [pc, #632]	@ (8002798 <NLLS+0x1540>)
 800251e:	443b      	add	r3, r7
 8002520:	edd3 7a00 	vldr	s15, [r3]
 8002524:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002528:	4b9f      	ldr	r3, [pc, #636]	@ (80027a8 <NLLS+0x1550>)
 800252a:	443b      	add	r3, r7
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002534:	4b9d      	ldr	r3, [pc, #628]	@ (80027ac <NLLS+0x1554>)
 8002536:	443b      	add	r3, r7
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002540:	4b9b      	ldr	r3, [pc, #620]	@ (80027b0 <NLLS+0x1558>)
 8002542:	443b      	add	r3, r7
 8002544:	edd3 7a00 	vldr	s15, [r3]
 8002548:	ee66 7a27 	vmul.f32	s15, s12, s15
 800254c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002550:	4b8e      	ldr	r3, [pc, #568]	@ (800278c <NLLS+0x1534>)
 8002552:	443b      	add	r3, r7
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800255c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	4413      	add	r3, r2
 8002564:	ed93 6a00 	vldr	s12, [r3]
 8002568:	4b89      	ldr	r3, [pc, #548]	@ (8002790 <NLLS+0x1538>)
 800256a:	443b      	add	r3, r7
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002574:	4b87      	ldr	r3, [pc, #540]	@ (8002794 <NLLS+0x153c>)
 8002576:	443b      	add	r3, r7
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002580:	4b85      	ldr	r3, [pc, #532]	@ (8002798 <NLLS+0x1540>)
 8002582:	443b      	add	r3, r7
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	ee26 6a27 	vmul.f32	s12, s12, s15
 800258c:	4b86      	ldr	r3, [pc, #536]	@ (80027a8 <NLLS+0x1550>)
 800258e:	443b      	add	r3, r7
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002598:	4b84      	ldr	r3, [pc, #528]	@ (80027ac <NLLS+0x1554>)
 800259a:	443b      	add	r3, r7
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80025a4:	4b82      	ldr	r3, [pc, #520]	@ (80027b0 <NLLS+0x1558>)
 80025a6:	443b      	add	r3, r7
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	ee66 7a27 	vmul.f32	s15, s12, s15
 80025b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b8:	eef1 6a67 	vneg.f32	s13, s15
 80025bc:	4b74      	ldr	r3, [pc, #464]	@ (8002790 <NLLS+0x1538>)
 80025be:	443b      	add	r3, r7
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80025c8:	4b71      	ldr	r3, [pc, #452]	@ (8002790 <NLLS+0x1538>)
 80025ca:	443b      	add	r3, r7
 80025cc:	edd3 7a00 	vldr	s15, [r3]
 80025d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d4:	4b77      	ldr	r3, [pc, #476]	@ (80027b4 <NLLS+0x155c>)
 80025d6:	443b      	add	r3, r7
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002794 <NLLS+0x153c>)
 80025e2:	443b      	add	r3, r7
 80025e4:	edd3 7a00 	vldr	s15, [r3]
 80025e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002798 <NLLS+0x1540>)
 80025ee:	443b      	add	r3, r7
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f8:	4b67      	ldr	r3, [pc, #412]	@ (8002798 <NLLS+0x1540>)
 80025fa:	443b      	add	r3, r7
 80025fc:	edd3 7a00 	vldr	s15, [r3]
 8002600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002604:	4b65      	ldr	r3, [pc, #404]	@ (800279c <NLLS+0x1544>)
 8002606:	443b      	add	r3, r7
 8002608:	edd3 7a00 	vldr	s15, [r3]
 800260c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002610:	4b62      	ldr	r3, [pc, #392]	@ (800279c <NLLS+0x1544>)
 8002612:	443b      	add	r3, r7
 8002614:	edd3 7a00 	vldr	s15, [r3]
 8002618:	ee27 7a27 	vmul.f32	s14, s14, s15
 800261c:	4b62      	ldr	r3, [pc, #392]	@ (80027a8 <NLLS+0x1550>)
 800261e:	443b      	add	r3, r7
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002628:	4b5f      	ldr	r3, [pc, #380]	@ (80027a8 <NLLS+0x1550>)
 800262a:	443b      	add	r3, r7
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002638:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 800263c:	443b      	add	r3, r7
 800263e:	461a      	mov	r2, r3
 8002640:	4b52      	ldr	r3, [pc, #328]	@ (800278c <NLLS+0x1534>)
 8002642:	443b      	add	r3, r7
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f203 4357 	addw	r3, r3, #1111	@ 0x457
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	3bf0      	subs	r3, #240	@ 0xf0
 8002650:	edc3 7a00 	vstr	s15, [r3]

            mat_H[2][i] = -(2*(bz - mz[i])*(bz*sx*sy*cos_rho - by*sx*sz*sin_lambda - mz[i]*sx*sy*cos_rho + my[i]*sx*sz*sin_lambda + bx*sy*sz*sin_lambda*sin_rho - mx[i]*sy*sz*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_rho*sin_phi + mx[i]*sy*sz*cos_lambda*cos_rho*sin_phi))/(sx*sy*(sz*sz*sz)*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002654:	4b4d      	ldr	r3, [pc, #308]	@ (800278c <NLLS+0x1534>)
 8002656:	443b      	add	r3, r7
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002660:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	4413      	add	r3, r2
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	4b52      	ldr	r3, [pc, #328]	@ (80027b8 <NLLS+0x1560>)
 800266e:	443b      	add	r3, r7
 8002670:	ed93 7a00 	vldr	s14, [r3]
 8002674:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002678:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800267c:	4b4e      	ldr	r3, [pc, #312]	@ (80027b8 <NLLS+0x1560>)
 800267e:	443b      	add	r3, r7
 8002680:	edd3 6a00 	vldr	s13, [r3]
 8002684:	4b4b      	ldr	r3, [pc, #300]	@ (80027b4 <NLLS+0x155c>)
 8002686:	443b      	add	r3, r7
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002690:	4b3f      	ldr	r3, [pc, #252]	@ (8002790 <NLLS+0x1538>)
 8002692:	443b      	add	r3, r7
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800269c:	4b42      	ldr	r3, [pc, #264]	@ (80027a8 <NLLS+0x1550>)
 800269e:	443b      	add	r3, r7
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026a8:	4b44      	ldr	r3, [pc, #272]	@ (80027bc <NLLS+0x1564>)
 80026aa:	443b      	add	r3, r7
 80026ac:	ed93 6a00 	vldr	s12, [r3]
 80026b0:	4b40      	ldr	r3, [pc, #256]	@ (80027b4 <NLLS+0x155c>)
 80026b2:	443b      	add	r3, r7
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026bc:	4b35      	ldr	r3, [pc, #212]	@ (8002794 <NLLS+0x153c>)
 80026be:	443b      	add	r3, r7
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026c8:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <NLLS+0x1554>)
 80026ca:	443b      	add	r3, r7
 80026cc:	edd3 7a00 	vldr	s15, [r3]
 80026d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80026d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026d8:	4b2c      	ldr	r3, [pc, #176]	@ (800278c <NLLS+0x1534>)
 80026da:	443b      	add	r3, r7
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80026e4:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	ed93 6a00 	vldr	s12, [r3]
 80026f0:	4b30      	ldr	r3, [pc, #192]	@ (80027b4 <NLLS+0x155c>)
 80026f2:	443b      	add	r3, r7
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80026fc:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <NLLS+0x1538>)
 80026fe:	443b      	add	r3, r7
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002708:	4b27      	ldr	r3, [pc, #156]	@ (80027a8 <NLLS+0x1550>)
 800270a:	443b      	add	r3, r7
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002714:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002718:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <NLLS+0x1534>)
 800271a:	443b      	add	r3, r7
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002724:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	4413      	add	r3, r2
 800272c:	ed93 6a00 	vldr	s12, [r3]
 8002730:	4b20      	ldr	r3, [pc, #128]	@ (80027b4 <NLLS+0x155c>)
 8002732:	443b      	add	r3, r7
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	ee26 6a27 	vmul.f32	s12, s12, s15
 800273c:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <NLLS+0x153c>)
 800273e:	443b      	add	r3, r7
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002748:	4b18      	ldr	r3, [pc, #96]	@ (80027ac <NLLS+0x1554>)
 800274a:	443b      	add	r3, r7
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002754:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002758:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <NLLS+0x154c>)
 800275a:	443b      	add	r3, r7
 800275c:	ed93 6a00 	vldr	s12, [r3]
 8002760:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <NLLS+0x1538>)
 8002762:	443b      	add	r3, r7
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	ee26 6a27 	vmul.f32	s12, s12, s15
 800276c:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <NLLS+0x153c>)
 800276e:	443b      	add	r3, r7
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002778:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <NLLS+0x1554>)
 800277a:	443b      	add	r3, r7
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002784:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <NLLS+0x1548>)
 8002786:	443b      	add	r3, r7
 8002788:	e01a      	b.n	80027c0 <NLLS+0x1568>
 800278a:	bf00      	nop
 800278c:	00016fb0 	.word	0x00016fb0
 8002790:	00016fdc 	.word	0x00016fdc
 8002794:	00016fd8 	.word	0x00016fd8
 8002798:	00016f70 	.word	0x00016f70
 800279c:	00016f78 	.word	0x00016f78
 80027a0:	00016f80 	.word	0x00016f80
 80027a4:	00016fd4 	.word	0x00016fd4
 80027a8:	00016f74 	.word	0x00016f74
 80027ac:	00016f7c 	.word	0x00016f7c
 80027b0:	00016f84 	.word	0x00016f84
 80027b4:	00016fe0 	.word	0x00016fe0
 80027b8:	00016fcc 	.word	0x00016fcc
 80027bc:	00016fd0 	.word	0x00016fd0
 80027c0:	edd3 7a00 	vldr	s15, [r3]
 80027c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027cc:	4bc0      	ldr	r3, [pc, #768]	@ (8002ad0 <NLLS+0x1878>)
 80027ce:	443b      	add	r3, r7
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80027d8:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	ed93 6a00 	vldr	s12, [r3]
 80027e4:	4bbb      	ldr	r3, [pc, #748]	@ (8002ad4 <NLLS+0x187c>)
 80027e6:	443b      	add	r3, r7
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027f0:	4bb9      	ldr	r3, [pc, #740]	@ (8002ad8 <NLLS+0x1880>)
 80027f2:	443b      	add	r3, r7
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80027fc:	4bb7      	ldr	r3, [pc, #732]	@ (8002adc <NLLS+0x1884>)
 80027fe:	443b      	add	r3, r7
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002808:	4bb5      	ldr	r3, [pc, #724]	@ (8002ae0 <NLLS+0x1888>)
 800280a:	443b      	add	r3, r7
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002814:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002818:	4bb2      	ldr	r3, [pc, #712]	@ (8002ae4 <NLLS+0x188c>)
 800281a:	443b      	add	r3, r7
 800281c:	ed93 6a00 	vldr	s12, [r3]
 8002820:	4bac      	ldr	r3, [pc, #688]	@ (8002ad4 <NLLS+0x187c>)
 8002822:	443b      	add	r3, r7
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	ee26 6a27 	vmul.f32	s12, s12, s15
 800282c:	4baa      	ldr	r3, [pc, #680]	@ (8002ad8 <NLLS+0x1880>)
 800282e:	443b      	add	r3, r7
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002838:	4bab      	ldr	r3, [pc, #684]	@ (8002ae8 <NLLS+0x1890>)
 800283a:	443b      	add	r3, r7
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002844:	4ba9      	ldr	r3, [pc, #676]	@ (8002aec <NLLS+0x1894>)
 8002846:	443b      	add	r3, r7
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002850:	4ba7      	ldr	r3, [pc, #668]	@ (8002af0 <NLLS+0x1898>)
 8002852:	443b      	add	r3, r7
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	ee66 7a27 	vmul.f32	s15, s12, s15
 800285c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002860:	4b9b      	ldr	r3, [pc, #620]	@ (8002ad0 <NLLS+0x1878>)
 8002862:	443b      	add	r3, r7
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800286c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	4413      	add	r3, r2
 8002874:	ed93 6a00 	vldr	s12, [r3]
 8002878:	4b96      	ldr	r3, [pc, #600]	@ (8002ad4 <NLLS+0x187c>)
 800287a:	443b      	add	r3, r7
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002884:	4b94      	ldr	r3, [pc, #592]	@ (8002ad8 <NLLS+0x1880>)
 8002886:	443b      	add	r3, r7
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002890:	4b95      	ldr	r3, [pc, #596]	@ (8002ae8 <NLLS+0x1890>)
 8002892:	443b      	add	r3, r7
 8002894:	edd3 7a00 	vldr	s15, [r3]
 8002898:	ee26 6a27 	vmul.f32	s12, s12, s15
 800289c:	4b93      	ldr	r3, [pc, #588]	@ (8002aec <NLLS+0x1894>)
 800289e:	443b      	add	r3, r7
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80028a8:	4b91      	ldr	r3, [pc, #580]	@ (8002af0 <NLLS+0x1898>)
 80028aa:	443b      	add	r3, r7
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028bc:	eef1 6a67 	vneg.f32	s13, s15
 80028c0:	4b8c      	ldr	r3, [pc, #560]	@ (8002af4 <NLLS+0x189c>)
 80028c2:	443b      	add	r3, r7
 80028c4:	ed93 7a00 	vldr	s14, [r3]
 80028c8:	4b82      	ldr	r3, [pc, #520]	@ (8002ad4 <NLLS+0x187c>)
 80028ca:	443b      	add	r3, r7
 80028cc:	edd3 7a00 	vldr	s15, [r3]
 80028d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d4:	4b80      	ldr	r3, [pc, #512]	@ (8002ad8 <NLLS+0x1880>)
 80028d6:	443b      	add	r3, r7
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80028e0:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad8 <NLLS+0x1880>)
 80028e2:	443b      	add	r3, r7
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f0:	4b7d      	ldr	r3, [pc, #500]	@ (8002ae8 <NLLS+0x1890>)
 80028f2:	443b      	add	r3, r7
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028fc:	4b7a      	ldr	r3, [pc, #488]	@ (8002ae8 <NLLS+0x1890>)
 80028fe:	443b      	add	r3, r7
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002908:	4b7b      	ldr	r3, [pc, #492]	@ (8002af8 <NLLS+0x18a0>)
 800290a:	443b      	add	r3, r7
 800290c:	edd3 7a00 	vldr	s15, [r3]
 8002910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002914:	4b78      	ldr	r3, [pc, #480]	@ (8002af8 <NLLS+0x18a0>)
 8002916:	443b      	add	r3, r7
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002920:	4b72      	ldr	r3, [pc, #456]	@ (8002aec <NLLS+0x1894>)
 8002922:	443b      	add	r3, r7
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800292c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002930:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8002934:	443b      	add	r3, r7
 8002936:	461a      	mov	r2, r3
 8002938:	4b65      	ldr	r3, [pc, #404]	@ (8002ad0 <NLLS+0x1878>)
 800293a:	443b      	add	r3, r7
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f603 03ae 	addw	r3, r3, #2222	@ 0x8ae
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	3bf0      	subs	r3, #240	@ 0xf0
 8002948:	edc3 7a00 	vstr	s15, [r3]

            mat_H[3][i] = (2*bx - 2*mx[i])/sx*sx - (2*sin_rho*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sx*sy*cos_rho*cos_rho) + (2*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_lambda*2*cos_phi*cos_phi*cos_rho*cos_rho);
 800294c:	4b65      	ldr	r3, [pc, #404]	@ (8002ae4 <NLLS+0x188c>)
 800294e:	443b      	add	r3, r7
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002958:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad0 <NLLS+0x1878>)
 800295a:	443b      	add	r3, r7
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002964:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	4413      	add	r3, r2
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002974:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002978:	4b5e      	ldr	r3, [pc, #376]	@ (8002af4 <NLLS+0x189c>)
 800297a:	443b      	add	r3, r7
 800297c:	edd3 7a00 	vldr	s15, [r3]
 8002980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002984:	4b5b      	ldr	r3, [pc, #364]	@ (8002af4 <NLLS+0x189c>)
 8002986:	443b      	add	r3, r7
 8002988:	edd3 7a00 	vldr	s15, [r3]
 800298c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002990:	4b53      	ldr	r3, [pc, #332]	@ (8002ae0 <NLLS+0x1888>)
 8002992:	443b      	add	r3, r7
 8002994:	edd3 7a00 	vldr	s15, [r3]
 8002998:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800299c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad0 <NLLS+0x1878>)
 800299e:	443b      	add	r3, r7
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80029a8:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	edd3 7a00 	vldr	s15, [r3]
 80029b4:	4b51      	ldr	r3, [pc, #324]	@ (8002afc <NLLS+0x18a4>)
 80029b6:	443b      	add	r3, r7
 80029b8:	ed93 6a00 	vldr	s12, [r3]
 80029bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80029c0:	4b4c      	ldr	r3, [pc, #304]	@ (8002af4 <NLLS+0x189c>)
 80029c2:	443b      	add	r3, r7
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80029cc:	4b41      	ldr	r3, [pc, #260]	@ (8002ad4 <NLLS+0x187c>)
 80029ce:	443b      	add	r3, r7
 80029d0:	edd3 5a00 	vldr	s11, [r3]
 80029d4:	4b42      	ldr	r3, [pc, #264]	@ (8002ae0 <NLLS+0x1888>)
 80029d6:	443b      	add	r3, r7
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80029e0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad0 <NLLS+0x1878>)
 80029e2:	443b      	add	r3, r7
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80029ec:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	edd3 7a00 	vldr	s15, [r3]
 80029f8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae4 <NLLS+0x188c>)
 80029fa:	443b      	add	r3, r7
 80029fc:	ed93 5a00 	vldr	s10, [r3]
 8002a00:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002a04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002a08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002a0c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002a10:	4b38      	ldr	r3, [pc, #224]	@ (8002af4 <NLLS+0x189c>)
 8002a12:	443b      	add	r3, r7
 8002a14:	edd3 7a00 	vldr	s15, [r3]
 8002a18:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad4 <NLLS+0x187c>)
 8002a1e:	443b      	add	r3, r7
 8002a20:	edd3 7a00 	vldr	s15, [r3]
 8002a24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a28:	4b30      	ldr	r3, [pc, #192]	@ (8002aec <NLLS+0x1894>)
 8002a2a:	443b      	add	r3, r7
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a34:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <NLLS+0x1894>)
 8002a36:	443b      	add	r3, r7
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a40:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002a44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a48:	4b24      	ldr	r3, [pc, #144]	@ (8002adc <NLLS+0x1884>)
 8002a4a:	443b      	add	r3, r7
 8002a4c:	edd3 6a00 	vldr	s13, [r3]
 8002a50:	4b23      	ldr	r3, [pc, #140]	@ (8002ae0 <NLLS+0x1888>)
 8002a52:	443b      	add	r3, r7
 8002a54:	edd3 7a00 	vldr	s15, [r3]
 8002a58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a5c:	4b22      	ldr	r3, [pc, #136]	@ (8002ae8 <NLLS+0x1890>)
 8002a5e:	443b      	add	r3, r7
 8002a60:	ed93 6a00 	vldr	s12, [r3]
 8002a64:	4b21      	ldr	r3, [pc, #132]	@ (8002aec <NLLS+0x1894>)
 8002a66:	443b      	add	r3, r7
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a70:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <NLLS+0x1898>)
 8002a72:	443b      	add	r3, r7
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a7c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a80:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <NLLS+0x187c>)
 8002a86:	443b      	add	r3, r7
 8002a88:	ed93 6a00 	vldr	s12, [r3]
 8002a8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <NLLS+0x1880>)
 8002a8e:	443b      	add	r3, r7
 8002a90:	edd3 7a00 	vldr	s15, [r3]
 8002a94:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002a98:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <NLLS+0x1884>)
 8002a9a:	443b      	add	r3, r7
 8002a9c:	edd3 5a00 	vldr	s11, [r3]
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <NLLS+0x1888>)
 8002aa2:	443b      	add	r3, r7
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002aac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <NLLS+0x1890>)
 8002aae:	443b      	add	r3, r7
 8002ab0:	ed93 5a00 	vldr	s10, [r3]
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <NLLS+0x1894>)
 8002ab6:	443b      	add	r3, r7
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee25 5a27 	vmul.f32	s10, s10, s15
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <NLLS+0x1898>)
 8002ac2:	443b      	add	r3, r7
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002acc:	e018      	b.n	8002b00 <NLLS+0x18a8>
 8002ace:	bf00      	nop
 8002ad0:	00016fb0 	.word	0x00016fb0
 8002ad4:	00016fdc 	.word	0x00016fdc
 8002ad8:	00016fd8 	.word	0x00016fd8
 8002adc:	00016f7c 	.word	0x00016f7c
 8002ae0:	00016f80 	.word	0x00016f80
 8002ae4:	00016fd4 	.word	0x00016fd4
 8002ae8:	00016f70 	.word	0x00016f70
 8002aec:	00016f74 	.word	0x00016f74
 8002af0:	00016f84 	.word	0x00016f84
 8002af4:	00016fe0 	.word	0x00016fe0
 8002af8:	00016f78 	.word	0x00016f78
 8002afc:	00016fd0 	.word	0x00016fd0
 8002b00:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002b04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b08:	4bbf      	ldr	r3, [pc, #764]	@ (8002e08 <NLLS+0x1bb0>)
 8002b0a:	443b      	add	r3, r7
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002b14:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	edd3 7a00 	vldr	s15, [r3]
 8002b20:	4bba      	ldr	r3, [pc, #744]	@ (8002e0c <NLLS+0x1bb4>)
 8002b22:	443b      	add	r3, r7
 8002b24:	edd3 5a00 	vldr	s11, [r3]
 8002b28:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002b2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002b30:	4bb7      	ldr	r3, [pc, #732]	@ (8002e10 <NLLS+0x1bb8>)
 8002b32:	443b      	add	r3, r7
 8002b34:	edd3 5a00 	vldr	s11, [r3]
 8002b38:	4bb6      	ldr	r3, [pc, #728]	@ (8002e14 <NLLS+0x1bbc>)
 8002b3a:	443b      	add	r3, r7
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002b44:	4bb4      	ldr	r3, [pc, #720]	@ (8002e18 <NLLS+0x1bc0>)
 8002b46:	443b      	add	r3, r7
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002b50:	4bad      	ldr	r3, [pc, #692]	@ (8002e08 <NLLS+0x1bb0>)
 8002b52:	443b      	add	r3, r7
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002b5c:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	4bac      	ldr	r3, [pc, #688]	@ (8002e1c <NLLS+0x1bc4>)
 8002b6a:	443b      	add	r3, r7
 8002b6c:	ed93 5a00 	vldr	s10, [r3]
 8002b70:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002b74:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002b78:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b7c:	4ba4      	ldr	r3, [pc, #656]	@ (8002e10 <NLLS+0x1bb8>)
 8002b7e:	443b      	add	r3, r7
 8002b80:	edd3 5a00 	vldr	s11, [r3]
 8002b84:	4ba6      	ldr	r3, [pc, #664]	@ (8002e20 <NLLS+0x1bc8>)
 8002b86:	443b      	add	r3, r7
 8002b88:	edd3 7a00 	vldr	s15, [r3]
 8002b8c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002b90:	4ba4      	ldr	r3, [pc, #656]	@ (8002e24 <NLLS+0x1bcc>)
 8002b92:	443b      	add	r3, r7
 8002b94:	edd3 7a00 	vldr	s15, [r3]
 8002b98:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002b9c:	4b9a      	ldr	r3, [pc, #616]	@ (8002e08 <NLLS+0x1bb0>)
 8002b9e:	443b      	add	r3, r7
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002ba8:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	4b9c      	ldr	r3, [pc, #624]	@ (8002e28 <NLLS+0x1bd0>)
 8002bb6:	443b      	add	r3, r7
 8002bb8:	ed93 5a00 	vldr	s10, [r3]
 8002bbc:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002bc0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002bc4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002bc8:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002bcc:	4b90      	ldr	r3, [pc, #576]	@ (8002e10 <NLLS+0x1bb8>)
 8002bce:	443b      	add	r3, r7
 8002bd0:	edd3 7a00 	vldr	s15, [r3]
 8002bd4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002bd8:	4b8e      	ldr	r3, [pc, #568]	@ (8002e14 <NLLS+0x1bbc>)
 8002bda:	443b      	add	r3, r7
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002be4:	4b8e      	ldr	r3, [pc, #568]	@ (8002e20 <NLLS+0x1bc8>)
 8002be6:	443b      	add	r3, r7
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bf0:	4b8e      	ldr	r3, [pc, #568]	@ (8002e2c <NLLS+0x1bd4>)
 8002bf2:	443b      	add	r3, r7
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bfc:	4b8b      	ldr	r3, [pc, #556]	@ (8002e2c <NLLS+0x1bd4>)
 8002bfe:	443b      	add	r3, r7
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c08:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c0c:	4b88      	ldr	r3, [pc, #544]	@ (8002e30 <NLLS+0x1bd8>)
 8002c0e:	443b      	add	r3, r7
 8002c10:	edd3 7a00 	vldr	s15, [r3]
 8002c14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c18:	4b85      	ldr	r3, [pc, #532]	@ (8002e30 <NLLS+0x1bd8>)
 8002c1a:	443b      	add	r3, r7
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c24:	4b7c      	ldr	r3, [pc, #496]	@ (8002e18 <NLLS+0x1bc0>)
 8002c26:	443b      	add	r3, r7
 8002c28:	edd3 7a00 	vldr	s15, [r3]
 8002c2c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c30:	4b79      	ldr	r3, [pc, #484]	@ (8002e18 <NLLS+0x1bc0>)
 8002c32:	443b      	add	r3, r7
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c3c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c44:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8002c48:	443b      	add	r3, r7
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b6e      	ldr	r3, [pc, #440]	@ (8002e08 <NLLS+0x1bb0>)
 8002c4e:	443b      	add	r3, r7
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f603 5305 	addw	r3, r3, #3333	@ 0xd05
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	3bf0      	subs	r3, #240	@ 0xf0
 8002c5c:	edc3 7a00 	vstr	s15, [r3]

            mat_H[4][i] = (2*(sx*(by - my[i]) - sy*sin_rho*(bx - mx[i])))/(sx*sy*sy*cos_rho*cos_rho) - (2*sin_lambda*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8002c60:	4b69      	ldr	r3, [pc, #420]	@ (8002e08 <NLLS+0x1bb0>)
 8002c62:	443b      	add	r3, r7
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002c6c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	4b6b      	ldr	r3, [pc, #428]	@ (8002e28 <NLLS+0x1bd0>)
 8002c7a:	443b      	add	r3, r7
 8002c7c:	ed93 7a00 	vldr	s14, [r3]
 8002c80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c84:	4b62      	ldr	r3, [pc, #392]	@ (8002e10 <NLLS+0x1bb8>)
 8002c86:	443b      	add	r3, r7
 8002c88:	edd3 7a00 	vldr	s15, [r3]
 8002c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c90:	4b60      	ldr	r3, [pc, #384]	@ (8002e14 <NLLS+0x1bbc>)
 8002c92:	443b      	add	r3, r7
 8002c94:	edd3 6a00 	vldr	s13, [r3]
 8002c98:	4b66      	ldr	r3, [pc, #408]	@ (8002e34 <NLLS+0x1bdc>)
 8002c9a:	443b      	add	r3, r7
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ca4:	4b58      	ldr	r3, [pc, #352]	@ (8002e08 <NLLS+0x1bb0>)
 8002ca6:	443b      	add	r3, r7
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002cb0:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	4b53      	ldr	r3, [pc, #332]	@ (8002e0c <NLLS+0x1bb4>)
 8002cbe:	443b      	add	r3, r7
 8002cc0:	ed93 6a00 	vldr	s12, [r3]
 8002cc4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8002e10 <NLLS+0x1bb8>)
 8002cd6:	443b      	add	r3, r7
 8002cd8:	ed93 7a00 	vldr	s14, [r3]
 8002cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8002e14 <NLLS+0x1bbc>)
 8002cde:	443b      	add	r3, r7
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8002e14 <NLLS+0x1bbc>)
 8002cea:	443b      	add	r3, r7
 8002cec:	edd3 7a00 	vldr	s15, [r3]
 8002cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf4:	4b48      	ldr	r3, [pc, #288]	@ (8002e18 <NLLS+0x1bc0>)
 8002cf6:	443b      	add	r3, r7
 8002cf8:	edd3 7a00 	vldr	s15, [r3]
 8002cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d00:	4b45      	ldr	r3, [pc, #276]	@ (8002e18 <NLLS+0x1bc0>)
 8002d02:	443b      	add	r3, r7
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d10:	4b44      	ldr	r3, [pc, #272]	@ (8002e24 <NLLS+0x1bcc>)
 8002d12:	443b      	add	r3, r7
 8002d14:	edd3 7a00 	vldr	s15, [r3]
 8002d18:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002e14 <NLLS+0x1bbc>)
 8002d1e:	443b      	add	r3, r7
 8002d20:	ed93 6a00 	vldr	s12, [r3]
 8002d24:	4b3e      	ldr	r3, [pc, #248]	@ (8002e20 <NLLS+0x1bc8>)
 8002d26:	443b      	add	r3, r7
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d30:	4b3c      	ldr	r3, [pc, #240]	@ (8002e24 <NLLS+0x1bcc>)
 8002d32:	443b      	add	r3, r7
 8002d34:	edd3 5a00 	vldr	s11, [r3]
 8002d38:	4b3e      	ldr	r3, [pc, #248]	@ (8002e34 <NLLS+0x1bdc>)
 8002d3a:	443b      	add	r3, r7
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
 8002d40:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002d44:	4b39      	ldr	r3, [pc, #228]	@ (8002e2c <NLLS+0x1bd4>)
 8002d46:	443b      	add	r3, r7
 8002d48:	ed93 5a00 	vldr	s10, [r3]
 8002d4c:	4b32      	ldr	r3, [pc, #200]	@ (8002e18 <NLLS+0x1bc0>)
 8002d4e:	443b      	add	r3, r7
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	ee25 5a27 	vmul.f32	s10, s10, s15
 8002d58:	4b37      	ldr	r3, [pc, #220]	@ (8002e38 <NLLS+0x1be0>)
 8002d5a:	443b      	add	r3, r7
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	ee65 7a27 	vmul.f32	s15, s10, s15
 8002d64:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002d68:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d6c:	4b26      	ldr	r3, [pc, #152]	@ (8002e08 <NLLS+0x1bb0>)
 8002d6e:	443b      	add	r3, r7
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002d78:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	edd3 7a00 	vldr	s15, [r3]
 8002d84:	4b21      	ldr	r3, [pc, #132]	@ (8002e0c <NLLS+0x1bb4>)
 8002d86:	443b      	add	r3, r7
 8002d88:	edd3 5a00 	vldr	s11, [r3]
 8002d8c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002d90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002d94:	4b1e      	ldr	r3, [pc, #120]	@ (8002e10 <NLLS+0x1bb8>)
 8002d96:	443b      	add	r3, r7
 8002d98:	edd3 5a00 	vldr	s11, [r3]
 8002d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e14 <NLLS+0x1bbc>)
 8002d9e:	443b      	add	r3, r7
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002da8:	4b1b      	ldr	r3, [pc, #108]	@ (8002e18 <NLLS+0x1bc0>)
 8002daa:	443b      	add	r3, r7
 8002dac:	edd3 7a00 	vldr	s15, [r3]
 8002db0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002db4:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <NLLS+0x1bb0>)
 8002db6:	443b      	add	r3, r7
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002dc0:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	edd3 7a00 	vldr	s15, [r3]
 8002dcc:	4b13      	ldr	r3, [pc, #76]	@ (8002e1c <NLLS+0x1bc4>)
 8002dce:	443b      	add	r3, r7
 8002dd0:	ed93 5a00 	vldr	s10, [r3]
 8002dd4:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002dd8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ddc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <NLLS+0x1bb8>)
 8002de2:	443b      	add	r3, r7
 8002de4:	edd3 5a00 	vldr	s11, [r3]
 8002de8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <NLLS+0x1bc8>)
 8002dea:	443b      	add	r3, r7
 8002dec:	edd3 7a00 	vldr	s15, [r3]
 8002df0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <NLLS+0x1bcc>)
 8002df6:	443b      	add	r3, r7
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002e00:	4b01      	ldr	r3, [pc, #4]	@ (8002e08 <NLLS+0x1bb0>)
 8002e02:	443b      	add	r3, r7
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	e019      	b.n	8002e3c <NLLS+0x1be4>
 8002e08:	00016fb0 	.word	0x00016fb0
 8002e0c:	00016fd4 	.word	0x00016fd4
 8002e10:	00016fe0 	.word	0x00016fe0
 8002e14:	00016fdc 	.word	0x00016fdc
 8002e18:	00016f74 	.word	0x00016f74
 8002e1c:	00016fcc 	.word	0x00016fcc
 8002e20:	00016fd8 	.word	0x00016fd8
 8002e24:	00016f7c 	.word	0x00016f7c
 8002e28:	00016fd0 	.word	0x00016fd0
 8002e2c:	00016f70 	.word	0x00016f70
 8002e30:	00016f78 	.word	0x00016f78
 8002e34:	00016f80 	.word	0x00016f80
 8002e38:	00016f84 	.word	0x00016f84
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002e42:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	4413      	add	r3, r2
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	4bc0      	ldr	r3, [pc, #768]	@ (8003150 <NLLS+0x1ef8>)
 8002e50:	443b      	add	r3, r7
 8002e52:	ed93 5a00 	vldr	s10, [r3]
 8002e56:	ee75 7a67 	vsub.f32	s15, s10, s15
 8002e5a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002e5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002e62:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002e66:	4bbb      	ldr	r3, [pc, #748]	@ (8003154 <NLLS+0x1efc>)
 8002e68:	443b      	add	r3, r7
 8002e6a:	edd3 6a00 	vldr	s13, [r3]
 8002e6e:	4bba      	ldr	r3, [pc, #744]	@ (8003158 <NLLS+0x1f00>)
 8002e70:	443b      	add	r3, r7
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e7a:	4bb7      	ldr	r3, [pc, #732]	@ (8003158 <NLLS+0x1f00>)
 8002e7c:	443b      	add	r3, r7
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e86:	4bb5      	ldr	r3, [pc, #724]	@ (800315c <NLLS+0x1f04>)
 8002e88:	443b      	add	r3, r7
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e92:	4bb3      	ldr	r3, [pc, #716]	@ (8003160 <NLLS+0x1f08>)
 8002e94:	443b      	add	r3, r7
 8002e96:	edd3 7a00 	vldr	s15, [r3]
 8002e9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e9e:	4bb0      	ldr	r3, [pc, #704]	@ (8003160 <NLLS+0x1f08>)
 8002ea0:	443b      	add	r3, r7
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eaa:	4bae      	ldr	r3, [pc, #696]	@ (8003164 <NLLS+0x1f0c>)
 8002eac:	443b      	add	r3, r7
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eb6:	4bab      	ldr	r3, [pc, #684]	@ (8003164 <NLLS+0x1f0c>)
 8002eb8:	443b      	add	r3, r7
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ec2:	4ba9      	ldr	r3, [pc, #676]	@ (8003168 <NLLS+0x1f10>)
 8002ec4:	443b      	add	r3, r7
 8002ec6:	edd3 7a00 	vldr	s15, [r3]
 8002eca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ece:	4ba6      	ldr	r3, [pc, #664]	@ (8003168 <NLLS+0x1f10>)
 8002ed0:	443b      	add	r3, r7
 8002ed2:	edd3 7a00 	vldr	s15, [r3]
 8002ed6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002eda:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee2:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8002ee6:	443b      	add	r3, r7
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4ba0      	ldr	r3, [pc, #640]	@ (800316c <NLLS+0x1f14>)
 8002eec:	443b      	add	r3, r7
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	f241 135c 	movw	r3, #4444	@ 0x115c
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3bf0      	subs	r3, #240	@ 0xf0
 8002efc:	edc3 7a00 	vstr	s15, [r3]

            mat_H[5][i] = (2*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho);
 8002f00:	4b95      	ldr	r3, [pc, #596]	@ (8003158 <NLLS+0x1f00>)
 8002f02:	443b      	add	r3, r7
 8002f04:	ed93 7a00 	vldr	s14, [r3]
 8002f08:	4b94      	ldr	r3, [pc, #592]	@ (800315c <NLLS+0x1f04>)
 8002f0a:	443b      	add	r3, r7
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f14:	4b96      	ldr	r3, [pc, #600]	@ (8003170 <NLLS+0x1f18>)
 8002f16:	443b      	add	r3, r7
 8002f18:	edd3 6a00 	vldr	s13, [r3]
 8002f1c:	4b95      	ldr	r3, [pc, #596]	@ (8003174 <NLLS+0x1f1c>)
 8002f1e:	443b      	add	r3, r7
 8002f20:	edd3 7a00 	vldr	s15, [r3]
 8002f24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f28:	4b8d      	ldr	r3, [pc, #564]	@ (8003160 <NLLS+0x1f08>)
 8002f2a:	443b      	add	r3, r7
 8002f2c:	ed93 6a00 	vldr	s12, [r3]
 8002f30:	4b8d      	ldr	r3, [pc, #564]	@ (8003168 <NLLS+0x1f10>)
 8002f32:	443b      	add	r3, r7
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002f3c:	4b8e      	ldr	r3, [pc, #568]	@ (8003178 <NLLS+0x1f20>)
 8002f3e:	443b      	add	r3, r7
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002f48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f50:	4b86      	ldr	r3, [pc, #536]	@ (800316c <NLLS+0x1f14>)
 8002f52:	443b      	add	r3, r7
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002f5c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	4b84      	ldr	r3, [pc, #528]	@ (800317c <NLLS+0x1f24>)
 8002f6a:	443b      	add	r3, r7
 8002f6c:	edd3 6a00 	vldr	s13, [r3]
 8002f70:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f78:	4b76      	ldr	r3, [pc, #472]	@ (8003154 <NLLS+0x1efc>)
 8002f7a:	443b      	add	r3, r7
 8002f7c:	edd3 6a00 	vldr	s13, [r3]
 8002f80:	4b75      	ldr	r3, [pc, #468]	@ (8003158 <NLLS+0x1f00>)
 8002f82:	443b      	add	r3, r7
 8002f84:	edd3 7a00 	vldr	s15, [r3]
 8002f88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f8c:	4b76      	ldr	r3, [pc, #472]	@ (8003168 <NLLS+0x1f10>)
 8002f8e:	443b      	add	r3, r7
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f98:	4b74      	ldr	r3, [pc, #464]	@ (800316c <NLLS+0x1f14>)
 8002f9a:	443b      	add	r3, r7
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002fa4:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	4b73      	ldr	r3, [pc, #460]	@ (8003180 <NLLS+0x1f28>)
 8002fb2:	443b      	add	r3, r7
 8002fb4:	ed93 6a00 	vldr	s12, [r3]
 8002fb8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fc4:	4b63      	ldr	r3, [pc, #396]	@ (8003154 <NLLS+0x1efc>)
 8002fc6:	443b      	add	r3, r7
 8002fc8:	edd3 6a00 	vldr	s13, [r3]
 8002fcc:	4b63      	ldr	r3, [pc, #396]	@ (800315c <NLLS+0x1f04>)
 8002fce:	443b      	add	r3, r7
 8002fd0:	edd3 7a00 	vldr	s15, [r3]
 8002fd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fd8:	4b65      	ldr	r3, [pc, #404]	@ (8003170 <NLLS+0x1f18>)
 8002fda:	443b      	add	r3, r7
 8002fdc:	edd3 7a00 	vldr	s15, [r3]
 8002fe0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002fe4:	4b61      	ldr	r3, [pc, #388]	@ (800316c <NLLS+0x1f14>)
 8002fe6:	443b      	add	r3, r7
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8002ff0:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	4b54      	ldr	r3, [pc, #336]	@ (8003150 <NLLS+0x1ef8>)
 8002ffe:	443b      	add	r3, r7
 8003000:	ed93 6a00 	vldr	s12, [r3]
 8003004:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800300c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003010:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003014:	4b4f      	ldr	r3, [pc, #316]	@ (8003154 <NLLS+0x1efc>)
 8003016:	443b      	add	r3, r7
 8003018:	ed93 7a00 	vldr	s14, [r3]
 800301c:	4b4e      	ldr	r3, [pc, #312]	@ (8003158 <NLLS+0x1f00>)
 800301e:	443b      	add	r3, r7
 8003020:	edd3 7a00 	vldr	s15, [r3]
 8003024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003028:	4b4c      	ldr	r3, [pc, #304]	@ (800315c <NLLS+0x1f04>)
 800302a:	443b      	add	r3, r7
 800302c:	edd3 7a00 	vldr	s15, [r3]
 8003030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003034:	4b49      	ldr	r3, [pc, #292]	@ (800315c <NLLS+0x1f04>)
 8003036:	443b      	add	r3, r7
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003040:	4b47      	ldr	r3, [pc, #284]	@ (8003160 <NLLS+0x1f08>)
 8003042:	443b      	add	r3, r7
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304c:	4b44      	ldr	r3, [pc, #272]	@ (8003160 <NLLS+0x1f08>)
 800304e:	443b      	add	r3, r7
 8003050:	edd3 7a00 	vldr	s15, [r3]
 8003054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003058:	4b42      	ldr	r3, [pc, #264]	@ (8003164 <NLLS+0x1f0c>)
 800305a:	443b      	add	r3, r7
 800305c:	edd3 7a00 	vldr	s15, [r3]
 8003060:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003064:	4b3f      	ldr	r3, [pc, #252]	@ (8003164 <NLLS+0x1f0c>)
 8003066:	443b      	add	r3, r7
 8003068:	edd3 7a00 	vldr	s15, [r3]
 800306c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003070:	4b3d      	ldr	r3, [pc, #244]	@ (8003168 <NLLS+0x1f10>)
 8003072:	443b      	add	r3, r7
 8003074:	edd3 7a00 	vldr	s15, [r3]
 8003078:	ee27 7a27 	vmul.f32	s14, s14, s15
 800307c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003080:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003084:	443b      	add	r3, r7
 8003086:	4619      	mov	r1, r3
 8003088:	4b38      	ldr	r3, [pc, #224]	@ (800316c <NLLS+0x1f14>)
 800308a:	443b      	add	r3, r7
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	3bf0      	subs	r3, #240	@ 0xf0
 800309a:	edc3 7a00 	vstr	s15, [r3]

            mat_H[6][i] = -(2*(bx*sy - mx[i]*sy - by*sx*sin_rho + my[i]*sx*sin_rho)*(by*sx*sz*sin_lambda*sin_lambda - my[i]*sx*sz*sin_lambda*sin_lambda + by*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - my[i]*sx*sz*cos_lambda*cos_lambda*cos_phi*cos_phi - bz*sx*sy*cos_rho*sin_lambda + mz[i]*sx*sy*cos_rho*sin_lambda - bx*sy*sz*sin_lambda*sin_lambda*sin_rho + mx[i]*sy*sz*sin_lambda*sin_lambda*sin_rho - bx*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + mx[i]*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*sin_rho + bx*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi - mx[i]*sy*sz*cos_lambda*cos_rho*sin_lambda*sin_phi))/(sx*sx*sy*sy*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*(cos_rho*cos_rho*cos_rho));
 800309e:	4b37      	ldr	r3, [pc, #220]	@ (800317c <NLLS+0x1f24>)
 80030a0:	443b      	add	r3, r7
 80030a2:	ed93 7a00 	vldr	s14, [r3]
 80030a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003158 <NLLS+0x1f00>)
 80030a8:	443b      	add	r3, r7
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b2:	4b2e      	ldr	r3, [pc, #184]	@ (800316c <NLLS+0x1f14>)
 80030b4:	443b      	add	r3, r7
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80030be:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	edd3 6a00 	vldr	s13, [r3]
 80030ca:	4b23      	ldr	r3, [pc, #140]	@ (8003158 <NLLS+0x1f00>)
 80030cc:	443b      	add	r3, r7
 80030ce:	edd3 7a00 	vldr	s15, [r3]
 80030d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030da:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <NLLS+0x1ef8>)
 80030dc:	443b      	add	r3, r7
 80030de:	edd3 6a00 	vldr	s13, [r3]
 80030e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003154 <NLLS+0x1efc>)
 80030e4:	443b      	add	r3, r7
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030ee:	4b21      	ldr	r3, [pc, #132]	@ (8003174 <NLLS+0x1f1c>)
 80030f0:	443b      	add	r3, r7
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030fe:	4b1b      	ldr	r3, [pc, #108]	@ (800316c <NLLS+0x1f14>)
 8003100:	443b      	add	r3, r7
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800310a:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	4413      	add	r3, r2
 8003112:	edd3 6a00 	vldr	s13, [r3]
 8003116:	4b0f      	ldr	r3, [pc, #60]	@ (8003154 <NLLS+0x1efc>)
 8003118:	443b      	add	r3, r7
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003122:	4b14      	ldr	r3, [pc, #80]	@ (8003174 <NLLS+0x1f1c>)
 8003124:	443b      	add	r3, r7
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800312e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003132:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <NLLS+0x1ef8>)
 8003138:	443b      	add	r3, r7
 800313a:	edd3 6a00 	vldr	s13, [r3]
 800313e:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <NLLS+0x1efc>)
 8003140:	443b      	add	r3, r7
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800314a:	4b04      	ldr	r3, [pc, #16]	@ (800315c <NLLS+0x1f04>)
 800314c:	443b      	add	r3, r7
 800314e:	e019      	b.n	8003184 <NLLS+0x1f2c>
 8003150:	00016fd0 	.word	0x00016fd0
 8003154:	00016fe0 	.word	0x00016fe0
 8003158:	00016fdc 	.word	0x00016fdc
 800315c:	00016fd8 	.word	0x00016fd8
 8003160:	00016f70 	.word	0x00016f70
 8003164:	00016f78 	.word	0x00016f78
 8003168:	00016f74 	.word	0x00016f74
 800316c:	00016fb0 	.word	0x00016fb0
 8003170:	00016f7c 	.word	0x00016f7c
 8003174:	00016f80 	.word	0x00016f80
 8003178:	00016f84 	.word	0x00016f84
 800317c:	00016fd4 	.word	0x00016fd4
 8003180:	00016fcc 	.word	0x00016fcc
 8003184:	edd3 7a00 	vldr	s15, [r3]
 8003188:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800318c:	4bbe      	ldr	r3, [pc, #760]	@ (8003488 <NLLS+0x2230>)
 800318e:	443b      	add	r3, r7
 8003190:	edd3 7a00 	vldr	s15, [r3]
 8003194:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003198:	4bbb      	ldr	r3, [pc, #748]	@ (8003488 <NLLS+0x2230>)
 800319a:	443b      	add	r3, r7
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031a4:	4bb9      	ldr	r3, [pc, #740]	@ (800348c <NLLS+0x2234>)
 80031a6:	443b      	add	r3, r7
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80031b0:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	ed93 6a00 	vldr	s12, [r3]
 80031bc:	4bb4      	ldr	r3, [pc, #720]	@ (8003490 <NLLS+0x2238>)
 80031be:	443b      	add	r3, r7
 80031c0:	edd3 7a00 	vldr	s15, [r3]
 80031c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031c8:	4bb2      	ldr	r3, [pc, #712]	@ (8003494 <NLLS+0x223c>)
 80031ca:	443b      	add	r3, r7
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031d4:	4bac      	ldr	r3, [pc, #688]	@ (8003488 <NLLS+0x2230>)
 80031d6:	443b      	add	r3, r7
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80031e0:	4ba9      	ldr	r3, [pc, #676]	@ (8003488 <NLLS+0x2230>)
 80031e2:	443b      	add	r3, r7
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80031ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80031f0:	4ba9      	ldr	r3, [pc, #676]	@ (8003498 <NLLS+0x2240>)
 80031f2:	443b      	add	r3, r7
 80031f4:	ed93 6a00 	vldr	s12, [r3]
 80031f8:	4ba5      	ldr	r3, [pc, #660]	@ (8003490 <NLLS+0x2238>)
 80031fa:	443b      	add	r3, r7
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003204:	4ba3      	ldr	r3, [pc, #652]	@ (8003494 <NLLS+0x223c>)
 8003206:	443b      	add	r3, r7
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003210:	4ba2      	ldr	r3, [pc, #648]	@ (800349c <NLLS+0x2244>)
 8003212:	443b      	add	r3, r7
 8003214:	edd3 7a00 	vldr	s15, [r3]
 8003218:	ee26 6a27 	vmul.f32	s12, s12, s15
 800321c:	4b9f      	ldr	r3, [pc, #636]	@ (800349c <NLLS+0x2244>)
 800321e:	443b      	add	r3, r7
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003228:	4b9d      	ldr	r3, [pc, #628]	@ (80034a0 <NLLS+0x2248>)
 800322a:	443b      	add	r3, r7
 800322c:	edd3 7a00 	vldr	s15, [r3]
 8003230:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003234:	4b9a      	ldr	r3, [pc, #616]	@ (80034a0 <NLLS+0x2248>)
 8003236:	443b      	add	r3, r7
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003240:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003244:	4b91      	ldr	r3, [pc, #580]	@ (800348c <NLLS+0x2234>)
 8003246:	443b      	add	r3, r7
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003250:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003254:	6812      	ldr	r2, [r2, #0]
 8003256:	4413      	add	r3, r2
 8003258:	ed93 6a00 	vldr	s12, [r3]
 800325c:	4b8c      	ldr	r3, [pc, #560]	@ (8003490 <NLLS+0x2238>)
 800325e:	443b      	add	r3, r7
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003268:	4b8a      	ldr	r3, [pc, #552]	@ (8003494 <NLLS+0x223c>)
 800326a:	443b      	add	r3, r7
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003274:	4b89      	ldr	r3, [pc, #548]	@ (800349c <NLLS+0x2244>)
 8003276:	443b      	add	r3, r7
 8003278:	edd3 7a00 	vldr	s15, [r3]
 800327c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003280:	4b86      	ldr	r3, [pc, #536]	@ (800349c <NLLS+0x2244>)
 8003282:	443b      	add	r3, r7
 8003284:	edd3 7a00 	vldr	s15, [r3]
 8003288:	ee26 6a27 	vmul.f32	s12, s12, s15
 800328c:	4b84      	ldr	r3, [pc, #528]	@ (80034a0 <NLLS+0x2248>)
 800328e:	443b      	add	r3, r7
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003298:	4b81      	ldr	r3, [pc, #516]	@ (80034a0 <NLLS+0x2248>)
 800329a:	443b      	add	r3, r7
 800329c:	edd3 7a00 	vldr	s15, [r3]
 80032a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032a8:	4b7e      	ldr	r3, [pc, #504]	@ (80034a4 <NLLS+0x224c>)
 80032aa:	443b      	add	r3, r7
 80032ac:	ed93 6a00 	vldr	s12, [r3]
 80032b0:	4b77      	ldr	r3, [pc, #476]	@ (8003490 <NLLS+0x2238>)
 80032b2:	443b      	add	r3, r7
 80032b4:	edd3 7a00 	vldr	s15, [r3]
 80032b8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032bc:	4b7a      	ldr	r3, [pc, #488]	@ (80034a8 <NLLS+0x2250>)
 80032be:	443b      	add	r3, r7
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032c8:	4b78      	ldr	r3, [pc, #480]	@ (80034ac <NLLS+0x2254>)
 80032ca:	443b      	add	r3, r7
 80032cc:	edd3 7a00 	vldr	s15, [r3]
 80032d0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80032d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003488 <NLLS+0x2230>)
 80032d6:	443b      	add	r3, r7
 80032d8:	edd3 7a00 	vldr	s15, [r3]
 80032dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80032e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80032e4:	4b69      	ldr	r3, [pc, #420]	@ (800348c <NLLS+0x2234>)
 80032e6:	443b      	add	r3, r7
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80032f0:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	4413      	add	r3, r2
 80032f8:	ed93 6a00 	vldr	s12, [r3]
 80032fc:	4b64      	ldr	r3, [pc, #400]	@ (8003490 <NLLS+0x2238>)
 80032fe:	443b      	add	r3, r7
 8003300:	edd3 7a00 	vldr	s15, [r3]
 8003304:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003308:	4b67      	ldr	r3, [pc, #412]	@ (80034a8 <NLLS+0x2250>)
 800330a:	443b      	add	r3, r7
 800330c:	edd3 7a00 	vldr	s15, [r3]
 8003310:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003314:	4b65      	ldr	r3, [pc, #404]	@ (80034ac <NLLS+0x2254>)
 8003316:	443b      	add	r3, r7
 8003318:	edd3 7a00 	vldr	s15, [r3]
 800331c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003320:	4b59      	ldr	r3, [pc, #356]	@ (8003488 <NLLS+0x2230>)
 8003322:	443b      	add	r3, r7
 8003324:	edd3 7a00 	vldr	s15, [r3]
 8003328:	ee66 7a27 	vmul.f32	s15, s12, s15
 800332c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003330:	4b5f      	ldr	r3, [pc, #380]	@ (80034b0 <NLLS+0x2258>)
 8003332:	443b      	add	r3, r7
 8003334:	ed93 6a00 	vldr	s12, [r3]
 8003338:	4b5b      	ldr	r3, [pc, #364]	@ (80034a8 <NLLS+0x2250>)
 800333a:	443b      	add	r3, r7
 800333c:	edd3 7a00 	vldr	s15, [r3]
 8003340:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003344:	4b53      	ldr	r3, [pc, #332]	@ (8003494 <NLLS+0x223c>)
 8003346:	443b      	add	r3, r7
 8003348:	edd3 7a00 	vldr	s15, [r3]
 800334c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003350:	4b4d      	ldr	r3, [pc, #308]	@ (8003488 <NLLS+0x2230>)
 8003352:	443b      	add	r3, r7
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	ee26 6a27 	vmul.f32	s12, s12, s15
 800335c:	4b4a      	ldr	r3, [pc, #296]	@ (8003488 <NLLS+0x2230>)
 800335e:	443b      	add	r3, r7
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003368:	4b52      	ldr	r3, [pc, #328]	@ (80034b4 <NLLS+0x225c>)
 800336a:	443b      	add	r3, r7
 800336c:	edd3 7a00 	vldr	s15, [r3]
 8003370:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003374:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003378:	4b44      	ldr	r3, [pc, #272]	@ (800348c <NLLS+0x2234>)
 800337a:	443b      	add	r3, r7
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003384:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	4413      	add	r3, r2
 800338c:	ed93 6a00 	vldr	s12, [r3]
 8003390:	4b45      	ldr	r3, [pc, #276]	@ (80034a8 <NLLS+0x2250>)
 8003392:	443b      	add	r3, r7
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	ee26 6a27 	vmul.f32	s12, s12, s15
 800339c:	4b3d      	ldr	r3, [pc, #244]	@ (8003494 <NLLS+0x223c>)
 800339e:	443b      	add	r3, r7
 80033a0:	edd3 7a00 	vldr	s15, [r3]
 80033a4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033a8:	4b37      	ldr	r3, [pc, #220]	@ (8003488 <NLLS+0x2230>)
 80033aa:	443b      	add	r3, r7
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033b4:	4b34      	ldr	r3, [pc, #208]	@ (8003488 <NLLS+0x2230>)
 80033b6:	443b      	add	r3, r7
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033c0:	4b3c      	ldr	r3, [pc, #240]	@ (80034b4 <NLLS+0x225c>)
 80033c2:	443b      	add	r3, r7
 80033c4:	edd3 7a00 	vldr	s15, [r3]
 80033c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80033cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80033d0:	4b37      	ldr	r3, [pc, #220]	@ (80034b0 <NLLS+0x2258>)
 80033d2:	443b      	add	r3, r7
 80033d4:	ed93 6a00 	vldr	s12, [r3]
 80033d8:	4b33      	ldr	r3, [pc, #204]	@ (80034a8 <NLLS+0x2250>)
 80033da:	443b      	add	r3, r7
 80033dc:	edd3 7a00 	vldr	s15, [r3]
 80033e0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003494 <NLLS+0x223c>)
 80033e6:	443b      	add	r3, r7
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033f0:	4b2a      	ldr	r3, [pc, #168]	@ (800349c <NLLS+0x2244>)
 80033f2:	443b      	add	r3, r7
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80033fc:	4b27      	ldr	r3, [pc, #156]	@ (800349c <NLLS+0x2244>)
 80033fe:	443b      	add	r3, r7
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003408:	4b25      	ldr	r3, [pc, #148]	@ (80034a0 <NLLS+0x2248>)
 800340a:	443b      	add	r3, r7
 800340c:	edd3 7a00 	vldr	s15, [r3]
 8003410:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003414:	4b22      	ldr	r3, [pc, #136]	@ (80034a0 <NLLS+0x2248>)
 8003416:	443b      	add	r3, r7
 8003418:	edd3 7a00 	vldr	s15, [r3]
 800341c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003420:	4b24      	ldr	r3, [pc, #144]	@ (80034b4 <NLLS+0x225c>)
 8003422:	443b      	add	r3, r7
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	ee66 7a27 	vmul.f32	s15, s12, s15
 800342c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003430:	4b16      	ldr	r3, [pc, #88]	@ (800348c <NLLS+0x2234>)
 8003432:	443b      	add	r3, r7
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800343c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	4413      	add	r3, r2
 8003444:	ed93 6a00 	vldr	s12, [r3]
 8003448:	4b17      	ldr	r3, [pc, #92]	@ (80034a8 <NLLS+0x2250>)
 800344a:	443b      	add	r3, r7
 800344c:	edd3 7a00 	vldr	s15, [r3]
 8003450:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003454:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <NLLS+0x223c>)
 8003456:	443b      	add	r3, r7
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003460:	4b0e      	ldr	r3, [pc, #56]	@ (800349c <NLLS+0x2244>)
 8003462:	443b      	add	r3, r7
 8003464:	edd3 7a00 	vldr	s15, [r3]
 8003468:	ee26 6a27 	vmul.f32	s12, s12, s15
 800346c:	4b0b      	ldr	r3, [pc, #44]	@ (800349c <NLLS+0x2244>)
 800346e:	443b      	add	r3, r7
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003478:	4b09      	ldr	r3, [pc, #36]	@ (80034a0 <NLLS+0x2248>)
 800347a:	443b      	add	r3, r7
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003484:	e018      	b.n	80034b8 <NLLS+0x2260>
 8003486:	bf00      	nop
 8003488:	00016f7c 	.word	0x00016f7c
 800348c:	00016fb0 	.word	0x00016fb0
 8003490:	00016fe0 	.word	0x00016fe0
 8003494:	00016fd8 	.word	0x00016fd8
 8003498:	00016fd0 	.word	0x00016fd0
 800349c:	00016f70 	.word	0x00016f70
 80034a0:	00016f78 	.word	0x00016f78
 80034a4:	00016fcc 	.word	0x00016fcc
 80034a8:	00016fdc 	.word	0x00016fdc
 80034ac:	00016f74 	.word	0x00016f74
 80034b0:	00016fd4 	.word	0x00016fd4
 80034b4:	00016f80 	.word	0x00016f80
 80034b8:	4bbf      	ldr	r3, [pc, #764]	@ (80037b8 <NLLS+0x2560>)
 80034ba:	443b      	add	r3, r7
 80034bc:	edd3 7a00 	vldr	s15, [r3]
 80034c0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034c4:	4bbd      	ldr	r3, [pc, #756]	@ (80037bc <NLLS+0x2564>)
 80034c6:	443b      	add	r3, r7
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80034d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80034d4:	4bba      	ldr	r3, [pc, #744]	@ (80037c0 <NLLS+0x2568>)
 80034d6:	443b      	add	r3, r7
 80034d8:	ed93 6a00 	vldr	s12, [r3]
 80034dc:	4bb9      	ldr	r3, [pc, #740]	@ (80037c4 <NLLS+0x256c>)
 80034de:	443b      	add	r3, r7
 80034e0:	edd3 7a00 	vldr	s15, [r3]
 80034e4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034e8:	4bb7      	ldr	r3, [pc, #732]	@ (80037c8 <NLLS+0x2570>)
 80034ea:	443b      	add	r3, r7
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80034f4:	4bb5      	ldr	r3, [pc, #724]	@ (80037cc <NLLS+0x2574>)
 80034f6:	443b      	add	r3, r7
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003500:	4bb3      	ldr	r3, [pc, #716]	@ (80037d0 <NLLS+0x2578>)
 8003502:	443b      	add	r3, r7
 8003504:	edd3 7a00 	vldr	s15, [r3]
 8003508:	ee26 6a27 	vmul.f32	s12, s12, s15
 800350c:	4bb1      	ldr	r3, [pc, #708]	@ (80037d4 <NLLS+0x257c>)
 800350e:	443b      	add	r3, r7
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003518:	4baf      	ldr	r3, [pc, #700]	@ (80037d8 <NLLS+0x2580>)
 800351a:	443b      	add	r3, r7
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003524:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003528:	4bac      	ldr	r3, [pc, #688]	@ (80037dc <NLLS+0x2584>)
 800352a:	443b      	add	r3, r7
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003534:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	4413      	add	r3, r2
 800353c:	ed93 6a00 	vldr	s12, [r3]
 8003540:	4ba0      	ldr	r3, [pc, #640]	@ (80037c4 <NLLS+0x256c>)
 8003542:	443b      	add	r3, r7
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	ee26 6a27 	vmul.f32	s12, s12, s15
 800354c:	4b9e      	ldr	r3, [pc, #632]	@ (80037c8 <NLLS+0x2570>)
 800354e:	443b      	add	r3, r7
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003558:	4b9c      	ldr	r3, [pc, #624]	@ (80037cc <NLLS+0x2574>)
 800355a:	443b      	add	r3, r7
 800355c:	edd3 7a00 	vldr	s15, [r3]
 8003560:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003564:	4b9a      	ldr	r3, [pc, #616]	@ (80037d0 <NLLS+0x2578>)
 8003566:	443b      	add	r3, r7
 8003568:	edd3 7a00 	vldr	s15, [r3]
 800356c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003570:	4b98      	ldr	r3, [pc, #608]	@ (80037d4 <NLLS+0x257c>)
 8003572:	443b      	add	r3, r7
 8003574:	edd3 7a00 	vldr	s15, [r3]
 8003578:	ee26 6a27 	vmul.f32	s12, s12, s15
 800357c:	4b96      	ldr	r3, [pc, #600]	@ (80037d8 <NLLS+0x2580>)
 800357e:	443b      	add	r3, r7
 8003580:	edd3 7a00 	vldr	s15, [r3]
 8003584:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003588:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800358c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003590:	eef1 6a67 	vneg.f32	s13, s15
 8003594:	4b92      	ldr	r3, [pc, #584]	@ (80037e0 <NLLS+0x2588>)
 8003596:	443b      	add	r3, r7
 8003598:	edd3 7a00 	vldr	s15, [r3]
 800359c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80035a0:	4b88      	ldr	r3, [pc, #544]	@ (80037c4 <NLLS+0x256c>)
 80035a2:	443b      	add	r3, r7
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ac:	4b85      	ldr	r3, [pc, #532]	@ (80037c4 <NLLS+0x256c>)
 80035ae:	443b      	add	r3, r7
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035b8:	4b83      	ldr	r3, [pc, #524]	@ (80037c8 <NLLS+0x2570>)
 80035ba:	443b      	add	r3, r7
 80035bc:	edd3 7a00 	vldr	s15, [r3]
 80035c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035c4:	4b81      	ldr	r3, [pc, #516]	@ (80037cc <NLLS+0x2574>)
 80035c6:	443b      	add	r3, r7
 80035c8:	edd3 7a00 	vldr	s15, [r3]
 80035cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035d0:	4b7e      	ldr	r3, [pc, #504]	@ (80037cc <NLLS+0x2574>)
 80035d2:	443b      	add	r3, r7
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035dc:	4b76      	ldr	r3, [pc, #472]	@ (80037b8 <NLLS+0x2560>)
 80035de:	443b      	add	r3, r7
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035e8:	4b73      	ldr	r3, [pc, #460]	@ (80037b8 <NLLS+0x2560>)
 80035ea:	443b      	add	r3, r7
 80035ec:	edd3 7a00 	vldr	s15, [r3]
 80035f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035f4:	4b76      	ldr	r3, [pc, #472]	@ (80037d0 <NLLS+0x2578>)
 80035f6:	443b      	add	r3, r7
 80035f8:	edd3 7a00 	vldr	s15, [r3]
 80035fc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003600:	4b73      	ldr	r3, [pc, #460]	@ (80037d0 <NLLS+0x2578>)
 8003602:	443b      	add	r3, r7
 8003604:	edd3 7a00 	vldr	s15, [r3]
 8003608:	ee66 7a27 	vmul.f32	s15, s12, s15
 800360c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003614:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003618:	443b      	add	r3, r7
 800361a:	4619      	mov	r1, r3
 800361c:	4b6f      	ldr	r3, [pc, #444]	@ (80037dc <NLLS+0x2584>)
 800361e:	443b      	add	r3, r7
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	f641 230a 	movw	r3, #6666	@ 0x1a0a
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3bf0      	subs	r3, #240	@ 0xf0
 800362e:	edc3 7a00 	vstr	s15, [r3]

            mat_H[7][i] = (2*sin_phi*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*(cos_phi*cos_phi*cos_phi)*cos_rho*cos_rho) - (2*(bx - mx[i])*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sz*cos_lambda*cos_phi*cos_rho);
 8003632:	4b69      	ldr	r3, [pc, #420]	@ (80037d8 <NLLS+0x2580>)
 8003634:	443b      	add	r3, r7
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800363e:	4b61      	ldr	r3, [pc, #388]	@ (80037c4 <NLLS+0x256c>)
 8003640:	443b      	add	r3, r7
 8003642:	edd3 6a00 	vldr	s13, [r3]
 8003646:	4b60      	ldr	r3, [pc, #384]	@ (80037c8 <NLLS+0x2570>)
 8003648:	443b      	add	r3, r7
 800364a:	edd3 7a00 	vldr	s15, [r3]
 800364e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003652:	4b60      	ldr	r3, [pc, #384]	@ (80037d4 <NLLS+0x257c>)
 8003654:	443b      	add	r3, r7
 8003656:	ed93 6a00 	vldr	s12, [r3]
 800365a:	4b58      	ldr	r3, [pc, #352]	@ (80037bc <NLLS+0x2564>)
 800365c:	443b      	add	r3, r7
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003666:	4b59      	ldr	r3, [pc, #356]	@ (80037cc <NLLS+0x2574>)
 8003668:	443b      	add	r3, r7
 800366a:	edd3 5a00 	vldr	s11, [r3]
 800366e:	4b58      	ldr	r3, [pc, #352]	@ (80037d0 <NLLS+0x2578>)
 8003670:	443b      	add	r3, r7
 8003672:	edd3 7a00 	vldr	s15, [r3]
 8003676:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800367a:	4b57      	ldr	r3, [pc, #348]	@ (80037d8 <NLLS+0x2580>)
 800367c:	443b      	add	r3, r7
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003686:	ee76 7a67 	vsub.f32	s15, s12, s15
 800368a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800368e:	4b53      	ldr	r3, [pc, #332]	@ (80037dc <NLLS+0x2584>)
 8003690:	443b      	add	r3, r7
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800369a:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	edd3 7a00 	vldr	s15, [r3]
 80036a6:	4b46      	ldr	r3, [pc, #280]	@ (80037c0 <NLLS+0x2568>)
 80036a8:	443b      	add	r3, r7
 80036aa:	ed93 6a00 	vldr	s12, [r3]
 80036ae:	ee76 7a67 	vsub.f32	s15, s12, s15
 80036b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80036b6:	4b4a      	ldr	r3, [pc, #296]	@ (80037e0 <NLLS+0x2588>)
 80036b8:	443b      	add	r3, r7
 80036ba:	ed93 6a00 	vldr	s12, [r3]
 80036be:	4b41      	ldr	r3, [pc, #260]	@ (80037c4 <NLLS+0x256c>)
 80036c0:	443b      	add	r3, r7
 80036c2:	edd3 7a00 	vldr	s15, [r3]
 80036c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036ca:	4b41      	ldr	r3, [pc, #260]	@ (80037d0 <NLLS+0x2578>)
 80036cc:	443b      	add	r3, r7
 80036ce:	edd3 7a00 	vldr	s15, [r3]
 80036d2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80036d6:	4b41      	ldr	r3, [pc, #260]	@ (80037dc <NLLS+0x2584>)
 80036d8:	443b      	add	r3, r7
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80036e2:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	4413      	add	r3, r2
 80036ea:	edd3 7a00 	vldr	s15, [r3]
 80036ee:	4b3d      	ldr	r3, [pc, #244]	@ (80037e4 <NLLS+0x258c>)
 80036f0:	443b      	add	r3, r7
 80036f2:	edd3 5a00 	vldr	s11, [r3]
 80036f6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80036fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80036fe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003702:	4b37      	ldr	r3, [pc, #220]	@ (80037e0 <NLLS+0x2588>)
 8003704:	443b      	add	r3, r7
 8003706:	ed93 6a00 	vldr	s12, [r3]
 800370a:	4b2f      	ldr	r3, [pc, #188]	@ (80037c8 <NLLS+0x2570>)
 800370c:	443b      	add	r3, r7
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003716:	4b2f      	ldr	r3, [pc, #188]	@ (80037d4 <NLLS+0x257c>)
 8003718:	443b      	add	r3, r7
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003722:	4b2e      	ldr	r3, [pc, #184]	@ (80037dc <NLLS+0x2584>)
 8003724:	443b      	add	r3, r7
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 800372e:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	4413      	add	r3, r2
 8003736:	edd3 7a00 	vldr	s15, [r3]
 800373a:	4b2b      	ldr	r3, [pc, #172]	@ (80037e8 <NLLS+0x2590>)
 800373c:	443b      	add	r3, r7
 800373e:	edd3 5a00 	vldr	s11, [r3]
 8003742:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003746:	ee66 7a27 	vmul.f32	s15, s12, s15
 800374a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800374e:	4b1d      	ldr	r3, [pc, #116]	@ (80037c4 <NLLS+0x256c>)
 8003750:	443b      	add	r3, r7
 8003752:	ed93 6a00 	vldr	s12, [r3]
 8003756:	4b1c      	ldr	r3, [pc, #112]	@ (80037c8 <NLLS+0x2570>)
 8003758:	443b      	add	r3, r7
 800375a:	edd3 7a00 	vldr	s15, [r3]
 800375e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003762:	4b1c      	ldr	r3, [pc, #112]	@ (80037d4 <NLLS+0x257c>)
 8003764:	443b      	add	r3, r7
 8003766:	edd3 5a00 	vldr	s11, [r3]
 800376a:	4b14      	ldr	r3, [pc, #80]	@ (80037bc <NLLS+0x2564>)
 800376c:	443b      	add	r3, r7
 800376e:	edd3 7a00 	vldr	s15, [r3]
 8003772:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003776:	4b15      	ldr	r3, [pc, #84]	@ (80037cc <NLLS+0x2574>)
 8003778:	443b      	add	r3, r7
 800377a:	ed93 5a00 	vldr	s10, [r3]
 800377e:	4b14      	ldr	r3, [pc, #80]	@ (80037d0 <NLLS+0x2578>)
 8003780:	443b      	add	r3, r7
 8003782:	edd3 7a00 	vldr	s15, [r3]
 8003786:	ee25 5a27 	vmul.f32	s10, s10, s15
 800378a:	4b13      	ldr	r3, [pc, #76]	@ (80037d8 <NLLS+0x2580>)
 800378c:	443b      	add	r3, r7
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003796:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800379a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800379e:	4b0f      	ldr	r3, [pc, #60]	@ (80037dc <NLLS+0x2584>)
 80037a0:	443b      	add	r3, r7
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80037aa:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	4413      	add	r3, r2
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	e019      	b.n	80037ec <NLLS+0x2594>
 80037b8:	00016f78 	.word	0x00016f78
 80037bc:	00016f80 	.word	0x00016f80
 80037c0:	00016fd4 	.word	0x00016fd4
 80037c4:	00016fdc 	.word	0x00016fdc
 80037c8:	00016fd8 	.word	0x00016fd8
 80037cc:	00016f70 	.word	0x00016f70
 80037d0:	00016f74 	.word	0x00016f74
 80037d4:	00016f7c 	.word	0x00016f7c
 80037d8:	00016f84 	.word	0x00016f84
 80037dc:	00016fb0 	.word	0x00016fb0
 80037e0:	00016fe0 	.word	0x00016fe0
 80037e4:	00016fcc 	.word	0x00016fcc
 80037e8:	00016fd0 	.word	0x00016fd0
 80037ec:	4bc0      	ldr	r3, [pc, #768]	@ (8003af0 <NLLS+0x2898>)
 80037ee:	443b      	add	r3, r7
 80037f0:	edd3 5a00 	vldr	s11, [r3]
 80037f4:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80037f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80037fc:	4bbd      	ldr	r3, [pc, #756]	@ (8003af4 <NLLS+0x289c>)
 80037fe:	443b      	add	r3, r7
 8003800:	edd3 5a00 	vldr	s11, [r3]
 8003804:	4bbc      	ldr	r3, [pc, #752]	@ (8003af8 <NLLS+0x28a0>)
 8003806:	443b      	add	r3, r7
 8003808:	edd3 7a00 	vldr	s15, [r3]
 800380c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003810:	4bba      	ldr	r3, [pc, #744]	@ (8003afc <NLLS+0x28a4>)
 8003812:	443b      	add	r3, r7
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800381c:	4bb8      	ldr	r3, [pc, #736]	@ (8003b00 <NLLS+0x28a8>)
 800381e:	443b      	add	r3, r7
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003828:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	4413      	add	r3, r2
 8003830:	edd3 7a00 	vldr	s15, [r3]
 8003834:	4bb3      	ldr	r3, [pc, #716]	@ (8003b04 <NLLS+0x28ac>)
 8003836:	443b      	add	r3, r7
 8003838:	ed93 5a00 	vldr	s10, [r3]
 800383c:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003840:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003844:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003848:	4baa      	ldr	r3, [pc, #680]	@ (8003af4 <NLLS+0x289c>)
 800384a:	443b      	add	r3, r7
 800384c:	edd3 5a00 	vldr	s11, [r3]
 8003850:	4bad      	ldr	r3, [pc, #692]	@ (8003b08 <NLLS+0x28b0>)
 8003852:	443b      	add	r3, r7
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800385c:	4bab      	ldr	r3, [pc, #684]	@ (8003b0c <NLLS+0x28b4>)
 800385e:	443b      	add	r3, r7
 8003860:	edd3 7a00 	vldr	s15, [r3]
 8003864:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003868:	4ba5      	ldr	r3, [pc, #660]	@ (8003b00 <NLLS+0x28a8>)
 800386a:	443b      	add	r3, r7
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003874:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	4413      	add	r3, r2
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	4ba3      	ldr	r3, [pc, #652]	@ (8003b10 <NLLS+0x28b8>)
 8003882:	443b      	add	r3, r7
 8003884:	ed93 5a00 	vldr	s10, [r3]
 8003888:	ee75 7a67 	vsub.f32	s15, s10, s15
 800388c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003890:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003898:	ee67 6a27 	vmul.f32	s13, s14, s15
 800389c:	4b95      	ldr	r3, [pc, #596]	@ (8003af4 <NLLS+0x289c>)
 800389e:	443b      	add	r3, r7
 80038a0:	edd3 7a00 	vldr	s15, [r3]
 80038a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80038a8:	4b93      	ldr	r3, [pc, #588]	@ (8003af8 <NLLS+0x28a0>)
 80038aa:	443b      	add	r3, r7
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038b4:	4b90      	ldr	r3, [pc, #576]	@ (8003af8 <NLLS+0x28a0>)
 80038b6:	443b      	add	r3, r7
 80038b8:	edd3 7a00 	vldr	s15, [r3]
 80038bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c0:	4b91      	ldr	r3, [pc, #580]	@ (8003b08 <NLLS+0x28b0>)
 80038c2:	443b      	add	r3, r7
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003b08 <NLLS+0x28b0>)
 80038ce:	443b      	add	r3, r7
 80038d0:	edd3 7a00 	vldr	s15, [r3]
 80038d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038d8:	4b8e      	ldr	r3, [pc, #568]	@ (8003b14 <NLLS+0x28bc>)
 80038da:	443b      	add	r3, r7
 80038dc:	edd3 7a00 	vldr	s15, [r3]
 80038e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038e4:	4b8b      	ldr	r3, [pc, #556]	@ (8003b14 <NLLS+0x28bc>)
 80038e6:	443b      	add	r3, r7
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038f0:	4b89      	ldr	r3, [pc, #548]	@ (8003b18 <NLLS+0x28c0>)
 80038f2:	443b      	add	r3, r7
 80038f4:	edd3 7a00 	vldr	s15, [r3]
 80038f8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80038fc:	4b86      	ldr	r3, [pc, #536]	@ (8003b18 <NLLS+0x28c0>)
 80038fe:	443b      	add	r3, r7
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800390c:	4b7b      	ldr	r3, [pc, #492]	@ (8003afc <NLLS+0x28a4>)
 800390e:	443b      	add	r3, r7
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003918:	4b78      	ldr	r3, [pc, #480]	@ (8003afc <NLLS+0x28a4>)
 800391a:	443b      	add	r3, r7
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003928:	4b75      	ldr	r3, [pc, #468]	@ (8003b00 <NLLS+0x28a8>)
 800392a:	443b      	add	r3, r7
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003934:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	4413      	add	r3, r2
 800393c:	edd3 7a00 	vldr	s15, [r3]
 8003940:	4b6b      	ldr	r3, [pc, #428]	@ (8003af0 <NLLS+0x2898>)
 8003942:	443b      	add	r3, r7
 8003944:	edd3 6a00 	vldr	s13, [r3]
 8003948:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800394c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003950:	4b69      	ldr	r3, [pc, #420]	@ (8003af8 <NLLS+0x28a0>)
 8003952:	443b      	add	r3, r7
 8003954:	ed93 6a00 	vldr	s12, [r3]
 8003958:	4b6b      	ldr	r3, [pc, #428]	@ (8003b08 <NLLS+0x28b0>)
 800395a:	443b      	add	r3, r7
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003964:	4b69      	ldr	r3, [pc, #420]	@ (8003b0c <NLLS+0x28b4>)
 8003966:	443b      	add	r3, r7
 8003968:	edd3 5a00 	vldr	s11, [r3]
 800396c:	4b6b      	ldr	r3, [pc, #428]	@ (8003b1c <NLLS+0x28c4>)
 800396e:	443b      	add	r3, r7
 8003970:	edd3 7a00 	vldr	s15, [r3]
 8003974:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003978:	4b66      	ldr	r3, [pc, #408]	@ (8003b14 <NLLS+0x28bc>)
 800397a:	443b      	add	r3, r7
 800397c:	ed93 5a00 	vldr	s10, [r3]
 8003980:	4b5e      	ldr	r3, [pc, #376]	@ (8003afc <NLLS+0x28a4>)
 8003982:	443b      	add	r3, r7
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	ee25 5a27 	vmul.f32	s10, s10, s15
 800398c:	4b64      	ldr	r3, [pc, #400]	@ (8003b20 <NLLS+0x28c8>)
 800398e:	443b      	add	r3, r7
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003998:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800399c:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039a0:	4b57      	ldr	r3, [pc, #348]	@ (8003b00 <NLLS+0x28a8>)
 80039a2:	443b      	add	r3, r7
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80039ac:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	4413      	add	r3, r2
 80039b4:	edd3 7a00 	vldr	s15, [r3]
 80039b8:	4b4d      	ldr	r3, [pc, #308]	@ (8003af0 <NLLS+0x2898>)
 80039ba:	443b      	add	r3, r7
 80039bc:	edd3 5a00 	vldr	s11, [r3]
 80039c0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80039c4:	ee26 6a27 	vmul.f32	s12, s12, s15
 80039c8:	4b4a      	ldr	r3, [pc, #296]	@ (8003af4 <NLLS+0x289c>)
 80039ca:	443b      	add	r3, r7
 80039cc:	edd3 5a00 	vldr	s11, [r3]
 80039d0:	4b49      	ldr	r3, [pc, #292]	@ (8003af8 <NLLS+0x28a0>)
 80039d2:	443b      	add	r3, r7
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80039dc:	4b47      	ldr	r3, [pc, #284]	@ (8003afc <NLLS+0x28a4>)
 80039de:	443b      	add	r3, r7
 80039e0:	edd3 7a00 	vldr	s15, [r3]
 80039e4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80039e8:	4b45      	ldr	r3, [pc, #276]	@ (8003b00 <NLLS+0x28a8>)
 80039ea:	443b      	add	r3, r7
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 80039f4:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	4413      	add	r3, r2
 80039fc:	edd3 7a00 	vldr	s15, [r3]
 8003a00:	4b40      	ldr	r3, [pc, #256]	@ (8003b04 <NLLS+0x28ac>)
 8003a02:	443b      	add	r3, r7
 8003a04:	ed93 5a00 	vldr	s10, [r3]
 8003a08:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003a0c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003a10:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003a14:	4b37      	ldr	r3, [pc, #220]	@ (8003af4 <NLLS+0x289c>)
 8003a16:	443b      	add	r3, r7
 8003a18:	edd3 5a00 	vldr	s11, [r3]
 8003a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b08 <NLLS+0x28b0>)
 8003a1e:	443b      	add	r3, r7
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003a28:	4b38      	ldr	r3, [pc, #224]	@ (8003b0c <NLLS+0x28b4>)
 8003a2a:	443b      	add	r3, r7
 8003a2c:	edd3 7a00 	vldr	s15, [r3]
 8003a30:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003a34:	4b32      	ldr	r3, [pc, #200]	@ (8003b00 <NLLS+0x28a8>)
 8003a36:	443b      	add	r3, r7
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003a40:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	4413      	add	r3, r2
 8003a48:	edd3 7a00 	vldr	s15, [r3]
 8003a4c:	4b30      	ldr	r3, [pc, #192]	@ (8003b10 <NLLS+0x28b8>)
 8003a4e:	443b      	add	r3, r7
 8003a50:	ed93 5a00 	vldr	s10, [r3]
 8003a54:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003a58:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003a5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003a60:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003a64:	4b23      	ldr	r3, [pc, #140]	@ (8003af4 <NLLS+0x289c>)
 8003a66:	443b      	add	r3, r7
 8003a68:	edd3 7a00 	vldr	s15, [r3]
 8003a6c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003a70:	4b21      	ldr	r3, [pc, #132]	@ (8003af8 <NLLS+0x28a0>)
 8003a72:	443b      	add	r3, r7
 8003a74:	edd3 7a00 	vldr	s15, [r3]
 8003a78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a7c:	4b22      	ldr	r3, [pc, #136]	@ (8003b08 <NLLS+0x28b0>)
 8003a7e:	443b      	add	r3, r7
 8003a80:	edd3 7a00 	vldr	s15, [r3]
 8003a84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a88:	4b22      	ldr	r3, [pc, #136]	@ (8003b14 <NLLS+0x28bc>)
 8003a8a:	443b      	add	r3, r7
 8003a8c:	edd3 7a00 	vldr	s15, [r3]
 8003a90:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a94:	4b20      	ldr	r3, [pc, #128]	@ (8003b18 <NLLS+0x28c0>)
 8003a96:	443b      	add	r3, r7
 8003a98:	edd3 7a00 	vldr	s15, [r3]
 8003a9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003aa0:	4b16      	ldr	r3, [pc, #88]	@ (8003afc <NLLS+0x28a4>)
 8003aa2:	443b      	add	r3, r7
 8003aa4:	edd3 7a00 	vldr	s15, [r3]
 8003aa8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003aac:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab4:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8003ab8:	443b      	add	r3, r7
 8003aba:	4619      	mov	r1, r3
 8003abc:	4b10      	ldr	r3, [pc, #64]	@ (8003b00 <NLLS+0x28a8>)
 8003abe:	443b      	add	r3, r7
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	f641 6361 	movw	r3, #7777	@ 0x1e61
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3bf0      	subs	r3, #240	@ 0xf0
 8003ace:	edc3 7a00 	vstr	s15, [r3]

            mat_H[8][i] = (2*sin_lambda*((sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i]))))/(sx*sx*sy*sy*sz*sz*(cos_lambda*cos_lambda*cos_lambda)*cos_phi*cos_phi*(cos_rho*cos_rho)) + (2*(sy*sz*(cos_lambda*sin_rho + cos_rho*sin_lambda*sin_phi)*(bx - mx[i]) - sx*sz*cos_lambda*(by - my[i]))*(sy*sz*(sin_lambda*sin_rho - cos_lambda*cos_rho*sin_phi)*(bx - mx[i]) + sx*sy*cos_rho*(bz - mz[i]) - sx*sz*sin_lambda*(by - my[i])))/(sx*sx*sy*sy*sz*sz*cos_lambda*cos_lambda*cos_phi*cos_phi*cos_rho*cos_rho);
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8003b0c <NLLS+0x28b4>)
 8003ad4:	443b      	add	r3, r7
 8003ad6:	edd3 7a00 	vldr	s15, [r3]
 8003ada:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003ade:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <NLLS+0x28a0>)
 8003ae0:	443b      	add	r3, r7
 8003ae2:	edd3 6a00 	vldr	s13, [r3]
 8003ae6:	4b08      	ldr	r3, [pc, #32]	@ (8003b08 <NLLS+0x28b0>)
 8003ae8:	443b      	add	r3, r7
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	e019      	b.n	8003b24 <NLLS+0x28cc>
 8003af0:	00016fd4 	.word	0x00016fd4
 8003af4:	00016fe0 	.word	0x00016fe0
 8003af8:	00016fdc 	.word	0x00016fdc
 8003afc:	00016f74 	.word	0x00016f74
 8003b00:	00016fb0 	.word	0x00016fb0
 8003b04:	00016fcc 	.word	0x00016fcc
 8003b08:	00016fd8 	.word	0x00016fd8
 8003b0c:	00016f7c 	.word	0x00016f7c
 8003b10:	00016fd0 	.word	0x00016fd0
 8003b14:	00016f70 	.word	0x00016f70
 8003b18:	00016f78 	.word	0x00016f78
 8003b1c:	00016f80 	.word	0x00016f80
 8003b20:	00016f84 	.word	0x00016f84
 8003b24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b28:	4bc0      	ldr	r3, [pc, #768]	@ (8003e2c <NLLS+0x2bd4>)
 8003b2a:	443b      	add	r3, r7
 8003b2c:	ed93 6a00 	vldr	s12, [r3]
 8003b30:	4bbf      	ldr	r3, [pc, #764]	@ (8003e30 <NLLS+0x2bd8>)
 8003b32:	443b      	add	r3, r7
 8003b34:	edd3 7a00 	vldr	s15, [r3]
 8003b38:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003b3c:	4bbd      	ldr	r3, [pc, #756]	@ (8003e34 <NLLS+0x2bdc>)
 8003b3e:	443b      	add	r3, r7
 8003b40:	edd3 5a00 	vldr	s11, [r3]
 8003b44:	4bbc      	ldr	r3, [pc, #752]	@ (8003e38 <NLLS+0x2be0>)
 8003b46:	443b      	add	r3, r7
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003b50:	4bba      	ldr	r3, [pc, #744]	@ (8003e3c <NLLS+0x2be4>)
 8003b52:	443b      	add	r3, r7
 8003b54:	edd3 7a00 	vldr	s15, [r3]
 8003b58:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003b5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003b60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b64:	4bb6      	ldr	r3, [pc, #728]	@ (8003e40 <NLLS+0x2be8>)
 8003b66:	443b      	add	r3, r7
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003b70:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	edd3 7a00 	vldr	s15, [r3]
 8003b7c:	4bb1      	ldr	r3, [pc, #708]	@ (8003e44 <NLLS+0x2bec>)
 8003b7e:	443b      	add	r3, r7
 8003b80:	ed93 6a00 	vldr	s12, [r3]
 8003b84:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003b88:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b8c:	4bae      	ldr	r3, [pc, #696]	@ (8003e48 <NLLS+0x2bf0>)
 8003b8e:	443b      	add	r3, r7
 8003b90:	ed93 6a00 	vldr	s12, [r3]
 8003b94:	4bad      	ldr	r3, [pc, #692]	@ (8003e4c <NLLS+0x2bf4>)
 8003b96:	443b      	add	r3, r7
 8003b98:	edd3 7a00 	vldr	s15, [r3]
 8003b9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003ba0:	4ba5      	ldr	r3, [pc, #660]	@ (8003e38 <NLLS+0x2be0>)
 8003ba2:	443b      	add	r3, r7
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bac:	4ba4      	ldr	r3, [pc, #656]	@ (8003e40 <NLLS+0x2be8>)
 8003bae:	443b      	add	r3, r7
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003bb8:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	4ba2      	ldr	r3, [pc, #648]	@ (8003e50 <NLLS+0x2bf8>)
 8003bc6:	443b      	add	r3, r7
 8003bc8:	edd3 5a00 	vldr	s11, [r3]
 8003bcc:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003bd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003bd4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8003bd8:	4b9b      	ldr	r3, [pc, #620]	@ (8003e48 <NLLS+0x2bf0>)
 8003bda:	443b      	add	r3, r7
 8003bdc:	ed93 6a00 	vldr	s12, [r3]
 8003be0:	4b9c      	ldr	r3, [pc, #624]	@ (8003e54 <NLLS+0x2bfc>)
 8003be2:	443b      	add	r3, r7
 8003be4:	edd3 7a00 	vldr	s15, [r3]
 8003be8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bec:	4b8f      	ldr	r3, [pc, #572]	@ (8003e2c <NLLS+0x2bd4>)
 8003bee:	443b      	add	r3, r7
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003bf8:	4b91      	ldr	r3, [pc, #580]	@ (8003e40 <NLLS+0x2be8>)
 8003bfa:	443b      	add	r3, r7
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003c04:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	edd3 7a00 	vldr	s15, [r3]
 8003c10:	4b91      	ldr	r3, [pc, #580]	@ (8003e58 <NLLS+0x2c00>)
 8003c12:	443b      	add	r3, r7
 8003c14:	edd3 5a00 	vldr	s11, [r3]
 8003c18:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003c1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003c20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003c24:	4b89      	ldr	r3, [pc, #548]	@ (8003e4c <NLLS+0x2bf4>)
 8003c26:	443b      	add	r3, r7
 8003c28:	ed93 6a00 	vldr	s12, [r3]
 8003c2c:	4b89      	ldr	r3, [pc, #548]	@ (8003e54 <NLLS+0x2bfc>)
 8003c2e:	443b      	add	r3, r7
 8003c30:	edd3 7a00 	vldr	s15, [r3]
 8003c34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c38:	4b7c      	ldr	r3, [pc, #496]	@ (8003e2c <NLLS+0x2bd4>)
 8003c3a:	443b      	add	r3, r7
 8003c3c:	edd3 5a00 	vldr	s11, [r3]
 8003c40:	4b7b      	ldr	r3, [pc, #492]	@ (8003e30 <NLLS+0x2bd8>)
 8003c42:	443b      	add	r3, r7
 8003c44:	edd3 7a00 	vldr	s15, [r3]
 8003c48:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003c4c:	4b79      	ldr	r3, [pc, #484]	@ (8003e34 <NLLS+0x2bdc>)
 8003c4e:	443b      	add	r3, r7
 8003c50:	ed93 5a00 	vldr	s10, [r3]
 8003c54:	4b78      	ldr	r3, [pc, #480]	@ (8003e38 <NLLS+0x2be0>)
 8003c56:	443b      	add	r3, r7
 8003c58:	edd3 7a00 	vldr	s15, [r3]
 8003c5c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003c60:	4b76      	ldr	r3, [pc, #472]	@ (8003e3c <NLLS+0x2be4>)
 8003c62:	443b      	add	r3, r7
 8003c64:	edd3 7a00 	vldr	s15, [r3]
 8003c68:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003c6c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003c70:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c74:	4b72      	ldr	r3, [pc, #456]	@ (8003e40 <NLLS+0x2be8>)
 8003c76:	443b      	add	r3, r7
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003c80:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	4413      	add	r3, r2
 8003c88:	edd3 7a00 	vldr	s15, [r3]
 8003c8c:	4b6d      	ldr	r3, [pc, #436]	@ (8003e44 <NLLS+0x2bec>)
 8003c8e:	443b      	add	r3, r7
 8003c90:	edd3 5a00 	vldr	s11, [r3]
 8003c94:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003c98:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8003e48 <NLLS+0x2bf0>)
 8003c9e:	443b      	add	r3, r7
 8003ca0:	edd3 5a00 	vldr	s11, [r3]
 8003ca4:	4b69      	ldr	r3, [pc, #420]	@ (8003e4c <NLLS+0x2bf4>)
 8003ca6:	443b      	add	r3, r7
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003cb0:	4b61      	ldr	r3, [pc, #388]	@ (8003e38 <NLLS+0x2be0>)
 8003cb2:	443b      	add	r3, r7
 8003cb4:	edd3 7a00 	vldr	s15, [r3]
 8003cb8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003cbc:	4b60      	ldr	r3, [pc, #384]	@ (8003e40 <NLLS+0x2be8>)
 8003cbe:	443b      	add	r3, r7
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003cc8:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	4413      	add	r3, r2
 8003cd0:	edd3 7a00 	vldr	s15, [r3]
 8003cd4:	4b5e      	ldr	r3, [pc, #376]	@ (8003e50 <NLLS+0x2bf8>)
 8003cd6:	443b      	add	r3, r7
 8003cd8:	ed93 5a00 	vldr	s10, [r3]
 8003cdc:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003ce0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003ce4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003ce8:	4b57      	ldr	r3, [pc, #348]	@ (8003e48 <NLLS+0x2bf0>)
 8003cea:	443b      	add	r3, r7
 8003cec:	edd3 5a00 	vldr	s11, [r3]
 8003cf0:	4b58      	ldr	r3, [pc, #352]	@ (8003e54 <NLLS+0x2bfc>)
 8003cf2:	443b      	add	r3, r7
 8003cf4:	edd3 7a00 	vldr	s15, [r3]
 8003cf8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8003e2c <NLLS+0x2bd4>)
 8003cfe:	443b      	add	r3, r7
 8003d00:	edd3 7a00 	vldr	s15, [r3]
 8003d04:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003d08:	4b4d      	ldr	r3, [pc, #308]	@ (8003e40 <NLLS+0x2be8>)
 8003d0a:	443b      	add	r3, r7
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003d14:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	edd3 7a00 	vldr	s15, [r3]
 8003d20:	4b4d      	ldr	r3, [pc, #308]	@ (8003e58 <NLLS+0x2c00>)
 8003d22:	443b      	add	r3, r7
 8003d24:	ed93 5a00 	vldr	s10, [r3]
 8003d28:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003d2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003d30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d38:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003d3c:	4b42      	ldr	r3, [pc, #264]	@ (8003e48 <NLLS+0x2bf0>)
 8003d3e:	443b      	add	r3, r7
 8003d40:	edd3 7a00 	vldr	s15, [r3]
 8003d44:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003d48:	4b40      	ldr	r3, [pc, #256]	@ (8003e4c <NLLS+0x2bf4>)
 8003d4a:	443b      	add	r3, r7
 8003d4c:	edd3 7a00 	vldr	s15, [r3]
 8003d50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d54:	4b3d      	ldr	r3, [pc, #244]	@ (8003e4c <NLLS+0x2bf4>)
 8003d56:	443b      	add	r3, r7
 8003d58:	edd3 7a00 	vldr	s15, [r3]
 8003d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d60:	4b3c      	ldr	r3, [pc, #240]	@ (8003e54 <NLLS+0x2bfc>)
 8003d62:	443b      	add	r3, r7
 8003d64:	edd3 7a00 	vldr	s15, [r3]
 8003d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d6c:	4b39      	ldr	r3, [pc, #228]	@ (8003e54 <NLLS+0x2bfc>)
 8003d6e:	443b      	add	r3, r7
 8003d70:	edd3 7a00 	vldr	s15, [r3]
 8003d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d78:	4b2e      	ldr	r3, [pc, #184]	@ (8003e34 <NLLS+0x2bdc>)
 8003d7a:	443b      	add	r3, r7
 8003d7c:	edd3 7a00 	vldr	s15, [r3]
 8003d80:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8003d84:	4b2b      	ldr	r3, [pc, #172]	@ (8003e34 <NLLS+0x2bdc>)
 8003d86:	443b      	add	r3, r7
 8003d88:	edd3 7a00 	vldr	s15, [r3]
 8003d8c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d94:	4b31      	ldr	r3, [pc, #196]	@ (8003e5c <NLLS+0x2c04>)
 8003d96:	443b      	add	r3, r7
 8003d98:	edd3 7a00 	vldr	s15, [r3]
 8003d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003da0:	4b2e      	ldr	r3, [pc, #184]	@ (8003e5c <NLLS+0x2c04>)
 8003da2:	443b      	add	r3, r7
 8003da4:	edd3 7a00 	vldr	s15, [r3]
 8003da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dac:	4b22      	ldr	r3, [pc, #136]	@ (8003e38 <NLLS+0x2be0>)
 8003dae:	443b      	add	r3, r7
 8003db0:	edd3 7a00 	vldr	s15, [r3]
 8003db4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc0:	4b22      	ldr	r3, [pc, #136]	@ (8003e4c <NLLS+0x2bf4>)
 8003dc2:	443b      	add	r3, r7
 8003dc4:	edd3 6a00 	vldr	s13, [r3]
 8003dc8:	4b22      	ldr	r3, [pc, #136]	@ (8003e54 <NLLS+0x2bfc>)
 8003dca:	443b      	add	r3, r7
 8003dcc:	edd3 7a00 	vldr	s15, [r3]
 8003dd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003dd4:	4b17      	ldr	r3, [pc, #92]	@ (8003e34 <NLLS+0x2bdc>)
 8003dd6:	443b      	add	r3, r7
 8003dd8:	ed93 6a00 	vldr	s12, [r3]
 8003ddc:	4b14      	ldr	r3, [pc, #80]	@ (8003e30 <NLLS+0x2bd8>)
 8003dde:	443b      	add	r3, r7
 8003de0:	edd3 7a00 	vldr	s15, [r3]
 8003de4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003de8:	4b13      	ldr	r3, [pc, #76]	@ (8003e38 <NLLS+0x2be0>)
 8003dea:	443b      	add	r3, r7
 8003dec:	edd3 5a00 	vldr	s11, [r3]
 8003df0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e2c <NLLS+0x2bd4>)
 8003df2:	443b      	add	r3, r7
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8003e3c <NLLS+0x2be4>)
 8003dfe:	443b      	add	r3, r7
 8003e00:	edd3 7a00 	vldr	s15, [r3]
 8003e04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003e08:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003e0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e10:	4b0b      	ldr	r3, [pc, #44]	@ (8003e40 <NLLS+0x2be8>)
 8003e12:	443b      	add	r3, r7
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003e1c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	4413      	add	r3, r2
 8003e24:	edd3 7a00 	vldr	s15, [r3]
 8003e28:	e01a      	b.n	8003e60 <NLLS+0x2c08>
 8003e2a:	bf00      	nop
 8003e2c:	00016f7c 	.word	0x00016f7c
 8003e30:	00016f80 	.word	0x00016f80
 8003e34:	00016f70 	.word	0x00016f70
 8003e38:	00016f74 	.word	0x00016f74
 8003e3c:	00016f84 	.word	0x00016f84
 8003e40:	00016fb0 	.word	0x00016fb0
 8003e44:	00016fd4 	.word	0x00016fd4
 8003e48:	00016fe0 	.word	0x00016fe0
 8003e4c:	00016fdc 	.word	0x00016fdc
 8003e50:	00016fcc 	.word	0x00016fcc
 8003e54:	00016fd8 	.word	0x00016fd8
 8003e58:	00016fd0 	.word	0x00016fd0
 8003e5c:	00016f78 	.word	0x00016f78
 8003e60:	4bb3      	ldr	r3, [pc, #716]	@ (8004130 <NLLS+0x2ed8>)
 8003e62:	443b      	add	r3, r7
 8003e64:	ed93 6a00 	vldr	s12, [r3]
 8003e68:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e70:	4bb0      	ldr	r3, [pc, #704]	@ (8004134 <NLLS+0x2edc>)
 8003e72:	443b      	add	r3, r7
 8003e74:	ed93 6a00 	vldr	s12, [r3]
 8003e78:	4baf      	ldr	r3, [pc, #700]	@ (8004138 <NLLS+0x2ee0>)
 8003e7a:	443b      	add	r3, r7
 8003e7c:	edd3 7a00 	vldr	s15, [r3]
 8003e80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e84:	4bad      	ldr	r3, [pc, #692]	@ (800413c <NLLS+0x2ee4>)
 8003e86:	443b      	add	r3, r7
 8003e88:	edd3 7a00 	vldr	s15, [r3]
 8003e8c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003e90:	4bab      	ldr	r3, [pc, #684]	@ (8004140 <NLLS+0x2ee8>)
 8003e92:	443b      	add	r3, r7
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003e9c:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	edd3 7a00 	vldr	s15, [r3]
 8003ea8:	4ba6      	ldr	r3, [pc, #664]	@ (8004144 <NLLS+0x2eec>)
 8003eaa:	443b      	add	r3, r7
 8003eac:	edd3 5a00 	vldr	s11, [r3]
 8003eb0:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003eb4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003eb8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003ebc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003ec0:	4ba1      	ldr	r3, [pc, #644]	@ (8004148 <NLLS+0x2ef0>)
 8003ec2:	443b      	add	r3, r7
 8003ec4:	ed93 6a00 	vldr	s12, [r3]
 8003ec8:	4b9b      	ldr	r3, [pc, #620]	@ (8004138 <NLLS+0x2ee0>)
 8003eca:	443b      	add	r3, r7
 8003ecc:	edd3 7a00 	vldr	s15, [r3]
 8003ed0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003ed4:	4b9d      	ldr	r3, [pc, #628]	@ (800414c <NLLS+0x2ef4>)
 8003ed6:	443b      	add	r3, r7
 8003ed8:	edd3 5a00 	vldr	s11, [r3]
 8003edc:	4b9c      	ldr	r3, [pc, #624]	@ (8004150 <NLLS+0x2ef8>)
 8003ede:	443b      	add	r3, r7
 8003ee0:	edd3 7a00 	vldr	s15, [r3]
 8003ee4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003ee8:	4b94      	ldr	r3, [pc, #592]	@ (800413c <NLLS+0x2ee4>)
 8003eea:	443b      	add	r3, r7
 8003eec:	ed93 5a00 	vldr	s10, [r3]
 8003ef0:	4b98      	ldr	r3, [pc, #608]	@ (8004154 <NLLS+0x2efc>)
 8003ef2:	443b      	add	r3, r7
 8003ef4:	edd3 7a00 	vldr	s15, [r3]
 8003ef8:	ee25 5a27 	vmul.f32	s10, s10, s15
 8003efc:	4b96      	ldr	r3, [pc, #600]	@ (8004158 <NLLS+0x2f00>)
 8003efe:	443b      	add	r3, r7
 8003f00:	edd3 7a00 	vldr	s15, [r3]
 8003f04:	ee65 7a27 	vmul.f32	s15, s10, s15
 8003f08:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003f0c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f10:	4b8b      	ldr	r3, [pc, #556]	@ (8004140 <NLLS+0x2ee8>)
 8003f12:	443b      	add	r3, r7
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003f1c:	f6a2 72dc 	subw	r2, r2, #4060	@ 0xfdc
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	4413      	add	r3, r2
 8003f24:	edd3 7a00 	vldr	s15, [r3]
 8003f28:	4b81      	ldr	r3, [pc, #516]	@ (8004130 <NLLS+0x2ed8>)
 8003f2a:	443b      	add	r3, r7
 8003f2c:	edd3 5a00 	vldr	s11, [r3]
 8003f30:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003f34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8003f38:	4b7e      	ldr	r3, [pc, #504]	@ (8004134 <NLLS+0x2edc>)
 8003f3a:	443b      	add	r3, r7
 8003f3c:	edd3 5a00 	vldr	s11, [r3]
 8003f40:	4b81      	ldr	r3, [pc, #516]	@ (8004148 <NLLS+0x2ef0>)
 8003f42:	443b      	add	r3, r7
 8003f44:	edd3 7a00 	vldr	s15, [r3]
 8003f48:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003f4c:	4b81      	ldr	r3, [pc, #516]	@ (8004154 <NLLS+0x2efc>)
 8003f4e:	443b      	add	r3, r7
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003f58:	4b79      	ldr	r3, [pc, #484]	@ (8004140 <NLLS+0x2ee8>)
 8003f5a:	443b      	add	r3, r7
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003f64:	f6a2 72e4 	subw	r2, r2, #4068	@ 0xfe4
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	edd3 7a00 	vldr	s15, [r3]
 8003f70:	4b7a      	ldr	r3, [pc, #488]	@ (800415c <NLLS+0x2f04>)
 8003f72:	443b      	add	r3, r7
 8003f74:	ed93 5a00 	vldr	s10, [r3]
 8003f78:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003f7c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003f80:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003f84:	4b6b      	ldr	r3, [pc, #428]	@ (8004134 <NLLS+0x2edc>)
 8003f86:	443b      	add	r3, r7
 8003f88:	edd3 5a00 	vldr	s11, [r3]
 8003f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004138 <NLLS+0x2ee0>)
 8003f8e:	443b      	add	r3, r7
 8003f90:	edd3 7a00 	vldr	s15, [r3]
 8003f94:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003f98:	4b6c      	ldr	r3, [pc, #432]	@ (800414c <NLLS+0x2ef4>)
 8003f9a:	443b      	add	r3, r7
 8003f9c:	edd3 7a00 	vldr	s15, [r3]
 8003fa0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8003fa4:	4b66      	ldr	r3, [pc, #408]	@ (8004140 <NLLS+0x2ee8>)
 8003fa6:	443b      	add	r3, r7
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	f607 72e8 	addw	r2, r7, #4072	@ 0xfe8
 8003fb0:	f5a2 627e 	sub.w	r2, r2, #4064	@ 0xfe0
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	edd3 7a00 	vldr	s15, [r3]
 8003fbc:	4b61      	ldr	r3, [pc, #388]	@ (8004144 <NLLS+0x2eec>)
 8003fbe:	443b      	add	r3, r7
 8003fc0:	ed93 5a00 	vldr	s10, [r3]
 8003fc4:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003fc8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8003fcc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003fd0:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003fd4:	4b57      	ldr	r3, [pc, #348]	@ (8004134 <NLLS+0x2edc>)
 8003fd6:	443b      	add	r3, r7
 8003fd8:	edd3 7a00 	vldr	s15, [r3]
 8003fdc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003fe0:	4b59      	ldr	r3, [pc, #356]	@ (8004148 <NLLS+0x2ef0>)
 8003fe2:	443b      	add	r3, r7
 8003fe4:	edd3 7a00 	vldr	s15, [r3]
 8003fe8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003fec:	4b56      	ldr	r3, [pc, #344]	@ (8004148 <NLLS+0x2ef0>)
 8003fee:	443b      	add	r3, r7
 8003ff0:	edd3 7a00 	vldr	s15, [r3]
 8003ff4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8004138 <NLLS+0x2ee0>)
 8003ffa:	443b      	add	r3, r7
 8003ffc:	edd3 7a00 	vldr	s15, [r3]
 8004000:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004004:	4b4c      	ldr	r3, [pc, #304]	@ (8004138 <NLLS+0x2ee0>)
 8004006:	443b      	add	r3, r7
 8004008:	edd3 7a00 	vldr	s15, [r3]
 800400c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004010:	4b4a      	ldr	r3, [pc, #296]	@ (800413c <NLLS+0x2ee4>)
 8004012:	443b      	add	r3, r7
 8004014:	edd3 7a00 	vldr	s15, [r3]
 8004018:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800401c:	4b47      	ldr	r3, [pc, #284]	@ (800413c <NLLS+0x2ee4>)
 800401e:	443b      	add	r3, r7
 8004020:	edd3 7a00 	vldr	s15, [r3]
 8004024:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004028:	4b4d      	ldr	r3, [pc, #308]	@ (8004160 <NLLS+0x2f08>)
 800402a:	443b      	add	r3, r7
 800402c:	edd3 7a00 	vldr	s15, [r3]
 8004030:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004034:	4b4a      	ldr	r3, [pc, #296]	@ (8004160 <NLLS+0x2f08>)
 8004036:	443b      	add	r3, r7
 8004038:	edd3 7a00 	vldr	s15, [r3]
 800403c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004040:	4b44      	ldr	r3, [pc, #272]	@ (8004154 <NLLS+0x2efc>)
 8004042:	443b      	add	r3, r7
 8004044:	edd3 7a00 	vldr	s15, [r3]
 8004048:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800404c:	4b41      	ldr	r3, [pc, #260]	@ (8004154 <NLLS+0x2efc>)
 800404e:	443b      	add	r3, r7
 8004050:	edd3 7a00 	vldr	s15, [r3]
 8004054:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004058:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800405c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004060:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8004064:	443b      	add	r3, r7
 8004066:	4619      	mov	r1, r3
 8004068:	4b35      	ldr	r3, [pc, #212]	@ (8004140 <NLLS+0x2ee8>)
 800406a:	443b      	add	r3, r7
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	3bf0      	subs	r3, #240	@ 0xf0
 800407a:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i < tam; i++)
 800407e:	4b30      	ldr	r3, [pc, #192]	@ (8004140 <NLLS+0x2ee8>)
 8004080:	443b      	add	r3, r7
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	4a2e      	ldr	r2, [pc, #184]	@ (8004140 <NLLS+0x2ee8>)
 8004088:	443a      	add	r2, r7
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	4b2c      	ldr	r3, [pc, #176]	@ (8004140 <NLLS+0x2ee8>)
 800408e:	443b      	add	r3, r7
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f240 4256 	movw	r2, #1110	@ 0x456
 8004096:	4293      	cmp	r3, r2
 8004098:	f77d a9de 	ble.w	8001458 <NLLS+0x200>
        }

        J = 0;
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	4a30      	ldr	r2, [pc, #192]	@ (8004164 <NLLS+0x2f0c>)
 80040a2:	443a      	add	r2, r7
 80040a4:	6013      	str	r3, [r2, #0]

        for(int i=0; i < tam; i++)
 80040a6:	2300      	movs	r3, #0
 80040a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004168 <NLLS+0x2f10>)
 80040aa:	443a      	add	r2, r7
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e02c      	b.n	800410a <NLLS+0x2eb2>
        {
            J += (e[i] * e[i])/2;
 80040b0:	4b2e      	ldr	r3, [pc, #184]	@ (800416c <NLLS+0x2f14>)
 80040b2:	443b      	add	r3, r7
 80040b4:	f5a3 7256 	sub.w	r2, r3, #856	@ 0x358
 80040b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004168 <NLLS+0x2f10>)
 80040ba:	443b      	add	r3, r7
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	ed93 7a00 	vldr	s14, [r3]
 80040c6:	4b29      	ldr	r3, [pc, #164]	@ (800416c <NLLS+0x2f14>)
 80040c8:	443b      	add	r3, r7
 80040ca:	f5a3 7256 	sub.w	r2, r3, #856	@ 0x358
 80040ce:	4b26      	ldr	r3, [pc, #152]	@ (8004168 <NLLS+0x2f10>)
 80040d0:	443b      	add	r3, r7
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80040e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004164 <NLLS+0x2f0c>)
 80040ea:	443b      	add	r3, r7
 80040ec:	ed93 7a00 	vldr	s14, [r3]
 80040f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004164 <NLLS+0x2f0c>)
 80040f6:	443b      	add	r3, r7
 80040f8:	edc3 7a00 	vstr	s15, [r3]
        for(int i=0; i < tam; i++)
 80040fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004168 <NLLS+0x2f10>)
 80040fe:	443b      	add	r3, r7
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	4a18      	ldr	r2, [pc, #96]	@ (8004168 <NLLS+0x2f10>)
 8004106:	443a      	add	r2, r7
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b17      	ldr	r3, [pc, #92]	@ (8004168 <NLLS+0x2f10>)
 800410c:	443b      	add	r3, r7
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f240 4256 	movw	r2, #1110	@ 0x456
 8004114:	4293      	cmp	r3, r2
 8004116:	ddcb      	ble.n	80040b0 <NLLS+0x2e58>
        }

        if(passo < 2)
 8004118:	4b15      	ldr	r3, [pc, #84]	@ (8004170 <NLLS+0x2f18>)
 800411a:	443b      	add	r3, r7
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d82a      	bhi.n	8004178 <NLLS+0x2f20>
        {
            error_ant = J;
 8004122:	4b10      	ldr	r3, [pc, #64]	@ (8004164 <NLLS+0x2f0c>)
 8004124:	443b      	add	r3, r7
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a12      	ldr	r2, [pc, #72]	@ (8004174 <NLLS+0x2f1c>)
 800412a:	443a      	add	r2, r7
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e054      	b.n	80041da <NLLS+0x2f82>
 8004130:	00016fd4 	.word	0x00016fd4
 8004134:	00016fe0 	.word	0x00016fe0
 8004138:	00016fd8 	.word	0x00016fd8
 800413c:	00016f70 	.word	0x00016f70
 8004140:	00016fb0 	.word	0x00016fb0
 8004144:	00016fd0 	.word	0x00016fd0
 8004148:	00016fdc 	.word	0x00016fdc
 800414c:	00016f7c 	.word	0x00016f7c
 8004150:	00016f80 	.word	0x00016f80
 8004154:	00016f74 	.word	0x00016f74
 8004158:	00016f84 	.word	0x00016f84
 800415c:	00016fcc 	.word	0x00016fcc
 8004160:	00016f78 	.word	0x00016f78
 8004164:	00016fb8 	.word	0x00016fb8
 8004168:	00016fac 	.word	0x00016fac
 800416c:	00014fe8 	.word	0x00014fe8
 8004170:	00016fe7 	.word	0x00016fe7
 8004174:	00016fbc 	.word	0x00016fbc
        }
        else
        {
            delta_J = 100*fabsf(J-error_ant)/J;
 8004178:	4b81      	ldr	r3, [pc, #516]	@ (8004380 <NLLS+0x3128>)
 800417a:	443b      	add	r3, r7
 800417c:	ed93 7a00 	vldr	s14, [r3]
 8004180:	4b80      	ldr	r3, [pc, #512]	@ (8004384 <NLLS+0x312c>)
 8004182:	443b      	add	r3, r7
 8004184:	edd3 7a00 	vldr	s15, [r3]
 8004188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800418c:	eef0 7ae7 	vabs.f32	s15, s15
 8004190:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8004388 <NLLS+0x3130>
 8004194:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004198:	4b79      	ldr	r3, [pc, #484]	@ (8004380 <NLLS+0x3128>)
 800419a:	443b      	add	r3, r7
 800419c:	ed93 7a00 	vldr	s14, [r3]
 80041a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041a4:	4b79      	ldr	r3, [pc, #484]	@ (800438c <NLLS+0x3134>)
 80041a6:	443b      	add	r3, r7
 80041a8:	edc3 7a00 	vstr	s15, [r3]
            if(delta_J < 0.05)
 80041ac:	4b77      	ldr	r3, [pc, #476]	@ (800438c <NLLS+0x3134>)
 80041ae:	443b      	add	r3, r7
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	f7fc f9e9 	bl	8000588 <__aeabi_f2d>
 80041b6:	a370      	add	r3, pc, #448	@ (adr r3, 8004378 <NLLS+0x3120>)
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	f7fc fcae 	bl	8000b1c <__aeabi_dcmplt>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <NLLS+0x2f76>
            {
                loop = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	4a71      	ldr	r2, [pc, #452]	@ (8004390 <NLLS+0x3138>)
 80041ca:	443a      	add	r2, r7
 80041cc:	7013      	strb	r3, [r2, #0]
            }
            error_ant = J;
 80041ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004380 <NLLS+0x3128>)
 80041d0:	443b      	add	r3, r7
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a6b      	ldr	r2, [pc, #428]	@ (8004384 <NLLS+0x312c>)
 80041d6:	443a      	add	r2, r7
 80041d8:	6013      	str	r3, [r2, #0]
        }

        for(int i = 0; i < N; i++)
 80041da:	2300      	movs	r3, #0
 80041dc:	4a6d      	ldr	r2, [pc, #436]	@ (8004394 <NLLS+0x313c>)
 80041de:	443a      	add	r2, r7
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e091      	b.n	8004308 <NLLS+0x30b0>
        {
            for(int j = 0; j < N; j++)
 80041e4:	2300      	movs	r3, #0
 80041e6:	4a6c      	ldr	r2, [pc, #432]	@ (8004398 <NLLS+0x3140>)
 80041e8:	443a      	add	r2, r7
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	e07f      	b.n	80042ee <NLLS+0x3096>
            {
                Ht_H[i][j] = 0;
 80041ee:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80041f2:	443b      	add	r3, r7
 80041f4:	f5a3 710d 	sub.w	r1, r3, #564	@ 0x234
 80041f8:	4b66      	ldr	r3, [pc, #408]	@ (8004394 <NLLS+0x313c>)
 80041fa:	443b      	add	r3, r7
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	4a64      	ldr	r2, [pc, #400]	@ (8004398 <NLLS+0x3140>)
 8004206:	443a      	add	r2, r7
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
                for(int k = 0; k < tam; k++)
 8004216:	2300      	movs	r3, #0
 8004218:	4a60      	ldr	r2, [pc, #384]	@ (800439c <NLLS+0x3144>)
 800421a:	443a      	add	r2, r7
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e058      	b.n	80042d2 <NLLS+0x307a>
                {
                    Ht_H[i][j] += mat_H[i][k]*mat_H[j][k];
 8004220:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8004224:	443b      	add	r3, r7
 8004226:	f5a3 710d 	sub.w	r1, r3, #564	@ 0x234
 800422a:	4b5a      	ldr	r3, [pc, #360]	@ (8004394 <NLLS+0x313c>)
 800422c:	443b      	add	r3, r7
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	4a58      	ldr	r2, [pc, #352]	@ (8004398 <NLLS+0x3140>)
 8004238:	443a      	add	r2, r7
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	ed93 7a00 	vldr	s14, [r3]
 8004246:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 800424a:	443b      	add	r3, r7
 800424c:	4619      	mov	r1, r3
 800424e:	4b51      	ldr	r3, [pc, #324]	@ (8004394 <NLLS+0x313c>)
 8004250:	443b      	add	r3, r7
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f240 4257 	movw	r2, #1111	@ 0x457
 8004258:	fb03 f202 	mul.w	r2, r3, r2
 800425c:	4b4f      	ldr	r3, [pc, #316]	@ (800439c <NLLS+0x3144>)
 800425e:	443b      	add	r3, r7
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	3bf0      	subs	r3, #240	@ 0xf0
 800426a:	edd3 6a00 	vldr	s13, [r3]
 800426e:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8004272:	443b      	add	r3, r7
 8004274:	4619      	mov	r1, r3
 8004276:	4b48      	ldr	r3, [pc, #288]	@ (8004398 <NLLS+0x3140>)
 8004278:	443b      	add	r3, r7
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f240 4257 	movw	r2, #1111	@ 0x457
 8004280:	fb03 f202 	mul.w	r2, r3, r2
 8004284:	4b45      	ldr	r3, [pc, #276]	@ (800439c <NLLS+0x3144>)
 8004286:	443b      	add	r3, r7
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3bf0      	subs	r3, #240	@ 0xf0
 8004292:	edd3 7a00 	vldr	s15, [r3]
 8004296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800429a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800429e:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80042a2:	443b      	add	r3, r7
 80042a4:	f5a3 710d 	sub.w	r1, r3, #564	@ 0x234
 80042a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004394 <NLLS+0x313c>)
 80042aa:	443b      	add	r3, r7
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	4a38      	ldr	r2, [pc, #224]	@ (8004398 <NLLS+0x3140>)
 80042b6:	443a      	add	r2, r7
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	edc3 7a00 	vstr	s15, [r3]
                for(int k = 0; k < tam; k++)
 80042c4:	4b35      	ldr	r3, [pc, #212]	@ (800439c <NLLS+0x3144>)
 80042c6:	443b      	add	r3, r7
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3301      	adds	r3, #1
 80042cc:	4a33      	ldr	r2, [pc, #204]	@ (800439c <NLLS+0x3144>)
 80042ce:	443a      	add	r2, r7
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b32      	ldr	r3, [pc, #200]	@ (800439c <NLLS+0x3144>)
 80042d4:	443b      	add	r3, r7
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f240 4256 	movw	r2, #1110	@ 0x456
 80042dc:	4293      	cmp	r3, r2
 80042de:	dd9f      	ble.n	8004220 <NLLS+0x2fc8>
            for(int j = 0; j < N; j++)
 80042e0:	4b2d      	ldr	r3, [pc, #180]	@ (8004398 <NLLS+0x3140>)
 80042e2:	443b      	add	r3, r7
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3301      	adds	r3, #1
 80042e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004398 <NLLS+0x3140>)
 80042ea:	443a      	add	r2, r7
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004398 <NLLS+0x3140>)
 80042f0:	443b      	add	r3, r7
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	f77f af7a 	ble.w	80041ee <NLLS+0x2f96>
        for(int i = 0; i < N; i++)
 80042fa:	4b26      	ldr	r3, [pc, #152]	@ (8004394 <NLLS+0x313c>)
 80042fc:	443b      	add	r3, r7
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	4a24      	ldr	r2, [pc, #144]	@ (8004394 <NLLS+0x313c>)
 8004304:	443a      	add	r2, r7
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	4b22      	ldr	r3, [pc, #136]	@ (8004394 <NLLS+0x313c>)
 800430a:	443b      	add	r3, r7
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b08      	cmp	r3, #8
 8004310:	f77f af68 	ble.w	80041e4 <NLLS+0x2f8c>
                }
            }
        }

        inverter_matriz(Ht_H, inv);
 8004314:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <NLLS+0x3148>)
 8004316:	4b23      	ldr	r3, [pc, #140]	@ (80043a4 <NLLS+0x314c>)
 8004318:	4413      	add	r3, r2
 800431a:	19da      	adds	r2, r3, r7
 800431c:	4b22      	ldr	r3, [pc, #136]	@ (80043a8 <NLLS+0x3150>)
 800431e:	f503 33b7 	add.w	r3, r3, #93696	@ 0x16e00
 8004322:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004326:	443b      	add	r3, r7
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc fe7a 	bl	8001024 <inverter_matriz>

        for(int i = 0; i < N; i++)
 8004330:	2300      	movs	r3, #0
 8004332:	4a1e      	ldr	r2, [pc, #120]	@ (80043ac <NLLS+0x3154>)
 8004334:	443a      	add	r2, r7
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	e0b1      	b.n	800449e <NLLS+0x3246>
        {
            for(int j = 0; j < tam; j++)
 800433a:	2300      	movs	r3, #0
 800433c:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <NLLS+0x3158>)
 800433e:	443a      	add	r2, r7
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	e09d      	b.n	8004480 <NLLS+0x3228>
            {
                mul_mat[i][j] = 0;
 8004344:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8004348:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 800434c:	4b17      	ldr	r3, [pc, #92]	@ (80043ac <NLLS+0x3154>)
 800434e:	443b      	add	r3, r7
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f240 4157 	movw	r1, #1111	@ 0x457
 8004356:	fb03 f101 	mul.w	r1, r3, r1
 800435a:	4b15      	ldr	r3, [pc, #84]	@ (80043b0 <NLLS+0x3158>)
 800435c:	443b      	add	r3, r7
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	440b      	add	r3, r1
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
                for(int k = 0; k < N; k++)
 800436c:	2300      	movs	r3, #0
 800436e:	4a11      	ldr	r2, [pc, #68]	@ (80043b4 <NLLS+0x315c>)
 8004370:	443a      	add	r2, r7
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e078      	b.n	8004468 <NLLS+0x3210>
 8004376:	bf00      	nop
 8004378:	9999999a 	.word	0x9999999a
 800437c:	3fa99999 	.word	0x3fa99999
 8004380:	00016fb8 	.word	0x00016fb8
 8004384:	00016fbc 	.word	0x00016fbc
 8004388:	42c80000 	.word	0x42c80000
 800438c:	00016f6c 	.word	0x00016f6c
 8004390:	00016fe6 	.word	0x00016fe6
 8004394:	00016fa8 	.word	0x00016fa8
 8004398:	00016fa4 	.word	0x00016fa4
 800439c:	00016fa0 	.word	0x00016fa0
 80043a0:	ffff2c64 	.word	0xffff2c64
 80043a4:	00016fe8 	.word	0x00016fe8
 80043a8:	ffff2dcc 	.word	0xffff2dcc
 80043ac:	00016f9c 	.word	0x00016f9c
 80043b0:	00016f98 	.word	0x00016f98
 80043b4:	00016f94 	.word	0x00016f94
                {
                    mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 80043b8:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 80043bc:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 80043c0:	4b72      	ldr	r3, [pc, #456]	@ (800458c <NLLS+0x3334>)
 80043c2:	443b      	add	r3, r7
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f240 4157 	movw	r1, #1111	@ 0x457
 80043ca:	fb03 f101 	mul.w	r1, r3, r1
 80043ce:	4b70      	ldr	r3, [pc, #448]	@ (8004590 <NLLS+0x3338>)
 80043d0:	443b      	add	r3, r7
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	440b      	add	r3, r1
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	ed93 7a00 	vldr	s14, [r3]
 80043de:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80043e2:	443b      	add	r3, r7
 80043e4:	f5a3 7167 	sub.w	r1, r3, #924	@ 0x39c
 80043e8:	4b68      	ldr	r3, [pc, #416]	@ (800458c <NLLS+0x3334>)
 80043ea:	443b      	add	r3, r7
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	4a67      	ldr	r2, [pc, #412]	@ (8004594 <NLLS+0x333c>)
 80043f6:	443a      	add	r2, r7
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	edd3 6a00 	vldr	s13, [r3]
 8004404:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8004408:	443b      	add	r3, r7
 800440a:	4619      	mov	r1, r3
 800440c:	4b61      	ldr	r3, [pc, #388]	@ (8004594 <NLLS+0x333c>)
 800440e:	443b      	add	r3, r7
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f240 4257 	movw	r2, #1111	@ 0x457
 8004416:	fb03 f202 	mul.w	r2, r3, r2
 800441a:	4b5d      	ldr	r3, [pc, #372]	@ (8004590 <NLLS+0x3338>)
 800441c:	443b      	add	r3, r7
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	3bf0      	subs	r3, #240	@ 0xf0
 8004428:	edd3 7a00 	vldr	s15, [r3]
 800442c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004434:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8004438:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 800443c:	4b53      	ldr	r3, [pc, #332]	@ (800458c <NLLS+0x3334>)
 800443e:	443b      	add	r3, r7
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f240 4157 	movw	r1, #1111	@ 0x457
 8004446:	fb03 f101 	mul.w	r1, r3, r1
 800444a:	4b51      	ldr	r3, [pc, #324]	@ (8004590 <NLLS+0x3338>)
 800444c:	443b      	add	r3, r7
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	440b      	add	r3, r1
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	edc3 7a00 	vstr	s15, [r3]
                for(int k = 0; k < N; k++)
 800445a:	4b4e      	ldr	r3, [pc, #312]	@ (8004594 <NLLS+0x333c>)
 800445c:	443b      	add	r3, r7
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	4a4c      	ldr	r2, [pc, #304]	@ (8004594 <NLLS+0x333c>)
 8004464:	443a      	add	r2, r7
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b4a      	ldr	r3, [pc, #296]	@ (8004594 <NLLS+0x333c>)
 800446a:	443b      	add	r3, r7
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b08      	cmp	r3, #8
 8004470:	dda2      	ble.n	80043b8 <NLLS+0x3160>
            for(int j = 0; j < tam; j++)
 8004472:	4b47      	ldr	r3, [pc, #284]	@ (8004590 <NLLS+0x3338>)
 8004474:	443b      	add	r3, r7
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3301      	adds	r3, #1
 800447a:	4a45      	ldr	r2, [pc, #276]	@ (8004590 <NLLS+0x3338>)
 800447c:	443a      	add	r2, r7
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b43      	ldr	r3, [pc, #268]	@ (8004590 <NLLS+0x3338>)
 8004482:	443b      	add	r3, r7
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f240 4256 	movw	r2, #1110	@ 0x456
 800448a:	4293      	cmp	r3, r2
 800448c:	f77f af5a 	ble.w	8004344 <NLLS+0x30ec>
        for(int i = 0; i < N; i++)
 8004490:	4b3e      	ldr	r3, [pc, #248]	@ (800458c <NLLS+0x3334>)
 8004492:	443b      	add	r3, r7
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3301      	adds	r3, #1
 8004498:	4a3c      	ldr	r2, [pc, #240]	@ (800458c <NLLS+0x3334>)
 800449a:	443a      	add	r2, r7
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b3b      	ldr	r3, [pc, #236]	@ (800458c <NLLS+0x3334>)
 80044a0:	443b      	add	r3, r7
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	f77f af48 	ble.w	800433a <NLLS+0x30e2>
                }
            }
        }

        for(int i = 0; i < N; i++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004598 <NLLS+0x3340>)
 80044ae:	443a      	add	r2, r7
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e060      	b.n	8004576 <NLLS+0x331e>
        {
            Ht_e[i] = 0;
 80044b4:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80044b8:	443b      	add	r3, r7
 80044ba:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 80044be:	4b36      	ldr	r3, [pc, #216]	@ (8004598 <NLLS+0x3340>)
 80044c0:	443b      	add	r3, r7
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
            for(int j = 0; j < tam; j++)
 80044ce:	2300      	movs	r3, #0
 80044d0:	4a32      	ldr	r2, [pc, #200]	@ (800459c <NLLS+0x3344>)
 80044d2:	443a      	add	r2, r7
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e040      	b.n	800455a <NLLS+0x3302>
            {
                Ht_e[i] += mul_mat[i][j]*e[j];
 80044d8:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80044dc:	443b      	add	r3, r7
 80044de:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 80044e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004598 <NLLS+0x3340>)
 80044e4:	443b      	add	r3, r7
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	ed93 7a00 	vldr	s14, [r3]
 80044f0:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 80044f4:	f6a3 72d8 	subw	r2, r3, #4056	@ 0xfd8
 80044f8:	4b27      	ldr	r3, [pc, #156]	@ (8004598 <NLLS+0x3340>)
 80044fa:	443b      	add	r3, r7
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f240 4157 	movw	r1, #1111	@ 0x457
 8004502:	fb03 f101 	mul.w	r1, r3, r1
 8004506:	4b25      	ldr	r3, [pc, #148]	@ (800459c <NLLS+0x3344>)
 8004508:	443b      	add	r3, r7
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	440b      	add	r3, r1
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	edd3 6a00 	vldr	s13, [r3]
 8004516:	4b22      	ldr	r3, [pc, #136]	@ (80045a0 <NLLS+0x3348>)
 8004518:	443b      	add	r3, r7
 800451a:	f5a3 7256 	sub.w	r2, r3, #856	@ 0x358
 800451e:	4b1f      	ldr	r3, [pc, #124]	@ (800459c <NLLS+0x3344>)
 8004520:	443b      	add	r3, r7
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	edd3 7a00 	vldr	s15, [r3]
 800452c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004534:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 8004538:	443b      	add	r3, r7
 800453a:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 800453e:	4b16      	ldr	r3, [pc, #88]	@ (8004598 <NLLS+0x3340>)
 8004540:	443b      	add	r3, r7
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	edc3 7a00 	vstr	s15, [r3]
            for(int j = 0; j < tam; j++)
 800454c:	4b13      	ldr	r3, [pc, #76]	@ (800459c <NLLS+0x3344>)
 800454e:	443b      	add	r3, r7
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	4a11      	ldr	r2, [pc, #68]	@ (800459c <NLLS+0x3344>)
 8004556:	443a      	add	r2, r7
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b10      	ldr	r3, [pc, #64]	@ (800459c <NLLS+0x3344>)
 800455c:	443b      	add	r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f240 4256 	movw	r2, #1110	@ 0x456
 8004564:	4293      	cmp	r3, r2
 8004566:	ddb7      	ble.n	80044d8 <NLLS+0x3280>
        for(int i = 0; i < N; i++)
 8004568:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <NLLS+0x3340>)
 800456a:	443b      	add	r3, r7
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3301      	adds	r3, #1
 8004570:	4a09      	ldr	r2, [pc, #36]	@ (8004598 <NLLS+0x3340>)
 8004572:	443a      	add	r2, r7
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <NLLS+0x3340>)
 8004578:	443b      	add	r3, r7
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b08      	cmp	r3, #8
 800457e:	dd99      	ble.n	80044b4 <NLLS+0x325c>
            }
        }

        for(int i = 0; i < N; i++)
 8004580:	2300      	movs	r3, #0
 8004582:	4a08      	ldr	r2, [pc, #32]	@ (80045a4 <NLLS+0x334c>)
 8004584:	443a      	add	r2, r7
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	e03b      	b.n	8004602 <NLLS+0x33aa>
 800458a:	bf00      	nop
 800458c:	00016f9c 	.word	0x00016f9c
 8004590:	00016f98 	.word	0x00016f98
 8004594:	00016f94 	.word	0x00016f94
 8004598:	00016f90 	.word	0x00016f90
 800459c:	00016f8c 	.word	0x00016f8c
 80045a0:	00014fe8 	.word	0x00014fe8
 80045a4:	00016f88 	.word	0x00016f88
        {
            p0[i] += Ht_e[i];
 80045a8:	4b50      	ldr	r3, [pc, #320]	@ (80046ec <NLLS+0x3494>)
 80045aa:	443b      	add	r3, r7
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	f503 33b7 	add.w	r3, r3, #93696	@ 0x16e00
 80045b4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80045b8:	443b      	add	r3, r7
 80045ba:	3ba0      	subs	r3, #160	@ 0xa0
 80045bc:	ed93 7a00 	vldr	s14, [r3]
 80045c0:	f649 73e8 	movw	r3, #40936	@ 0x9fe8
 80045c4:	443b      	add	r3, r7
 80045c6:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 80045ca:	4b48      	ldr	r3, [pc, #288]	@ (80046ec <NLLS+0x3494>)
 80045cc:	443b      	add	r3, r7
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	edd3 7a00 	vldr	s15, [r3]
 80045d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045dc:	4b43      	ldr	r3, [pc, #268]	@ (80046ec <NLLS+0x3494>)
 80045de:	443b      	add	r3, r7
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	f503 33b7 	add.w	r3, r3, #93696	@ 0x16e00
 80045e8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80045ec:	443b      	add	r3, r7
 80045ee:	3ba0      	subs	r3, #160	@ 0xa0
 80045f0:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i < N; i++)
 80045f4:	4b3d      	ldr	r3, [pc, #244]	@ (80046ec <NLLS+0x3494>)
 80045f6:	443b      	add	r3, r7
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	4a3b      	ldr	r2, [pc, #236]	@ (80046ec <NLLS+0x3494>)
 80045fe:	443a      	add	r2, r7
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	4b3a      	ldr	r3, [pc, #232]	@ (80046ec <NLLS+0x3494>)
 8004604:	443b      	add	r3, r7
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b08      	cmp	r3, #8
 800460a:	ddcd      	ble.n	80045a8 <NLLS+0x3350>
        }

        passo++;
 800460c:	4b38      	ldr	r3, [pc, #224]	@ (80046f0 <NLLS+0x3498>)
 800460e:	443b      	add	r3, r7
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	3301      	adds	r3, #1
 8004614:	4a36      	ldr	r2, [pc, #216]	@ (80046f0 <NLLS+0x3498>)
 8004616:	443a      	add	r2, r7
 8004618:	7013      	strb	r3, [r2, #0]
    while(loop == 1)
 800461a:	4b36      	ldr	r3, [pc, #216]	@ (80046f4 <NLLS+0x349c>)
 800461c:	443b      	add	r3, r7
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	f43c ae65 	beq.w	80012f0 <NLLS+0x98>
    }
    p[0] = sx;
 8004626:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 800462a:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a31      	ldr	r2, [pc, #196]	@ (80046f8 <NLLS+0x34a0>)
 8004632:	443a      	add	r2, r7
 8004634:	6812      	ldr	r2, [r2, #0]
 8004636:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8004638:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 800463c:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3304      	adds	r3, #4
 8004644:	4a2d      	ldr	r2, [pc, #180]	@ (80046fc <NLLS+0x34a4>)
 8004646:	443a      	add	r2, r7
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 800464c:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8004650:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	4a29      	ldr	r2, [pc, #164]	@ (8004700 <NLLS+0x34a8>)
 800465a:	443a      	add	r2, r7
 800465c:	6812      	ldr	r2, [r2, #0]
 800465e:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8004660:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8004664:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	4a25      	ldr	r2, [pc, #148]	@ (8004704 <NLLS+0x34ac>)
 800466e:	443a      	add	r2, r7
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8004674:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 8004678:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3310      	adds	r3, #16
 8004680:	4a21      	ldr	r2, [pc, #132]	@ (8004708 <NLLS+0x34b0>)
 8004682:	443a      	add	r2, r7
 8004684:	6812      	ldr	r2, [r2, #0]
 8004686:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 8004688:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 800468c:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	4a1d      	ldr	r2, [pc, #116]	@ (800470c <NLLS+0x34b4>)
 8004696:	443a      	add	r2, r7
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 800469c:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 80046a0:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3318      	adds	r3, #24
 80046a8:	4a19      	ldr	r2, [pc, #100]	@ (8004710 <NLLS+0x34b8>)
 80046aa:	443a      	add	r2, r7
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 80046b0:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 80046b4:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	331c      	adds	r3, #28
 80046bc:	4a15      	ldr	r2, [pc, #84]	@ (8004714 <NLLS+0x34bc>)
 80046be:	443a      	add	r2, r7
 80046c0:	6812      	ldr	r2, [r2, #0]
 80046c2:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 80046c4:	f607 73e8 	addw	r3, r7, #4072	@ 0xfe8
 80046c8:	f6a3 73e8 	subw	r3, r3, #4072	@ 0xfe8
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3320      	adds	r3, #32
 80046d0:	4a11      	ldr	r2, [pc, #68]	@ (8004718 <NLLS+0x34c0>)
 80046d2:	443a      	add	r2, r7
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	601a      	str	r2, [r3, #0]

    return passo;
 80046d8:	4b05      	ldr	r3, [pc, #20]	@ (80046f0 <NLLS+0x3498>)
 80046da:	443b      	add	r3, r7
 80046dc:	781b      	ldrb	r3, [r3, #0]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	f507 37b7 	add.w	r7, r7, #93696	@ 0x16e00
 80046e4:	f507 77f4 	add.w	r7, r7, #488	@ 0x1e8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bdb0      	pop	{r4, r5, r7, pc}
 80046ec:	00016f88 	.word	0x00016f88
 80046f0:	00016fe7 	.word	0x00016fe7
 80046f4:	00016fe6 	.word	0x00016fe6
 80046f8:	00016fe0 	.word	0x00016fe0
 80046fc:	00016fdc 	.word	0x00016fdc
 8004700:	00016fd8 	.word	0x00016fd8
 8004704:	00016fd4 	.word	0x00016fd4
 8004708:	00016fd0 	.word	0x00016fd0
 800470c:	00016fcc 	.word	0x00016fcc
 8004710:	00016fc8 	.word	0x00016fc8
 8004714:	00016fc4 	.word	0x00016fc4
 8004718:	00016fc0 	.word	0x00016fc0

0800471c <ETS>:

void ETS(float *mx, float *my, float *mz, float *p)
{
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	ed2d 8b02 	vpush	{d8}
 8004722:	f5ad 3da6 	sub.w	sp, sp, #84992	@ 0x14c00
 8004726:	b0c9      	sub	sp, #292	@ 0x124
 8004728:	af00      	add	r7, sp, #0
 800472a:	f507 6452 	add.w	r4, r7, #3360	@ 0xd20
 800472e:	f6a4 5414 	subw	r4, r4, #3348	@ 0xd14
 8004732:	6020      	str	r0, [r4, #0]
 8004734:	f507 6052 	add.w	r0, r7, #3360	@ 0xd20
 8004738:	f6a0 5018 	subw	r0, r0, #3352	@ 0xd18
 800473c:	6001      	str	r1, [r0, #0]
 800473e:	f507 6152 	add.w	r1, r7, #3360	@ 0xd20
 8004742:	f6a1 511c 	subw	r1, r1, #3356	@ 0xd1c
 8004746:	600a      	str	r2, [r1, #0]
 8004748:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800474c:	f5a2 6252 	sub.w	r2, r2, #3360	@ 0xd20
 8004750:	6013      	str	r3, [r2, #0]
    //Cria a matriz H
    float mat_H[N][tam], my_2[tam];
    float H_Ht[N][N], inv[N][N];
    float mul_mat[N][tam];
    float X[N];
    float psi7 = 0, psi8 = 0, divs = 0, n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, bx = 0, by = 0, bz = 0, sx = 0, sy = 0, sz = 0, rho = 0, phi = 0, lambida = 0;
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	4a42      	ldr	r2, [pc, #264]	@ (8004860 <ETS+0x144>)
 8004758:	443a      	add	r2, r7
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	4a40      	ldr	r2, [pc, #256]	@ (8004864 <ETS+0x148>)
 8004762:	443a      	add	r2, r7
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	4a3f      	ldr	r2, [pc, #252]	@ (8004868 <ETS+0x14c>)
 800476c:	443a      	add	r2, r7
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	4a3d      	ldr	r2, [pc, #244]	@ (800486c <ETS+0x150>)
 8004776:	443a      	add	r2, r7
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	4a3c      	ldr	r2, [pc, #240]	@ (8004870 <ETS+0x154>)
 8004780:	443a      	add	r2, r7
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	4a3a      	ldr	r2, [pc, #232]	@ (8004874 <ETS+0x158>)
 800478a:	443a      	add	r2, r7
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	4a39      	ldr	r2, [pc, #228]	@ (8004878 <ETS+0x15c>)
 8004794:	443a      	add	r2, r7
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	4a37      	ldr	r2, [pc, #220]	@ (800487c <ETS+0x160>)
 800479e:	443a      	add	r2, r7
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	4a36      	ldr	r2, [pc, #216]	@ (8004880 <ETS+0x164>)
 80047a8:	443a      	add	r2, r7
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	4a34      	ldr	r2, [pc, #208]	@ (8004884 <ETS+0x168>)
 80047b2:	443a      	add	r2, r7
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	4a33      	ldr	r2, [pc, #204]	@ (8004888 <ETS+0x16c>)
 80047bc:	443a      	add	r2, r7
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	4a31      	ldr	r2, [pc, #196]	@ (800488c <ETS+0x170>)
 80047c6:	443a      	add	r2, r7
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	f04f 0300 	mov.w	r3, #0
 80047ce:	4a30      	ldr	r2, [pc, #192]	@ (8004890 <ETS+0x174>)
 80047d0:	443a      	add	r2, r7
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004894 <ETS+0x178>)
 80047da:	443a      	add	r2, r7
 80047dc:	6013      	str	r3, [r2, #0]
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004898 <ETS+0x17c>)
 80047e4:	443a      	add	r2, r7
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	4a2b      	ldr	r2, [pc, #172]	@ (800489c <ETS+0x180>)
 80047ee:	443a      	add	r2, r7
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	4a2a      	ldr	r2, [pc, #168]	@ (80048a0 <ETS+0x184>)
 80047f8:	443a      	add	r2, r7
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	4a28      	ldr	r2, [pc, #160]	@ (80048a4 <ETS+0x188>)
 8004802:	443a      	add	r2, r7
 8004804:	6013      	str	r3, [r2, #0]
    float X1_2 = 0, X2_2 = 0, X3_2 = 0, X4_2 = 0, X5_2 = 0, X6_2 = 0, X7_2 = 0, X8_2 = 0;
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	4a27      	ldr	r2, [pc, #156]	@ (80048a8 <ETS+0x18c>)
 800480c:	443a      	add	r2, r7
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <ETS+0x190>)
 8004816:	443a      	add	r2, r7
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	4a24      	ldr	r2, [pc, #144]	@ (80048b0 <ETS+0x194>)
 8004820:	443a      	add	r2, r7
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	4a22      	ldr	r2, [pc, #136]	@ (80048b4 <ETS+0x198>)
 800482a:	443a      	add	r2, r7
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	4a21      	ldr	r2, [pc, #132]	@ (80048b8 <ETS+0x19c>)
 8004834:	443a      	add	r2, r7
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <ETS+0x1a0>)
 800483e:	443a      	add	r2, r7
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	4a1e      	ldr	r2, [pc, #120]	@ (80048c0 <ETS+0x1a4>)
 8004848:	443a      	add	r2, r7
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	4a1c      	ldr	r2, [pc, #112]	@ (80048c4 <ETS+0x1a8>)
 8004852:	443a      	add	r2, r7
 8004854:	6013      	str	r3, [r2, #0]
    for(int i=0; i < tam; i++)
 8004856:	2300      	movs	r3, #0
 8004858:	4a1b      	ldr	r2, [pc, #108]	@ (80048c8 <ETS+0x1ac>)
 800485a:	443a      	add	r2, r7
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e186      	b.n	8004b6e <ETS+0x452>
 8004860:	00014cf8 	.word	0x00014cf8
 8004864:	00014cf4 	.word	0x00014cf4
 8004868:	00014cf0 	.word	0x00014cf0
 800486c:	00014cec 	.word	0x00014cec
 8004870:	00014ce8 	.word	0x00014ce8
 8004874:	00014ce4 	.word	0x00014ce4
 8004878:	00014ce0 	.word	0x00014ce0
 800487c:	00014cdc 	.word	0x00014cdc
 8004880:	00014cd8 	.word	0x00014cd8
 8004884:	00014cd4 	.word	0x00014cd4
 8004888:	00014cd0 	.word	0x00014cd0
 800488c:	00014ccc 	.word	0x00014ccc
 8004890:	00014cc8 	.word	0x00014cc8
 8004894:	00014cc4 	.word	0x00014cc4
 8004898:	00014cc0 	.word	0x00014cc0
 800489c:	00014cbc 	.word	0x00014cbc
 80048a0:	00014cb8 	.word	0x00014cb8
 80048a4:	00014cb4 	.word	0x00014cb4
 80048a8:	00014cb0 	.word	0x00014cb0
 80048ac:	00014cac 	.word	0x00014cac
 80048b0:	00014ca8 	.word	0x00014ca8
 80048b4:	00014ca4 	.word	0x00014ca4
 80048b8:	00014ca0 	.word	0x00014ca0
 80048bc:	00014c9c 	.word	0x00014c9c
 80048c0:	00014c98 	.word	0x00014c98
 80048c4:	00014c94 	.word	0x00014c94
 80048c8:	00014d1c 	.word	0x00014d1c
    {
        mat_H[0][i] = mx[i]*mx[i];
 80048cc:	4bb1      	ldr	r3, [pc, #708]	@ (8004b94 <ETS+0x478>)
 80048ce:	443b      	add	r3, r7
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80048d8:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	4413      	add	r3, r2
 80048e0:	ed93 7a00 	vldr	s14, [r3]
 80048e4:	4bab      	ldr	r3, [pc, #684]	@ (8004b94 <ETS+0x478>)
 80048e6:	443b      	add	r3, r7
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80048f0:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	4413      	add	r3, r2
 80048f8:	edd3 7a00 	vldr	s15, [r3]
 80048fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004900:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004904:	443b      	add	r3, r7
 8004906:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 800490a:	4ba2      	ldr	r3, [pc, #648]	@ (8004b94 <ETS+0x478>)
 800490c:	443b      	add	r3, r7
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	edc3 7a00 	vstr	s15, [r3]
        mat_H[1][i] = mx[i]*my[i];
 8004918:	4b9e      	ldr	r3, [pc, #632]	@ (8004b94 <ETS+0x478>)
 800491a:	443b      	add	r3, r7
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004924:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	4413      	add	r3, r2
 800492c:	ed93 7a00 	vldr	s14, [r3]
 8004930:	4b98      	ldr	r3, [pc, #608]	@ (8004b94 <ETS+0x478>)
 8004932:	443b      	add	r3, r7
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800493c:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8004940:	6812      	ldr	r2, [r2, #0]
 8004942:	4413      	add	r3, r2
 8004944:	edd3 7a00 	vldr	s15, [r3]
 8004948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494c:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004950:	443b      	add	r3, r7
 8004952:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004956:	4b8f      	ldr	r3, [pc, #572]	@ (8004b94 <ETS+0x478>)
 8004958:	443b      	add	r3, r7
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f203 4357 	addw	r3, r3, #1111	@ 0x457
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	edc3 7a00 	vstr	s15, [r3]
        mat_H[2][i] = mx[i]*mz[i];
 8004968:	4b8a      	ldr	r3, [pc, #552]	@ (8004b94 <ETS+0x478>)
 800496a:	443b      	add	r3, r7
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004974:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	4413      	add	r3, r2
 800497c:	ed93 7a00 	vldr	s14, [r3]
 8004980:	4b84      	ldr	r3, [pc, #528]	@ (8004b94 <ETS+0x478>)
 8004982:	443b      	add	r3, r7
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 800498c:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8004990:	6812      	ldr	r2, [r2, #0]
 8004992:	4413      	add	r3, r2
 8004994:	edd3 7a00 	vldr	s15, [r3]
 8004998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499c:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 80049a0:	443b      	add	r3, r7
 80049a2:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 80049a6:	4b7b      	ldr	r3, [pc, #492]	@ (8004b94 <ETS+0x478>)
 80049a8:	443b      	add	r3, r7
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f603 03ae 	addw	r3, r3, #2222	@ 0x8ae
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	edc3 7a00 	vstr	s15, [r3]
        mat_H[3][i] = my[i]*mz[i];
 80049b8:	4b76      	ldr	r3, [pc, #472]	@ (8004b94 <ETS+0x478>)
 80049ba:	443b      	add	r3, r7
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80049c4:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	4413      	add	r3, r2
 80049cc:	ed93 7a00 	vldr	s14, [r3]
 80049d0:	4b70      	ldr	r3, [pc, #448]	@ (8004b94 <ETS+0x478>)
 80049d2:	443b      	add	r3, r7
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80049dc:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	4413      	add	r3, r2
 80049e4:	edd3 7a00 	vldr	s15, [r3]
 80049e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ec:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 80049f0:	443b      	add	r3, r7
 80049f2:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 80049f6:	4b67      	ldr	r3, [pc, #412]	@ (8004b94 <ETS+0x478>)
 80049f8:	443b      	add	r3, r7
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f603 5305 	addw	r3, r3, #3333	@ 0xd05
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	edc3 7a00 	vstr	s15, [r3]
        mat_H[4][i] = mz[i]*mz[i];
 8004a08:	4b62      	ldr	r3, [pc, #392]	@ (8004b94 <ETS+0x478>)
 8004a0a:	443b      	add	r3, r7
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004a14:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8004a18:	6812      	ldr	r2, [r2, #0]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	ed93 7a00 	vldr	s14, [r3]
 8004a20:	4b5c      	ldr	r3, [pc, #368]	@ (8004b94 <ETS+0x478>)
 8004a22:	443b      	add	r3, r7
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004a2c:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	4413      	add	r3, r2
 8004a34:	edd3 7a00 	vldr	s15, [r3]
 8004a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3c:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004a40:	443b      	add	r3, r7
 8004a42:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004a46:	4b53      	ldr	r3, [pc, #332]	@ (8004b94 <ETS+0x478>)
 8004a48:	443b      	add	r3, r7
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	f241 135c 	movw	r3, #4444	@ 0x115c
 8004a50:	440b      	add	r3, r1
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	edc3 7a00 	vstr	s15, [r3]
        mat_H[5][i] = mx[i];
 8004a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8004b94 <ETS+0x478>)
 8004a5c:	443b      	add	r3, r7
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004a66:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004a74:	443b      	add	r3, r7
 8004a76:	f6a3 41c8 	subw	r1, r3, #3272	@ 0xcc8
 8004a7a:	4b46      	ldr	r3, [pc, #280]	@ (8004b94 <ETS+0x478>)
 8004a7c:	443b      	add	r3, r7
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8004a84:	4403      	add	r3, r0
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	601a      	str	r2, [r3, #0]
        mat_H[6][i] = my[i];
 8004a8c:	4b41      	ldr	r3, [pc, #260]	@ (8004b94 <ETS+0x478>)
 8004a8e:	443b      	add	r3, r7
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004a98:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004aa6:	443b      	add	r3, r7
 8004aa8:	f6a3 41c8 	subw	r1, r3, #3272	@ 0xcc8
 8004aac:	4b39      	ldr	r3, [pc, #228]	@ (8004b94 <ETS+0x478>)
 8004aae:	443b      	add	r3, r7
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	f641 230a 	movw	r3, #6666	@ 0x1a0a
 8004ab6:	4403      	add	r3, r0
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	601a      	str	r2, [r3, #0]
        mat_H[7][i] = mz[i];
 8004abe:	4b35      	ldr	r3, [pc, #212]	@ (8004b94 <ETS+0x478>)
 8004ac0:	443b      	add	r3, r7
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004aca:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004ad8:	443b      	add	r3, r7
 8004ada:	f6a3 41c8 	subw	r1, r3, #3272	@ 0xcc8
 8004ade:	4b2d      	ldr	r3, [pc, #180]	@ (8004b94 <ETS+0x478>)
 8004ae0:	443b      	add	r3, r7
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	f641 6361 	movw	r3, #7777	@ 0x1e61
 8004ae8:	4403      	add	r3, r0
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	601a      	str	r2, [r3, #0]
        mat_H[8][i] = 1;
 8004af0:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004af4:	443b      	add	r3, r7
 8004af6:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004afa:	4b26      	ldr	r3, [pc, #152]	@ (8004b94 <ETS+0x478>)
 8004afc:	443b      	add	r3, r7
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8004b04:	440b      	add	r3, r1
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004b0e:	601a      	str	r2, [r3, #0]
        my_2[i] = -(my[i]*my[i]);
 8004b10:	4b20      	ldr	r3, [pc, #128]	@ (8004b94 <ETS+0x478>)
 8004b12:	443b      	add	r3, r7
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004b1c:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8004b20:	6812      	ldr	r2, [r2, #0]
 8004b22:	4413      	add	r3, r2
 8004b24:	ed93 7a00 	vldr	s14, [r3]
 8004b28:	4b1a      	ldr	r3, [pc, #104]	@ (8004b94 <ETS+0x478>)
 8004b2a:	443b      	add	r3, r7
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8004b34:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	edd3 7a00 	vldr	s15, [r3]
 8004b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b44:	eef1 7a67 	vneg.f32	s15, s15
 8004b48:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8004b4c:	443b      	add	r3, r7
 8004b4e:	f6a3 6224 	subw	r2, r3, #3620	@ 0xe24
 8004b52:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <ETS+0x478>)
 8004b54:	443b      	add	r3, r7
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0; i < tam; i++)
 8004b60:	4b0c      	ldr	r3, [pc, #48]	@ (8004b94 <ETS+0x478>)
 8004b62:	443b      	add	r3, r7
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	3301      	adds	r3, #1
 8004b68:	4a0a      	ldr	r2, [pc, #40]	@ (8004b94 <ETS+0x478>)
 8004b6a:	443a      	add	r2, r7
 8004b6c:	6013      	str	r3, [r2, #0]
 8004b6e:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <ETS+0x478>)
 8004b70:	443b      	add	r3, r7
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f240 4256 	movw	r2, #1110	@ 0x456
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	f77f aea7 	ble.w	80048cc <ETS+0x1b0>
    }

    //Multiplicação da matriz H por sua transposta
    for(int i=0; i < N; i++)
 8004b7e:	2300      	movs	r3, #0
 8004b80:	4a05      	ldr	r2, [pc, #20]	@ (8004b98 <ETS+0x47c>)
 8004b82:	443a      	add	r2, r7
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e098      	b.n	8004cba <ETS+0x59e>
    {
        for(int j=0; j < N; j++)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4a04      	ldr	r2, [pc, #16]	@ (8004b9c <ETS+0x480>)
 8004b8c:	443a      	add	r2, r7
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	e086      	b.n	8004ca0 <ETS+0x584>
 8004b92:	bf00      	nop
 8004b94:	00014d1c 	.word	0x00014d1c
 8004b98:	00014d18 	.word	0x00014d18
 8004b9c:	00014d14 	.word	0x00014d14
        {
            H_Ht[i][j] = 0;
 8004ba0:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8004ba4:	443b      	add	r3, r7
 8004ba6:	f6a3 7168 	subw	r1, r3, #3944	@ 0xf68
 8004baa:	4ba7      	ldr	r3, [pc, #668]	@ (8004e48 <ETS+0x72c>)
 8004bac:	443b      	add	r3, r7
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	4aa5      	ldr	r2, [pc, #660]	@ (8004e4c <ETS+0x730>)
 8004bb8:	443a      	add	r2, r7
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
            for(int k = 0; k < tam; k++)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4aa1      	ldr	r2, [pc, #644]	@ (8004e50 <ETS+0x734>)
 8004bcc:	443a      	add	r2, r7
 8004bce:	6013      	str	r3, [r2, #0]
 8004bd0:	e058      	b.n	8004c84 <ETS+0x568>
            {
                H_Ht[i][j] += mat_H[i][k]*mat_H[j][k];
 8004bd2:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8004bd6:	443b      	add	r3, r7
 8004bd8:	f6a3 7168 	subw	r1, r3, #3944	@ 0xf68
 8004bdc:	4b9a      	ldr	r3, [pc, #616]	@ (8004e48 <ETS+0x72c>)
 8004bde:	443b      	add	r3, r7
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4613      	mov	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4413      	add	r3, r2
 8004be8:	4a98      	ldr	r2, [pc, #608]	@ (8004e4c <ETS+0x730>)
 8004bea:	443a      	add	r2, r7
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	ed93 7a00 	vldr	s14, [r3]
 8004bf8:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004bfc:	443b      	add	r3, r7
 8004bfe:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004c02:	4b91      	ldr	r3, [pc, #580]	@ (8004e48 <ETS+0x72c>)
 8004c04:	443b      	add	r3, r7
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f240 4157 	movw	r1, #1111	@ 0x457
 8004c0c:	fb03 f101 	mul.w	r1, r3, r1
 8004c10:	4b8f      	ldr	r3, [pc, #572]	@ (8004e50 <ETS+0x734>)
 8004c12:	443b      	add	r3, r7
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	440b      	add	r3, r1
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	edd3 6a00 	vldr	s13, [r3]
 8004c20:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004c24:	443b      	add	r3, r7
 8004c26:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004c2a:	4b88      	ldr	r3, [pc, #544]	@ (8004e4c <ETS+0x730>)
 8004c2c:	443b      	add	r3, r7
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f240 4157 	movw	r1, #1111	@ 0x457
 8004c34:	fb03 f101 	mul.w	r1, r3, r1
 8004c38:	4b85      	ldr	r3, [pc, #532]	@ (8004e50 <ETS+0x734>)
 8004c3a:	443b      	add	r3, r7
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	440b      	add	r3, r1
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	edd3 7a00 	vldr	s15, [r3]
 8004c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c50:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8004c54:	443b      	add	r3, r7
 8004c56:	f6a3 7168 	subw	r1, r3, #3944	@ 0xf68
 8004c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e48 <ETS+0x72c>)
 8004c5c:	443b      	add	r3, r7
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4413      	add	r3, r2
 8004c66:	4a79      	ldr	r2, [pc, #484]	@ (8004e4c <ETS+0x730>)
 8004c68:	443a      	add	r2, r7
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < tam; k++)
 8004c76:	4b76      	ldr	r3, [pc, #472]	@ (8004e50 <ETS+0x734>)
 8004c78:	443b      	add	r3, r7
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	4a74      	ldr	r2, [pc, #464]	@ (8004e50 <ETS+0x734>)
 8004c80:	443a      	add	r2, r7
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	4b72      	ldr	r3, [pc, #456]	@ (8004e50 <ETS+0x734>)
 8004c86:	443b      	add	r3, r7
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f240 4256 	movw	r2, #1110	@ 0x456
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	dd9f      	ble.n	8004bd2 <ETS+0x4b6>
        for(int j=0; j < N; j++)
 8004c92:	4b6e      	ldr	r3, [pc, #440]	@ (8004e4c <ETS+0x730>)
 8004c94:	443b      	add	r3, r7
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	4a6c      	ldr	r2, [pc, #432]	@ (8004e4c <ETS+0x730>)
 8004c9c:	443a      	add	r2, r7
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8004e4c <ETS+0x730>)
 8004ca2:	443b      	add	r3, r7
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	f77f af7a 	ble.w	8004ba0 <ETS+0x484>
    for(int i=0; i < N; i++)
 8004cac:	4b66      	ldr	r3, [pc, #408]	@ (8004e48 <ETS+0x72c>)
 8004cae:	443b      	add	r3, r7
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	4a64      	ldr	r2, [pc, #400]	@ (8004e48 <ETS+0x72c>)
 8004cb6:	443a      	add	r2, r7
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b63      	ldr	r3, [pc, #396]	@ (8004e48 <ETS+0x72c>)
 8004cbc:	443b      	add	r3, r7
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	f77f af61 	ble.w	8004b88 <ETS+0x46c>
            }
        }
    }

    inverter_matriz(H_Ht, inv);
 8004cc6:	4a63      	ldr	r2, [pc, #396]	@ (8004e54 <ETS+0x738>)
 8004cc8:	4b63      	ldr	r3, [pc, #396]	@ (8004e58 <ETS+0x73c>)
 8004cca:	4413      	add	r3, r2
 8004ccc:	19da      	adds	r2, r3, r7
 8004cce:	4b63      	ldr	r3, [pc, #396]	@ (8004e5c <ETS+0x740>)
 8004cd0:	f503 33a6 	add.w	r3, r3, #84992	@ 0x14c00
 8004cd4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004cd8:	443b      	add	r3, r7
 8004cda:	4611      	mov	r1, r2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7fc f9a1 	bl	8001024 <inverter_matriz>

    //Multiplica a inversa por H transposta
    for(int i=0; i < N; i++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	4a5e      	ldr	r2, [pc, #376]	@ (8004e60 <ETS+0x744>)
 8004ce6:	443a      	add	r2, r7
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e090      	b.n	8004e0e <ETS+0x6f2>
    {
        for(int j=0; j < tam; j++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	4a5d      	ldr	r2, [pc, #372]	@ (8004e64 <ETS+0x748>)
 8004cf0:	443a      	add	r2, r7
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	e07c      	b.n	8004df0 <ETS+0x6d4>
        {
            mul_mat[i][j] = 0;
 8004cf6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004cfa:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004cfe:	4b58      	ldr	r3, [pc, #352]	@ (8004e60 <ETS+0x744>)
 8004d00:	443b      	add	r3, r7
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f240 4157 	movw	r1, #1111	@ 0x457
 8004d08:	fb03 f101 	mul.w	r1, r3, r1
 8004d0c:	4b55      	ldr	r3, [pc, #340]	@ (8004e64 <ETS+0x748>)
 8004d0e:	443b      	add	r3, r7
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	440b      	add	r3, r1
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
            for(int k=0; k < N; k++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	4a51      	ldr	r2, [pc, #324]	@ (8004e68 <ETS+0x74c>)
 8004d22:	443a      	add	r2, r7
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	e057      	b.n	8004dd8 <ETS+0x6bc>
            {
                mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8004d28:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004d2c:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004d30:	4b4b      	ldr	r3, [pc, #300]	@ (8004e60 <ETS+0x744>)
 8004d32:	443b      	add	r3, r7
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f240 4157 	movw	r1, #1111	@ 0x457
 8004d3a:	fb03 f101 	mul.w	r1, r3, r1
 8004d3e:	4b49      	ldr	r3, [pc, #292]	@ (8004e64 <ETS+0x748>)
 8004d40:	443b      	add	r3, r7
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	440b      	add	r3, r1
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	ed93 7a00 	vldr	s14, [r3]
 8004d4e:	f649 5320 	movw	r3, #40224	@ 0x9d20
 8004d52:	443b      	add	r3, r7
 8004d54:	4619      	mov	r1, r3
 8004d56:	4b42      	ldr	r3, [pc, #264]	@ (8004e60 <ETS+0x744>)
 8004d58:	443b      	add	r3, r7
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4413      	add	r3, r2
 8004d62:	4a41      	ldr	r2, [pc, #260]	@ (8004e68 <ETS+0x74c>)
 8004d64:	443a      	add	r2, r7
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3bac      	subs	r3, #172	@ 0xac
 8004d70:	edd3 6a00 	vldr	s13, [r3]
 8004d74:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8004d78:	443b      	add	r3, r7
 8004d7a:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8004d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e68 <ETS+0x74c>)
 8004d80:	443b      	add	r3, r7
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f240 4157 	movw	r1, #1111	@ 0x457
 8004d88:	fb03 f101 	mul.w	r1, r3, r1
 8004d8c:	4b35      	ldr	r3, [pc, #212]	@ (8004e64 <ETS+0x748>)
 8004d8e:	443b      	add	r3, r7
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	440b      	add	r3, r1
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	edd3 7a00 	vldr	s15, [r3]
 8004d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004da8:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004dac:	4b2c      	ldr	r3, [pc, #176]	@ (8004e60 <ETS+0x744>)
 8004dae:	443b      	add	r3, r7
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f240 4157 	movw	r1, #1111	@ 0x457
 8004db6:	fb03 f101 	mul.w	r1, r3, r1
 8004dba:	4b2a      	ldr	r3, [pc, #168]	@ (8004e64 <ETS+0x748>)
 8004dbc:	443b      	add	r3, r7
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	440b      	add	r3, r1
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	edc3 7a00 	vstr	s15, [r3]
            for(int k=0; k < N; k++)
 8004dca:	4b27      	ldr	r3, [pc, #156]	@ (8004e68 <ETS+0x74c>)
 8004dcc:	443b      	add	r3, r7
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	4a25      	ldr	r2, [pc, #148]	@ (8004e68 <ETS+0x74c>)
 8004dd4:	443a      	add	r2, r7
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	4b23      	ldr	r3, [pc, #140]	@ (8004e68 <ETS+0x74c>)
 8004dda:	443b      	add	r3, r7
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	dda2      	ble.n	8004d28 <ETS+0x60c>
        for(int j=0; j < tam; j++)
 8004de2:	4b20      	ldr	r3, [pc, #128]	@ (8004e64 <ETS+0x748>)
 8004de4:	443b      	add	r3, r7
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	4a1e      	ldr	r2, [pc, #120]	@ (8004e64 <ETS+0x748>)
 8004dec:	443a      	add	r2, r7
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e64 <ETS+0x748>)
 8004df2:	443b      	add	r3, r7
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f240 4256 	movw	r2, #1110	@ 0x456
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	f77f af7b 	ble.w	8004cf6 <ETS+0x5da>
    for(int i=0; i < N; i++)
 8004e00:	4b17      	ldr	r3, [pc, #92]	@ (8004e60 <ETS+0x744>)
 8004e02:	443b      	add	r3, r7
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3301      	adds	r3, #1
 8004e08:	4a15      	ldr	r2, [pc, #84]	@ (8004e60 <ETS+0x744>)
 8004e0a:	443a      	add	r2, r7
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	4b14      	ldr	r3, [pc, #80]	@ (8004e60 <ETS+0x744>)
 8004e10:	443b      	add	r3, r7
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	f77f af69 	ble.w	8004cec <ETS+0x5d0>
            }
        }
    }

    //Resultado da psedo-inversa
    for(int i=0; i < N; i++)
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	4a13      	ldr	r2, [pc, #76]	@ (8004e6c <ETS+0x750>)
 8004e1e:	443a      	add	r2, r7
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e075      	b.n	8004f10 <ETS+0x7f4>
    {
        X[i] = 0;
 8004e24:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e28:	f6a3 520c 	subw	r2, r3, #3340	@ 0xd0c
 8004e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e6c <ETS+0x750>)
 8004e2e:	443b      	add	r3, r7
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
        for(int j=0; j < tam; j++)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e70 <ETS+0x754>)
 8004e40:	443a      	add	r2, r7
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	e056      	b.n	8004ef4 <ETS+0x7d8>
 8004e46:	bf00      	nop
 8004e48:	00014d18 	.word	0x00014d18
 8004e4c:	00014d14 	.word	0x00014d14
 8004e50:	00014d10 	.word	0x00014d10
 8004e54:	ffff4f54 	.word	0xffff4f54
 8004e58:	00014d20 	.word	0x00014d20
 8004e5c:	ffff5098 	.word	0xffff5098
 8004e60:	00014d0c 	.word	0x00014d0c
 8004e64:	00014d08 	.word	0x00014d08
 8004e68:	00014d04 	.word	0x00014d04
 8004e6c:	00014d00 	.word	0x00014d00
 8004e70:	00014cfc 	.word	0x00014cfc
        {
            X[i] += mul_mat[i][j]*my_2[j];
 8004e74:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e78:	f6a3 520c 	subw	r2, r3, #3340	@ 0xd0c
 8004e7c:	4bdb      	ldr	r3, [pc, #876]	@ (80051ec <ETS+0xad0>)
 8004e7e:	443b      	add	r3, r7
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	ed93 7a00 	vldr	s14, [r3]
 8004e8a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004e8e:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8004e92:	4bd6      	ldr	r3, [pc, #856]	@ (80051ec <ETS+0xad0>)
 8004e94:	443b      	add	r3, r7
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f240 4157 	movw	r1, #1111	@ 0x457
 8004e9c:	fb03 f101 	mul.w	r1, r3, r1
 8004ea0:	4bd3      	ldr	r3, [pc, #844]	@ (80051f0 <ETS+0xad4>)
 8004ea2:	443b      	add	r3, r7
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	440b      	add	r3, r1
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	edd3 6a00 	vldr	s13, [r3]
 8004eb0:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8004eb4:	443b      	add	r3, r7
 8004eb6:	f6a3 6224 	subw	r2, r3, #3620	@ 0xe24
 8004eba:	4bcd      	ldr	r3, [pc, #820]	@ (80051f0 <ETS+0xad4>)
 8004ebc:	443b      	add	r3, r7
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	edd3 7a00 	vldr	s15, [r3]
 8004ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004ed4:	f6a3 520c 	subw	r2, r3, #3340	@ 0xd0c
 8004ed8:	4bc4      	ldr	r3, [pc, #784]	@ (80051ec <ETS+0xad0>)
 8004eda:	443b      	add	r3, r7
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	edc3 7a00 	vstr	s15, [r3]
        for(int j=0; j < tam; j++)
 8004ee6:	4bc2      	ldr	r3, [pc, #776]	@ (80051f0 <ETS+0xad4>)
 8004ee8:	443b      	add	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3301      	adds	r3, #1
 8004eee:	4ac0      	ldr	r2, [pc, #768]	@ (80051f0 <ETS+0xad4>)
 8004ef0:	443a      	add	r2, r7
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	4bbe      	ldr	r3, [pc, #760]	@ (80051f0 <ETS+0xad4>)
 8004ef6:	443b      	add	r3, r7
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f240 4256 	movw	r2, #1110	@ 0x456
 8004efe:	4293      	cmp	r3, r2
 8004f00:	ddb8      	ble.n	8004e74 <ETS+0x758>
    for(int i=0; i < N; i++)
 8004f02:	4bba      	ldr	r3, [pc, #744]	@ (80051ec <ETS+0xad0>)
 8004f04:	443b      	add	r3, r7
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	4ab8      	ldr	r2, [pc, #736]	@ (80051ec <ETS+0xad0>)
 8004f0c:	443a      	add	r2, r7
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	4bb6      	ldr	r3, [pc, #728]	@ (80051ec <ETS+0xad0>)
 8004f12:	443b      	add	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	dd84      	ble.n	8004e24 <ETS+0x708>
        }
    }


    // Segundo passo, encontrando os parâmetros
    X1_2 = X[1]*X[1];
 8004f1a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f1e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f22:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f26:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f2a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	4baf      	ldr	r3, [pc, #700]	@ (80051f4 <ETS+0xad8>)
 8004f38:	443b      	add	r3, r7
 8004f3a:	edc3 7a00 	vstr	s15, [r3]
    X2_2 = X[2]*X[2];
 8004f3e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f42:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f46:	ed93 7a02 	vldr	s14, [r3, #8]
 8004f4a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f4e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f52:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5a:	4ba7      	ldr	r3, [pc, #668]	@ (80051f8 <ETS+0xadc>)
 8004f5c:	443b      	add	r3, r7
 8004f5e:	edc3 7a00 	vstr	s15, [r3]
    X3_2 = X[3]*X[3];
 8004f62:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f66:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f6a:	ed93 7a03 	vldr	s14, [r3, #12]
 8004f6e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f72:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f76:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7e:	4b9f      	ldr	r3, [pc, #636]	@ (80051fc <ETS+0xae0>)
 8004f80:	443b      	add	r3, r7
 8004f82:	edc3 7a00 	vstr	s15, [r3]
    X4_2 = X[4]*X[4];
 8004f86:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f8a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f8e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004f92:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004f96:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004f9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	4b97      	ldr	r3, [pc, #604]	@ (8005200 <ETS+0xae4>)
 8004fa4:	443b      	add	r3, r7
 8004fa6:	edc3 7a00 	vstr	s15, [r3]
    X5_2 = X[5]*X[5];
 8004faa:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004fae:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fb2:	ed93 7a05 	vldr	s14, [r3, #20]
 8004fb6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004fba:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8004fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc6:	4b8f      	ldr	r3, [pc, #572]	@ (8005204 <ETS+0xae8>)
 8004fc8:	443b      	add	r3, r7
 8004fca:	edc3 7a00 	vstr	s15, [r3]
    X6_2 = X[6]*X[6];
 8004fce:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004fd2:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fd6:	ed93 7a06 	vldr	s14, [r3, #24]
 8004fda:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004fde:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004fe2:	edd3 7a06 	vldr	s15, [r3, #24]
 8004fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fea:	4b87      	ldr	r3, [pc, #540]	@ (8005208 <ETS+0xaec>)
 8004fec:	443b      	add	r3, r7
 8004fee:	edc3 7a00 	vstr	s15, [r3]
    X7_2 = X[7]*X[7];
 8004ff2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8004ff6:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8004ffa:	ed93 7a07 	vldr	s14, [r3, #28]
 8004ffe:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005002:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005006:	edd3 7a07 	vldr	s15, [r3, #28]
 800500a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500e:	4b7f      	ldr	r3, [pc, #508]	@ (800520c <ETS+0xaf0>)
 8005010:	443b      	add	r3, r7
 8005012:	edc3 7a00 	vstr	s15, [r3]
    X8_2 = X[8]*X[8];
 8005016:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800501a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800501e:	ed93 7a08 	vldr	s14, [r3, #32]
 8005022:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005026:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800502a:	edd3 7a08 	vldr	s15, [r3, #32]
 800502e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005032:	4b77      	ldr	r3, [pc, #476]	@ (8005210 <ETS+0xaf4>)
 8005034:	443b      	add	r3, r7
 8005036:	edc3 7a00 	vstr	s15, [r3]

    psi7 = 2*(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]);
 800503a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800503e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005042:	ed93 7a04 	vldr	s14, [r3, #16]
 8005046:	4b6b      	ldr	r3, [pc, #428]	@ (80051f4 <ETS+0xad8>)
 8005048:	443b      	add	r3, r7
 800504a:	edd3 7a00 	vldr	s15, [r3]
 800504e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005052:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005056:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800505a:	edd3 6a01 	vldr	s13, [r3, #4]
 800505e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005062:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005066:	edd3 7a02 	vldr	s15, [r3, #8]
 800506a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800506e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005072:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005076:	edd3 7a03 	vldr	s15, [r3, #12]
 800507a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800507e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005082:	4b5d      	ldr	r3, [pc, #372]	@ (80051f8 <ETS+0xadc>)
 8005084:	443b      	add	r3, r7
 8005086:	edd3 7a00 	vldr	s15, [r3]
 800508a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800508e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005092:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005096:	edd3 6a00 	vldr	s13, [r3]
 800509a:	4b58      	ldr	r3, [pc, #352]	@ (80051fc <ETS+0xae0>)
 800509c:	443b      	add	r3, r7
 800509e:	edd3 7a00 	vldr	s15, [r3]
 80050a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050aa:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80050ae:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050b2:	edd3 7a00 	vldr	s15, [r3]
 80050b6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80050ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80050be:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80050c2:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80050ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005214 <ETS+0xaf8>)
 80050d8:	443b      	add	r3, r7
 80050da:	edc3 7a00 	vstr	s15, [r3]
    bx = -(X3_2 * X[5] + 2*X[2]*X[7] - 4*X[4]*X[5] - X[1]*X[3]*X[7] + 2*X[1]*X[4]*X[6] - X[2]*X[3]*X[6]) / psi7;
 80050de:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80050e2:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050e6:	ed93 7a05 	vldr	s14, [r3, #20]
 80050ea:	4b44      	ldr	r3, [pc, #272]	@ (80051fc <ETS+0xae0>)
 80050ec:	443b      	add	r3, r7
 80050ee:	edd3 7a00 	vldr	s15, [r3]
 80050f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050f6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80050fa:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80050fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8005102:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005106:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800510a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800510e:	edd3 7a07 	vldr	s15, [r3, #28]
 8005112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005116:	ee37 7a27 	vadd.f32	s14, s14, s15
 800511a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800511e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005122:	edd3 7a04 	vldr	s15, [r3, #16]
 8005126:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800512a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800512e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005132:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005136:	edd3 7a05 	vldr	s15, [r3, #20]
 800513a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800513e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005142:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005146:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800514a:	edd3 6a01 	vldr	s13, [r3, #4]
 800514e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005152:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005156:	edd3 7a03 	vldr	s15, [r3, #12]
 800515a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800515e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005162:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005166:	edd3 7a07 	vldr	s15, [r3, #28]
 800516a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800516e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005172:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005176:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800517a:	edd3 7a01 	vldr	s15, [r3, #4]
 800517e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005182:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005186:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800518a:	edd3 7a04 	vldr	s15, [r3, #16]
 800518e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005192:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005196:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800519a:	edd3 7a06 	vldr	s15, [r3, #24]
 800519e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051a6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80051aa:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80051ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80051b2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80051b6:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80051ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80051be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80051c2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80051c6:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80051ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80051ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051d6:	eef1 6a67 	vneg.f32	s13, s15
 80051da:	4b0e      	ldr	r3, [pc, #56]	@ (8005214 <ETS+0xaf8>)
 80051dc:	443b      	add	r3, r7
 80051de:	ed93 7a00 	vldr	s14, [r3]
 80051e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005218 <ETS+0xafc>)
 80051e8:	443b      	add	r3, r7
 80051ea:	e017      	b.n	800521c <ETS+0xb00>
 80051ec:	00014d00 	.word	0x00014d00
 80051f0:	00014cfc 	.word	0x00014cfc
 80051f4:	00014cb0 	.word	0x00014cb0
 80051f8:	00014cac 	.word	0x00014cac
 80051fc:	00014ca8 	.word	0x00014ca8
 8005200:	00014ca4 	.word	0x00014ca4
 8005204:	00014ca0 	.word	0x00014ca0
 8005208:	00014c9c 	.word	0x00014c9c
 800520c:	00014c98 	.word	0x00014c98
 8005210:	00014c94 	.word	0x00014c94
 8005214:	00014cf8 	.word	0x00014cf8
 8005218:	00014cd4 	.word	0x00014cd4
 800521c:	edc3 7a00 	vstr	s15, [r3]
    by = -(X2_2 * X[6] + 2*X[0]*X[3]*X[7] - 4*X[0]*X[4]*X[6] - X[1]*X[2]*X[7] + 2*X[1]*X[4]*X[5] - X[2]*X[3]*X[5]) / psi7;
 8005220:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005224:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005228:	ed93 7a06 	vldr	s14, [r3, #24]
 800522c:	4bf2      	ldr	r3, [pc, #968]	@ (80055f8 <ETS+0xedc>)
 800522e:	443b      	add	r3, r7
 8005230:	edd3 7a00 	vldr	s15, [r3]
 8005234:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005238:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800523c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005240:	edd3 7a00 	vldr	s15, [r3]
 8005244:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005248:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800524c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005250:	edd3 7a03 	vldr	s15, [r3, #12]
 8005254:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005258:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800525c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005260:	edd3 7a07 	vldr	s15, [r3, #28]
 8005264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800526c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005270:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005274:	edd3 7a00 	vldr	s15, [r3]
 8005278:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800527c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005280:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005284:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005288:	edd3 7a04 	vldr	s15, [r3, #16]
 800528c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005290:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005294:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005298:	edd3 7a06 	vldr	s15, [r3, #24]
 800529c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052a4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052a8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80052b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052b4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80052bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052c4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052c8:	edd3 7a07 	vldr	s15, [r3, #28]
 80052cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052d4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052d8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80052e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80052e4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052e8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80052f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80052f8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80052fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8005300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005308:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800530c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005310:	edd3 6a02 	vldr	s13, [r3, #8]
 8005314:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005318:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800531c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005320:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005324:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005328:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800532c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005338:	eef1 6a67 	vneg.f32	s13, s15
 800533c:	4baf      	ldr	r3, [pc, #700]	@ (80055fc <ETS+0xee0>)
 800533e:	443b      	add	r3, r7
 8005340:	ed93 7a00 	vldr	s14, [r3]
 8005344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005348:	4bad      	ldr	r3, [pc, #692]	@ (8005600 <ETS+0xee4>)
 800534a:	443b      	add	r3, r7
 800534c:	edc3 7a00 	vstr	s15, [r3]
    bz = -(X1_2*X[7] - 4*X[0]*X[7] + 2*X[2]*X[5] + 2*X[0]*X[3]*X[6] - X[1]*X[2]*X[6] - X[1]*X[3]*X[5]) / psi7;
 8005350:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005354:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005358:	ed93 7a07 	vldr	s14, [r3, #28]
 800535c:	4ba9      	ldr	r3, [pc, #676]	@ (8005604 <ETS+0xee8>)
 800535e:	443b      	add	r3, r7
 8005360:	edd3 7a00 	vldr	s15, [r3]
 8005364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005368:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800536c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005370:	edd3 7a00 	vldr	s15, [r3]
 8005374:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005378:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800537c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005380:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005384:	edd3 7a07 	vldr	s15, [r3, #28]
 8005388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800538c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005390:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005394:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005398:	edd3 7a02 	vldr	s15, [r3, #8]
 800539c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80053a0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053a4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80053ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053b4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053b8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053bc:	edd3 7a00 	vldr	s15, [r3]
 80053c0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80053c4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053c8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80053d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80053d4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053d8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80053e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053e8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053ec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80053f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80053f8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80053fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8005400:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005404:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005408:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800540c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005418:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800541c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005420:	edd3 6a01 	vldr	s13, [r3, #4]
 8005424:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005428:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800542c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005430:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005434:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005438:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800543c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005448:	eef1 6a67 	vneg.f32	s13, s15
 800544c:	4b6b      	ldr	r3, [pc, #428]	@ (80055fc <ETS+0xee0>)
 800544e:	443b      	add	r3, r7
 8005450:	ed93 7a00 	vldr	s14, [r3]
 8005454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005458:	4b6b      	ldr	r3, [pc, #428]	@ (8005608 <ETS+0xeec>)
 800545a:	443b      	add	r3, r7
 800545c:	edc3 7a00 	vstr	s15, [r3]

    psi8 = -X1_2*X7_2 + 4*X[4]*X[8]*X1_2 - 4*X[8]*X[1]*X[2]*X[3] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[4]*X[1]*X[5]*X[6] - X2_2*X6_2 + 4*X[8]*X2_2 + 2*X[2]*X[3]*X[5]*X[6] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[0]*X[8]*X3_2 + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8] - 4*X[0]*X[3]*X[6]*X[7];
 8005460:	4b68      	ldr	r3, [pc, #416]	@ (8005604 <ETS+0xee8>)
 8005462:	443b      	add	r3, r7
 8005464:	edd3 7a00 	vldr	s15, [r3]
 8005468:	eeb1 7a67 	vneg.f32	s14, s15
 800546c:	4b67      	ldr	r3, [pc, #412]	@ (800560c <ETS+0xef0>)
 800546e:	443b      	add	r3, r7
 8005470:	edd3 7a00 	vldr	s15, [r3]
 8005474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005478:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800547c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005480:	edd3 7a04 	vldr	s15, [r3, #16]
 8005484:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005488:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800548c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005490:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005494:	edd3 7a08 	vldr	s15, [r3, #32]
 8005498:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800549c:	4b59      	ldr	r3, [pc, #356]	@ (8005604 <ETS+0xee8>)
 800549e:	443b      	add	r3, r7
 80054a0:	edd3 7a00 	vldr	s15, [r3]
 80054a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054ac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80054b0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80054b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80054b8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80054bc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80054c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80054c4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80054c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80054cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80054d0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80054d4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80054d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80054dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80054e0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80054e4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80054e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80054ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80054f8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80054fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005500:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005504:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005508:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800550c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005510:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005514:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005518:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800551c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005520:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005524:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005528:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800552c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005534:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005538:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800553c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005540:	edd3 7a01 	vldr	s15, [r3, #4]
 8005544:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005548:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800554c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005550:	edd3 7a03 	vldr	s15, [r3, #12]
 8005554:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005558:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800555c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005560:	edd3 7a05 	vldr	s15, [r3, #20]
 8005564:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005568:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800556c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005570:	edd3 7a07 	vldr	s15, [r3, #28]
 8005574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800557c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005580:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005584:	edd3 7a04 	vldr	s15, [r3, #16]
 8005588:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800558c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005590:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005594:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005598:	edd3 7a01 	vldr	s15, [r3, #4]
 800559c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80055a0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80055a4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80055a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80055ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80055b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80055b4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80055b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80055bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055c4:	4b0c      	ldr	r3, [pc, #48]	@ (80055f8 <ETS+0xedc>)
 80055c6:	443b      	add	r3, r7
 80055c8:	edd3 6a00 	vldr	s13, [r3]
 80055cc:	4b10      	ldr	r3, [pc, #64]	@ (8005610 <ETS+0xef4>)
 80055ce:	443b      	add	r3, r7
 80055d0:	edd3 7a00 	vldr	s15, [r3]
 80055d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055dc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80055e0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80055e4:	edd3 7a08 	vldr	s15, [r3, #32]
 80055e8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80055ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80055f0:	4b01      	ldr	r3, [pc, #4]	@ (80055f8 <ETS+0xedc>)
 80055f2:	443b      	add	r3, r7
 80055f4:	e00e      	b.n	8005614 <ETS+0xef8>
 80055f6:	bf00      	nop
 80055f8:	00014cac 	.word	0x00014cac
 80055fc:	00014cf8 	.word	0x00014cf8
 8005600:	00014cd0 	.word	0x00014cd0
 8005604:	00014cb0 	.word	0x00014cb0
 8005608:	00014ccc 	.word	0x00014ccc
 800560c:	00014c98 	.word	0x00014c98
 8005610:	00014c9c 	.word	0x00014c9c
 8005614:	edd3 7a00 	vldr	s15, [r3]
 8005618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800561c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005620:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005624:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005628:	edd3 7a02 	vldr	s15, [r3, #8]
 800562c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005630:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005634:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005638:	edd3 7a03 	vldr	s15, [r3, #12]
 800563c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005640:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005644:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005648:	edd3 7a05 	vldr	s15, [r3, #20]
 800564c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005650:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005654:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005658:	edd3 7a06 	vldr	s15, [r3, #24]
 800565c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005664:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005668:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800566c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005670:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005674:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005678:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800567c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005680:	edd3 7a05 	vldr	s15, [r3, #20]
 8005684:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005688:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800568c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005690:	edd3 7a07 	vldr	s15, [r3, #28]
 8005694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005698:	ee37 7a67 	vsub.f32	s14, s14, s15
 800569c:	4be4      	ldr	r3, [pc, #912]	@ (8005a30 <ETS+0x1314>)
 800569e:	443b      	add	r3, r7
 80056a0:	edd3 6a00 	vldr	s13, [r3]
 80056a4:	4be3      	ldr	r3, [pc, #908]	@ (8005a34 <ETS+0x1318>)
 80056a6:	443b      	add	r3, r7
 80056a8:	edd3 7a00 	vldr	s15, [r3]
 80056ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056b4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80056b8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80056bc:	edd3 7a00 	vldr	s15, [r3]
 80056c0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80056c4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80056c8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80056cc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80056d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80056d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80056d8:	4bd5      	ldr	r3, [pc, #852]	@ (8005a30 <ETS+0x1314>)
 80056da:	443b      	add	r3, r7
 80056dc:	edd3 7a00 	vldr	s15, [r3]
 80056e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80056e8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80056ec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80056f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80056f4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80056f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80056fc:	4bcd      	ldr	r3, [pc, #820]	@ (8005a34 <ETS+0x1318>)
 80056fe:	443b      	add	r3, r7
 8005700:	edd3 7a00 	vldr	s15, [r3]
 8005704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005708:	ee37 7a27 	vadd.f32	s14, s14, s15
 800570c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005710:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005714:	edd3 7a00 	vldr	s15, [r3]
 8005718:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800571c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005720:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005724:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005728:	edd3 7a04 	vldr	s15, [r3, #16]
 800572c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005730:	4bc1      	ldr	r3, [pc, #772]	@ (8005a38 <ETS+0x131c>)
 8005732:	443b      	add	r3, r7
 8005734:	edd3 7a00 	vldr	s15, [r3]
 8005738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800573c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005740:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005744:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005748:	edd3 7a00 	vldr	s15, [r3]
 800574c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005750:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005754:	4bb9      	ldr	r3, [pc, #740]	@ (8005a3c <ETS+0x1320>)
 8005756:	443b      	add	r3, r7
 8005758:	edd3 7a00 	vldr	s15, [r3]
 800575c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005764:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005768:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800576c:	edd3 7a00 	vldr	s15, [r3]
 8005770:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8005774:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005778:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800577c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005780:	edd3 7a04 	vldr	s15, [r3, #16]
 8005784:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005788:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800578c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005790:	edd3 7a08 	vldr	s15, [r3, #32]
 8005794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800579c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057a0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057a4:	edd3 7a00 	vldr	s15, [r3]
 80057a8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80057ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80057b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057b4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80057bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057c4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80057cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80057d0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057d4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057d8:	edd3 7a07 	vldr	s15, [r3, #28]
 80057dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80057e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057e4:	4b96      	ldr	r3, [pc, #600]	@ (8005a40 <ETS+0x1324>)
 80057e6:	443b      	add	r3, r7
 80057e8:	edc3 7a00 	vstr	s15, [r3]

    divs =  2 * fabsf(X[4])*fabsf(X[4])*fabsf(X[4]) * (X[4] * X1_2 - X[1] * X[2] * X[3] + X2_2 + X[0] * X3_2 - 4 * X[0] * X[4]);
 80057ec:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80057f0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80057f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80057f8:	eef0 7ae7 	vabs.f32	s15, s15
 80057fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005800:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005804:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005808:	edd3 7a04 	vldr	s15, [r3, #16]
 800580c:	eef0 7ae7 	vabs.f32	s15, s15
 8005810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005814:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005818:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800581c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005820:	eef0 7ae7 	vabs.f32	s15, s15
 8005824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005828:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800582c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005830:	edd3 6a04 	vldr	s13, [r3, #16]
 8005834:	4b83      	ldr	r3, [pc, #524]	@ (8005a44 <ETS+0x1328>)
 8005836:	443b      	add	r3, r7
 8005838:	edd3 7a00 	vldr	s15, [r3]
 800583c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005840:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005844:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005848:	ed93 6a01 	vldr	s12, [r3, #4]
 800584c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005850:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005854:	edd3 7a02 	vldr	s15, [r3, #8]
 8005858:	ee26 6a27 	vmul.f32	s12, s12, s15
 800585c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005860:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005864:	edd3 7a03 	vldr	s15, [r3, #12]
 8005868:	ee66 7a27 	vmul.f32	s15, s12, s15
 800586c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005870:	4b75      	ldr	r3, [pc, #468]	@ (8005a48 <ETS+0x132c>)
 8005872:	443b      	add	r3, r7
 8005874:	edd3 7a00 	vldr	s15, [r3]
 8005878:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800587c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005880:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005884:	ed93 6a00 	vldr	s12, [r3]
 8005888:	4b69      	ldr	r3, [pc, #420]	@ (8005a30 <ETS+0x1314>)
 800588a:	443b      	add	r3, r7
 800588c:	edd3 7a00 	vldr	s15, [r3]
 8005890:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005894:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005898:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800589c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80058a0:	edd3 7a00 	vldr	s15, [r3]
 80058a4:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 80058a8:	ee27 6a86 	vmul.f32	s12, s15, s12
 80058ac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80058b0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80058b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80058b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80058bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80058c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c4:	4b61      	ldr	r3, [pc, #388]	@ (8005a4c <ETS+0x1330>)
 80058c6:	443b      	add	r3, r7
 80058c8:	edc3 7a00 	vstr	s15, [r3]

    sx = -X4_2*X[4] * sqrtf(psi8 * (-X3_2 + 4*X[4])) / (divs);
 80058cc:	4b60      	ldr	r3, [pc, #384]	@ (8005a50 <ETS+0x1334>)
 80058ce:	443b      	add	r3, r7
 80058d0:	edd3 7a00 	vldr	s15, [r3]
 80058d4:	eeb1 7a67 	vneg.f32	s14, s15
 80058d8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80058dc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80058e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80058e4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80058e8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80058ec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80058f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80058f4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80058f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80058fc:	4b4c      	ldr	r3, [pc, #304]	@ (8005a30 <ETS+0x1314>)
 80058fe:	443b      	add	r3, r7
 8005900:	edd3 7a00 	vldr	s15, [r3]
 8005904:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005908:	4b4d      	ldr	r3, [pc, #308]	@ (8005a40 <ETS+0x1324>)
 800590a:	443b      	add	r3, r7
 800590c:	edd3 7a00 	vldr	s15, [r3]
 8005910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005914:	eeb0 0a67 	vmov.f32	s0, s15
 8005918:	f00a f8ae 	bl	800fa78 <sqrtf>
 800591c:	eef0 7a40 	vmov.f32	s15, s0
 8005920:	ee68 6a27 	vmul.f32	s13, s16, s15
 8005924:	4b49      	ldr	r3, [pc, #292]	@ (8005a4c <ETS+0x1330>)
 8005926:	443b      	add	r3, r7
 8005928:	ed93 7a00 	vldr	s14, [r3]
 800592c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005930:	4b48      	ldr	r3, [pc, #288]	@ (8005a54 <ETS+0x1338>)
 8005932:	443b      	add	r3, r7
 8005934:	edc3 7a00 	vstr	s15, [r3]
    sy = -X4_2*X[4] * sqrtf(psi8 * (-X2_2 + 4*X[0]*X[4])) / (divs);
 8005938:	4b45      	ldr	r3, [pc, #276]	@ (8005a50 <ETS+0x1334>)
 800593a:	443b      	add	r3, r7
 800593c:	edd3 7a00 	vldr	s15, [r3]
 8005940:	eeb1 7a67 	vneg.f32	s14, s15
 8005944:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005948:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800594c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005950:	ee27 8a27 	vmul.f32	s16, s14, s15
 8005954:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005958:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800595c:	edd3 7a00 	vldr	s15, [r3]
 8005960:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005964:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005968:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800596c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005970:	edd3 7a04 	vldr	s15, [r3, #16]
 8005974:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005978:	4b33      	ldr	r3, [pc, #204]	@ (8005a48 <ETS+0x132c>)
 800597a:	443b      	add	r3, r7
 800597c:	edd3 7a00 	vldr	s15, [r3]
 8005980:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005984:	4b2e      	ldr	r3, [pc, #184]	@ (8005a40 <ETS+0x1324>)
 8005986:	443b      	add	r3, r7
 8005988:	edd3 7a00 	vldr	s15, [r3]
 800598c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005990:	eeb0 0a67 	vmov.f32	s0, s15
 8005994:	f00a f870 	bl	800fa78 <sqrtf>
 8005998:	eef0 7a40 	vmov.f32	s15, s0
 800599c:	ee68 6a27 	vmul.f32	s13, s16, s15
 80059a0:	4b2a      	ldr	r3, [pc, #168]	@ (8005a4c <ETS+0x1330>)
 80059a2:	443b      	add	r3, r7
 80059a4:	ed93 7a00 	vldr	s14, [r3]
 80059a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005a58 <ETS+0x133c>)
 80059ae:	443b      	add	r3, r7
 80059b0:	edc3 7a00 	vstr	s15, [r3]
    sz = -X4_2*X[4] * sqrtf(psi8 * (-X1_2 + 4*X[0])) / (divs);
 80059b4:	4b26      	ldr	r3, [pc, #152]	@ (8005a50 <ETS+0x1334>)
 80059b6:	443b      	add	r3, r7
 80059b8:	edd3 7a00 	vldr	s15, [r3]
 80059bc:	eeb1 7a67 	vneg.f32	s14, s15
 80059c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80059c4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80059c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80059cc:	ee27 8a27 	vmul.f32	s16, s14, s15
 80059d0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80059d4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80059d8:	edd3 7a00 	vldr	s15, [r3]
 80059dc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80059e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059e4:	4b17      	ldr	r3, [pc, #92]	@ (8005a44 <ETS+0x1328>)
 80059e6:	443b      	add	r3, r7
 80059e8:	edd3 7a00 	vldr	s15, [r3]
 80059ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80059f0:	4b13      	ldr	r3, [pc, #76]	@ (8005a40 <ETS+0x1324>)
 80059f2:	443b      	add	r3, r7
 80059f4:	edd3 7a00 	vldr	s15, [r3]
 80059f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005a00:	f00a f83a 	bl	800fa78 <sqrtf>
 8005a04:	eef0 7a40 	vmov.f32	s15, s0
 8005a08:	ee68 6a27 	vmul.f32	s13, s16, s15
 8005a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a4c <ETS+0x1330>)
 8005a0e:	443b      	add	r3, r7
 8005a10:	ed93 7a00 	vldr	s14, [r3]
 8005a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a18:	4b10      	ldr	r3, [pc, #64]	@ (8005a5c <ETS+0x1340>)
 8005a1a:	443b      	add	r3, r7
 8005a1c:	edc3 7a00 	vstr	s15, [r3]

    rho = (2 * X[1]*X[4] - X[2]*X[3]) / (2*X4_2 * sqrtf(-(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]) / (X4_2*X[4])));
 8005a20:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a24:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a28:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a2c:	e018      	b.n	8005a60 <ETS+0x1344>
 8005a2e:	bf00      	nop
 8005a30:	00014ca8 	.word	0x00014ca8
 8005a34:	00014ca0 	.word	0x00014ca0
 8005a38:	00014c9c 	.word	0x00014c9c
 8005a3c:	00014c98 	.word	0x00014c98
 8005a40:	00014cf4 	.word	0x00014cf4
 8005a44:	00014cb0 	.word	0x00014cb0
 8005a48:	00014cac 	.word	0x00014cac
 8005a4c:	00014cf0 	.word	0x00014cf0
 8005a50:	00014ca4 	.word	0x00014ca4
 8005a54:	00014cc8 	.word	0x00014cc8
 8005a58:	00014cc4 	.word	0x00014cc4
 8005a5c:	00014cc0 	.word	0x00014cc0
 8005a60:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005a64:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a68:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005a74:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a78:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a7c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a80:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005a84:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005a88:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005a90:	ee37 8a67 	vsub.f32	s16, s14, s15
 8005a94:	4be2      	ldr	r3, [pc, #904]	@ (8005e20 <ETS+0x1704>)
 8005a96:	443b      	add	r3, r7
 8005a98:	edd3 7a00 	vldr	s15, [r3]
 8005a9c:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8005aa0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005aa4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005aa8:	ed93 7a04 	vldr	s14, [r3, #16]
 8005aac:	4bdd      	ldr	r3, [pc, #884]	@ (8005e24 <ETS+0x1708>)
 8005aae:	443b      	add	r3, r7
 8005ab0:	edd3 7a00 	vldr	s15, [r3]
 8005ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ab8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005abc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ac0:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ac4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ac8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005acc:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ad0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ad4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ad8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005adc:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ae0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ae4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ae8:	4bcf      	ldr	r3, [pc, #828]	@ (8005e28 <ETS+0x170c>)
 8005aea:	443b      	add	r3, r7
 8005aec:	edd3 7a00 	vldr	s15, [r3]
 8005af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005af4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005af8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005afc:	edd3 6a00 	vldr	s13, [r3]
 8005b00:	4bca      	ldr	r3, [pc, #808]	@ (8005e2c <ETS+0x1710>)
 8005b02:	443b      	add	r3, r7
 8005b04:	edd3 7a00 	vldr	s15, [r3]
 8005b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b10:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b14:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b18:	edd3 7a00 	vldr	s15, [r3]
 8005b1c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005b20:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005b24:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b28:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b38:	eeb1 7a67 	vneg.f32	s14, s15
 8005b3c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b40:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b44:	edd3 6a04 	vldr	s13, [r3, #16]
 8005b48:	4bb5      	ldr	r3, [pc, #724]	@ (8005e20 <ETS+0x1704>)
 8005b4a:	443b      	add	r3, r7
 8005b4c:	edd3 7a00 	vldr	s15, [r3]
 8005b50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b58:	eeb0 0a66 	vmov.f32	s0, s13
 8005b5c:	f009 ff8c 	bl	800fa78 <sqrtf>
 8005b60:	eef0 7a40 	vmov.f32	s15, s0
 8005b64:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8005b68:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005b6c:	4bb0      	ldr	r3, [pc, #704]	@ (8005e30 <ETS+0x1714>)
 8005b6e:	443b      	add	r3, r7
 8005b70:	edc3 7a00 	vstr	s15, [r3]
    rho = -atanf(rho);
 8005b74:	4bae      	ldr	r3, [pc, #696]	@ (8005e30 <ETS+0x1714>)
 8005b76:	443b      	add	r3, r7
 8005b78:	ed93 0a00 	vldr	s0, [r3]
 8005b7c:	f009 ff9a 	bl	800fab4 <atanf>
 8005b80:	eef0 7a40 	vmov.f32	s15, s0
 8005b84:	eef1 7a67 	vneg.f32	s15, s15
 8005b88:	4ba9      	ldr	r3, [pc, #676]	@ (8005e30 <ETS+0x1714>)
 8005b8a:	443b      	add	r3, r7
 8005b8c:	edc3 7a00 	vstr	s15, [r3]
    lambida = -atanf((X[3] / X[4]) * sqrtf(-(X4_2 * (X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 - 4*X[0]*X[4]) / (2*X1_2*X3_2*X[4] - 4* X1_2 * X4_2 - 4*X1_2 * X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2 * X3_2 + X[0]* X3_2*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2))));
 8005b90:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005b94:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005b98:	ed93 7a03 	vldr	s14, [r3, #12]
 8005b9c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ba0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ba4:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ba8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8005bac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005bb0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005bb4:	ed93 7a04 	vldr	s14, [r3, #16]
 8005bb8:	4b9a      	ldr	r3, [pc, #616]	@ (8005e24 <ETS+0x1708>)
 8005bba:	443b      	add	r3, r7
 8005bbc:	edd3 7a00 	vldr	s15, [r3]
 8005bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bc4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005bc8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005bcc:	edd3 6a01 	vldr	s13, [r3, #4]
 8005bd0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005bd4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005bd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8005bdc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005be0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005be4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005be8:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8005e28 <ETS+0x170c>)
 8005bf6:	443b      	add	r3, r7
 8005bf8:	edd3 7a00 	vldr	s15, [r3]
 8005bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c00:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005c04:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005c08:	edd3 7a00 	vldr	s15, [r3]
 8005c0c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005c10:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005c14:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005c18:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005c1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c28:	4b7d      	ldr	r3, [pc, #500]	@ (8005e20 <ETS+0x1704>)
 8005c2a:	443b      	add	r3, r7
 8005c2c:	edd3 7a00 	vldr	s15, [r3]
 8005c30:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005c34:	4b7b      	ldr	r3, [pc, #492]	@ (8005e24 <ETS+0x1708>)
 8005c36:	443b      	add	r3, r7
 8005c38:	edd3 7a00 	vldr	s15, [r3]
 8005c3c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005c40:	4b7a      	ldr	r3, [pc, #488]	@ (8005e2c <ETS+0x1710>)
 8005c42:	443b      	add	r3, r7
 8005c44:	edd3 7a00 	vldr	s15, [r3]
 8005c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c4c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005c50:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005c54:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c5c:	4b71      	ldr	r3, [pc, #452]	@ (8005e24 <ETS+0x1708>)
 8005c5e:	443b      	add	r3, r7
 8005c60:	edd3 7a00 	vldr	s15, [r3]
 8005c64:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8005c68:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8005e20 <ETS+0x1704>)
 8005c6e:	443b      	add	r3, r7
 8005c70:	edd3 7a00 	vldr	s15, [r3]
 8005c74:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c7c:	4b69      	ldr	r3, [pc, #420]	@ (8005e24 <ETS+0x1708>)
 8005c7e:	443b      	add	r3, r7
 8005c80:	edd3 7a00 	vldr	s15, [r3]
 8005c84:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8005c88:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005c8c:	4b64      	ldr	r3, [pc, #400]	@ (8005e20 <ETS+0x1704>)
 8005c8e:	443b      	add	r3, r7
 8005c90:	edd3 7a00 	vldr	s15, [r3]
 8005c94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c9c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ca0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ca4:	ed93 6a01 	vldr	s12, [r3, #4]
 8005ca8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005cac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005cb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005cb4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005cb8:	4b5c      	ldr	r3, [pc, #368]	@ (8005e2c <ETS+0x1710>)
 8005cba:	443b      	add	r3, r7
 8005cbc:	edd3 7a00 	vldr	s15, [r3]
 8005cc0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005cc4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005cc8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ccc:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cd8:	4b53      	ldr	r3, [pc, #332]	@ (8005e28 <ETS+0x170c>)
 8005cda:	443b      	add	r3, r7
 8005cdc:	ed93 6a00 	vldr	s12, [r3]
 8005ce0:	4b52      	ldr	r3, [pc, #328]	@ (8005e2c <ETS+0x1710>)
 8005ce2:	443b      	add	r3, r7
 8005ce4:	edd3 7a00 	vldr	s15, [r3]
 8005ce8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005cec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cf0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005cf4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005cf8:	ed93 6a00 	vldr	s12, [r3]
 8005cfc:	4b4b      	ldr	r3, [pc, #300]	@ (8005e2c <ETS+0x1710>)
 8005cfe:	443b      	add	r3, r7
 8005d00:	edd3 7a00 	vldr	s15, [r3]
 8005d04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d08:	4b48      	ldr	r3, [pc, #288]	@ (8005e2c <ETS+0x1710>)
 8005d0a:	443b      	add	r3, r7
 8005d0c:	edd3 7a00 	vldr	s15, [r3]
 8005d10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d18:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005d1c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005d20:	edd3 7a00 	vldr	s15, [r3]
 8005d24:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
 8005d28:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e2c <ETS+0x1710>)
 8005d2e:	443b      	add	r3, r7
 8005d30:	edd3 7a00 	vldr	s15, [r3]
 8005d34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8005d38:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005d3c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005d40:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d44:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d4c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005d50:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005d54:	edd3 7a00 	vldr	s15, [r3]
 8005d58:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 8005d5c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8005d60:	4b2f      	ldr	r3, [pc, #188]	@ (8005e20 <ETS+0x1704>)
 8005d62:	443b      	add	r3, r7
 8005d64:	edd3 7a00 	vldr	s15, [r3]
 8005d68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d74:	eef1 7a67 	vneg.f32	s15, s15
 8005d78:	eeb0 0a67 	vmov.f32	s0, s15
 8005d7c:	f009 fe7c 	bl	800fa78 <sqrtf>
 8005d80:	eef0 7a40 	vmov.f32	s15, s0
 8005d84:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005d88:	eeb0 0a67 	vmov.f32	s0, s15
 8005d8c:	f009 fe92 	bl	800fab4 <atanf>
 8005d90:	eef0 7a40 	vmov.f32	s15, s0
 8005d94:	eef1 7a67 	vneg.f32	s15, s15
 8005d98:	4b26      	ldr	r3, [pc, #152]	@ (8005e34 <ETS+0x1718>)
 8005d9a:	443b      	add	r3, r7
 8005d9c:	edc3 7a00 	vstr	s15, [r3]

    n1 = -X1_2*X7_2 + 4*X1_2*X[4]*X[8] - 4*X[1]*X[2]*X[3]*X[8] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[1]*X[4]*X[5]*X[6] - X2_2*X6_2 + 2*X[2]*X[3]*X[5]*X[6] + 4*X2_2*X[8] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[1]*X3_2*X[8] - 4*X[0]*X[3]*X[6]*X[7] + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8];
 8005da0:	4b20      	ldr	r3, [pc, #128]	@ (8005e24 <ETS+0x1708>)
 8005da2:	443b      	add	r3, r7
 8005da4:	edd3 7a00 	vldr	s15, [r3]
 8005da8:	eeb1 7a67 	vneg.f32	s14, s15
 8005dac:	4b22      	ldr	r3, [pc, #136]	@ (8005e38 <ETS+0x171c>)
 8005dae:	443b      	add	r3, r7
 8005db0:	edd3 7a00 	vldr	s15, [r3]
 8005db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005db8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e24 <ETS+0x1708>)
 8005dba:	443b      	add	r3, r7
 8005dbc:	edd3 7a00 	vldr	s15, [r3]
 8005dc0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005dc4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005dc8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005dcc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005dd0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005dd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005dd8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ddc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005de0:	edd3 7a08 	vldr	s15, [r3, #32]
 8005de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dec:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005df0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005df4:	edd3 7a01 	vldr	s15, [r3, #4]
 8005df8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005dfc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005e00:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e04:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e08:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e10:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e14:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e18:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e1c:	e00e      	b.n	8005e3c <ETS+0x1720>
 8005e1e:	bf00      	nop
 8005e20:	00014ca4 	.word	0x00014ca4
 8005e24:	00014cb0 	.word	0x00014cb0
 8005e28:	00014cac 	.word	0x00014cac
 8005e2c:	00014ca8 	.word	0x00014ca8
 8005e30:	00014cbc 	.word	0x00014cbc
 8005e34:	00014cb4 	.word	0x00014cb4
 8005e38:	00014c98 	.word	0x00014c98
 8005e3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e40:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e44:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e48:	edd3 7a08 	vldr	s15, [r3, #32]
 8005e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e54:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e58:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e60:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005e64:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e68:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e74:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e78:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005e84:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e88:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005e8c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e98:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005e9c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ea0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ea4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005ea8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005eac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005eb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8005eb4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005eb8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ebc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ec0:	edd3 7a05 	vldr	s15, [r3, #20]
 8005ec4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ec8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ecc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ed0:	edd3 7a07 	vldr	s15, [r3, #28]
 8005ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005edc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ee0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ee4:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ee8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005eec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005ef0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ef4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ef8:	edd3 7a04 	vldr	s15, [r3, #16]
 8005efc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f00:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f04:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f08:	edd3 7a05 	vldr	s15, [r3, #20]
 8005f0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f10:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f14:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f18:	edd3 7a06 	vldr	s15, [r3, #24]
 8005f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f24:	4be7      	ldr	r3, [pc, #924]	@ (80062c4 <ETS+0x1ba8>)
 8005f26:	443b      	add	r3, r7
 8005f28:	edd3 6a00 	vldr	s13, [r3]
 8005f2c:	4be6      	ldr	r3, [pc, #920]	@ (80062c8 <ETS+0x1bac>)
 8005f2e:	443b      	add	r3, r7
 8005f30:	edd3 7a00 	vldr	s15, [r3]
 8005f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f3c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f40:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f44:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f48:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005f4c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f50:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f54:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f5c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f60:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f64:	edd3 7a05 	vldr	s15, [r3, #20]
 8005f68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005f6c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f70:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f74:	edd3 7a06 	vldr	s15, [r3, #24]
 8005f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f80:	4bd0      	ldr	r3, [pc, #832]	@ (80062c4 <ETS+0x1ba8>)
 8005f82:	443b      	add	r3, r7
 8005f84:	edd3 7a00 	vldr	s15, [r3]
 8005f88:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005f8c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005f90:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005f94:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005f98:	edd3 7a08 	vldr	s15, [r3, #32]
 8005f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fa4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005fa8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005fac:	edd3 7a02 	vldr	s15, [r3, #8]
 8005fb0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8005fb4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8005fb8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005fbc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005fc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8005fc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005fc8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005fcc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005fd0:	edd3 7a07 	vldr	s15, [r3, #28]
 8005fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005fdc:	4bbb      	ldr	r3, [pc, #748]	@ (80062cc <ETS+0x1bb0>)
 8005fde:	443b      	add	r3, r7
 8005fe0:	edd3 6a00 	vldr	s13, [r3]
 8005fe4:	4bba      	ldr	r3, [pc, #744]	@ (80062d0 <ETS+0x1bb4>)
 8005fe6:	443b      	add	r3, r7
 8005fe8:	edd3 7a00 	vldr	s15, [r3]
 8005fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ff4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8005ff8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8005ffc:	edd3 7a01 	vldr	s15, [r3, #4]
 8006000:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006004:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006008:	4bb0      	ldr	r3, [pc, #704]	@ (80062cc <ETS+0x1bb0>)
 800600a:	443b      	add	r3, r7
 800600c:	edd3 7a00 	vldr	s15, [r3]
 8006010:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006014:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006018:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800601c:	edd3 7a08 	vldr	s15, [r3, #32]
 8006020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006028:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800602c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006030:	edd3 7a00 	vldr	s15, [r3]
 8006034:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006038:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800603c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006040:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006044:	edd3 7a03 	vldr	s15, [r3, #12]
 8006048:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800604c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006050:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006054:	edd3 7a06 	vldr	s15, [r3, #24]
 8006058:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800605c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006060:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006064:	edd3 7a07 	vldr	s15, [r3, #28]
 8006068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800606c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006070:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006074:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006078:	edd3 7a04 	vldr	s15, [r3, #16]
 800607c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006080:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006084:	4b92      	ldr	r3, [pc, #584]	@ (80062d0 <ETS+0x1bb4>)
 8006086:	443b      	add	r3, r7
 8006088:	edd3 7a00 	vldr	s15, [r3]
 800608c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006090:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006094:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006098:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800609c:	edd3 7a00 	vldr	s15, [r3]
 80060a0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80060a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80060a8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80060ac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80060b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80060b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80060b8:	4b83      	ldr	r3, [pc, #524]	@ (80062c8 <ETS+0x1bac>)
 80060ba:	443b      	add	r3, r7
 80060bc:	edd3 7a00 	vldr	s15, [r3]
 80060c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060c8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80060cc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80060d0:	edd3 7a00 	vldr	s15, [r3]
 80060d4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80060d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80060dc:	4b7d      	ldr	r3, [pc, #500]	@ (80062d4 <ETS+0x1bb8>)
 80060de:	443b      	add	r3, r7
 80060e0:	edd3 7a00 	vldr	s15, [r3]
 80060e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060ec:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80060f0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80060f4:	edd3 7a00 	vldr	s15, [r3]
 80060f8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80060fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006100:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006104:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006108:	edd3 7a04 	vldr	s15, [r3, #16]
 800610c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006110:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006114:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006118:	edd3 7a08 	vldr	s15, [r3, #32]
 800611c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006124:	4b6c      	ldr	r3, [pc, #432]	@ (80062d8 <ETS+0x1bbc>)
 8006126:	443b      	add	r3, r7
 8006128:	edc3 7a00 	vstr	s15, [r3]
    n2 = X1_2*X[4] - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4];
 800612c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006130:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006134:	ed93 7a04 	vldr	s14, [r3, #16]
 8006138:	4b68      	ldr	r3, [pc, #416]	@ (80062dc <ETS+0x1bc0>)
 800613a:	443b      	add	r3, r7
 800613c:	edd3 7a00 	vldr	s15, [r3]
 8006140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006144:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006148:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800614c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006150:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006154:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006158:	edd3 7a02 	vldr	s15, [r3, #8]
 800615c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006160:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006164:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006168:	edd3 7a03 	vldr	s15, [r3, #12]
 800616c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006170:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006174:	4b53      	ldr	r3, [pc, #332]	@ (80062c4 <ETS+0x1ba8>)
 8006176:	443b      	add	r3, r7
 8006178:	edd3 7a00 	vldr	s15, [r3]
 800617c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006180:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006184:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006188:	edd3 6a00 	vldr	s13, [r3]
 800618c:	4b4f      	ldr	r3, [pc, #316]	@ (80062cc <ETS+0x1bb0>)
 800618e:	443b      	add	r3, r7
 8006190:	edd3 7a00 	vldr	s15, [r3]
 8006194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006198:	ee37 7a27 	vadd.f32	s14, s14, s15
 800619c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80061a0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80061a4:	edd3 7a00 	vldr	s15, [r3]
 80061a8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80061ac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80061b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80061b4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80061b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80061bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061c4:	4b46      	ldr	r3, [pc, #280]	@ (80062e0 <ETS+0x1bc4>)
 80061c6:	443b      	add	r3, r7
 80061c8:	edc3 7a00 	vstr	s15, [r3]
    n3 = 2*X1_2*X3_2*X[4] - 4*X1_2*X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2*X3_2 + X[0]*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2;
 80061cc:	4b43      	ldr	r3, [pc, #268]	@ (80062dc <ETS+0x1bc0>)
 80061ce:	443b      	add	r3, r7
 80061d0:	edd3 7a00 	vldr	s15, [r3]
 80061d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80061d8:	4b3c      	ldr	r3, [pc, #240]	@ (80062cc <ETS+0x1bb0>)
 80061da:	443b      	add	r3, r7
 80061dc:	edd3 7a00 	vldr	s15, [r3]
 80061e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061e4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80061e8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80061ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80061f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061f4:	4b39      	ldr	r3, [pc, #228]	@ (80062dc <ETS+0x1bc0>)
 80061f6:	443b      	add	r3, r7
 80061f8:	edd3 7a00 	vldr	s15, [r3]
 80061fc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8006200:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006204:	4b37      	ldr	r3, [pc, #220]	@ (80062e4 <ETS+0x1bc8>)
 8006206:	443b      	add	r3, r7
 8006208:	edd3 7a00 	vldr	s15, [r3]
 800620c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006210:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006214:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006218:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800621c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006220:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006224:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006228:	edd3 7a02 	vldr	s15, [r3, #8]
 800622c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006230:	4b26      	ldr	r3, [pc, #152]	@ (80062cc <ETS+0x1bb0>)
 8006232:	443b      	add	r3, r7
 8006234:	edd3 7a00 	vldr	s15, [r3]
 8006238:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800623c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006240:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006244:	edd3 7a03 	vldr	s15, [r3, #12]
 8006248:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800624c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006250:	4b1c      	ldr	r3, [pc, #112]	@ (80062c4 <ETS+0x1ba8>)
 8006252:	443b      	add	r3, r7
 8006254:	edd3 6a00 	vldr	s13, [r3]
 8006258:	4b1c      	ldr	r3, [pc, #112]	@ (80062cc <ETS+0x1bb0>)
 800625a:	443b      	add	r3, r7
 800625c:	edd3 7a00 	vldr	s15, [r3]
 8006260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006268:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800626c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006270:	edd3 6a00 	vldr	s13, [r3]
 8006274:	4b15      	ldr	r3, [pc, #84]	@ (80062cc <ETS+0x1bb0>)
 8006276:	443b      	add	r3, r7
 8006278:	edd3 7a00 	vldr	s15, [r3]
 800627c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006284:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006288:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800628c:	edd3 7a00 	vldr	s15, [r3]
 8006290:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8006294:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006298:	4b0c      	ldr	r3, [pc, #48]	@ (80062cc <ETS+0x1bb0>)
 800629a:	443b      	add	r3, r7
 800629c:	edd3 7a00 	vldr	s15, [r3]
 80062a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80062a4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80062a8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80062ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80062b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062b8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80062bc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80062c0:	e012      	b.n	80062e8 <ETS+0x1bcc>
 80062c2:	bf00      	nop
 80062c4:	00014cac 	.word	0x00014cac
 80062c8:	00014c9c 	.word	0x00014c9c
 80062cc:	00014ca8 	.word	0x00014ca8
 80062d0:	00014ca0 	.word	0x00014ca0
 80062d4:	00014c98 	.word	0x00014c98
 80062d8:	00014cec 	.word	0x00014cec
 80062dc:	00014cb0 	.word	0x00014cb0
 80062e0:	00014ce8 	.word	0x00014ce8
 80062e4:	00014ca4 	.word	0x00014ca4
 80062e8:	edd3 7a00 	vldr	s15, [r3]
 80062ec:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80062f0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80062f4:	4bbd      	ldr	r3, [pc, #756]	@ (80065ec <ETS+0x1ed0>)
 80062f6:	443b      	add	r3, r7
 80062f8:	edd3 7a00 	vldr	s15, [r3]
 80062fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006304:	4bba      	ldr	r3, [pc, #744]	@ (80065f0 <ETS+0x1ed4>)
 8006306:	443b      	add	r3, r7
 8006308:	edc3 7a00 	vstr	s15, [r3]
    n4 = 4*X[4] - X3_2;
 800630c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006310:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006314:	edd3 7a04 	vldr	s15, [r3, #16]
 8006318:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800631c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006320:	4bb4      	ldr	r3, [pc, #720]	@ (80065f4 <ETS+0x1ed8>)
 8006322:	443b      	add	r3, r7
 8006324:	edd3 7a00 	vldr	s15, [r3]
 8006328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800632c:	4bb2      	ldr	r3, [pc, #712]	@ (80065f8 <ETS+0x1edc>)
 800632e:	443b      	add	r3, r7
 8006330:	edc3 7a00 	vstr	s15, [r3]
    n5 = 4*X[0]*X[4] - X2_2;
 8006334:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006338:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800633c:	edd3 7a00 	vldr	s15, [r3]
 8006340:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8006344:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006348:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800634c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006350:	edd3 7a04 	vldr	s15, [r3, #16]
 8006354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006358:	4ba8      	ldr	r3, [pc, #672]	@ (80065fc <ETS+0x1ee0>)
 800635a:	443b      	add	r3, r7
 800635c:	edd3 7a00 	vldr	s15, [r3]
 8006360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006364:	4ba6      	ldr	r3, [pc, #664]	@ (8006600 <ETS+0x1ee4>)
 8006366:	443b      	add	r3, r7
 8006368:	edc3 7a00 	vstr	s15, [r3]
    n6 = 4*X[0] - X1_2;
 800636c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006370:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006374:	edd3 7a00 	vldr	s15, [r3]
 8006378:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800637c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006380:	4ba0      	ldr	r3, [pc, #640]	@ (8006604 <ETS+0x1ee8>)
 8006382:	443b      	add	r3, r7
 8006384:	edd3 7a00 	vldr	s15, [r3]
 8006388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800638c:	4b9e      	ldr	r3, [pc, #632]	@ (8006608 <ETS+0x1eec>)
 800638e:	443b      	add	r3, r7
 8006390:	edc3 7a00 	vstr	s15, [r3]

    phi = -atanf((fabsf(X[4])*sqrtf(n1*n5) * (2*X[2] - X[1]*X[3]) * sqrtf((X[4]*n4*n6) / n3)) / (X4_2 * sqrtf(-n2 / X[4]) * sqrtf(n1*n6) * sqrtf(-(n2 * n4) / n3) * sqrtf(-(n4*n5) / (X[4]*n2))));
 8006394:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006398:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800639c:	edd3 7a04 	vldr	s15, [r3, #16]
 80063a0:	eeb0 8ae7 	vabs.f32	s16, s15
 80063a4:	4b99      	ldr	r3, [pc, #612]	@ (800660c <ETS+0x1ef0>)
 80063a6:	443b      	add	r3, r7
 80063a8:	ed93 7a00 	vldr	s14, [r3]
 80063ac:	4b94      	ldr	r3, [pc, #592]	@ (8006600 <ETS+0x1ee4>)
 80063ae:	443b      	add	r3, r7
 80063b0:	edd3 7a00 	vldr	s15, [r3]
 80063b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b8:	eeb0 0a67 	vmov.f32	s0, s15
 80063bc:	f009 fb5c 	bl	800fa78 <sqrtf>
 80063c0:	eef0 7a40 	vmov.f32	s15, s0
 80063c4:	ee28 7a27 	vmul.f32	s14, s16, s15
 80063c8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80063cc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80063d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80063d4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80063d8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80063dc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80063e0:	ed93 6a01 	vldr	s12, [r3, #4]
 80063e4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80063e8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80063ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80063f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80063f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80063f8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80063fc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006400:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006404:	ed93 7a04 	vldr	s14, [r3, #16]
 8006408:	4b7b      	ldr	r3, [pc, #492]	@ (80065f8 <ETS+0x1edc>)
 800640a:	443b      	add	r3, r7
 800640c:	edd3 7a00 	vldr	s15, [r3]
 8006410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006414:	4b7c      	ldr	r3, [pc, #496]	@ (8006608 <ETS+0x1eec>)
 8006416:	443b      	add	r3, r7
 8006418:	edd3 7a00 	vldr	s15, [r3]
 800641c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006420:	4b73      	ldr	r3, [pc, #460]	@ (80065f0 <ETS+0x1ed4>)
 8006422:	443b      	add	r3, r7
 8006424:	edd3 7a00 	vldr	s15, [r3]
 8006428:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800642c:	eeb0 0a66 	vmov.f32	s0, s13
 8006430:	f009 fb22 	bl	800fa78 <sqrtf>
 8006434:	eef0 7a40 	vmov.f32	s15, s0
 8006438:	ee28 8a27 	vmul.f32	s16, s16, s15
 800643c:	4b74      	ldr	r3, [pc, #464]	@ (8006610 <ETS+0x1ef4>)
 800643e:	443b      	add	r3, r7
 8006440:	edd3 7a00 	vldr	s15, [r3]
 8006444:	eeb1 7a67 	vneg.f32	s14, s15
 8006448:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800644c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8006450:	edd3 7a04 	vldr	s15, [r3, #16]
 8006454:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006458:	eeb0 0a66 	vmov.f32	s0, s13
 800645c:	f009 fb0c 	bl	800fa78 <sqrtf>
 8006460:	eeb0 7a40 	vmov.f32	s14, s0
 8006464:	4b61      	ldr	r3, [pc, #388]	@ (80065ec <ETS+0x1ed0>)
 8006466:	443b      	add	r3, r7
 8006468:	edd3 7a00 	vldr	s15, [r3]
 800646c:	ee67 8a27 	vmul.f32	s17, s14, s15
 8006470:	4b66      	ldr	r3, [pc, #408]	@ (800660c <ETS+0x1ef0>)
 8006472:	443b      	add	r3, r7
 8006474:	ed93 7a00 	vldr	s14, [r3]
 8006478:	4b63      	ldr	r3, [pc, #396]	@ (8006608 <ETS+0x1eec>)
 800647a:	443b      	add	r3, r7
 800647c:	edd3 7a00 	vldr	s15, [r3]
 8006480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006484:	eeb0 0a67 	vmov.f32	s0, s15
 8006488:	f009 faf6 	bl	800fa78 <sqrtf>
 800648c:	eef0 7a40 	vmov.f32	s15, s0
 8006490:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8006494:	4b5e      	ldr	r3, [pc, #376]	@ (8006610 <ETS+0x1ef4>)
 8006496:	443b      	add	r3, r7
 8006498:	ed93 7a00 	vldr	s14, [r3]
 800649c:	4b56      	ldr	r3, [pc, #344]	@ (80065f8 <ETS+0x1edc>)
 800649e:	443b      	add	r3, r7
 80064a0:	edd3 7a00 	vldr	s15, [r3]
 80064a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a8:	eeb1 7a67 	vneg.f32	s14, s15
 80064ac:	4b50      	ldr	r3, [pc, #320]	@ (80065f0 <ETS+0x1ed4>)
 80064ae:	443b      	add	r3, r7
 80064b0:	edd3 7a00 	vldr	s15, [r3]
 80064b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80064b8:	eeb0 0a66 	vmov.f32	s0, s13
 80064bc:	f009 fadc 	bl	800fa78 <sqrtf>
 80064c0:	eef0 7a40 	vmov.f32	s15, s0
 80064c4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80064c8:	4b4b      	ldr	r3, [pc, #300]	@ (80065f8 <ETS+0x1edc>)
 80064ca:	443b      	add	r3, r7
 80064cc:	ed93 7a00 	vldr	s14, [r3]
 80064d0:	4b4b      	ldr	r3, [pc, #300]	@ (8006600 <ETS+0x1ee4>)
 80064d2:	443b      	add	r3, r7
 80064d4:	edd3 7a00 	vldr	s15, [r3]
 80064d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064dc:	eeb1 7a67 	vneg.f32	s14, s15
 80064e0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80064e4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80064e8:	edd3 6a04 	vldr	s13, [r3, #16]
 80064ec:	4b48      	ldr	r3, [pc, #288]	@ (8006610 <ETS+0x1ef4>)
 80064ee:	443b      	add	r3, r7
 80064f0:	edd3 7a00 	vldr	s15, [r3]
 80064f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80064fc:	eeb0 0a66 	vmov.f32	s0, s13
 8006500:	f009 faba 	bl	800fa78 <sqrtf>
 8006504:	eef0 7a40 	vmov.f32	s15, s0
 8006508:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800650c:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8006510:	eeb0 0a47 	vmov.f32	s0, s14
 8006514:	f009 face 	bl	800fab4 <atanf>
 8006518:	eef0 7a40 	vmov.f32	s15, s0
 800651c:	eef1 7a67 	vneg.f32	s15, s15
 8006520:	4b3c      	ldr	r3, [pc, #240]	@ (8006614 <ETS+0x1ef8>)
 8006522:	443b      	add	r3, r7
 8006524:	edc3 7a00 	vstr	s15, [r3]

    p[0] = sx;
 8006528:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800652c:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a39      	ldr	r2, [pc, #228]	@ (8006618 <ETS+0x1efc>)
 8006534:	443a      	add	r2, r7
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 800653a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800653e:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3304      	adds	r3, #4
 8006546:	4a35      	ldr	r2, [pc, #212]	@ (800661c <ETS+0x1f00>)
 8006548:	443a      	add	r2, r7
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 800654e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006552:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3308      	adds	r3, #8
 800655a:	4a31      	ldr	r2, [pc, #196]	@ (8006620 <ETS+0x1f04>)
 800655c:	443a      	add	r2, r7
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 8006562:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8006566:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	330c      	adds	r3, #12
 800656e:	4a2d      	ldr	r2, [pc, #180]	@ (8006624 <ETS+0x1f08>)
 8006570:	443a      	add	r2, r7
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8006576:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800657a:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3310      	adds	r3, #16
 8006582:	4a29      	ldr	r2, [pc, #164]	@ (8006628 <ETS+0x1f0c>)
 8006584:	443a      	add	r2, r7
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 800658a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800658e:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	4a25      	ldr	r2, [pc, #148]	@ (800662c <ETS+0x1f10>)
 8006598:	443a      	add	r2, r7
 800659a:	6812      	ldr	r2, [r2, #0]
 800659c:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 800659e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80065a2:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3318      	adds	r3, #24
 80065aa:	4a21      	ldr	r2, [pc, #132]	@ (8006630 <ETS+0x1f14>)
 80065ac:	443a      	add	r2, r7
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 80065b2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80065b6:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	331c      	adds	r3, #28
 80065be:	4a15      	ldr	r2, [pc, #84]	@ (8006614 <ETS+0x1ef8>)
 80065c0:	443a      	add	r2, r7
 80065c2:	6812      	ldr	r2, [r2, #0]
 80065c4:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 80065c6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80065ca:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3320      	adds	r3, #32
 80065d2:	4a18      	ldr	r2, [pc, #96]	@ (8006634 <ETS+0x1f18>)
 80065d4:	443a      	add	r2, r7
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	601a      	str	r2, [r3, #0]
}
 80065da:	bf00      	nop
 80065dc:	f507 37a6 	add.w	r7, r7, #84992	@ 0x14c00
 80065e0:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 80065e4:	46bd      	mov	sp, r7
 80065e6:	ecbd 8b02 	vpop	{d8}
 80065ea:	bd90      	pop	{r4, r7, pc}
 80065ec:	00014ca4 	.word	0x00014ca4
 80065f0:	00014ce4 	.word	0x00014ce4
 80065f4:	00014ca8 	.word	0x00014ca8
 80065f8:	00014ce0 	.word	0x00014ce0
 80065fc:	00014cac 	.word	0x00014cac
 8006600:	00014cdc 	.word	0x00014cdc
 8006604:	00014cb0 	.word	0x00014cb0
 8006608:	00014cd8 	.word	0x00014cd8
 800660c:	00014cec 	.word	0x00014cec
 8006610:	00014ce8 	.word	0x00014ce8
 8006614:	00014cb8 	.word	0x00014cb8
 8006618:	00014cc8 	.word	0x00014cc8
 800661c:	00014cc4 	.word	0x00014cc4
 8006620:	00014cc0 	.word	0x00014cc0
 8006624:	00014cd4 	.word	0x00014cd4
 8006628:	00014cd0 	.word	0x00014cd0
 800662c:	00014ccc 	.word	0x00014ccc
 8006630:	00014cbc 	.word	0x00014cbc
 8006634:	00014cb4 	.word	0x00014cb4

08006638 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08c      	sub	sp, #48	@ 0x30
 800663c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800663e:	f107 031c 	add.w	r3, r7, #28
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	605a      	str	r2, [r3, #4]
 8006648:	609a      	str	r2, [r3, #8]
 800664a:	60da      	str	r2, [r3, #12]
 800664c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800664e:	4b75      	ldr	r3, [pc, #468]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	4a74      	ldr	r2, [pc, #464]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 8006654:	f043 0304 	orr.w	r3, r3, #4
 8006658:	6313      	str	r3, [r2, #48]	@ 0x30
 800665a:	4b72      	ldr	r3, [pc, #456]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 800665c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006666:	4b6f      	ldr	r3, [pc, #444]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 8006668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800666a:	4a6e      	ldr	r2, [pc, #440]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 800666c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006670:	6313      	str	r3, [r2, #48]	@ 0x30
 8006672:	4b6c      	ldr	r3, [pc, #432]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800667e:	4b69      	ldr	r3, [pc, #420]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006682:	4a68      	ldr	r2, [pc, #416]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	6313      	str	r3, [r2, #48]	@ 0x30
 800668a:	4b66      	ldr	r3, [pc, #408]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006696:	4b63      	ldr	r3, [pc, #396]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669a:	4a62      	ldr	r2, [pc, #392]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 800669c:	f043 0302 	orr.w	r3, r3, #2
 80066a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80066a2:	4b60      	ldr	r3, [pc, #384]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80066ae:	4b5d      	ldr	r3, [pc, #372]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b2:	4a5c      	ldr	r2, [pc, #368]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 80066b4:	f043 0308 	orr.w	r3, r3, #8
 80066b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80066ba:	4b5a      	ldr	r3, [pc, #360]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	60bb      	str	r3, [r7, #8]
 80066c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80066c6:	4b57      	ldr	r3, [pc, #348]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ca:	4a56      	ldr	r2, [pc, #344]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 80066cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80066d2:	4b54      	ldr	r3, [pc, #336]	@ (8006824 <MX_GPIO_Init+0x1ec>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066da:	607b      	str	r3, [r7, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80066de:	2200      	movs	r2, #0
 80066e0:	2140      	movs	r1, #64	@ 0x40
 80066e2:	4851      	ldr	r0, [pc, #324]	@ (8006828 <MX_GPIO_Init+0x1f0>)
 80066e4:	f001 f8d8 	bl	8007898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80066e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80066ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80066f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80066f8:	f107 031c 	add.w	r3, r7, #28
 80066fc:	4619      	mov	r1, r3
 80066fe:	484b      	ldr	r0, [pc, #300]	@ (800682c <MX_GPIO_Init+0x1f4>)
 8006700:	f000 ff1e 	bl	8007540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006704:	2332      	movs	r3, #50	@ 0x32
 8006706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006708:	2302      	movs	r3, #2
 800670a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800670c:	2300      	movs	r3, #0
 800670e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006710:	2303      	movs	r3, #3
 8006712:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006714:	230b      	movs	r3, #11
 8006716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006718:	f107 031c 	add.w	r3, r7, #28
 800671c:	4619      	mov	r1, r3
 800671e:	4843      	ldr	r0, [pc, #268]	@ (800682c <MX_GPIO_Init+0x1f4>)
 8006720:	f000 ff0e 	bl	8007540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006724:	2386      	movs	r3, #134	@ 0x86
 8006726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006728:	2302      	movs	r3, #2
 800672a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672c:	2300      	movs	r3, #0
 800672e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006730:	2303      	movs	r3, #3
 8006732:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006734:	230b      	movs	r3, #11
 8006736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006738:	f107 031c 	add.w	r3, r7, #28
 800673c:	4619      	mov	r1, r3
 800673e:	483c      	ldr	r0, [pc, #240]	@ (8006830 <MX_GPIO_Init+0x1f8>)
 8006740:	f000 fefe 	bl	8007540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006744:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800674a:	2302      	movs	r3, #2
 800674c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800674e:	2300      	movs	r3, #0
 8006750:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006752:	2303      	movs	r3, #3
 8006754:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006756:	230b      	movs	r3, #11
 8006758:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800675a:	f107 031c 	add.w	r3, r7, #28
 800675e:	4619      	mov	r1, r3
 8006760:	4834      	ldr	r0, [pc, #208]	@ (8006834 <MX_GPIO_Init+0x1fc>)
 8006762:	f000 feed 	bl	8007540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006766:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800676a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800676c:	2302      	movs	r3, #2
 800676e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006770:	2300      	movs	r3, #0
 8006772:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006774:	2303      	movs	r3, #3
 8006776:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006778:	2307      	movs	r3, #7
 800677a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800677c:	f107 031c 	add.w	r3, r7, #28
 8006780:	4619      	mov	r1, r3
 8006782:	482d      	ldr	r0, [pc, #180]	@ (8006838 <MX_GPIO_Init+0x200>)
 8006784:	f000 fedc 	bl	8007540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8006788:	2340      	movs	r3, #64	@ 0x40
 800678a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800678c:	2301      	movs	r3, #1
 800678e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006790:	2300      	movs	r3, #0
 8006792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006794:	2300      	movs	r3, #0
 8006796:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8006798:	f107 031c 	add.w	r3, r7, #28
 800679c:	4619      	mov	r1, r3
 800679e:	4822      	ldr	r0, [pc, #136]	@ (8006828 <MX_GPIO_Init+0x1f0>)
 80067a0:	f000 fece 	bl	8007540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80067a4:	2380      	movs	r3, #128	@ 0x80
 80067a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067a8:	2300      	movs	r3, #0
 80067aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ac:	2300      	movs	r3, #0
 80067ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80067b0:	f107 031c 	add.w	r3, r7, #28
 80067b4:	4619      	mov	r1, r3
 80067b6:	481c      	ldr	r0, [pc, #112]	@ (8006828 <MX_GPIO_Init+0x1f0>)
 80067b8:	f000 fec2 	bl	8007540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80067bc:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80067c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067c2:	2302      	movs	r3, #2
 80067c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067ca:	2303      	movs	r3, #3
 80067cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80067ce:	230a      	movs	r3, #10
 80067d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067d2:	f107 031c 	add.w	r3, r7, #28
 80067d6:	4619      	mov	r1, r3
 80067d8:	4815      	ldr	r0, [pc, #84]	@ (8006830 <MX_GPIO_Init+0x1f8>)
 80067da:	f000 feb1 	bl	8007540 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80067de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067e4:	2300      	movs	r3, #0
 80067e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80067ec:	f107 031c 	add.w	r3, r7, #28
 80067f0:	4619      	mov	r1, r3
 80067f2:	480f      	ldr	r0, [pc, #60]	@ (8006830 <MX_GPIO_Init+0x1f8>)
 80067f4:	f000 fea4 	bl	8007540 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80067f8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80067fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067fe:	2302      	movs	r3, #2
 8006800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006802:	2300      	movs	r3, #0
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006806:	2303      	movs	r3, #3
 8006808:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800680a:	230b      	movs	r3, #11
 800680c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800680e:	f107 031c 	add.w	r3, r7, #28
 8006812:	4619      	mov	r1, r3
 8006814:	4804      	ldr	r0, [pc, #16]	@ (8006828 <MX_GPIO_Init+0x1f0>)
 8006816:	f000 fe93 	bl	8007540 <HAL_GPIO_Init>

}
 800681a:	bf00      	nop
 800681c:	3730      	adds	r7, #48	@ 0x30
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40023800 	.word	0x40023800
 8006828:	40021800 	.word	0x40021800
 800682c:	40020800 	.word	0x40020800
 8006830:	40020000 	.word	0x40020000
 8006834:	40020400 	.word	0x40020400
 8006838:	40020c00 	.word	0x40020c00

0800683c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800683c:	b5b0      	push	{r4, r5, r7, lr}
 800683e:	f5ad 4d6f 	sub.w	sp, sp, #61184	@ 0xef00
 8006842:	b0bc      	sub	sp, #240	@ 0xf0
 8006844:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  char file_read[20] = {0};
 8006846:	2300      	movs	r3, #0
 8006848:	f64e 72a4 	movw	r2, #61348	@ 0xefa4
 800684c:	443a      	add	r2, r7
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	f64e 73a8 	movw	r3, #61352	@ 0xefa8
 8006854:	443b      	add	r3, r7
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	605a      	str	r2, [r3, #4]
 800685c:	609a      	str	r2, [r3, #8]
 800685e:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006860:	f000 fc6d 	bl	800713e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006864:	f000 fa1e 	bl	8006ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006868:	f7ff fee6 	bl	8006638 <MX_GPIO_Init>
  MX_TIM2_Init();
 800686c:	f000 fb36 	bl	8006edc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8006870:	f000 fba4 	bl	8006fbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t start_time = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	f64e 72d0 	movw	r2, #61392	@ 0xefd0
 800687a:	443a      	add	r2, r7
 800687c:	6013      	str	r3, [r2, #0]
  uint32_t ETS_counter = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	f64e 72cc 	movw	r2, #61388	@ 0xefcc
 8006884:	443a      	add	r2, r7
 8006886:	6013      	str	r3, [r2, #0]
  uint32_t NLLS_counter = 0;
 8006888:	2300      	movs	r3, #0
 800688a:	f64e 72c8 	movw	r2, #61384	@ 0xefc8
 800688e:	443a      	add	r2, r7
 8006890:	6013      	str	r3, [r2, #0]
  uint16_t file_cont = 1;
 8006892:	2301      	movs	r3, #1
 8006894:	f64e 72e6 	movw	r2, #61414	@ 0xefe6
 8006898:	443a      	add	r2, r7
 800689a:	8013      	strh	r3, [r2, #0]
  float ETS_time = 0, NLLS_time = 0;
 800689c:	f04f 0300 	mov.w	r3, #0
 80068a0:	f64e 72c4 	movw	r2, #61380	@ 0xefc4
 80068a4:	443a      	add	r2, r7
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	f64e 72c0 	movw	r2, #61376	@ 0xefc0
 80068b0:	443a      	add	r2, r7
 80068b2:	6013      	str	r3, [r2, #0]



  /* USER CODE END 2 */
  printf("Começo da MTS");
 80068b4:	48a6      	ldr	r0, [pc, #664]	@ (8006b50 <main+0x314>)
 80068b6:	f005 ff29 	bl	800c70c <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(file_cont > 42)
 80068ba:	f64e 73e6 	movw	r3, #61414	@ 0xefe6
 80068be:	443b      	add	r3, r7
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80068c4:	d901      	bls.n	80068ca <main+0x8e>
	{
		return 1;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e1d8      	b.n	8006c7c <main+0x440>
	}
	printf("Run number %d", file_cont);
 80068ca:	f64e 73e6 	movw	r3, #61414	@ 0xefe6
 80068ce:	443b      	add	r3, r7
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	4619      	mov	r1, r3
 80068d4:	489f      	ldr	r0, [pc, #636]	@ (8006b54 <main+0x318>)
 80068d6:	f005 ff19 	bl	800c70c <iprintf>
	sprintf(file_read, "data\\run%d.txt", file_cont);
 80068da:	f64e 73e6 	movw	r3, #61414	@ 0xefe6
 80068de:	443b      	add	r3, r7
 80068e0:	881a      	ldrh	r2, [r3, #0]
 80068e2:	f64e 73a4 	movw	r3, #61348	@ 0xefa4
 80068e6:	443b      	add	r3, r7
 80068e8:	499b      	ldr	r1, [pc, #620]	@ (8006b58 <main+0x31c>)
 80068ea:	4618      	mov	r0, r3
 80068ec:	f006 f800 	bl	800c8f0 <siprintf>
	fp=fopen(file_read, "r");//C:\Users\labt5\OneDrive\Desktop\Cesar\IC_2024_Cesar\Matlab\Dados_com_ruido
 80068f0:	f64e 73a4 	movw	r3, #61348	@ 0xefa4
 80068f4:	443b      	add	r3, r7
 80068f6:	4999      	ldr	r1, [pc, #612]	@ (8006b5c <main+0x320>)
 80068f8:	4618      	mov	r0, r3
 80068fa:	f005 fe3f 	bl	800c57c <fopen>
 80068fe:	f64e 73bc 	movw	r3, #61372	@ 0xefbc
 8006902:	443b      	add	r3, r7
 8006904:	6018      	str	r0, [r3, #0]
	if (!fp)
 8006906:	f64e 73bc 	movw	r3, #61372	@ 0xefbc
 800690a:	443b      	add	r3, r7
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d104      	bne.n	800691c <main+0xe0>
	{
		printf("Erro ao abrir o arquivo.\n");
 8006912:	4893      	ldr	r0, [pc, #588]	@ (8006b60 <main+0x324>)
 8006914:	f005 ff62 	bl	800c7dc <puts>
		return 1;
 8006918:	2301      	movs	r3, #1
 800691a:	e1af      	b.n	8006c7c <main+0x440>
	}
	char line[61336];

	float *linhas[] = {mx, my, mz};  // Vetor de ponteiros para facilitar o acesso
 800691c:	4a91      	ldr	r2, [pc, #580]	@ (8006b64 <main+0x328>)
 800691e:	f64e 7398 	movw	r3, #61336	@ 0xef98
 8006922:	443b      	add	r3, r7
 8006924:	ca07      	ldmia	r2, {r0, r1, r2}
 8006926:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (int i = 0; i < 3; i++)
 800692a:	2300      	movs	r3, #0
 800692c:	f64e 72e0 	movw	r2, #61408	@ 0xefe0
 8006930:	443a      	add	r2, r7
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	e08e      	b.n	8006a54 <main+0x218>
	{
		if (fgets(line, sizeof(line), fp) == NULL)
 8006936:	4b8c      	ldr	r3, [pc, #560]	@ (8006b68 <main+0x32c>)
 8006938:	f503 436f 	add.w	r3, r3, #61184	@ 0xef00
 800693c:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 8006940:	443b      	add	r3, r7
 8006942:	f64e 72bc 	movw	r2, #61372	@ 0xefbc
 8006946:	443a      	add	r2, r7
 8006948:	6812      	ldr	r2, [r2, #0]
 800694a:	f64e 7198 	movw	r1, #61336	@ 0xef98
 800694e:	4618      	mov	r0, r3
 8006950:	f005 fcc0 	bl	800c2d4 <fgets>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10c      	bne.n	8006974 <main+0x138>
		{
		  fprintf(stderr, "Erro ao ler a linha %d\n", i);
 800695a:	4b84      	ldr	r3, [pc, #528]	@ (8006b6c <main+0x330>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	f64e 72e0 	movw	r2, #61408	@ 0xefe0
 8006964:	443a      	add	r2, r7
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	4981      	ldr	r1, [pc, #516]	@ (8006b70 <main+0x334>)
 800696a:	4618      	mov	r0, r3
 800696c:	f005 fe0e 	bl	800c58c <fiprintf>
		  return 1;
 8006970:	2301      	movs	r3, #1
 8006972:	e183      	b.n	8006c7c <main+0x440>
		}

		char *token = strtok(line, ",");
 8006974:	4b7c      	ldr	r3, [pc, #496]	@ (8006b68 <main+0x32c>)
 8006976:	f503 436f 	add.w	r3, r3, #61184	@ 0xef00
 800697a:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 800697e:	443b      	add	r3, r7
 8006980:	497c      	ldr	r1, [pc, #496]	@ (8006b74 <main+0x338>)
 8006982:	4618      	mov	r0, r3
 8006984:	f006 fb44 	bl	800d010 <strtok>
 8006988:	f64e 73dc 	movw	r3, #61404	@ 0xefdc
 800698c:	443b      	add	r3, r7
 800698e:	6018      	str	r0, [r3, #0]
		int j = 0;
 8006990:	2300      	movs	r3, #0
 8006992:	f64e 72d8 	movw	r2, #61400	@ 0xefd8
 8006996:	443a      	add	r2, r7
 8006998:	6013      	str	r3, [r2, #0]

		while (token != NULL && j < 1112)
 800699a:	e02d      	b.n	80069f8 <main+0x1bc>
		{
		  linhas[i][j] = strtof(token, NULL);
 800699c:	f64e 73e0 	movw	r3, #61408	@ 0xefe0
 80069a0:	443b      	add	r3, r7
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	f503 436f 	add.w	r3, r3, #61184	@ 0xef00
 80069aa:	f103 03e8 	add.w	r3, r3, #232	@ 0xe8
 80069ae:	443b      	add	r3, r7
 80069b0:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80069b4:	f64e 73d8 	movw	r3, #61400	@ 0xefd8
 80069b8:	443b      	add	r3, r7
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	18d4      	adds	r4, r2, r3
 80069c0:	2100      	movs	r1, #0
 80069c2:	f64e 73dc 	movw	r3, #61404	@ 0xefdc
 80069c6:	443b      	add	r3, r7
 80069c8:	6818      	ldr	r0, [r3, #0]
 80069ca:	f004 fc43 	bl	800b254 <strtof>
 80069ce:	eef0 7a40 	vmov.f32	s15, s0
 80069d2:	edc4 7a00 	vstr	s15, [r4]
		  token = strtok(NULL, ",");
 80069d6:	4967      	ldr	r1, [pc, #412]	@ (8006b74 <main+0x338>)
 80069d8:	2000      	movs	r0, #0
 80069da:	f006 fb19 	bl	800d010 <strtok>
 80069de:	f64e 73dc 	movw	r3, #61404	@ 0xefdc
 80069e2:	443b      	add	r3, r7
 80069e4:	6018      	str	r0, [r3, #0]
		  j++;
 80069e6:	f64e 73d8 	movw	r3, #61400	@ 0xefd8
 80069ea:	443b      	add	r3, r7
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3301      	adds	r3, #1
 80069f0:	f64e 72d8 	movw	r2, #61400	@ 0xefd8
 80069f4:	443a      	add	r2, r7
 80069f6:	6013      	str	r3, [r2, #0]
		while (token != NULL && j < 1112)
 80069f8:	f64e 73dc 	movw	r3, #61404	@ 0xefdc
 80069fc:	443b      	add	r3, r7
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d006      	beq.n	8006a12 <main+0x1d6>
 8006a04:	f64e 73d8 	movw	r3, #61400	@ 0xefd8
 8006a08:	443b      	add	r3, r7
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8006a10:	dbc4      	blt.n	800699c <main+0x160>
		}

		if (j != 1112)
 8006a12:	f64e 73d8 	movw	r3, #61400	@ 0xefd8
 8006a16:	443b      	add	r3, r7
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8006a1e:	d010      	beq.n	8006a42 <main+0x206>
		{
		  fprintf(stderr, "Linha %d com número incorreto de colunas: esperadas 1112, encontradas %d\n", i + 1, j);
 8006a20:	4b52      	ldr	r3, [pc, #328]	@ (8006b6c <main+0x330>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68d8      	ldr	r0, [r3, #12]
 8006a26:	f64e 73e0 	movw	r3, #61408	@ 0xefe0
 8006a2a:	443b      	add	r3, r7
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	f64e 73d8 	movw	r3, #61400	@ 0xefd8
 8006a34:	443b      	add	r3, r7
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	494f      	ldr	r1, [pc, #316]	@ (8006b78 <main+0x33c>)
 8006a3a:	f005 fda7 	bl	800c58c <fiprintf>
		  return 1;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e11c      	b.n	8006c7c <main+0x440>
	for (int i = 0; i < 3; i++)
 8006a42:	f64e 73e0 	movw	r3, #61408	@ 0xefe0
 8006a46:	443b      	add	r3, r7
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	f64e 72e0 	movw	r2, #61408	@ 0xefe0
 8006a50:	443a      	add	r2, r7
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	f64e 73e0 	movw	r3, #61408	@ 0xefe0
 8006a58:	443b      	add	r3, r7
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	f77f af6a 	ble.w	8006936 <main+0xfa>
		}
	}

	fclose(fp);
 8006a62:	f64e 73bc 	movw	r3, #61372	@ 0xefbc
 8006a66:	443b      	add	r3, r7
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	f005 fb19 	bl	800c0a0 <fclose>

	start_time = SysTick->VAL;
 8006a6e:	4b43      	ldr	r3, [pc, #268]	@ (8006b7c <main+0x340>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f64e 72d0 	movw	r2, #61392	@ 0xefd0
 8006a76:	443a      	add	r2, r7
 8006a78:	6013      	str	r3, [r2, #0]
	ETS(mx, my, mz, p1);
 8006a7a:	4b41      	ldr	r3, [pc, #260]	@ (8006b80 <main+0x344>)
 8006a7c:	4a41      	ldr	r2, [pc, #260]	@ (8006b84 <main+0x348>)
 8006a7e:	4942      	ldr	r1, [pc, #264]	@ (8006b88 <main+0x34c>)
 8006a80:	4842      	ldr	r0, [pc, #264]	@ (8006b8c <main+0x350>)
 8006a82:	f7fd fe4b 	bl	800471c <ETS>
	ETS_counter = start_time - SysTick->VAL;
 8006a86:	4b3d      	ldr	r3, [pc, #244]	@ (8006b7c <main+0x340>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f64e 72d0 	movw	r2, #61392	@ 0xefd0
 8006a8e:	443a      	add	r2, r7
 8006a90:	6812      	ldr	r2, [r2, #0]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	f64e 72cc 	movw	r2, #61388	@ 0xefcc
 8006a98:	443a      	add	r2, r7
 8006a9a:	6013      	str	r3, [r2, #0]
	ETS_time = ETS_counter/SystemCoreClock;
 8006a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8006b90 <main+0x354>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f64e 72cc 	movw	r2, #61388	@ 0xefcc
 8006aa4:	443a      	add	r2, r7
 8006aa6:	6812      	ldr	r2, [r2, #0]
 8006aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aac:	ee07 3a90 	vmov	s15, r3
 8006ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab4:	f64e 73c4 	movw	r3, #61380	@ 0xefc4
 8006ab8:	443b      	add	r3, r7
 8006aba:	edc3 7a00 	vstr	s15, [r3]

	start_time = SysTick->VAL;
 8006abe:	4b2f      	ldr	r3, [pc, #188]	@ (8006b7c <main+0x340>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f64e 72d0 	movw	r2, #61392	@ 0xefd0
 8006ac6:	443a      	add	r2, r7
 8006ac8:	6013      	str	r3, [r2, #0]
	passos_NLLS = NLLS(mx, my, mz, p0);
 8006aca:	4b32      	ldr	r3, [pc, #200]	@ (8006b94 <main+0x358>)
 8006acc:	4a2d      	ldr	r2, [pc, #180]	@ (8006b84 <main+0x348>)
 8006ace:	492e      	ldr	r1, [pc, #184]	@ (8006b88 <main+0x34c>)
 8006ad0:	482e      	ldr	r0, [pc, #184]	@ (8006b8c <main+0x350>)
 8006ad2:	f7fa fbc1 	bl	8001258 <NLLS>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	461a      	mov	r2, r3
 8006ada:	4b2f      	ldr	r3, [pc, #188]	@ (8006b98 <main+0x35c>)
 8006adc:	701a      	strb	r2, [r3, #0]
	NLLS_counter = start_time - SysTick->VAL;
 8006ade:	4b27      	ldr	r3, [pc, #156]	@ (8006b7c <main+0x340>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f64e 72d0 	movw	r2, #61392	@ 0xefd0
 8006ae6:	443a      	add	r2, r7
 8006ae8:	6812      	ldr	r2, [r2, #0]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	f64e 72c8 	movw	r2, #61384	@ 0xefc8
 8006af0:	443a      	add	r2, r7
 8006af2:	6013      	str	r3, [r2, #0]
	NLLS_time = NLLS_counter/SystemCoreClock;
 8006af4:	4b26      	ldr	r3, [pc, #152]	@ (8006b90 <main+0x354>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f64e 72c8 	movw	r2, #61384	@ 0xefc8
 8006afc:	443a      	add	r2, r7
 8006afe:	6812      	ldr	r2, [r2, #0]
 8006b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b04:	ee07 3a90 	vmov	s15, r3
 8006b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0c:	f64e 73c0 	movw	r3, #61376	@ 0xefc0
 8006b10:	443b      	add	r3, r7
 8006b12:	edc3 7a00 	vstr	s15, [r3]

	FILE *arquivoA = fopen(file_read, "w");
 8006b16:	f64e 73a4 	movw	r3, #61348	@ 0xefa4
 8006b1a:	443b      	add	r3, r7
 8006b1c:	491f      	ldr	r1, [pc, #124]	@ (8006b9c <main+0x360>)
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f005 fd2c 	bl	800c57c <fopen>
 8006b24:	f64e 73b8 	movw	r3, #61368	@ 0xefb8
 8006b28:	443b      	add	r3, r7
 8006b2a:	6018      	str	r0, [r3, #0]
	if (arquivoA == NULL)
 8006b2c:	f64e 73b8 	movw	r3, #61368	@ 0xefb8
 8006b30:	443b      	add	r3, r7
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d104      	bne.n	8006b42 <main+0x306>
	{
		perror("Erro ao criar o arquivo do ETS");
 8006b38:	4819      	ldr	r0, [pc, #100]	@ (8006ba0 <main+0x364>)
 8006b3a:	f005 fddf 	bl	800c6fc <perror>
		return 1;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e09c      	b.n	8006c7c <main+0x440>
	}
	for (int i = 0; i < 9; i++) {
 8006b42:	2300      	movs	r3, #0
 8006b44:	f64e 72d4 	movw	r2, #61396	@ 0xefd4
 8006b48:	443a      	add	r2, r7
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	e05b      	b.n	8006c06 <main+0x3ca>
 8006b4e:	bf00      	nop
 8006b50:	080107b4 	.word	0x080107b4
 8006b54:	080107c4 	.word	0x080107c4
 8006b58:	080107d4 	.word	0x080107d4
 8006b5c:	080107e4 	.word	0x080107e4
 8006b60:	080107e8 	.word	0x080107e8
 8006b64:	080108a8 	.word	0x080108a8
 8006b68:	ffff1018 	.word	0xffff1018
 8006b6c:	20000184 	.word	0x20000184
 8006b70:	08010804 	.word	0x08010804
 8006b74:	0801081c 	.word	0x0801081c
 8006b78:	08010820 	.word	0x08010820
 8006b7c:	e000e010 	.word	0xe000e010
 8006b80:	20003610 	.word	0x20003610
 8006b84:	200024b0 	.word	0x200024b0
 8006b88:	20001350 	.word	0x20001350
 8006b8c:	200001f0 	.word	0x200001f0
 8006b90:	20000000 	.word	0x20000000
 8006b94:	20003634 	.word	0x20003634
 8006b98:	20003658 	.word	0x20003658
 8006b9c:	0801086c 	.word	0x0801086c
 8006ba0:	08010870 	.word	0x08010870
		fprintf(arquivoA, "%f, ", p1[i]);
 8006ba4:	4a38      	ldr	r2, [pc, #224]	@ (8006c88 <main+0x44c>)
 8006ba6:	f64e 73d4 	movw	r3, #61396	@ 0xefd4
 8006baa:	443b      	add	r3, r7
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7f9 fce7 	bl	8000588 <__aeabi_f2d>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4933      	ldr	r1, [pc, #204]	@ (8006c8c <main+0x450>)
 8006bc0:	f64e 70b8 	movw	r0, #61368	@ 0xefb8
 8006bc4:	4438      	add	r0, r7
 8006bc6:	6800      	ldr	r0, [r0, #0]
 8006bc8:	f005 fce0 	bl	800c58c <fiprintf>
		fprintf(arquivoA, "%f\n", p0[i]);
 8006bcc:	4a30      	ldr	r2, [pc, #192]	@ (8006c90 <main+0x454>)
 8006bce:	f64e 73d4 	movw	r3, #61396	@ 0xefd4
 8006bd2:	443b      	add	r3, r7
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4413      	add	r3, r2
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7f9 fcd3 	bl	8000588 <__aeabi_f2d>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	492b      	ldr	r1, [pc, #172]	@ (8006c94 <main+0x458>)
 8006be8:	f64e 70b8 	movw	r0, #61368	@ 0xefb8
 8006bec:	4438      	add	r0, r7
 8006bee:	6800      	ldr	r0, [r0, #0]
 8006bf0:	f005 fccc 	bl	800c58c <fiprintf>
	for (int i = 0; i < 9; i++) {
 8006bf4:	f64e 73d4 	movw	r3, #61396	@ 0xefd4
 8006bf8:	443b      	add	r3, r7
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	f64e 72d4 	movw	r2, #61396	@ 0xefd4
 8006c02:	443a      	add	r2, r7
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	f64e 73d4 	movw	r3, #61396	@ 0xefd4
 8006c0a:	443b      	add	r3, r7
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b08      	cmp	r3, #8
 8006c10:	ddc8      	ble.n	8006ba4 <main+0x368>
	}
	fprintf(arquivoA, "%f, %f\n", ETS_time, NLLS_time);
 8006c12:	f64e 73c4 	movw	r3, #61380	@ 0xefc4
 8006c16:	443b      	add	r3, r7
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	f7f9 fcb5 	bl	8000588 <__aeabi_f2d>
 8006c1e:	4604      	mov	r4, r0
 8006c20:	460d      	mov	r5, r1
 8006c22:	f64e 73c0 	movw	r3, #61376	@ 0xefc0
 8006c26:	443b      	add	r3, r7
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	f7f9 fcad 	bl	8000588 <__aeabi_f2d>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	e9cd 2300 	strd	r2, r3, [sp]
 8006c36:	4622      	mov	r2, r4
 8006c38:	462b      	mov	r3, r5
 8006c3a:	4917      	ldr	r1, [pc, #92]	@ (8006c98 <main+0x45c>)
 8006c3c:	f64e 70b8 	movw	r0, #61368	@ 0xefb8
 8006c40:	4438      	add	r0, r7
 8006c42:	6800      	ldr	r0, [r0, #0]
 8006c44:	f005 fca2 	bl	800c58c <fiprintf>
	fprintf(arquivoA, "%u", passos_NLLS);
 8006c48:	4b14      	ldr	r3, [pc, #80]	@ (8006c9c <main+0x460>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4914      	ldr	r1, [pc, #80]	@ (8006ca0 <main+0x464>)
 8006c50:	f64e 73b8 	movw	r3, #61368	@ 0xefb8
 8006c54:	443b      	add	r3, r7
 8006c56:	6818      	ldr	r0, [r3, #0]
 8006c58:	f005 fc98 	bl	800c58c <fiprintf>
	fclose(arquivoA);
 8006c5c:	f64e 73b8 	movw	r3, #61368	@ 0xefb8
 8006c60:	443b      	add	r3, r7
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	f005 fa1c 	bl	800c0a0 <fclose>

	file_cont++;
 8006c68:	f64e 73e6 	movw	r3, #61414	@ 0xefe6
 8006c6c:	443b      	add	r3, r7
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	3301      	adds	r3, #1
 8006c72:	f64e 72e6 	movw	r2, #61414	@ 0xefe6
 8006c76:	443a      	add	r2, r7
 8006c78:	8013      	strh	r3, [r2, #0]
  {
 8006c7a:	e61e      	b.n	80068ba <main+0x7e>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f507 476f 	add.w	r7, r7, #61184	@ 0xef00
 8006c82:	37e8      	adds	r7, #232	@ 0xe8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bdb0      	pop	{r4, r5, r7, pc}
 8006c88:	20003610 	.word	0x20003610
 8006c8c:	08010890 	.word	0x08010890
 8006c90:	20003634 	.word	0x20003634
 8006c94:	08010898 	.word	0x08010898
 8006c98:	0801089c 	.word	0x0801089c
 8006c9c:	20003658 	.word	0x20003658
 8006ca0:	080108a4 	.word	0x080108a4

08006ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b094      	sub	sp, #80	@ 0x50
 8006ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006caa:	f107 0320 	add.w	r3, r7, #32
 8006cae:	2230      	movs	r2, #48	@ 0x30
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f005 ffab 	bl	800cc0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006cb8:	f107 030c 	add.w	r3, r7, #12
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	601a      	str	r2, [r3, #0]
 8006cc0:	605a      	str	r2, [r3, #4]
 8006cc2:	609a      	str	r2, [r3, #8]
 8006cc4:	60da      	str	r2, [r3, #12]
 8006cc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006cc8:	4b27      	ldr	r3, [pc, #156]	@ (8006d68 <SystemClock_Config+0xc4>)
 8006cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ccc:	4a26      	ldr	r2, [pc, #152]	@ (8006d68 <SystemClock_Config+0xc4>)
 8006cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8006cd4:	4b24      	ldr	r3, [pc, #144]	@ (8006d68 <SystemClock_Config+0xc4>)
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006ce0:	4b22      	ldr	r3, [pc, #136]	@ (8006d6c <SystemClock_Config+0xc8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006ce8:	4a20      	ldr	r2, [pc, #128]	@ (8006d6c <SystemClock_Config+0xc8>)
 8006cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8006d6c <SystemClock_Config+0xc8>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006cf8:	607b      	str	r3, [r7, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8006d00:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8006d04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006d06:	2302      	movs	r3, #2
 8006d08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006d0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8006d10:	2304      	movs	r3, #4
 8006d12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8006d14:	2348      	movs	r3, #72	@ 0x48
 8006d16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006d20:	f107 0320 	add.w	r3, r7, #32
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fdd1 	bl	80078cc <HAL_RCC_OscConfig>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8006d30:	f000 f81e 	bl	8006d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006d34:	230f      	movs	r3, #15
 8006d36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006d46:	2300      	movs	r3, #0
 8006d48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006d4a:	f107 030c 	add.w	r3, r7, #12
 8006d4e:	2102      	movs	r1, #2
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 f85f 	bl	8007e14 <HAL_RCC_ClockConfig>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006d5c:	f000 f808 	bl	8006d70 <Error_Handler>
  }
}
 8006d60:	bf00      	nop
 8006d62:	3750      	adds	r7, #80	@ 0x50
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	40007000 	.word	0x40007000

08006d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006d74:	b672      	cpsid	i
}
 8006d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006d78:	bf00      	nop
 8006d7a:	e7fd      	b.n	8006d78 <Error_Handler+0x8>

08006d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d82:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc0 <HAL_MspInit+0x44>)
 8006d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d86:	4a0e      	ldr	r2, [pc, #56]	@ (8006dc0 <HAL_MspInit+0x44>)
 8006d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc0 <HAL_MspInit+0x44>)
 8006d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d96:	607b      	str	r3, [r7, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d9a:	4b09      	ldr	r3, [pc, #36]	@ (8006dc0 <HAL_MspInit+0x44>)
 8006d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d9e:	4a08      	ldr	r2, [pc, #32]	@ (8006dc0 <HAL_MspInit+0x44>)
 8006da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006da6:	4b06      	ldr	r3, [pc, #24]	@ (8006dc0 <HAL_MspInit+0x44>)
 8006da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40023800 	.word	0x40023800

08006dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006dc8:	bf00      	nop
 8006dca:	e7fd      	b.n	8006dc8 <NMI_Handler+0x4>

08006dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006dd0:	bf00      	nop
 8006dd2:	e7fd      	b.n	8006dd0 <HardFault_Handler+0x4>

08006dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006dd8:	bf00      	nop
 8006dda:	e7fd      	b.n	8006dd8 <MemManage_Handler+0x4>

08006ddc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006de0:	bf00      	nop
 8006de2:	e7fd      	b.n	8006de0 <BusFault_Handler+0x4>

08006de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006de8:	bf00      	nop
 8006dea:	e7fd      	b.n	8006de8 <UsageFault_Handler+0x4>

08006dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006df0:	bf00      	nop
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006dfe:	bf00      	nop
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006e0c:	bf00      	nop
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e1a:	f000 f9cd 	bl	80071b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e1e:	bf00      	nop
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006e28:	4802      	ldr	r0, [pc, #8]	@ (8006e34 <TIM2_IRQHandler+0x10>)
 8006e2a:	f001 fe60 	bl	8008aee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006e2e:	bf00      	nop
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20003660 	.word	0x20003660

08006e38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006e3c:	4802      	ldr	r0, [pc, #8]	@ (8006e48 <USART2_IRQHandler+0x10>)
 8006e3e:	f002 faa5 	bl	800938c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006e42:	bf00      	nop
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	200036ac 	.word	0x200036ac

08006e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e54:	4a14      	ldr	r2, [pc, #80]	@ (8006ea8 <_sbrk+0x5c>)
 8006e56:	4b15      	ldr	r3, [pc, #84]	@ (8006eac <_sbrk+0x60>)
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e60:	4b13      	ldr	r3, [pc, #76]	@ (8006eb0 <_sbrk+0x64>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d102      	bne.n	8006e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006e68:	4b11      	ldr	r3, [pc, #68]	@ (8006eb0 <_sbrk+0x64>)
 8006e6a:	4a12      	ldr	r2, [pc, #72]	@ (8006eb4 <_sbrk+0x68>)
 8006e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e6e:	4b10      	ldr	r3, [pc, #64]	@ (8006eb0 <_sbrk+0x64>)
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4413      	add	r3, r2
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d207      	bcs.n	8006e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006e7c:	f006 f982 	bl	800d184 <__errno>
 8006e80:	4603      	mov	r3, r0
 8006e82:	220c      	movs	r2, #12
 8006e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006e86:	f04f 33ff 	mov.w	r3, #4294967295
 8006e8a:	e009      	b.n	8006ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006e8c:	4b08      	ldr	r3, [pc, #32]	@ (8006eb0 <_sbrk+0x64>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006e92:	4b07      	ldr	r3, [pc, #28]	@ (8006eb0 <_sbrk+0x64>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4413      	add	r3, r2
 8006e9a:	4a05      	ldr	r2, [pc, #20]	@ (8006eb0 <_sbrk+0x64>)
 8006e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	20050000 	.word	0x20050000
 8006eac:	00000400 	.word	0x00000400
 8006eb0:	2000365c 	.word	0x2000365c
 8006eb4:	20003928 	.word	0x20003928

08006eb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ebc:	4b06      	ldr	r3, [pc, #24]	@ (8006ed8 <SystemInit+0x20>)
 8006ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec2:	4a05      	ldr	r2, [pc, #20]	@ (8006ed8 <SystemInit+0x20>)
 8006ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006ecc:	bf00      	nop
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	e000ed00 	.word	0xe000ed00

08006edc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ee2:	f107 0310 	add.w	r3, r7, #16
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	605a      	str	r2, [r3, #4]
 8006eec:	609a      	str	r2, [r3, #8]
 8006eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ef0:	1d3b      	adds	r3, r7, #4
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	605a      	str	r2, [r3, #4]
 8006ef8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006efa:	4b1d      	ldr	r3, [pc, #116]	@ (8006f70 <MX_TIM2_Init+0x94>)
 8006efc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006f00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108 - 1;
 8006f02:	4b1b      	ldr	r3, [pc, #108]	@ (8006f70 <MX_TIM2_Init+0x94>)
 8006f04:	226b      	movs	r2, #107	@ 0x6b
 8006f06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f08:	4b19      	ldr	r3, [pc, #100]	@ (8006f70 <MX_TIM2_Init+0x94>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8006f0e:	4b18      	ldr	r3, [pc, #96]	@ (8006f70 <MX_TIM2_Init+0x94>)
 8006f10:	2201      	movs	r2, #1
 8006f12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006f14:	4b16      	ldr	r3, [pc, #88]	@ (8006f70 <MX_TIM2_Init+0x94>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f1a:	4b15      	ldr	r3, [pc, #84]	@ (8006f70 <MX_TIM2_Init+0x94>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006f20:	4813      	ldr	r0, [pc, #76]	@ (8006f70 <MX_TIM2_Init+0x94>)
 8006f22:	f001 fd8d 	bl	8008a40 <HAL_TIM_Base_Init>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8006f2c:	f7ff ff20 	bl	8006d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006f30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006f34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006f36:	f107 0310 	add.w	r3, r7, #16
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	480c      	ldr	r0, [pc, #48]	@ (8006f70 <MX_TIM2_Init+0x94>)
 8006f3e:	f001 fef5 	bl	8008d2c <HAL_TIM_ConfigClockSource>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8006f48:	f7ff ff12 	bl	8006d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006f4c:	2320      	movs	r3, #32
 8006f4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006f54:	1d3b      	adds	r3, r7, #4
 8006f56:	4619      	mov	r1, r3
 8006f58:	4805      	ldr	r0, [pc, #20]	@ (8006f70 <MX_TIM2_Init+0x94>)
 8006f5a:	f002 f91d 	bl	8009198 <HAL_TIMEx_MasterConfigSynchronization>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8006f64:	f7ff ff04 	bl	8006d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006f68:	bf00      	nop
 8006f6a:	3720      	adds	r7, #32
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20003660 	.word	0x20003660

08006f74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f84:	d113      	bne.n	8006fae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006f86:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <HAL_TIM_Base_MspInit+0x44>)
 8006f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8a:	4a0b      	ldr	r2, [pc, #44]	@ (8006fb8 <HAL_TIM_Base_MspInit+0x44>)
 8006f8c:	f043 0301 	orr.w	r3, r3, #1
 8006f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f92:	4b09      	ldr	r3, [pc, #36]	@ (8006fb8 <HAL_TIM_Base_MspInit+0x44>)
 8006f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	201c      	movs	r0, #28
 8006fa4:	f000 fa03 	bl	80073ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006fa8:	201c      	movs	r0, #28
 8006faa:	f000 fa1c 	bl	80073e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8006fae:	bf00      	nop
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40023800 	.word	0x40023800

08006fbc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006fc0:	4b15      	ldr	r3, [pc, #84]	@ (8007018 <MX_USART2_UART_Init+0x5c>)
 8006fc2:	4a16      	ldr	r2, [pc, #88]	@ (800701c <MX_USART2_UART_Init+0x60>)
 8006fc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006fc6:	4b14      	ldr	r3, [pc, #80]	@ (8007018 <MX_USART2_UART_Init+0x5c>)
 8006fc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006fcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006fce:	4b12      	ldr	r3, [pc, #72]	@ (8007018 <MX_USART2_UART_Init+0x5c>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006fd4:	4b10      	ldr	r3, [pc, #64]	@ (8007018 <MX_USART2_UART_Init+0x5c>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006fda:	4b0f      	ldr	r3, [pc, #60]	@ (8007018 <MX_USART2_UART_Init+0x5c>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8007018 <MX_USART2_UART_Init+0x5c>)
 8006fe2:	220c      	movs	r2, #12
 8006fe4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8007018 <MX_USART2_UART_Init+0x5c>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8006fec:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <MX_USART2_UART_Init+0x5c>)
 8006fee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006ff2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8006ff4:	4b08      	ldr	r3, [pc, #32]	@ (8007018 <MX_USART2_UART_Init+0x5c>)
 8006ff6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ffa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ffc:	4b06      	ldr	r3, [pc, #24]	@ (8007018 <MX_USART2_UART_Init+0x5c>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007002:	4805      	ldr	r0, [pc, #20]	@ (8007018 <MX_USART2_UART_Init+0x5c>)
 8007004:	f002 f974 	bl	80092f0 <HAL_UART_Init>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800700e:	f7ff feaf 	bl	8006d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007012:	bf00      	nop
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	200036ac 	.word	0x200036ac
 800701c:	40004400 	.word	0x40004400

08007020 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b0aa      	sub	sp, #168	@ 0xa8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007028:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	605a      	str	r2, [r3, #4]
 8007032:	609a      	str	r2, [r3, #8]
 8007034:	60da      	str	r2, [r3, #12]
 8007036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007038:	f107 0310 	add.w	r3, r7, #16
 800703c:	2284      	movs	r2, #132	@ 0x84
 800703e:	2100      	movs	r1, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f005 fde4 	bl	800cc0e <memset>
  if(uartHandle->Instance==USART2)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a25      	ldr	r2, [pc, #148]	@ (80070e0 <HAL_UART_MspInit+0xc0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d142      	bne.n	80070d6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007050:	2380      	movs	r3, #128	@ 0x80
 8007052:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007054:	2300      	movs	r3, #0
 8007056:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007058:	f107 0310 	add.w	r3, r7, #16
 800705c:	4618      	mov	r0, r3
 800705e:	f001 f8ff 	bl	8008260 <HAL_RCCEx_PeriphCLKConfig>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007068:	f7ff fe82 	bl	8006d70 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800706c:	4b1d      	ldr	r3, [pc, #116]	@ (80070e4 <HAL_UART_MspInit+0xc4>)
 800706e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007070:	4a1c      	ldr	r2, [pc, #112]	@ (80070e4 <HAL_UART_MspInit+0xc4>)
 8007072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007076:	6413      	str	r3, [r2, #64]	@ 0x40
 8007078:	4b1a      	ldr	r3, [pc, #104]	@ (80070e4 <HAL_UART_MspInit+0xc4>)
 800707a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007084:	4b17      	ldr	r3, [pc, #92]	@ (80070e4 <HAL_UART_MspInit+0xc4>)
 8007086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007088:	4a16      	ldr	r2, [pc, #88]	@ (80070e4 <HAL_UART_MspInit+0xc4>)
 800708a:	f043 0308 	orr.w	r3, r3, #8
 800708e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007090:	4b14      	ldr	r3, [pc, #80]	@ (80070e4 <HAL_UART_MspInit+0xc4>)
 8007092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	60bb      	str	r3, [r7, #8]
 800709a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800709c:	2360      	movs	r3, #96	@ 0x60
 800709e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070a2:	2302      	movs	r3, #2
 80070a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a8:	2300      	movs	r3, #0
 80070aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070ae:	2303      	movs	r3, #3
 80070b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80070b4:	2307      	movs	r3, #7
 80070b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070ba:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80070be:	4619      	mov	r1, r3
 80070c0:	4809      	ldr	r0, [pc, #36]	@ (80070e8 <HAL_UART_MspInit+0xc8>)
 80070c2:	f000 fa3d 	bl	8007540 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80070c6:	2200      	movs	r2, #0
 80070c8:	2100      	movs	r1, #0
 80070ca:	2026      	movs	r0, #38	@ 0x26
 80070cc:	f000 f96f 	bl	80073ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80070d0:	2026      	movs	r0, #38	@ 0x26
 80070d2:	f000 f988 	bl	80073e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80070d6:	bf00      	nop
 80070d8:	37a8      	adds	r7, #168	@ 0xa8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	40004400 	.word	0x40004400
 80070e4:	40023800 	.word	0x40023800
 80070e8:	40020c00 	.word	0x40020c00

080070ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80070ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007124 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80070f0:	f7ff fee2 	bl	8006eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80070f4:	480c      	ldr	r0, [pc, #48]	@ (8007128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80070f6:	490d      	ldr	r1, [pc, #52]	@ (800712c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80070f8:	4a0d      	ldr	r2, [pc, #52]	@ (8007130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80070fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80070fc:	e002      	b.n	8007104 <LoopCopyDataInit>

080070fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80070fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007102:	3304      	adds	r3, #4

08007104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007108:	d3f9      	bcc.n	80070fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800710a:	4a0a      	ldr	r2, [pc, #40]	@ (8007134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800710c:	4c0a      	ldr	r4, [pc, #40]	@ (8007138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800710e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007110:	e001      	b.n	8007116 <LoopFillZerobss>

08007112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007114:	3204      	adds	r2, #4

08007116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007118:	d3fb      	bcc.n	8007112 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800711a:	f006 f839 	bl	800d190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800711e:	f7ff fb8d 	bl	800683c <main>
  bx  lr    
 8007122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007124:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8007128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800712c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8007130:	080117e4 	.word	0x080117e4
  ldr r2, =_sbss
 8007134:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8007138:	20003924 	.word	0x20003924

0800713c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800713c:	e7fe      	b.n	800713c <ADC_IRQHandler>

0800713e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007142:	2003      	movs	r0, #3
 8007144:	f000 f928 	bl	8007398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007148:	2000      	movs	r0, #0
 800714a:	f000 f805 	bl	8007158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800714e:	f7ff fe15 	bl	8006d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007160:	4b12      	ldr	r3, [pc, #72]	@ (80071ac <HAL_InitTick+0x54>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	4b12      	ldr	r3, [pc, #72]	@ (80071b0 <HAL_InitTick+0x58>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	4619      	mov	r1, r3
 800716a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800716e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007172:	fbb2 f3f3 	udiv	r3, r2, r3
 8007176:	4618      	mov	r0, r3
 8007178:	f000 f943 	bl	8007402 <HAL_SYSTICK_Config>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e00e      	b.n	80071a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b0f      	cmp	r3, #15
 800718a:	d80a      	bhi.n	80071a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800718c:	2200      	movs	r2, #0
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	f04f 30ff 	mov.w	r0, #4294967295
 8007194:	f000 f90b 	bl	80073ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007198:	4a06      	ldr	r2, [pc, #24]	@ (80071b4 <HAL_InitTick+0x5c>)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	e000      	b.n	80071a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	20000000 	.word	0x20000000
 80071b0:	20000008 	.word	0x20000008
 80071b4:	20000004 	.word	0x20000004

080071b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80071bc:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <HAL_IncTick+0x20>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	4b06      	ldr	r3, [pc, #24]	@ (80071dc <HAL_IncTick+0x24>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4413      	add	r3, r2
 80071c8:	4a04      	ldr	r2, [pc, #16]	@ (80071dc <HAL_IncTick+0x24>)
 80071ca:	6013      	str	r3, [r2, #0]
}
 80071cc:	bf00      	nop
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000008 	.word	0x20000008
 80071dc:	20003734 	.word	0x20003734

080071e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0
  return uwTick;
 80071e4:	4b03      	ldr	r3, [pc, #12]	@ (80071f4 <HAL_GetTick+0x14>)
 80071e6:	681b      	ldr	r3, [r3, #0]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20003734 	.word	0x20003734

080071f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007208:	4b0b      	ldr	r3, [pc, #44]	@ (8007238 <__NVIC_SetPriorityGrouping+0x40>)
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007214:	4013      	ands	r3, r2
 8007216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007220:	4b06      	ldr	r3, [pc, #24]	@ (800723c <__NVIC_SetPriorityGrouping+0x44>)
 8007222:	4313      	orrs	r3, r2
 8007224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007226:	4a04      	ldr	r2, [pc, #16]	@ (8007238 <__NVIC_SetPriorityGrouping+0x40>)
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	60d3      	str	r3, [r2, #12]
}
 800722c:	bf00      	nop
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	e000ed00 	.word	0xe000ed00
 800723c:	05fa0000 	.word	0x05fa0000

08007240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007244:	4b04      	ldr	r3, [pc, #16]	@ (8007258 <__NVIC_GetPriorityGrouping+0x18>)
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	0a1b      	lsrs	r3, r3, #8
 800724a:	f003 0307 	and.w	r3, r3, #7
}
 800724e:	4618      	mov	r0, r3
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	e000ed00 	.word	0xe000ed00

0800725c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800726a:	2b00      	cmp	r3, #0
 800726c:	db0b      	blt.n	8007286 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	f003 021f 	and.w	r2, r3, #31
 8007274:	4907      	ldr	r1, [pc, #28]	@ (8007294 <__NVIC_EnableIRQ+0x38>)
 8007276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	2001      	movs	r0, #1
 800727e:	fa00 f202 	lsl.w	r2, r0, r2
 8007282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	e000e100 	.word	0xe000e100

08007298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	6039      	str	r1, [r7, #0]
 80072a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	db0a      	blt.n	80072c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	490c      	ldr	r1, [pc, #48]	@ (80072e4 <__NVIC_SetPriority+0x4c>)
 80072b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b6:	0112      	lsls	r2, r2, #4
 80072b8:	b2d2      	uxtb	r2, r2
 80072ba:	440b      	add	r3, r1
 80072bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80072c0:	e00a      	b.n	80072d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	4908      	ldr	r1, [pc, #32]	@ (80072e8 <__NVIC_SetPriority+0x50>)
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	f003 030f 	and.w	r3, r3, #15
 80072ce:	3b04      	subs	r3, #4
 80072d0:	0112      	lsls	r2, r2, #4
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	440b      	add	r3, r1
 80072d6:	761a      	strb	r2, [r3, #24]
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	e000e100 	.word	0xe000e100
 80072e8:	e000ed00 	.word	0xe000ed00

080072ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b089      	sub	sp, #36	@ 0x24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	f1c3 0307 	rsb	r3, r3, #7
 8007306:	2b04      	cmp	r3, #4
 8007308:	bf28      	it	cs
 800730a:	2304      	movcs	r3, #4
 800730c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	3304      	adds	r3, #4
 8007312:	2b06      	cmp	r3, #6
 8007314:	d902      	bls.n	800731c <NVIC_EncodePriority+0x30>
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	3b03      	subs	r3, #3
 800731a:	e000      	b.n	800731e <NVIC_EncodePriority+0x32>
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007320:	f04f 32ff 	mov.w	r2, #4294967295
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	fa02 f303 	lsl.w	r3, r2, r3
 800732a:	43da      	mvns	r2, r3
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	401a      	ands	r2, r3
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007334:	f04f 31ff 	mov.w	r1, #4294967295
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	fa01 f303 	lsl.w	r3, r1, r3
 800733e:	43d9      	mvns	r1, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007344:	4313      	orrs	r3, r2
         );
}
 8007346:	4618      	mov	r0, r3
 8007348:	3724      	adds	r7, #36	@ 0x24
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
	...

08007354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3b01      	subs	r3, #1
 8007360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007364:	d301      	bcc.n	800736a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007366:	2301      	movs	r3, #1
 8007368:	e00f      	b.n	800738a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800736a:	4a0a      	ldr	r2, [pc, #40]	@ (8007394 <SysTick_Config+0x40>)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3b01      	subs	r3, #1
 8007370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007372:	210f      	movs	r1, #15
 8007374:	f04f 30ff 	mov.w	r0, #4294967295
 8007378:	f7ff ff8e 	bl	8007298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800737c:	4b05      	ldr	r3, [pc, #20]	@ (8007394 <SysTick_Config+0x40>)
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007382:	4b04      	ldr	r3, [pc, #16]	@ (8007394 <SysTick_Config+0x40>)
 8007384:	2207      	movs	r2, #7
 8007386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	e000e010 	.word	0xe000e010

08007398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff ff29 	bl	80071f8 <__NVIC_SetPriorityGrouping>
}
 80073a6:	bf00      	nop
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b086      	sub	sp, #24
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	4603      	mov	r3, r0
 80073b6:	60b9      	str	r1, [r7, #8]
 80073b8:	607a      	str	r2, [r7, #4]
 80073ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80073bc:	2300      	movs	r3, #0
 80073be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80073c0:	f7ff ff3e 	bl	8007240 <__NVIC_GetPriorityGrouping>
 80073c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	68b9      	ldr	r1, [r7, #8]
 80073ca:	6978      	ldr	r0, [r7, #20]
 80073cc:	f7ff ff8e 	bl	80072ec <NVIC_EncodePriority>
 80073d0:	4602      	mov	r2, r0
 80073d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073d6:	4611      	mov	r1, r2
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff ff5d 	bl	8007298 <__NVIC_SetPriority>
}
 80073de:	bf00      	nop
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	4603      	mov	r3, r0
 80073ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff ff31 	bl	800725c <__NVIC_EnableIRQ>
}
 80073fa:	bf00      	nop
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7ff ffa2 	bl	8007354 <SysTick_Config>
 8007410:	4603      	mov	r3, r0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b084      	sub	sp, #16
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007426:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007428:	f7ff feda 	bl	80071e0 <HAL_GetTick>
 800742c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d008      	beq.n	800744c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2280      	movs	r2, #128	@ 0x80
 800743e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e052      	b.n	80074f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0216 	bic.w	r2, r2, #22
 800745a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695a      	ldr	r2, [r3, #20]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800746a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d103      	bne.n	800747c <HAL_DMA_Abort+0x62>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007478:	2b00      	cmp	r3, #0
 800747a:	d007      	beq.n	800748c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0208 	bic.w	r2, r2, #8
 800748a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0201 	bic.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800749c:	e013      	b.n	80074c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800749e:	f7ff fe9f 	bl	80071e0 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	2b05      	cmp	r3, #5
 80074aa:	d90c      	bls.n	80074c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2220      	movs	r2, #32
 80074b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2203      	movs	r2, #3
 80074b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e015      	b.n	80074f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e4      	bne.n	800749e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074d8:	223f      	movs	r2, #63	@ 0x3f
 80074da:	409a      	lsls	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b02      	cmp	r3, #2
 800750c:	d004      	beq.n	8007518 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2280      	movs	r2, #128	@ 0x80
 8007512:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e00c      	b.n	8007532 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2205      	movs	r2, #5
 800751c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0201 	bic.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
	...

08007540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007540:	b480      	push	{r7}
 8007542:	b089      	sub	sp, #36	@ 0x24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800754a:	2300      	movs	r3, #0
 800754c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800754e:	2300      	movs	r3, #0
 8007550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007552:	2300      	movs	r3, #0
 8007554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007556:	2300      	movs	r3, #0
 8007558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800755a:	2300      	movs	r3, #0
 800755c:	61fb      	str	r3, [r7, #28]
 800755e:	e175      	b.n	800784c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007560:	2201      	movs	r2, #1
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	fa02 f303 	lsl.w	r3, r2, r3
 8007568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4013      	ands	r3, r2
 8007572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	429a      	cmp	r2, r3
 800757a:	f040 8164 	bne.w	8007846 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	2b01      	cmp	r3, #1
 8007588:	d005      	beq.n	8007596 <HAL_GPIO_Init+0x56>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d130      	bne.n	80075f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	2203      	movs	r2, #3
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	43db      	mvns	r3, r3
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	4013      	ands	r3, r2
 80075ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	4313      	orrs	r3, r2
 80075be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80075cc:	2201      	movs	r2, #1
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	43db      	mvns	r3, r3
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	4013      	ands	r3, r2
 80075da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	091b      	lsrs	r3, r3, #4
 80075e2:	f003 0201 	and.w	r2, r3, #1
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f003 0303 	and.w	r3, r3, #3
 8007600:	2b03      	cmp	r3, #3
 8007602:	d017      	beq.n	8007634 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	2203      	movs	r2, #3
 8007610:	fa02 f303 	lsl.w	r3, r2, r3
 8007614:	43db      	mvns	r3, r3
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	4013      	ands	r3, r2
 800761a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	fa02 f303 	lsl.w	r3, r2, r3
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	4313      	orrs	r3, r2
 800762c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f003 0303 	and.w	r3, r3, #3
 800763c:	2b02      	cmp	r3, #2
 800763e:	d123      	bne.n	8007688 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	08da      	lsrs	r2, r3, #3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3208      	adds	r2, #8
 8007648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	220f      	movs	r2, #15
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	43db      	mvns	r3, r3
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	4013      	ands	r3, r2
 8007662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	69ba      	ldr	r2, [r7, #24]
 8007676:	4313      	orrs	r3, r2
 8007678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	08da      	lsrs	r2, r3, #3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3208      	adds	r2, #8
 8007682:	69b9      	ldr	r1, [r7, #24]
 8007684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	2203      	movs	r2, #3
 8007694:	fa02 f303 	lsl.w	r3, r2, r3
 8007698:	43db      	mvns	r3, r3
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	4013      	ands	r3, r2
 800769e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f003 0203 	and.w	r2, r3, #3
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	fa02 f303 	lsl.w	r3, r2, r3
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69ba      	ldr	r2, [r7, #24]
 80076ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 80be 	beq.w	8007846 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076ca:	4b66      	ldr	r3, [pc, #408]	@ (8007864 <HAL_GPIO_Init+0x324>)
 80076cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ce:	4a65      	ldr	r2, [pc, #404]	@ (8007864 <HAL_GPIO_Init+0x324>)
 80076d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80076d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80076d6:	4b63      	ldr	r3, [pc, #396]	@ (8007864 <HAL_GPIO_Init+0x324>)
 80076d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80076e2:	4a61      	ldr	r2, [pc, #388]	@ (8007868 <HAL_GPIO_Init+0x328>)
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	089b      	lsrs	r3, r3, #2
 80076e8:	3302      	adds	r3, #2
 80076ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	f003 0303 	and.w	r3, r3, #3
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	220f      	movs	r2, #15
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	43db      	mvns	r3, r3
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	4013      	ands	r3, r2
 8007704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a58      	ldr	r2, [pc, #352]	@ (800786c <HAL_GPIO_Init+0x32c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d037      	beq.n	800777e <HAL_GPIO_Init+0x23e>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a57      	ldr	r2, [pc, #348]	@ (8007870 <HAL_GPIO_Init+0x330>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d031      	beq.n	800777a <HAL_GPIO_Init+0x23a>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a56      	ldr	r2, [pc, #344]	@ (8007874 <HAL_GPIO_Init+0x334>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d02b      	beq.n	8007776 <HAL_GPIO_Init+0x236>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a55      	ldr	r2, [pc, #340]	@ (8007878 <HAL_GPIO_Init+0x338>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d025      	beq.n	8007772 <HAL_GPIO_Init+0x232>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a54      	ldr	r2, [pc, #336]	@ (800787c <HAL_GPIO_Init+0x33c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d01f      	beq.n	800776e <HAL_GPIO_Init+0x22e>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a53      	ldr	r2, [pc, #332]	@ (8007880 <HAL_GPIO_Init+0x340>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d019      	beq.n	800776a <HAL_GPIO_Init+0x22a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a52      	ldr	r2, [pc, #328]	@ (8007884 <HAL_GPIO_Init+0x344>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d013      	beq.n	8007766 <HAL_GPIO_Init+0x226>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a51      	ldr	r2, [pc, #324]	@ (8007888 <HAL_GPIO_Init+0x348>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00d      	beq.n	8007762 <HAL_GPIO_Init+0x222>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a50      	ldr	r2, [pc, #320]	@ (800788c <HAL_GPIO_Init+0x34c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d007      	beq.n	800775e <HAL_GPIO_Init+0x21e>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a4f      	ldr	r2, [pc, #316]	@ (8007890 <HAL_GPIO_Init+0x350>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d101      	bne.n	800775a <HAL_GPIO_Init+0x21a>
 8007756:	2309      	movs	r3, #9
 8007758:	e012      	b.n	8007780 <HAL_GPIO_Init+0x240>
 800775a:	230a      	movs	r3, #10
 800775c:	e010      	b.n	8007780 <HAL_GPIO_Init+0x240>
 800775e:	2308      	movs	r3, #8
 8007760:	e00e      	b.n	8007780 <HAL_GPIO_Init+0x240>
 8007762:	2307      	movs	r3, #7
 8007764:	e00c      	b.n	8007780 <HAL_GPIO_Init+0x240>
 8007766:	2306      	movs	r3, #6
 8007768:	e00a      	b.n	8007780 <HAL_GPIO_Init+0x240>
 800776a:	2305      	movs	r3, #5
 800776c:	e008      	b.n	8007780 <HAL_GPIO_Init+0x240>
 800776e:	2304      	movs	r3, #4
 8007770:	e006      	b.n	8007780 <HAL_GPIO_Init+0x240>
 8007772:	2303      	movs	r3, #3
 8007774:	e004      	b.n	8007780 <HAL_GPIO_Init+0x240>
 8007776:	2302      	movs	r3, #2
 8007778:	e002      	b.n	8007780 <HAL_GPIO_Init+0x240>
 800777a:	2301      	movs	r3, #1
 800777c:	e000      	b.n	8007780 <HAL_GPIO_Init+0x240>
 800777e:	2300      	movs	r3, #0
 8007780:	69fa      	ldr	r2, [r7, #28]
 8007782:	f002 0203 	and.w	r2, r2, #3
 8007786:	0092      	lsls	r2, r2, #2
 8007788:	4093      	lsls	r3, r2
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	4313      	orrs	r3, r2
 800778e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007790:	4935      	ldr	r1, [pc, #212]	@ (8007868 <HAL_GPIO_Init+0x328>)
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	089b      	lsrs	r3, r3, #2
 8007796:	3302      	adds	r3, #2
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800779e:	4b3d      	ldr	r3, [pc, #244]	@ (8007894 <HAL_GPIO_Init+0x354>)
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	43db      	mvns	r3, r3
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	4013      	ands	r3, r2
 80077ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	4313      	orrs	r3, r2
 80077c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80077c2:	4a34      	ldr	r2, [pc, #208]	@ (8007894 <HAL_GPIO_Init+0x354>)
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80077c8:	4b32      	ldr	r3, [pc, #200]	@ (8007894 <HAL_GPIO_Init+0x354>)
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	43db      	mvns	r3, r3
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	4013      	ands	r3, r2
 80077d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d003      	beq.n	80077ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80077ec:	4a29      	ldr	r2, [pc, #164]	@ (8007894 <HAL_GPIO_Init+0x354>)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80077f2:	4b28      	ldr	r3, [pc, #160]	@ (8007894 <HAL_GPIO_Init+0x354>)
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	43db      	mvns	r3, r3
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4013      	ands	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	4313      	orrs	r3, r2
 8007814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007816:	4a1f      	ldr	r2, [pc, #124]	@ (8007894 <HAL_GPIO_Init+0x354>)
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800781c:	4b1d      	ldr	r3, [pc, #116]	@ (8007894 <HAL_GPIO_Init+0x354>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	43db      	mvns	r3, r3
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	4013      	ands	r3, r2
 800782a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007840:	4a14      	ldr	r2, [pc, #80]	@ (8007894 <HAL_GPIO_Init+0x354>)
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	3301      	adds	r3, #1
 800784a:	61fb      	str	r3, [r7, #28]
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	2b0f      	cmp	r3, #15
 8007850:	f67f ae86 	bls.w	8007560 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop
 8007858:	3724      	adds	r7, #36	@ 0x24
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	40023800 	.word	0x40023800
 8007868:	40013800 	.word	0x40013800
 800786c:	40020000 	.word	0x40020000
 8007870:	40020400 	.word	0x40020400
 8007874:	40020800 	.word	0x40020800
 8007878:	40020c00 	.word	0x40020c00
 800787c:	40021000 	.word	0x40021000
 8007880:	40021400 	.word	0x40021400
 8007884:	40021800 	.word	0x40021800
 8007888:	40021c00 	.word	0x40021c00
 800788c:	40022000 	.word	0x40022000
 8007890:	40022400 	.word	0x40022400
 8007894:	40013c00 	.word	0x40013c00

08007898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	807b      	strh	r3, [r7, #2]
 80078a4:	4613      	mov	r3, r2
 80078a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80078a8:	787b      	ldrb	r3, [r7, #1]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078ae:	887a      	ldrh	r2, [r7, #2]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80078b4:	e003      	b.n	80078be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80078b6:	887b      	ldrh	r3, [r7, #2]
 80078b8:	041a      	lsls	r2, r3, #16
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	619a      	str	r2, [r3, #24]
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
	...

080078cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80078d4:	2300      	movs	r3, #0
 80078d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e291      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 8087 	beq.w	80079fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078f0:	4b96      	ldr	r3, [pc, #600]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f003 030c 	and.w	r3, r3, #12
 80078f8:	2b04      	cmp	r3, #4
 80078fa:	d00c      	beq.n	8007916 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078fc:	4b93      	ldr	r3, [pc, #588]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 030c 	and.w	r3, r3, #12
 8007904:	2b08      	cmp	r3, #8
 8007906:	d112      	bne.n	800792e <HAL_RCC_OscConfig+0x62>
 8007908:	4b90      	ldr	r3, [pc, #576]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007910:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007914:	d10b      	bne.n	800792e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007916:	4b8d      	ldr	r3, [pc, #564]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d06c      	beq.n	80079fc <HAL_RCC_OscConfig+0x130>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d168      	bne.n	80079fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e26b      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007936:	d106      	bne.n	8007946 <HAL_RCC_OscConfig+0x7a>
 8007938:	4b84      	ldr	r3, [pc, #528]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a83      	ldr	r2, [pc, #524]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 800793e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	e02e      	b.n	80079a4 <HAL_RCC_OscConfig+0xd8>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10c      	bne.n	8007968 <HAL_RCC_OscConfig+0x9c>
 800794e:	4b7f      	ldr	r3, [pc, #508]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a7e      	ldr	r2, [pc, #504]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	4b7c      	ldr	r3, [pc, #496]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a7b      	ldr	r2, [pc, #492]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007960:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	e01d      	b.n	80079a4 <HAL_RCC_OscConfig+0xd8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007970:	d10c      	bne.n	800798c <HAL_RCC_OscConfig+0xc0>
 8007972:	4b76      	ldr	r3, [pc, #472]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a75      	ldr	r2, [pc, #468]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007978:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	4b73      	ldr	r3, [pc, #460]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a72      	ldr	r2, [pc, #456]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	e00b      	b.n	80079a4 <HAL_RCC_OscConfig+0xd8>
 800798c:	4b6f      	ldr	r3, [pc, #444]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a6e      	ldr	r2, [pc, #440]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	4b6c      	ldr	r3, [pc, #432]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a6b      	ldr	r2, [pc, #428]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 800799e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d013      	beq.n	80079d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ac:	f7ff fc18 	bl	80071e0 <HAL_GetTick>
 80079b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079b2:	e008      	b.n	80079c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079b4:	f7ff fc14 	bl	80071e0 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b64      	cmp	r3, #100	@ 0x64
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e21f      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079c6:	4b61      	ldr	r3, [pc, #388]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0f0      	beq.n	80079b4 <HAL_RCC_OscConfig+0xe8>
 80079d2:	e014      	b.n	80079fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d4:	f7ff fc04 	bl	80071e0 <HAL_GetTick>
 80079d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079da:	e008      	b.n	80079ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079dc:	f7ff fc00 	bl	80071e0 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	2b64      	cmp	r3, #100	@ 0x64
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e20b      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079ee:	4b57      	ldr	r3, [pc, #348]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1f0      	bne.n	80079dc <HAL_RCC_OscConfig+0x110>
 80079fa:	e000      	b.n	80079fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0302 	and.w	r3, r3, #2
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d069      	beq.n	8007ade <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a0a:	4b50      	ldr	r3, [pc, #320]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f003 030c 	and.w	r3, r3, #12
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00b      	beq.n	8007a2e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a16:	4b4d      	ldr	r3, [pc, #308]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f003 030c 	and.w	r3, r3, #12
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d11c      	bne.n	8007a5c <HAL_RCC_OscConfig+0x190>
 8007a22:	4b4a      	ldr	r3, [pc, #296]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d116      	bne.n	8007a5c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a2e:	4b47      	ldr	r3, [pc, #284]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0302 	and.w	r3, r3, #2
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_RCC_OscConfig+0x17a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d001      	beq.n	8007a46 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e1df      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a46:	4b41      	ldr	r3, [pc, #260]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	493d      	ldr	r1, [pc, #244]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007a56:	4313      	orrs	r3, r2
 8007a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a5a:	e040      	b.n	8007ade <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d023      	beq.n	8007aac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a64:	4b39      	ldr	r3, [pc, #228]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a38      	ldr	r2, [pc, #224]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a70:	f7ff fbb6 	bl	80071e0 <HAL_GetTick>
 8007a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a76:	e008      	b.n	8007a8a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a78:	f7ff fbb2 	bl	80071e0 <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	2b02      	cmp	r3, #2
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e1bd      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a8a:	4b30      	ldr	r3, [pc, #192]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0f0      	beq.n	8007a78 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a96:	4b2d      	ldr	r3, [pc, #180]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	4929      	ldr	r1, [pc, #164]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	600b      	str	r3, [r1, #0]
 8007aaa:	e018      	b.n	8007ade <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007aac:	4b27      	ldr	r3, [pc, #156]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a26      	ldr	r2, [pc, #152]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007ab2:	f023 0301 	bic.w	r3, r3, #1
 8007ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab8:	f7ff fb92 	bl	80071e0 <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ac0:	f7ff fb8e 	bl	80071e0 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e199      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1f0      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0308 	and.w	r3, r3, #8
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d038      	beq.n	8007b5c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d019      	beq.n	8007b26 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007af2:	4b16      	ldr	r3, [pc, #88]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007af6:	4a15      	ldr	r2, [pc, #84]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007af8:	f043 0301 	orr.w	r3, r3, #1
 8007afc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007afe:	f7ff fb6f 	bl	80071e0 <HAL_GetTick>
 8007b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b04:	e008      	b.n	8007b18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b06:	f7ff fb6b 	bl	80071e0 <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d901      	bls.n	8007b18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b14:	2303      	movs	r3, #3
 8007b16:	e176      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b18:	4b0c      	ldr	r3, [pc, #48]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0f0      	beq.n	8007b06 <HAL_RCC_OscConfig+0x23a>
 8007b24:	e01a      	b.n	8007b5c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b26:	4b09      	ldr	r3, [pc, #36]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b2a:	4a08      	ldr	r2, [pc, #32]	@ (8007b4c <HAL_RCC_OscConfig+0x280>)
 8007b2c:	f023 0301 	bic.w	r3, r3, #1
 8007b30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b32:	f7ff fb55 	bl	80071e0 <HAL_GetTick>
 8007b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b38:	e00a      	b.n	8007b50 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b3a:	f7ff fb51 	bl	80071e0 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d903      	bls.n	8007b50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e15c      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
 8007b4c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b50:	4b91      	ldr	r3, [pc, #580]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007b52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1ee      	bne.n	8007b3a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 80a4 	beq.w	8007cb2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b6a:	4b8b      	ldr	r3, [pc, #556]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10d      	bne.n	8007b92 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b76:	4b88      	ldr	r3, [pc, #544]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b7a:	4a87      	ldr	r2, [pc, #540]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b82:	4b85      	ldr	r3, [pc, #532]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b8a:	60bb      	str	r3, [r7, #8]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b92:	4b82      	ldr	r3, [pc, #520]	@ (8007d9c <HAL_RCC_OscConfig+0x4d0>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d118      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8007d9c <HAL_RCC_OscConfig+0x4d0>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a7e      	ldr	r2, [pc, #504]	@ (8007d9c <HAL_RCC_OscConfig+0x4d0>)
 8007ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007baa:	f7ff fb19 	bl	80071e0 <HAL_GetTick>
 8007bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bb0:	e008      	b.n	8007bc4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bb2:	f7ff fb15 	bl	80071e0 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b64      	cmp	r3, #100	@ 0x64
 8007bbe:	d901      	bls.n	8007bc4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e120      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bc4:	4b75      	ldr	r3, [pc, #468]	@ (8007d9c <HAL_RCC_OscConfig+0x4d0>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0f0      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d106      	bne.n	8007be6 <HAL_RCC_OscConfig+0x31a>
 8007bd8:	4b6f      	ldr	r3, [pc, #444]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bdc:	4a6e      	ldr	r2, [pc, #440]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007bde:	f043 0301 	orr.w	r3, r3, #1
 8007be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007be4:	e02d      	b.n	8007c42 <HAL_RCC_OscConfig+0x376>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10c      	bne.n	8007c08 <HAL_RCC_OscConfig+0x33c>
 8007bee:	4b6a      	ldr	r3, [pc, #424]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf2:	4a69      	ldr	r2, [pc, #420]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007bf4:	f023 0301 	bic.w	r3, r3, #1
 8007bf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bfa:	4b67      	ldr	r3, [pc, #412]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bfe:	4a66      	ldr	r2, [pc, #408]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007c00:	f023 0304 	bic.w	r3, r3, #4
 8007c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c06:	e01c      	b.n	8007c42 <HAL_RCC_OscConfig+0x376>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	2b05      	cmp	r3, #5
 8007c0e:	d10c      	bne.n	8007c2a <HAL_RCC_OscConfig+0x35e>
 8007c10:	4b61      	ldr	r3, [pc, #388]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c14:	4a60      	ldr	r2, [pc, #384]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007c16:	f043 0304 	orr.w	r3, r3, #4
 8007c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c1c:	4b5e      	ldr	r3, [pc, #376]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c20:	4a5d      	ldr	r2, [pc, #372]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007c22:	f043 0301 	orr.w	r3, r3, #1
 8007c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c28:	e00b      	b.n	8007c42 <HAL_RCC_OscConfig+0x376>
 8007c2a:	4b5b      	ldr	r3, [pc, #364]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c2e:	4a5a      	ldr	r2, [pc, #360]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c36:	4b58      	ldr	r3, [pc, #352]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c3a:	4a57      	ldr	r2, [pc, #348]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007c3c:	f023 0304 	bic.w	r3, r3, #4
 8007c40:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d015      	beq.n	8007c76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c4a:	f7ff fac9 	bl	80071e0 <HAL_GetTick>
 8007c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c50:	e00a      	b.n	8007c68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c52:	f7ff fac5 	bl	80071e0 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d901      	bls.n	8007c68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e0ce      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c68:	4b4b      	ldr	r3, [pc, #300]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0ee      	beq.n	8007c52 <HAL_RCC_OscConfig+0x386>
 8007c74:	e014      	b.n	8007ca0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c76:	f7ff fab3 	bl	80071e0 <HAL_GetTick>
 8007c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c7c:	e00a      	b.n	8007c94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c7e:	f7ff faaf 	bl	80071e0 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d901      	bls.n	8007c94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e0b8      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c94:	4b40      	ldr	r3, [pc, #256]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1ee      	bne.n	8007c7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d105      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ca6:	4b3c      	ldr	r3, [pc, #240]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007caa:	4a3b      	ldr	r2, [pc, #236]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007cac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cb0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 80a4 	beq.w	8007e04 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cbc:	4b36      	ldr	r3, [pc, #216]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f003 030c 	and.w	r3, r3, #12
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d06b      	beq.n	8007da0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d149      	bne.n	8007d64 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cd0:	4b31      	ldr	r3, [pc, #196]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a30      	ldr	r2, [pc, #192]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007cd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cdc:	f7ff fa80 	bl	80071e0 <HAL_GetTick>
 8007ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ce2:	e008      	b.n	8007cf6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ce4:	f7ff fa7c 	bl	80071e0 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e087      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cf6:	4b28      	ldr	r3, [pc, #160]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f0      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	69da      	ldr	r2, [r3, #28]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d10:	019b      	lsls	r3, r3, #6
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d18:	085b      	lsrs	r3, r3, #1
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	041b      	lsls	r3, r3, #16
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d24:	061b      	lsls	r3, r3, #24
 8007d26:	4313      	orrs	r3, r2
 8007d28:	4a1b      	ldr	r2, [pc, #108]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007d2a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d2e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d30:	4b19      	ldr	r3, [pc, #100]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a18      	ldr	r2, [pc, #96]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007d36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d3c:	f7ff fa50 	bl	80071e0 <HAL_GetTick>
 8007d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d44:	f7ff fa4c 	bl	80071e0 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e057      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d56:	4b10      	ldr	r3, [pc, #64]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0f0      	beq.n	8007d44 <HAL_RCC_OscConfig+0x478>
 8007d62:	e04f      	b.n	8007e04 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d64:	4b0c      	ldr	r3, [pc, #48]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a0b      	ldr	r2, [pc, #44]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007d6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d70:	f7ff fa36 	bl	80071e0 <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d78:	f7ff fa32 	bl	80071e0 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e03d      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d8a:	4b03      	ldr	r3, [pc, #12]	@ (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f0      	bne.n	8007d78 <HAL_RCC_OscConfig+0x4ac>
 8007d96:	e035      	b.n	8007e04 <HAL_RCC_OscConfig+0x538>
 8007d98:	40023800 	.word	0x40023800
 8007d9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007da0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e10 <HAL_RCC_OscConfig+0x544>)
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d028      	beq.n	8007e00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d121      	bne.n	8007e00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d11a      	bne.n	8007e00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007dd6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d111      	bne.n	8007e00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de6:	085b      	lsrs	r3, r3, #1
 8007de8:	3b01      	subs	r3, #1
 8007dea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d107      	bne.n	8007e00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d001      	beq.n	8007e04 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e000      	b.n	8007e06 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	40023800 	.word	0x40023800

08007e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d101      	bne.n	8007e2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e0d0      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d910      	bls.n	8007e5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e3a:	4b67      	ldr	r3, [pc, #412]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f023 020f 	bic.w	r2, r3, #15
 8007e42:	4965      	ldr	r1, [pc, #404]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e4a:	4b63      	ldr	r3, [pc, #396]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f003 030f 	and.w	r3, r3, #15
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d001      	beq.n	8007e5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0b8      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0302 	and.w	r3, r3, #2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d020      	beq.n	8007eaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d005      	beq.n	8007e80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e74:	4b59      	ldr	r3, [pc, #356]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	4a58      	ldr	r2, [pc, #352]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007e7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007e7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d005      	beq.n	8007e98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e8c:	4b53      	ldr	r3, [pc, #332]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	4a52      	ldr	r2, [pc, #328]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007e92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007e96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e98:	4b50      	ldr	r3, [pc, #320]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	494d      	ldr	r1, [pc, #308]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d040      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d107      	bne.n	8007ece <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ebe:	4b47      	ldr	r3, [pc, #284]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d115      	bne.n	8007ef6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e07f      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d107      	bne.n	8007ee6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ed6:	4b41      	ldr	r3, [pc, #260]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d109      	bne.n	8007ef6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e073      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e06b      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ef6:	4b39      	ldr	r3, [pc, #228]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f023 0203 	bic.w	r2, r3, #3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	4936      	ldr	r1, [pc, #216]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f08:	f7ff f96a 	bl	80071e0 <HAL_GetTick>
 8007f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f0e:	e00a      	b.n	8007f26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f10:	f7ff f966 	bl	80071e0 <HAL_GetTick>
 8007f14:	4602      	mov	r2, r0
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d901      	bls.n	8007f26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e053      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f26:	4b2d      	ldr	r3, [pc, #180]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f003 020c 	and.w	r2, r3, #12
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d1eb      	bne.n	8007f10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f38:	4b27      	ldr	r3, [pc, #156]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 030f 	and.w	r3, r3, #15
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d210      	bcs.n	8007f68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f46:	4b24      	ldr	r3, [pc, #144]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f023 020f 	bic.w	r2, r3, #15
 8007f4e:	4922      	ldr	r1, [pc, #136]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	4313      	orrs	r3, r2
 8007f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f56:	4b20      	ldr	r3, [pc, #128]	@ (8007fd8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d001      	beq.n	8007f68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e032      	b.n	8007fce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0304 	and.w	r3, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d008      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f74:	4b19      	ldr	r3, [pc, #100]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	4916      	ldr	r1, [pc, #88]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0308 	and.w	r3, r3, #8
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d009      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f92:	4b12      	ldr	r3, [pc, #72]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	490e      	ldr	r1, [pc, #56]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007fa6:	f000 f821 	bl	8007fec <HAL_RCC_GetSysClockFreq>
 8007faa:	4602      	mov	r2, r0
 8007fac:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <HAL_RCC_ClockConfig+0x1c8>)
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	091b      	lsrs	r3, r3, #4
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	490a      	ldr	r1, [pc, #40]	@ (8007fe0 <HAL_RCC_ClockConfig+0x1cc>)
 8007fb8:	5ccb      	ldrb	r3, [r1, r3]
 8007fba:	fa22 f303 	lsr.w	r3, r2, r3
 8007fbe:	4a09      	ldr	r2, [pc, #36]	@ (8007fe4 <HAL_RCC_ClockConfig+0x1d0>)
 8007fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007fc2:	4b09      	ldr	r3, [pc, #36]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1d4>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff f8c6 	bl	8007158 <HAL_InitTick>

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	40023c00 	.word	0x40023c00
 8007fdc:	40023800 	.word	0x40023800
 8007fe0:	080108b4 	.word	0x080108b4
 8007fe4:	20000000 	.word	0x20000000
 8007fe8:	20000004 	.word	0x20000004

08007fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ff0:	b094      	sub	sp, #80	@ 0x50
 8007ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008004:	4b79      	ldr	r3, [pc, #484]	@ (80081ec <HAL_RCC_GetSysClockFreq+0x200>)
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	f003 030c 	and.w	r3, r3, #12
 800800c:	2b08      	cmp	r3, #8
 800800e:	d00d      	beq.n	800802c <HAL_RCC_GetSysClockFreq+0x40>
 8008010:	2b08      	cmp	r3, #8
 8008012:	f200 80e1 	bhi.w	80081d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <HAL_RCC_GetSysClockFreq+0x34>
 800801a:	2b04      	cmp	r3, #4
 800801c:	d003      	beq.n	8008026 <HAL_RCC_GetSysClockFreq+0x3a>
 800801e:	e0db      	b.n	80081d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008020:	4b73      	ldr	r3, [pc, #460]	@ (80081f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008022:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008024:	e0db      	b.n	80081de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008026:	4b73      	ldr	r3, [pc, #460]	@ (80081f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008028:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800802a:	e0d8      	b.n	80081de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800802c:	4b6f      	ldr	r3, [pc, #444]	@ (80081ec <HAL_RCC_GetSysClockFreq+0x200>)
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008034:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008036:	4b6d      	ldr	r3, [pc, #436]	@ (80081ec <HAL_RCC_GetSysClockFreq+0x200>)
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d063      	beq.n	800810a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008042:	4b6a      	ldr	r3, [pc, #424]	@ (80081ec <HAL_RCC_GetSysClockFreq+0x200>)
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	099b      	lsrs	r3, r3, #6
 8008048:	2200      	movs	r2, #0
 800804a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800804c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800804e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008054:	633b      	str	r3, [r7, #48]	@ 0x30
 8008056:	2300      	movs	r3, #0
 8008058:	637b      	str	r3, [r7, #52]	@ 0x34
 800805a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800805e:	4622      	mov	r2, r4
 8008060:	462b      	mov	r3, r5
 8008062:	f04f 0000 	mov.w	r0, #0
 8008066:	f04f 0100 	mov.w	r1, #0
 800806a:	0159      	lsls	r1, r3, #5
 800806c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008070:	0150      	lsls	r0, r2, #5
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	4621      	mov	r1, r4
 8008078:	1a51      	subs	r1, r2, r1
 800807a:	6139      	str	r1, [r7, #16]
 800807c:	4629      	mov	r1, r5
 800807e:	eb63 0301 	sbc.w	r3, r3, r1
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	f04f 0200 	mov.w	r2, #0
 8008088:	f04f 0300 	mov.w	r3, #0
 800808c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008090:	4659      	mov	r1, fp
 8008092:	018b      	lsls	r3, r1, #6
 8008094:	4651      	mov	r1, sl
 8008096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800809a:	4651      	mov	r1, sl
 800809c:	018a      	lsls	r2, r1, #6
 800809e:	4651      	mov	r1, sl
 80080a0:	ebb2 0801 	subs.w	r8, r2, r1
 80080a4:	4659      	mov	r1, fp
 80080a6:	eb63 0901 	sbc.w	r9, r3, r1
 80080aa:	f04f 0200 	mov.w	r2, #0
 80080ae:	f04f 0300 	mov.w	r3, #0
 80080b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080be:	4690      	mov	r8, r2
 80080c0:	4699      	mov	r9, r3
 80080c2:	4623      	mov	r3, r4
 80080c4:	eb18 0303 	adds.w	r3, r8, r3
 80080c8:	60bb      	str	r3, [r7, #8]
 80080ca:	462b      	mov	r3, r5
 80080cc:	eb49 0303 	adc.w	r3, r9, r3
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	f04f 0200 	mov.w	r2, #0
 80080d6:	f04f 0300 	mov.w	r3, #0
 80080da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80080de:	4629      	mov	r1, r5
 80080e0:	024b      	lsls	r3, r1, #9
 80080e2:	4621      	mov	r1, r4
 80080e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80080e8:	4621      	mov	r1, r4
 80080ea:	024a      	lsls	r2, r1, #9
 80080ec:	4610      	mov	r0, r2
 80080ee:	4619      	mov	r1, r3
 80080f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080f2:	2200      	movs	r2, #0
 80080f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80080fc:	f7f8 fde4 	bl	8000cc8 <__aeabi_uldivmod>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	4613      	mov	r3, r2
 8008106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008108:	e058      	b.n	80081bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800810a:	4b38      	ldr	r3, [pc, #224]	@ (80081ec <HAL_RCC_GetSysClockFreq+0x200>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	099b      	lsrs	r3, r3, #6
 8008110:	2200      	movs	r2, #0
 8008112:	4618      	mov	r0, r3
 8008114:	4611      	mov	r1, r2
 8008116:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800811a:	623b      	str	r3, [r7, #32]
 800811c:	2300      	movs	r3, #0
 800811e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008120:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008124:	4642      	mov	r2, r8
 8008126:	464b      	mov	r3, r9
 8008128:	f04f 0000 	mov.w	r0, #0
 800812c:	f04f 0100 	mov.w	r1, #0
 8008130:	0159      	lsls	r1, r3, #5
 8008132:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008136:	0150      	lsls	r0, r2, #5
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4641      	mov	r1, r8
 800813e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008142:	4649      	mov	r1, r9
 8008144:	eb63 0b01 	sbc.w	fp, r3, r1
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008154:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008158:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800815c:	ebb2 040a 	subs.w	r4, r2, sl
 8008160:	eb63 050b 	sbc.w	r5, r3, fp
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	00eb      	lsls	r3, r5, #3
 800816e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008172:	00e2      	lsls	r2, r4, #3
 8008174:	4614      	mov	r4, r2
 8008176:	461d      	mov	r5, r3
 8008178:	4643      	mov	r3, r8
 800817a:	18e3      	adds	r3, r4, r3
 800817c:	603b      	str	r3, [r7, #0]
 800817e:	464b      	mov	r3, r9
 8008180:	eb45 0303 	adc.w	r3, r5, r3
 8008184:	607b      	str	r3, [r7, #4]
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	f04f 0300 	mov.w	r3, #0
 800818e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008192:	4629      	mov	r1, r5
 8008194:	028b      	lsls	r3, r1, #10
 8008196:	4621      	mov	r1, r4
 8008198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800819c:	4621      	mov	r1, r4
 800819e:	028a      	lsls	r2, r1, #10
 80081a0:	4610      	mov	r0, r2
 80081a2:	4619      	mov	r1, r3
 80081a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081a6:	2200      	movs	r2, #0
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	61fa      	str	r2, [r7, #28]
 80081ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081b0:	f7f8 fd8a 	bl	8000cc8 <__aeabi_uldivmod>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	4613      	mov	r3, r2
 80081ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80081bc:	4b0b      	ldr	r3, [pc, #44]	@ (80081ec <HAL_RCC_GetSysClockFreq+0x200>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	3301      	adds	r3, #1
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80081cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80081d6:	e002      	b.n	80081de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081d8:	4b05      	ldr	r3, [pc, #20]	@ (80081f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80081da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80081dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3750      	adds	r7, #80	@ 0x50
 80081e4:	46bd      	mov	sp, r7
 80081e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ea:	bf00      	nop
 80081ec:	40023800 	.word	0x40023800
 80081f0:	00f42400 	.word	0x00f42400
 80081f4:	007a1200 	.word	0x007a1200

080081f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081fc:	4b03      	ldr	r3, [pc, #12]	@ (800820c <HAL_RCC_GetHCLKFreq+0x14>)
 80081fe:	681b      	ldr	r3, [r3, #0]
}
 8008200:	4618      	mov	r0, r3
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	20000000 	.word	0x20000000

08008210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008214:	f7ff fff0 	bl	80081f8 <HAL_RCC_GetHCLKFreq>
 8008218:	4602      	mov	r2, r0
 800821a:	4b05      	ldr	r3, [pc, #20]	@ (8008230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	0a9b      	lsrs	r3, r3, #10
 8008220:	f003 0307 	and.w	r3, r3, #7
 8008224:	4903      	ldr	r1, [pc, #12]	@ (8008234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008226:	5ccb      	ldrb	r3, [r1, r3]
 8008228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800822c:	4618      	mov	r0, r3
 800822e:	bd80      	pop	{r7, pc}
 8008230:	40023800 	.word	0x40023800
 8008234:	080108c4 	.word	0x080108c4

08008238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800823c:	f7ff ffdc 	bl	80081f8 <HAL_RCC_GetHCLKFreq>
 8008240:	4602      	mov	r2, r0
 8008242:	4b05      	ldr	r3, [pc, #20]	@ (8008258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	0b5b      	lsrs	r3, r3, #13
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	4903      	ldr	r1, [pc, #12]	@ (800825c <HAL_RCC_GetPCLK2Freq+0x24>)
 800824e:	5ccb      	ldrb	r3, [r1, r3]
 8008250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008254:	4618      	mov	r0, r3
 8008256:	bd80      	pop	{r7, pc}
 8008258:	40023800 	.word	0x40023800
 800825c:	080108c4 	.word	0x080108c4

08008260 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b00      	cmp	r3, #0
 8008286:	d012      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008288:	4b69      	ldr	r3, [pc, #420]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	4a68      	ldr	r2, [pc, #416]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800828e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008292:	6093      	str	r3, [r2, #8]
 8008294:	4b66      	ldr	r3, [pc, #408]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008296:	689a      	ldr	r2, [r3, #8]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800829c:	4964      	ldr	r1, [pc, #400]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80082aa:	2301      	movs	r3, #1
 80082ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d017      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082ba:	4b5d      	ldr	r3, [pc, #372]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c8:	4959      	ldr	r1, [pc, #356]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082d8:	d101      	bne.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80082da:	2301      	movs	r3, #1
 80082dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80082e6:	2301      	movs	r3, #1
 80082e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d017      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80082f6:	4b4e      	ldr	r3, [pc, #312]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008304:	494a      	ldr	r1, [pc, #296]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008306:	4313      	orrs	r3, r2
 8008308:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008310:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008314:	d101      	bne.n	800831a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008316:	2301      	movs	r3, #1
 8008318:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008322:	2301      	movs	r3, #1
 8008324:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008332:	2301      	movs	r3, #1
 8008334:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 808b 	beq.w	800845a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008344:	4b3a      	ldr	r3, [pc, #232]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008348:	4a39      	ldr	r2, [pc, #228]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800834a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800834e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008350:	4b37      	ldr	r3, [pc, #220]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008358:	60bb      	str	r3, [r7, #8]
 800835a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800835c:	4b35      	ldr	r3, [pc, #212]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a34      	ldr	r2, [pc, #208]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008366:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008368:	f7fe ff3a 	bl	80071e0 <HAL_GetTick>
 800836c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800836e:	e008      	b.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008370:	f7fe ff36 	bl	80071e0 <HAL_GetTick>
 8008374:	4602      	mov	r2, r0
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b64      	cmp	r3, #100	@ 0x64
 800837c:	d901      	bls.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e357      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008382:	4b2c      	ldr	r3, [pc, #176]	@ (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0f0      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800838e:	4b28      	ldr	r3, [pc, #160]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008396:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d035      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d02e      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083ac:	4b20      	ldr	r3, [pc, #128]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ba:	4a1d      	ldr	r2, [pc, #116]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083c0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083c6:	4a1a      	ldr	r2, [pc, #104]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80083ce:	4a18      	ldr	r2, [pc, #96]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083d4:	4b16      	ldr	r3, [pc, #88]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d114      	bne.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e0:	f7fe fefe 	bl	80071e0 <HAL_GetTick>
 80083e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083e6:	e00a      	b.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083e8:	f7fe fefa 	bl	80071e0 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d901      	bls.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e319      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0ee      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800840e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008416:	d111      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008418:	4b05      	ldr	r3, [pc, #20]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008424:	4b04      	ldr	r3, [pc, #16]	@ (8008438 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008426:	400b      	ands	r3, r1
 8008428:	4901      	ldr	r1, [pc, #4]	@ (8008430 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800842a:	4313      	orrs	r3, r2
 800842c:	608b      	str	r3, [r1, #8]
 800842e:	e00b      	b.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008430:	40023800 	.word	0x40023800
 8008434:	40007000 	.word	0x40007000
 8008438:	0ffffcff 	.word	0x0ffffcff
 800843c:	4baa      	ldr	r3, [pc, #680]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	4aa9      	ldr	r2, [pc, #676]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008442:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008446:	6093      	str	r3, [r2, #8]
 8008448:	4ba7      	ldr	r3, [pc, #668]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800844a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008454:	49a4      	ldr	r1, [pc, #656]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008456:	4313      	orrs	r3, r2
 8008458:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0310 	and.w	r3, r3, #16
 8008462:	2b00      	cmp	r3, #0
 8008464:	d010      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008466:	4ba0      	ldr	r3, [pc, #640]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008468:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800846c:	4a9e      	ldr	r2, [pc, #632]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800846e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008472:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008476:	4b9c      	ldr	r3, [pc, #624]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008478:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008480:	4999      	ldr	r1, [pc, #612]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008494:	4b94      	ldr	r3, [pc, #592]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800849a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084a2:	4991      	ldr	r1, [pc, #580]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084b6:	4b8c      	ldr	r3, [pc, #560]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084c4:	4988      	ldr	r1, [pc, #544]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084d8:	4b83      	ldr	r3, [pc, #524]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084e6:	4980      	ldr	r1, [pc, #512]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80084fa:	4b7b      	ldr	r3, [pc, #492]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008500:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008508:	4977      	ldr	r1, [pc, #476]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850a:	4313      	orrs	r3, r2
 800850c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800851c:	4b72      	ldr	r3, [pc, #456]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800851e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008522:	f023 0203 	bic.w	r2, r3, #3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800852a:	496f      	ldr	r1, [pc, #444]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852c:	4313      	orrs	r3, r2
 800852e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800853e:	4b6a      	ldr	r3, [pc, #424]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008544:	f023 020c 	bic.w	r2, r3, #12
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800854c:	4966      	ldr	r1, [pc, #408]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854e:	4313      	orrs	r3, r2
 8008550:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008560:	4b61      	ldr	r3, [pc, #388]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008566:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800856e:	495e      	ldr	r1, [pc, #376]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008582:	4b59      	ldr	r3, [pc, #356]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008588:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008590:	4955      	ldr	r1, [pc, #340]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008592:	4313      	orrs	r3, r2
 8008594:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085a4:	4b50      	ldr	r3, [pc, #320]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085b2:	494d      	ldr	r1, [pc, #308]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80085c6:	4b48      	ldr	r3, [pc, #288]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085d4:	4944      	ldr	r1, [pc, #272]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80085e8:	4b3f      	ldr	r3, [pc, #252]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085f6:	493c      	ldr	r1, [pc, #240]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800860a:	4b37      	ldr	r3, [pc, #220]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008610:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008618:	4933      	ldr	r1, [pc, #204]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800861a:	4313      	orrs	r3, r2
 800861c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800862c:	4b2e      	ldr	r3, [pc, #184]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008632:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800863a:	492b      	ldr	r1, [pc, #172]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863c:	4313      	orrs	r3, r2
 800863e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d011      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800864e:	4b26      	ldr	r3, [pc, #152]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008654:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800865c:	4922      	ldr	r1, [pc, #136]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800865e:	4313      	orrs	r3, r2
 8008660:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008668:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800866c:	d101      	bne.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800866e:	2301      	movs	r3, #1
 8008670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800867e:	2301      	movs	r3, #1
 8008680:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800868e:	4b16      	ldr	r3, [pc, #88]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008694:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800869c:	4912      	ldr	r1, [pc, #72]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d00b      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80086b0:	4b0d      	ldr	r3, [pc, #52]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c0:	4909      	ldr	r1, [pc, #36]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d006      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 80d9 	beq.w	800888e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80086dc:	4b02      	ldr	r3, [pc, #8]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a01      	ldr	r2, [pc, #4]	@ (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086e6:	e001      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80086e8:	40023800 	.word	0x40023800
 80086ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ee:	f7fe fd77 	bl	80071e0 <HAL_GetTick>
 80086f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80086f4:	e008      	b.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80086f6:	f7fe fd73 	bl	80071e0 <HAL_GetTick>
 80086fa:	4602      	mov	r2, r0
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	2b64      	cmp	r3, #100	@ 0x64
 8008702:	d901      	bls.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e194      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008708:	4b6c      	ldr	r3, [pc, #432]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1f0      	bne.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b00      	cmp	r3, #0
 800871e:	d021      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008724:	2b00      	cmp	r3, #0
 8008726:	d11d      	bne.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008728:	4b64      	ldr	r3, [pc, #400]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800872a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800872e:	0c1b      	lsrs	r3, r3, #16
 8008730:	f003 0303 	and.w	r3, r3, #3
 8008734:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008736:	4b61      	ldr	r3, [pc, #388]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800873c:	0e1b      	lsrs	r3, r3, #24
 800873e:	f003 030f 	and.w	r3, r3, #15
 8008742:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	019a      	lsls	r2, r3, #6
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	041b      	lsls	r3, r3, #16
 800874e:	431a      	orrs	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	061b      	lsls	r3, r3, #24
 8008754:	431a      	orrs	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	071b      	lsls	r3, r3, #28
 800875c:	4957      	ldr	r1, [pc, #348]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800875e:	4313      	orrs	r3, r2
 8008760:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d004      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008774:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008778:	d00a      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008782:	2b00      	cmp	r3, #0
 8008784:	d02e      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800878a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800878e:	d129      	bne.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008790:	4b4a      	ldr	r3, [pc, #296]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008792:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008796:	0c1b      	lsrs	r3, r3, #16
 8008798:	f003 0303 	and.w	r3, r3, #3
 800879c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800879e:	4b47      	ldr	r3, [pc, #284]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087a4:	0f1b      	lsrs	r3, r3, #28
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	019a      	lsls	r2, r3, #6
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	041b      	lsls	r3, r3, #16
 80087b6:	431a      	orrs	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	061b      	lsls	r3, r3, #24
 80087be:	431a      	orrs	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	071b      	lsls	r3, r3, #28
 80087c4:	493d      	ldr	r1, [pc, #244]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80087cc:	4b3b      	ldr	r3, [pc, #236]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087d2:	f023 021f 	bic.w	r2, r3, #31
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087da:	3b01      	subs	r3, #1
 80087dc:	4937      	ldr	r1, [pc, #220]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01d      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80087f0:	4b32      	ldr	r3, [pc, #200]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087f6:	0e1b      	lsrs	r3, r3, #24
 80087f8:	f003 030f 	and.w	r3, r3, #15
 80087fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087fe:	4b2f      	ldr	r3, [pc, #188]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008804:	0f1b      	lsrs	r3, r3, #28
 8008806:	f003 0307 	and.w	r3, r3, #7
 800880a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	019a      	lsls	r2, r3, #6
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	041b      	lsls	r3, r3, #16
 8008818:	431a      	orrs	r2, r3
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	061b      	lsls	r3, r3, #24
 800881e:	431a      	orrs	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	071b      	lsls	r3, r3, #28
 8008824:	4925      	ldr	r1, [pc, #148]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008826:	4313      	orrs	r3, r2
 8008828:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d011      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	019a      	lsls	r2, r3, #6
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	041b      	lsls	r3, r3, #16
 8008844:	431a      	orrs	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	061b      	lsls	r3, r3, #24
 800884c:	431a      	orrs	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	071b      	lsls	r3, r3, #28
 8008854:	4919      	ldr	r1, [pc, #100]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008856:	4313      	orrs	r3, r2
 8008858:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800885c:	4b17      	ldr	r3, [pc, #92]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a16      	ldr	r2, [pc, #88]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008862:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008868:	f7fe fcba 	bl	80071e0 <HAL_GetTick>
 800886c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800886e:	e008      	b.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008870:	f7fe fcb6 	bl	80071e0 <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2b64      	cmp	r3, #100	@ 0x64
 800887c:	d901      	bls.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e0d7      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008882:	4b0e      	ldr	r3, [pc, #56]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0f0      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	2b01      	cmp	r3, #1
 8008892:	f040 80cd 	bne.w	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008896:	4b09      	ldr	r3, [pc, #36]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a08      	ldr	r2, [pc, #32]	@ (80088bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800889c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088a2:	f7fe fc9d 	bl	80071e0 <HAL_GetTick>
 80088a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088a8:	e00a      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088aa:	f7fe fc99 	bl	80071e0 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	2b64      	cmp	r3, #100	@ 0x64
 80088b6:	d903      	bls.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e0ba      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80088bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088c0:	4b5e      	ldr	r3, [pc, #376]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088cc:	d0ed      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d009      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d02e      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d12a      	bne.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80088f6:	4b51      	ldr	r3, [pc, #324]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088fc:	0c1b      	lsrs	r3, r3, #16
 80088fe:	f003 0303 	and.w	r3, r3, #3
 8008902:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008904:	4b4d      	ldr	r3, [pc, #308]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800890a:	0f1b      	lsrs	r3, r3, #28
 800890c:	f003 0307 	and.w	r3, r3, #7
 8008910:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	019a      	lsls	r2, r3, #6
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	041b      	lsls	r3, r3, #16
 800891c:	431a      	orrs	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	061b      	lsls	r3, r3, #24
 8008924:	431a      	orrs	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	071b      	lsls	r3, r3, #28
 800892a:	4944      	ldr	r1, [pc, #272]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800892c:	4313      	orrs	r3, r2
 800892e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008932:	4b42      	ldr	r3, [pc, #264]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008934:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008938:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008940:	3b01      	subs	r3, #1
 8008942:	021b      	lsls	r3, r3, #8
 8008944:	493d      	ldr	r1, [pc, #244]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008946:	4313      	orrs	r3, r2
 8008948:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d022      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800895c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008960:	d11d      	bne.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008962:	4b36      	ldr	r3, [pc, #216]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008968:	0e1b      	lsrs	r3, r3, #24
 800896a:	f003 030f 	and.w	r3, r3, #15
 800896e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008970:	4b32      	ldr	r3, [pc, #200]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008976:	0f1b      	lsrs	r3, r3, #28
 8008978:	f003 0307 	and.w	r3, r3, #7
 800897c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	019a      	lsls	r2, r3, #6
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a1b      	ldr	r3, [r3, #32]
 8008988:	041b      	lsls	r3, r3, #16
 800898a:	431a      	orrs	r2, r3
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	061b      	lsls	r3, r3, #24
 8008990:	431a      	orrs	r2, r3
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	071b      	lsls	r3, r3, #28
 8008996:	4929      	ldr	r1, [pc, #164]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008998:	4313      	orrs	r3, r2
 800899a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0308 	and.w	r3, r3, #8
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d028      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089aa:	4b24      	ldr	r3, [pc, #144]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b0:	0e1b      	lsrs	r3, r3, #24
 80089b2:	f003 030f 	and.w	r3, r3, #15
 80089b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089b8:	4b20      	ldr	r3, [pc, #128]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089be:	0c1b      	lsrs	r3, r3, #16
 80089c0:	f003 0303 	and.w	r3, r3, #3
 80089c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	019a      	lsls	r2, r3, #6
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	041b      	lsls	r3, r3, #16
 80089d0:	431a      	orrs	r2, r3
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	061b      	lsls	r3, r3, #24
 80089d6:	431a      	orrs	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	071b      	lsls	r3, r3, #28
 80089de:	4917      	ldr	r1, [pc, #92]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80089e6:	4b15      	ldr	r3, [pc, #84]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f4:	4911      	ldr	r1, [pc, #68]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089f6:	4313      	orrs	r3, r2
 80089f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80089fc:	4b0f      	ldr	r3, [pc, #60]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a0e      	ldr	r2, [pc, #56]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a08:	f7fe fbea 	bl	80071e0 <HAL_GetTick>
 8008a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a0e:	e008      	b.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a10:	f7fe fbe6 	bl	80071e0 <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	2b64      	cmp	r3, #100	@ 0x64
 8008a1c:	d901      	bls.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e007      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a22:	4b06      	ldr	r3, [pc, #24]	@ (8008a3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a2e:	d1ef      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3720      	adds	r7, #32
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	40023800 	.word	0x40023800

08008a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e049      	b.n	8008ae6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d106      	bne.n	8008a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7fe fa84 	bl	8006f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4610      	mov	r0, r2
 8008a80:	f000 fa50 	bl	8008f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	f003 0302 	and.w	r3, r3, #2
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d122      	bne.n	8008b4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d11b      	bne.n	8008b4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f06f 0202 	mvn.w	r2, #2
 8008b1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	f003 0303 	and.w	r3, r3, #3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f9d9 	bl	8008ee8 <HAL_TIM_IC_CaptureCallback>
 8008b36:	e005      	b.n	8008b44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f9cb 	bl	8008ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f9dc 	bl	8008efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	691b      	ldr	r3, [r3, #16]
 8008b50:	f003 0304 	and.w	r3, r3, #4
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d122      	bne.n	8008b9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	f003 0304 	and.w	r3, r3, #4
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d11b      	bne.n	8008b9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f06f 0204 	mvn.w	r2, #4
 8008b6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f9af 	bl	8008ee8 <HAL_TIM_IC_CaptureCallback>
 8008b8a:	e005      	b.n	8008b98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f9a1 	bl	8008ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f9b2 	bl	8008efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	f003 0308 	and.w	r3, r3, #8
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	d122      	bne.n	8008bf2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f003 0308 	and.w	r3, r3, #8
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	d11b      	bne.n	8008bf2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f06f 0208 	mvn.w	r2, #8
 8008bc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2204      	movs	r2, #4
 8008bc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d003      	beq.n	8008be0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f985 	bl	8008ee8 <HAL_TIM_IC_CaptureCallback>
 8008bde:	e005      	b.n	8008bec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f977 	bl	8008ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f988 	bl	8008efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	f003 0310 	and.w	r3, r3, #16
 8008bfc:	2b10      	cmp	r3, #16
 8008bfe:	d122      	bne.n	8008c46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f003 0310 	and.w	r3, r3, #16
 8008c0a:	2b10      	cmp	r3, #16
 8008c0c:	d11b      	bne.n	8008c46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f06f 0210 	mvn.w	r2, #16
 8008c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2208      	movs	r2, #8
 8008c1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d003      	beq.n	8008c34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f95b 	bl	8008ee8 <HAL_TIM_IC_CaptureCallback>
 8008c32:	e005      	b.n	8008c40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f94d 	bl	8008ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f95e 	bl	8008efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d10e      	bne.n	8008c72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d107      	bne.n	8008c72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f06f 0201 	mvn.w	r2, #1
 8008c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f927 	bl	8008ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c7c:	2b80      	cmp	r3, #128	@ 0x80
 8008c7e:	d10e      	bne.n	8008c9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c8a:	2b80      	cmp	r3, #128	@ 0x80
 8008c8c:	d107      	bne.n	8008c9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fb15 	bl	80092c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cac:	d10e      	bne.n	8008ccc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cb8:	2b80      	cmp	r3, #128	@ 0x80
 8008cba:	d107      	bne.n	8008ccc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fb08 	bl	80092dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd6:	2b40      	cmp	r3, #64	@ 0x40
 8008cd8:	d10e      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce4:	2b40      	cmp	r3, #64	@ 0x40
 8008ce6:	d107      	bne.n	8008cf8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f90c 	bl	8008f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	691b      	ldr	r3, [r3, #16]
 8008cfe:	f003 0320 	and.w	r3, r3, #32
 8008d02:	2b20      	cmp	r3, #32
 8008d04:	d10e      	bne.n	8008d24 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f003 0320 	and.w	r3, r3, #32
 8008d10:	2b20      	cmp	r3, #32
 8008d12:	d107      	bne.n	8008d24 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f06f 0220 	mvn.w	r2, #32
 8008d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fac8 	bl	80092b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_TIM_ConfigClockSource+0x1c>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e0b4      	b.n	8008eb2 <HAL_TIM_ConfigClockSource+0x186>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2202      	movs	r2, #2
 8008d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d60:	68ba      	ldr	r2, [r7, #8]
 8008d62:	4b56      	ldr	r3, [pc, #344]	@ (8008ebc <HAL_TIM_ConfigClockSource+0x190>)
 8008d64:	4013      	ands	r3, r2
 8008d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d80:	d03e      	beq.n	8008e00 <HAL_TIM_ConfigClockSource+0xd4>
 8008d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d86:	f200 8087 	bhi.w	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d8e:	f000 8086 	beq.w	8008e9e <HAL_TIM_ConfigClockSource+0x172>
 8008d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d96:	d87f      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008d98:	2b70      	cmp	r3, #112	@ 0x70
 8008d9a:	d01a      	beq.n	8008dd2 <HAL_TIM_ConfigClockSource+0xa6>
 8008d9c:	2b70      	cmp	r3, #112	@ 0x70
 8008d9e:	d87b      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008da0:	2b60      	cmp	r3, #96	@ 0x60
 8008da2:	d050      	beq.n	8008e46 <HAL_TIM_ConfigClockSource+0x11a>
 8008da4:	2b60      	cmp	r3, #96	@ 0x60
 8008da6:	d877      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008da8:	2b50      	cmp	r3, #80	@ 0x50
 8008daa:	d03c      	beq.n	8008e26 <HAL_TIM_ConfigClockSource+0xfa>
 8008dac:	2b50      	cmp	r3, #80	@ 0x50
 8008dae:	d873      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008db0:	2b40      	cmp	r3, #64	@ 0x40
 8008db2:	d058      	beq.n	8008e66 <HAL_TIM_ConfigClockSource+0x13a>
 8008db4:	2b40      	cmp	r3, #64	@ 0x40
 8008db6:	d86f      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008db8:	2b30      	cmp	r3, #48	@ 0x30
 8008dba:	d064      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0x15a>
 8008dbc:	2b30      	cmp	r3, #48	@ 0x30
 8008dbe:	d86b      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	d060      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0x15a>
 8008dc4:	2b20      	cmp	r3, #32
 8008dc6:	d867      	bhi.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d05c      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0x15a>
 8008dcc:	2b10      	cmp	r3, #16
 8008dce:	d05a      	beq.n	8008e86 <HAL_TIM_ConfigClockSource+0x15a>
 8008dd0:	e062      	b.n	8008e98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008de2:	f000 f9b9 	bl	8009158 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	609a      	str	r2, [r3, #8]
      break;
 8008dfe:	e04f      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008e10:	f000 f9a2 	bl	8009158 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689a      	ldr	r2, [r3, #8]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e22:	609a      	str	r2, [r3, #8]
      break;
 8008e24:	e03c      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e32:	461a      	mov	r2, r3
 8008e34:	f000 f916 	bl	8009064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2150      	movs	r1, #80	@ 0x50
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f96f 	bl	8009122 <TIM_ITRx_SetConfig>
      break;
 8008e44:	e02c      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e52:	461a      	mov	r2, r3
 8008e54:	f000 f935 	bl	80090c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2160      	movs	r1, #96	@ 0x60
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 f95f 	bl	8009122 <TIM_ITRx_SetConfig>
      break;
 8008e64:	e01c      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e72:	461a      	mov	r2, r3
 8008e74:	f000 f8f6 	bl	8009064 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2140      	movs	r1, #64	@ 0x40
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 f94f 	bl	8009122 <TIM_ITRx_SetConfig>
      break;
 8008e84:	e00c      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4610      	mov	r0, r2
 8008e92:	f000 f946 	bl	8009122 <TIM_ITRx_SetConfig>
      break;
 8008e96:	e003      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e9c:	e000      	b.n	8008ea0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	fffeff88 	.word	0xfffeff88

08008ec0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a40      	ldr	r2, [pc, #256]	@ (8009038 <TIM_Base_SetConfig+0x114>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d013      	beq.n	8008f64 <TIM_Base_SetConfig+0x40>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f42:	d00f      	beq.n	8008f64 <TIM_Base_SetConfig+0x40>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a3d      	ldr	r2, [pc, #244]	@ (800903c <TIM_Base_SetConfig+0x118>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d00b      	beq.n	8008f64 <TIM_Base_SetConfig+0x40>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a3c      	ldr	r2, [pc, #240]	@ (8009040 <TIM_Base_SetConfig+0x11c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d007      	beq.n	8008f64 <TIM_Base_SetConfig+0x40>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a3b      	ldr	r2, [pc, #236]	@ (8009044 <TIM_Base_SetConfig+0x120>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d003      	beq.n	8008f64 <TIM_Base_SetConfig+0x40>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a3a      	ldr	r2, [pc, #232]	@ (8009048 <TIM_Base_SetConfig+0x124>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d108      	bne.n	8008f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a2f      	ldr	r2, [pc, #188]	@ (8009038 <TIM_Base_SetConfig+0x114>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d02b      	beq.n	8008fd6 <TIM_Base_SetConfig+0xb2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f84:	d027      	beq.n	8008fd6 <TIM_Base_SetConfig+0xb2>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a2c      	ldr	r2, [pc, #176]	@ (800903c <TIM_Base_SetConfig+0x118>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d023      	beq.n	8008fd6 <TIM_Base_SetConfig+0xb2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a2b      	ldr	r2, [pc, #172]	@ (8009040 <TIM_Base_SetConfig+0x11c>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d01f      	beq.n	8008fd6 <TIM_Base_SetConfig+0xb2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a2a      	ldr	r2, [pc, #168]	@ (8009044 <TIM_Base_SetConfig+0x120>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d01b      	beq.n	8008fd6 <TIM_Base_SetConfig+0xb2>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a29      	ldr	r2, [pc, #164]	@ (8009048 <TIM_Base_SetConfig+0x124>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d017      	beq.n	8008fd6 <TIM_Base_SetConfig+0xb2>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a28      	ldr	r2, [pc, #160]	@ (800904c <TIM_Base_SetConfig+0x128>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d013      	beq.n	8008fd6 <TIM_Base_SetConfig+0xb2>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a27      	ldr	r2, [pc, #156]	@ (8009050 <TIM_Base_SetConfig+0x12c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00f      	beq.n	8008fd6 <TIM_Base_SetConfig+0xb2>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a26      	ldr	r2, [pc, #152]	@ (8009054 <TIM_Base_SetConfig+0x130>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d00b      	beq.n	8008fd6 <TIM_Base_SetConfig+0xb2>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a25      	ldr	r2, [pc, #148]	@ (8009058 <TIM_Base_SetConfig+0x134>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d007      	beq.n	8008fd6 <TIM_Base_SetConfig+0xb2>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a24      	ldr	r2, [pc, #144]	@ (800905c <TIM_Base_SetConfig+0x138>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d003      	beq.n	8008fd6 <TIM_Base_SetConfig+0xb2>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a23      	ldr	r2, [pc, #140]	@ (8009060 <TIM_Base_SetConfig+0x13c>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d108      	bne.n	8008fe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	689a      	ldr	r2, [r3, #8]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a0a      	ldr	r2, [pc, #40]	@ (8009038 <TIM_Base_SetConfig+0x114>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d003      	beq.n	800901c <TIM_Base_SetConfig+0xf8>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a0c      	ldr	r2, [pc, #48]	@ (8009048 <TIM_Base_SetConfig+0x124>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d103      	bne.n	8009024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	691a      	ldr	r2, [r3, #16]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	615a      	str	r2, [r3, #20]
}
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	40010000 	.word	0x40010000
 800903c:	40000400 	.word	0x40000400
 8009040:	40000800 	.word	0x40000800
 8009044:	40000c00 	.word	0x40000c00
 8009048:	40010400 	.word	0x40010400
 800904c:	40014000 	.word	0x40014000
 8009050:	40014400 	.word	0x40014400
 8009054:	40014800 	.word	0x40014800
 8009058:	40001800 	.word	0x40001800
 800905c:	40001c00 	.word	0x40001c00
 8009060:	40002000 	.word	0x40002000

08009064 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009064:	b480      	push	{r7}
 8009066:	b087      	sub	sp, #28
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6a1b      	ldr	r3, [r3, #32]
 800907a:	f023 0201 	bic.w	r2, r3, #1
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800908e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	011b      	lsls	r3, r3, #4
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	4313      	orrs	r3, r2
 8009098:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f023 030a 	bic.w	r3, r3, #10
 80090a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	621a      	str	r2, [r3, #32]
}
 80090b6:	bf00      	nop
 80090b8:	371c      	adds	r7, #28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090c2:	b480      	push	{r7}
 80090c4:	b087      	sub	sp, #28
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	60f8      	str	r0, [r7, #12]
 80090ca:	60b9      	str	r1, [r7, #8]
 80090cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	f023 0210 	bic.w	r2, r3, #16
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80090ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	031b      	lsls	r3, r3, #12
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80090fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	011b      	lsls	r3, r3, #4
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	4313      	orrs	r3, r2
 8009108:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	621a      	str	r2, [r3, #32]
}
 8009116:	bf00      	nop
 8009118:	371c      	adds	r7, #28
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009122:	b480      	push	{r7}
 8009124:	b085      	sub	sp, #20
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009138:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4313      	orrs	r3, r2
 8009140:	f043 0307 	orr.w	r3, r3, #7
 8009144:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	609a      	str	r2, [r3, #8]
}
 800914c:	bf00      	nop
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009158:	b480      	push	{r7}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009172:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	021a      	lsls	r2, r3, #8
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	431a      	orrs	r2, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	4313      	orrs	r3, r2
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	4313      	orrs	r3, r2
 8009184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	609a      	str	r2, [r3, #8]
}
 800918c:	bf00      	nop
 800918e:	371c      	adds	r7, #28
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d101      	bne.n	80091b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091ac:	2302      	movs	r3, #2
 80091ae:	e06d      	b.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a30      	ldr	r2, [pc, #192]	@ (8009298 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d004      	beq.n	80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a2f      	ldr	r2, [pc, #188]	@ (800929c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d108      	bne.n	80091f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80091ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4313      	orrs	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a20      	ldr	r2, [pc, #128]	@ (8009298 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d022      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009222:	d01d      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a1d      	ldr	r2, [pc, #116]	@ (80092a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d018      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a1c      	ldr	r2, [pc, #112]	@ (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d013      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a1a      	ldr	r2, [pc, #104]	@ (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00e      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a15      	ldr	r2, [pc, #84]	@ (800929c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d009      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a16      	ldr	r2, [pc, #88]	@ (80092ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d004      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a15      	ldr	r2, [pc, #84]	@ (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d10c      	bne.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009266:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	4313      	orrs	r3, r2
 8009270:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	40010000 	.word	0x40010000
 800929c:	40010400 	.word	0x40010400
 80092a0:	40000400 	.word	0x40000400
 80092a4:	40000800 	.word	0x40000800
 80092a8:	40000c00 	.word	0x40000c00
 80092ac:	40014000 	.word	0x40014000
 80092b0:	40001800 	.word	0x40001800

080092b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e040      	b.n	8009384 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d106      	bne.n	8009318 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7fd fe84 	bl	8007020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2224      	movs	r2, #36	@ 0x24
 800931c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 0201 	bic.w	r2, r2, #1
 800932c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fb1e 	bl	8009970 <UART_SetConfig>
 8009334:	4603      	mov	r3, r0
 8009336:	2b01      	cmp	r3, #1
 8009338:	d101      	bne.n	800933e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e022      	b.n	8009384 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fd76 	bl	8009e38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800935a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800936a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f042 0201 	orr.w	r2, r2, #1
 800937a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fdfd 	bl	8009f7c <UART_CheckIdleState>
 8009382:	4603      	mov	r3, r0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3708      	adds	r7, #8
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b0ba      	sub	sp, #232	@ 0xe8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80093b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80093b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80093ba:	4013      	ands	r3, r2
 80093bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80093c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d115      	bne.n	80093f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80093c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093cc:	f003 0320 	and.w	r3, r3, #32
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00f      	beq.n	80093f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80093d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093d8:	f003 0320 	and.w	r3, r3, #32
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d009      	beq.n	80093f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 8297 	beq.w	8009918 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	4798      	blx	r3
      }
      return;
 80093f2:	e291      	b.n	8009918 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80093f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 8117 	beq.w	800962c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80093fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800940a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800940e:	4b85      	ldr	r3, [pc, #532]	@ (8009624 <HAL_UART_IRQHandler+0x298>)
 8009410:	4013      	ands	r3, r2
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 810a 	beq.w	800962c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b00      	cmp	r3, #0
 8009422:	d011      	beq.n	8009448 <HAL_UART_IRQHandler+0xbc>
 8009424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2201      	movs	r2, #1
 8009436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800943e:	f043 0201 	orr.w	r2, r3, #1
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b00      	cmp	r3, #0
 8009452:	d011      	beq.n	8009478 <HAL_UART_IRQHandler+0xec>
 8009454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00b      	beq.n	8009478 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2202      	movs	r2, #2
 8009466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800946e:	f043 0204 	orr.w	r2, r3, #4
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800947c:	f003 0304 	and.w	r3, r3, #4
 8009480:	2b00      	cmp	r3, #0
 8009482:	d011      	beq.n	80094a8 <HAL_UART_IRQHandler+0x11c>
 8009484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00b      	beq.n	80094a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2204      	movs	r2, #4
 8009496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800949e:	f043 0202 	orr.w	r2, r3, #2
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80094a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ac:	f003 0308 	and.w	r3, r3, #8
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d017      	beq.n	80094e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80094b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094b8:	f003 0320 	and.w	r3, r3, #32
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d105      	bne.n	80094cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80094c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80094c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2208      	movs	r2, #8
 80094d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094da:	f043 0208 	orr.w	r2, r3, #8
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d012      	beq.n	8009516 <HAL_UART_IRQHandler+0x18a>
 80094f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00c      	beq.n	8009516 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009504:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800950c:	f043 0220 	orr.w	r2, r3, #32
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 81fd 	beq.w	800991c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009526:	f003 0320 	and.w	r3, r3, #32
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00d      	beq.n	800954a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800952e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009532:	f003 0320 	and.w	r3, r3, #32
 8009536:	2b00      	cmp	r3, #0
 8009538:	d007      	beq.n	800954a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800953e:	2b00      	cmp	r3, #0
 8009540:	d003      	beq.n	800954a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009550:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800955e:	2b40      	cmp	r3, #64	@ 0x40
 8009560:	d005      	beq.n	800956e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009566:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800956a:	2b00      	cmp	r3, #0
 800956c:	d04f      	beq.n	800960e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fe01 	bl	800a176 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800957e:	2b40      	cmp	r3, #64	@ 0x40
 8009580:	d141      	bne.n	8009606 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3308      	adds	r3, #8
 8009588:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009590:	e853 3f00 	ldrex	r3, [r3]
 8009594:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009598:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800959c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80095ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80095b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80095ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80095be:	e841 2300 	strex	r3, r2, [r1]
 80095c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80095c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1d9      	bne.n	8009582 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d013      	beq.n	80095fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095da:	4a13      	ldr	r2, [pc, #76]	@ (8009628 <HAL_UART_IRQHandler+0x29c>)
 80095dc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fd ff89 	bl	80074fa <HAL_DMA_Abort_IT>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d017      	beq.n	800961e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80095f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80095f8:	4610      	mov	r0, r2
 80095fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095fc:	e00f      	b.n	800961e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f9a0 	bl	8009944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009604:	e00b      	b.n	800961e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f99c 	bl	8009944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800960c:	e007      	b.n	800961e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f998 	bl	8009944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800961c:	e17e      	b.n	800991c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800961e:	bf00      	nop
    return;
 8009620:	e17c      	b.n	800991c <HAL_UART_IRQHandler+0x590>
 8009622:	bf00      	nop
 8009624:	04000120 	.word	0x04000120
 8009628:	0800a23f 	.word	0x0800a23f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009630:	2b01      	cmp	r3, #1
 8009632:	f040 814c 	bne.w	80098ce <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800963a:	f003 0310 	and.w	r3, r3, #16
 800963e:	2b00      	cmp	r3, #0
 8009640:	f000 8145 	beq.w	80098ce <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009648:	f003 0310 	and.w	r3, r3, #16
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 813e 	beq.w	80098ce <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2210      	movs	r2, #16
 8009658:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009664:	2b40      	cmp	r3, #64	@ 0x40
 8009666:	f040 80b6 	bne.w	80097d6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009676:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 8150 	beq.w	8009920 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009686:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800968a:	429a      	cmp	r2, r3
 800968c:	f080 8148 	bcs.w	8009920 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009696:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800969e:	69db      	ldr	r3, [r3, #28]
 80096a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a4:	f000 8086 	beq.w	80097b4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80096bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	461a      	mov	r2, r3
 80096ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80096d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80096d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80096de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80096e2:	e841 2300 	strex	r3, r2, [r1]
 80096e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80096ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1da      	bne.n	80096a8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	3308      	adds	r3, #8
 80096f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096fc:	e853 3f00 	ldrex	r3, [r3]
 8009700:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009702:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009704:	f023 0301 	bic.w	r3, r3, #1
 8009708:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3308      	adds	r3, #8
 8009712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009716:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800971a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800971c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800971e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009722:	e841 2300 	strex	r3, r2, [r1]
 8009726:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800972a:	2b00      	cmp	r3, #0
 800972c:	d1e1      	bne.n	80096f2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3308      	adds	r3, #8
 8009734:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009738:	e853 3f00 	ldrex	r3, [r3]
 800973c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800973e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3308      	adds	r3, #8
 800974e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009752:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009754:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009756:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009758:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800975a:	e841 2300 	strex	r3, r2, [r1]
 800975e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009760:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1e3      	bne.n	800972e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2220      	movs	r2, #32
 800976a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800977c:	e853 3f00 	ldrex	r3, [r3]
 8009780:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009784:	f023 0310 	bic.w	r3, r3, #16
 8009788:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	461a      	mov	r2, r3
 8009792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009796:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009798:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800979c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e4      	bne.n	8009774 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fd fe33 	bl	800741a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	4619      	mov	r1, r3
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f8c2 	bl	8009958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80097d4:	e0a4      	b.n	8009920 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	f000 8096 	beq.w	8009924 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80097f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 8091 	beq.w	8009924 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980a:	e853 3f00 	ldrex	r3, [r3]
 800980e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009812:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009816:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009824:	647b      	str	r3, [r7, #68]	@ 0x44
 8009826:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009828:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800982a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800982c:	e841 2300 	strex	r3, r2, [r1]
 8009830:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e4      	bne.n	8009802 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3308      	adds	r3, #8
 800983e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009842:	e853 3f00 	ldrex	r3, [r3]
 8009846:	623b      	str	r3, [r7, #32]
   return(result);
 8009848:	6a3b      	ldr	r3, [r7, #32]
 800984a:	f023 0301 	bic.w	r3, r3, #1
 800984e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3308      	adds	r3, #8
 8009858:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800985c:	633a      	str	r2, [r7, #48]	@ 0x30
 800985e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009860:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009864:	e841 2300 	strex	r3, r2, [r1]
 8009868:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800986a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1e3      	bne.n	8009838 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2220      	movs	r2, #32
 8009874:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	e853 3f00 	ldrex	r3, [r3]
 8009890:	60fb      	str	r3, [r7, #12]
   return(result);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f023 0310 	bic.w	r3, r3, #16
 8009898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	461a      	mov	r2, r3
 80098a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098aa:	69b9      	ldr	r1, [r7, #24]
 80098ac:	69fa      	ldr	r2, [r7, #28]
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	617b      	str	r3, [r7, #20]
   return(result);
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e4      	bne.n	8009884 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2202      	movs	r2, #2
 80098be:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f846 	bl	8009958 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098cc:	e02a      	b.n	8009924 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80098ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00e      	beq.n	80098f8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80098da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d008      	beq.n	80098f8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d01c      	beq.n	8009928 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	4798      	blx	r3
    }
    return;
 80098f6:	e017      	b.n	8009928 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009900:	2b00      	cmp	r3, #0
 8009902:	d012      	beq.n	800992a <HAL_UART_IRQHandler+0x59e>
 8009904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00c      	beq.n	800992a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fcaa 	bl	800a26a <UART_EndTransmit_IT>
    return;
 8009916:	e008      	b.n	800992a <HAL_UART_IRQHandler+0x59e>
      return;
 8009918:	bf00      	nop
 800991a:	e006      	b.n	800992a <HAL_UART_IRQHandler+0x59e>
    return;
 800991c:	bf00      	nop
 800991e:	e004      	b.n	800992a <HAL_UART_IRQHandler+0x59e>
      return;
 8009920:	bf00      	nop
 8009922:	e002      	b.n	800992a <HAL_UART_IRQHandler+0x59e>
      return;
 8009924:	bf00      	nop
 8009926:	e000      	b.n	800992a <HAL_UART_IRQHandler+0x59e>
    return;
 8009928:	bf00      	nop
  }

}
 800992a:	37e8      	adds	r7, #232	@ 0xe8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009938:	bf00      	nop
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	460b      	mov	r3, r1
 8009962:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr

08009970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b088      	sub	sp, #32
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	689a      	ldr	r2, [r3, #8]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	431a      	orrs	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	431a      	orrs	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	4313      	orrs	r3, r2
 8009992:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	4ba6      	ldr	r3, [pc, #664]	@ (8009c34 <UART_SetConfig+0x2c4>)
 800999c:	4013      	ands	r3, r2
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	6812      	ldr	r2, [r2, #0]
 80099a2:	6979      	ldr	r1, [r7, #20]
 80099a4:	430b      	orrs	r3, r1
 80099a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68da      	ldr	r2, [r3, #12]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	430a      	orrs	r2, r1
 80099bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6a1b      	ldr	r3, [r3, #32]
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	430a      	orrs	r2, r1
 80099e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a94      	ldr	r2, [pc, #592]	@ (8009c38 <UART_SetConfig+0x2c8>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d120      	bne.n	8009a2e <UART_SetConfig+0xbe>
 80099ec:	4b93      	ldr	r3, [pc, #588]	@ (8009c3c <UART_SetConfig+0x2cc>)
 80099ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099f2:	f003 0303 	and.w	r3, r3, #3
 80099f6:	2b03      	cmp	r3, #3
 80099f8:	d816      	bhi.n	8009a28 <UART_SetConfig+0xb8>
 80099fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009a00 <UART_SetConfig+0x90>)
 80099fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a00:	08009a11 	.word	0x08009a11
 8009a04:	08009a1d 	.word	0x08009a1d
 8009a08:	08009a17 	.word	0x08009a17
 8009a0c:	08009a23 	.word	0x08009a23
 8009a10:	2301      	movs	r3, #1
 8009a12:	77fb      	strb	r3, [r7, #31]
 8009a14:	e150      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009a16:	2302      	movs	r3, #2
 8009a18:	77fb      	strb	r3, [r7, #31]
 8009a1a:	e14d      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009a1c:	2304      	movs	r3, #4
 8009a1e:	77fb      	strb	r3, [r7, #31]
 8009a20:	e14a      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009a22:	2308      	movs	r3, #8
 8009a24:	77fb      	strb	r3, [r7, #31]
 8009a26:	e147      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009a28:	2310      	movs	r3, #16
 8009a2a:	77fb      	strb	r3, [r7, #31]
 8009a2c:	e144      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a83      	ldr	r2, [pc, #524]	@ (8009c40 <UART_SetConfig+0x2d0>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d132      	bne.n	8009a9e <UART_SetConfig+0x12e>
 8009a38:	4b80      	ldr	r3, [pc, #512]	@ (8009c3c <UART_SetConfig+0x2cc>)
 8009a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a3e:	f003 030c 	and.w	r3, r3, #12
 8009a42:	2b0c      	cmp	r3, #12
 8009a44:	d828      	bhi.n	8009a98 <UART_SetConfig+0x128>
 8009a46:	a201      	add	r2, pc, #4	@ (adr r2, 8009a4c <UART_SetConfig+0xdc>)
 8009a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4c:	08009a81 	.word	0x08009a81
 8009a50:	08009a99 	.word	0x08009a99
 8009a54:	08009a99 	.word	0x08009a99
 8009a58:	08009a99 	.word	0x08009a99
 8009a5c:	08009a8d 	.word	0x08009a8d
 8009a60:	08009a99 	.word	0x08009a99
 8009a64:	08009a99 	.word	0x08009a99
 8009a68:	08009a99 	.word	0x08009a99
 8009a6c:	08009a87 	.word	0x08009a87
 8009a70:	08009a99 	.word	0x08009a99
 8009a74:	08009a99 	.word	0x08009a99
 8009a78:	08009a99 	.word	0x08009a99
 8009a7c:	08009a93 	.word	0x08009a93
 8009a80:	2300      	movs	r3, #0
 8009a82:	77fb      	strb	r3, [r7, #31]
 8009a84:	e118      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009a86:	2302      	movs	r3, #2
 8009a88:	77fb      	strb	r3, [r7, #31]
 8009a8a:	e115      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009a8c:	2304      	movs	r3, #4
 8009a8e:	77fb      	strb	r3, [r7, #31]
 8009a90:	e112      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009a92:	2308      	movs	r3, #8
 8009a94:	77fb      	strb	r3, [r7, #31]
 8009a96:	e10f      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009a98:	2310      	movs	r3, #16
 8009a9a:	77fb      	strb	r3, [r7, #31]
 8009a9c:	e10c      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a68      	ldr	r2, [pc, #416]	@ (8009c44 <UART_SetConfig+0x2d4>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d120      	bne.n	8009aea <UART_SetConfig+0x17a>
 8009aa8:	4b64      	ldr	r3, [pc, #400]	@ (8009c3c <UART_SetConfig+0x2cc>)
 8009aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009ab2:	2b30      	cmp	r3, #48	@ 0x30
 8009ab4:	d013      	beq.n	8009ade <UART_SetConfig+0x16e>
 8009ab6:	2b30      	cmp	r3, #48	@ 0x30
 8009ab8:	d814      	bhi.n	8009ae4 <UART_SetConfig+0x174>
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	d009      	beq.n	8009ad2 <UART_SetConfig+0x162>
 8009abe:	2b20      	cmp	r3, #32
 8009ac0:	d810      	bhi.n	8009ae4 <UART_SetConfig+0x174>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <UART_SetConfig+0x15c>
 8009ac6:	2b10      	cmp	r3, #16
 8009ac8:	d006      	beq.n	8009ad8 <UART_SetConfig+0x168>
 8009aca:	e00b      	b.n	8009ae4 <UART_SetConfig+0x174>
 8009acc:	2300      	movs	r3, #0
 8009ace:	77fb      	strb	r3, [r7, #31]
 8009ad0:	e0f2      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	77fb      	strb	r3, [r7, #31]
 8009ad6:	e0ef      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009ad8:	2304      	movs	r3, #4
 8009ada:	77fb      	strb	r3, [r7, #31]
 8009adc:	e0ec      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009ade:	2308      	movs	r3, #8
 8009ae0:	77fb      	strb	r3, [r7, #31]
 8009ae2:	e0e9      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	77fb      	strb	r3, [r7, #31]
 8009ae8:	e0e6      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a56      	ldr	r2, [pc, #344]	@ (8009c48 <UART_SetConfig+0x2d8>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d120      	bne.n	8009b36 <UART_SetConfig+0x1c6>
 8009af4:	4b51      	ldr	r3, [pc, #324]	@ (8009c3c <UART_SetConfig+0x2cc>)
 8009af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009afa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009afe:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b00:	d013      	beq.n	8009b2a <UART_SetConfig+0x1ba>
 8009b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8009b04:	d814      	bhi.n	8009b30 <UART_SetConfig+0x1c0>
 8009b06:	2b80      	cmp	r3, #128	@ 0x80
 8009b08:	d009      	beq.n	8009b1e <UART_SetConfig+0x1ae>
 8009b0a:	2b80      	cmp	r3, #128	@ 0x80
 8009b0c:	d810      	bhi.n	8009b30 <UART_SetConfig+0x1c0>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d002      	beq.n	8009b18 <UART_SetConfig+0x1a8>
 8009b12:	2b40      	cmp	r3, #64	@ 0x40
 8009b14:	d006      	beq.n	8009b24 <UART_SetConfig+0x1b4>
 8009b16:	e00b      	b.n	8009b30 <UART_SetConfig+0x1c0>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	77fb      	strb	r3, [r7, #31]
 8009b1c:	e0cc      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009b1e:	2302      	movs	r3, #2
 8009b20:	77fb      	strb	r3, [r7, #31]
 8009b22:	e0c9      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009b24:	2304      	movs	r3, #4
 8009b26:	77fb      	strb	r3, [r7, #31]
 8009b28:	e0c6      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009b2a:	2308      	movs	r3, #8
 8009b2c:	77fb      	strb	r3, [r7, #31]
 8009b2e:	e0c3      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009b30:	2310      	movs	r3, #16
 8009b32:	77fb      	strb	r3, [r7, #31]
 8009b34:	e0c0      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a44      	ldr	r2, [pc, #272]	@ (8009c4c <UART_SetConfig+0x2dc>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d125      	bne.n	8009b8c <UART_SetConfig+0x21c>
 8009b40:	4b3e      	ldr	r3, [pc, #248]	@ (8009c3c <UART_SetConfig+0x2cc>)
 8009b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b4e:	d017      	beq.n	8009b80 <UART_SetConfig+0x210>
 8009b50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b54:	d817      	bhi.n	8009b86 <UART_SetConfig+0x216>
 8009b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b5a:	d00b      	beq.n	8009b74 <UART_SetConfig+0x204>
 8009b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b60:	d811      	bhi.n	8009b86 <UART_SetConfig+0x216>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d003      	beq.n	8009b6e <UART_SetConfig+0x1fe>
 8009b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b6a:	d006      	beq.n	8009b7a <UART_SetConfig+0x20a>
 8009b6c:	e00b      	b.n	8009b86 <UART_SetConfig+0x216>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	77fb      	strb	r3, [r7, #31]
 8009b72:	e0a1      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009b74:	2302      	movs	r3, #2
 8009b76:	77fb      	strb	r3, [r7, #31]
 8009b78:	e09e      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009b7a:	2304      	movs	r3, #4
 8009b7c:	77fb      	strb	r3, [r7, #31]
 8009b7e:	e09b      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009b80:	2308      	movs	r3, #8
 8009b82:	77fb      	strb	r3, [r7, #31]
 8009b84:	e098      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009b86:	2310      	movs	r3, #16
 8009b88:	77fb      	strb	r3, [r7, #31]
 8009b8a:	e095      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a2f      	ldr	r2, [pc, #188]	@ (8009c50 <UART_SetConfig+0x2e0>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d125      	bne.n	8009be2 <UART_SetConfig+0x272>
 8009b96:	4b29      	ldr	r3, [pc, #164]	@ (8009c3c <UART_SetConfig+0x2cc>)
 8009b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009ba0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009ba4:	d017      	beq.n	8009bd6 <UART_SetConfig+0x266>
 8009ba6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009baa:	d817      	bhi.n	8009bdc <UART_SetConfig+0x26c>
 8009bac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bb0:	d00b      	beq.n	8009bca <UART_SetConfig+0x25a>
 8009bb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bb6:	d811      	bhi.n	8009bdc <UART_SetConfig+0x26c>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <UART_SetConfig+0x254>
 8009bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bc0:	d006      	beq.n	8009bd0 <UART_SetConfig+0x260>
 8009bc2:	e00b      	b.n	8009bdc <UART_SetConfig+0x26c>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	77fb      	strb	r3, [r7, #31]
 8009bc8:	e076      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009bca:	2302      	movs	r3, #2
 8009bcc:	77fb      	strb	r3, [r7, #31]
 8009bce:	e073      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009bd0:	2304      	movs	r3, #4
 8009bd2:	77fb      	strb	r3, [r7, #31]
 8009bd4:	e070      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009bd6:	2308      	movs	r3, #8
 8009bd8:	77fb      	strb	r3, [r7, #31]
 8009bda:	e06d      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009bdc:	2310      	movs	r3, #16
 8009bde:	77fb      	strb	r3, [r7, #31]
 8009be0:	e06a      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a1b      	ldr	r2, [pc, #108]	@ (8009c54 <UART_SetConfig+0x2e4>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d138      	bne.n	8009c5e <UART_SetConfig+0x2ee>
 8009bec:	4b13      	ldr	r3, [pc, #76]	@ (8009c3c <UART_SetConfig+0x2cc>)
 8009bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009bf6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009bfa:	d017      	beq.n	8009c2c <UART_SetConfig+0x2bc>
 8009bfc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c00:	d82a      	bhi.n	8009c58 <UART_SetConfig+0x2e8>
 8009c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c06:	d00b      	beq.n	8009c20 <UART_SetConfig+0x2b0>
 8009c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c0c:	d824      	bhi.n	8009c58 <UART_SetConfig+0x2e8>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <UART_SetConfig+0x2aa>
 8009c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c16:	d006      	beq.n	8009c26 <UART_SetConfig+0x2b6>
 8009c18:	e01e      	b.n	8009c58 <UART_SetConfig+0x2e8>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	77fb      	strb	r3, [r7, #31]
 8009c1e:	e04b      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009c20:	2302      	movs	r3, #2
 8009c22:	77fb      	strb	r3, [r7, #31]
 8009c24:	e048      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009c26:	2304      	movs	r3, #4
 8009c28:	77fb      	strb	r3, [r7, #31]
 8009c2a:	e045      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009c2c:	2308      	movs	r3, #8
 8009c2e:	77fb      	strb	r3, [r7, #31]
 8009c30:	e042      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009c32:	bf00      	nop
 8009c34:	efff69f3 	.word	0xefff69f3
 8009c38:	40011000 	.word	0x40011000
 8009c3c:	40023800 	.word	0x40023800
 8009c40:	40004400 	.word	0x40004400
 8009c44:	40004800 	.word	0x40004800
 8009c48:	40004c00 	.word	0x40004c00
 8009c4c:	40005000 	.word	0x40005000
 8009c50:	40011400 	.word	0x40011400
 8009c54:	40007800 	.word	0x40007800
 8009c58:	2310      	movs	r3, #16
 8009c5a:	77fb      	strb	r3, [r7, #31]
 8009c5c:	e02c      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a72      	ldr	r2, [pc, #456]	@ (8009e2c <UART_SetConfig+0x4bc>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d125      	bne.n	8009cb4 <UART_SetConfig+0x344>
 8009c68:	4b71      	ldr	r3, [pc, #452]	@ (8009e30 <UART_SetConfig+0x4c0>)
 8009c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c6e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009c72:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009c76:	d017      	beq.n	8009ca8 <UART_SetConfig+0x338>
 8009c78:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009c7c:	d817      	bhi.n	8009cae <UART_SetConfig+0x33e>
 8009c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c82:	d00b      	beq.n	8009c9c <UART_SetConfig+0x32c>
 8009c84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c88:	d811      	bhi.n	8009cae <UART_SetConfig+0x33e>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <UART_SetConfig+0x326>
 8009c8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c92:	d006      	beq.n	8009ca2 <UART_SetConfig+0x332>
 8009c94:	e00b      	b.n	8009cae <UART_SetConfig+0x33e>
 8009c96:	2300      	movs	r3, #0
 8009c98:	77fb      	strb	r3, [r7, #31]
 8009c9a:	e00d      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	77fb      	strb	r3, [r7, #31]
 8009ca0:	e00a      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009ca2:	2304      	movs	r3, #4
 8009ca4:	77fb      	strb	r3, [r7, #31]
 8009ca6:	e007      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009ca8:	2308      	movs	r3, #8
 8009caa:	77fb      	strb	r3, [r7, #31]
 8009cac:	e004      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009cae:	2310      	movs	r3, #16
 8009cb0:	77fb      	strb	r3, [r7, #31]
 8009cb2:	e001      	b.n	8009cb8 <UART_SetConfig+0x348>
 8009cb4:	2310      	movs	r3, #16
 8009cb6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cc0:	d15b      	bne.n	8009d7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009cc2:	7ffb      	ldrb	r3, [r7, #31]
 8009cc4:	2b08      	cmp	r3, #8
 8009cc6:	d828      	bhi.n	8009d1a <UART_SetConfig+0x3aa>
 8009cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd0 <UART_SetConfig+0x360>)
 8009cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cce:	bf00      	nop
 8009cd0:	08009cf5 	.word	0x08009cf5
 8009cd4:	08009cfd 	.word	0x08009cfd
 8009cd8:	08009d05 	.word	0x08009d05
 8009cdc:	08009d1b 	.word	0x08009d1b
 8009ce0:	08009d0b 	.word	0x08009d0b
 8009ce4:	08009d1b 	.word	0x08009d1b
 8009ce8:	08009d1b 	.word	0x08009d1b
 8009cec:	08009d1b 	.word	0x08009d1b
 8009cf0:	08009d13 	.word	0x08009d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009cf4:	f7fe fa8c 	bl	8008210 <HAL_RCC_GetPCLK1Freq>
 8009cf8:	61b8      	str	r0, [r7, #24]
        break;
 8009cfa:	e013      	b.n	8009d24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cfc:	f7fe fa9c 	bl	8008238 <HAL_RCC_GetPCLK2Freq>
 8009d00:	61b8      	str	r0, [r7, #24]
        break;
 8009d02:	e00f      	b.n	8009d24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d04:	4b4b      	ldr	r3, [pc, #300]	@ (8009e34 <UART_SetConfig+0x4c4>)
 8009d06:	61bb      	str	r3, [r7, #24]
        break;
 8009d08:	e00c      	b.n	8009d24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d0a:	f7fe f96f 	bl	8007fec <HAL_RCC_GetSysClockFreq>
 8009d0e:	61b8      	str	r0, [r7, #24]
        break;
 8009d10:	e008      	b.n	8009d24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d16:	61bb      	str	r3, [r7, #24]
        break;
 8009d18:	e004      	b.n	8009d24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	77bb      	strb	r3, [r7, #30]
        break;
 8009d22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d074      	beq.n	8009e14 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	005a      	lsls	r2, r3, #1
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	085b      	lsrs	r3, r3, #1
 8009d34:	441a      	add	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	2b0f      	cmp	r3, #15
 8009d44:	d916      	bls.n	8009d74 <UART_SetConfig+0x404>
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d4c:	d212      	bcs.n	8009d74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	f023 030f 	bic.w	r3, r3, #15
 8009d56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	085b      	lsrs	r3, r3, #1
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	f003 0307 	and.w	r3, r3, #7
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	89fb      	ldrh	r3, [r7, #14]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	89fa      	ldrh	r2, [r7, #14]
 8009d70:	60da      	str	r2, [r3, #12]
 8009d72:	e04f      	b.n	8009e14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	77bb      	strb	r3, [r7, #30]
 8009d78:	e04c      	b.n	8009e14 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d7a:	7ffb      	ldrb	r3, [r7, #31]
 8009d7c:	2b08      	cmp	r3, #8
 8009d7e:	d828      	bhi.n	8009dd2 <UART_SetConfig+0x462>
 8009d80:	a201      	add	r2, pc, #4	@ (adr r2, 8009d88 <UART_SetConfig+0x418>)
 8009d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d86:	bf00      	nop
 8009d88:	08009dad 	.word	0x08009dad
 8009d8c:	08009db5 	.word	0x08009db5
 8009d90:	08009dbd 	.word	0x08009dbd
 8009d94:	08009dd3 	.word	0x08009dd3
 8009d98:	08009dc3 	.word	0x08009dc3
 8009d9c:	08009dd3 	.word	0x08009dd3
 8009da0:	08009dd3 	.word	0x08009dd3
 8009da4:	08009dd3 	.word	0x08009dd3
 8009da8:	08009dcb 	.word	0x08009dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dac:	f7fe fa30 	bl	8008210 <HAL_RCC_GetPCLK1Freq>
 8009db0:	61b8      	str	r0, [r7, #24]
        break;
 8009db2:	e013      	b.n	8009ddc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009db4:	f7fe fa40 	bl	8008238 <HAL_RCC_GetPCLK2Freq>
 8009db8:	61b8      	str	r0, [r7, #24]
        break;
 8009dba:	e00f      	b.n	8009ddc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8009e34 <UART_SetConfig+0x4c4>)
 8009dbe:	61bb      	str	r3, [r7, #24]
        break;
 8009dc0:	e00c      	b.n	8009ddc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dc2:	f7fe f913 	bl	8007fec <HAL_RCC_GetSysClockFreq>
 8009dc6:	61b8      	str	r0, [r7, #24]
        break;
 8009dc8:	e008      	b.n	8009ddc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dce:	61bb      	str	r3, [r7, #24]
        break;
 8009dd0:	e004      	b.n	8009ddc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	77bb      	strb	r3, [r7, #30]
        break;
 8009dda:	bf00      	nop
    }

    if (pclk != 0U)
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d018      	beq.n	8009e14 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	085a      	lsrs	r2, r3, #1
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	441a      	add	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	2b0f      	cmp	r3, #15
 8009dfa:	d909      	bls.n	8009e10 <UART_SetConfig+0x4a0>
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e02:	d205      	bcs.n	8009e10 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	60da      	str	r2, [r3, #12]
 8009e0e:	e001      	b.n	8009e14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009e20:	7fbb      	ldrb	r3, [r7, #30]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3720      	adds	r7, #32
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	40007c00 	.word	0x40007c00
 8009e30:	40023800 	.word	0x40023800
 8009e34:	00f42400 	.word	0x00f42400

08009e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00a      	beq.n	8009e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e66:	f003 0302 	and.w	r3, r3, #2
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00a      	beq.n	8009e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	430a      	orrs	r2, r1
 8009e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00a      	beq.n	8009ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eaa:	f003 0308 	and.w	r3, r3, #8
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00a      	beq.n	8009ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ecc:	f003 0310 	and.w	r3, r3, #16
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00a      	beq.n	8009eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eee:	f003 0320 	and.w	r3, r3, #32
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d01a      	beq.n	8009f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f36:	d10a      	bne.n	8009f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00a      	beq.n	8009f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	605a      	str	r2, [r3, #4]
  }
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af02      	add	r7, sp, #8
 8009f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f8c:	f7fd f928 	bl	80071e0 <HAL_GetTick>
 8009f90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 0308 	and.w	r3, r3, #8
 8009f9c:	2b08      	cmp	r3, #8
 8009f9e:	d10e      	bne.n	8009fbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fa0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f81b 	bl	8009fea <UART_WaitOnFlagUntilTimeout>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fba:	2303      	movs	r3, #3
 8009fbc:	e011      	b.n	8009fe2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2220      	movs	r2, #32
 8009fc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b09c      	sub	sp, #112	@ 0x70
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	603b      	str	r3, [r7, #0]
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ffa:	e0a7      	b.n	800a14c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ffc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a002:	f000 80a3 	beq.w	800a14c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a006:	f7fd f8eb 	bl	80071e0 <HAL_GetTick>
 800a00a:	4602      	mov	r2, r0
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800a012:	429a      	cmp	r2, r3
 800a014:	d302      	bcc.n	800a01c <UART_WaitOnFlagUntilTimeout+0x32>
 800a016:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d13f      	bne.n	800a09c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a024:	e853 3f00 	ldrex	r3, [r3]
 800a028:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a02a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a02c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a030:	667b      	str	r3, [r7, #100]	@ 0x64
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a03a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a03c:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a040:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a042:	e841 2300 	strex	r3, r2, [r1]
 800a046:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800a048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1e6      	bne.n	800a01c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	3308      	adds	r3, #8
 800a054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a058:	e853 3f00 	ldrex	r3, [r3]
 800a05c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a060:	f023 0301 	bic.w	r3, r3, #1
 800a064:	663b      	str	r3, [r7, #96]	@ 0x60
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3308      	adds	r3, #8
 800a06c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a06e:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a070:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a072:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a074:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a076:	e841 2300 	strex	r3, r2, [r1]
 800a07a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a07c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1e5      	bne.n	800a04e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2220      	movs	r2, #32
 800a086:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e068      	b.n	800a16e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 0304 	and.w	r3, r3, #4
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d050      	beq.n	800a14c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	69db      	ldr	r3, [r3, #28]
 800a0b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a0b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a0b8:	d148      	bne.n	800a14c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a0c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0cc:	e853 3f00 	ldrex	r3, [r3]
 800a0d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a0d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0e4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e6      	bne.n	800a0c4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	e853 3f00 	ldrex	r3, [r3]
 800a104:	613b      	str	r3, [r7, #16]
   return(result);
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	f023 0301 	bic.w	r3, r3, #1
 800a10c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3308      	adds	r3, #8
 800a114:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a116:	623a      	str	r2, [r7, #32]
 800a118:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11a:	69f9      	ldr	r1, [r7, #28]
 800a11c:	6a3a      	ldr	r2, [r7, #32]
 800a11e:	e841 2300 	strex	r3, r2, [r1]
 800a122:	61bb      	str	r3, [r7, #24]
   return(result);
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1e5      	bne.n	800a0f6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2220      	movs	r2, #32
 800a12e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2220      	movs	r2, #32
 800a134:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2220      	movs	r2, #32
 800a13c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	e010      	b.n	800a16e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	69da      	ldr	r2, [r3, #28]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	4013      	ands	r3, r2
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	429a      	cmp	r2, r3
 800a15a:	bf0c      	ite	eq
 800a15c:	2301      	moveq	r3, #1
 800a15e:	2300      	movne	r3, #0
 800a160:	b2db      	uxtb	r3, r3
 800a162:	461a      	mov	r2, r3
 800a164:	79fb      	ldrb	r3, [r7, #7]
 800a166:	429a      	cmp	r2, r3
 800a168:	f43f af48 	beq.w	8009ffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3770      	adds	r7, #112	@ 0x70
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a176:	b480      	push	{r7}
 800a178:	b095      	sub	sp, #84	@ 0x54
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a186:	e853 3f00 	ldrex	r3, [r3]
 800a18a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	461a      	mov	r2, r3
 800a19a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a19c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a19e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1a4:	e841 2300 	strex	r3, r2, [r1]
 800a1a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1e6      	bne.n	800a17e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	3308      	adds	r3, #8
 800a1b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	e853 3f00 	ldrex	r3, [r3]
 800a1be:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	f023 0301 	bic.w	r3, r3, #1
 800a1c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a1d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1d8:	e841 2300 	strex	r3, r2, [r1]
 800a1dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e5      	bne.n	800a1b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d118      	bne.n	800a21e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	e853 3f00 	ldrex	r3, [r3]
 800a1f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	f023 0310 	bic.w	r3, r3, #16
 800a200:	647b      	str	r3, [r7, #68]	@ 0x44
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a20a:	61bb      	str	r3, [r7, #24]
 800a20c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20e:	6979      	ldr	r1, [r7, #20]
 800a210:	69ba      	ldr	r2, [r7, #24]
 800a212:	e841 2300 	strex	r3, r2, [r1]
 800a216:	613b      	str	r3, [r7, #16]
   return(result);
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d1e6      	bne.n	800a1ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2220      	movs	r2, #32
 800a222:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a232:	bf00      	nop
 800a234:	3754      	adds	r7, #84	@ 0x54
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a24a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f7ff fb71 	bl	8009944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a262:	bf00      	nop
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b088      	sub	sp, #32
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	e853 3f00 	ldrex	r3, [r3]
 800a27e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a286:	61fb      	str	r3, [r7, #28]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	461a      	mov	r2, r3
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a294:	6979      	ldr	r1, [r7, #20]
 800a296:	69ba      	ldr	r2, [r7, #24]
 800a298:	e841 2300 	strex	r3, r2, [r1]
 800a29c:	613b      	str	r3, [r7, #16]
   return(result);
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e6      	bne.n	800a272 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7ff fb3d 	bl	8009930 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2b6:	bf00      	nop
 800a2b8:	3720      	adds	r7, #32
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
	...

0800a2c0 <findslot>:
 800a2c0:	4b0a      	ldr	r3, [pc, #40]	@ (800a2ec <findslot+0x2c>)
 800a2c2:	b510      	push	{r4, lr}
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	6818      	ldr	r0, [r3, #0]
 800a2c8:	b118      	cbz	r0, 800a2d2 <findslot+0x12>
 800a2ca:	6a03      	ldr	r3, [r0, #32]
 800a2cc:	b90b      	cbnz	r3, 800a2d2 <findslot+0x12>
 800a2ce:	f002 f8e9 	bl	800c4a4 <__sinit>
 800a2d2:	2c13      	cmp	r4, #19
 800a2d4:	d807      	bhi.n	800a2e6 <findslot+0x26>
 800a2d6:	4806      	ldr	r0, [pc, #24]	@ (800a2f0 <findslot+0x30>)
 800a2d8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800a2dc:	3201      	adds	r2, #1
 800a2de:	d002      	beq.n	800a2e6 <findslot+0x26>
 800a2e0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800a2e4:	bd10      	pop	{r4, pc}
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	e7fc      	b.n	800a2e4 <findslot+0x24>
 800a2ea:	bf00      	nop
 800a2ec:	20000184 	.word	0x20000184
 800a2f0:	20003738 	.word	0x20003738

0800a2f4 <error>:
 800a2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	f002 ff44 	bl	800d184 <__errno>
 800a2fc:	2613      	movs	r6, #19
 800a2fe:	4605      	mov	r5, r0
 800a300:	2700      	movs	r7, #0
 800a302:	4630      	mov	r0, r6
 800a304:	4639      	mov	r1, r7
 800a306:	beab      	bkpt	0x00ab
 800a308:	4606      	mov	r6, r0
 800a30a:	602e      	str	r6, [r5, #0]
 800a30c:	4620      	mov	r0, r4
 800a30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a310 <checkerror>:
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d101      	bne.n	800a318 <checkerror+0x8>
 800a314:	f7ff bfee 	b.w	800a2f4 <error>
 800a318:	4770      	bx	lr

0800a31a <_swiread>:
 800a31a:	b530      	push	{r4, r5, lr}
 800a31c:	b085      	sub	sp, #20
 800a31e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a322:	9203      	str	r2, [sp, #12]
 800a324:	2406      	movs	r4, #6
 800a326:	ad01      	add	r5, sp, #4
 800a328:	4620      	mov	r0, r4
 800a32a:	4629      	mov	r1, r5
 800a32c:	beab      	bkpt	0x00ab
 800a32e:	4604      	mov	r4, r0
 800a330:	4620      	mov	r0, r4
 800a332:	f7ff ffed 	bl	800a310 <checkerror>
 800a336:	b005      	add	sp, #20
 800a338:	bd30      	pop	{r4, r5, pc}

0800a33a <_read>:
 800a33a:	b570      	push	{r4, r5, r6, lr}
 800a33c:	460e      	mov	r6, r1
 800a33e:	4614      	mov	r4, r2
 800a340:	f7ff ffbe 	bl	800a2c0 <findslot>
 800a344:	4605      	mov	r5, r0
 800a346:	b930      	cbnz	r0, 800a356 <_read+0x1c>
 800a348:	f002 ff1c 	bl	800d184 <__errno>
 800a34c:	2309      	movs	r3, #9
 800a34e:	6003      	str	r3, [r0, #0]
 800a350:	f04f 30ff 	mov.w	r0, #4294967295
 800a354:	bd70      	pop	{r4, r5, r6, pc}
 800a356:	6800      	ldr	r0, [r0, #0]
 800a358:	4622      	mov	r2, r4
 800a35a:	4631      	mov	r1, r6
 800a35c:	f7ff ffdd 	bl	800a31a <_swiread>
 800a360:	1c43      	adds	r3, r0, #1
 800a362:	d0f5      	beq.n	800a350 <_read+0x16>
 800a364:	686b      	ldr	r3, [r5, #4]
 800a366:	1a20      	subs	r0, r4, r0
 800a368:	4403      	add	r3, r0
 800a36a:	606b      	str	r3, [r5, #4]
 800a36c:	e7f2      	b.n	800a354 <_read+0x1a>

0800a36e <_swilseek>:
 800a36e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a370:	460c      	mov	r4, r1
 800a372:	4616      	mov	r6, r2
 800a374:	f7ff ffa4 	bl	800a2c0 <findslot>
 800a378:	4605      	mov	r5, r0
 800a37a:	b940      	cbnz	r0, 800a38e <_swilseek+0x20>
 800a37c:	f002 ff02 	bl	800d184 <__errno>
 800a380:	2309      	movs	r3, #9
 800a382:	6003      	str	r3, [r0, #0]
 800a384:	f04f 34ff 	mov.w	r4, #4294967295
 800a388:	4620      	mov	r0, r4
 800a38a:	b003      	add	sp, #12
 800a38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a38e:	2e02      	cmp	r6, #2
 800a390:	d903      	bls.n	800a39a <_swilseek+0x2c>
 800a392:	f002 fef7 	bl	800d184 <__errno>
 800a396:	2316      	movs	r3, #22
 800a398:	e7f3      	b.n	800a382 <_swilseek+0x14>
 800a39a:	2e01      	cmp	r6, #1
 800a39c:	d112      	bne.n	800a3c4 <_swilseek+0x56>
 800a39e:	6843      	ldr	r3, [r0, #4]
 800a3a0:	18e4      	adds	r4, r4, r3
 800a3a2:	d4f6      	bmi.n	800a392 <_swilseek+0x24>
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	260a      	movs	r6, #10
 800a3a8:	e9cd 3400 	strd	r3, r4, [sp]
 800a3ac:	466f      	mov	r7, sp
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	4639      	mov	r1, r7
 800a3b2:	beab      	bkpt	0x00ab
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	f7ff ffaa 	bl	800a310 <checkerror>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	dbe1      	blt.n	800a384 <_swilseek+0x16>
 800a3c0:	606c      	str	r4, [r5, #4]
 800a3c2:	e7e1      	b.n	800a388 <_swilseek+0x1a>
 800a3c4:	2e02      	cmp	r6, #2
 800a3c6:	6803      	ldr	r3, [r0, #0]
 800a3c8:	d1ec      	bne.n	800a3a4 <_swilseek+0x36>
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	260c      	movs	r6, #12
 800a3ce:	466f      	mov	r7, sp
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	beab      	bkpt	0x00ab
 800a3d6:	4606      	mov	r6, r0
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f7ff ff99 	bl	800a310 <checkerror>
 800a3de:	1c43      	adds	r3, r0, #1
 800a3e0:	d0d0      	beq.n	800a384 <_swilseek+0x16>
 800a3e2:	4404      	add	r4, r0
 800a3e4:	e7de      	b.n	800a3a4 <_swilseek+0x36>

0800a3e6 <_lseek>:
 800a3e6:	f7ff bfc2 	b.w	800a36e <_swilseek>

0800a3ea <_swiwrite>:
 800a3ea:	b530      	push	{r4, r5, lr}
 800a3ec:	b085      	sub	sp, #20
 800a3ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800a3f2:	9203      	str	r2, [sp, #12]
 800a3f4:	2405      	movs	r4, #5
 800a3f6:	ad01      	add	r5, sp, #4
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	4629      	mov	r1, r5
 800a3fc:	beab      	bkpt	0x00ab
 800a3fe:	4604      	mov	r4, r0
 800a400:	4620      	mov	r0, r4
 800a402:	f7ff ff85 	bl	800a310 <checkerror>
 800a406:	b005      	add	sp, #20
 800a408:	bd30      	pop	{r4, r5, pc}

0800a40a <_write>:
 800a40a:	b570      	push	{r4, r5, r6, lr}
 800a40c:	460e      	mov	r6, r1
 800a40e:	4615      	mov	r5, r2
 800a410:	f7ff ff56 	bl	800a2c0 <findslot>
 800a414:	4604      	mov	r4, r0
 800a416:	b930      	cbnz	r0, 800a426 <_write+0x1c>
 800a418:	f002 feb4 	bl	800d184 <__errno>
 800a41c:	2309      	movs	r3, #9
 800a41e:	6003      	str	r3, [r0, #0]
 800a420:	f04f 30ff 	mov.w	r0, #4294967295
 800a424:	bd70      	pop	{r4, r5, r6, pc}
 800a426:	6800      	ldr	r0, [r0, #0]
 800a428:	462a      	mov	r2, r5
 800a42a:	4631      	mov	r1, r6
 800a42c:	f7ff ffdd 	bl	800a3ea <_swiwrite>
 800a430:	1e03      	subs	r3, r0, #0
 800a432:	dbf5      	blt.n	800a420 <_write+0x16>
 800a434:	6862      	ldr	r2, [r4, #4]
 800a436:	1ae8      	subs	r0, r5, r3
 800a438:	4402      	add	r2, r0
 800a43a:	42ab      	cmp	r3, r5
 800a43c:	6062      	str	r2, [r4, #4]
 800a43e:	d1f1      	bne.n	800a424 <_write+0x1a>
 800a440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a444:	2000      	movs	r0, #0
 800a446:	f7ff bf55 	b.w	800a2f4 <error>

0800a44a <_swiclose>:
 800a44a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a44c:	2402      	movs	r4, #2
 800a44e:	9001      	str	r0, [sp, #4]
 800a450:	ad01      	add	r5, sp, #4
 800a452:	4620      	mov	r0, r4
 800a454:	4629      	mov	r1, r5
 800a456:	beab      	bkpt	0x00ab
 800a458:	4604      	mov	r4, r0
 800a45a:	4620      	mov	r0, r4
 800a45c:	f7ff ff58 	bl	800a310 <checkerror>
 800a460:	b003      	add	sp, #12
 800a462:	bd30      	pop	{r4, r5, pc}

0800a464 <_close>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	4605      	mov	r5, r0
 800a468:	f7ff ff2a 	bl	800a2c0 <findslot>
 800a46c:	4604      	mov	r4, r0
 800a46e:	b930      	cbnz	r0, 800a47e <_close+0x1a>
 800a470:	f002 fe88 	bl	800d184 <__errno>
 800a474:	2309      	movs	r3, #9
 800a476:	6003      	str	r3, [r0, #0]
 800a478:	f04f 30ff 	mov.w	r0, #4294967295
 800a47c:	bd38      	pop	{r3, r4, r5, pc}
 800a47e:	3d01      	subs	r5, #1
 800a480:	2d01      	cmp	r5, #1
 800a482:	d809      	bhi.n	800a498 <_close+0x34>
 800a484:	4b07      	ldr	r3, [pc, #28]	@ (800a4a4 <_close+0x40>)
 800a486:	689a      	ldr	r2, [r3, #8]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d104      	bne.n	800a498 <_close+0x34>
 800a48e:	f04f 33ff 	mov.w	r3, #4294967295
 800a492:	6023      	str	r3, [r4, #0]
 800a494:	2000      	movs	r0, #0
 800a496:	e7f1      	b.n	800a47c <_close+0x18>
 800a498:	6820      	ldr	r0, [r4, #0]
 800a49a:	f7ff ffd6 	bl	800a44a <_swiclose>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d0f5      	beq.n	800a48e <_close+0x2a>
 800a4a2:	e7eb      	b.n	800a47c <_close+0x18>
 800a4a4:	20003738 	.word	0x20003738

0800a4a8 <_getpid>:
 800a4a8:	2001      	movs	r0, #1
 800a4aa:	4770      	bx	lr

0800a4ac <_swistat>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	f7ff ff06 	bl	800a2c0 <findslot>
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	b930      	cbnz	r0, 800a4c6 <_swistat+0x1a>
 800a4b8:	f002 fe64 	bl	800d184 <__errno>
 800a4bc:	2309      	movs	r3, #9
 800a4be:	6003      	str	r3, [r0, #0]
 800a4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c4:	bd70      	pop	{r4, r5, r6, pc}
 800a4c6:	6863      	ldr	r3, [r4, #4]
 800a4c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a4cc:	6063      	str	r3, [r4, #4]
 800a4ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4d2:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a4d4:	260c      	movs	r6, #12
 800a4d6:	4630      	mov	r0, r6
 800a4d8:	4629      	mov	r1, r5
 800a4da:	beab      	bkpt	0x00ab
 800a4dc:	4605      	mov	r5, r0
 800a4de:	4628      	mov	r0, r5
 800a4e0:	f7ff ff16 	bl	800a310 <checkerror>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d0eb      	beq.n	800a4c0 <_swistat+0x14>
 800a4e8:	6120      	str	r0, [r4, #16]
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	e7ea      	b.n	800a4c4 <_swistat+0x18>

0800a4ee <_fstat>:
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	b510      	push	{r4, lr}
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	2258      	movs	r2, #88	@ 0x58
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f002 fb88 	bl	800cc0e <memset>
 800a4fe:	4601      	mov	r1, r0
 800a500:	4620      	mov	r0, r4
 800a502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a506:	f7ff bfd1 	b.w	800a4ac <_swistat>

0800a50a <_stat>:
 800a50a:	b538      	push	{r3, r4, r5, lr}
 800a50c:	460d      	mov	r5, r1
 800a50e:	4604      	mov	r4, r0
 800a510:	2258      	movs	r2, #88	@ 0x58
 800a512:	2100      	movs	r1, #0
 800a514:	4628      	mov	r0, r5
 800a516:	f002 fb7a 	bl	800cc0e <memset>
 800a51a:	4620      	mov	r0, r4
 800a51c:	2100      	movs	r1, #0
 800a51e:	f000 f811 	bl	800a544 <_swiopen>
 800a522:	1c43      	adds	r3, r0, #1
 800a524:	4604      	mov	r4, r0
 800a526:	d00b      	beq.n	800a540 <_stat+0x36>
 800a528:	686b      	ldr	r3, [r5, #4]
 800a52a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a52e:	606b      	str	r3, [r5, #4]
 800a530:	4629      	mov	r1, r5
 800a532:	f7ff ffbb 	bl	800a4ac <_swistat>
 800a536:	4605      	mov	r5, r0
 800a538:	4620      	mov	r0, r4
 800a53a:	f7ff ff93 	bl	800a464 <_close>
 800a53e:	462c      	mov	r4, r5
 800a540:	4620      	mov	r0, r4
 800a542:	bd38      	pop	{r3, r4, r5, pc}

0800a544 <_swiopen>:
 800a544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a548:	4f29      	ldr	r7, [pc, #164]	@ (800a5f0 <_swiopen+0xac>)
 800a54a:	b096      	sub	sp, #88	@ 0x58
 800a54c:	4682      	mov	sl, r0
 800a54e:	460e      	mov	r6, r1
 800a550:	2400      	movs	r4, #0
 800a552:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800a556:	3301      	adds	r3, #1
 800a558:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800a55c:	d00c      	beq.n	800a578 <_swiopen+0x34>
 800a55e:	3401      	adds	r4, #1
 800a560:	2c14      	cmp	r4, #20
 800a562:	d1f6      	bne.n	800a552 <_swiopen+0xe>
 800a564:	f002 fe0e 	bl	800d184 <__errno>
 800a568:	2318      	movs	r3, #24
 800a56a:	6003      	str	r3, [r0, #0]
 800a56c:	f04f 34ff 	mov.w	r4, #4294967295
 800a570:	4620      	mov	r0, r4
 800a572:	b016      	add	sp, #88	@ 0x58
 800a574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a578:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800a57c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a580:	46e9      	mov	r9, sp
 800a582:	d109      	bne.n	800a598 <_swiopen+0x54>
 800a584:	4649      	mov	r1, r9
 800a586:	4650      	mov	r0, sl
 800a588:	f7ff ffbf 	bl	800a50a <_stat>
 800a58c:	3001      	adds	r0, #1
 800a58e:	d003      	beq.n	800a598 <_swiopen+0x54>
 800a590:	f002 fdf8 	bl	800d184 <__errno>
 800a594:	2311      	movs	r3, #17
 800a596:	e7e8      	b.n	800a56a <_swiopen+0x26>
 800a598:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800a59c:	f240 6301 	movw	r3, #1537	@ 0x601
 800a5a0:	07b2      	lsls	r2, r6, #30
 800a5a2:	bf48      	it	mi
 800a5a4:	f045 0502 	orrmi.w	r5, r5, #2
 800a5a8:	421e      	tst	r6, r3
 800a5aa:	bf18      	it	ne
 800a5ac:	f045 0504 	orrne.w	r5, r5, #4
 800a5b0:	0733      	lsls	r3, r6, #28
 800a5b2:	bf48      	it	mi
 800a5b4:	f025 0504 	bicmi.w	r5, r5, #4
 800a5b8:	4650      	mov	r0, sl
 800a5ba:	bf48      	it	mi
 800a5bc:	f045 0508 	orrmi.w	r5, r5, #8
 800a5c0:	f8cd a000 	str.w	sl, [sp]
 800a5c4:	f7f5 fe74 	bl	80002b0 <strlen>
 800a5c8:	e9cd 5001 	strd	r5, r0, [sp, #4]
 800a5cc:	2501      	movs	r5, #1
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	4649      	mov	r1, r9
 800a5d2:	beab      	bkpt	0x00ab
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	2d00      	cmp	r5, #0
 800a5d8:	db05      	blt.n	800a5e6 <_swiopen+0xa2>
 800a5da:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800a5de:	4447      	add	r7, r8
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	607b      	str	r3, [r7, #4]
 800a5e4:	e7c4      	b.n	800a570 <_swiopen+0x2c>
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f7ff fe84 	bl	800a2f4 <error>
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	e7bf      	b.n	800a570 <_swiopen+0x2c>
 800a5f0:	20003738 	.word	0x20003738

0800a5f4 <_open>:
 800a5f4:	b40e      	push	{r1, r2, r3}
 800a5f6:	b500      	push	{lr}
 800a5f8:	9901      	ldr	r1, [sp, #4]
 800a5fa:	f7ff ffa3 	bl	800a544 <_swiopen>
 800a5fe:	f85d eb04 	ldr.w	lr, [sp], #4
 800a602:	b003      	add	sp, #12
 800a604:	4770      	bx	lr

0800a606 <_isatty>:
 800a606:	b570      	push	{r4, r5, r6, lr}
 800a608:	f7ff fe5a 	bl	800a2c0 <findslot>
 800a60c:	2409      	movs	r4, #9
 800a60e:	4605      	mov	r5, r0
 800a610:	b920      	cbnz	r0, 800a61c <_isatty+0x16>
 800a612:	f002 fdb7 	bl	800d184 <__errno>
 800a616:	6004      	str	r4, [r0, #0]
 800a618:	2000      	movs	r0, #0
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	4620      	mov	r0, r4
 800a61e:	4629      	mov	r1, r5
 800a620:	beab      	bkpt	0x00ab
 800a622:	4604      	mov	r4, r0
 800a624:	2c01      	cmp	r4, #1
 800a626:	4620      	mov	r0, r4
 800a628:	d0f7      	beq.n	800a61a <_isatty+0x14>
 800a62a:	f002 fdab 	bl	800d184 <__errno>
 800a62e:	2513      	movs	r5, #19
 800a630:	4604      	mov	r4, r0
 800a632:	2600      	movs	r6, #0
 800a634:	4628      	mov	r0, r5
 800a636:	4631      	mov	r1, r6
 800a638:	beab      	bkpt	0x00ab
 800a63a:	4605      	mov	r5, r0
 800a63c:	6025      	str	r5, [r4, #0]
 800a63e:	e7eb      	b.n	800a618 <_isatty+0x12>

0800a640 <sulp>:
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	4604      	mov	r4, r0
 800a644:	460d      	mov	r5, r1
 800a646:	ec45 4b10 	vmov	d0, r4, r5
 800a64a:	4616      	mov	r6, r2
 800a64c:	f004 fc10 	bl	800ee70 <__ulp>
 800a650:	ec51 0b10 	vmov	r0, r1, d0
 800a654:	b17e      	cbz	r6, 800a676 <sulp+0x36>
 800a656:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a65a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a65e:	2b00      	cmp	r3, #0
 800a660:	dd09      	ble.n	800a676 <sulp+0x36>
 800a662:	051b      	lsls	r3, r3, #20
 800a664:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a668:	2400      	movs	r4, #0
 800a66a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a66e:	4622      	mov	r2, r4
 800a670:	462b      	mov	r3, r5
 800a672:	f7f5 ffe1 	bl	8000638 <__aeabi_dmul>
 800a676:	ec41 0b10 	vmov	d0, r0, r1
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	0000      	movs	r0, r0
	...

0800a680 <_strtod_l>:
 800a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	b09f      	sub	sp, #124	@ 0x7c
 800a686:	460c      	mov	r4, r1
 800a688:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a68a:	2200      	movs	r2, #0
 800a68c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a68e:	9005      	str	r0, [sp, #20]
 800a690:	f04f 0a00 	mov.w	sl, #0
 800a694:	f04f 0b00 	mov.w	fp, #0
 800a698:	460a      	mov	r2, r1
 800a69a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a69c:	7811      	ldrb	r1, [r2, #0]
 800a69e:	292b      	cmp	r1, #43	@ 0x2b
 800a6a0:	d04a      	beq.n	800a738 <_strtod_l+0xb8>
 800a6a2:	d838      	bhi.n	800a716 <_strtod_l+0x96>
 800a6a4:	290d      	cmp	r1, #13
 800a6a6:	d832      	bhi.n	800a70e <_strtod_l+0x8e>
 800a6a8:	2908      	cmp	r1, #8
 800a6aa:	d832      	bhi.n	800a712 <_strtod_l+0x92>
 800a6ac:	2900      	cmp	r1, #0
 800a6ae:	d03b      	beq.n	800a728 <_strtod_l+0xa8>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a6b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a6b6:	782a      	ldrb	r2, [r5, #0]
 800a6b8:	2a30      	cmp	r2, #48	@ 0x30
 800a6ba:	f040 80b3 	bne.w	800a824 <_strtod_l+0x1a4>
 800a6be:	786a      	ldrb	r2, [r5, #1]
 800a6c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a6c4:	2a58      	cmp	r2, #88	@ 0x58
 800a6c6:	d16e      	bne.n	800a7a6 <_strtod_l+0x126>
 800a6c8:	9302      	str	r3, [sp, #8]
 800a6ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	4a8e      	ldr	r2, [pc, #568]	@ (800a90c <_strtod_l+0x28c>)
 800a6d4:	9805      	ldr	r0, [sp, #20]
 800a6d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a6d8:	a919      	add	r1, sp, #100	@ 0x64
 800a6da:	f003 fcbb 	bl	800e054 <__gethex>
 800a6de:	f010 060f 	ands.w	r6, r0, #15
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	d005      	beq.n	800a6f2 <_strtod_l+0x72>
 800a6e6:	2e06      	cmp	r6, #6
 800a6e8:	d128      	bne.n	800a73c <_strtod_l+0xbc>
 800a6ea:	3501      	adds	r5, #1
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800a6f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f040 858e 	bne.w	800b216 <_strtod_l+0xb96>
 800a6fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6fc:	b1cb      	cbz	r3, 800a732 <_strtod_l+0xb2>
 800a6fe:	4652      	mov	r2, sl
 800a700:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a704:	ec43 2b10 	vmov	d0, r2, r3
 800a708:	b01f      	add	sp, #124	@ 0x7c
 800a70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70e:	2920      	cmp	r1, #32
 800a710:	d1ce      	bne.n	800a6b0 <_strtod_l+0x30>
 800a712:	3201      	adds	r2, #1
 800a714:	e7c1      	b.n	800a69a <_strtod_l+0x1a>
 800a716:	292d      	cmp	r1, #45	@ 0x2d
 800a718:	d1ca      	bne.n	800a6b0 <_strtod_l+0x30>
 800a71a:	2101      	movs	r1, #1
 800a71c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a71e:	1c51      	adds	r1, r2, #1
 800a720:	9119      	str	r1, [sp, #100]	@ 0x64
 800a722:	7852      	ldrb	r2, [r2, #1]
 800a724:	2a00      	cmp	r2, #0
 800a726:	d1c5      	bne.n	800a6b4 <_strtod_l+0x34>
 800a728:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a72a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f040 8570 	bne.w	800b212 <_strtod_l+0xb92>
 800a732:	4652      	mov	r2, sl
 800a734:	465b      	mov	r3, fp
 800a736:	e7e5      	b.n	800a704 <_strtod_l+0x84>
 800a738:	2100      	movs	r1, #0
 800a73a:	e7ef      	b.n	800a71c <_strtod_l+0x9c>
 800a73c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a73e:	b13a      	cbz	r2, 800a750 <_strtod_l+0xd0>
 800a740:	2135      	movs	r1, #53	@ 0x35
 800a742:	a81c      	add	r0, sp, #112	@ 0x70
 800a744:	f004 fc8e 	bl	800f064 <__copybits>
 800a748:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a74a:	9805      	ldr	r0, [sp, #20]
 800a74c:	f004 f85c 	bl	800e808 <_Bfree>
 800a750:	3e01      	subs	r6, #1
 800a752:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a754:	2e04      	cmp	r6, #4
 800a756:	d806      	bhi.n	800a766 <_strtod_l+0xe6>
 800a758:	e8df f006 	tbb	[pc, r6]
 800a75c:	201d0314 	.word	0x201d0314
 800a760:	14          	.byte	0x14
 800a761:	00          	.byte	0x00
 800a762:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a766:	05e1      	lsls	r1, r4, #23
 800a768:	bf48      	it	mi
 800a76a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a76e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a772:	0d1b      	lsrs	r3, r3, #20
 800a774:	051b      	lsls	r3, r3, #20
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1bb      	bne.n	800a6f2 <_strtod_l+0x72>
 800a77a:	f002 fd03 	bl	800d184 <__errno>
 800a77e:	2322      	movs	r3, #34	@ 0x22
 800a780:	6003      	str	r3, [r0, #0]
 800a782:	e7b6      	b.n	800a6f2 <_strtod_l+0x72>
 800a784:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a788:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a78c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a790:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a794:	e7e7      	b.n	800a766 <_strtod_l+0xe6>
 800a796:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a914 <_strtod_l+0x294>
 800a79a:	e7e4      	b.n	800a766 <_strtod_l+0xe6>
 800a79c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a7a0:	f04f 3aff 	mov.w	sl, #4294967295
 800a7a4:	e7df      	b.n	800a766 <_strtod_l+0xe6>
 800a7a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7a8:	1c5a      	adds	r2, r3, #1
 800a7aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a7ac:	785b      	ldrb	r3, [r3, #1]
 800a7ae:	2b30      	cmp	r3, #48	@ 0x30
 800a7b0:	d0f9      	beq.n	800a7a6 <_strtod_l+0x126>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d09d      	beq.n	800a6f2 <_strtod_l+0x72>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7be:	2300      	movs	r3, #0
 800a7c0:	9308      	str	r3, [sp, #32]
 800a7c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7c4:	461f      	mov	r7, r3
 800a7c6:	220a      	movs	r2, #10
 800a7c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a7ca:	7805      	ldrb	r5, [r0, #0]
 800a7cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a7d0:	b2d9      	uxtb	r1, r3
 800a7d2:	2909      	cmp	r1, #9
 800a7d4:	d928      	bls.n	800a828 <_strtod_l+0x1a8>
 800a7d6:	494e      	ldr	r1, [pc, #312]	@ (800a910 <_strtod_l+0x290>)
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f002 fc07 	bl	800cfec <strncmp>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d032      	beq.n	800a848 <_strtod_l+0x1c8>
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	462a      	mov	r2, r5
 800a7e6:	4681      	mov	r9, r0
 800a7e8:	463d      	mov	r5, r7
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2a65      	cmp	r2, #101	@ 0x65
 800a7ee:	d001      	beq.n	800a7f4 <_strtod_l+0x174>
 800a7f0:	2a45      	cmp	r2, #69	@ 0x45
 800a7f2:	d114      	bne.n	800a81e <_strtod_l+0x19e>
 800a7f4:	b91d      	cbnz	r5, 800a7fe <_strtod_l+0x17e>
 800a7f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7f8:	4302      	orrs	r2, r0
 800a7fa:	d095      	beq.n	800a728 <_strtod_l+0xa8>
 800a7fc:	2500      	movs	r5, #0
 800a7fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a800:	1c62      	adds	r2, r4, #1
 800a802:	9219      	str	r2, [sp, #100]	@ 0x64
 800a804:	7862      	ldrb	r2, [r4, #1]
 800a806:	2a2b      	cmp	r2, #43	@ 0x2b
 800a808:	d077      	beq.n	800a8fa <_strtod_l+0x27a>
 800a80a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a80c:	d07b      	beq.n	800a906 <_strtod_l+0x286>
 800a80e:	f04f 0c00 	mov.w	ip, #0
 800a812:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a816:	2909      	cmp	r1, #9
 800a818:	f240 8082 	bls.w	800a920 <_strtod_l+0x2a0>
 800a81c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a81e:	f04f 0800 	mov.w	r8, #0
 800a822:	e0a2      	b.n	800a96a <_strtod_l+0x2ea>
 800a824:	2300      	movs	r3, #0
 800a826:	e7c7      	b.n	800a7b8 <_strtod_l+0x138>
 800a828:	2f08      	cmp	r7, #8
 800a82a:	bfd5      	itete	le
 800a82c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a82e:	9908      	ldrgt	r1, [sp, #32]
 800a830:	fb02 3301 	mlale	r3, r2, r1, r3
 800a834:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a838:	f100 0001 	add.w	r0, r0, #1
 800a83c:	bfd4      	ite	le
 800a83e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a840:	9308      	strgt	r3, [sp, #32]
 800a842:	3701      	adds	r7, #1
 800a844:	9019      	str	r0, [sp, #100]	@ 0x64
 800a846:	e7bf      	b.n	800a7c8 <_strtod_l+0x148>
 800a848:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a84e:	785a      	ldrb	r2, [r3, #1]
 800a850:	b37f      	cbz	r7, 800a8b2 <_strtod_l+0x232>
 800a852:	4681      	mov	r9, r0
 800a854:	463d      	mov	r5, r7
 800a856:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a85a:	2b09      	cmp	r3, #9
 800a85c:	d912      	bls.n	800a884 <_strtod_l+0x204>
 800a85e:	2301      	movs	r3, #1
 800a860:	e7c4      	b.n	800a7ec <_strtod_l+0x16c>
 800a862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a864:	1c5a      	adds	r2, r3, #1
 800a866:	9219      	str	r2, [sp, #100]	@ 0x64
 800a868:	785a      	ldrb	r2, [r3, #1]
 800a86a:	3001      	adds	r0, #1
 800a86c:	2a30      	cmp	r2, #48	@ 0x30
 800a86e:	d0f8      	beq.n	800a862 <_strtod_l+0x1e2>
 800a870:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a874:	2b08      	cmp	r3, #8
 800a876:	f200 84d3 	bhi.w	800b220 <_strtod_l+0xba0>
 800a87a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a87c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a87e:	4681      	mov	r9, r0
 800a880:	2000      	movs	r0, #0
 800a882:	4605      	mov	r5, r0
 800a884:	3a30      	subs	r2, #48	@ 0x30
 800a886:	f100 0301 	add.w	r3, r0, #1
 800a88a:	d02a      	beq.n	800a8e2 <_strtod_l+0x262>
 800a88c:	4499      	add	r9, r3
 800a88e:	eb00 0c05 	add.w	ip, r0, r5
 800a892:	462b      	mov	r3, r5
 800a894:	210a      	movs	r1, #10
 800a896:	4563      	cmp	r3, ip
 800a898:	d10d      	bne.n	800a8b6 <_strtod_l+0x236>
 800a89a:	1c69      	adds	r1, r5, #1
 800a89c:	4401      	add	r1, r0
 800a89e:	4428      	add	r0, r5
 800a8a0:	2808      	cmp	r0, #8
 800a8a2:	dc16      	bgt.n	800a8d2 <_strtod_l+0x252>
 800a8a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a8a6:	230a      	movs	r3, #10
 800a8a8:	fb03 2300 	mla	r3, r3, r0, r2
 800a8ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	e018      	b.n	800a8e4 <_strtod_l+0x264>
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	e7da      	b.n	800a86c <_strtod_l+0x1ec>
 800a8b6:	2b08      	cmp	r3, #8
 800a8b8:	f103 0301 	add.w	r3, r3, #1
 800a8bc:	dc03      	bgt.n	800a8c6 <_strtod_l+0x246>
 800a8be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a8c0:	434e      	muls	r6, r1
 800a8c2:	960a      	str	r6, [sp, #40]	@ 0x28
 800a8c4:	e7e7      	b.n	800a896 <_strtod_l+0x216>
 800a8c6:	2b10      	cmp	r3, #16
 800a8c8:	bfde      	ittt	le
 800a8ca:	9e08      	ldrle	r6, [sp, #32]
 800a8cc:	434e      	mulle	r6, r1
 800a8ce:	9608      	strle	r6, [sp, #32]
 800a8d0:	e7e1      	b.n	800a896 <_strtod_l+0x216>
 800a8d2:	280f      	cmp	r0, #15
 800a8d4:	dceb      	bgt.n	800a8ae <_strtod_l+0x22e>
 800a8d6:	9808      	ldr	r0, [sp, #32]
 800a8d8:	230a      	movs	r3, #10
 800a8da:	fb03 2300 	mla	r3, r3, r0, r2
 800a8de:	9308      	str	r3, [sp, #32]
 800a8e0:	e7e5      	b.n	800a8ae <_strtod_l+0x22e>
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a8e6:	1c50      	adds	r0, r2, #1
 800a8e8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a8ea:	7852      	ldrb	r2, [r2, #1]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	e7b1      	b.n	800a856 <_strtod_l+0x1d6>
 800a8f2:	f04f 0900 	mov.w	r9, #0
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e77d      	b.n	800a7f6 <_strtod_l+0x176>
 800a8fa:	f04f 0c00 	mov.w	ip, #0
 800a8fe:	1ca2      	adds	r2, r4, #2
 800a900:	9219      	str	r2, [sp, #100]	@ 0x64
 800a902:	78a2      	ldrb	r2, [r4, #2]
 800a904:	e785      	b.n	800a812 <_strtod_l+0x192>
 800a906:	f04f 0c01 	mov.w	ip, #1
 800a90a:	e7f8      	b.n	800a8fe <_strtod_l+0x27e>
 800a90c:	080108e4 	.word	0x080108e4
 800a910:	080108cc 	.word	0x080108cc
 800a914:	7ff00000 	.word	0x7ff00000
 800a918:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a91a:	1c51      	adds	r1, r2, #1
 800a91c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a91e:	7852      	ldrb	r2, [r2, #1]
 800a920:	2a30      	cmp	r2, #48	@ 0x30
 800a922:	d0f9      	beq.n	800a918 <_strtod_l+0x298>
 800a924:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a928:	2908      	cmp	r1, #8
 800a92a:	f63f af78 	bhi.w	800a81e <_strtod_l+0x19e>
 800a92e:	3a30      	subs	r2, #48	@ 0x30
 800a930:	920e      	str	r2, [sp, #56]	@ 0x38
 800a932:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a934:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a936:	f04f 080a 	mov.w	r8, #10
 800a93a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a93c:	1c56      	adds	r6, r2, #1
 800a93e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a940:	7852      	ldrb	r2, [r2, #1]
 800a942:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a946:	f1be 0f09 	cmp.w	lr, #9
 800a94a:	d939      	bls.n	800a9c0 <_strtod_l+0x340>
 800a94c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a94e:	1a76      	subs	r6, r6, r1
 800a950:	2e08      	cmp	r6, #8
 800a952:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a956:	dc03      	bgt.n	800a960 <_strtod_l+0x2e0>
 800a958:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a95a:	4588      	cmp	r8, r1
 800a95c:	bfa8      	it	ge
 800a95e:	4688      	movge	r8, r1
 800a960:	f1bc 0f00 	cmp.w	ip, #0
 800a964:	d001      	beq.n	800a96a <_strtod_l+0x2ea>
 800a966:	f1c8 0800 	rsb	r8, r8, #0
 800a96a:	2d00      	cmp	r5, #0
 800a96c:	d14e      	bne.n	800aa0c <_strtod_l+0x38c>
 800a96e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a970:	4308      	orrs	r0, r1
 800a972:	f47f aebe 	bne.w	800a6f2 <_strtod_l+0x72>
 800a976:	2b00      	cmp	r3, #0
 800a978:	f47f aed6 	bne.w	800a728 <_strtod_l+0xa8>
 800a97c:	2a69      	cmp	r2, #105	@ 0x69
 800a97e:	d028      	beq.n	800a9d2 <_strtod_l+0x352>
 800a980:	dc25      	bgt.n	800a9ce <_strtod_l+0x34e>
 800a982:	2a49      	cmp	r2, #73	@ 0x49
 800a984:	d025      	beq.n	800a9d2 <_strtod_l+0x352>
 800a986:	2a4e      	cmp	r2, #78	@ 0x4e
 800a988:	f47f aece 	bne.w	800a728 <_strtod_l+0xa8>
 800a98c:	499b      	ldr	r1, [pc, #620]	@ (800abfc <_strtod_l+0x57c>)
 800a98e:	a819      	add	r0, sp, #100	@ 0x64
 800a990:	f003 fd82 	bl	800e498 <__match>
 800a994:	2800      	cmp	r0, #0
 800a996:	f43f aec7 	beq.w	800a728 <_strtod_l+0xa8>
 800a99a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	2b28      	cmp	r3, #40	@ 0x28
 800a9a0:	d12e      	bne.n	800aa00 <_strtod_l+0x380>
 800a9a2:	4997      	ldr	r1, [pc, #604]	@ (800ac00 <_strtod_l+0x580>)
 800a9a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a9a6:	a819      	add	r0, sp, #100	@ 0x64
 800a9a8:	f003 fd8a 	bl	800e4c0 <__hexnan>
 800a9ac:	2805      	cmp	r0, #5
 800a9ae:	d127      	bne.n	800aa00 <_strtod_l+0x380>
 800a9b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a9b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a9b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a9ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a9be:	e698      	b.n	800a6f2 <_strtod_l+0x72>
 800a9c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a9c2:	fb08 2101 	mla	r1, r8, r1, r2
 800a9c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a9ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9cc:	e7b5      	b.n	800a93a <_strtod_l+0x2ba>
 800a9ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800a9d0:	e7da      	b.n	800a988 <_strtod_l+0x308>
 800a9d2:	498c      	ldr	r1, [pc, #560]	@ (800ac04 <_strtod_l+0x584>)
 800a9d4:	a819      	add	r0, sp, #100	@ 0x64
 800a9d6:	f003 fd5f 	bl	800e498 <__match>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	f43f aea4 	beq.w	800a728 <_strtod_l+0xa8>
 800a9e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9e2:	4989      	ldr	r1, [pc, #548]	@ (800ac08 <_strtod_l+0x588>)
 800a9e4:	3b01      	subs	r3, #1
 800a9e6:	a819      	add	r0, sp, #100	@ 0x64
 800a9e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9ea:	f003 fd55 	bl	800e498 <__match>
 800a9ee:	b910      	cbnz	r0, 800a9f6 <_strtod_l+0x376>
 800a9f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a9f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ac18 <_strtod_l+0x598>
 800a9fa:	f04f 0a00 	mov.w	sl, #0
 800a9fe:	e678      	b.n	800a6f2 <_strtod_l+0x72>
 800aa00:	4882      	ldr	r0, [pc, #520]	@ (800ac0c <_strtod_l+0x58c>)
 800aa02:	f002 fbfd 	bl	800d200 <nan>
 800aa06:	ec5b ab10 	vmov	sl, fp, d0
 800aa0a:	e672      	b.n	800a6f2 <_strtod_l+0x72>
 800aa0c:	eba8 0309 	sub.w	r3, r8, r9
 800aa10:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa12:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa14:	2f00      	cmp	r7, #0
 800aa16:	bf08      	it	eq
 800aa18:	462f      	moveq	r7, r5
 800aa1a:	2d10      	cmp	r5, #16
 800aa1c:	462c      	mov	r4, r5
 800aa1e:	bfa8      	it	ge
 800aa20:	2410      	movge	r4, #16
 800aa22:	f7f5 fd8f 	bl	8000544 <__aeabi_ui2d>
 800aa26:	2d09      	cmp	r5, #9
 800aa28:	4682      	mov	sl, r0
 800aa2a:	468b      	mov	fp, r1
 800aa2c:	dc13      	bgt.n	800aa56 <_strtod_l+0x3d6>
 800aa2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	f43f ae5e 	beq.w	800a6f2 <_strtod_l+0x72>
 800aa36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa38:	dd78      	ble.n	800ab2c <_strtod_l+0x4ac>
 800aa3a:	2b16      	cmp	r3, #22
 800aa3c:	dc5f      	bgt.n	800aafe <_strtod_l+0x47e>
 800aa3e:	4974      	ldr	r1, [pc, #464]	@ (800ac10 <_strtod_l+0x590>)
 800aa40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa48:	4652      	mov	r2, sl
 800aa4a:	465b      	mov	r3, fp
 800aa4c:	f7f5 fdf4 	bl	8000638 <__aeabi_dmul>
 800aa50:	4682      	mov	sl, r0
 800aa52:	468b      	mov	fp, r1
 800aa54:	e64d      	b.n	800a6f2 <_strtod_l+0x72>
 800aa56:	4b6e      	ldr	r3, [pc, #440]	@ (800ac10 <_strtod_l+0x590>)
 800aa58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aa60:	f7f5 fdea 	bl	8000638 <__aeabi_dmul>
 800aa64:	4682      	mov	sl, r0
 800aa66:	9808      	ldr	r0, [sp, #32]
 800aa68:	468b      	mov	fp, r1
 800aa6a:	f7f5 fd6b 	bl	8000544 <__aeabi_ui2d>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	4650      	mov	r0, sl
 800aa74:	4659      	mov	r1, fp
 800aa76:	f7f5 fc29 	bl	80002cc <__adddf3>
 800aa7a:	2d0f      	cmp	r5, #15
 800aa7c:	4682      	mov	sl, r0
 800aa7e:	468b      	mov	fp, r1
 800aa80:	ddd5      	ble.n	800aa2e <_strtod_l+0x3ae>
 800aa82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa84:	1b2c      	subs	r4, r5, r4
 800aa86:	441c      	add	r4, r3
 800aa88:	2c00      	cmp	r4, #0
 800aa8a:	f340 8096 	ble.w	800abba <_strtod_l+0x53a>
 800aa8e:	f014 030f 	ands.w	r3, r4, #15
 800aa92:	d00a      	beq.n	800aaaa <_strtod_l+0x42a>
 800aa94:	495e      	ldr	r1, [pc, #376]	@ (800ac10 <_strtod_l+0x590>)
 800aa96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa9a:	4652      	mov	r2, sl
 800aa9c:	465b      	mov	r3, fp
 800aa9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaa2:	f7f5 fdc9 	bl	8000638 <__aeabi_dmul>
 800aaa6:	4682      	mov	sl, r0
 800aaa8:	468b      	mov	fp, r1
 800aaaa:	f034 040f 	bics.w	r4, r4, #15
 800aaae:	d073      	beq.n	800ab98 <_strtod_l+0x518>
 800aab0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800aab4:	dd48      	ble.n	800ab48 <_strtod_l+0x4c8>
 800aab6:	2400      	movs	r4, #0
 800aab8:	46a0      	mov	r8, r4
 800aaba:	940a      	str	r4, [sp, #40]	@ 0x28
 800aabc:	46a1      	mov	r9, r4
 800aabe:	9a05      	ldr	r2, [sp, #20]
 800aac0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ac18 <_strtod_l+0x598>
 800aac4:	2322      	movs	r3, #34	@ 0x22
 800aac6:	6013      	str	r3, [r2, #0]
 800aac8:	f04f 0a00 	mov.w	sl, #0
 800aacc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f43f ae0f 	beq.w	800a6f2 <_strtod_l+0x72>
 800aad4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aad6:	9805      	ldr	r0, [sp, #20]
 800aad8:	f003 fe96 	bl	800e808 <_Bfree>
 800aadc:	9805      	ldr	r0, [sp, #20]
 800aade:	4649      	mov	r1, r9
 800aae0:	f003 fe92 	bl	800e808 <_Bfree>
 800aae4:	9805      	ldr	r0, [sp, #20]
 800aae6:	4641      	mov	r1, r8
 800aae8:	f003 fe8e 	bl	800e808 <_Bfree>
 800aaec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800aaee:	9805      	ldr	r0, [sp, #20]
 800aaf0:	f003 fe8a 	bl	800e808 <_Bfree>
 800aaf4:	9805      	ldr	r0, [sp, #20]
 800aaf6:	4621      	mov	r1, r4
 800aaf8:	f003 fe86 	bl	800e808 <_Bfree>
 800aafc:	e5f9      	b.n	800a6f2 <_strtod_l+0x72>
 800aafe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ab04:	4293      	cmp	r3, r2
 800ab06:	dbbc      	blt.n	800aa82 <_strtod_l+0x402>
 800ab08:	4c41      	ldr	r4, [pc, #260]	@ (800ac10 <_strtod_l+0x590>)
 800ab0a:	f1c5 050f 	rsb	r5, r5, #15
 800ab0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ab12:	4652      	mov	r2, sl
 800ab14:	465b      	mov	r3, fp
 800ab16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab1a:	f7f5 fd8d 	bl	8000638 <__aeabi_dmul>
 800ab1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab20:	1b5d      	subs	r5, r3, r5
 800ab22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ab26:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab2a:	e78f      	b.n	800aa4c <_strtod_l+0x3cc>
 800ab2c:	3316      	adds	r3, #22
 800ab2e:	dba8      	blt.n	800aa82 <_strtod_l+0x402>
 800ab30:	4b37      	ldr	r3, [pc, #220]	@ (800ac10 <_strtod_l+0x590>)
 800ab32:	eba9 0808 	sub.w	r8, r9, r8
 800ab36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ab3a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ab3e:	4650      	mov	r0, sl
 800ab40:	4659      	mov	r1, fp
 800ab42:	f7f5 fea3 	bl	800088c <__aeabi_ddiv>
 800ab46:	e783      	b.n	800aa50 <_strtod_l+0x3d0>
 800ab48:	4b32      	ldr	r3, [pc, #200]	@ (800ac14 <_strtod_l+0x594>)
 800ab4a:	9308      	str	r3, [sp, #32]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	1124      	asrs	r4, r4, #4
 800ab50:	4650      	mov	r0, sl
 800ab52:	4659      	mov	r1, fp
 800ab54:	461e      	mov	r6, r3
 800ab56:	2c01      	cmp	r4, #1
 800ab58:	dc21      	bgt.n	800ab9e <_strtod_l+0x51e>
 800ab5a:	b10b      	cbz	r3, 800ab60 <_strtod_l+0x4e0>
 800ab5c:	4682      	mov	sl, r0
 800ab5e:	468b      	mov	fp, r1
 800ab60:	492c      	ldr	r1, [pc, #176]	@ (800ac14 <_strtod_l+0x594>)
 800ab62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ab66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ab6a:	4652      	mov	r2, sl
 800ab6c:	465b      	mov	r3, fp
 800ab6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab72:	f7f5 fd61 	bl	8000638 <__aeabi_dmul>
 800ab76:	4b28      	ldr	r3, [pc, #160]	@ (800ac18 <_strtod_l+0x598>)
 800ab78:	460a      	mov	r2, r1
 800ab7a:	400b      	ands	r3, r1
 800ab7c:	4927      	ldr	r1, [pc, #156]	@ (800ac1c <_strtod_l+0x59c>)
 800ab7e:	428b      	cmp	r3, r1
 800ab80:	4682      	mov	sl, r0
 800ab82:	d898      	bhi.n	800aab6 <_strtod_l+0x436>
 800ab84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ab88:	428b      	cmp	r3, r1
 800ab8a:	bf86      	itte	hi
 800ab8c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ac20 <_strtod_l+0x5a0>
 800ab90:	f04f 3aff 	movhi.w	sl, #4294967295
 800ab94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ab98:	2300      	movs	r3, #0
 800ab9a:	9308      	str	r3, [sp, #32]
 800ab9c:	e07a      	b.n	800ac94 <_strtod_l+0x614>
 800ab9e:	07e2      	lsls	r2, r4, #31
 800aba0:	d505      	bpl.n	800abae <_strtod_l+0x52e>
 800aba2:	9b08      	ldr	r3, [sp, #32]
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	f7f5 fd46 	bl	8000638 <__aeabi_dmul>
 800abac:	2301      	movs	r3, #1
 800abae:	9a08      	ldr	r2, [sp, #32]
 800abb0:	3208      	adds	r2, #8
 800abb2:	3601      	adds	r6, #1
 800abb4:	1064      	asrs	r4, r4, #1
 800abb6:	9208      	str	r2, [sp, #32]
 800abb8:	e7cd      	b.n	800ab56 <_strtod_l+0x4d6>
 800abba:	d0ed      	beq.n	800ab98 <_strtod_l+0x518>
 800abbc:	4264      	negs	r4, r4
 800abbe:	f014 020f 	ands.w	r2, r4, #15
 800abc2:	d00a      	beq.n	800abda <_strtod_l+0x55a>
 800abc4:	4b12      	ldr	r3, [pc, #72]	@ (800ac10 <_strtod_l+0x590>)
 800abc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abca:	4650      	mov	r0, sl
 800abcc:	4659      	mov	r1, fp
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f7f5 fe5b 	bl	800088c <__aeabi_ddiv>
 800abd6:	4682      	mov	sl, r0
 800abd8:	468b      	mov	fp, r1
 800abda:	1124      	asrs	r4, r4, #4
 800abdc:	d0dc      	beq.n	800ab98 <_strtod_l+0x518>
 800abde:	2c1f      	cmp	r4, #31
 800abe0:	dd20      	ble.n	800ac24 <_strtod_l+0x5a4>
 800abe2:	2400      	movs	r4, #0
 800abe4:	46a0      	mov	r8, r4
 800abe6:	940a      	str	r4, [sp, #40]	@ 0x28
 800abe8:	46a1      	mov	r9, r4
 800abea:	9a05      	ldr	r2, [sp, #20]
 800abec:	2322      	movs	r3, #34	@ 0x22
 800abee:	f04f 0a00 	mov.w	sl, #0
 800abf2:	f04f 0b00 	mov.w	fp, #0
 800abf6:	6013      	str	r3, [r2, #0]
 800abf8:	e768      	b.n	800aacc <_strtod_l+0x44c>
 800abfa:	bf00      	nop
 800abfc:	0801092d 	.word	0x0801092d
 800ac00:	080108d0 	.word	0x080108d0
 800ac04:	08010925 	.word	0x08010925
 800ac08:	080110a7 	.word	0x080110a7
 800ac0c:	080110a3 	.word	0x080110a3
 800ac10:	08011208 	.word	0x08011208
 800ac14:	080111e0 	.word	0x080111e0
 800ac18:	7ff00000 	.word	0x7ff00000
 800ac1c:	7ca00000 	.word	0x7ca00000
 800ac20:	7fefffff 	.word	0x7fefffff
 800ac24:	f014 0310 	ands.w	r3, r4, #16
 800ac28:	bf18      	it	ne
 800ac2a:	236a      	movne	r3, #106	@ 0x6a
 800ac2c:	4ea9      	ldr	r6, [pc, #676]	@ (800aed4 <_strtod_l+0x854>)
 800ac2e:	9308      	str	r3, [sp, #32]
 800ac30:	4650      	mov	r0, sl
 800ac32:	4659      	mov	r1, fp
 800ac34:	2300      	movs	r3, #0
 800ac36:	07e2      	lsls	r2, r4, #31
 800ac38:	d504      	bpl.n	800ac44 <_strtod_l+0x5c4>
 800ac3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac3e:	f7f5 fcfb 	bl	8000638 <__aeabi_dmul>
 800ac42:	2301      	movs	r3, #1
 800ac44:	1064      	asrs	r4, r4, #1
 800ac46:	f106 0608 	add.w	r6, r6, #8
 800ac4a:	d1f4      	bne.n	800ac36 <_strtod_l+0x5b6>
 800ac4c:	b10b      	cbz	r3, 800ac52 <_strtod_l+0x5d2>
 800ac4e:	4682      	mov	sl, r0
 800ac50:	468b      	mov	fp, r1
 800ac52:	9b08      	ldr	r3, [sp, #32]
 800ac54:	b1b3      	cbz	r3, 800ac84 <_strtod_l+0x604>
 800ac56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ac5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	4659      	mov	r1, fp
 800ac62:	dd0f      	ble.n	800ac84 <_strtod_l+0x604>
 800ac64:	2b1f      	cmp	r3, #31
 800ac66:	dd55      	ble.n	800ad14 <_strtod_l+0x694>
 800ac68:	2b34      	cmp	r3, #52	@ 0x34
 800ac6a:	bfde      	ittt	le
 800ac6c:	f04f 33ff 	movle.w	r3, #4294967295
 800ac70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ac74:	4093      	lslle	r3, r2
 800ac76:	f04f 0a00 	mov.w	sl, #0
 800ac7a:	bfcc      	ite	gt
 800ac7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ac80:	ea03 0b01 	andle.w	fp, r3, r1
 800ac84:	2200      	movs	r2, #0
 800ac86:	2300      	movs	r3, #0
 800ac88:	4650      	mov	r0, sl
 800ac8a:	4659      	mov	r1, fp
 800ac8c:	f7f5 ff3c 	bl	8000b08 <__aeabi_dcmpeq>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d1a6      	bne.n	800abe2 <_strtod_l+0x562>
 800ac94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac9a:	9805      	ldr	r0, [sp, #20]
 800ac9c:	462b      	mov	r3, r5
 800ac9e:	463a      	mov	r2, r7
 800aca0:	f003 fe1a 	bl	800e8d8 <__s2b>
 800aca4:	900a      	str	r0, [sp, #40]	@ 0x28
 800aca6:	2800      	cmp	r0, #0
 800aca8:	f43f af05 	beq.w	800aab6 <_strtod_l+0x436>
 800acac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acae:	2a00      	cmp	r2, #0
 800acb0:	eba9 0308 	sub.w	r3, r9, r8
 800acb4:	bfa8      	it	ge
 800acb6:	2300      	movge	r3, #0
 800acb8:	9312      	str	r3, [sp, #72]	@ 0x48
 800acba:	2400      	movs	r4, #0
 800acbc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800acc0:	9316      	str	r3, [sp, #88]	@ 0x58
 800acc2:	46a0      	mov	r8, r4
 800acc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acc6:	9805      	ldr	r0, [sp, #20]
 800acc8:	6859      	ldr	r1, [r3, #4]
 800acca:	f003 fd5d 	bl	800e788 <_Balloc>
 800acce:	4681      	mov	r9, r0
 800acd0:	2800      	cmp	r0, #0
 800acd2:	f43f aef4 	beq.w	800aabe <_strtod_l+0x43e>
 800acd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acd8:	691a      	ldr	r2, [r3, #16]
 800acda:	3202      	adds	r2, #2
 800acdc:	f103 010c 	add.w	r1, r3, #12
 800ace0:	0092      	lsls	r2, r2, #2
 800ace2:	300c      	adds	r0, #12
 800ace4:	f002 fa7c 	bl	800d1e0 <memcpy>
 800ace8:	ec4b ab10 	vmov	d0, sl, fp
 800acec:	9805      	ldr	r0, [sp, #20]
 800acee:	aa1c      	add	r2, sp, #112	@ 0x70
 800acf0:	a91b      	add	r1, sp, #108	@ 0x6c
 800acf2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800acf6:	f004 f92b 	bl	800ef50 <__d2b>
 800acfa:	901a      	str	r0, [sp, #104]	@ 0x68
 800acfc:	2800      	cmp	r0, #0
 800acfe:	f43f aede 	beq.w	800aabe <_strtod_l+0x43e>
 800ad02:	9805      	ldr	r0, [sp, #20]
 800ad04:	2101      	movs	r1, #1
 800ad06:	f003 fe7d 	bl	800ea04 <__i2b>
 800ad0a:	4680      	mov	r8, r0
 800ad0c:	b948      	cbnz	r0, 800ad22 <_strtod_l+0x6a2>
 800ad0e:	f04f 0800 	mov.w	r8, #0
 800ad12:	e6d4      	b.n	800aabe <_strtod_l+0x43e>
 800ad14:	f04f 32ff 	mov.w	r2, #4294967295
 800ad18:	fa02 f303 	lsl.w	r3, r2, r3
 800ad1c:	ea03 0a0a 	and.w	sl, r3, sl
 800ad20:	e7b0      	b.n	800ac84 <_strtod_l+0x604>
 800ad22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ad24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ad26:	2d00      	cmp	r5, #0
 800ad28:	bfab      	itete	ge
 800ad2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ad2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ad2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ad30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ad32:	bfac      	ite	ge
 800ad34:	18ef      	addge	r7, r5, r3
 800ad36:	1b5e      	sublt	r6, r3, r5
 800ad38:	9b08      	ldr	r3, [sp, #32]
 800ad3a:	1aed      	subs	r5, r5, r3
 800ad3c:	4415      	add	r5, r2
 800ad3e:	4b66      	ldr	r3, [pc, #408]	@ (800aed8 <_strtod_l+0x858>)
 800ad40:	3d01      	subs	r5, #1
 800ad42:	429d      	cmp	r5, r3
 800ad44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ad48:	da50      	bge.n	800adec <_strtod_l+0x76c>
 800ad4a:	1b5b      	subs	r3, r3, r5
 800ad4c:	2b1f      	cmp	r3, #31
 800ad4e:	eba2 0203 	sub.w	r2, r2, r3
 800ad52:	f04f 0101 	mov.w	r1, #1
 800ad56:	dc3d      	bgt.n	800add4 <_strtod_l+0x754>
 800ad58:	fa01 f303 	lsl.w	r3, r1, r3
 800ad5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ad5e:	2300      	movs	r3, #0
 800ad60:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad62:	18bd      	adds	r5, r7, r2
 800ad64:	9b08      	ldr	r3, [sp, #32]
 800ad66:	42af      	cmp	r7, r5
 800ad68:	4416      	add	r6, r2
 800ad6a:	441e      	add	r6, r3
 800ad6c:	463b      	mov	r3, r7
 800ad6e:	bfa8      	it	ge
 800ad70:	462b      	movge	r3, r5
 800ad72:	42b3      	cmp	r3, r6
 800ad74:	bfa8      	it	ge
 800ad76:	4633      	movge	r3, r6
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bfc2      	ittt	gt
 800ad7c:	1aed      	subgt	r5, r5, r3
 800ad7e:	1af6      	subgt	r6, r6, r3
 800ad80:	1aff      	subgt	r7, r7, r3
 800ad82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	dd16      	ble.n	800adb6 <_strtod_l+0x736>
 800ad88:	4641      	mov	r1, r8
 800ad8a:	9805      	ldr	r0, [sp, #20]
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	f003 fef9 	bl	800eb84 <__pow5mult>
 800ad92:	4680      	mov	r8, r0
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d0ba      	beq.n	800ad0e <_strtod_l+0x68e>
 800ad98:	4601      	mov	r1, r0
 800ad9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ad9c:	9805      	ldr	r0, [sp, #20]
 800ad9e:	f003 fe47 	bl	800ea30 <__multiply>
 800ada2:	900e      	str	r0, [sp, #56]	@ 0x38
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f43f ae8a 	beq.w	800aabe <_strtod_l+0x43e>
 800adaa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adac:	9805      	ldr	r0, [sp, #20]
 800adae:	f003 fd2b 	bl	800e808 <_Bfree>
 800adb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800adb6:	2d00      	cmp	r5, #0
 800adb8:	dc1d      	bgt.n	800adf6 <_strtod_l+0x776>
 800adba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	dd23      	ble.n	800ae08 <_strtod_l+0x788>
 800adc0:	4649      	mov	r1, r9
 800adc2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800adc4:	9805      	ldr	r0, [sp, #20]
 800adc6:	f003 fedd 	bl	800eb84 <__pow5mult>
 800adca:	4681      	mov	r9, r0
 800adcc:	b9e0      	cbnz	r0, 800ae08 <_strtod_l+0x788>
 800adce:	f04f 0900 	mov.w	r9, #0
 800add2:	e674      	b.n	800aabe <_strtod_l+0x43e>
 800add4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800add8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800addc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ade0:	35e2      	adds	r5, #226	@ 0xe2
 800ade2:	fa01 f305 	lsl.w	r3, r1, r5
 800ade6:	9310      	str	r3, [sp, #64]	@ 0x40
 800ade8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800adea:	e7ba      	b.n	800ad62 <_strtod_l+0x6e2>
 800adec:	2300      	movs	r3, #0
 800adee:	9310      	str	r3, [sp, #64]	@ 0x40
 800adf0:	2301      	movs	r3, #1
 800adf2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adf4:	e7b5      	b.n	800ad62 <_strtod_l+0x6e2>
 800adf6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adf8:	9805      	ldr	r0, [sp, #20]
 800adfa:	462a      	mov	r2, r5
 800adfc:	f003 ff1c 	bl	800ec38 <__lshift>
 800ae00:	901a      	str	r0, [sp, #104]	@ 0x68
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d1d9      	bne.n	800adba <_strtod_l+0x73a>
 800ae06:	e65a      	b.n	800aabe <_strtod_l+0x43e>
 800ae08:	2e00      	cmp	r6, #0
 800ae0a:	dd07      	ble.n	800ae1c <_strtod_l+0x79c>
 800ae0c:	4649      	mov	r1, r9
 800ae0e:	9805      	ldr	r0, [sp, #20]
 800ae10:	4632      	mov	r2, r6
 800ae12:	f003 ff11 	bl	800ec38 <__lshift>
 800ae16:	4681      	mov	r9, r0
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d0d8      	beq.n	800adce <_strtod_l+0x74e>
 800ae1c:	2f00      	cmp	r7, #0
 800ae1e:	dd08      	ble.n	800ae32 <_strtod_l+0x7b2>
 800ae20:	4641      	mov	r1, r8
 800ae22:	9805      	ldr	r0, [sp, #20]
 800ae24:	463a      	mov	r2, r7
 800ae26:	f003 ff07 	bl	800ec38 <__lshift>
 800ae2a:	4680      	mov	r8, r0
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	f43f ae46 	beq.w	800aabe <_strtod_l+0x43e>
 800ae32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae34:	9805      	ldr	r0, [sp, #20]
 800ae36:	464a      	mov	r2, r9
 800ae38:	f003 ff86 	bl	800ed48 <__mdiff>
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	f43f ae3d 	beq.w	800aabe <_strtod_l+0x43e>
 800ae44:	68c3      	ldr	r3, [r0, #12]
 800ae46:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae48:	2300      	movs	r3, #0
 800ae4a:	60c3      	str	r3, [r0, #12]
 800ae4c:	4641      	mov	r1, r8
 800ae4e:	f003 ff5f 	bl	800ed10 <__mcmp>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	da46      	bge.n	800aee4 <_strtod_l+0x864>
 800ae56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae58:	ea53 030a 	orrs.w	r3, r3, sl
 800ae5c:	d16c      	bne.n	800af38 <_strtod_l+0x8b8>
 800ae5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d168      	bne.n	800af38 <_strtod_l+0x8b8>
 800ae66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae6a:	0d1b      	lsrs	r3, r3, #20
 800ae6c:	051b      	lsls	r3, r3, #20
 800ae6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ae72:	d961      	bls.n	800af38 <_strtod_l+0x8b8>
 800ae74:	6963      	ldr	r3, [r4, #20]
 800ae76:	b913      	cbnz	r3, 800ae7e <_strtod_l+0x7fe>
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	dd5c      	ble.n	800af38 <_strtod_l+0x8b8>
 800ae7e:	4621      	mov	r1, r4
 800ae80:	2201      	movs	r2, #1
 800ae82:	9805      	ldr	r0, [sp, #20]
 800ae84:	f003 fed8 	bl	800ec38 <__lshift>
 800ae88:	4641      	mov	r1, r8
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	f003 ff40 	bl	800ed10 <__mcmp>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	dd51      	ble.n	800af38 <_strtod_l+0x8b8>
 800ae94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae98:	9a08      	ldr	r2, [sp, #32]
 800ae9a:	0d1b      	lsrs	r3, r3, #20
 800ae9c:	051b      	lsls	r3, r3, #20
 800ae9e:	2a00      	cmp	r2, #0
 800aea0:	d06b      	beq.n	800af7a <_strtod_l+0x8fa>
 800aea2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aea6:	d868      	bhi.n	800af7a <_strtod_l+0x8fa>
 800aea8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800aeac:	f67f ae9d 	bls.w	800abea <_strtod_l+0x56a>
 800aeb0:	4b0a      	ldr	r3, [pc, #40]	@ (800aedc <_strtod_l+0x85c>)
 800aeb2:	4650      	mov	r0, sl
 800aeb4:	4659      	mov	r1, fp
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f7f5 fbbe 	bl	8000638 <__aeabi_dmul>
 800aebc:	4b08      	ldr	r3, [pc, #32]	@ (800aee0 <_strtod_l+0x860>)
 800aebe:	400b      	ands	r3, r1
 800aec0:	4682      	mov	sl, r0
 800aec2:	468b      	mov	fp, r1
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f47f ae05 	bne.w	800aad4 <_strtod_l+0x454>
 800aeca:	9a05      	ldr	r2, [sp, #20]
 800aecc:	2322      	movs	r3, #34	@ 0x22
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	e600      	b.n	800aad4 <_strtod_l+0x454>
 800aed2:	bf00      	nop
 800aed4:	080108f8 	.word	0x080108f8
 800aed8:	fffffc02 	.word	0xfffffc02
 800aedc:	39500000 	.word	0x39500000
 800aee0:	7ff00000 	.word	0x7ff00000
 800aee4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aee8:	d165      	bne.n	800afb6 <_strtod_l+0x936>
 800aeea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aeec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aef0:	b35a      	cbz	r2, 800af4a <_strtod_l+0x8ca>
 800aef2:	4a9f      	ldr	r2, [pc, #636]	@ (800b170 <_strtod_l+0xaf0>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d12b      	bne.n	800af50 <_strtod_l+0x8d0>
 800aef8:	9b08      	ldr	r3, [sp, #32]
 800aefa:	4651      	mov	r1, sl
 800aefc:	b303      	cbz	r3, 800af40 <_strtod_l+0x8c0>
 800aefe:	4b9d      	ldr	r3, [pc, #628]	@ (800b174 <_strtod_l+0xaf4>)
 800af00:	465a      	mov	r2, fp
 800af02:	4013      	ands	r3, r2
 800af04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800af08:	f04f 32ff 	mov.w	r2, #4294967295
 800af0c:	d81b      	bhi.n	800af46 <_strtod_l+0x8c6>
 800af0e:	0d1b      	lsrs	r3, r3, #20
 800af10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800af14:	fa02 f303 	lsl.w	r3, r2, r3
 800af18:	4299      	cmp	r1, r3
 800af1a:	d119      	bne.n	800af50 <_strtod_l+0x8d0>
 800af1c:	4b96      	ldr	r3, [pc, #600]	@ (800b178 <_strtod_l+0xaf8>)
 800af1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af20:	429a      	cmp	r2, r3
 800af22:	d102      	bne.n	800af2a <_strtod_l+0x8aa>
 800af24:	3101      	adds	r1, #1
 800af26:	f43f adca 	beq.w	800aabe <_strtod_l+0x43e>
 800af2a:	4b92      	ldr	r3, [pc, #584]	@ (800b174 <_strtod_l+0xaf4>)
 800af2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af2e:	401a      	ands	r2, r3
 800af30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800af34:	f04f 0a00 	mov.w	sl, #0
 800af38:	9b08      	ldr	r3, [sp, #32]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d1b8      	bne.n	800aeb0 <_strtod_l+0x830>
 800af3e:	e5c9      	b.n	800aad4 <_strtod_l+0x454>
 800af40:	f04f 33ff 	mov.w	r3, #4294967295
 800af44:	e7e8      	b.n	800af18 <_strtod_l+0x898>
 800af46:	4613      	mov	r3, r2
 800af48:	e7e6      	b.n	800af18 <_strtod_l+0x898>
 800af4a:	ea53 030a 	orrs.w	r3, r3, sl
 800af4e:	d0a1      	beq.n	800ae94 <_strtod_l+0x814>
 800af50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af52:	b1db      	cbz	r3, 800af8c <_strtod_l+0x90c>
 800af54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af56:	4213      	tst	r3, r2
 800af58:	d0ee      	beq.n	800af38 <_strtod_l+0x8b8>
 800af5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af5c:	9a08      	ldr	r2, [sp, #32]
 800af5e:	4650      	mov	r0, sl
 800af60:	4659      	mov	r1, fp
 800af62:	b1bb      	cbz	r3, 800af94 <_strtod_l+0x914>
 800af64:	f7ff fb6c 	bl	800a640 <sulp>
 800af68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af6c:	ec53 2b10 	vmov	r2, r3, d0
 800af70:	f7f5 f9ac 	bl	80002cc <__adddf3>
 800af74:	4682      	mov	sl, r0
 800af76:	468b      	mov	fp, r1
 800af78:	e7de      	b.n	800af38 <_strtod_l+0x8b8>
 800af7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800af7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af86:	f04f 3aff 	mov.w	sl, #4294967295
 800af8a:	e7d5      	b.n	800af38 <_strtod_l+0x8b8>
 800af8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800af8e:	ea13 0f0a 	tst.w	r3, sl
 800af92:	e7e1      	b.n	800af58 <_strtod_l+0x8d8>
 800af94:	f7ff fb54 	bl	800a640 <sulp>
 800af98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af9c:	ec53 2b10 	vmov	r2, r3, d0
 800afa0:	f7f5 f992 	bl	80002c8 <__aeabi_dsub>
 800afa4:	2200      	movs	r2, #0
 800afa6:	2300      	movs	r3, #0
 800afa8:	4682      	mov	sl, r0
 800afaa:	468b      	mov	fp, r1
 800afac:	f7f5 fdac 	bl	8000b08 <__aeabi_dcmpeq>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d0c1      	beq.n	800af38 <_strtod_l+0x8b8>
 800afb4:	e619      	b.n	800abea <_strtod_l+0x56a>
 800afb6:	4641      	mov	r1, r8
 800afb8:	4620      	mov	r0, r4
 800afba:	f004 f821 	bl	800f000 <__ratio>
 800afbe:	ec57 6b10 	vmov	r6, r7, d0
 800afc2:	2200      	movs	r2, #0
 800afc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800afc8:	4630      	mov	r0, r6
 800afca:	4639      	mov	r1, r7
 800afcc:	f7f5 fdb0 	bl	8000b30 <__aeabi_dcmple>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d06f      	beq.n	800b0b4 <_strtod_l+0xa34>
 800afd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d17a      	bne.n	800b0d0 <_strtod_l+0xa50>
 800afda:	f1ba 0f00 	cmp.w	sl, #0
 800afde:	d158      	bne.n	800b092 <_strtod_l+0xa12>
 800afe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afe2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d15a      	bne.n	800b0a0 <_strtod_l+0xa20>
 800afea:	4b64      	ldr	r3, [pc, #400]	@ (800b17c <_strtod_l+0xafc>)
 800afec:	2200      	movs	r2, #0
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	f7f5 fd93 	bl	8000b1c <__aeabi_dcmplt>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d159      	bne.n	800b0ae <_strtod_l+0xa2e>
 800affa:	4630      	mov	r0, r6
 800affc:	4639      	mov	r1, r7
 800affe:	4b60      	ldr	r3, [pc, #384]	@ (800b180 <_strtod_l+0xb00>)
 800b000:	2200      	movs	r2, #0
 800b002:	f7f5 fb19 	bl	8000638 <__aeabi_dmul>
 800b006:	4606      	mov	r6, r0
 800b008:	460f      	mov	r7, r1
 800b00a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b00e:	9606      	str	r6, [sp, #24]
 800b010:	9307      	str	r3, [sp, #28]
 800b012:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b016:	4d57      	ldr	r5, [pc, #348]	@ (800b174 <_strtod_l+0xaf4>)
 800b018:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b01c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b01e:	401d      	ands	r5, r3
 800b020:	4b58      	ldr	r3, [pc, #352]	@ (800b184 <_strtod_l+0xb04>)
 800b022:	429d      	cmp	r5, r3
 800b024:	f040 80b2 	bne.w	800b18c <_strtod_l+0xb0c>
 800b028:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b02a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b02e:	ec4b ab10 	vmov	d0, sl, fp
 800b032:	f003 ff1d 	bl	800ee70 <__ulp>
 800b036:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b03a:	ec51 0b10 	vmov	r0, r1, d0
 800b03e:	f7f5 fafb 	bl	8000638 <__aeabi_dmul>
 800b042:	4652      	mov	r2, sl
 800b044:	465b      	mov	r3, fp
 800b046:	f7f5 f941 	bl	80002cc <__adddf3>
 800b04a:	460b      	mov	r3, r1
 800b04c:	4949      	ldr	r1, [pc, #292]	@ (800b174 <_strtod_l+0xaf4>)
 800b04e:	4a4e      	ldr	r2, [pc, #312]	@ (800b188 <_strtod_l+0xb08>)
 800b050:	4019      	ands	r1, r3
 800b052:	4291      	cmp	r1, r2
 800b054:	4682      	mov	sl, r0
 800b056:	d942      	bls.n	800b0de <_strtod_l+0xa5e>
 800b058:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b05a:	4b47      	ldr	r3, [pc, #284]	@ (800b178 <_strtod_l+0xaf8>)
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d103      	bne.n	800b068 <_strtod_l+0x9e8>
 800b060:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b062:	3301      	adds	r3, #1
 800b064:	f43f ad2b 	beq.w	800aabe <_strtod_l+0x43e>
 800b068:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b178 <_strtod_l+0xaf8>
 800b06c:	f04f 3aff 	mov.w	sl, #4294967295
 800b070:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b072:	9805      	ldr	r0, [sp, #20]
 800b074:	f003 fbc8 	bl	800e808 <_Bfree>
 800b078:	9805      	ldr	r0, [sp, #20]
 800b07a:	4649      	mov	r1, r9
 800b07c:	f003 fbc4 	bl	800e808 <_Bfree>
 800b080:	9805      	ldr	r0, [sp, #20]
 800b082:	4641      	mov	r1, r8
 800b084:	f003 fbc0 	bl	800e808 <_Bfree>
 800b088:	9805      	ldr	r0, [sp, #20]
 800b08a:	4621      	mov	r1, r4
 800b08c:	f003 fbbc 	bl	800e808 <_Bfree>
 800b090:	e618      	b.n	800acc4 <_strtod_l+0x644>
 800b092:	f1ba 0f01 	cmp.w	sl, #1
 800b096:	d103      	bne.n	800b0a0 <_strtod_l+0xa20>
 800b098:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f43f ada5 	beq.w	800abea <_strtod_l+0x56a>
 800b0a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b150 <_strtod_l+0xad0>
 800b0a4:	4f35      	ldr	r7, [pc, #212]	@ (800b17c <_strtod_l+0xafc>)
 800b0a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0aa:	2600      	movs	r6, #0
 800b0ac:	e7b1      	b.n	800b012 <_strtod_l+0x992>
 800b0ae:	4f34      	ldr	r7, [pc, #208]	@ (800b180 <_strtod_l+0xb00>)
 800b0b0:	2600      	movs	r6, #0
 800b0b2:	e7aa      	b.n	800b00a <_strtod_l+0x98a>
 800b0b4:	4b32      	ldr	r3, [pc, #200]	@ (800b180 <_strtod_l+0xb00>)
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f7f5 fabc 	bl	8000638 <__aeabi_dmul>
 800b0c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	460f      	mov	r7, r1
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d09f      	beq.n	800b00a <_strtod_l+0x98a>
 800b0ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b0ce:	e7a0      	b.n	800b012 <_strtod_l+0x992>
 800b0d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b158 <_strtod_l+0xad8>
 800b0d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0d8:	ec57 6b17 	vmov	r6, r7, d7
 800b0dc:	e799      	b.n	800b012 <_strtod_l+0x992>
 800b0de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b0e2:	9b08      	ldr	r3, [sp, #32]
 800b0e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1c1      	bne.n	800b070 <_strtod_l+0x9f0>
 800b0ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b0f0:	0d1b      	lsrs	r3, r3, #20
 800b0f2:	051b      	lsls	r3, r3, #20
 800b0f4:	429d      	cmp	r5, r3
 800b0f6:	d1bb      	bne.n	800b070 <_strtod_l+0x9f0>
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	4639      	mov	r1, r7
 800b0fc:	f7f5 fdfc 	bl	8000cf8 <__aeabi_d2lz>
 800b100:	f7f5 fa6c 	bl	80005dc <__aeabi_l2d>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4630      	mov	r0, r6
 800b10a:	4639      	mov	r1, r7
 800b10c:	f7f5 f8dc 	bl	80002c8 <__aeabi_dsub>
 800b110:	460b      	mov	r3, r1
 800b112:	4602      	mov	r2, r0
 800b114:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b118:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b11c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b11e:	ea46 060a 	orr.w	r6, r6, sl
 800b122:	431e      	orrs	r6, r3
 800b124:	d06f      	beq.n	800b206 <_strtod_l+0xb86>
 800b126:	a30e      	add	r3, pc, #56	@ (adr r3, 800b160 <_strtod_l+0xae0>)
 800b128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12c:	f7f5 fcf6 	bl	8000b1c <__aeabi_dcmplt>
 800b130:	2800      	cmp	r0, #0
 800b132:	f47f accf 	bne.w	800aad4 <_strtod_l+0x454>
 800b136:	a30c      	add	r3, pc, #48	@ (adr r3, 800b168 <_strtod_l+0xae8>)
 800b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b140:	f7f5 fd0a 	bl	8000b58 <__aeabi_dcmpgt>
 800b144:	2800      	cmp	r0, #0
 800b146:	d093      	beq.n	800b070 <_strtod_l+0x9f0>
 800b148:	e4c4      	b.n	800aad4 <_strtod_l+0x454>
 800b14a:	bf00      	nop
 800b14c:	f3af 8000 	nop.w
 800b150:	00000000 	.word	0x00000000
 800b154:	bff00000 	.word	0xbff00000
 800b158:	00000000 	.word	0x00000000
 800b15c:	3ff00000 	.word	0x3ff00000
 800b160:	94a03595 	.word	0x94a03595
 800b164:	3fdfffff 	.word	0x3fdfffff
 800b168:	35afe535 	.word	0x35afe535
 800b16c:	3fe00000 	.word	0x3fe00000
 800b170:	000fffff 	.word	0x000fffff
 800b174:	7ff00000 	.word	0x7ff00000
 800b178:	7fefffff 	.word	0x7fefffff
 800b17c:	3ff00000 	.word	0x3ff00000
 800b180:	3fe00000 	.word	0x3fe00000
 800b184:	7fe00000 	.word	0x7fe00000
 800b188:	7c9fffff 	.word	0x7c9fffff
 800b18c:	9b08      	ldr	r3, [sp, #32]
 800b18e:	b323      	cbz	r3, 800b1da <_strtod_l+0xb5a>
 800b190:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b194:	d821      	bhi.n	800b1da <_strtod_l+0xb5a>
 800b196:	a328      	add	r3, pc, #160	@ (adr r3, 800b238 <_strtod_l+0xbb8>)
 800b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19c:	4630      	mov	r0, r6
 800b19e:	4639      	mov	r1, r7
 800b1a0:	f7f5 fcc6 	bl	8000b30 <__aeabi_dcmple>
 800b1a4:	b1a0      	cbz	r0, 800b1d0 <_strtod_l+0xb50>
 800b1a6:	4639      	mov	r1, r7
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	f7f5 fd1d 	bl	8000be8 <__aeabi_d2uiz>
 800b1ae:	2801      	cmp	r0, #1
 800b1b0:	bf38      	it	cc
 800b1b2:	2001      	movcc	r0, #1
 800b1b4:	f7f5 f9c6 	bl	8000544 <__aeabi_ui2d>
 800b1b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ba:	4606      	mov	r6, r0
 800b1bc:	460f      	mov	r7, r1
 800b1be:	b9fb      	cbnz	r3, 800b200 <_strtod_l+0xb80>
 800b1c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b1c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b1c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b1c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b1cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b1d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b1d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b1d6:	1b5b      	subs	r3, r3, r5
 800b1d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b1da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b1de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b1e2:	f003 fe45 	bl	800ee70 <__ulp>
 800b1e6:	4650      	mov	r0, sl
 800b1e8:	ec53 2b10 	vmov	r2, r3, d0
 800b1ec:	4659      	mov	r1, fp
 800b1ee:	f7f5 fa23 	bl	8000638 <__aeabi_dmul>
 800b1f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b1f6:	f7f5 f869 	bl	80002cc <__adddf3>
 800b1fa:	4682      	mov	sl, r0
 800b1fc:	468b      	mov	fp, r1
 800b1fe:	e770      	b.n	800b0e2 <_strtod_l+0xa62>
 800b200:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b204:	e7e0      	b.n	800b1c8 <_strtod_l+0xb48>
 800b206:	a30e      	add	r3, pc, #56	@ (adr r3, 800b240 <_strtod_l+0xbc0>)
 800b208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20c:	f7f5 fc86 	bl	8000b1c <__aeabi_dcmplt>
 800b210:	e798      	b.n	800b144 <_strtod_l+0xac4>
 800b212:	2300      	movs	r3, #0
 800b214:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b216:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b218:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	f7ff ba6d 	b.w	800a6fa <_strtod_l+0x7a>
 800b220:	2a65      	cmp	r2, #101	@ 0x65
 800b222:	f43f ab66 	beq.w	800a8f2 <_strtod_l+0x272>
 800b226:	2a45      	cmp	r2, #69	@ 0x45
 800b228:	f43f ab63 	beq.w	800a8f2 <_strtod_l+0x272>
 800b22c:	2301      	movs	r3, #1
 800b22e:	f7ff bb9e 	b.w	800a96e <_strtod_l+0x2ee>
 800b232:	bf00      	nop
 800b234:	f3af 8000 	nop.w
 800b238:	ffc00000 	.word	0xffc00000
 800b23c:	41dfffff 	.word	0x41dfffff
 800b240:	94a03595 	.word	0x94a03595
 800b244:	3fcfffff 	.word	0x3fcfffff

0800b248 <_strtod_r>:
 800b248:	4b01      	ldr	r3, [pc, #4]	@ (800b250 <_strtod_r+0x8>)
 800b24a:	f7ff ba19 	b.w	800a680 <_strtod_l>
 800b24e:	bf00      	nop
 800b250:	20000018 	.word	0x20000018

0800b254 <strtof>:
 800b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b258:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800b318 <strtof+0xc4>
 800b25c:	4b29      	ldr	r3, [pc, #164]	@ (800b304 <strtof+0xb0>)
 800b25e:	460a      	mov	r2, r1
 800b260:	ed2d 8b02 	vpush	{d8}
 800b264:	4601      	mov	r1, r0
 800b266:	f8d8 0000 	ldr.w	r0, [r8]
 800b26a:	f7ff fa09 	bl	800a680 <_strtod_l>
 800b26e:	ec55 4b10 	vmov	r4, r5, d0
 800b272:	4622      	mov	r2, r4
 800b274:	462b      	mov	r3, r5
 800b276:	4620      	mov	r0, r4
 800b278:	4629      	mov	r1, r5
 800b27a:	f7f5 fc77 	bl	8000b6c <__aeabi_dcmpun>
 800b27e:	b190      	cbz	r0, 800b2a6 <strtof+0x52>
 800b280:	2d00      	cmp	r5, #0
 800b282:	4821      	ldr	r0, [pc, #132]	@ (800b308 <strtof+0xb4>)
 800b284:	da09      	bge.n	800b29a <strtof+0x46>
 800b286:	f001 ffc3 	bl	800d210 <nanf>
 800b28a:	eeb1 8a40 	vneg.f32	s16, s0
 800b28e:	eeb0 0a48 	vmov.f32	s0, s16
 800b292:	ecbd 8b02 	vpop	{d8}
 800b296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b29a:	ecbd 8b02 	vpop	{d8}
 800b29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a2:	f001 bfb5 	b.w	800d210 <nanf>
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	f7f5 fcbd 	bl	8000c28 <__aeabi_d2f>
 800b2ae:	ee08 0a10 	vmov	s16, r0
 800b2b2:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800b30c <strtof+0xb8>
 800b2b6:	eeb0 7ac8 	vabs.f32	s14, s16
 800b2ba:	eeb4 7a67 	vcmp.f32	s14, s15
 800b2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2c2:	dd11      	ble.n	800b2e8 <strtof+0x94>
 800b2c4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800b2c8:	4b11      	ldr	r3, [pc, #68]	@ (800b310 <strtof+0xbc>)
 800b2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	f7f5 fc4b 	bl	8000b6c <__aeabi_dcmpun>
 800b2d6:	b980      	cbnz	r0, 800b2fa <strtof+0xa6>
 800b2d8:	4b0d      	ldr	r3, [pc, #52]	@ (800b310 <strtof+0xbc>)
 800b2da:	f04f 32ff 	mov.w	r2, #4294967295
 800b2de:	4620      	mov	r0, r4
 800b2e0:	4639      	mov	r1, r7
 800b2e2:	f7f5 fc25 	bl	8000b30 <__aeabi_dcmple>
 800b2e6:	b940      	cbnz	r0, 800b2fa <strtof+0xa6>
 800b2e8:	ee18 3a10 	vmov	r3, s16
 800b2ec:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b2f0:	d1cd      	bne.n	800b28e <strtof+0x3a>
 800b2f2:	4b08      	ldr	r3, [pc, #32]	@ (800b314 <strtof+0xc0>)
 800b2f4:	402b      	ands	r3, r5
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d0c9      	beq.n	800b28e <strtof+0x3a>
 800b2fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b2fe:	2222      	movs	r2, #34	@ 0x22
 800b300:	601a      	str	r2, [r3, #0]
 800b302:	e7c4      	b.n	800b28e <strtof+0x3a>
 800b304:	20000018 	.word	0x20000018
 800b308:	080110a3 	.word	0x080110a3
 800b30c:	7f7fffff 	.word	0x7f7fffff
 800b310:	7fefffff 	.word	0x7fefffff
 800b314:	7ff00000 	.word	0x7ff00000
 800b318:	20000184 	.word	0x20000184

0800b31c <__cvt>:
 800b31c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b320:	ec57 6b10 	vmov	r6, r7, d0
 800b324:	2f00      	cmp	r7, #0
 800b326:	460c      	mov	r4, r1
 800b328:	4619      	mov	r1, r3
 800b32a:	463b      	mov	r3, r7
 800b32c:	bfbb      	ittet	lt
 800b32e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b332:	461f      	movlt	r7, r3
 800b334:	2300      	movge	r3, #0
 800b336:	232d      	movlt	r3, #45	@ 0x2d
 800b338:	700b      	strb	r3, [r1, #0]
 800b33a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b33c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b340:	4691      	mov	r9, r2
 800b342:	f023 0820 	bic.w	r8, r3, #32
 800b346:	bfbc      	itt	lt
 800b348:	4632      	movlt	r2, r6
 800b34a:	4616      	movlt	r6, r2
 800b34c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b350:	d005      	beq.n	800b35e <__cvt+0x42>
 800b352:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b356:	d100      	bne.n	800b35a <__cvt+0x3e>
 800b358:	3401      	adds	r4, #1
 800b35a:	2102      	movs	r1, #2
 800b35c:	e000      	b.n	800b360 <__cvt+0x44>
 800b35e:	2103      	movs	r1, #3
 800b360:	ab03      	add	r3, sp, #12
 800b362:	9301      	str	r3, [sp, #4]
 800b364:	ab02      	add	r3, sp, #8
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	ec47 6b10 	vmov	d0, r6, r7
 800b36c:	4653      	mov	r3, sl
 800b36e:	4622      	mov	r2, r4
 800b370:	f001 fffa 	bl	800d368 <_dtoa_r>
 800b374:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b378:	4605      	mov	r5, r0
 800b37a:	d119      	bne.n	800b3b0 <__cvt+0x94>
 800b37c:	f019 0f01 	tst.w	r9, #1
 800b380:	d00e      	beq.n	800b3a0 <__cvt+0x84>
 800b382:	eb00 0904 	add.w	r9, r0, r4
 800b386:	2200      	movs	r2, #0
 800b388:	2300      	movs	r3, #0
 800b38a:	4630      	mov	r0, r6
 800b38c:	4639      	mov	r1, r7
 800b38e:	f7f5 fbbb 	bl	8000b08 <__aeabi_dcmpeq>
 800b392:	b108      	cbz	r0, 800b398 <__cvt+0x7c>
 800b394:	f8cd 900c 	str.w	r9, [sp, #12]
 800b398:	2230      	movs	r2, #48	@ 0x30
 800b39a:	9b03      	ldr	r3, [sp, #12]
 800b39c:	454b      	cmp	r3, r9
 800b39e:	d31e      	bcc.n	800b3de <__cvt+0xc2>
 800b3a0:	9b03      	ldr	r3, [sp, #12]
 800b3a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3a4:	1b5b      	subs	r3, r3, r5
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	6013      	str	r3, [r2, #0]
 800b3aa:	b004      	add	sp, #16
 800b3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b3b4:	eb00 0904 	add.w	r9, r0, r4
 800b3b8:	d1e5      	bne.n	800b386 <__cvt+0x6a>
 800b3ba:	7803      	ldrb	r3, [r0, #0]
 800b3bc:	2b30      	cmp	r3, #48	@ 0x30
 800b3be:	d10a      	bne.n	800b3d6 <__cvt+0xba>
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	4639      	mov	r1, r7
 800b3c8:	f7f5 fb9e 	bl	8000b08 <__aeabi_dcmpeq>
 800b3cc:	b918      	cbnz	r0, 800b3d6 <__cvt+0xba>
 800b3ce:	f1c4 0401 	rsb	r4, r4, #1
 800b3d2:	f8ca 4000 	str.w	r4, [sl]
 800b3d6:	f8da 3000 	ldr.w	r3, [sl]
 800b3da:	4499      	add	r9, r3
 800b3dc:	e7d3      	b.n	800b386 <__cvt+0x6a>
 800b3de:	1c59      	adds	r1, r3, #1
 800b3e0:	9103      	str	r1, [sp, #12]
 800b3e2:	701a      	strb	r2, [r3, #0]
 800b3e4:	e7d9      	b.n	800b39a <__cvt+0x7e>

0800b3e6 <__exponent>:
 800b3e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3e8:	2900      	cmp	r1, #0
 800b3ea:	bfba      	itte	lt
 800b3ec:	4249      	neglt	r1, r1
 800b3ee:	232d      	movlt	r3, #45	@ 0x2d
 800b3f0:	232b      	movge	r3, #43	@ 0x2b
 800b3f2:	2909      	cmp	r1, #9
 800b3f4:	7002      	strb	r2, [r0, #0]
 800b3f6:	7043      	strb	r3, [r0, #1]
 800b3f8:	dd29      	ble.n	800b44e <__exponent+0x68>
 800b3fa:	f10d 0307 	add.w	r3, sp, #7
 800b3fe:	461d      	mov	r5, r3
 800b400:	270a      	movs	r7, #10
 800b402:	461a      	mov	r2, r3
 800b404:	fbb1 f6f7 	udiv	r6, r1, r7
 800b408:	fb07 1416 	mls	r4, r7, r6, r1
 800b40c:	3430      	adds	r4, #48	@ 0x30
 800b40e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b412:	460c      	mov	r4, r1
 800b414:	2c63      	cmp	r4, #99	@ 0x63
 800b416:	f103 33ff 	add.w	r3, r3, #4294967295
 800b41a:	4631      	mov	r1, r6
 800b41c:	dcf1      	bgt.n	800b402 <__exponent+0x1c>
 800b41e:	3130      	adds	r1, #48	@ 0x30
 800b420:	1e94      	subs	r4, r2, #2
 800b422:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b426:	1c41      	adds	r1, r0, #1
 800b428:	4623      	mov	r3, r4
 800b42a:	42ab      	cmp	r3, r5
 800b42c:	d30a      	bcc.n	800b444 <__exponent+0x5e>
 800b42e:	f10d 0309 	add.w	r3, sp, #9
 800b432:	1a9b      	subs	r3, r3, r2
 800b434:	42ac      	cmp	r4, r5
 800b436:	bf88      	it	hi
 800b438:	2300      	movhi	r3, #0
 800b43a:	3302      	adds	r3, #2
 800b43c:	4403      	add	r3, r0
 800b43e:	1a18      	subs	r0, r3, r0
 800b440:	b003      	add	sp, #12
 800b442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b444:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b448:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b44c:	e7ed      	b.n	800b42a <__exponent+0x44>
 800b44e:	2330      	movs	r3, #48	@ 0x30
 800b450:	3130      	adds	r1, #48	@ 0x30
 800b452:	7083      	strb	r3, [r0, #2]
 800b454:	70c1      	strb	r1, [r0, #3]
 800b456:	1d03      	adds	r3, r0, #4
 800b458:	e7f1      	b.n	800b43e <__exponent+0x58>
	...

0800b45c <_printf_float>:
 800b45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b460:	b08d      	sub	sp, #52	@ 0x34
 800b462:	460c      	mov	r4, r1
 800b464:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b468:	4616      	mov	r6, r2
 800b46a:	461f      	mov	r7, r3
 800b46c:	4605      	mov	r5, r0
 800b46e:	f001 fe2d 	bl	800d0cc <_localeconv_r>
 800b472:	6803      	ldr	r3, [r0, #0]
 800b474:	9304      	str	r3, [sp, #16]
 800b476:	4618      	mov	r0, r3
 800b478:	f7f4 ff1a 	bl	80002b0 <strlen>
 800b47c:	2300      	movs	r3, #0
 800b47e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b480:	f8d8 3000 	ldr.w	r3, [r8]
 800b484:	9005      	str	r0, [sp, #20]
 800b486:	3307      	adds	r3, #7
 800b488:	f023 0307 	bic.w	r3, r3, #7
 800b48c:	f103 0208 	add.w	r2, r3, #8
 800b490:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b494:	f8d4 b000 	ldr.w	fp, [r4]
 800b498:	f8c8 2000 	str.w	r2, [r8]
 800b49c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b4a4:	9307      	str	r3, [sp, #28]
 800b4a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b4ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4b2:	4b9c      	ldr	r3, [pc, #624]	@ (800b724 <_printf_float+0x2c8>)
 800b4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b8:	f7f5 fb58 	bl	8000b6c <__aeabi_dcmpun>
 800b4bc:	bb70      	cbnz	r0, 800b51c <_printf_float+0xc0>
 800b4be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4c2:	4b98      	ldr	r3, [pc, #608]	@ (800b724 <_printf_float+0x2c8>)
 800b4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c8:	f7f5 fb32 	bl	8000b30 <__aeabi_dcmple>
 800b4cc:	bb30      	cbnz	r0, 800b51c <_printf_float+0xc0>
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	4649      	mov	r1, r9
 800b4d6:	f7f5 fb21 	bl	8000b1c <__aeabi_dcmplt>
 800b4da:	b110      	cbz	r0, 800b4e2 <_printf_float+0x86>
 800b4dc:	232d      	movs	r3, #45	@ 0x2d
 800b4de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4e2:	4a91      	ldr	r2, [pc, #580]	@ (800b728 <_printf_float+0x2cc>)
 800b4e4:	4b91      	ldr	r3, [pc, #580]	@ (800b72c <_printf_float+0x2d0>)
 800b4e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b4ea:	bf94      	ite	ls
 800b4ec:	4690      	movls	r8, r2
 800b4ee:	4698      	movhi	r8, r3
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	6123      	str	r3, [r4, #16]
 800b4f4:	f02b 0304 	bic.w	r3, fp, #4
 800b4f8:	6023      	str	r3, [r4, #0]
 800b4fa:	f04f 0900 	mov.w	r9, #0
 800b4fe:	9700      	str	r7, [sp, #0]
 800b500:	4633      	mov	r3, r6
 800b502:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b504:	4621      	mov	r1, r4
 800b506:	4628      	mov	r0, r5
 800b508:	f000 f9d2 	bl	800b8b0 <_printf_common>
 800b50c:	3001      	adds	r0, #1
 800b50e:	f040 808d 	bne.w	800b62c <_printf_float+0x1d0>
 800b512:	f04f 30ff 	mov.w	r0, #4294967295
 800b516:	b00d      	add	sp, #52	@ 0x34
 800b518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b51c:	4642      	mov	r2, r8
 800b51e:	464b      	mov	r3, r9
 800b520:	4640      	mov	r0, r8
 800b522:	4649      	mov	r1, r9
 800b524:	f7f5 fb22 	bl	8000b6c <__aeabi_dcmpun>
 800b528:	b140      	cbz	r0, 800b53c <_printf_float+0xe0>
 800b52a:	464b      	mov	r3, r9
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	bfbc      	itt	lt
 800b530:	232d      	movlt	r3, #45	@ 0x2d
 800b532:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b536:	4a7e      	ldr	r2, [pc, #504]	@ (800b730 <_printf_float+0x2d4>)
 800b538:	4b7e      	ldr	r3, [pc, #504]	@ (800b734 <_printf_float+0x2d8>)
 800b53a:	e7d4      	b.n	800b4e6 <_printf_float+0x8a>
 800b53c:	6863      	ldr	r3, [r4, #4]
 800b53e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b542:	9206      	str	r2, [sp, #24]
 800b544:	1c5a      	adds	r2, r3, #1
 800b546:	d13b      	bne.n	800b5c0 <_printf_float+0x164>
 800b548:	2306      	movs	r3, #6
 800b54a:	6063      	str	r3, [r4, #4]
 800b54c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b550:	2300      	movs	r3, #0
 800b552:	6022      	str	r2, [r4, #0]
 800b554:	9303      	str	r3, [sp, #12]
 800b556:	ab0a      	add	r3, sp, #40	@ 0x28
 800b558:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b55c:	ab09      	add	r3, sp, #36	@ 0x24
 800b55e:	9300      	str	r3, [sp, #0]
 800b560:	6861      	ldr	r1, [r4, #4]
 800b562:	ec49 8b10 	vmov	d0, r8, r9
 800b566:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b56a:	4628      	mov	r0, r5
 800b56c:	f7ff fed6 	bl	800b31c <__cvt>
 800b570:	9b06      	ldr	r3, [sp, #24]
 800b572:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b574:	2b47      	cmp	r3, #71	@ 0x47
 800b576:	4680      	mov	r8, r0
 800b578:	d129      	bne.n	800b5ce <_printf_float+0x172>
 800b57a:	1cc8      	adds	r0, r1, #3
 800b57c:	db02      	blt.n	800b584 <_printf_float+0x128>
 800b57e:	6863      	ldr	r3, [r4, #4]
 800b580:	4299      	cmp	r1, r3
 800b582:	dd41      	ble.n	800b608 <_printf_float+0x1ac>
 800b584:	f1aa 0a02 	sub.w	sl, sl, #2
 800b588:	fa5f fa8a 	uxtb.w	sl, sl
 800b58c:	3901      	subs	r1, #1
 800b58e:	4652      	mov	r2, sl
 800b590:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b594:	9109      	str	r1, [sp, #36]	@ 0x24
 800b596:	f7ff ff26 	bl	800b3e6 <__exponent>
 800b59a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b59c:	1813      	adds	r3, r2, r0
 800b59e:	2a01      	cmp	r2, #1
 800b5a0:	4681      	mov	r9, r0
 800b5a2:	6123      	str	r3, [r4, #16]
 800b5a4:	dc02      	bgt.n	800b5ac <_printf_float+0x150>
 800b5a6:	6822      	ldr	r2, [r4, #0]
 800b5a8:	07d2      	lsls	r2, r2, #31
 800b5aa:	d501      	bpl.n	800b5b0 <_printf_float+0x154>
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	6123      	str	r3, [r4, #16]
 800b5b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d0a2      	beq.n	800b4fe <_printf_float+0xa2>
 800b5b8:	232d      	movs	r3, #45	@ 0x2d
 800b5ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5be:	e79e      	b.n	800b4fe <_printf_float+0xa2>
 800b5c0:	9a06      	ldr	r2, [sp, #24]
 800b5c2:	2a47      	cmp	r2, #71	@ 0x47
 800b5c4:	d1c2      	bne.n	800b54c <_printf_float+0xf0>
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1c0      	bne.n	800b54c <_printf_float+0xf0>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e7bd      	b.n	800b54a <_printf_float+0xee>
 800b5ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b5d2:	d9db      	bls.n	800b58c <_printf_float+0x130>
 800b5d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b5d8:	d118      	bne.n	800b60c <_printf_float+0x1b0>
 800b5da:	2900      	cmp	r1, #0
 800b5dc:	6863      	ldr	r3, [r4, #4]
 800b5de:	dd0b      	ble.n	800b5f8 <_printf_float+0x19c>
 800b5e0:	6121      	str	r1, [r4, #16]
 800b5e2:	b913      	cbnz	r3, 800b5ea <_printf_float+0x18e>
 800b5e4:	6822      	ldr	r2, [r4, #0]
 800b5e6:	07d0      	lsls	r0, r2, #31
 800b5e8:	d502      	bpl.n	800b5f0 <_printf_float+0x194>
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	440b      	add	r3, r1
 800b5ee:	6123      	str	r3, [r4, #16]
 800b5f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b5f2:	f04f 0900 	mov.w	r9, #0
 800b5f6:	e7db      	b.n	800b5b0 <_printf_float+0x154>
 800b5f8:	b913      	cbnz	r3, 800b600 <_printf_float+0x1a4>
 800b5fa:	6822      	ldr	r2, [r4, #0]
 800b5fc:	07d2      	lsls	r2, r2, #31
 800b5fe:	d501      	bpl.n	800b604 <_printf_float+0x1a8>
 800b600:	3302      	adds	r3, #2
 800b602:	e7f4      	b.n	800b5ee <_printf_float+0x192>
 800b604:	2301      	movs	r3, #1
 800b606:	e7f2      	b.n	800b5ee <_printf_float+0x192>
 800b608:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b60c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b60e:	4299      	cmp	r1, r3
 800b610:	db05      	blt.n	800b61e <_printf_float+0x1c2>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	6121      	str	r1, [r4, #16]
 800b616:	07d8      	lsls	r0, r3, #31
 800b618:	d5ea      	bpl.n	800b5f0 <_printf_float+0x194>
 800b61a:	1c4b      	adds	r3, r1, #1
 800b61c:	e7e7      	b.n	800b5ee <_printf_float+0x192>
 800b61e:	2900      	cmp	r1, #0
 800b620:	bfd4      	ite	le
 800b622:	f1c1 0202 	rsble	r2, r1, #2
 800b626:	2201      	movgt	r2, #1
 800b628:	4413      	add	r3, r2
 800b62a:	e7e0      	b.n	800b5ee <_printf_float+0x192>
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	055a      	lsls	r2, r3, #21
 800b630:	d407      	bmi.n	800b642 <_printf_float+0x1e6>
 800b632:	6923      	ldr	r3, [r4, #16]
 800b634:	4642      	mov	r2, r8
 800b636:	4631      	mov	r1, r6
 800b638:	4628      	mov	r0, r5
 800b63a:	47b8      	blx	r7
 800b63c:	3001      	adds	r0, #1
 800b63e:	d12b      	bne.n	800b698 <_printf_float+0x23c>
 800b640:	e767      	b.n	800b512 <_printf_float+0xb6>
 800b642:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b646:	f240 80dd 	bls.w	800b804 <_printf_float+0x3a8>
 800b64a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b64e:	2200      	movs	r2, #0
 800b650:	2300      	movs	r3, #0
 800b652:	f7f5 fa59 	bl	8000b08 <__aeabi_dcmpeq>
 800b656:	2800      	cmp	r0, #0
 800b658:	d033      	beq.n	800b6c2 <_printf_float+0x266>
 800b65a:	4a37      	ldr	r2, [pc, #220]	@ (800b738 <_printf_float+0x2dc>)
 800b65c:	2301      	movs	r3, #1
 800b65e:	4631      	mov	r1, r6
 800b660:	4628      	mov	r0, r5
 800b662:	47b8      	blx	r7
 800b664:	3001      	adds	r0, #1
 800b666:	f43f af54 	beq.w	800b512 <_printf_float+0xb6>
 800b66a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b66e:	4543      	cmp	r3, r8
 800b670:	db02      	blt.n	800b678 <_printf_float+0x21c>
 800b672:	6823      	ldr	r3, [r4, #0]
 800b674:	07d8      	lsls	r0, r3, #31
 800b676:	d50f      	bpl.n	800b698 <_printf_float+0x23c>
 800b678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b67c:	4631      	mov	r1, r6
 800b67e:	4628      	mov	r0, r5
 800b680:	47b8      	blx	r7
 800b682:	3001      	adds	r0, #1
 800b684:	f43f af45 	beq.w	800b512 <_printf_float+0xb6>
 800b688:	f04f 0900 	mov.w	r9, #0
 800b68c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b690:	f104 0a1a 	add.w	sl, r4, #26
 800b694:	45c8      	cmp	r8, r9
 800b696:	dc09      	bgt.n	800b6ac <_printf_float+0x250>
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	079b      	lsls	r3, r3, #30
 800b69c:	f100 8103 	bmi.w	800b8a6 <_printf_float+0x44a>
 800b6a0:	68e0      	ldr	r0, [r4, #12]
 800b6a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6a4:	4298      	cmp	r0, r3
 800b6a6:	bfb8      	it	lt
 800b6a8:	4618      	movlt	r0, r3
 800b6aa:	e734      	b.n	800b516 <_printf_float+0xba>
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	4652      	mov	r2, sl
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	47b8      	blx	r7
 800b6b6:	3001      	adds	r0, #1
 800b6b8:	f43f af2b 	beq.w	800b512 <_printf_float+0xb6>
 800b6bc:	f109 0901 	add.w	r9, r9, #1
 800b6c0:	e7e8      	b.n	800b694 <_printf_float+0x238>
 800b6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	dc39      	bgt.n	800b73c <_printf_float+0x2e0>
 800b6c8:	4a1b      	ldr	r2, [pc, #108]	@ (800b738 <_printf_float+0x2dc>)
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	47b8      	blx	r7
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	f43f af1d 	beq.w	800b512 <_printf_float+0xb6>
 800b6d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b6dc:	ea59 0303 	orrs.w	r3, r9, r3
 800b6e0:	d102      	bne.n	800b6e8 <_printf_float+0x28c>
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	07d9      	lsls	r1, r3, #31
 800b6e6:	d5d7      	bpl.n	800b698 <_printf_float+0x23c>
 800b6e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6ec:	4631      	mov	r1, r6
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	47b8      	blx	r7
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	f43f af0d 	beq.w	800b512 <_printf_float+0xb6>
 800b6f8:	f04f 0a00 	mov.w	sl, #0
 800b6fc:	f104 0b1a 	add.w	fp, r4, #26
 800b700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b702:	425b      	negs	r3, r3
 800b704:	4553      	cmp	r3, sl
 800b706:	dc01      	bgt.n	800b70c <_printf_float+0x2b0>
 800b708:	464b      	mov	r3, r9
 800b70a:	e793      	b.n	800b634 <_printf_float+0x1d8>
 800b70c:	2301      	movs	r3, #1
 800b70e:	465a      	mov	r2, fp
 800b710:	4631      	mov	r1, r6
 800b712:	4628      	mov	r0, r5
 800b714:	47b8      	blx	r7
 800b716:	3001      	adds	r0, #1
 800b718:	f43f aefb 	beq.w	800b512 <_printf_float+0xb6>
 800b71c:	f10a 0a01 	add.w	sl, sl, #1
 800b720:	e7ee      	b.n	800b700 <_printf_float+0x2a4>
 800b722:	bf00      	nop
 800b724:	7fefffff 	.word	0x7fefffff
 800b728:	08010920 	.word	0x08010920
 800b72c:	08010924 	.word	0x08010924
 800b730:	08010928 	.word	0x08010928
 800b734:	0801092c 	.word	0x0801092c
 800b738:	08010930 	.word	0x08010930
 800b73c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b73e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b742:	4553      	cmp	r3, sl
 800b744:	bfa8      	it	ge
 800b746:	4653      	movge	r3, sl
 800b748:	2b00      	cmp	r3, #0
 800b74a:	4699      	mov	r9, r3
 800b74c:	dc36      	bgt.n	800b7bc <_printf_float+0x360>
 800b74e:	f04f 0b00 	mov.w	fp, #0
 800b752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b756:	f104 021a 	add.w	r2, r4, #26
 800b75a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b75c:	9306      	str	r3, [sp, #24]
 800b75e:	eba3 0309 	sub.w	r3, r3, r9
 800b762:	455b      	cmp	r3, fp
 800b764:	dc31      	bgt.n	800b7ca <_printf_float+0x36e>
 800b766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b768:	459a      	cmp	sl, r3
 800b76a:	dc3a      	bgt.n	800b7e2 <_printf_float+0x386>
 800b76c:	6823      	ldr	r3, [r4, #0]
 800b76e:	07da      	lsls	r2, r3, #31
 800b770:	d437      	bmi.n	800b7e2 <_printf_float+0x386>
 800b772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b774:	ebaa 0903 	sub.w	r9, sl, r3
 800b778:	9b06      	ldr	r3, [sp, #24]
 800b77a:	ebaa 0303 	sub.w	r3, sl, r3
 800b77e:	4599      	cmp	r9, r3
 800b780:	bfa8      	it	ge
 800b782:	4699      	movge	r9, r3
 800b784:	f1b9 0f00 	cmp.w	r9, #0
 800b788:	dc33      	bgt.n	800b7f2 <_printf_float+0x396>
 800b78a:	f04f 0800 	mov.w	r8, #0
 800b78e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b792:	f104 0b1a 	add.w	fp, r4, #26
 800b796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b798:	ebaa 0303 	sub.w	r3, sl, r3
 800b79c:	eba3 0309 	sub.w	r3, r3, r9
 800b7a0:	4543      	cmp	r3, r8
 800b7a2:	f77f af79 	ble.w	800b698 <_printf_float+0x23c>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	465a      	mov	r2, fp
 800b7aa:	4631      	mov	r1, r6
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	47b8      	blx	r7
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	f43f aeae 	beq.w	800b512 <_printf_float+0xb6>
 800b7b6:	f108 0801 	add.w	r8, r8, #1
 800b7ba:	e7ec      	b.n	800b796 <_printf_float+0x33a>
 800b7bc:	4642      	mov	r2, r8
 800b7be:	4631      	mov	r1, r6
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	47b8      	blx	r7
 800b7c4:	3001      	adds	r0, #1
 800b7c6:	d1c2      	bne.n	800b74e <_printf_float+0x2f2>
 800b7c8:	e6a3      	b.n	800b512 <_printf_float+0xb6>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4631      	mov	r1, r6
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	9206      	str	r2, [sp, #24]
 800b7d2:	47b8      	blx	r7
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	f43f ae9c 	beq.w	800b512 <_printf_float+0xb6>
 800b7da:	9a06      	ldr	r2, [sp, #24]
 800b7dc:	f10b 0b01 	add.w	fp, fp, #1
 800b7e0:	e7bb      	b.n	800b75a <_printf_float+0x2fe>
 800b7e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	47b8      	blx	r7
 800b7ec:	3001      	adds	r0, #1
 800b7ee:	d1c0      	bne.n	800b772 <_printf_float+0x316>
 800b7f0:	e68f      	b.n	800b512 <_printf_float+0xb6>
 800b7f2:	9a06      	ldr	r2, [sp, #24]
 800b7f4:	464b      	mov	r3, r9
 800b7f6:	4442      	add	r2, r8
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	47b8      	blx	r7
 800b7fe:	3001      	adds	r0, #1
 800b800:	d1c3      	bne.n	800b78a <_printf_float+0x32e>
 800b802:	e686      	b.n	800b512 <_printf_float+0xb6>
 800b804:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b808:	f1ba 0f01 	cmp.w	sl, #1
 800b80c:	dc01      	bgt.n	800b812 <_printf_float+0x3b6>
 800b80e:	07db      	lsls	r3, r3, #31
 800b810:	d536      	bpl.n	800b880 <_printf_float+0x424>
 800b812:	2301      	movs	r3, #1
 800b814:	4642      	mov	r2, r8
 800b816:	4631      	mov	r1, r6
 800b818:	4628      	mov	r0, r5
 800b81a:	47b8      	blx	r7
 800b81c:	3001      	adds	r0, #1
 800b81e:	f43f ae78 	beq.w	800b512 <_printf_float+0xb6>
 800b822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b826:	4631      	mov	r1, r6
 800b828:	4628      	mov	r0, r5
 800b82a:	47b8      	blx	r7
 800b82c:	3001      	adds	r0, #1
 800b82e:	f43f ae70 	beq.w	800b512 <_printf_float+0xb6>
 800b832:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b836:	2200      	movs	r2, #0
 800b838:	2300      	movs	r3, #0
 800b83a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b83e:	f7f5 f963 	bl	8000b08 <__aeabi_dcmpeq>
 800b842:	b9c0      	cbnz	r0, 800b876 <_printf_float+0x41a>
 800b844:	4653      	mov	r3, sl
 800b846:	f108 0201 	add.w	r2, r8, #1
 800b84a:	4631      	mov	r1, r6
 800b84c:	4628      	mov	r0, r5
 800b84e:	47b8      	blx	r7
 800b850:	3001      	adds	r0, #1
 800b852:	d10c      	bne.n	800b86e <_printf_float+0x412>
 800b854:	e65d      	b.n	800b512 <_printf_float+0xb6>
 800b856:	2301      	movs	r3, #1
 800b858:	465a      	mov	r2, fp
 800b85a:	4631      	mov	r1, r6
 800b85c:	4628      	mov	r0, r5
 800b85e:	47b8      	blx	r7
 800b860:	3001      	adds	r0, #1
 800b862:	f43f ae56 	beq.w	800b512 <_printf_float+0xb6>
 800b866:	f108 0801 	add.w	r8, r8, #1
 800b86a:	45d0      	cmp	r8, sl
 800b86c:	dbf3      	blt.n	800b856 <_printf_float+0x3fa>
 800b86e:	464b      	mov	r3, r9
 800b870:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b874:	e6df      	b.n	800b636 <_printf_float+0x1da>
 800b876:	f04f 0800 	mov.w	r8, #0
 800b87a:	f104 0b1a 	add.w	fp, r4, #26
 800b87e:	e7f4      	b.n	800b86a <_printf_float+0x40e>
 800b880:	2301      	movs	r3, #1
 800b882:	4642      	mov	r2, r8
 800b884:	e7e1      	b.n	800b84a <_printf_float+0x3ee>
 800b886:	2301      	movs	r3, #1
 800b888:	464a      	mov	r2, r9
 800b88a:	4631      	mov	r1, r6
 800b88c:	4628      	mov	r0, r5
 800b88e:	47b8      	blx	r7
 800b890:	3001      	adds	r0, #1
 800b892:	f43f ae3e 	beq.w	800b512 <_printf_float+0xb6>
 800b896:	f108 0801 	add.w	r8, r8, #1
 800b89a:	68e3      	ldr	r3, [r4, #12]
 800b89c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b89e:	1a5b      	subs	r3, r3, r1
 800b8a0:	4543      	cmp	r3, r8
 800b8a2:	dcf0      	bgt.n	800b886 <_printf_float+0x42a>
 800b8a4:	e6fc      	b.n	800b6a0 <_printf_float+0x244>
 800b8a6:	f04f 0800 	mov.w	r8, #0
 800b8aa:	f104 0919 	add.w	r9, r4, #25
 800b8ae:	e7f4      	b.n	800b89a <_printf_float+0x43e>

0800b8b0 <_printf_common>:
 800b8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b4:	4616      	mov	r6, r2
 800b8b6:	4698      	mov	r8, r3
 800b8b8:	688a      	ldr	r2, [r1, #8]
 800b8ba:	690b      	ldr	r3, [r1, #16]
 800b8bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	bfb8      	it	lt
 800b8c4:	4613      	movlt	r3, r2
 800b8c6:	6033      	str	r3, [r6, #0]
 800b8c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b8cc:	4607      	mov	r7, r0
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	b10a      	cbz	r2, 800b8d6 <_printf_common+0x26>
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	6033      	str	r3, [r6, #0]
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	0699      	lsls	r1, r3, #26
 800b8da:	bf42      	ittt	mi
 800b8dc:	6833      	ldrmi	r3, [r6, #0]
 800b8de:	3302      	addmi	r3, #2
 800b8e0:	6033      	strmi	r3, [r6, #0]
 800b8e2:	6825      	ldr	r5, [r4, #0]
 800b8e4:	f015 0506 	ands.w	r5, r5, #6
 800b8e8:	d106      	bne.n	800b8f8 <_printf_common+0x48>
 800b8ea:	f104 0a19 	add.w	sl, r4, #25
 800b8ee:	68e3      	ldr	r3, [r4, #12]
 800b8f0:	6832      	ldr	r2, [r6, #0]
 800b8f2:	1a9b      	subs	r3, r3, r2
 800b8f4:	42ab      	cmp	r3, r5
 800b8f6:	dc26      	bgt.n	800b946 <_printf_common+0x96>
 800b8f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b8fc:	6822      	ldr	r2, [r4, #0]
 800b8fe:	3b00      	subs	r3, #0
 800b900:	bf18      	it	ne
 800b902:	2301      	movne	r3, #1
 800b904:	0692      	lsls	r2, r2, #26
 800b906:	d42b      	bmi.n	800b960 <_printf_common+0xb0>
 800b908:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b90c:	4641      	mov	r1, r8
 800b90e:	4638      	mov	r0, r7
 800b910:	47c8      	blx	r9
 800b912:	3001      	adds	r0, #1
 800b914:	d01e      	beq.n	800b954 <_printf_common+0xa4>
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	6922      	ldr	r2, [r4, #16]
 800b91a:	f003 0306 	and.w	r3, r3, #6
 800b91e:	2b04      	cmp	r3, #4
 800b920:	bf02      	ittt	eq
 800b922:	68e5      	ldreq	r5, [r4, #12]
 800b924:	6833      	ldreq	r3, [r6, #0]
 800b926:	1aed      	subeq	r5, r5, r3
 800b928:	68a3      	ldr	r3, [r4, #8]
 800b92a:	bf0c      	ite	eq
 800b92c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b930:	2500      	movne	r5, #0
 800b932:	4293      	cmp	r3, r2
 800b934:	bfc4      	itt	gt
 800b936:	1a9b      	subgt	r3, r3, r2
 800b938:	18ed      	addgt	r5, r5, r3
 800b93a:	2600      	movs	r6, #0
 800b93c:	341a      	adds	r4, #26
 800b93e:	42b5      	cmp	r5, r6
 800b940:	d11a      	bne.n	800b978 <_printf_common+0xc8>
 800b942:	2000      	movs	r0, #0
 800b944:	e008      	b.n	800b958 <_printf_common+0xa8>
 800b946:	2301      	movs	r3, #1
 800b948:	4652      	mov	r2, sl
 800b94a:	4641      	mov	r1, r8
 800b94c:	4638      	mov	r0, r7
 800b94e:	47c8      	blx	r9
 800b950:	3001      	adds	r0, #1
 800b952:	d103      	bne.n	800b95c <_printf_common+0xac>
 800b954:	f04f 30ff 	mov.w	r0, #4294967295
 800b958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b95c:	3501      	adds	r5, #1
 800b95e:	e7c6      	b.n	800b8ee <_printf_common+0x3e>
 800b960:	18e1      	adds	r1, r4, r3
 800b962:	1c5a      	adds	r2, r3, #1
 800b964:	2030      	movs	r0, #48	@ 0x30
 800b966:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b96a:	4422      	add	r2, r4
 800b96c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b970:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b974:	3302      	adds	r3, #2
 800b976:	e7c7      	b.n	800b908 <_printf_common+0x58>
 800b978:	2301      	movs	r3, #1
 800b97a:	4622      	mov	r2, r4
 800b97c:	4641      	mov	r1, r8
 800b97e:	4638      	mov	r0, r7
 800b980:	47c8      	blx	r9
 800b982:	3001      	adds	r0, #1
 800b984:	d0e6      	beq.n	800b954 <_printf_common+0xa4>
 800b986:	3601      	adds	r6, #1
 800b988:	e7d9      	b.n	800b93e <_printf_common+0x8e>
	...

0800b98c <_printf_i>:
 800b98c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b990:	7e0f      	ldrb	r7, [r1, #24]
 800b992:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b994:	2f78      	cmp	r7, #120	@ 0x78
 800b996:	4691      	mov	r9, r2
 800b998:	4680      	mov	r8, r0
 800b99a:	460c      	mov	r4, r1
 800b99c:	469a      	mov	sl, r3
 800b99e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b9a2:	d807      	bhi.n	800b9b4 <_printf_i+0x28>
 800b9a4:	2f62      	cmp	r7, #98	@ 0x62
 800b9a6:	d80a      	bhi.n	800b9be <_printf_i+0x32>
 800b9a8:	2f00      	cmp	r7, #0
 800b9aa:	f000 80d2 	beq.w	800bb52 <_printf_i+0x1c6>
 800b9ae:	2f58      	cmp	r7, #88	@ 0x58
 800b9b0:	f000 80b9 	beq.w	800bb26 <_printf_i+0x19a>
 800b9b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b9b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b9bc:	e03a      	b.n	800ba34 <_printf_i+0xa8>
 800b9be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b9c2:	2b15      	cmp	r3, #21
 800b9c4:	d8f6      	bhi.n	800b9b4 <_printf_i+0x28>
 800b9c6:	a101      	add	r1, pc, #4	@ (adr r1, 800b9cc <_printf_i+0x40>)
 800b9c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9cc:	0800ba25 	.word	0x0800ba25
 800b9d0:	0800ba39 	.word	0x0800ba39
 800b9d4:	0800b9b5 	.word	0x0800b9b5
 800b9d8:	0800b9b5 	.word	0x0800b9b5
 800b9dc:	0800b9b5 	.word	0x0800b9b5
 800b9e0:	0800b9b5 	.word	0x0800b9b5
 800b9e4:	0800ba39 	.word	0x0800ba39
 800b9e8:	0800b9b5 	.word	0x0800b9b5
 800b9ec:	0800b9b5 	.word	0x0800b9b5
 800b9f0:	0800b9b5 	.word	0x0800b9b5
 800b9f4:	0800b9b5 	.word	0x0800b9b5
 800b9f8:	0800bb39 	.word	0x0800bb39
 800b9fc:	0800ba63 	.word	0x0800ba63
 800ba00:	0800baf3 	.word	0x0800baf3
 800ba04:	0800b9b5 	.word	0x0800b9b5
 800ba08:	0800b9b5 	.word	0x0800b9b5
 800ba0c:	0800bb5b 	.word	0x0800bb5b
 800ba10:	0800b9b5 	.word	0x0800b9b5
 800ba14:	0800ba63 	.word	0x0800ba63
 800ba18:	0800b9b5 	.word	0x0800b9b5
 800ba1c:	0800b9b5 	.word	0x0800b9b5
 800ba20:	0800bafb 	.word	0x0800bafb
 800ba24:	6833      	ldr	r3, [r6, #0]
 800ba26:	1d1a      	adds	r2, r3, #4
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	6032      	str	r2, [r6, #0]
 800ba2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba34:	2301      	movs	r3, #1
 800ba36:	e09d      	b.n	800bb74 <_printf_i+0x1e8>
 800ba38:	6833      	ldr	r3, [r6, #0]
 800ba3a:	6820      	ldr	r0, [r4, #0]
 800ba3c:	1d19      	adds	r1, r3, #4
 800ba3e:	6031      	str	r1, [r6, #0]
 800ba40:	0606      	lsls	r6, r0, #24
 800ba42:	d501      	bpl.n	800ba48 <_printf_i+0xbc>
 800ba44:	681d      	ldr	r5, [r3, #0]
 800ba46:	e003      	b.n	800ba50 <_printf_i+0xc4>
 800ba48:	0645      	lsls	r5, r0, #25
 800ba4a:	d5fb      	bpl.n	800ba44 <_printf_i+0xb8>
 800ba4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ba50:	2d00      	cmp	r5, #0
 800ba52:	da03      	bge.n	800ba5c <_printf_i+0xd0>
 800ba54:	232d      	movs	r3, #45	@ 0x2d
 800ba56:	426d      	negs	r5, r5
 800ba58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba5c:	4859      	ldr	r0, [pc, #356]	@ (800bbc4 <_printf_i+0x238>)
 800ba5e:	230a      	movs	r3, #10
 800ba60:	e011      	b.n	800ba86 <_printf_i+0xfa>
 800ba62:	6821      	ldr	r1, [r4, #0]
 800ba64:	6833      	ldr	r3, [r6, #0]
 800ba66:	0608      	lsls	r0, r1, #24
 800ba68:	f853 5b04 	ldr.w	r5, [r3], #4
 800ba6c:	d402      	bmi.n	800ba74 <_printf_i+0xe8>
 800ba6e:	0649      	lsls	r1, r1, #25
 800ba70:	bf48      	it	mi
 800ba72:	b2ad      	uxthmi	r5, r5
 800ba74:	2f6f      	cmp	r7, #111	@ 0x6f
 800ba76:	4853      	ldr	r0, [pc, #332]	@ (800bbc4 <_printf_i+0x238>)
 800ba78:	6033      	str	r3, [r6, #0]
 800ba7a:	bf14      	ite	ne
 800ba7c:	230a      	movne	r3, #10
 800ba7e:	2308      	moveq	r3, #8
 800ba80:	2100      	movs	r1, #0
 800ba82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ba86:	6866      	ldr	r6, [r4, #4]
 800ba88:	60a6      	str	r6, [r4, #8]
 800ba8a:	2e00      	cmp	r6, #0
 800ba8c:	bfa2      	ittt	ge
 800ba8e:	6821      	ldrge	r1, [r4, #0]
 800ba90:	f021 0104 	bicge.w	r1, r1, #4
 800ba94:	6021      	strge	r1, [r4, #0]
 800ba96:	b90d      	cbnz	r5, 800ba9c <_printf_i+0x110>
 800ba98:	2e00      	cmp	r6, #0
 800ba9a:	d04b      	beq.n	800bb34 <_printf_i+0x1a8>
 800ba9c:	4616      	mov	r6, r2
 800ba9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800baa2:	fb03 5711 	mls	r7, r3, r1, r5
 800baa6:	5dc7      	ldrb	r7, [r0, r7]
 800baa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800baac:	462f      	mov	r7, r5
 800baae:	42bb      	cmp	r3, r7
 800bab0:	460d      	mov	r5, r1
 800bab2:	d9f4      	bls.n	800ba9e <_printf_i+0x112>
 800bab4:	2b08      	cmp	r3, #8
 800bab6:	d10b      	bne.n	800bad0 <_printf_i+0x144>
 800bab8:	6823      	ldr	r3, [r4, #0]
 800baba:	07df      	lsls	r7, r3, #31
 800babc:	d508      	bpl.n	800bad0 <_printf_i+0x144>
 800babe:	6923      	ldr	r3, [r4, #16]
 800bac0:	6861      	ldr	r1, [r4, #4]
 800bac2:	4299      	cmp	r1, r3
 800bac4:	bfde      	ittt	le
 800bac6:	2330      	movle	r3, #48	@ 0x30
 800bac8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bacc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bad0:	1b92      	subs	r2, r2, r6
 800bad2:	6122      	str	r2, [r4, #16]
 800bad4:	f8cd a000 	str.w	sl, [sp]
 800bad8:	464b      	mov	r3, r9
 800bada:	aa03      	add	r2, sp, #12
 800badc:	4621      	mov	r1, r4
 800bade:	4640      	mov	r0, r8
 800bae0:	f7ff fee6 	bl	800b8b0 <_printf_common>
 800bae4:	3001      	adds	r0, #1
 800bae6:	d14a      	bne.n	800bb7e <_printf_i+0x1f2>
 800bae8:	f04f 30ff 	mov.w	r0, #4294967295
 800baec:	b004      	add	sp, #16
 800baee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	f043 0320 	orr.w	r3, r3, #32
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	4833      	ldr	r0, [pc, #204]	@ (800bbc8 <_printf_i+0x23c>)
 800bafc:	2778      	movs	r7, #120	@ 0x78
 800bafe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	6831      	ldr	r1, [r6, #0]
 800bb06:	061f      	lsls	r7, r3, #24
 800bb08:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb0c:	d402      	bmi.n	800bb14 <_printf_i+0x188>
 800bb0e:	065f      	lsls	r7, r3, #25
 800bb10:	bf48      	it	mi
 800bb12:	b2ad      	uxthmi	r5, r5
 800bb14:	6031      	str	r1, [r6, #0]
 800bb16:	07d9      	lsls	r1, r3, #31
 800bb18:	bf44      	itt	mi
 800bb1a:	f043 0320 	orrmi.w	r3, r3, #32
 800bb1e:	6023      	strmi	r3, [r4, #0]
 800bb20:	b11d      	cbz	r5, 800bb2a <_printf_i+0x19e>
 800bb22:	2310      	movs	r3, #16
 800bb24:	e7ac      	b.n	800ba80 <_printf_i+0xf4>
 800bb26:	4827      	ldr	r0, [pc, #156]	@ (800bbc4 <_printf_i+0x238>)
 800bb28:	e7e9      	b.n	800bafe <_printf_i+0x172>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	f023 0320 	bic.w	r3, r3, #32
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	e7f6      	b.n	800bb22 <_printf_i+0x196>
 800bb34:	4616      	mov	r6, r2
 800bb36:	e7bd      	b.n	800bab4 <_printf_i+0x128>
 800bb38:	6833      	ldr	r3, [r6, #0]
 800bb3a:	6825      	ldr	r5, [r4, #0]
 800bb3c:	6961      	ldr	r1, [r4, #20]
 800bb3e:	1d18      	adds	r0, r3, #4
 800bb40:	6030      	str	r0, [r6, #0]
 800bb42:	062e      	lsls	r6, r5, #24
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	d501      	bpl.n	800bb4c <_printf_i+0x1c0>
 800bb48:	6019      	str	r1, [r3, #0]
 800bb4a:	e002      	b.n	800bb52 <_printf_i+0x1c6>
 800bb4c:	0668      	lsls	r0, r5, #25
 800bb4e:	d5fb      	bpl.n	800bb48 <_printf_i+0x1bc>
 800bb50:	8019      	strh	r1, [r3, #0]
 800bb52:	2300      	movs	r3, #0
 800bb54:	6123      	str	r3, [r4, #16]
 800bb56:	4616      	mov	r6, r2
 800bb58:	e7bc      	b.n	800bad4 <_printf_i+0x148>
 800bb5a:	6833      	ldr	r3, [r6, #0]
 800bb5c:	1d1a      	adds	r2, r3, #4
 800bb5e:	6032      	str	r2, [r6, #0]
 800bb60:	681e      	ldr	r6, [r3, #0]
 800bb62:	6862      	ldr	r2, [r4, #4]
 800bb64:	2100      	movs	r1, #0
 800bb66:	4630      	mov	r0, r6
 800bb68:	f7f4 fb52 	bl	8000210 <memchr>
 800bb6c:	b108      	cbz	r0, 800bb72 <_printf_i+0x1e6>
 800bb6e:	1b80      	subs	r0, r0, r6
 800bb70:	6060      	str	r0, [r4, #4]
 800bb72:	6863      	ldr	r3, [r4, #4]
 800bb74:	6123      	str	r3, [r4, #16]
 800bb76:	2300      	movs	r3, #0
 800bb78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb7c:	e7aa      	b.n	800bad4 <_printf_i+0x148>
 800bb7e:	6923      	ldr	r3, [r4, #16]
 800bb80:	4632      	mov	r2, r6
 800bb82:	4649      	mov	r1, r9
 800bb84:	4640      	mov	r0, r8
 800bb86:	47d0      	blx	sl
 800bb88:	3001      	adds	r0, #1
 800bb8a:	d0ad      	beq.n	800bae8 <_printf_i+0x15c>
 800bb8c:	6823      	ldr	r3, [r4, #0]
 800bb8e:	079b      	lsls	r3, r3, #30
 800bb90:	d413      	bmi.n	800bbba <_printf_i+0x22e>
 800bb92:	68e0      	ldr	r0, [r4, #12]
 800bb94:	9b03      	ldr	r3, [sp, #12]
 800bb96:	4298      	cmp	r0, r3
 800bb98:	bfb8      	it	lt
 800bb9a:	4618      	movlt	r0, r3
 800bb9c:	e7a6      	b.n	800baec <_printf_i+0x160>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	4632      	mov	r2, r6
 800bba2:	4649      	mov	r1, r9
 800bba4:	4640      	mov	r0, r8
 800bba6:	47d0      	blx	sl
 800bba8:	3001      	adds	r0, #1
 800bbaa:	d09d      	beq.n	800bae8 <_printf_i+0x15c>
 800bbac:	3501      	adds	r5, #1
 800bbae:	68e3      	ldr	r3, [r4, #12]
 800bbb0:	9903      	ldr	r1, [sp, #12]
 800bbb2:	1a5b      	subs	r3, r3, r1
 800bbb4:	42ab      	cmp	r3, r5
 800bbb6:	dcf2      	bgt.n	800bb9e <_printf_i+0x212>
 800bbb8:	e7eb      	b.n	800bb92 <_printf_i+0x206>
 800bbba:	2500      	movs	r5, #0
 800bbbc:	f104 0619 	add.w	r6, r4, #25
 800bbc0:	e7f5      	b.n	800bbae <_printf_i+0x222>
 800bbc2:	bf00      	nop
 800bbc4:	08010932 	.word	0x08010932
 800bbc8:	08010943 	.word	0x08010943

0800bbcc <_scanf_float>:
 800bbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	b087      	sub	sp, #28
 800bbd2:	4617      	mov	r7, r2
 800bbd4:	9303      	str	r3, [sp, #12]
 800bbd6:	688b      	ldr	r3, [r1, #8]
 800bbd8:	1e5a      	subs	r2, r3, #1
 800bbda:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bbde:	bf81      	itttt	hi
 800bbe0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bbe4:	eb03 0b05 	addhi.w	fp, r3, r5
 800bbe8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bbec:	608b      	strhi	r3, [r1, #8]
 800bbee:	680b      	ldr	r3, [r1, #0]
 800bbf0:	460a      	mov	r2, r1
 800bbf2:	f04f 0500 	mov.w	r5, #0
 800bbf6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bbfa:	f842 3b1c 	str.w	r3, [r2], #28
 800bbfe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bc02:	4680      	mov	r8, r0
 800bc04:	460c      	mov	r4, r1
 800bc06:	bf98      	it	ls
 800bc08:	f04f 0b00 	movls.w	fp, #0
 800bc0c:	9201      	str	r2, [sp, #4]
 800bc0e:	4616      	mov	r6, r2
 800bc10:	46aa      	mov	sl, r5
 800bc12:	46a9      	mov	r9, r5
 800bc14:	9502      	str	r5, [sp, #8]
 800bc16:	68a2      	ldr	r2, [r4, #8]
 800bc18:	b152      	cbz	r2, 800bc30 <_scanf_float+0x64>
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	2b4e      	cmp	r3, #78	@ 0x4e
 800bc20:	d864      	bhi.n	800bcec <_scanf_float+0x120>
 800bc22:	2b40      	cmp	r3, #64	@ 0x40
 800bc24:	d83c      	bhi.n	800bca0 <_scanf_float+0xd4>
 800bc26:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bc2a:	b2c8      	uxtb	r0, r1
 800bc2c:	280e      	cmp	r0, #14
 800bc2e:	d93a      	bls.n	800bca6 <_scanf_float+0xda>
 800bc30:	f1b9 0f00 	cmp.w	r9, #0
 800bc34:	d003      	beq.n	800bc3e <_scanf_float+0x72>
 800bc36:	6823      	ldr	r3, [r4, #0]
 800bc38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc42:	f1ba 0f01 	cmp.w	sl, #1
 800bc46:	f200 8117 	bhi.w	800be78 <_scanf_float+0x2ac>
 800bc4a:	9b01      	ldr	r3, [sp, #4]
 800bc4c:	429e      	cmp	r6, r3
 800bc4e:	f200 8108 	bhi.w	800be62 <_scanf_float+0x296>
 800bc52:	2001      	movs	r0, #1
 800bc54:	b007      	add	sp, #28
 800bc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bc5e:	2a0d      	cmp	r2, #13
 800bc60:	d8e6      	bhi.n	800bc30 <_scanf_float+0x64>
 800bc62:	a101      	add	r1, pc, #4	@ (adr r1, 800bc68 <_scanf_float+0x9c>)
 800bc64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bc68:	0800bdaf 	.word	0x0800bdaf
 800bc6c:	0800bc31 	.word	0x0800bc31
 800bc70:	0800bc31 	.word	0x0800bc31
 800bc74:	0800bc31 	.word	0x0800bc31
 800bc78:	0800be0f 	.word	0x0800be0f
 800bc7c:	0800bde7 	.word	0x0800bde7
 800bc80:	0800bc31 	.word	0x0800bc31
 800bc84:	0800bc31 	.word	0x0800bc31
 800bc88:	0800bdbd 	.word	0x0800bdbd
 800bc8c:	0800bc31 	.word	0x0800bc31
 800bc90:	0800bc31 	.word	0x0800bc31
 800bc94:	0800bc31 	.word	0x0800bc31
 800bc98:	0800bc31 	.word	0x0800bc31
 800bc9c:	0800bd75 	.word	0x0800bd75
 800bca0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bca4:	e7db      	b.n	800bc5e <_scanf_float+0x92>
 800bca6:	290e      	cmp	r1, #14
 800bca8:	d8c2      	bhi.n	800bc30 <_scanf_float+0x64>
 800bcaa:	a001      	add	r0, pc, #4	@ (adr r0, 800bcb0 <_scanf_float+0xe4>)
 800bcac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bcb0:	0800bd65 	.word	0x0800bd65
 800bcb4:	0800bc31 	.word	0x0800bc31
 800bcb8:	0800bd65 	.word	0x0800bd65
 800bcbc:	0800bdfb 	.word	0x0800bdfb
 800bcc0:	0800bc31 	.word	0x0800bc31
 800bcc4:	0800bd0d 	.word	0x0800bd0d
 800bcc8:	0800bd4b 	.word	0x0800bd4b
 800bccc:	0800bd4b 	.word	0x0800bd4b
 800bcd0:	0800bd4b 	.word	0x0800bd4b
 800bcd4:	0800bd4b 	.word	0x0800bd4b
 800bcd8:	0800bd4b 	.word	0x0800bd4b
 800bcdc:	0800bd4b 	.word	0x0800bd4b
 800bce0:	0800bd4b 	.word	0x0800bd4b
 800bce4:	0800bd4b 	.word	0x0800bd4b
 800bce8:	0800bd4b 	.word	0x0800bd4b
 800bcec:	2b6e      	cmp	r3, #110	@ 0x6e
 800bcee:	d809      	bhi.n	800bd04 <_scanf_float+0x138>
 800bcf0:	2b60      	cmp	r3, #96	@ 0x60
 800bcf2:	d8b2      	bhi.n	800bc5a <_scanf_float+0x8e>
 800bcf4:	2b54      	cmp	r3, #84	@ 0x54
 800bcf6:	d07b      	beq.n	800bdf0 <_scanf_float+0x224>
 800bcf8:	2b59      	cmp	r3, #89	@ 0x59
 800bcfa:	d199      	bne.n	800bc30 <_scanf_float+0x64>
 800bcfc:	2d07      	cmp	r5, #7
 800bcfe:	d197      	bne.n	800bc30 <_scanf_float+0x64>
 800bd00:	2508      	movs	r5, #8
 800bd02:	e02c      	b.n	800bd5e <_scanf_float+0x192>
 800bd04:	2b74      	cmp	r3, #116	@ 0x74
 800bd06:	d073      	beq.n	800bdf0 <_scanf_float+0x224>
 800bd08:	2b79      	cmp	r3, #121	@ 0x79
 800bd0a:	e7f6      	b.n	800bcfa <_scanf_float+0x12e>
 800bd0c:	6821      	ldr	r1, [r4, #0]
 800bd0e:	05c8      	lsls	r0, r1, #23
 800bd10:	d51b      	bpl.n	800bd4a <_scanf_float+0x17e>
 800bd12:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bd16:	6021      	str	r1, [r4, #0]
 800bd18:	f109 0901 	add.w	r9, r9, #1
 800bd1c:	f1bb 0f00 	cmp.w	fp, #0
 800bd20:	d003      	beq.n	800bd2a <_scanf_float+0x15e>
 800bd22:	3201      	adds	r2, #1
 800bd24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd28:	60a2      	str	r2, [r4, #8]
 800bd2a:	68a3      	ldr	r3, [r4, #8]
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	60a3      	str	r3, [r4, #8]
 800bd30:	6923      	ldr	r3, [r4, #16]
 800bd32:	3301      	adds	r3, #1
 800bd34:	6123      	str	r3, [r4, #16]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	607b      	str	r3, [r7, #4]
 800bd3e:	f340 8087 	ble.w	800be50 <_scanf_float+0x284>
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	3301      	adds	r3, #1
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	e765      	b.n	800bc16 <_scanf_float+0x4a>
 800bd4a:	eb1a 0105 	adds.w	r1, sl, r5
 800bd4e:	f47f af6f 	bne.w	800bc30 <_scanf_float+0x64>
 800bd52:	6822      	ldr	r2, [r4, #0]
 800bd54:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bd58:	6022      	str	r2, [r4, #0]
 800bd5a:	460d      	mov	r5, r1
 800bd5c:	468a      	mov	sl, r1
 800bd5e:	f806 3b01 	strb.w	r3, [r6], #1
 800bd62:	e7e2      	b.n	800bd2a <_scanf_float+0x15e>
 800bd64:	6822      	ldr	r2, [r4, #0]
 800bd66:	0610      	lsls	r0, r2, #24
 800bd68:	f57f af62 	bpl.w	800bc30 <_scanf_float+0x64>
 800bd6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bd70:	6022      	str	r2, [r4, #0]
 800bd72:	e7f4      	b.n	800bd5e <_scanf_float+0x192>
 800bd74:	f1ba 0f00 	cmp.w	sl, #0
 800bd78:	d10e      	bne.n	800bd98 <_scanf_float+0x1cc>
 800bd7a:	f1b9 0f00 	cmp.w	r9, #0
 800bd7e:	d10e      	bne.n	800bd9e <_scanf_float+0x1d2>
 800bd80:	6822      	ldr	r2, [r4, #0]
 800bd82:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bd86:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bd8a:	d108      	bne.n	800bd9e <_scanf_float+0x1d2>
 800bd8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bd90:	6022      	str	r2, [r4, #0]
 800bd92:	f04f 0a01 	mov.w	sl, #1
 800bd96:	e7e2      	b.n	800bd5e <_scanf_float+0x192>
 800bd98:	f1ba 0f02 	cmp.w	sl, #2
 800bd9c:	d055      	beq.n	800be4a <_scanf_float+0x27e>
 800bd9e:	2d01      	cmp	r5, #1
 800bda0:	d002      	beq.n	800bda8 <_scanf_float+0x1dc>
 800bda2:	2d04      	cmp	r5, #4
 800bda4:	f47f af44 	bne.w	800bc30 <_scanf_float+0x64>
 800bda8:	3501      	adds	r5, #1
 800bdaa:	b2ed      	uxtb	r5, r5
 800bdac:	e7d7      	b.n	800bd5e <_scanf_float+0x192>
 800bdae:	f1ba 0f01 	cmp.w	sl, #1
 800bdb2:	f47f af3d 	bne.w	800bc30 <_scanf_float+0x64>
 800bdb6:	f04f 0a02 	mov.w	sl, #2
 800bdba:	e7d0      	b.n	800bd5e <_scanf_float+0x192>
 800bdbc:	b97d      	cbnz	r5, 800bdde <_scanf_float+0x212>
 800bdbe:	f1b9 0f00 	cmp.w	r9, #0
 800bdc2:	f47f af38 	bne.w	800bc36 <_scanf_float+0x6a>
 800bdc6:	6822      	ldr	r2, [r4, #0]
 800bdc8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bdcc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bdd0:	f040 8108 	bne.w	800bfe4 <_scanf_float+0x418>
 800bdd4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bdd8:	6022      	str	r2, [r4, #0]
 800bdda:	2501      	movs	r5, #1
 800bddc:	e7bf      	b.n	800bd5e <_scanf_float+0x192>
 800bdde:	2d03      	cmp	r5, #3
 800bde0:	d0e2      	beq.n	800bda8 <_scanf_float+0x1dc>
 800bde2:	2d05      	cmp	r5, #5
 800bde4:	e7de      	b.n	800bda4 <_scanf_float+0x1d8>
 800bde6:	2d02      	cmp	r5, #2
 800bde8:	f47f af22 	bne.w	800bc30 <_scanf_float+0x64>
 800bdec:	2503      	movs	r5, #3
 800bdee:	e7b6      	b.n	800bd5e <_scanf_float+0x192>
 800bdf0:	2d06      	cmp	r5, #6
 800bdf2:	f47f af1d 	bne.w	800bc30 <_scanf_float+0x64>
 800bdf6:	2507      	movs	r5, #7
 800bdf8:	e7b1      	b.n	800bd5e <_scanf_float+0x192>
 800bdfa:	6822      	ldr	r2, [r4, #0]
 800bdfc:	0591      	lsls	r1, r2, #22
 800bdfe:	f57f af17 	bpl.w	800bc30 <_scanf_float+0x64>
 800be02:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800be06:	6022      	str	r2, [r4, #0]
 800be08:	f8cd 9008 	str.w	r9, [sp, #8]
 800be0c:	e7a7      	b.n	800bd5e <_scanf_float+0x192>
 800be0e:	6822      	ldr	r2, [r4, #0]
 800be10:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800be14:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800be18:	d006      	beq.n	800be28 <_scanf_float+0x25c>
 800be1a:	0550      	lsls	r0, r2, #21
 800be1c:	f57f af08 	bpl.w	800bc30 <_scanf_float+0x64>
 800be20:	f1b9 0f00 	cmp.w	r9, #0
 800be24:	f000 80de 	beq.w	800bfe4 <_scanf_float+0x418>
 800be28:	0591      	lsls	r1, r2, #22
 800be2a:	bf58      	it	pl
 800be2c:	9902      	ldrpl	r1, [sp, #8]
 800be2e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800be32:	bf58      	it	pl
 800be34:	eba9 0101 	subpl.w	r1, r9, r1
 800be38:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800be3c:	bf58      	it	pl
 800be3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800be42:	6022      	str	r2, [r4, #0]
 800be44:	f04f 0900 	mov.w	r9, #0
 800be48:	e789      	b.n	800bd5e <_scanf_float+0x192>
 800be4a:	f04f 0a03 	mov.w	sl, #3
 800be4e:	e786      	b.n	800bd5e <_scanf_float+0x192>
 800be50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800be54:	4639      	mov	r1, r7
 800be56:	4640      	mov	r0, r8
 800be58:	4798      	blx	r3
 800be5a:	2800      	cmp	r0, #0
 800be5c:	f43f aedb 	beq.w	800bc16 <_scanf_float+0x4a>
 800be60:	e6e6      	b.n	800bc30 <_scanf_float+0x64>
 800be62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800be6a:	463a      	mov	r2, r7
 800be6c:	4640      	mov	r0, r8
 800be6e:	4798      	blx	r3
 800be70:	6923      	ldr	r3, [r4, #16]
 800be72:	3b01      	subs	r3, #1
 800be74:	6123      	str	r3, [r4, #16]
 800be76:	e6e8      	b.n	800bc4a <_scanf_float+0x7e>
 800be78:	1e6b      	subs	r3, r5, #1
 800be7a:	2b06      	cmp	r3, #6
 800be7c:	d824      	bhi.n	800bec8 <_scanf_float+0x2fc>
 800be7e:	2d02      	cmp	r5, #2
 800be80:	d836      	bhi.n	800bef0 <_scanf_float+0x324>
 800be82:	9b01      	ldr	r3, [sp, #4]
 800be84:	429e      	cmp	r6, r3
 800be86:	f67f aee4 	bls.w	800bc52 <_scanf_float+0x86>
 800be8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800be8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800be92:	463a      	mov	r2, r7
 800be94:	4640      	mov	r0, r8
 800be96:	4798      	blx	r3
 800be98:	6923      	ldr	r3, [r4, #16]
 800be9a:	3b01      	subs	r3, #1
 800be9c:	6123      	str	r3, [r4, #16]
 800be9e:	e7f0      	b.n	800be82 <_scanf_float+0x2b6>
 800bea0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bea4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bea8:	463a      	mov	r2, r7
 800beaa:	4640      	mov	r0, r8
 800beac:	4798      	blx	r3
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	3b01      	subs	r3, #1
 800beb2:	6123      	str	r3, [r4, #16]
 800beb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800beb8:	fa5f fa8a 	uxtb.w	sl, sl
 800bebc:	f1ba 0f02 	cmp.w	sl, #2
 800bec0:	d1ee      	bne.n	800bea0 <_scanf_float+0x2d4>
 800bec2:	3d03      	subs	r5, #3
 800bec4:	b2ed      	uxtb	r5, r5
 800bec6:	1b76      	subs	r6, r6, r5
 800bec8:	6823      	ldr	r3, [r4, #0]
 800beca:	05da      	lsls	r2, r3, #23
 800becc:	d530      	bpl.n	800bf30 <_scanf_float+0x364>
 800bece:	055b      	lsls	r3, r3, #21
 800bed0:	d511      	bpl.n	800bef6 <_scanf_float+0x32a>
 800bed2:	9b01      	ldr	r3, [sp, #4]
 800bed4:	429e      	cmp	r6, r3
 800bed6:	f67f aebc 	bls.w	800bc52 <_scanf_float+0x86>
 800beda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bede:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bee2:	463a      	mov	r2, r7
 800bee4:	4640      	mov	r0, r8
 800bee6:	4798      	blx	r3
 800bee8:	6923      	ldr	r3, [r4, #16]
 800beea:	3b01      	subs	r3, #1
 800beec:	6123      	str	r3, [r4, #16]
 800beee:	e7f0      	b.n	800bed2 <_scanf_float+0x306>
 800bef0:	46aa      	mov	sl, r5
 800bef2:	46b3      	mov	fp, r6
 800bef4:	e7de      	b.n	800beb4 <_scanf_float+0x2e8>
 800bef6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800befa:	6923      	ldr	r3, [r4, #16]
 800befc:	2965      	cmp	r1, #101	@ 0x65
 800befe:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf02:	f106 35ff 	add.w	r5, r6, #4294967295
 800bf06:	6123      	str	r3, [r4, #16]
 800bf08:	d00c      	beq.n	800bf24 <_scanf_float+0x358>
 800bf0a:	2945      	cmp	r1, #69	@ 0x45
 800bf0c:	d00a      	beq.n	800bf24 <_scanf_float+0x358>
 800bf0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bf12:	463a      	mov	r2, r7
 800bf14:	4640      	mov	r0, r8
 800bf16:	4798      	blx	r3
 800bf18:	6923      	ldr	r3, [r4, #16]
 800bf1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	1eb5      	subs	r5, r6, #2
 800bf22:	6123      	str	r3, [r4, #16]
 800bf24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bf28:	463a      	mov	r2, r7
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	4798      	blx	r3
 800bf2e:	462e      	mov	r6, r5
 800bf30:	6822      	ldr	r2, [r4, #0]
 800bf32:	f012 0210 	ands.w	r2, r2, #16
 800bf36:	d001      	beq.n	800bf3c <_scanf_float+0x370>
 800bf38:	2000      	movs	r0, #0
 800bf3a:	e68b      	b.n	800bc54 <_scanf_float+0x88>
 800bf3c:	7032      	strb	r2, [r6, #0]
 800bf3e:	6823      	ldr	r3, [r4, #0]
 800bf40:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bf44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf48:	d11c      	bne.n	800bf84 <_scanf_float+0x3b8>
 800bf4a:	9b02      	ldr	r3, [sp, #8]
 800bf4c:	454b      	cmp	r3, r9
 800bf4e:	eba3 0209 	sub.w	r2, r3, r9
 800bf52:	d123      	bne.n	800bf9c <_scanf_float+0x3d0>
 800bf54:	9901      	ldr	r1, [sp, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	4640      	mov	r0, r8
 800bf5a:	f7ff f975 	bl	800b248 <_strtod_r>
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	6821      	ldr	r1, [r4, #0]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f011 0f02 	tst.w	r1, #2
 800bf68:	ec57 6b10 	vmov	r6, r7, d0
 800bf6c:	f103 0204 	add.w	r2, r3, #4
 800bf70:	d01f      	beq.n	800bfb2 <_scanf_float+0x3e6>
 800bf72:	9903      	ldr	r1, [sp, #12]
 800bf74:	600a      	str	r2, [r1, #0]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	e9c3 6700 	strd	r6, r7, [r3]
 800bf7c:	68e3      	ldr	r3, [r4, #12]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	60e3      	str	r3, [r4, #12]
 800bf82:	e7d9      	b.n	800bf38 <_scanf_float+0x36c>
 800bf84:	9b04      	ldr	r3, [sp, #16]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d0e4      	beq.n	800bf54 <_scanf_float+0x388>
 800bf8a:	9905      	ldr	r1, [sp, #20]
 800bf8c:	230a      	movs	r3, #10
 800bf8e:	3101      	adds	r1, #1
 800bf90:	4640      	mov	r0, r8
 800bf92:	f003 f925 	bl	800f1e0 <_strtol_r>
 800bf96:	9b04      	ldr	r3, [sp, #16]
 800bf98:	9e05      	ldr	r6, [sp, #20]
 800bf9a:	1ac2      	subs	r2, r0, r3
 800bf9c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bfa0:	429e      	cmp	r6, r3
 800bfa2:	bf28      	it	cs
 800bfa4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bfa8:	4910      	ldr	r1, [pc, #64]	@ (800bfec <_scanf_float+0x420>)
 800bfaa:	4630      	mov	r0, r6
 800bfac:	f000 fca0 	bl	800c8f0 <siprintf>
 800bfb0:	e7d0      	b.n	800bf54 <_scanf_float+0x388>
 800bfb2:	f011 0f04 	tst.w	r1, #4
 800bfb6:	9903      	ldr	r1, [sp, #12]
 800bfb8:	600a      	str	r2, [r1, #0]
 800bfba:	d1dc      	bne.n	800bf76 <_scanf_float+0x3aa>
 800bfbc:	681d      	ldr	r5, [r3, #0]
 800bfbe:	4632      	mov	r2, r6
 800bfc0:	463b      	mov	r3, r7
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	4639      	mov	r1, r7
 800bfc6:	f7f4 fdd1 	bl	8000b6c <__aeabi_dcmpun>
 800bfca:	b128      	cbz	r0, 800bfd8 <_scanf_float+0x40c>
 800bfcc:	4808      	ldr	r0, [pc, #32]	@ (800bff0 <_scanf_float+0x424>)
 800bfce:	f001 f91f 	bl	800d210 <nanf>
 800bfd2:	ed85 0a00 	vstr	s0, [r5]
 800bfd6:	e7d1      	b.n	800bf7c <_scanf_float+0x3b0>
 800bfd8:	4630      	mov	r0, r6
 800bfda:	4639      	mov	r1, r7
 800bfdc:	f7f4 fe24 	bl	8000c28 <__aeabi_d2f>
 800bfe0:	6028      	str	r0, [r5, #0]
 800bfe2:	e7cb      	b.n	800bf7c <_scanf_float+0x3b0>
 800bfe4:	f04f 0900 	mov.w	r9, #0
 800bfe8:	e629      	b.n	800bc3e <_scanf_float+0x72>
 800bfea:	bf00      	nop
 800bfec:	08010954 	.word	0x08010954
 800bff0:	080110a3 	.word	0x080110a3

0800bff4 <_fclose_r>:
 800bff4:	b570      	push	{r4, r5, r6, lr}
 800bff6:	4605      	mov	r5, r0
 800bff8:	460c      	mov	r4, r1
 800bffa:	b1b1      	cbz	r1, 800c02a <_fclose_r+0x36>
 800bffc:	b118      	cbz	r0, 800c006 <_fclose_r+0x12>
 800bffe:	6a03      	ldr	r3, [r0, #32]
 800c000:	b90b      	cbnz	r3, 800c006 <_fclose_r+0x12>
 800c002:	f000 fa4f 	bl	800c4a4 <__sinit>
 800c006:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c008:	07de      	lsls	r6, r3, #31
 800c00a:	d405      	bmi.n	800c018 <_fclose_r+0x24>
 800c00c:	89a3      	ldrh	r3, [r4, #12]
 800c00e:	0598      	lsls	r0, r3, #22
 800c010:	d402      	bmi.n	800c018 <_fclose_r+0x24>
 800c012:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c014:	f001 f8e2 	bl	800d1dc <__retarget_lock_acquire_recursive>
 800c018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c01c:	b943      	cbnz	r3, 800c030 <_fclose_r+0x3c>
 800c01e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c020:	07d9      	lsls	r1, r3, #31
 800c022:	d402      	bmi.n	800c02a <_fclose_r+0x36>
 800c024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c026:	f001 f8da 	bl	800d1de <__retarget_lock_release_recursive>
 800c02a:	2600      	movs	r6, #0
 800c02c:	4630      	mov	r0, r6
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
 800c030:	4621      	mov	r1, r4
 800c032:	4628      	mov	r0, r5
 800c034:	f000 f83c 	bl	800c0b0 <__sflush_r>
 800c038:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c03a:	4606      	mov	r6, r0
 800c03c:	b133      	cbz	r3, 800c04c <_fclose_r+0x58>
 800c03e:	6a21      	ldr	r1, [r4, #32]
 800c040:	4628      	mov	r0, r5
 800c042:	4798      	blx	r3
 800c044:	2800      	cmp	r0, #0
 800c046:	bfb8      	it	lt
 800c048:	f04f 36ff 	movlt.w	r6, #4294967295
 800c04c:	89a3      	ldrh	r3, [r4, #12]
 800c04e:	061a      	lsls	r2, r3, #24
 800c050:	d503      	bpl.n	800c05a <_fclose_r+0x66>
 800c052:	6921      	ldr	r1, [r4, #16]
 800c054:	4628      	mov	r0, r5
 800c056:	f001 ff4b 	bl	800def0 <_free_r>
 800c05a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c05c:	b141      	cbz	r1, 800c070 <_fclose_r+0x7c>
 800c05e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c062:	4299      	cmp	r1, r3
 800c064:	d002      	beq.n	800c06c <_fclose_r+0x78>
 800c066:	4628      	mov	r0, r5
 800c068:	f001 ff42 	bl	800def0 <_free_r>
 800c06c:	2300      	movs	r3, #0
 800c06e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c070:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c072:	b121      	cbz	r1, 800c07e <_fclose_r+0x8a>
 800c074:	4628      	mov	r0, r5
 800c076:	f001 ff3b 	bl	800def0 <_free_r>
 800c07a:	2300      	movs	r3, #0
 800c07c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800c07e:	f000 f9b3 	bl	800c3e8 <__sfp_lock_acquire>
 800c082:	2300      	movs	r3, #0
 800c084:	81a3      	strh	r3, [r4, #12]
 800c086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c088:	07db      	lsls	r3, r3, #31
 800c08a:	d402      	bmi.n	800c092 <_fclose_r+0x9e>
 800c08c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c08e:	f001 f8a6 	bl	800d1de <__retarget_lock_release_recursive>
 800c092:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c094:	f001 f8a1 	bl	800d1da <__retarget_lock_close_recursive>
 800c098:	f000 f9ac 	bl	800c3f4 <__sfp_lock_release>
 800c09c:	e7c6      	b.n	800c02c <_fclose_r+0x38>
	...

0800c0a0 <fclose>:
 800c0a0:	4b02      	ldr	r3, [pc, #8]	@ (800c0ac <fclose+0xc>)
 800c0a2:	4601      	mov	r1, r0
 800c0a4:	6818      	ldr	r0, [r3, #0]
 800c0a6:	f7ff bfa5 	b.w	800bff4 <_fclose_r>
 800c0aa:	bf00      	nop
 800c0ac:	20000184 	.word	0x20000184

0800c0b0 <__sflush_r>:
 800c0b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0b8:	0716      	lsls	r6, r2, #28
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	460c      	mov	r4, r1
 800c0be:	d454      	bmi.n	800c16a <__sflush_r+0xba>
 800c0c0:	684b      	ldr	r3, [r1, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	dc02      	bgt.n	800c0cc <__sflush_r+0x1c>
 800c0c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	dd48      	ble.n	800c15e <__sflush_r+0xae>
 800c0cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0ce:	2e00      	cmp	r6, #0
 800c0d0:	d045      	beq.n	800c15e <__sflush_r+0xae>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0d8:	682f      	ldr	r7, [r5, #0]
 800c0da:	6a21      	ldr	r1, [r4, #32]
 800c0dc:	602b      	str	r3, [r5, #0]
 800c0de:	d030      	beq.n	800c142 <__sflush_r+0x92>
 800c0e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	0759      	lsls	r1, r3, #29
 800c0e6:	d505      	bpl.n	800c0f4 <__sflush_r+0x44>
 800c0e8:	6863      	ldr	r3, [r4, #4]
 800c0ea:	1ad2      	subs	r2, r2, r3
 800c0ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0ee:	b10b      	cbz	r3, 800c0f4 <__sflush_r+0x44>
 800c0f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0f2:	1ad2      	subs	r2, r2, r3
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0f8:	6a21      	ldr	r1, [r4, #32]
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	47b0      	blx	r6
 800c0fe:	1c43      	adds	r3, r0, #1
 800c100:	89a3      	ldrh	r3, [r4, #12]
 800c102:	d106      	bne.n	800c112 <__sflush_r+0x62>
 800c104:	6829      	ldr	r1, [r5, #0]
 800c106:	291d      	cmp	r1, #29
 800c108:	d82b      	bhi.n	800c162 <__sflush_r+0xb2>
 800c10a:	4a2a      	ldr	r2, [pc, #168]	@ (800c1b4 <__sflush_r+0x104>)
 800c10c:	410a      	asrs	r2, r1
 800c10e:	07d6      	lsls	r6, r2, #31
 800c110:	d427      	bmi.n	800c162 <__sflush_r+0xb2>
 800c112:	2200      	movs	r2, #0
 800c114:	6062      	str	r2, [r4, #4]
 800c116:	04d9      	lsls	r1, r3, #19
 800c118:	6922      	ldr	r2, [r4, #16]
 800c11a:	6022      	str	r2, [r4, #0]
 800c11c:	d504      	bpl.n	800c128 <__sflush_r+0x78>
 800c11e:	1c42      	adds	r2, r0, #1
 800c120:	d101      	bne.n	800c126 <__sflush_r+0x76>
 800c122:	682b      	ldr	r3, [r5, #0]
 800c124:	b903      	cbnz	r3, 800c128 <__sflush_r+0x78>
 800c126:	6560      	str	r0, [r4, #84]	@ 0x54
 800c128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c12a:	602f      	str	r7, [r5, #0]
 800c12c:	b1b9      	cbz	r1, 800c15e <__sflush_r+0xae>
 800c12e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c132:	4299      	cmp	r1, r3
 800c134:	d002      	beq.n	800c13c <__sflush_r+0x8c>
 800c136:	4628      	mov	r0, r5
 800c138:	f001 feda 	bl	800def0 <_free_r>
 800c13c:	2300      	movs	r3, #0
 800c13e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c140:	e00d      	b.n	800c15e <__sflush_r+0xae>
 800c142:	2301      	movs	r3, #1
 800c144:	4628      	mov	r0, r5
 800c146:	47b0      	blx	r6
 800c148:	4602      	mov	r2, r0
 800c14a:	1c50      	adds	r0, r2, #1
 800c14c:	d1c9      	bne.n	800c0e2 <__sflush_r+0x32>
 800c14e:	682b      	ldr	r3, [r5, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d0c6      	beq.n	800c0e2 <__sflush_r+0x32>
 800c154:	2b1d      	cmp	r3, #29
 800c156:	d001      	beq.n	800c15c <__sflush_r+0xac>
 800c158:	2b16      	cmp	r3, #22
 800c15a:	d11e      	bne.n	800c19a <__sflush_r+0xea>
 800c15c:	602f      	str	r7, [r5, #0]
 800c15e:	2000      	movs	r0, #0
 800c160:	e022      	b.n	800c1a8 <__sflush_r+0xf8>
 800c162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c166:	b21b      	sxth	r3, r3
 800c168:	e01b      	b.n	800c1a2 <__sflush_r+0xf2>
 800c16a:	690f      	ldr	r7, [r1, #16]
 800c16c:	2f00      	cmp	r7, #0
 800c16e:	d0f6      	beq.n	800c15e <__sflush_r+0xae>
 800c170:	0793      	lsls	r3, r2, #30
 800c172:	680e      	ldr	r6, [r1, #0]
 800c174:	bf08      	it	eq
 800c176:	694b      	ldreq	r3, [r1, #20]
 800c178:	600f      	str	r7, [r1, #0]
 800c17a:	bf18      	it	ne
 800c17c:	2300      	movne	r3, #0
 800c17e:	eba6 0807 	sub.w	r8, r6, r7
 800c182:	608b      	str	r3, [r1, #8]
 800c184:	f1b8 0f00 	cmp.w	r8, #0
 800c188:	dde9      	ble.n	800c15e <__sflush_r+0xae>
 800c18a:	6a21      	ldr	r1, [r4, #32]
 800c18c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c18e:	4643      	mov	r3, r8
 800c190:	463a      	mov	r2, r7
 800c192:	4628      	mov	r0, r5
 800c194:	47b0      	blx	r6
 800c196:	2800      	cmp	r0, #0
 800c198:	dc08      	bgt.n	800c1ac <__sflush_r+0xfc>
 800c19a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c19e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1a2:	81a3      	strh	r3, [r4, #12]
 800c1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ac:	4407      	add	r7, r0
 800c1ae:	eba8 0800 	sub.w	r8, r8, r0
 800c1b2:	e7e7      	b.n	800c184 <__sflush_r+0xd4>
 800c1b4:	dfbffffe 	.word	0xdfbffffe

0800c1b8 <_fflush_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	690b      	ldr	r3, [r1, #16]
 800c1bc:	4605      	mov	r5, r0
 800c1be:	460c      	mov	r4, r1
 800c1c0:	b913      	cbnz	r3, 800c1c8 <_fflush_r+0x10>
 800c1c2:	2500      	movs	r5, #0
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	bd38      	pop	{r3, r4, r5, pc}
 800c1c8:	b118      	cbz	r0, 800c1d2 <_fflush_r+0x1a>
 800c1ca:	6a03      	ldr	r3, [r0, #32]
 800c1cc:	b90b      	cbnz	r3, 800c1d2 <_fflush_r+0x1a>
 800c1ce:	f000 f969 	bl	800c4a4 <__sinit>
 800c1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d0f3      	beq.n	800c1c2 <_fflush_r+0xa>
 800c1da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1dc:	07d0      	lsls	r0, r2, #31
 800c1de:	d404      	bmi.n	800c1ea <_fflush_r+0x32>
 800c1e0:	0599      	lsls	r1, r3, #22
 800c1e2:	d402      	bmi.n	800c1ea <_fflush_r+0x32>
 800c1e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1e6:	f000 fff9 	bl	800d1dc <__retarget_lock_acquire_recursive>
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	f7ff ff5f 	bl	800c0b0 <__sflush_r>
 800c1f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1f4:	07da      	lsls	r2, r3, #31
 800c1f6:	4605      	mov	r5, r0
 800c1f8:	d4e4      	bmi.n	800c1c4 <_fflush_r+0xc>
 800c1fa:	89a3      	ldrh	r3, [r4, #12]
 800c1fc:	059b      	lsls	r3, r3, #22
 800c1fe:	d4e1      	bmi.n	800c1c4 <_fflush_r+0xc>
 800c200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c202:	f000 ffec 	bl	800d1de <__retarget_lock_release_recursive>
 800c206:	e7dd      	b.n	800c1c4 <_fflush_r+0xc>

0800c208 <_fgets_r>:
 800c208:	2a01      	cmp	r2, #1
 800c20a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c20e:	4681      	mov	r9, r0
 800c210:	460e      	mov	r6, r1
 800c212:	4615      	mov	r5, r2
 800c214:	461c      	mov	r4, r3
 800c216:	dd21      	ble.n	800c25c <_fgets_r+0x54>
 800c218:	b118      	cbz	r0, 800c222 <_fgets_r+0x1a>
 800c21a:	6a03      	ldr	r3, [r0, #32]
 800c21c:	b90b      	cbnz	r3, 800c222 <_fgets_r+0x1a>
 800c21e:	f000 f941 	bl	800c4a4 <__sinit>
 800c222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c224:	07db      	lsls	r3, r3, #31
 800c226:	d405      	bmi.n	800c234 <_fgets_r+0x2c>
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	059f      	lsls	r7, r3, #22
 800c22c:	d402      	bmi.n	800c234 <_fgets_r+0x2c>
 800c22e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c230:	f000 ffd4 	bl	800d1dc <__retarget_lock_acquire_recursive>
 800c234:	3d01      	subs	r5, #1
 800c236:	4637      	mov	r7, r6
 800c238:	6863      	ldr	r3, [r4, #4]
 800c23a:	b99b      	cbnz	r3, 800c264 <_fgets_r+0x5c>
 800c23c:	4621      	mov	r1, r4
 800c23e:	4648      	mov	r0, r9
 800c240:	f000 fae2 	bl	800c808 <__srefill_r>
 800c244:	b168      	cbz	r0, 800c262 <_fgets_r+0x5a>
 800c246:	42b7      	cmp	r7, r6
 800c248:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c24a:	d139      	bne.n	800c2c0 <_fgets_r+0xb8>
 800c24c:	07d8      	lsls	r0, r3, #31
 800c24e:	d405      	bmi.n	800c25c <_fgets_r+0x54>
 800c250:	89a3      	ldrh	r3, [r4, #12]
 800c252:	0599      	lsls	r1, r3, #22
 800c254:	d402      	bmi.n	800c25c <_fgets_r+0x54>
 800c256:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c258:	f000 ffc1 	bl	800d1de <__retarget_lock_release_recursive>
 800c25c:	2000      	movs	r0, #0
 800c25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c262:	6863      	ldr	r3, [r4, #4]
 800c264:	f8d4 a000 	ldr.w	sl, [r4]
 800c268:	42ab      	cmp	r3, r5
 800c26a:	bf28      	it	cs
 800c26c:	462b      	movcs	r3, r5
 800c26e:	461a      	mov	r2, r3
 800c270:	210a      	movs	r1, #10
 800c272:	4650      	mov	r0, sl
 800c274:	4698      	mov	r8, r3
 800c276:	f7f3 ffcb 	bl	8000210 <memchr>
 800c27a:	6863      	ldr	r3, [r4, #4]
 800c27c:	b188      	cbz	r0, 800c2a2 <_fgets_r+0x9a>
 800c27e:	3001      	adds	r0, #1
 800c280:	eba0 050a 	sub.w	r5, r0, sl
 800c284:	1b5b      	subs	r3, r3, r5
 800c286:	e9c4 0300 	strd	r0, r3, [r4]
 800c28a:	462a      	mov	r2, r5
 800c28c:	4651      	mov	r1, sl
 800c28e:	4638      	mov	r0, r7
 800c290:	f000 ffa6 	bl	800d1e0 <memcpy>
 800c294:	2300      	movs	r3, #0
 800c296:	557b      	strb	r3, [r7, r5]
 800c298:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c29a:	07da      	lsls	r2, r3, #31
 800c29c:	d513      	bpl.n	800c2c6 <_fgets_r+0xbe>
 800c29e:	4630      	mov	r0, r6
 800c2a0:	e7dd      	b.n	800c25e <_fgets_r+0x56>
 800c2a2:	eba3 0308 	sub.w	r3, r3, r8
 800c2a6:	6063      	str	r3, [r4, #4]
 800c2a8:	6823      	ldr	r3, [r4, #0]
 800c2aa:	4443      	add	r3, r8
 800c2ac:	4638      	mov	r0, r7
 800c2ae:	6023      	str	r3, [r4, #0]
 800c2b0:	4642      	mov	r2, r8
 800c2b2:	4651      	mov	r1, sl
 800c2b4:	f000 ff94 	bl	800d1e0 <memcpy>
 800c2b8:	ebb5 0508 	subs.w	r5, r5, r8
 800c2bc:	4447      	add	r7, r8
 800c2be:	d1bb      	bne.n	800c238 <_fgets_r+0x30>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	703b      	strb	r3, [r7, #0]
 800c2c4:	e7e8      	b.n	800c298 <_fgets_r+0x90>
 800c2c6:	89a3      	ldrh	r3, [r4, #12]
 800c2c8:	059b      	lsls	r3, r3, #22
 800c2ca:	d4e8      	bmi.n	800c29e <_fgets_r+0x96>
 800c2cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2ce:	f000 ff86 	bl	800d1de <__retarget_lock_release_recursive>
 800c2d2:	e7e4      	b.n	800c29e <_fgets_r+0x96>

0800c2d4 <fgets>:
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	460a      	mov	r2, r1
 800c2d8:	4601      	mov	r1, r0
 800c2da:	4802      	ldr	r0, [pc, #8]	@ (800c2e4 <fgets+0x10>)
 800c2dc:	6800      	ldr	r0, [r0, #0]
 800c2de:	f7ff bf93 	b.w	800c208 <_fgets_r>
 800c2e2:	bf00      	nop
 800c2e4:	20000184 	.word	0x20000184

0800c2e8 <std>:
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	b510      	push	{r4, lr}
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c2f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2f6:	6083      	str	r3, [r0, #8]
 800c2f8:	8181      	strh	r1, [r0, #12]
 800c2fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800c2fc:	81c2      	strh	r2, [r0, #14]
 800c2fe:	6183      	str	r3, [r0, #24]
 800c300:	4619      	mov	r1, r3
 800c302:	2208      	movs	r2, #8
 800c304:	305c      	adds	r0, #92	@ 0x5c
 800c306:	f000 fc82 	bl	800cc0e <memset>
 800c30a:	4b0d      	ldr	r3, [pc, #52]	@ (800c340 <std+0x58>)
 800c30c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c30e:	4b0d      	ldr	r3, [pc, #52]	@ (800c344 <std+0x5c>)
 800c310:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c312:	4b0d      	ldr	r3, [pc, #52]	@ (800c348 <std+0x60>)
 800c314:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c316:	4b0d      	ldr	r3, [pc, #52]	@ (800c34c <std+0x64>)
 800c318:	6323      	str	r3, [r4, #48]	@ 0x30
 800c31a:	4b0d      	ldr	r3, [pc, #52]	@ (800c350 <std+0x68>)
 800c31c:	6224      	str	r4, [r4, #32]
 800c31e:	429c      	cmp	r4, r3
 800c320:	d006      	beq.n	800c330 <std+0x48>
 800c322:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c326:	4294      	cmp	r4, r2
 800c328:	d002      	beq.n	800c330 <std+0x48>
 800c32a:	33d0      	adds	r3, #208	@ 0xd0
 800c32c:	429c      	cmp	r4, r3
 800c32e:	d105      	bne.n	800c33c <std+0x54>
 800c330:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c338:	f000 bf4e 	b.w	800d1d8 <__retarget_lock_init_recursive>
 800c33c:	bd10      	pop	{r4, pc}
 800c33e:	bf00      	nop
 800c340:	0800c931 	.word	0x0800c931
 800c344:	0800c953 	.word	0x0800c953
 800c348:	0800c98b 	.word	0x0800c98b
 800c34c:	0800c9af 	.word	0x0800c9af
 800c350:	200037d8 	.word	0x200037d8

0800c354 <stdio_exit_handler>:
 800c354:	4a02      	ldr	r2, [pc, #8]	@ (800c360 <stdio_exit_handler+0xc>)
 800c356:	4903      	ldr	r1, [pc, #12]	@ (800c364 <stdio_exit_handler+0x10>)
 800c358:	4803      	ldr	r0, [pc, #12]	@ (800c368 <stdio_exit_handler+0x14>)
 800c35a:	f000 b92b 	b.w	800c5b4 <_fwalk_sglue>
 800c35e:	bf00      	nop
 800c360:	2000000c 	.word	0x2000000c
 800c364:	0800c1b9 	.word	0x0800c1b9
 800c368:	20000188 	.word	0x20000188

0800c36c <cleanup_stdio>:
 800c36c:	6841      	ldr	r1, [r0, #4]
 800c36e:	4b0c      	ldr	r3, [pc, #48]	@ (800c3a0 <cleanup_stdio+0x34>)
 800c370:	4299      	cmp	r1, r3
 800c372:	b510      	push	{r4, lr}
 800c374:	4604      	mov	r4, r0
 800c376:	d001      	beq.n	800c37c <cleanup_stdio+0x10>
 800c378:	f7ff ff1e 	bl	800c1b8 <_fflush_r>
 800c37c:	68a1      	ldr	r1, [r4, #8]
 800c37e:	4b09      	ldr	r3, [pc, #36]	@ (800c3a4 <cleanup_stdio+0x38>)
 800c380:	4299      	cmp	r1, r3
 800c382:	d002      	beq.n	800c38a <cleanup_stdio+0x1e>
 800c384:	4620      	mov	r0, r4
 800c386:	f7ff ff17 	bl	800c1b8 <_fflush_r>
 800c38a:	68e1      	ldr	r1, [r4, #12]
 800c38c:	4b06      	ldr	r3, [pc, #24]	@ (800c3a8 <cleanup_stdio+0x3c>)
 800c38e:	4299      	cmp	r1, r3
 800c390:	d004      	beq.n	800c39c <cleanup_stdio+0x30>
 800c392:	4620      	mov	r0, r4
 800c394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c398:	f7ff bf0e 	b.w	800c1b8 <_fflush_r>
 800c39c:	bd10      	pop	{r4, pc}
 800c39e:	bf00      	nop
 800c3a0:	200037d8 	.word	0x200037d8
 800c3a4:	20003840 	.word	0x20003840
 800c3a8:	200038a8 	.word	0x200038a8

0800c3ac <global_stdio_init.part.0>:
 800c3ac:	b510      	push	{r4, lr}
 800c3ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c3dc <global_stdio_init.part.0+0x30>)
 800c3b0:	4c0b      	ldr	r4, [pc, #44]	@ (800c3e0 <global_stdio_init.part.0+0x34>)
 800c3b2:	4a0c      	ldr	r2, [pc, #48]	@ (800c3e4 <global_stdio_init.part.0+0x38>)
 800c3b4:	601a      	str	r2, [r3, #0]
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	2104      	movs	r1, #4
 800c3bc:	f7ff ff94 	bl	800c2e8 <std>
 800c3c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	2109      	movs	r1, #9
 800c3c8:	f7ff ff8e 	bl	800c2e8 <std>
 800c3cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c3d0:	2202      	movs	r2, #2
 800c3d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3d6:	2112      	movs	r1, #18
 800c3d8:	f7ff bf86 	b.w	800c2e8 <std>
 800c3dc:	20003910 	.word	0x20003910
 800c3e0:	200037d8 	.word	0x200037d8
 800c3e4:	0800c355 	.word	0x0800c355

0800c3e8 <__sfp_lock_acquire>:
 800c3e8:	4801      	ldr	r0, [pc, #4]	@ (800c3f0 <__sfp_lock_acquire+0x8>)
 800c3ea:	f000 bef7 	b.w	800d1dc <__retarget_lock_acquire_recursive>
 800c3ee:	bf00      	nop
 800c3f0:	20003919 	.word	0x20003919

0800c3f4 <__sfp_lock_release>:
 800c3f4:	4801      	ldr	r0, [pc, #4]	@ (800c3fc <__sfp_lock_release+0x8>)
 800c3f6:	f000 bef2 	b.w	800d1de <__retarget_lock_release_recursive>
 800c3fa:	bf00      	nop
 800c3fc:	20003919 	.word	0x20003919

0800c400 <__sfp>:
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	4607      	mov	r7, r0
 800c404:	f7ff fff0 	bl	800c3e8 <__sfp_lock_acquire>
 800c408:	4b23      	ldr	r3, [pc, #140]	@ (800c498 <__sfp+0x98>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	b90b      	cbnz	r3, 800c412 <__sfp+0x12>
 800c40e:	f7ff ffcd 	bl	800c3ac <global_stdio_init.part.0>
 800c412:	4e22      	ldr	r6, [pc, #136]	@ (800c49c <__sfp+0x9c>)
 800c414:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c418:	3b01      	subs	r3, #1
 800c41a:	d50f      	bpl.n	800c43c <__sfp+0x3c>
 800c41c:	6835      	ldr	r5, [r6, #0]
 800c41e:	2d00      	cmp	r5, #0
 800c420:	d137      	bne.n	800c492 <__sfp+0x92>
 800c422:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800c426:	4638      	mov	r0, r7
 800c428:	f002 f910 	bl	800e64c <_malloc_r>
 800c42c:	4604      	mov	r4, r0
 800c42e:	bb28      	cbnz	r0, 800c47c <__sfp+0x7c>
 800c430:	6030      	str	r0, [r6, #0]
 800c432:	f7ff ffdf 	bl	800c3f4 <__sfp_lock_release>
 800c436:	230c      	movs	r3, #12
 800c438:	603b      	str	r3, [r7, #0]
 800c43a:	e01b      	b.n	800c474 <__sfp+0x74>
 800c43c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c440:	b9d5      	cbnz	r5, 800c478 <__sfp+0x78>
 800c442:	4b17      	ldr	r3, [pc, #92]	@ (800c4a0 <__sfp+0xa0>)
 800c444:	60e3      	str	r3, [r4, #12]
 800c446:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c44a:	6665      	str	r5, [r4, #100]	@ 0x64
 800c44c:	f000 fec4 	bl	800d1d8 <__retarget_lock_init_recursive>
 800c450:	f7ff ffd0 	bl	800c3f4 <__sfp_lock_release>
 800c454:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c458:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c45c:	6025      	str	r5, [r4, #0]
 800c45e:	61a5      	str	r5, [r4, #24]
 800c460:	2208      	movs	r2, #8
 800c462:	4629      	mov	r1, r5
 800c464:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800c468:	f000 fbd1 	bl	800cc0e <memset>
 800c46c:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800c470:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 800c474:	4620      	mov	r0, r4
 800c476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c478:	3468      	adds	r4, #104	@ 0x68
 800c47a:	e7cd      	b.n	800c418 <__sfp+0x18>
 800c47c:	2304      	movs	r3, #4
 800c47e:	6005      	str	r5, [r0, #0]
 800c480:	6043      	str	r3, [r0, #4]
 800c482:	300c      	adds	r0, #12
 800c484:	60a0      	str	r0, [r4, #8]
 800c486:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 800c48a:	4629      	mov	r1, r5
 800c48c:	f000 fbbf 	bl	800cc0e <memset>
 800c490:	6034      	str	r4, [r6, #0]
 800c492:	6836      	ldr	r6, [r6, #0]
 800c494:	e7be      	b.n	800c414 <__sfp+0x14>
 800c496:	bf00      	nop
 800c498:	20003910 	.word	0x20003910
 800c49c:	2000000c 	.word	0x2000000c
 800c4a0:	ffff0001 	.word	0xffff0001

0800c4a4 <__sinit>:
 800c4a4:	b510      	push	{r4, lr}
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	f7ff ff9e 	bl	800c3e8 <__sfp_lock_acquire>
 800c4ac:	6a23      	ldr	r3, [r4, #32]
 800c4ae:	b11b      	cbz	r3, 800c4b8 <__sinit+0x14>
 800c4b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4b4:	f7ff bf9e 	b.w	800c3f4 <__sfp_lock_release>
 800c4b8:	4b04      	ldr	r3, [pc, #16]	@ (800c4cc <__sinit+0x28>)
 800c4ba:	6223      	str	r3, [r4, #32]
 800c4bc:	4b04      	ldr	r3, [pc, #16]	@ (800c4d0 <__sinit+0x2c>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d1f5      	bne.n	800c4b0 <__sinit+0xc>
 800c4c4:	f7ff ff72 	bl	800c3ac <global_stdio_init.part.0>
 800c4c8:	e7f2      	b.n	800c4b0 <__sinit+0xc>
 800c4ca:	bf00      	nop
 800c4cc:	0800c36d 	.word	0x0800c36d
 800c4d0:	20003910 	.word	0x20003910

0800c4d4 <_fopen_r>:
 800c4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4d6:	460f      	mov	r7, r1
 800c4d8:	4611      	mov	r1, r2
 800c4da:	aa01      	add	r2, sp, #4
 800c4dc:	4606      	mov	r6, r0
 800c4de:	f003 f951 	bl	800f784 <__sflags>
 800c4e2:	4605      	mov	r5, r0
 800c4e4:	b1b0      	cbz	r0, 800c514 <_fopen_r+0x40>
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f7ff ff8a 	bl	800c400 <__sfp>
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	b188      	cbz	r0, 800c514 <_fopen_r+0x40>
 800c4f0:	4639      	mov	r1, r7
 800c4f2:	9a01      	ldr	r2, [sp, #4]
 800c4f4:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	f000 fe0d 	bl	800d118 <_open_r>
 800c4fe:	1e07      	subs	r7, r0, #0
 800c500:	da0c      	bge.n	800c51c <_fopen_r+0x48>
 800c502:	f7ff ff71 	bl	800c3e8 <__sfp_lock_acquire>
 800c506:	2300      	movs	r3, #0
 800c508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c50a:	81a3      	strh	r3, [r4, #12]
 800c50c:	f000 fe65 	bl	800d1da <__retarget_lock_close_recursive>
 800c510:	f7ff ff70 	bl	800c3f4 <__sfp_lock_release>
 800c514:	2400      	movs	r4, #0
 800c516:	4620      	mov	r0, r4
 800c518:	b003      	add	sp, #12
 800c51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c51c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c51e:	07db      	lsls	r3, r3, #31
 800c520:	d405      	bmi.n	800c52e <_fopen_r+0x5a>
 800c522:	89a3      	ldrh	r3, [r4, #12]
 800c524:	0598      	lsls	r0, r3, #22
 800c526:	d402      	bmi.n	800c52e <_fopen_r+0x5a>
 800c528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c52a:	f000 fe57 	bl	800d1dc <__retarget_lock_acquire_recursive>
 800c52e:	4b0f      	ldr	r3, [pc, #60]	@ (800c56c <_fopen_r+0x98>)
 800c530:	6263      	str	r3, [r4, #36]	@ 0x24
 800c532:	4b0f      	ldr	r3, [pc, #60]	@ (800c570 <_fopen_r+0x9c>)
 800c534:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c536:	b22d      	sxth	r5, r5
 800c538:	4b0e      	ldr	r3, [pc, #56]	@ (800c574 <_fopen_r+0xa0>)
 800c53a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c53c:	05e9      	lsls	r1, r5, #23
 800c53e:	4b0e      	ldr	r3, [pc, #56]	@ (800c578 <_fopen_r+0xa4>)
 800c540:	81e7      	strh	r7, [r4, #14]
 800c542:	81a5      	strh	r5, [r4, #12]
 800c544:	6224      	str	r4, [r4, #32]
 800c546:	6323      	str	r3, [r4, #48]	@ 0x30
 800c548:	d505      	bpl.n	800c556 <_fopen_r+0x82>
 800c54a:	2302      	movs	r3, #2
 800c54c:	2200      	movs	r2, #0
 800c54e:	4621      	mov	r1, r4
 800c550:	4630      	mov	r0, r6
 800c552:	f000 f82d 	bl	800c5b0 <_fseek_r>
 800c556:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c558:	07da      	lsls	r2, r3, #31
 800c55a:	d4dc      	bmi.n	800c516 <_fopen_r+0x42>
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	059b      	lsls	r3, r3, #22
 800c560:	d4d9      	bmi.n	800c516 <_fopen_r+0x42>
 800c562:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c564:	f000 fe3b 	bl	800d1de <__retarget_lock_release_recursive>
 800c568:	e7d5      	b.n	800c516 <_fopen_r+0x42>
 800c56a:	bf00      	nop
 800c56c:	0800c931 	.word	0x0800c931
 800c570:	0800c953 	.word	0x0800c953
 800c574:	0800c98b 	.word	0x0800c98b
 800c578:	0800c9af 	.word	0x0800c9af

0800c57c <fopen>:
 800c57c:	4b02      	ldr	r3, [pc, #8]	@ (800c588 <fopen+0xc>)
 800c57e:	460a      	mov	r2, r1
 800c580:	4601      	mov	r1, r0
 800c582:	6818      	ldr	r0, [r3, #0]
 800c584:	f7ff bfa6 	b.w	800c4d4 <_fopen_r>
 800c588:	20000184 	.word	0x20000184

0800c58c <fiprintf>:
 800c58c:	b40e      	push	{r1, r2, r3}
 800c58e:	b503      	push	{r0, r1, lr}
 800c590:	4601      	mov	r1, r0
 800c592:	ab03      	add	r3, sp, #12
 800c594:	4805      	ldr	r0, [pc, #20]	@ (800c5ac <fiprintf+0x20>)
 800c596:	f853 2b04 	ldr.w	r2, [r3], #4
 800c59a:	6800      	ldr	r0, [r0, #0]
 800c59c:	9301      	str	r3, [sp, #4]
 800c59e:	f002 ffaf 	bl	800f500 <_vfiprintf_r>
 800c5a2:	b002      	add	sp, #8
 800c5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5a8:	b003      	add	sp, #12
 800c5aa:	4770      	bx	lr
 800c5ac:	20000184 	.word	0x20000184

0800c5b0 <_fseek_r>:
 800c5b0:	f000 ba96 	b.w	800cae0 <_fseeko_r>

0800c5b4 <_fwalk_sglue>:
 800c5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5b8:	4607      	mov	r7, r0
 800c5ba:	4688      	mov	r8, r1
 800c5bc:	4614      	mov	r4, r2
 800c5be:	2600      	movs	r6, #0
 800c5c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5c4:	f1b9 0901 	subs.w	r9, r9, #1
 800c5c8:	d505      	bpl.n	800c5d6 <_fwalk_sglue+0x22>
 800c5ca:	6824      	ldr	r4, [r4, #0]
 800c5cc:	2c00      	cmp	r4, #0
 800c5ce:	d1f7      	bne.n	800c5c0 <_fwalk_sglue+0xc>
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5d6:	89ab      	ldrh	r3, [r5, #12]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d907      	bls.n	800c5ec <_fwalk_sglue+0x38>
 800c5dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	d003      	beq.n	800c5ec <_fwalk_sglue+0x38>
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	47c0      	blx	r8
 800c5ea:	4306      	orrs	r6, r0
 800c5ec:	3568      	adds	r5, #104	@ 0x68
 800c5ee:	e7e9      	b.n	800c5c4 <_fwalk_sglue+0x10>

0800c5f0 <_perror_r>:
 800c5f0:	6a03      	ldr	r3, [r0, #32]
 800c5f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5f4:	68c4      	ldr	r4, [r0, #12]
 800c5f6:	4605      	mov	r5, r0
 800c5f8:	460e      	mov	r6, r1
 800c5fa:	b90b      	cbnz	r3, 800c600 <_perror_r+0x10>
 800c5fc:	f7ff ff52 	bl	800c4a4 <__sinit>
 800c600:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c602:	07d8      	lsls	r0, r3, #31
 800c604:	d405      	bmi.n	800c612 <_perror_r+0x22>
 800c606:	89a3      	ldrh	r3, [r4, #12]
 800c608:	0599      	lsls	r1, r3, #22
 800c60a:	d402      	bmi.n	800c612 <_perror_r+0x22>
 800c60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c60e:	f000 fde5 	bl	800d1dc <__retarget_lock_acquire_recursive>
 800c612:	4621      	mov	r1, r4
 800c614:	4628      	mov	r0, r5
 800c616:	f7ff fdcf 	bl	800c1b8 <_fflush_r>
 800c61a:	bb1e      	cbnz	r6, 800c664 <_perror_r+0x74>
 800c61c:	6829      	ldr	r1, [r5, #0]
 800c61e:	ab01      	add	r3, sp, #4
 800c620:	2201      	movs	r2, #1
 800c622:	4628      	mov	r0, r5
 800c624:	f000 fafc 	bl	800cc20 <_strerror_r>
 800c628:	4607      	mov	r7, r0
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d145      	bne.n	800c6ba <_perror_r+0xca>
 800c62e:	4831      	ldr	r0, [pc, #196]	@ (800c6f4 <_perror_r+0x104>)
 800c630:	4f30      	ldr	r7, [pc, #192]	@ (800c6f4 <_perror_r+0x104>)
 800c632:	f7f3 fe3d 	bl	80002b0 <strlen>
 800c636:	4606      	mov	r6, r0
 800c638:	b156      	cbz	r6, 800c650 <_perror_r+0x60>
 800c63a:	4620      	mov	r0, r4
 800c63c:	f003 f878 	bl	800f730 <fileno>
 800c640:	4633      	mov	r3, r6
 800c642:	4601      	mov	r1, r0
 800c644:	463a      	mov	r2, r7
 800c646:	4628      	mov	r0, r5
 800c648:	f000 fd8a 	bl	800d160 <_write_r>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	da47      	bge.n	800c6e0 <_perror_r+0xf0>
 800c650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c654:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c658:	81a2      	strh	r2, [r4, #12]
 800c65a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c65c:	07d2      	lsls	r2, r2, #31
 800c65e:	d542      	bpl.n	800c6e6 <_perror_r+0xf6>
 800c660:	b003      	add	sp, #12
 800c662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c664:	7833      	ldrb	r3, [r6, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d0d8      	beq.n	800c61c <_perror_r+0x2c>
 800c66a:	4630      	mov	r0, r6
 800c66c:	f7f3 fe20 	bl	80002b0 <strlen>
 800c670:	4607      	mov	r7, r0
 800c672:	b157      	cbz	r7, 800c68a <_perror_r+0x9a>
 800c674:	4620      	mov	r0, r4
 800c676:	f003 f85b 	bl	800f730 <fileno>
 800c67a:	463b      	mov	r3, r7
 800c67c:	4601      	mov	r1, r0
 800c67e:	4632      	mov	r2, r6
 800c680:	4628      	mov	r0, r5
 800c682:	f000 fd6d 	bl	800d160 <_write_r>
 800c686:	2800      	cmp	r0, #0
 800c688:	da14      	bge.n	800c6b4 <_perror_r+0xc4>
 800c68a:	481b      	ldr	r0, [pc, #108]	@ (800c6f8 <_perror_r+0x108>)
 800c68c:	4f1a      	ldr	r7, [pc, #104]	@ (800c6f8 <_perror_r+0x108>)
 800c68e:	f7f3 fe0f 	bl	80002b0 <strlen>
 800c692:	4606      	mov	r6, r0
 800c694:	2e00      	cmp	r6, #0
 800c696:	d0c1      	beq.n	800c61c <_perror_r+0x2c>
 800c698:	4620      	mov	r0, r4
 800c69a:	f003 f849 	bl	800f730 <fileno>
 800c69e:	4633      	mov	r3, r6
 800c6a0:	4601      	mov	r1, r0
 800c6a2:	463a      	mov	r2, r7
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	f000 fd5b 	bl	800d160 <_write_r>
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	dbb6      	blt.n	800c61c <_perror_r+0x2c>
 800c6ae:	1a36      	subs	r6, r6, r0
 800c6b0:	4407      	add	r7, r0
 800c6b2:	e7ef      	b.n	800c694 <_perror_r+0xa4>
 800c6b4:	1a3f      	subs	r7, r7, r0
 800c6b6:	4406      	add	r6, r0
 800c6b8:	e7db      	b.n	800c672 <_perror_r+0x82>
 800c6ba:	f7f3 fdf9 	bl	80002b0 <strlen>
 800c6be:	4606      	mov	r6, r0
 800c6c0:	2e00      	cmp	r6, #0
 800c6c2:	d0b4      	beq.n	800c62e <_perror_r+0x3e>
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f003 f833 	bl	800f730 <fileno>
 800c6ca:	4633      	mov	r3, r6
 800c6cc:	4601      	mov	r1, r0
 800c6ce:	463a      	mov	r2, r7
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f000 fd45 	bl	800d160 <_write_r>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	dba9      	blt.n	800c62e <_perror_r+0x3e>
 800c6da:	1a36      	subs	r6, r6, r0
 800c6dc:	4407      	add	r7, r0
 800c6de:	e7ef      	b.n	800c6c0 <_perror_r+0xd0>
 800c6e0:	1a36      	subs	r6, r6, r0
 800c6e2:	4407      	add	r7, r0
 800c6e4:	e7a8      	b.n	800c638 <_perror_r+0x48>
 800c6e6:	059b      	lsls	r3, r3, #22
 800c6e8:	d4ba      	bmi.n	800c660 <_perror_r+0x70>
 800c6ea:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6ec:	f000 fd77 	bl	800d1de <__retarget_lock_release_recursive>
 800c6f0:	e7b6      	b.n	800c660 <_perror_r+0x70>
 800c6f2:	bf00      	nop
 800c6f4:	080110a2 	.word	0x080110a2
 800c6f8:	08011072 	.word	0x08011072

0800c6fc <perror>:
 800c6fc:	4b02      	ldr	r3, [pc, #8]	@ (800c708 <perror+0xc>)
 800c6fe:	4601      	mov	r1, r0
 800c700:	6818      	ldr	r0, [r3, #0]
 800c702:	f7ff bf75 	b.w	800c5f0 <_perror_r>
 800c706:	bf00      	nop
 800c708:	20000184 	.word	0x20000184

0800c70c <iprintf>:
 800c70c:	b40f      	push	{r0, r1, r2, r3}
 800c70e:	b507      	push	{r0, r1, r2, lr}
 800c710:	4906      	ldr	r1, [pc, #24]	@ (800c72c <iprintf+0x20>)
 800c712:	ab04      	add	r3, sp, #16
 800c714:	6808      	ldr	r0, [r1, #0]
 800c716:	f853 2b04 	ldr.w	r2, [r3], #4
 800c71a:	6881      	ldr	r1, [r0, #8]
 800c71c:	9301      	str	r3, [sp, #4]
 800c71e:	f002 feef 	bl	800f500 <_vfiprintf_r>
 800c722:	b003      	add	sp, #12
 800c724:	f85d eb04 	ldr.w	lr, [sp], #4
 800c728:	b004      	add	sp, #16
 800c72a:	4770      	bx	lr
 800c72c:	20000184 	.word	0x20000184

0800c730 <_puts_r>:
 800c730:	6a03      	ldr	r3, [r0, #32]
 800c732:	b570      	push	{r4, r5, r6, lr}
 800c734:	6884      	ldr	r4, [r0, #8]
 800c736:	4605      	mov	r5, r0
 800c738:	460e      	mov	r6, r1
 800c73a:	b90b      	cbnz	r3, 800c740 <_puts_r+0x10>
 800c73c:	f7ff feb2 	bl	800c4a4 <__sinit>
 800c740:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c742:	07db      	lsls	r3, r3, #31
 800c744:	d405      	bmi.n	800c752 <_puts_r+0x22>
 800c746:	89a3      	ldrh	r3, [r4, #12]
 800c748:	0598      	lsls	r0, r3, #22
 800c74a:	d402      	bmi.n	800c752 <_puts_r+0x22>
 800c74c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c74e:	f000 fd45 	bl	800d1dc <__retarget_lock_acquire_recursive>
 800c752:	89a3      	ldrh	r3, [r4, #12]
 800c754:	0719      	lsls	r1, r3, #28
 800c756:	d502      	bpl.n	800c75e <_puts_r+0x2e>
 800c758:	6923      	ldr	r3, [r4, #16]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d135      	bne.n	800c7ca <_puts_r+0x9a>
 800c75e:	4621      	mov	r1, r4
 800c760:	4628      	mov	r0, r5
 800c762:	f000 f967 	bl	800ca34 <__swsetup_r>
 800c766:	b380      	cbz	r0, 800c7ca <_puts_r+0x9a>
 800c768:	f04f 35ff 	mov.w	r5, #4294967295
 800c76c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c76e:	07da      	lsls	r2, r3, #31
 800c770:	d405      	bmi.n	800c77e <_puts_r+0x4e>
 800c772:	89a3      	ldrh	r3, [r4, #12]
 800c774:	059b      	lsls	r3, r3, #22
 800c776:	d402      	bmi.n	800c77e <_puts_r+0x4e>
 800c778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c77a:	f000 fd30 	bl	800d1de <__retarget_lock_release_recursive>
 800c77e:	4628      	mov	r0, r5
 800c780:	bd70      	pop	{r4, r5, r6, pc}
 800c782:	2b00      	cmp	r3, #0
 800c784:	da04      	bge.n	800c790 <_puts_r+0x60>
 800c786:	69a2      	ldr	r2, [r4, #24]
 800c788:	429a      	cmp	r2, r3
 800c78a:	dc17      	bgt.n	800c7bc <_puts_r+0x8c>
 800c78c:	290a      	cmp	r1, #10
 800c78e:	d015      	beq.n	800c7bc <_puts_r+0x8c>
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	1c5a      	adds	r2, r3, #1
 800c794:	6022      	str	r2, [r4, #0]
 800c796:	7019      	strb	r1, [r3, #0]
 800c798:	68a3      	ldr	r3, [r4, #8]
 800c79a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	60a3      	str	r3, [r4, #8]
 800c7a2:	2900      	cmp	r1, #0
 800c7a4:	d1ed      	bne.n	800c782 <_puts_r+0x52>
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	da11      	bge.n	800c7ce <_puts_r+0x9e>
 800c7aa:	4622      	mov	r2, r4
 800c7ac:	210a      	movs	r1, #10
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	f000 f901 	bl	800c9b6 <__swbuf_r>
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	d0d7      	beq.n	800c768 <_puts_r+0x38>
 800c7b8:	250a      	movs	r5, #10
 800c7ba:	e7d7      	b.n	800c76c <_puts_r+0x3c>
 800c7bc:	4622      	mov	r2, r4
 800c7be:	4628      	mov	r0, r5
 800c7c0:	f000 f8f9 	bl	800c9b6 <__swbuf_r>
 800c7c4:	3001      	adds	r0, #1
 800c7c6:	d1e7      	bne.n	800c798 <_puts_r+0x68>
 800c7c8:	e7ce      	b.n	800c768 <_puts_r+0x38>
 800c7ca:	3e01      	subs	r6, #1
 800c7cc:	e7e4      	b.n	800c798 <_puts_r+0x68>
 800c7ce:	6823      	ldr	r3, [r4, #0]
 800c7d0:	1c5a      	adds	r2, r3, #1
 800c7d2:	6022      	str	r2, [r4, #0]
 800c7d4:	220a      	movs	r2, #10
 800c7d6:	701a      	strb	r2, [r3, #0]
 800c7d8:	e7ee      	b.n	800c7b8 <_puts_r+0x88>
	...

0800c7dc <puts>:
 800c7dc:	4b02      	ldr	r3, [pc, #8]	@ (800c7e8 <puts+0xc>)
 800c7de:	4601      	mov	r1, r0
 800c7e0:	6818      	ldr	r0, [r3, #0]
 800c7e2:	f7ff bfa5 	b.w	800c730 <_puts_r>
 800c7e6:	bf00      	nop
 800c7e8:	20000184 	.word	0x20000184

0800c7ec <lflush>:
 800c7ec:	898b      	ldrh	r3, [r1, #12]
 800c7ee:	f003 0309 	and.w	r3, r3, #9
 800c7f2:	2b09      	cmp	r3, #9
 800c7f4:	d103      	bne.n	800c7fe <lflush+0x12>
 800c7f6:	4b03      	ldr	r3, [pc, #12]	@ (800c804 <lflush+0x18>)
 800c7f8:	6818      	ldr	r0, [r3, #0]
 800c7fa:	f7ff bcdd 	b.w	800c1b8 <_fflush_r>
 800c7fe:	2000      	movs	r0, #0
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	20000184 	.word	0x20000184

0800c808 <__srefill_r>:
 800c808:	b570      	push	{r4, r5, r6, lr}
 800c80a:	460c      	mov	r4, r1
 800c80c:	4605      	mov	r5, r0
 800c80e:	b118      	cbz	r0, 800c818 <__srefill_r+0x10>
 800c810:	6a03      	ldr	r3, [r0, #32]
 800c812:	b90b      	cbnz	r3, 800c818 <__srefill_r+0x10>
 800c814:	f7ff fe46 	bl	800c4a4 <__sinit>
 800c818:	2300      	movs	r3, #0
 800c81a:	6063      	str	r3, [r4, #4]
 800c81c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c820:	069e      	lsls	r6, r3, #26
 800c822:	d408      	bmi.n	800c836 <__srefill_r+0x2e>
 800c824:	0758      	lsls	r0, r3, #29
 800c826:	d445      	bmi.n	800c8b4 <__srefill_r+0xac>
 800c828:	06d9      	lsls	r1, r3, #27
 800c82a:	d407      	bmi.n	800c83c <__srefill_r+0x34>
 800c82c:	2209      	movs	r2, #9
 800c82e:	602a      	str	r2, [r5, #0]
 800c830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c834:	81a3      	strh	r3, [r4, #12]
 800c836:	f04f 30ff 	mov.w	r0, #4294967295
 800c83a:	bd70      	pop	{r4, r5, r6, pc}
 800c83c:	071a      	lsls	r2, r3, #28
 800c83e:	d50b      	bpl.n	800c858 <__srefill_r+0x50>
 800c840:	4621      	mov	r1, r4
 800c842:	4628      	mov	r0, r5
 800c844:	f7ff fcb8 	bl	800c1b8 <_fflush_r>
 800c848:	2800      	cmp	r0, #0
 800c84a:	d1f4      	bne.n	800c836 <__srefill_r+0x2e>
 800c84c:	89a3      	ldrh	r3, [r4, #12]
 800c84e:	60a0      	str	r0, [r4, #8]
 800c850:	f023 0308 	bic.w	r3, r3, #8
 800c854:	81a3      	strh	r3, [r4, #12]
 800c856:	61a0      	str	r0, [r4, #24]
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	f043 0304 	orr.w	r3, r3, #4
 800c85e:	81a3      	strh	r3, [r4, #12]
 800c860:	6923      	ldr	r3, [r4, #16]
 800c862:	b91b      	cbnz	r3, 800c86c <__srefill_r+0x64>
 800c864:	4621      	mov	r1, r4
 800c866:	4628      	mov	r0, r5
 800c868:	f002 ffe8 	bl	800f83c <__smakebuf_r>
 800c86c:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800c870:	07b3      	lsls	r3, r6, #30
 800c872:	d00f      	beq.n	800c894 <__srefill_r+0x8c>
 800c874:	2301      	movs	r3, #1
 800c876:	4a1b      	ldr	r2, [pc, #108]	@ (800c8e4 <__srefill_r+0xdc>)
 800c878:	491b      	ldr	r1, [pc, #108]	@ (800c8e8 <__srefill_r+0xe0>)
 800c87a:	481c      	ldr	r0, [pc, #112]	@ (800c8ec <__srefill_r+0xe4>)
 800c87c:	81a3      	strh	r3, [r4, #12]
 800c87e:	f7ff fe99 	bl	800c5b4 <_fwalk_sglue>
 800c882:	81a6      	strh	r6, [r4, #12]
 800c884:	f006 0609 	and.w	r6, r6, #9
 800c888:	2e09      	cmp	r6, #9
 800c88a:	d103      	bne.n	800c894 <__srefill_r+0x8c>
 800c88c:	4621      	mov	r1, r4
 800c88e:	4628      	mov	r0, r5
 800c890:	f7ff fc0e 	bl	800c0b0 <__sflush_r>
 800c894:	6922      	ldr	r2, [r4, #16]
 800c896:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800c898:	6963      	ldr	r3, [r4, #20]
 800c89a:	6a21      	ldr	r1, [r4, #32]
 800c89c:	6022      	str	r2, [r4, #0]
 800c89e:	4628      	mov	r0, r5
 800c8a0:	47b0      	blx	r6
 800c8a2:	2800      	cmp	r0, #0
 800c8a4:	6060      	str	r0, [r4, #4]
 800c8a6:	dc17      	bgt.n	800c8d8 <__srefill_r+0xd0>
 800c8a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ac:	d116      	bne.n	800c8dc <__srefill_r+0xd4>
 800c8ae:	f043 0320 	orr.w	r3, r3, #32
 800c8b2:	e7bf      	b.n	800c834 <__srefill_r+0x2c>
 800c8b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8b6:	2900      	cmp	r1, #0
 800c8b8:	d0d2      	beq.n	800c860 <__srefill_r+0x58>
 800c8ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8be:	4299      	cmp	r1, r3
 800c8c0:	d002      	beq.n	800c8c8 <__srefill_r+0xc0>
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f001 fb14 	bl	800def0 <_free_r>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c8ce:	6063      	str	r3, [r4, #4]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d0c5      	beq.n	800c860 <__srefill_r+0x58>
 800c8d4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c8d6:	6023      	str	r3, [r4, #0]
 800c8d8:	2000      	movs	r0, #0
 800c8da:	e7ae      	b.n	800c83a <__srefill_r+0x32>
 800c8dc:	2200      	movs	r2, #0
 800c8de:	6062      	str	r2, [r4, #4]
 800c8e0:	e7a6      	b.n	800c830 <__srefill_r+0x28>
 800c8e2:	bf00      	nop
 800c8e4:	2000000c 	.word	0x2000000c
 800c8e8:	0800c7ed 	.word	0x0800c7ed
 800c8ec:	20000188 	.word	0x20000188

0800c8f0 <siprintf>:
 800c8f0:	b40e      	push	{r1, r2, r3}
 800c8f2:	b500      	push	{lr}
 800c8f4:	b09c      	sub	sp, #112	@ 0x70
 800c8f6:	ab1d      	add	r3, sp, #116	@ 0x74
 800c8f8:	9002      	str	r0, [sp, #8]
 800c8fa:	9006      	str	r0, [sp, #24]
 800c8fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c900:	4809      	ldr	r0, [pc, #36]	@ (800c928 <siprintf+0x38>)
 800c902:	9107      	str	r1, [sp, #28]
 800c904:	9104      	str	r1, [sp, #16]
 800c906:	4909      	ldr	r1, [pc, #36]	@ (800c92c <siprintf+0x3c>)
 800c908:	f853 2b04 	ldr.w	r2, [r3], #4
 800c90c:	9105      	str	r1, [sp, #20]
 800c90e:	6800      	ldr	r0, [r0, #0]
 800c910:	9301      	str	r3, [sp, #4]
 800c912:	a902      	add	r1, sp, #8
 800c914:	f002 fcce 	bl	800f2b4 <_svfiprintf_r>
 800c918:	9b02      	ldr	r3, [sp, #8]
 800c91a:	2200      	movs	r2, #0
 800c91c:	701a      	strb	r2, [r3, #0]
 800c91e:	b01c      	add	sp, #112	@ 0x70
 800c920:	f85d eb04 	ldr.w	lr, [sp], #4
 800c924:	b003      	add	sp, #12
 800c926:	4770      	bx	lr
 800c928:	20000184 	.word	0x20000184
 800c92c:	ffff0208 	.word	0xffff0208

0800c930 <__sread>:
 800c930:	b510      	push	{r4, lr}
 800c932:	460c      	mov	r4, r1
 800c934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c938:	f000 fc00 	bl	800d13c <_read_r>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	bfab      	itete	ge
 800c940:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c942:	89a3      	ldrhlt	r3, [r4, #12]
 800c944:	181b      	addge	r3, r3, r0
 800c946:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c94a:	bfac      	ite	ge
 800c94c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c94e:	81a3      	strhlt	r3, [r4, #12]
 800c950:	bd10      	pop	{r4, pc}

0800c952 <__swrite>:
 800c952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c956:	461f      	mov	r7, r3
 800c958:	898b      	ldrh	r3, [r1, #12]
 800c95a:	05db      	lsls	r3, r3, #23
 800c95c:	4605      	mov	r5, r0
 800c95e:	460c      	mov	r4, r1
 800c960:	4616      	mov	r6, r2
 800c962:	d505      	bpl.n	800c970 <__swrite+0x1e>
 800c964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c968:	2302      	movs	r3, #2
 800c96a:	2200      	movs	r2, #0
 800c96c:	f000 fbc2 	bl	800d0f4 <_lseek_r>
 800c970:	89a3      	ldrh	r3, [r4, #12]
 800c972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c976:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c97a:	81a3      	strh	r3, [r4, #12]
 800c97c:	4632      	mov	r2, r6
 800c97e:	463b      	mov	r3, r7
 800c980:	4628      	mov	r0, r5
 800c982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c986:	f000 bbeb 	b.w	800d160 <_write_r>

0800c98a <__sseek>:
 800c98a:	b510      	push	{r4, lr}
 800c98c:	460c      	mov	r4, r1
 800c98e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c992:	f000 fbaf 	bl	800d0f4 <_lseek_r>
 800c996:	1c43      	adds	r3, r0, #1
 800c998:	89a3      	ldrh	r3, [r4, #12]
 800c99a:	bf15      	itete	ne
 800c99c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c99e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c9a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c9a6:	81a3      	strheq	r3, [r4, #12]
 800c9a8:	bf18      	it	ne
 800c9aa:	81a3      	strhne	r3, [r4, #12]
 800c9ac:	bd10      	pop	{r4, pc}

0800c9ae <__sclose>:
 800c9ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9b2:	f000 bb8f 	b.w	800d0d4 <_close_r>

0800c9b6 <__swbuf_r>:
 800c9b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9b8:	460e      	mov	r6, r1
 800c9ba:	4614      	mov	r4, r2
 800c9bc:	4605      	mov	r5, r0
 800c9be:	b118      	cbz	r0, 800c9c8 <__swbuf_r+0x12>
 800c9c0:	6a03      	ldr	r3, [r0, #32]
 800c9c2:	b90b      	cbnz	r3, 800c9c8 <__swbuf_r+0x12>
 800c9c4:	f7ff fd6e 	bl	800c4a4 <__sinit>
 800c9c8:	69a3      	ldr	r3, [r4, #24]
 800c9ca:	60a3      	str	r3, [r4, #8]
 800c9cc:	89a3      	ldrh	r3, [r4, #12]
 800c9ce:	071a      	lsls	r2, r3, #28
 800c9d0:	d501      	bpl.n	800c9d6 <__swbuf_r+0x20>
 800c9d2:	6923      	ldr	r3, [r4, #16]
 800c9d4:	b943      	cbnz	r3, 800c9e8 <__swbuf_r+0x32>
 800c9d6:	4621      	mov	r1, r4
 800c9d8:	4628      	mov	r0, r5
 800c9da:	f000 f82b 	bl	800ca34 <__swsetup_r>
 800c9de:	b118      	cbz	r0, 800c9e8 <__swbuf_r+0x32>
 800c9e0:	f04f 37ff 	mov.w	r7, #4294967295
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	6922      	ldr	r2, [r4, #16]
 800c9ec:	1a98      	subs	r0, r3, r2
 800c9ee:	6963      	ldr	r3, [r4, #20]
 800c9f0:	b2f6      	uxtb	r6, r6
 800c9f2:	4283      	cmp	r3, r0
 800c9f4:	4637      	mov	r7, r6
 800c9f6:	dc05      	bgt.n	800ca04 <__swbuf_r+0x4e>
 800c9f8:	4621      	mov	r1, r4
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f7ff fbdc 	bl	800c1b8 <_fflush_r>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	d1ed      	bne.n	800c9e0 <__swbuf_r+0x2a>
 800ca04:	68a3      	ldr	r3, [r4, #8]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	60a3      	str	r3, [r4, #8]
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	1c5a      	adds	r2, r3, #1
 800ca0e:	6022      	str	r2, [r4, #0]
 800ca10:	701e      	strb	r6, [r3, #0]
 800ca12:	6962      	ldr	r2, [r4, #20]
 800ca14:	1c43      	adds	r3, r0, #1
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d004      	beq.n	800ca24 <__swbuf_r+0x6e>
 800ca1a:	89a3      	ldrh	r3, [r4, #12]
 800ca1c:	07db      	lsls	r3, r3, #31
 800ca1e:	d5e1      	bpl.n	800c9e4 <__swbuf_r+0x2e>
 800ca20:	2e0a      	cmp	r6, #10
 800ca22:	d1df      	bne.n	800c9e4 <__swbuf_r+0x2e>
 800ca24:	4621      	mov	r1, r4
 800ca26:	4628      	mov	r0, r5
 800ca28:	f7ff fbc6 	bl	800c1b8 <_fflush_r>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d0d9      	beq.n	800c9e4 <__swbuf_r+0x2e>
 800ca30:	e7d6      	b.n	800c9e0 <__swbuf_r+0x2a>
	...

0800ca34 <__swsetup_r>:
 800ca34:	b538      	push	{r3, r4, r5, lr}
 800ca36:	4b29      	ldr	r3, [pc, #164]	@ (800cadc <__swsetup_r+0xa8>)
 800ca38:	4605      	mov	r5, r0
 800ca3a:	6818      	ldr	r0, [r3, #0]
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	b118      	cbz	r0, 800ca48 <__swsetup_r+0x14>
 800ca40:	6a03      	ldr	r3, [r0, #32]
 800ca42:	b90b      	cbnz	r3, 800ca48 <__swsetup_r+0x14>
 800ca44:	f7ff fd2e 	bl	800c4a4 <__sinit>
 800ca48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca4c:	0719      	lsls	r1, r3, #28
 800ca4e:	d422      	bmi.n	800ca96 <__swsetup_r+0x62>
 800ca50:	06da      	lsls	r2, r3, #27
 800ca52:	d407      	bmi.n	800ca64 <__swsetup_r+0x30>
 800ca54:	2209      	movs	r2, #9
 800ca56:	602a      	str	r2, [r5, #0]
 800ca58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca5c:	81a3      	strh	r3, [r4, #12]
 800ca5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca62:	e033      	b.n	800cacc <__swsetup_r+0x98>
 800ca64:	0758      	lsls	r0, r3, #29
 800ca66:	d512      	bpl.n	800ca8e <__swsetup_r+0x5a>
 800ca68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca6a:	b141      	cbz	r1, 800ca7e <__swsetup_r+0x4a>
 800ca6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca70:	4299      	cmp	r1, r3
 800ca72:	d002      	beq.n	800ca7a <__swsetup_r+0x46>
 800ca74:	4628      	mov	r0, r5
 800ca76:	f001 fa3b 	bl	800def0 <_free_r>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca7e:	89a3      	ldrh	r3, [r4, #12]
 800ca80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca84:	81a3      	strh	r3, [r4, #12]
 800ca86:	2300      	movs	r3, #0
 800ca88:	6063      	str	r3, [r4, #4]
 800ca8a:	6923      	ldr	r3, [r4, #16]
 800ca8c:	6023      	str	r3, [r4, #0]
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	f043 0308 	orr.w	r3, r3, #8
 800ca94:	81a3      	strh	r3, [r4, #12]
 800ca96:	6923      	ldr	r3, [r4, #16]
 800ca98:	b94b      	cbnz	r3, 800caae <__swsetup_r+0x7a>
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800caa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800caa4:	d003      	beq.n	800caae <__swsetup_r+0x7a>
 800caa6:	4621      	mov	r1, r4
 800caa8:	4628      	mov	r0, r5
 800caaa:	f002 fec7 	bl	800f83c <__smakebuf_r>
 800caae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cab2:	f013 0201 	ands.w	r2, r3, #1
 800cab6:	d00a      	beq.n	800cace <__swsetup_r+0x9a>
 800cab8:	2200      	movs	r2, #0
 800caba:	60a2      	str	r2, [r4, #8]
 800cabc:	6962      	ldr	r2, [r4, #20]
 800cabe:	4252      	negs	r2, r2
 800cac0:	61a2      	str	r2, [r4, #24]
 800cac2:	6922      	ldr	r2, [r4, #16]
 800cac4:	b942      	cbnz	r2, 800cad8 <__swsetup_r+0xa4>
 800cac6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800caca:	d1c5      	bne.n	800ca58 <__swsetup_r+0x24>
 800cacc:	bd38      	pop	{r3, r4, r5, pc}
 800cace:	0799      	lsls	r1, r3, #30
 800cad0:	bf58      	it	pl
 800cad2:	6962      	ldrpl	r2, [r4, #20]
 800cad4:	60a2      	str	r2, [r4, #8]
 800cad6:	e7f4      	b.n	800cac2 <__swsetup_r+0x8e>
 800cad8:	2000      	movs	r0, #0
 800cada:	e7f7      	b.n	800cacc <__swsetup_r+0x98>
 800cadc:	20000184 	.word	0x20000184

0800cae0 <_fseeko_r>:
 800cae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cae4:	460c      	mov	r4, r1
 800cae6:	4690      	mov	r8, r2
 800cae8:	461e      	mov	r6, r3
 800caea:	4605      	mov	r5, r0
 800caec:	b118      	cbz	r0, 800caf6 <_fseeko_r+0x16>
 800caee:	6a03      	ldr	r3, [r0, #32]
 800caf0:	b90b      	cbnz	r3, 800caf6 <_fseeko_r+0x16>
 800caf2:	f7ff fcd7 	bl	800c4a4 <__sinit>
 800caf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800caf8:	07d9      	lsls	r1, r3, #31
 800cafa:	d405      	bmi.n	800cb08 <_fseeko_r+0x28>
 800cafc:	89a3      	ldrh	r3, [r4, #12]
 800cafe:	059a      	lsls	r2, r3, #22
 800cb00:	d402      	bmi.n	800cb08 <_fseeko_r+0x28>
 800cb02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb04:	f000 fb6a 	bl	800d1dc <__retarget_lock_acquire_recursive>
 800cb08:	89a3      	ldrh	r3, [r4, #12]
 800cb0a:	f403 7384 	and.w	r3, r3, #264	@ 0x108
 800cb0e:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 800cb12:	d103      	bne.n	800cb1c <_fseeko_r+0x3c>
 800cb14:	4621      	mov	r1, r4
 800cb16:	4628      	mov	r0, r5
 800cb18:	f7ff fb4e 	bl	800c1b8 <_fflush_r>
 800cb1c:	f8d4 902c 	ldr.w	r9, [r4, #44]	@ 0x2c
 800cb20:	f1b9 0f00 	cmp.w	r9, #0
 800cb24:	d102      	bne.n	800cb2c <_fseeko_r+0x4c>
 800cb26:	231d      	movs	r3, #29
 800cb28:	602b      	str	r3, [r5, #0]
 800cb2a:	e058      	b.n	800cbde <_fseeko_r+0xfe>
 800cb2c:	2e01      	cmp	r6, #1
 800cb2e:	d03a      	beq.n	800cba6 <_fseeko_r+0xc6>
 800cb30:	f036 0302 	bics.w	r3, r6, #2
 800cb34:	d162      	bne.n	800cbfc <_fseeko_r+0x11c>
 800cb36:	6923      	ldr	r3, [r4, #16]
 800cb38:	b91b      	cbnz	r3, 800cb42 <_fseeko_r+0x62>
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	f002 fe7d 	bl	800f83c <__smakebuf_r>
 800cb42:	4621      	mov	r1, r4
 800cb44:	4628      	mov	r0, r5
 800cb46:	f7ff fb37 	bl	800c1b8 <_fflush_r>
 800cb4a:	4607      	mov	r7, r0
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d146      	bne.n	800cbde <_fseeko_r+0xfe>
 800cb50:	6a21      	ldr	r1, [r4, #32]
 800cb52:	4633      	mov	r3, r6
 800cb54:	4642      	mov	r2, r8
 800cb56:	4628      	mov	r0, r5
 800cb58:	47c8      	blx	r9
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	d03f      	beq.n	800cbde <_fseeko_r+0xfe>
 800cb5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb60:	b141      	cbz	r1, 800cb74 <_fseeko_r+0x94>
 800cb62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb66:	4299      	cmp	r1, r3
 800cb68:	d002      	beq.n	800cb70 <_fseeko_r+0x90>
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f001 f9c0 	bl	800def0 <_free_r>
 800cb70:	2300      	movs	r3, #0
 800cb72:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb74:	6923      	ldr	r3, [r4, #16]
 800cb76:	6023      	str	r3, [r4, #0]
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	f423 6302 	bic.w	r3, r3, #2080	@ 0x820
 800cb80:	81a3      	strh	r3, [r4, #12]
 800cb82:	2208      	movs	r2, #8
 800cb84:	6061      	str	r1, [r4, #4]
 800cb86:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
 800cb8a:	f000 f840 	bl	800cc0e <memset>
 800cb8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb90:	07da      	lsls	r2, r3, #31
 800cb92:	d405      	bmi.n	800cba0 <_fseeko_r+0xc0>
 800cb94:	89a3      	ldrh	r3, [r4, #12]
 800cb96:	059b      	lsls	r3, r3, #22
 800cb98:	d402      	bmi.n	800cba0 <_fseeko_r+0xc0>
 800cb9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb9c:	f000 fb1f 	bl	800d1de <__retarget_lock_release_recursive>
 800cba0:	4638      	mov	r0, r7
 800cba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cba6:	4621      	mov	r1, r4
 800cba8:	4628      	mov	r0, r5
 800cbaa:	f7ff fb05 	bl	800c1b8 <_fflush_r>
 800cbae:	89a2      	ldrh	r2, [r4, #12]
 800cbb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cbb4:	d00d      	beq.n	800cbd2 <_fseeko_r+0xf2>
 800cbb6:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800cbb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbbc:	075f      	lsls	r7, r3, #29
 800cbbe:	d514      	bpl.n	800cbea <_fseeko_r+0x10a>
 800cbc0:	6863      	ldr	r3, [r4, #4]
 800cbc2:	1ac0      	subs	r0, r0, r3
 800cbc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbc6:	b10b      	cbz	r3, 800cbcc <_fseeko_r+0xec>
 800cbc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cbca:	1ac0      	subs	r0, r0, r3
 800cbcc:	4480      	add	r8, r0
 800cbce:	2600      	movs	r6, #0
 800cbd0:	e7b1      	b.n	800cb36 <_fseeko_r+0x56>
 800cbd2:	4633      	mov	r3, r6
 800cbd4:	6a21      	ldr	r1, [r4, #32]
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	47c8      	blx	r9
 800cbda:	1c43      	adds	r3, r0, #1
 800cbdc:	d1ec      	bne.n	800cbb8 <_fseeko_r+0xd8>
 800cbde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbe0:	07d8      	lsls	r0, r3, #31
 800cbe2:	d50d      	bpl.n	800cc00 <_fseeko_r+0x120>
 800cbe4:	f04f 37ff 	mov.w	r7, #4294967295
 800cbe8:	e7da      	b.n	800cba0 <_fseeko_r+0xc0>
 800cbea:	071e      	lsls	r6, r3, #28
 800cbec:	d5ee      	bpl.n	800cbcc <_fseeko_r+0xec>
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d0eb      	beq.n	800cbcc <_fseeko_r+0xec>
 800cbf4:	6922      	ldr	r2, [r4, #16]
 800cbf6:	1a9b      	subs	r3, r3, r2
 800cbf8:	4418      	add	r0, r3
 800cbfa:	e7e7      	b.n	800cbcc <_fseeko_r+0xec>
 800cbfc:	2316      	movs	r3, #22
 800cbfe:	e793      	b.n	800cb28 <_fseeko_r+0x48>
 800cc00:	89a3      	ldrh	r3, [r4, #12]
 800cc02:	0599      	lsls	r1, r3, #22
 800cc04:	d4ee      	bmi.n	800cbe4 <_fseeko_r+0x104>
 800cc06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc08:	f000 fae9 	bl	800d1de <__retarget_lock_release_recursive>
 800cc0c:	e7ea      	b.n	800cbe4 <_fseeko_r+0x104>

0800cc0e <memset>:
 800cc0e:	4402      	add	r2, r0
 800cc10:	4603      	mov	r3, r0
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d100      	bne.n	800cc18 <memset+0xa>
 800cc16:	4770      	bx	lr
 800cc18:	f803 1b01 	strb.w	r1, [r3], #1
 800cc1c:	e7f9      	b.n	800cc12 <memset+0x4>
	...

0800cc20 <_strerror_r>:
 800cc20:	b510      	push	{r4, lr}
 800cc22:	4604      	mov	r4, r0
 800cc24:	4608      	mov	r0, r1
 800cc26:	4611      	mov	r1, r2
 800cc28:	461a      	mov	r2, r3
 800cc2a:	288e      	cmp	r0, #142	@ 0x8e
 800cc2c:	f200 8130 	bhi.w	800ce90 <_strerror_r+0x270>
 800cc30:	e8df f010 	tbh	[pc, r0, lsl #1]
 800cc34:	0138008f 	.word	0x0138008f
 800cc38:	00940092 	.word	0x00940092
 800cc3c:	00980096 	.word	0x00980096
 800cc40:	009c009a 	.word	0x009c009a
 800cc44:	00a2009e 	.word	0x00a2009e
 800cc48:	00a800a4 	.word	0x00a800a4
 800cc4c:	00ac00aa 	.word	0x00ac00aa
 800cc50:	012e00ae 	.word	0x012e00ae
 800cc54:	00b200b0 	.word	0x00b200b0
 800cc58:	00b600b4 	.word	0x00b600b4
 800cc5c:	00be00b8 	.word	0x00be00b8
 800cc60:	00c600c0 	.word	0x00c600c0
 800cc64:	00ca00c8 	.word	0x00ca00c8
 800cc68:	00ce00cc 	.word	0x00ce00cc
 800cc6c:	00d600d2 	.word	0x00d600d2
 800cc70:	00da00d8 	.word	0x00da00d8
 800cc74:	00de00dc 	.word	0x00de00dc
 800cc78:	00e200e0 	.word	0x00e200e0
 800cc7c:	012e00e4 	.word	0x012e00e4
 800cc80:	012e012e 	.word	0x012e012e
 800cc84:	012e012e 	.word	0x012e012e
 800cc88:	012e012e 	.word	0x012e012e
 800cc8c:	00e8012e 	.word	0x00e8012e
 800cc90:	012e00ec 	.word	0x012e00ec
 800cc94:	012e012e 	.word	0x012e012e
 800cc98:	012e012e 	.word	0x012e012e
 800cc9c:	012e012e 	.word	0x012e012e
 800cca0:	012e012e 	.word	0x012e012e
 800cca4:	012e012e 	.word	0x012e012e
 800cca8:	012e012e 	.word	0x012e012e
 800ccac:	010800ee 	.word	0x010800ee
 800ccb0:	00f200f0 	.word	0x00f200f0
 800ccb4:	012e012e 	.word	0x012e012e
 800ccb8:	00f4012e 	.word	0x00f4012e
 800ccbc:	012e012e 	.word	0x012e012e
 800ccc0:	00f6012e 	.word	0x00f6012e
 800ccc4:	012e012e 	.word	0x012e012e
 800ccc8:	012e00fa 	.word	0x012e00fa
 800cccc:	00fc012e 	.word	0x00fc012e
 800ccd0:	012e012e 	.word	0x012e012e
 800ccd4:	012e012e 	.word	0x012e012e
 800ccd8:	012e012e 	.word	0x012e012e
 800ccdc:	012e012e 	.word	0x012e012e
 800cce0:	012e012e 	.word	0x012e012e
 800cce4:	012e00fe 	.word	0x012e00fe
 800cce8:	01020100 	.word	0x01020100
 800ccec:	012e0104 	.word	0x012e0104
 800ccf0:	0126012e 	.word	0x0126012e
 800ccf4:	012e012e 	.word	0x012e012e
 800ccf8:	012e012e 	.word	0x012e012e
 800ccfc:	012e012e 	.word	0x012e012e
 800cd00:	012e012e 	.word	0x012e012e
 800cd04:	01060114 	.word	0x01060114
 800cd08:	010c010a 	.word	0x010c010a
 800cd0c:	0110010e 	.word	0x0110010e
 800cd10:	0112012e 	.word	0x0112012e
 800cd14:	011a0116 	.word	0x011a0116
 800cd18:	00c200ea 	.word	0x00c200ea
 800cd1c:	00ba012c 	.word	0x00ba012c
 800cd20:	00bc00d0 	.word	0x00bc00d0
 800cd24:	00a600a0 	.word	0x00a600a0
 800cd28:	00f8012a 	.word	0x00f8012a
 800cd2c:	0118012e 	.word	0x0118012e
 800cd30:	011e00c4 	.word	0x011e00c4
 800cd34:	012e011c 	.word	0x012e011c
 800cd38:	012e012e 	.word	0x012e012e
 800cd3c:	012e012e 	.word	0x012e012e
 800cd40:	012e00d4 	.word	0x012e00d4
 800cd44:	012e012e 	.word	0x012e012e
 800cd48:	012800e6 	.word	0x012800e6
 800cd4c:	01220120 	.word	0x01220120
 800cd50:	0124      	.short	0x0124
 800cd52:	4b55      	ldr	r3, [pc, #340]	@ (800cea8 <_strerror_r+0x288>)
 800cd54:	4618      	mov	r0, r3
 800cd56:	bd10      	pop	{r4, pc}
 800cd58:	4b54      	ldr	r3, [pc, #336]	@ (800ceac <_strerror_r+0x28c>)
 800cd5a:	e7fb      	b.n	800cd54 <_strerror_r+0x134>
 800cd5c:	4b54      	ldr	r3, [pc, #336]	@ (800ceb0 <_strerror_r+0x290>)
 800cd5e:	e7f9      	b.n	800cd54 <_strerror_r+0x134>
 800cd60:	4b54      	ldr	r3, [pc, #336]	@ (800ceb4 <_strerror_r+0x294>)
 800cd62:	e7f7      	b.n	800cd54 <_strerror_r+0x134>
 800cd64:	4b54      	ldr	r3, [pc, #336]	@ (800ceb8 <_strerror_r+0x298>)
 800cd66:	e7f5      	b.n	800cd54 <_strerror_r+0x134>
 800cd68:	4b54      	ldr	r3, [pc, #336]	@ (800cebc <_strerror_r+0x29c>)
 800cd6a:	e7f3      	b.n	800cd54 <_strerror_r+0x134>
 800cd6c:	4b54      	ldr	r3, [pc, #336]	@ (800cec0 <_strerror_r+0x2a0>)
 800cd6e:	e7f1      	b.n	800cd54 <_strerror_r+0x134>
 800cd70:	4b54      	ldr	r3, [pc, #336]	@ (800cec4 <_strerror_r+0x2a4>)
 800cd72:	e7ef      	b.n	800cd54 <_strerror_r+0x134>
 800cd74:	4b54      	ldr	r3, [pc, #336]	@ (800cec8 <_strerror_r+0x2a8>)
 800cd76:	e7ed      	b.n	800cd54 <_strerror_r+0x134>
 800cd78:	4b54      	ldr	r3, [pc, #336]	@ (800cecc <_strerror_r+0x2ac>)
 800cd7a:	e7eb      	b.n	800cd54 <_strerror_r+0x134>
 800cd7c:	4b54      	ldr	r3, [pc, #336]	@ (800ced0 <_strerror_r+0x2b0>)
 800cd7e:	e7e9      	b.n	800cd54 <_strerror_r+0x134>
 800cd80:	4b54      	ldr	r3, [pc, #336]	@ (800ced4 <_strerror_r+0x2b4>)
 800cd82:	e7e7      	b.n	800cd54 <_strerror_r+0x134>
 800cd84:	4b54      	ldr	r3, [pc, #336]	@ (800ced8 <_strerror_r+0x2b8>)
 800cd86:	e7e5      	b.n	800cd54 <_strerror_r+0x134>
 800cd88:	4b54      	ldr	r3, [pc, #336]	@ (800cedc <_strerror_r+0x2bc>)
 800cd8a:	e7e3      	b.n	800cd54 <_strerror_r+0x134>
 800cd8c:	4b54      	ldr	r3, [pc, #336]	@ (800cee0 <_strerror_r+0x2c0>)
 800cd8e:	e7e1      	b.n	800cd54 <_strerror_r+0x134>
 800cd90:	4b54      	ldr	r3, [pc, #336]	@ (800cee4 <_strerror_r+0x2c4>)
 800cd92:	e7df      	b.n	800cd54 <_strerror_r+0x134>
 800cd94:	4b54      	ldr	r3, [pc, #336]	@ (800cee8 <_strerror_r+0x2c8>)
 800cd96:	e7dd      	b.n	800cd54 <_strerror_r+0x134>
 800cd98:	4b54      	ldr	r3, [pc, #336]	@ (800ceec <_strerror_r+0x2cc>)
 800cd9a:	e7db      	b.n	800cd54 <_strerror_r+0x134>
 800cd9c:	4b54      	ldr	r3, [pc, #336]	@ (800cef0 <_strerror_r+0x2d0>)
 800cd9e:	e7d9      	b.n	800cd54 <_strerror_r+0x134>
 800cda0:	4b54      	ldr	r3, [pc, #336]	@ (800cef4 <_strerror_r+0x2d4>)
 800cda2:	e7d7      	b.n	800cd54 <_strerror_r+0x134>
 800cda4:	4b54      	ldr	r3, [pc, #336]	@ (800cef8 <_strerror_r+0x2d8>)
 800cda6:	e7d5      	b.n	800cd54 <_strerror_r+0x134>
 800cda8:	4b54      	ldr	r3, [pc, #336]	@ (800cefc <_strerror_r+0x2dc>)
 800cdaa:	e7d3      	b.n	800cd54 <_strerror_r+0x134>
 800cdac:	4b54      	ldr	r3, [pc, #336]	@ (800cf00 <_strerror_r+0x2e0>)
 800cdae:	e7d1      	b.n	800cd54 <_strerror_r+0x134>
 800cdb0:	4b54      	ldr	r3, [pc, #336]	@ (800cf04 <_strerror_r+0x2e4>)
 800cdb2:	e7cf      	b.n	800cd54 <_strerror_r+0x134>
 800cdb4:	4b54      	ldr	r3, [pc, #336]	@ (800cf08 <_strerror_r+0x2e8>)
 800cdb6:	e7cd      	b.n	800cd54 <_strerror_r+0x134>
 800cdb8:	4b54      	ldr	r3, [pc, #336]	@ (800cf0c <_strerror_r+0x2ec>)
 800cdba:	e7cb      	b.n	800cd54 <_strerror_r+0x134>
 800cdbc:	4b54      	ldr	r3, [pc, #336]	@ (800cf10 <_strerror_r+0x2f0>)
 800cdbe:	e7c9      	b.n	800cd54 <_strerror_r+0x134>
 800cdc0:	4b54      	ldr	r3, [pc, #336]	@ (800cf14 <_strerror_r+0x2f4>)
 800cdc2:	e7c7      	b.n	800cd54 <_strerror_r+0x134>
 800cdc4:	4b54      	ldr	r3, [pc, #336]	@ (800cf18 <_strerror_r+0x2f8>)
 800cdc6:	e7c5      	b.n	800cd54 <_strerror_r+0x134>
 800cdc8:	4b54      	ldr	r3, [pc, #336]	@ (800cf1c <_strerror_r+0x2fc>)
 800cdca:	e7c3      	b.n	800cd54 <_strerror_r+0x134>
 800cdcc:	4b54      	ldr	r3, [pc, #336]	@ (800cf20 <_strerror_r+0x300>)
 800cdce:	e7c1      	b.n	800cd54 <_strerror_r+0x134>
 800cdd0:	4b54      	ldr	r3, [pc, #336]	@ (800cf24 <_strerror_r+0x304>)
 800cdd2:	e7bf      	b.n	800cd54 <_strerror_r+0x134>
 800cdd4:	4b54      	ldr	r3, [pc, #336]	@ (800cf28 <_strerror_r+0x308>)
 800cdd6:	e7bd      	b.n	800cd54 <_strerror_r+0x134>
 800cdd8:	4b54      	ldr	r3, [pc, #336]	@ (800cf2c <_strerror_r+0x30c>)
 800cdda:	e7bb      	b.n	800cd54 <_strerror_r+0x134>
 800cddc:	4b54      	ldr	r3, [pc, #336]	@ (800cf30 <_strerror_r+0x310>)
 800cdde:	e7b9      	b.n	800cd54 <_strerror_r+0x134>
 800cde0:	4b54      	ldr	r3, [pc, #336]	@ (800cf34 <_strerror_r+0x314>)
 800cde2:	e7b7      	b.n	800cd54 <_strerror_r+0x134>
 800cde4:	4b54      	ldr	r3, [pc, #336]	@ (800cf38 <_strerror_r+0x318>)
 800cde6:	e7b5      	b.n	800cd54 <_strerror_r+0x134>
 800cde8:	4b54      	ldr	r3, [pc, #336]	@ (800cf3c <_strerror_r+0x31c>)
 800cdea:	e7b3      	b.n	800cd54 <_strerror_r+0x134>
 800cdec:	4b54      	ldr	r3, [pc, #336]	@ (800cf40 <_strerror_r+0x320>)
 800cdee:	e7b1      	b.n	800cd54 <_strerror_r+0x134>
 800cdf0:	4b54      	ldr	r3, [pc, #336]	@ (800cf44 <_strerror_r+0x324>)
 800cdf2:	e7af      	b.n	800cd54 <_strerror_r+0x134>
 800cdf4:	4b54      	ldr	r3, [pc, #336]	@ (800cf48 <_strerror_r+0x328>)
 800cdf6:	e7ad      	b.n	800cd54 <_strerror_r+0x134>
 800cdf8:	4b54      	ldr	r3, [pc, #336]	@ (800cf4c <_strerror_r+0x32c>)
 800cdfa:	e7ab      	b.n	800cd54 <_strerror_r+0x134>
 800cdfc:	4b54      	ldr	r3, [pc, #336]	@ (800cf50 <_strerror_r+0x330>)
 800cdfe:	e7a9      	b.n	800cd54 <_strerror_r+0x134>
 800ce00:	4b54      	ldr	r3, [pc, #336]	@ (800cf54 <_strerror_r+0x334>)
 800ce02:	e7a7      	b.n	800cd54 <_strerror_r+0x134>
 800ce04:	4b54      	ldr	r3, [pc, #336]	@ (800cf58 <_strerror_r+0x338>)
 800ce06:	e7a5      	b.n	800cd54 <_strerror_r+0x134>
 800ce08:	4b54      	ldr	r3, [pc, #336]	@ (800cf5c <_strerror_r+0x33c>)
 800ce0a:	e7a3      	b.n	800cd54 <_strerror_r+0x134>
 800ce0c:	4b54      	ldr	r3, [pc, #336]	@ (800cf60 <_strerror_r+0x340>)
 800ce0e:	e7a1      	b.n	800cd54 <_strerror_r+0x134>
 800ce10:	4b54      	ldr	r3, [pc, #336]	@ (800cf64 <_strerror_r+0x344>)
 800ce12:	e79f      	b.n	800cd54 <_strerror_r+0x134>
 800ce14:	4b54      	ldr	r3, [pc, #336]	@ (800cf68 <_strerror_r+0x348>)
 800ce16:	e79d      	b.n	800cd54 <_strerror_r+0x134>
 800ce18:	4b54      	ldr	r3, [pc, #336]	@ (800cf6c <_strerror_r+0x34c>)
 800ce1a:	e79b      	b.n	800cd54 <_strerror_r+0x134>
 800ce1c:	4b54      	ldr	r3, [pc, #336]	@ (800cf70 <_strerror_r+0x350>)
 800ce1e:	e799      	b.n	800cd54 <_strerror_r+0x134>
 800ce20:	4b54      	ldr	r3, [pc, #336]	@ (800cf74 <_strerror_r+0x354>)
 800ce22:	e797      	b.n	800cd54 <_strerror_r+0x134>
 800ce24:	4b54      	ldr	r3, [pc, #336]	@ (800cf78 <_strerror_r+0x358>)
 800ce26:	e795      	b.n	800cd54 <_strerror_r+0x134>
 800ce28:	4b54      	ldr	r3, [pc, #336]	@ (800cf7c <_strerror_r+0x35c>)
 800ce2a:	e793      	b.n	800cd54 <_strerror_r+0x134>
 800ce2c:	4b54      	ldr	r3, [pc, #336]	@ (800cf80 <_strerror_r+0x360>)
 800ce2e:	e791      	b.n	800cd54 <_strerror_r+0x134>
 800ce30:	4b54      	ldr	r3, [pc, #336]	@ (800cf84 <_strerror_r+0x364>)
 800ce32:	e78f      	b.n	800cd54 <_strerror_r+0x134>
 800ce34:	4b54      	ldr	r3, [pc, #336]	@ (800cf88 <_strerror_r+0x368>)
 800ce36:	e78d      	b.n	800cd54 <_strerror_r+0x134>
 800ce38:	4b54      	ldr	r3, [pc, #336]	@ (800cf8c <_strerror_r+0x36c>)
 800ce3a:	e78b      	b.n	800cd54 <_strerror_r+0x134>
 800ce3c:	4b54      	ldr	r3, [pc, #336]	@ (800cf90 <_strerror_r+0x370>)
 800ce3e:	e789      	b.n	800cd54 <_strerror_r+0x134>
 800ce40:	4b54      	ldr	r3, [pc, #336]	@ (800cf94 <_strerror_r+0x374>)
 800ce42:	e787      	b.n	800cd54 <_strerror_r+0x134>
 800ce44:	4b54      	ldr	r3, [pc, #336]	@ (800cf98 <_strerror_r+0x378>)
 800ce46:	e785      	b.n	800cd54 <_strerror_r+0x134>
 800ce48:	4b54      	ldr	r3, [pc, #336]	@ (800cf9c <_strerror_r+0x37c>)
 800ce4a:	e783      	b.n	800cd54 <_strerror_r+0x134>
 800ce4c:	4b54      	ldr	r3, [pc, #336]	@ (800cfa0 <_strerror_r+0x380>)
 800ce4e:	e781      	b.n	800cd54 <_strerror_r+0x134>
 800ce50:	4b54      	ldr	r3, [pc, #336]	@ (800cfa4 <_strerror_r+0x384>)
 800ce52:	e77f      	b.n	800cd54 <_strerror_r+0x134>
 800ce54:	4b54      	ldr	r3, [pc, #336]	@ (800cfa8 <_strerror_r+0x388>)
 800ce56:	e77d      	b.n	800cd54 <_strerror_r+0x134>
 800ce58:	4b54      	ldr	r3, [pc, #336]	@ (800cfac <_strerror_r+0x38c>)
 800ce5a:	e77b      	b.n	800cd54 <_strerror_r+0x134>
 800ce5c:	4b54      	ldr	r3, [pc, #336]	@ (800cfb0 <_strerror_r+0x390>)
 800ce5e:	e779      	b.n	800cd54 <_strerror_r+0x134>
 800ce60:	4b54      	ldr	r3, [pc, #336]	@ (800cfb4 <_strerror_r+0x394>)
 800ce62:	e777      	b.n	800cd54 <_strerror_r+0x134>
 800ce64:	4b54      	ldr	r3, [pc, #336]	@ (800cfb8 <_strerror_r+0x398>)
 800ce66:	e775      	b.n	800cd54 <_strerror_r+0x134>
 800ce68:	4b54      	ldr	r3, [pc, #336]	@ (800cfbc <_strerror_r+0x39c>)
 800ce6a:	e773      	b.n	800cd54 <_strerror_r+0x134>
 800ce6c:	4b54      	ldr	r3, [pc, #336]	@ (800cfc0 <_strerror_r+0x3a0>)
 800ce6e:	e771      	b.n	800cd54 <_strerror_r+0x134>
 800ce70:	4b54      	ldr	r3, [pc, #336]	@ (800cfc4 <_strerror_r+0x3a4>)
 800ce72:	e76f      	b.n	800cd54 <_strerror_r+0x134>
 800ce74:	4b54      	ldr	r3, [pc, #336]	@ (800cfc8 <_strerror_r+0x3a8>)
 800ce76:	e76d      	b.n	800cd54 <_strerror_r+0x134>
 800ce78:	4b54      	ldr	r3, [pc, #336]	@ (800cfcc <_strerror_r+0x3ac>)
 800ce7a:	e76b      	b.n	800cd54 <_strerror_r+0x134>
 800ce7c:	4b54      	ldr	r3, [pc, #336]	@ (800cfd0 <_strerror_r+0x3b0>)
 800ce7e:	e769      	b.n	800cd54 <_strerror_r+0x134>
 800ce80:	4b54      	ldr	r3, [pc, #336]	@ (800cfd4 <_strerror_r+0x3b4>)
 800ce82:	e767      	b.n	800cd54 <_strerror_r+0x134>
 800ce84:	4b54      	ldr	r3, [pc, #336]	@ (800cfd8 <_strerror_r+0x3b8>)
 800ce86:	e765      	b.n	800cd54 <_strerror_r+0x134>
 800ce88:	4b54      	ldr	r3, [pc, #336]	@ (800cfdc <_strerror_r+0x3bc>)
 800ce8a:	e763      	b.n	800cd54 <_strerror_r+0x134>
 800ce8c:	4b54      	ldr	r3, [pc, #336]	@ (800cfe0 <_strerror_r+0x3c0>)
 800ce8e:	e761      	b.n	800cd54 <_strerror_r+0x134>
 800ce90:	2a00      	cmp	r2, #0
 800ce92:	bf08      	it	eq
 800ce94:	4622      	moveq	r2, r4
 800ce96:	f000 f917 	bl	800d0c8 <_user_strerror>
 800ce9a:	4b52      	ldr	r3, [pc, #328]	@ (800cfe4 <_strerror_r+0x3c4>)
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	bf18      	it	ne
 800cea0:	4603      	movne	r3, r0
 800cea2:	e757      	b.n	800cd54 <_strerror_r+0x134>
 800cea4:	4b50      	ldr	r3, [pc, #320]	@ (800cfe8 <_strerror_r+0x3c8>)
 800cea6:	e755      	b.n	800cd54 <_strerror_r+0x134>
 800cea8:	08010959 	.word	0x08010959
 800ceac:	0801096b 	.word	0x0801096b
 800ceb0:	08010985 	.word	0x08010985
 800ceb4:	08010995 	.word	0x08010995
 800ceb8:	080109ad 	.word	0x080109ad
 800cebc:	080109b7 	.word	0x080109b7
 800cec0:	080109d1 	.word	0x080109d1
 800cec4:	080109e3 	.word	0x080109e3
 800cec8:	080109f5 	.word	0x080109f5
 800cecc:	08010a0e 	.word	0x08010a0e
 800ced0:	08010a1e 	.word	0x08010a1e
 800ced4:	08010a2a 	.word	0x08010a2a
 800ced8:	08010a47 	.word	0x08010a47
 800cedc:	08010a59 	.word	0x08010a59
 800cee0:	08010a6a 	.word	0x08010a6a
 800cee4:	08010a7c 	.word	0x08010a7c
 800cee8:	08010a88 	.word	0x08010a88
 800ceec:	08010aa0 	.word	0x08010aa0
 800cef0:	08010aac 	.word	0x08010aac
 800cef4:	08010abe 	.word	0x08010abe
 800cef8:	08010acd 	.word	0x08010acd
 800cefc:	08010add 	.word	0x08010add
 800cf00:	08010aea 	.word	0x08010aea
 800cf04:	08010b09 	.word	0x08010b09
 800cf08:	08010b18 	.word	0x08010b18
 800cf0c:	08010b29 	.word	0x08010b29
 800cf10:	08010b4d 	.word	0x08010b4d
 800cf14:	08010b6b 	.word	0x08010b6b
 800cf18:	08010b89 	.word	0x08010b89
 800cf1c:	08010ba9 	.word	0x08010ba9
 800cf20:	08010bc0 	.word	0x08010bc0
 800cf24:	08010bcf 	.word	0x08010bcf
 800cf28:	08010bde 	.word	0x08010bde
 800cf2c:	08010bf2 	.word	0x08010bf2
 800cf30:	08010c0a 	.word	0x08010c0a
 800cf34:	08010c18 	.word	0x08010c18
 800cf38:	08010c25 	.word	0x08010c25
 800cf3c:	08010c3b 	.word	0x08010c3b
 800cf40:	08010c4a 	.word	0x08010c4a
 800cf44:	08010c56 	.word	0x08010c56
 800cf48:	08010c85 	.word	0x08010c85
 800cf4c:	08010c96 	.word	0x08010c96
 800cf50:	08010cb1 	.word	0x08010cb1
 800cf54:	08010cc4 	.word	0x08010cc4
 800cf58:	08010cda 	.word	0x08010cda
 800cf5c:	08010ce3 	.word	0x08010ce3
 800cf60:	08010cfa 	.word	0x08010cfa
 800cf64:	08010d02 	.word	0x08010d02
 800cf68:	08010d0f 	.word	0x08010d0f
 800cf6c:	08010d24 	.word	0x08010d24
 800cf70:	08010d38 	.word	0x08010d38
 800cf74:	08010d50 	.word	0x08010d50
 800cf78:	08010d5f 	.word	0x08010d5f
 800cf7c:	08010d70 	.word	0x08010d70
 800cf80:	08010d83 	.word	0x08010d83
 800cf84:	08010d8f 	.word	0x08010d8f
 800cf88:	08010da8 	.word	0x08010da8
 800cf8c:	08010dbc 	.word	0x08010dbc
 800cf90:	08010dd7 	.word	0x08010dd7
 800cf94:	08010def 	.word	0x08010def
 800cf98:	08010e09 	.word	0x08010e09
 800cf9c:	08010e11 	.word	0x08010e11
 800cfa0:	08010e41 	.word	0x08010e41
 800cfa4:	08010e60 	.word	0x08010e60
 800cfa8:	08010e7f 	.word	0x08010e7f
 800cfac:	08010e96 	.word	0x08010e96
 800cfb0:	08010ea9 	.word	0x08010ea9
 800cfb4:	08010ec2 	.word	0x08010ec2
 800cfb8:	08010ed9 	.word	0x08010ed9
 800cfbc:	08010eef 	.word	0x08010eef
 800cfc0:	08010f10 	.word	0x08010f10
 800cfc4:	08010f28 	.word	0x08010f28
 800cfc8:	08010f44 	.word	0x08010f44
 800cfcc:	08010f57 	.word	0x08010f57
 800cfd0:	08010f6d 	.word	0x08010f6d
 800cfd4:	08010f81 	.word	0x08010f81
 800cfd8:	08010fa3 	.word	0x08010fa3
 800cfdc:	08010fc9 	.word	0x08010fc9
 800cfe0:	08010fda 	.word	0x08010fda
 800cfe4:	080110a3 	.word	0x080110a3
 800cfe8:	08010961 	.word	0x08010961

0800cfec <strncmp>:
 800cfec:	b510      	push	{r4, lr}
 800cfee:	b16a      	cbz	r2, 800d00c <strncmp+0x20>
 800cff0:	3901      	subs	r1, #1
 800cff2:	1884      	adds	r4, r0, r2
 800cff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cff8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cffc:	429a      	cmp	r2, r3
 800cffe:	d103      	bne.n	800d008 <strncmp+0x1c>
 800d000:	42a0      	cmp	r0, r4
 800d002:	d001      	beq.n	800d008 <strncmp+0x1c>
 800d004:	2a00      	cmp	r2, #0
 800d006:	d1f5      	bne.n	800cff4 <strncmp+0x8>
 800d008:	1ad0      	subs	r0, r2, r3
 800d00a:	bd10      	pop	{r4, pc}
 800d00c:	4610      	mov	r0, r2
 800d00e:	e7fc      	b.n	800d00a <strncmp+0x1e>

0800d010 <strtok>:
 800d010:	4b16      	ldr	r3, [pc, #88]	@ (800d06c <strtok+0x5c>)
 800d012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d016:	681f      	ldr	r7, [r3, #0]
 800d018:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800d01a:	4605      	mov	r5, r0
 800d01c:	460e      	mov	r6, r1
 800d01e:	b9ec      	cbnz	r4, 800d05c <strtok+0x4c>
 800d020:	2050      	movs	r0, #80	@ 0x50
 800d022:	f001 fae9 	bl	800e5f8 <malloc>
 800d026:	4602      	mov	r2, r0
 800d028:	6478      	str	r0, [r7, #68]	@ 0x44
 800d02a:	b920      	cbnz	r0, 800d036 <strtok+0x26>
 800d02c:	4b10      	ldr	r3, [pc, #64]	@ (800d070 <strtok+0x60>)
 800d02e:	4811      	ldr	r0, [pc, #68]	@ (800d074 <strtok+0x64>)
 800d030:	215b      	movs	r1, #91	@ 0x5b
 800d032:	f000 f8f3 	bl	800d21c <__assert_func>
 800d036:	e9c0 4400 	strd	r4, r4, [r0]
 800d03a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d03e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d042:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800d046:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800d04a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800d04e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800d052:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800d056:	6184      	str	r4, [r0, #24]
 800d058:	7704      	strb	r4, [r0, #28]
 800d05a:	6244      	str	r4, [r0, #36]	@ 0x24
 800d05c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d05e:	4631      	mov	r1, r6
 800d060:	4628      	mov	r0, r5
 800d062:	2301      	movs	r3, #1
 800d064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d068:	f000 b806 	b.w	800d078 <__strtok_r>
 800d06c:	20000184 	.word	0x20000184
 800d070:	08010fef 	.word	0x08010fef
 800d074:	08011006 	.word	0x08011006

0800d078 <__strtok_r>:
 800d078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d07a:	4604      	mov	r4, r0
 800d07c:	b908      	cbnz	r0, 800d082 <__strtok_r+0xa>
 800d07e:	6814      	ldr	r4, [r2, #0]
 800d080:	b144      	cbz	r4, 800d094 <__strtok_r+0x1c>
 800d082:	4620      	mov	r0, r4
 800d084:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d088:	460f      	mov	r7, r1
 800d08a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d08e:	b91e      	cbnz	r6, 800d098 <__strtok_r+0x20>
 800d090:	b965      	cbnz	r5, 800d0ac <__strtok_r+0x34>
 800d092:	6015      	str	r5, [r2, #0]
 800d094:	2000      	movs	r0, #0
 800d096:	e005      	b.n	800d0a4 <__strtok_r+0x2c>
 800d098:	42b5      	cmp	r5, r6
 800d09a:	d1f6      	bne.n	800d08a <__strtok_r+0x12>
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d1f0      	bne.n	800d082 <__strtok_r+0xa>
 800d0a0:	6014      	str	r4, [r2, #0]
 800d0a2:	7003      	strb	r3, [r0, #0]
 800d0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0a6:	461c      	mov	r4, r3
 800d0a8:	e00c      	b.n	800d0c4 <__strtok_r+0x4c>
 800d0aa:	b915      	cbnz	r5, 800d0b2 <__strtok_r+0x3a>
 800d0ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d0b0:	460e      	mov	r6, r1
 800d0b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d0b6:	42ab      	cmp	r3, r5
 800d0b8:	d1f7      	bne.n	800d0aa <__strtok_r+0x32>
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d0f3      	beq.n	800d0a6 <__strtok_r+0x2e>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d0c4:	6014      	str	r4, [r2, #0]
 800d0c6:	e7ed      	b.n	800d0a4 <__strtok_r+0x2c>

0800d0c8 <_user_strerror>:
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	4770      	bx	lr

0800d0cc <_localeconv_r>:
 800d0cc:	4800      	ldr	r0, [pc, #0]	@ (800d0d0 <_localeconv_r+0x4>)
 800d0ce:	4770      	bx	lr
 800d0d0:	20000108 	.word	0x20000108

0800d0d4 <_close_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4d06      	ldr	r5, [pc, #24]	@ (800d0f0 <_close_r+0x1c>)
 800d0d8:	2300      	movs	r3, #0
 800d0da:	4604      	mov	r4, r0
 800d0dc:	4608      	mov	r0, r1
 800d0de:	602b      	str	r3, [r5, #0]
 800d0e0:	f7fd f9c0 	bl	800a464 <_close>
 800d0e4:	1c43      	adds	r3, r0, #1
 800d0e6:	d102      	bne.n	800d0ee <_close_r+0x1a>
 800d0e8:	682b      	ldr	r3, [r5, #0]
 800d0ea:	b103      	cbz	r3, 800d0ee <_close_r+0x1a>
 800d0ec:	6023      	str	r3, [r4, #0]
 800d0ee:	bd38      	pop	{r3, r4, r5, pc}
 800d0f0:	20003914 	.word	0x20003914

0800d0f4 <_lseek_r>:
 800d0f4:	b538      	push	{r3, r4, r5, lr}
 800d0f6:	4d07      	ldr	r5, [pc, #28]	@ (800d114 <_lseek_r+0x20>)
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	4608      	mov	r0, r1
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	2200      	movs	r2, #0
 800d100:	602a      	str	r2, [r5, #0]
 800d102:	461a      	mov	r2, r3
 800d104:	f7fd f96f 	bl	800a3e6 <_lseek>
 800d108:	1c43      	adds	r3, r0, #1
 800d10a:	d102      	bne.n	800d112 <_lseek_r+0x1e>
 800d10c:	682b      	ldr	r3, [r5, #0]
 800d10e:	b103      	cbz	r3, 800d112 <_lseek_r+0x1e>
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	bd38      	pop	{r3, r4, r5, pc}
 800d114:	20003914 	.word	0x20003914

0800d118 <_open_r>:
 800d118:	b538      	push	{r3, r4, r5, lr}
 800d11a:	4d07      	ldr	r5, [pc, #28]	@ (800d138 <_open_r+0x20>)
 800d11c:	4604      	mov	r4, r0
 800d11e:	4608      	mov	r0, r1
 800d120:	4611      	mov	r1, r2
 800d122:	2200      	movs	r2, #0
 800d124:	602a      	str	r2, [r5, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	f7fd fa64 	bl	800a5f4 <_open>
 800d12c:	1c43      	adds	r3, r0, #1
 800d12e:	d102      	bne.n	800d136 <_open_r+0x1e>
 800d130:	682b      	ldr	r3, [r5, #0]
 800d132:	b103      	cbz	r3, 800d136 <_open_r+0x1e>
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	bd38      	pop	{r3, r4, r5, pc}
 800d138:	20003914 	.word	0x20003914

0800d13c <_read_r>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	4d07      	ldr	r5, [pc, #28]	@ (800d15c <_read_r+0x20>)
 800d140:	4604      	mov	r4, r0
 800d142:	4608      	mov	r0, r1
 800d144:	4611      	mov	r1, r2
 800d146:	2200      	movs	r2, #0
 800d148:	602a      	str	r2, [r5, #0]
 800d14a:	461a      	mov	r2, r3
 800d14c:	f7fd f8f5 	bl	800a33a <_read>
 800d150:	1c43      	adds	r3, r0, #1
 800d152:	d102      	bne.n	800d15a <_read_r+0x1e>
 800d154:	682b      	ldr	r3, [r5, #0]
 800d156:	b103      	cbz	r3, 800d15a <_read_r+0x1e>
 800d158:	6023      	str	r3, [r4, #0]
 800d15a:	bd38      	pop	{r3, r4, r5, pc}
 800d15c:	20003914 	.word	0x20003914

0800d160 <_write_r>:
 800d160:	b538      	push	{r3, r4, r5, lr}
 800d162:	4d07      	ldr	r5, [pc, #28]	@ (800d180 <_write_r+0x20>)
 800d164:	4604      	mov	r4, r0
 800d166:	4608      	mov	r0, r1
 800d168:	4611      	mov	r1, r2
 800d16a:	2200      	movs	r2, #0
 800d16c:	602a      	str	r2, [r5, #0]
 800d16e:	461a      	mov	r2, r3
 800d170:	f7fd f94b 	bl	800a40a <_write>
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	d102      	bne.n	800d17e <_write_r+0x1e>
 800d178:	682b      	ldr	r3, [r5, #0]
 800d17a:	b103      	cbz	r3, 800d17e <_write_r+0x1e>
 800d17c:	6023      	str	r3, [r4, #0]
 800d17e:	bd38      	pop	{r3, r4, r5, pc}
 800d180:	20003914 	.word	0x20003914

0800d184 <__errno>:
 800d184:	4b01      	ldr	r3, [pc, #4]	@ (800d18c <__errno+0x8>)
 800d186:	6818      	ldr	r0, [r3, #0]
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	20000184 	.word	0x20000184

0800d190 <__libc_init_array>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	4d0d      	ldr	r5, [pc, #52]	@ (800d1c8 <__libc_init_array+0x38>)
 800d194:	4c0d      	ldr	r4, [pc, #52]	@ (800d1cc <__libc_init_array+0x3c>)
 800d196:	1b64      	subs	r4, r4, r5
 800d198:	10a4      	asrs	r4, r4, #2
 800d19a:	2600      	movs	r6, #0
 800d19c:	42a6      	cmp	r6, r4
 800d19e:	d109      	bne.n	800d1b4 <__libc_init_array+0x24>
 800d1a0:	4d0b      	ldr	r5, [pc, #44]	@ (800d1d0 <__libc_init_array+0x40>)
 800d1a2:	4c0c      	ldr	r4, [pc, #48]	@ (800d1d4 <__libc_init_array+0x44>)
 800d1a4:	f003 fae6 	bl	8010774 <_init>
 800d1a8:	1b64      	subs	r4, r4, r5
 800d1aa:	10a4      	asrs	r4, r4, #2
 800d1ac:	2600      	movs	r6, #0
 800d1ae:	42a6      	cmp	r6, r4
 800d1b0:	d105      	bne.n	800d1be <__libc_init_array+0x2e>
 800d1b2:	bd70      	pop	{r4, r5, r6, pc}
 800d1b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1b8:	4798      	blx	r3
 800d1ba:	3601      	adds	r6, #1
 800d1bc:	e7ee      	b.n	800d19c <__libc_init_array+0xc>
 800d1be:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1c2:	4798      	blx	r3
 800d1c4:	3601      	adds	r6, #1
 800d1c6:	e7f2      	b.n	800d1ae <__libc_init_array+0x1e>
 800d1c8:	080117dc 	.word	0x080117dc
 800d1cc:	080117dc 	.word	0x080117dc
 800d1d0:	080117dc 	.word	0x080117dc
 800d1d4:	080117e0 	.word	0x080117e0

0800d1d8 <__retarget_lock_init_recursive>:
 800d1d8:	4770      	bx	lr

0800d1da <__retarget_lock_close_recursive>:
 800d1da:	4770      	bx	lr

0800d1dc <__retarget_lock_acquire_recursive>:
 800d1dc:	4770      	bx	lr

0800d1de <__retarget_lock_release_recursive>:
 800d1de:	4770      	bx	lr

0800d1e0 <memcpy>:
 800d1e0:	440a      	add	r2, r1
 800d1e2:	4291      	cmp	r1, r2
 800d1e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1e8:	d100      	bne.n	800d1ec <memcpy+0xc>
 800d1ea:	4770      	bx	lr
 800d1ec:	b510      	push	{r4, lr}
 800d1ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1f6:	4291      	cmp	r1, r2
 800d1f8:	d1f9      	bne.n	800d1ee <memcpy+0xe>
 800d1fa:	bd10      	pop	{r4, pc}
 800d1fc:	0000      	movs	r0, r0
	...

0800d200 <nan>:
 800d200:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d208 <nan+0x8>
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	00000000 	.word	0x00000000
 800d20c:	7ff80000 	.word	0x7ff80000

0800d210 <nanf>:
 800d210:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d218 <nanf+0x8>
 800d214:	4770      	bx	lr
 800d216:	bf00      	nop
 800d218:	7fc00000 	.word	0x7fc00000

0800d21c <__assert_func>:
 800d21c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d21e:	4614      	mov	r4, r2
 800d220:	461a      	mov	r2, r3
 800d222:	4b09      	ldr	r3, [pc, #36]	@ (800d248 <__assert_func+0x2c>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4605      	mov	r5, r0
 800d228:	68d8      	ldr	r0, [r3, #12]
 800d22a:	b954      	cbnz	r4, 800d242 <__assert_func+0x26>
 800d22c:	4b07      	ldr	r3, [pc, #28]	@ (800d24c <__assert_func+0x30>)
 800d22e:	461c      	mov	r4, r3
 800d230:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d234:	9100      	str	r1, [sp, #0]
 800d236:	462b      	mov	r3, r5
 800d238:	4905      	ldr	r1, [pc, #20]	@ (800d250 <__assert_func+0x34>)
 800d23a:	f7ff f9a7 	bl	800c58c <fiprintf>
 800d23e:	f002 fb85 	bl	800f94c <abort>
 800d242:	4b04      	ldr	r3, [pc, #16]	@ (800d254 <__assert_func+0x38>)
 800d244:	e7f4      	b.n	800d230 <__assert_func+0x14>
 800d246:	bf00      	nop
 800d248:	20000184 	.word	0x20000184
 800d24c:	080110a3 	.word	0x080110a3
 800d250:	08011075 	.word	0x08011075
 800d254:	08011068 	.word	0x08011068

0800d258 <quorem>:
 800d258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	6903      	ldr	r3, [r0, #16]
 800d25e:	690c      	ldr	r4, [r1, #16]
 800d260:	42a3      	cmp	r3, r4
 800d262:	4607      	mov	r7, r0
 800d264:	db7e      	blt.n	800d364 <quorem+0x10c>
 800d266:	3c01      	subs	r4, #1
 800d268:	f101 0814 	add.w	r8, r1, #20
 800d26c:	00a3      	lsls	r3, r4, #2
 800d26e:	f100 0514 	add.w	r5, r0, #20
 800d272:	9300      	str	r3, [sp, #0]
 800d274:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d278:	9301      	str	r3, [sp, #4]
 800d27a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d27e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d282:	3301      	adds	r3, #1
 800d284:	429a      	cmp	r2, r3
 800d286:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d28a:	fbb2 f6f3 	udiv	r6, r2, r3
 800d28e:	d32e      	bcc.n	800d2ee <quorem+0x96>
 800d290:	f04f 0a00 	mov.w	sl, #0
 800d294:	46c4      	mov	ip, r8
 800d296:	46ae      	mov	lr, r5
 800d298:	46d3      	mov	fp, sl
 800d29a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d29e:	b298      	uxth	r0, r3
 800d2a0:	fb06 a000 	mla	r0, r6, r0, sl
 800d2a4:	0c02      	lsrs	r2, r0, #16
 800d2a6:	0c1b      	lsrs	r3, r3, #16
 800d2a8:	fb06 2303 	mla	r3, r6, r3, r2
 800d2ac:	f8de 2000 	ldr.w	r2, [lr]
 800d2b0:	b280      	uxth	r0, r0
 800d2b2:	b292      	uxth	r2, r2
 800d2b4:	1a12      	subs	r2, r2, r0
 800d2b6:	445a      	add	r2, fp
 800d2b8:	f8de 0000 	ldr.w	r0, [lr]
 800d2bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d2c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d2ca:	b292      	uxth	r2, r2
 800d2cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d2d0:	45e1      	cmp	r9, ip
 800d2d2:	f84e 2b04 	str.w	r2, [lr], #4
 800d2d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d2da:	d2de      	bcs.n	800d29a <quorem+0x42>
 800d2dc:	9b00      	ldr	r3, [sp, #0]
 800d2de:	58eb      	ldr	r3, [r5, r3]
 800d2e0:	b92b      	cbnz	r3, 800d2ee <quorem+0x96>
 800d2e2:	9b01      	ldr	r3, [sp, #4]
 800d2e4:	3b04      	subs	r3, #4
 800d2e6:	429d      	cmp	r5, r3
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	d32f      	bcc.n	800d34c <quorem+0xf4>
 800d2ec:	613c      	str	r4, [r7, #16]
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	f001 fd0e 	bl	800ed10 <__mcmp>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	db25      	blt.n	800d344 <quorem+0xec>
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	2000      	movs	r0, #0
 800d2fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800d300:	f8d1 c000 	ldr.w	ip, [r1]
 800d304:	fa1f fe82 	uxth.w	lr, r2
 800d308:	fa1f f38c 	uxth.w	r3, ip
 800d30c:	eba3 030e 	sub.w	r3, r3, lr
 800d310:	4403      	add	r3, r0
 800d312:	0c12      	lsrs	r2, r2, #16
 800d314:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d318:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d322:	45c1      	cmp	r9, r8
 800d324:	f841 3b04 	str.w	r3, [r1], #4
 800d328:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d32c:	d2e6      	bcs.n	800d2fc <quorem+0xa4>
 800d32e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d336:	b922      	cbnz	r2, 800d342 <quorem+0xea>
 800d338:	3b04      	subs	r3, #4
 800d33a:	429d      	cmp	r5, r3
 800d33c:	461a      	mov	r2, r3
 800d33e:	d30b      	bcc.n	800d358 <quorem+0x100>
 800d340:	613c      	str	r4, [r7, #16]
 800d342:	3601      	adds	r6, #1
 800d344:	4630      	mov	r0, r6
 800d346:	b003      	add	sp, #12
 800d348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d34c:	6812      	ldr	r2, [r2, #0]
 800d34e:	3b04      	subs	r3, #4
 800d350:	2a00      	cmp	r2, #0
 800d352:	d1cb      	bne.n	800d2ec <quorem+0x94>
 800d354:	3c01      	subs	r4, #1
 800d356:	e7c6      	b.n	800d2e6 <quorem+0x8e>
 800d358:	6812      	ldr	r2, [r2, #0]
 800d35a:	3b04      	subs	r3, #4
 800d35c:	2a00      	cmp	r2, #0
 800d35e:	d1ef      	bne.n	800d340 <quorem+0xe8>
 800d360:	3c01      	subs	r4, #1
 800d362:	e7ea      	b.n	800d33a <quorem+0xe2>
 800d364:	2000      	movs	r0, #0
 800d366:	e7ee      	b.n	800d346 <quorem+0xee>

0800d368 <_dtoa_r>:
 800d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36c:	69c7      	ldr	r7, [r0, #28]
 800d36e:	b099      	sub	sp, #100	@ 0x64
 800d370:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d374:	ec55 4b10 	vmov	r4, r5, d0
 800d378:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d37a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d37c:	4683      	mov	fp, r0
 800d37e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d380:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d382:	b97f      	cbnz	r7, 800d3a4 <_dtoa_r+0x3c>
 800d384:	2010      	movs	r0, #16
 800d386:	f001 f937 	bl	800e5f8 <malloc>
 800d38a:	4602      	mov	r2, r0
 800d38c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d390:	b920      	cbnz	r0, 800d39c <_dtoa_r+0x34>
 800d392:	4ba7      	ldr	r3, [pc, #668]	@ (800d630 <_dtoa_r+0x2c8>)
 800d394:	21ef      	movs	r1, #239	@ 0xef
 800d396:	48a7      	ldr	r0, [pc, #668]	@ (800d634 <_dtoa_r+0x2cc>)
 800d398:	f7ff ff40 	bl	800d21c <__assert_func>
 800d39c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d3a0:	6007      	str	r7, [r0, #0]
 800d3a2:	60c7      	str	r7, [r0, #12]
 800d3a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d3a8:	6819      	ldr	r1, [r3, #0]
 800d3aa:	b159      	cbz	r1, 800d3c4 <_dtoa_r+0x5c>
 800d3ac:	685a      	ldr	r2, [r3, #4]
 800d3ae:	604a      	str	r2, [r1, #4]
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	4093      	lsls	r3, r2
 800d3b4:	608b      	str	r3, [r1, #8]
 800d3b6:	4658      	mov	r0, fp
 800d3b8:	f001 fa26 	bl	800e808 <_Bfree>
 800d3bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	601a      	str	r2, [r3, #0]
 800d3c4:	1e2b      	subs	r3, r5, #0
 800d3c6:	bfb9      	ittee	lt
 800d3c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d3cc:	9303      	strlt	r3, [sp, #12]
 800d3ce:	2300      	movge	r3, #0
 800d3d0:	6033      	strge	r3, [r6, #0]
 800d3d2:	9f03      	ldr	r7, [sp, #12]
 800d3d4:	4b98      	ldr	r3, [pc, #608]	@ (800d638 <_dtoa_r+0x2d0>)
 800d3d6:	bfbc      	itt	lt
 800d3d8:	2201      	movlt	r2, #1
 800d3da:	6032      	strlt	r2, [r6, #0]
 800d3dc:	43bb      	bics	r3, r7
 800d3de:	d112      	bne.n	800d406 <_dtoa_r+0x9e>
 800d3e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d3e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d3e6:	6013      	str	r3, [r2, #0]
 800d3e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d3ec:	4323      	orrs	r3, r4
 800d3ee:	f000 854d 	beq.w	800de8c <_dtoa_r+0xb24>
 800d3f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d3f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d64c <_dtoa_r+0x2e4>
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 854f 	beq.w	800de9c <_dtoa_r+0xb34>
 800d3fe:	f10a 0303 	add.w	r3, sl, #3
 800d402:	f000 bd49 	b.w	800de98 <_dtoa_r+0xb30>
 800d406:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d40a:	2200      	movs	r2, #0
 800d40c:	ec51 0b17 	vmov	r0, r1, d7
 800d410:	2300      	movs	r3, #0
 800d412:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d416:	f7f3 fb77 	bl	8000b08 <__aeabi_dcmpeq>
 800d41a:	4680      	mov	r8, r0
 800d41c:	b158      	cbz	r0, 800d436 <_dtoa_r+0xce>
 800d41e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d420:	2301      	movs	r3, #1
 800d422:	6013      	str	r3, [r2, #0]
 800d424:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d426:	b113      	cbz	r3, 800d42e <_dtoa_r+0xc6>
 800d428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d42a:	4b84      	ldr	r3, [pc, #528]	@ (800d63c <_dtoa_r+0x2d4>)
 800d42c:	6013      	str	r3, [r2, #0]
 800d42e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d650 <_dtoa_r+0x2e8>
 800d432:	f000 bd33 	b.w	800de9c <_dtoa_r+0xb34>
 800d436:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d43a:	aa16      	add	r2, sp, #88	@ 0x58
 800d43c:	a917      	add	r1, sp, #92	@ 0x5c
 800d43e:	4658      	mov	r0, fp
 800d440:	f001 fd86 	bl	800ef50 <__d2b>
 800d444:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d448:	4681      	mov	r9, r0
 800d44a:	2e00      	cmp	r6, #0
 800d44c:	d077      	beq.n	800d53e <_dtoa_r+0x1d6>
 800d44e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d450:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d45c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d460:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d464:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d468:	4619      	mov	r1, r3
 800d46a:	2200      	movs	r2, #0
 800d46c:	4b74      	ldr	r3, [pc, #464]	@ (800d640 <_dtoa_r+0x2d8>)
 800d46e:	f7f2 ff2b 	bl	80002c8 <__aeabi_dsub>
 800d472:	a369      	add	r3, pc, #420	@ (adr r3, 800d618 <_dtoa_r+0x2b0>)
 800d474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d478:	f7f3 f8de 	bl	8000638 <__aeabi_dmul>
 800d47c:	a368      	add	r3, pc, #416	@ (adr r3, 800d620 <_dtoa_r+0x2b8>)
 800d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d482:	f7f2 ff23 	bl	80002cc <__adddf3>
 800d486:	4604      	mov	r4, r0
 800d488:	4630      	mov	r0, r6
 800d48a:	460d      	mov	r5, r1
 800d48c:	f7f3 f86a 	bl	8000564 <__aeabi_i2d>
 800d490:	a365      	add	r3, pc, #404	@ (adr r3, 800d628 <_dtoa_r+0x2c0>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f3 f8cf 	bl	8000638 <__aeabi_dmul>
 800d49a:	4602      	mov	r2, r0
 800d49c:	460b      	mov	r3, r1
 800d49e:	4620      	mov	r0, r4
 800d4a0:	4629      	mov	r1, r5
 800d4a2:	f7f2 ff13 	bl	80002cc <__adddf3>
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	460d      	mov	r5, r1
 800d4aa:	f7f3 fb75 	bl	8000b98 <__aeabi_d2iz>
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	4607      	mov	r7, r0
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	f7f3 fb30 	bl	8000b1c <__aeabi_dcmplt>
 800d4bc:	b140      	cbz	r0, 800d4d0 <_dtoa_r+0x168>
 800d4be:	4638      	mov	r0, r7
 800d4c0:	f7f3 f850 	bl	8000564 <__aeabi_i2d>
 800d4c4:	4622      	mov	r2, r4
 800d4c6:	462b      	mov	r3, r5
 800d4c8:	f7f3 fb1e 	bl	8000b08 <__aeabi_dcmpeq>
 800d4cc:	b900      	cbnz	r0, 800d4d0 <_dtoa_r+0x168>
 800d4ce:	3f01      	subs	r7, #1
 800d4d0:	2f16      	cmp	r7, #22
 800d4d2:	d851      	bhi.n	800d578 <_dtoa_r+0x210>
 800d4d4:	4b5b      	ldr	r3, [pc, #364]	@ (800d644 <_dtoa_r+0x2dc>)
 800d4d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4e2:	f7f3 fb1b 	bl	8000b1c <__aeabi_dcmplt>
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d048      	beq.n	800d57c <_dtoa_r+0x214>
 800d4ea:	3f01      	subs	r7, #1
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800d4f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d4f2:	1b9b      	subs	r3, r3, r6
 800d4f4:	1e5a      	subs	r2, r3, #1
 800d4f6:	bf44      	itt	mi
 800d4f8:	f1c3 0801 	rsbmi	r8, r3, #1
 800d4fc:	2300      	movmi	r3, #0
 800d4fe:	9208      	str	r2, [sp, #32]
 800d500:	bf54      	ite	pl
 800d502:	f04f 0800 	movpl.w	r8, #0
 800d506:	9308      	strmi	r3, [sp, #32]
 800d508:	2f00      	cmp	r7, #0
 800d50a:	db39      	blt.n	800d580 <_dtoa_r+0x218>
 800d50c:	9b08      	ldr	r3, [sp, #32]
 800d50e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d510:	443b      	add	r3, r7
 800d512:	9308      	str	r3, [sp, #32]
 800d514:	2300      	movs	r3, #0
 800d516:	930a      	str	r3, [sp, #40]	@ 0x28
 800d518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d51a:	2b09      	cmp	r3, #9
 800d51c:	d864      	bhi.n	800d5e8 <_dtoa_r+0x280>
 800d51e:	2b05      	cmp	r3, #5
 800d520:	bfc4      	itt	gt
 800d522:	3b04      	subgt	r3, #4
 800d524:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d528:	f1a3 0302 	sub.w	r3, r3, #2
 800d52c:	bfcc      	ite	gt
 800d52e:	2400      	movgt	r4, #0
 800d530:	2401      	movle	r4, #1
 800d532:	2b03      	cmp	r3, #3
 800d534:	d863      	bhi.n	800d5fe <_dtoa_r+0x296>
 800d536:	e8df f003 	tbb	[pc, r3]
 800d53a:	372a      	.short	0x372a
 800d53c:	5535      	.short	0x5535
 800d53e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d542:	441e      	add	r6, r3
 800d544:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d548:	2b20      	cmp	r3, #32
 800d54a:	bfc1      	itttt	gt
 800d54c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d550:	409f      	lslgt	r7, r3
 800d552:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d556:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d55a:	bfd6      	itet	le
 800d55c:	f1c3 0320 	rsble	r3, r3, #32
 800d560:	ea47 0003 	orrgt.w	r0, r7, r3
 800d564:	fa04 f003 	lslle.w	r0, r4, r3
 800d568:	f7f2 ffec 	bl	8000544 <__aeabi_ui2d>
 800d56c:	2201      	movs	r2, #1
 800d56e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d572:	3e01      	subs	r6, #1
 800d574:	9214      	str	r2, [sp, #80]	@ 0x50
 800d576:	e777      	b.n	800d468 <_dtoa_r+0x100>
 800d578:	2301      	movs	r3, #1
 800d57a:	e7b8      	b.n	800d4ee <_dtoa_r+0x186>
 800d57c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d57e:	e7b7      	b.n	800d4f0 <_dtoa_r+0x188>
 800d580:	427b      	negs	r3, r7
 800d582:	930a      	str	r3, [sp, #40]	@ 0x28
 800d584:	2300      	movs	r3, #0
 800d586:	eba8 0807 	sub.w	r8, r8, r7
 800d58a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d58c:	e7c4      	b.n	800d518 <_dtoa_r+0x1b0>
 800d58e:	2300      	movs	r3, #0
 800d590:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d594:	2b00      	cmp	r3, #0
 800d596:	dc35      	bgt.n	800d604 <_dtoa_r+0x29c>
 800d598:	2301      	movs	r3, #1
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	9307      	str	r3, [sp, #28]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d5a2:	e00b      	b.n	800d5bc <_dtoa_r+0x254>
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	e7f3      	b.n	800d590 <_dtoa_r+0x228>
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5ae:	18fb      	adds	r3, r7, r3
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	9307      	str	r3, [sp, #28]
 800d5b8:	bfb8      	it	lt
 800d5ba:	2301      	movlt	r3, #1
 800d5bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	2204      	movs	r2, #4
 800d5c4:	f102 0514 	add.w	r5, r2, #20
 800d5c8:	429d      	cmp	r5, r3
 800d5ca:	d91f      	bls.n	800d60c <_dtoa_r+0x2a4>
 800d5cc:	6041      	str	r1, [r0, #4]
 800d5ce:	4658      	mov	r0, fp
 800d5d0:	f001 f8da 	bl	800e788 <_Balloc>
 800d5d4:	4682      	mov	sl, r0
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d13c      	bne.n	800d654 <_dtoa_r+0x2ec>
 800d5da:	4b1b      	ldr	r3, [pc, #108]	@ (800d648 <_dtoa_r+0x2e0>)
 800d5dc:	4602      	mov	r2, r0
 800d5de:	f240 11af 	movw	r1, #431	@ 0x1af
 800d5e2:	e6d8      	b.n	800d396 <_dtoa_r+0x2e>
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e7e0      	b.n	800d5aa <_dtoa_r+0x242>
 800d5e8:	2401      	movs	r4, #1
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5f4:	9300      	str	r3, [sp, #0]
 800d5f6:	9307      	str	r3, [sp, #28]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	2312      	movs	r3, #18
 800d5fc:	e7d0      	b.n	800d5a0 <_dtoa_r+0x238>
 800d5fe:	2301      	movs	r3, #1
 800d600:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d602:	e7f5      	b.n	800d5f0 <_dtoa_r+0x288>
 800d604:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	9307      	str	r3, [sp, #28]
 800d60a:	e7d7      	b.n	800d5bc <_dtoa_r+0x254>
 800d60c:	3101      	adds	r1, #1
 800d60e:	0052      	lsls	r2, r2, #1
 800d610:	e7d8      	b.n	800d5c4 <_dtoa_r+0x25c>
 800d612:	bf00      	nop
 800d614:	f3af 8000 	nop.w
 800d618:	636f4361 	.word	0x636f4361
 800d61c:	3fd287a7 	.word	0x3fd287a7
 800d620:	8b60c8b3 	.word	0x8b60c8b3
 800d624:	3fc68a28 	.word	0x3fc68a28
 800d628:	509f79fb 	.word	0x509f79fb
 800d62c:	3fd34413 	.word	0x3fd34413
 800d630:	08010fef 	.word	0x08010fef
 800d634:	080110b1 	.word	0x080110b1
 800d638:	7ff00000 	.word	0x7ff00000
 800d63c:	08010931 	.word	0x08010931
 800d640:	3ff80000 	.word	0x3ff80000
 800d644:	08011208 	.word	0x08011208
 800d648:	08011109 	.word	0x08011109
 800d64c:	080110ad 	.word	0x080110ad
 800d650:	08010930 	.word	0x08010930
 800d654:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d658:	6018      	str	r0, [r3, #0]
 800d65a:	9b07      	ldr	r3, [sp, #28]
 800d65c:	2b0e      	cmp	r3, #14
 800d65e:	f200 80a4 	bhi.w	800d7aa <_dtoa_r+0x442>
 800d662:	2c00      	cmp	r4, #0
 800d664:	f000 80a1 	beq.w	800d7aa <_dtoa_r+0x442>
 800d668:	2f00      	cmp	r7, #0
 800d66a:	dd33      	ble.n	800d6d4 <_dtoa_r+0x36c>
 800d66c:	4bad      	ldr	r3, [pc, #692]	@ (800d924 <_dtoa_r+0x5bc>)
 800d66e:	f007 020f 	and.w	r2, r7, #15
 800d672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d676:	ed93 7b00 	vldr	d7, [r3]
 800d67a:	05f8      	lsls	r0, r7, #23
 800d67c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d680:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d684:	d516      	bpl.n	800d6b4 <_dtoa_r+0x34c>
 800d686:	4ba8      	ldr	r3, [pc, #672]	@ (800d928 <_dtoa_r+0x5c0>)
 800d688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d68c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d690:	f7f3 f8fc 	bl	800088c <__aeabi_ddiv>
 800d694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d698:	f004 040f 	and.w	r4, r4, #15
 800d69c:	2603      	movs	r6, #3
 800d69e:	4da2      	ldr	r5, [pc, #648]	@ (800d928 <_dtoa_r+0x5c0>)
 800d6a0:	b954      	cbnz	r4, 800d6b8 <_dtoa_r+0x350>
 800d6a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6aa:	f7f3 f8ef 	bl	800088c <__aeabi_ddiv>
 800d6ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6b2:	e028      	b.n	800d706 <_dtoa_r+0x39e>
 800d6b4:	2602      	movs	r6, #2
 800d6b6:	e7f2      	b.n	800d69e <_dtoa_r+0x336>
 800d6b8:	07e1      	lsls	r1, r4, #31
 800d6ba:	d508      	bpl.n	800d6ce <_dtoa_r+0x366>
 800d6bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d6c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6c4:	f7f2 ffb8 	bl	8000638 <__aeabi_dmul>
 800d6c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d6cc:	3601      	adds	r6, #1
 800d6ce:	1064      	asrs	r4, r4, #1
 800d6d0:	3508      	adds	r5, #8
 800d6d2:	e7e5      	b.n	800d6a0 <_dtoa_r+0x338>
 800d6d4:	f000 80d2 	beq.w	800d87c <_dtoa_r+0x514>
 800d6d8:	427c      	negs	r4, r7
 800d6da:	4b92      	ldr	r3, [pc, #584]	@ (800d924 <_dtoa_r+0x5bc>)
 800d6dc:	4d92      	ldr	r5, [pc, #584]	@ (800d928 <_dtoa_r+0x5c0>)
 800d6de:	f004 020f 	and.w	r2, r4, #15
 800d6e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6ee:	f7f2 ffa3 	bl	8000638 <__aeabi_dmul>
 800d6f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6f6:	1124      	asrs	r4, r4, #4
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	2602      	movs	r6, #2
 800d6fc:	2c00      	cmp	r4, #0
 800d6fe:	f040 80b2 	bne.w	800d866 <_dtoa_r+0x4fe>
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1d3      	bne.n	800d6ae <_dtoa_r+0x346>
 800d706:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d708:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f000 80b7 	beq.w	800d880 <_dtoa_r+0x518>
 800d712:	4b86      	ldr	r3, [pc, #536]	@ (800d92c <_dtoa_r+0x5c4>)
 800d714:	2200      	movs	r2, #0
 800d716:	4620      	mov	r0, r4
 800d718:	4629      	mov	r1, r5
 800d71a:	f7f3 f9ff 	bl	8000b1c <__aeabi_dcmplt>
 800d71e:	2800      	cmp	r0, #0
 800d720:	f000 80ae 	beq.w	800d880 <_dtoa_r+0x518>
 800d724:	9b07      	ldr	r3, [sp, #28]
 800d726:	2b00      	cmp	r3, #0
 800d728:	f000 80aa 	beq.w	800d880 <_dtoa_r+0x518>
 800d72c:	9b00      	ldr	r3, [sp, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	dd37      	ble.n	800d7a2 <_dtoa_r+0x43a>
 800d732:	1e7b      	subs	r3, r7, #1
 800d734:	9304      	str	r3, [sp, #16]
 800d736:	4620      	mov	r0, r4
 800d738:	4b7d      	ldr	r3, [pc, #500]	@ (800d930 <_dtoa_r+0x5c8>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	4629      	mov	r1, r5
 800d73e:	f7f2 ff7b 	bl	8000638 <__aeabi_dmul>
 800d742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d746:	9c00      	ldr	r4, [sp, #0]
 800d748:	3601      	adds	r6, #1
 800d74a:	4630      	mov	r0, r6
 800d74c:	f7f2 ff0a 	bl	8000564 <__aeabi_i2d>
 800d750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d754:	f7f2 ff70 	bl	8000638 <__aeabi_dmul>
 800d758:	4b76      	ldr	r3, [pc, #472]	@ (800d934 <_dtoa_r+0x5cc>)
 800d75a:	2200      	movs	r2, #0
 800d75c:	f7f2 fdb6 	bl	80002cc <__adddf3>
 800d760:	4605      	mov	r5, r0
 800d762:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d766:	2c00      	cmp	r4, #0
 800d768:	f040 808d 	bne.w	800d886 <_dtoa_r+0x51e>
 800d76c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d770:	4b71      	ldr	r3, [pc, #452]	@ (800d938 <_dtoa_r+0x5d0>)
 800d772:	2200      	movs	r2, #0
 800d774:	f7f2 fda8 	bl	80002c8 <__aeabi_dsub>
 800d778:	4602      	mov	r2, r0
 800d77a:	460b      	mov	r3, r1
 800d77c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d780:	462a      	mov	r2, r5
 800d782:	4633      	mov	r3, r6
 800d784:	f7f3 f9e8 	bl	8000b58 <__aeabi_dcmpgt>
 800d788:	2800      	cmp	r0, #0
 800d78a:	f040 828b 	bne.w	800dca4 <_dtoa_r+0x93c>
 800d78e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d792:	462a      	mov	r2, r5
 800d794:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d798:	f7f3 f9c0 	bl	8000b1c <__aeabi_dcmplt>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	f040 8128 	bne.w	800d9f2 <_dtoa_r+0x68a>
 800d7a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d7a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d7aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f2c0 815a 	blt.w	800da66 <_dtoa_r+0x6fe>
 800d7b2:	2f0e      	cmp	r7, #14
 800d7b4:	f300 8157 	bgt.w	800da66 <_dtoa_r+0x6fe>
 800d7b8:	4b5a      	ldr	r3, [pc, #360]	@ (800d924 <_dtoa_r+0x5bc>)
 800d7ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d7be:	ed93 7b00 	vldr	d7, [r3]
 800d7c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	ed8d 7b00 	vstr	d7, [sp]
 800d7ca:	da03      	bge.n	800d7d4 <_dtoa_r+0x46c>
 800d7cc:	9b07      	ldr	r3, [sp, #28]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	f340 8101 	ble.w	800d9d6 <_dtoa_r+0x66e>
 800d7d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d7d8:	4656      	mov	r6, sl
 800d7da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7de:	4620      	mov	r0, r4
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	f7f3 f853 	bl	800088c <__aeabi_ddiv>
 800d7e6:	f7f3 f9d7 	bl	8000b98 <__aeabi_d2iz>
 800d7ea:	4680      	mov	r8, r0
 800d7ec:	f7f2 feba 	bl	8000564 <__aeabi_i2d>
 800d7f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7f4:	f7f2 ff20 	bl	8000638 <__aeabi_dmul>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	4629      	mov	r1, r5
 800d800:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d804:	f7f2 fd60 	bl	80002c8 <__aeabi_dsub>
 800d808:	f806 4b01 	strb.w	r4, [r6], #1
 800d80c:	9d07      	ldr	r5, [sp, #28]
 800d80e:	eba6 040a 	sub.w	r4, r6, sl
 800d812:	42a5      	cmp	r5, r4
 800d814:	4602      	mov	r2, r0
 800d816:	460b      	mov	r3, r1
 800d818:	f040 8117 	bne.w	800da4a <_dtoa_r+0x6e2>
 800d81c:	f7f2 fd56 	bl	80002cc <__adddf3>
 800d820:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d824:	4604      	mov	r4, r0
 800d826:	460d      	mov	r5, r1
 800d828:	f7f3 f996 	bl	8000b58 <__aeabi_dcmpgt>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	f040 80f9 	bne.w	800da24 <_dtoa_r+0x6bc>
 800d832:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d836:	4620      	mov	r0, r4
 800d838:	4629      	mov	r1, r5
 800d83a:	f7f3 f965 	bl	8000b08 <__aeabi_dcmpeq>
 800d83e:	b118      	cbz	r0, 800d848 <_dtoa_r+0x4e0>
 800d840:	f018 0f01 	tst.w	r8, #1
 800d844:	f040 80ee 	bne.w	800da24 <_dtoa_r+0x6bc>
 800d848:	4649      	mov	r1, r9
 800d84a:	4658      	mov	r0, fp
 800d84c:	f000 ffdc 	bl	800e808 <_Bfree>
 800d850:	2300      	movs	r3, #0
 800d852:	7033      	strb	r3, [r6, #0]
 800d854:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d856:	3701      	adds	r7, #1
 800d858:	601f      	str	r7, [r3, #0]
 800d85a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f000 831d 	beq.w	800de9c <_dtoa_r+0xb34>
 800d862:	601e      	str	r6, [r3, #0]
 800d864:	e31a      	b.n	800de9c <_dtoa_r+0xb34>
 800d866:	07e2      	lsls	r2, r4, #31
 800d868:	d505      	bpl.n	800d876 <_dtoa_r+0x50e>
 800d86a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d86e:	f7f2 fee3 	bl	8000638 <__aeabi_dmul>
 800d872:	3601      	adds	r6, #1
 800d874:	2301      	movs	r3, #1
 800d876:	1064      	asrs	r4, r4, #1
 800d878:	3508      	adds	r5, #8
 800d87a:	e73f      	b.n	800d6fc <_dtoa_r+0x394>
 800d87c:	2602      	movs	r6, #2
 800d87e:	e742      	b.n	800d706 <_dtoa_r+0x39e>
 800d880:	9c07      	ldr	r4, [sp, #28]
 800d882:	9704      	str	r7, [sp, #16]
 800d884:	e761      	b.n	800d74a <_dtoa_r+0x3e2>
 800d886:	4b27      	ldr	r3, [pc, #156]	@ (800d924 <_dtoa_r+0x5bc>)
 800d888:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d88a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d88e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d892:	4454      	add	r4, sl
 800d894:	2900      	cmp	r1, #0
 800d896:	d053      	beq.n	800d940 <_dtoa_r+0x5d8>
 800d898:	4928      	ldr	r1, [pc, #160]	@ (800d93c <_dtoa_r+0x5d4>)
 800d89a:	2000      	movs	r0, #0
 800d89c:	f7f2 fff6 	bl	800088c <__aeabi_ddiv>
 800d8a0:	4633      	mov	r3, r6
 800d8a2:	462a      	mov	r2, r5
 800d8a4:	f7f2 fd10 	bl	80002c8 <__aeabi_dsub>
 800d8a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d8ac:	4656      	mov	r6, sl
 800d8ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8b2:	f7f3 f971 	bl	8000b98 <__aeabi_d2iz>
 800d8b6:	4605      	mov	r5, r0
 800d8b8:	f7f2 fe54 	bl	8000564 <__aeabi_i2d>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	460b      	mov	r3, r1
 800d8c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8c4:	f7f2 fd00 	bl	80002c8 <__aeabi_dsub>
 800d8c8:	3530      	adds	r5, #48	@ 0x30
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8d2:	f806 5b01 	strb.w	r5, [r6], #1
 800d8d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d8da:	f7f3 f91f 	bl	8000b1c <__aeabi_dcmplt>
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d171      	bne.n	800d9c6 <_dtoa_r+0x65e>
 800d8e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d8e6:	4911      	ldr	r1, [pc, #68]	@ (800d92c <_dtoa_r+0x5c4>)
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	f7f2 fced 	bl	80002c8 <__aeabi_dsub>
 800d8ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d8f2:	f7f3 f913 	bl	8000b1c <__aeabi_dcmplt>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	f040 8095 	bne.w	800da26 <_dtoa_r+0x6be>
 800d8fc:	42a6      	cmp	r6, r4
 800d8fe:	f43f af50 	beq.w	800d7a2 <_dtoa_r+0x43a>
 800d902:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d906:	4b0a      	ldr	r3, [pc, #40]	@ (800d930 <_dtoa_r+0x5c8>)
 800d908:	2200      	movs	r2, #0
 800d90a:	f7f2 fe95 	bl	8000638 <__aeabi_dmul>
 800d90e:	4b08      	ldr	r3, [pc, #32]	@ (800d930 <_dtoa_r+0x5c8>)
 800d910:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d914:	2200      	movs	r2, #0
 800d916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d91a:	f7f2 fe8d 	bl	8000638 <__aeabi_dmul>
 800d91e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d922:	e7c4      	b.n	800d8ae <_dtoa_r+0x546>
 800d924:	08011208 	.word	0x08011208
 800d928:	080111e0 	.word	0x080111e0
 800d92c:	3ff00000 	.word	0x3ff00000
 800d930:	40240000 	.word	0x40240000
 800d934:	401c0000 	.word	0x401c0000
 800d938:	40140000 	.word	0x40140000
 800d93c:	3fe00000 	.word	0x3fe00000
 800d940:	4631      	mov	r1, r6
 800d942:	4628      	mov	r0, r5
 800d944:	f7f2 fe78 	bl	8000638 <__aeabi_dmul>
 800d948:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d94c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d94e:	4656      	mov	r6, sl
 800d950:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d954:	f7f3 f920 	bl	8000b98 <__aeabi_d2iz>
 800d958:	4605      	mov	r5, r0
 800d95a:	f7f2 fe03 	bl	8000564 <__aeabi_i2d>
 800d95e:	4602      	mov	r2, r0
 800d960:	460b      	mov	r3, r1
 800d962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d966:	f7f2 fcaf 	bl	80002c8 <__aeabi_dsub>
 800d96a:	3530      	adds	r5, #48	@ 0x30
 800d96c:	f806 5b01 	strb.w	r5, [r6], #1
 800d970:	4602      	mov	r2, r0
 800d972:	460b      	mov	r3, r1
 800d974:	42a6      	cmp	r6, r4
 800d976:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d97a:	f04f 0200 	mov.w	r2, #0
 800d97e:	d124      	bne.n	800d9ca <_dtoa_r+0x662>
 800d980:	4bac      	ldr	r3, [pc, #688]	@ (800dc34 <_dtoa_r+0x8cc>)
 800d982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d986:	f7f2 fca1 	bl	80002cc <__adddf3>
 800d98a:	4602      	mov	r2, r0
 800d98c:	460b      	mov	r3, r1
 800d98e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d992:	f7f3 f8e1 	bl	8000b58 <__aeabi_dcmpgt>
 800d996:	2800      	cmp	r0, #0
 800d998:	d145      	bne.n	800da26 <_dtoa_r+0x6be>
 800d99a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d99e:	49a5      	ldr	r1, [pc, #660]	@ (800dc34 <_dtoa_r+0x8cc>)
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	f7f2 fc91 	bl	80002c8 <__aeabi_dsub>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9ae:	f7f3 f8b5 	bl	8000b1c <__aeabi_dcmplt>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	f43f aef5 	beq.w	800d7a2 <_dtoa_r+0x43a>
 800d9b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d9ba:	1e73      	subs	r3, r6, #1
 800d9bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800d9be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d9c2:	2b30      	cmp	r3, #48	@ 0x30
 800d9c4:	d0f8      	beq.n	800d9b8 <_dtoa_r+0x650>
 800d9c6:	9f04      	ldr	r7, [sp, #16]
 800d9c8:	e73e      	b.n	800d848 <_dtoa_r+0x4e0>
 800d9ca:	4b9b      	ldr	r3, [pc, #620]	@ (800dc38 <_dtoa_r+0x8d0>)
 800d9cc:	f7f2 fe34 	bl	8000638 <__aeabi_dmul>
 800d9d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9d4:	e7bc      	b.n	800d950 <_dtoa_r+0x5e8>
 800d9d6:	d10c      	bne.n	800d9f2 <_dtoa_r+0x68a>
 800d9d8:	4b98      	ldr	r3, [pc, #608]	@ (800dc3c <_dtoa_r+0x8d4>)
 800d9da:	2200      	movs	r2, #0
 800d9dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d9e0:	f7f2 fe2a 	bl	8000638 <__aeabi_dmul>
 800d9e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9e8:	f7f3 f8ac 	bl	8000b44 <__aeabi_dcmpge>
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	f000 8157 	beq.w	800dca0 <_dtoa_r+0x938>
 800d9f2:	2400      	movs	r4, #0
 800d9f4:	4625      	mov	r5, r4
 800d9f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9f8:	43db      	mvns	r3, r3
 800d9fa:	9304      	str	r3, [sp, #16]
 800d9fc:	4656      	mov	r6, sl
 800d9fe:	2700      	movs	r7, #0
 800da00:	4621      	mov	r1, r4
 800da02:	4658      	mov	r0, fp
 800da04:	f000 ff00 	bl	800e808 <_Bfree>
 800da08:	2d00      	cmp	r5, #0
 800da0a:	d0dc      	beq.n	800d9c6 <_dtoa_r+0x65e>
 800da0c:	b12f      	cbz	r7, 800da1a <_dtoa_r+0x6b2>
 800da0e:	42af      	cmp	r7, r5
 800da10:	d003      	beq.n	800da1a <_dtoa_r+0x6b2>
 800da12:	4639      	mov	r1, r7
 800da14:	4658      	mov	r0, fp
 800da16:	f000 fef7 	bl	800e808 <_Bfree>
 800da1a:	4629      	mov	r1, r5
 800da1c:	4658      	mov	r0, fp
 800da1e:	f000 fef3 	bl	800e808 <_Bfree>
 800da22:	e7d0      	b.n	800d9c6 <_dtoa_r+0x65e>
 800da24:	9704      	str	r7, [sp, #16]
 800da26:	4633      	mov	r3, r6
 800da28:	461e      	mov	r6, r3
 800da2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da2e:	2a39      	cmp	r2, #57	@ 0x39
 800da30:	d107      	bne.n	800da42 <_dtoa_r+0x6da>
 800da32:	459a      	cmp	sl, r3
 800da34:	d1f8      	bne.n	800da28 <_dtoa_r+0x6c0>
 800da36:	9a04      	ldr	r2, [sp, #16]
 800da38:	3201      	adds	r2, #1
 800da3a:	9204      	str	r2, [sp, #16]
 800da3c:	2230      	movs	r2, #48	@ 0x30
 800da3e:	f88a 2000 	strb.w	r2, [sl]
 800da42:	781a      	ldrb	r2, [r3, #0]
 800da44:	3201      	adds	r2, #1
 800da46:	701a      	strb	r2, [r3, #0]
 800da48:	e7bd      	b.n	800d9c6 <_dtoa_r+0x65e>
 800da4a:	4b7b      	ldr	r3, [pc, #492]	@ (800dc38 <_dtoa_r+0x8d0>)
 800da4c:	2200      	movs	r2, #0
 800da4e:	f7f2 fdf3 	bl	8000638 <__aeabi_dmul>
 800da52:	2200      	movs	r2, #0
 800da54:	2300      	movs	r3, #0
 800da56:	4604      	mov	r4, r0
 800da58:	460d      	mov	r5, r1
 800da5a:	f7f3 f855 	bl	8000b08 <__aeabi_dcmpeq>
 800da5e:	2800      	cmp	r0, #0
 800da60:	f43f aebb 	beq.w	800d7da <_dtoa_r+0x472>
 800da64:	e6f0      	b.n	800d848 <_dtoa_r+0x4e0>
 800da66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800da68:	2a00      	cmp	r2, #0
 800da6a:	f000 80db 	beq.w	800dc24 <_dtoa_r+0x8bc>
 800da6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da70:	2a01      	cmp	r2, #1
 800da72:	f300 80bf 	bgt.w	800dbf4 <_dtoa_r+0x88c>
 800da76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800da78:	2a00      	cmp	r2, #0
 800da7a:	f000 80b7 	beq.w	800dbec <_dtoa_r+0x884>
 800da7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800da82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800da84:	4646      	mov	r6, r8
 800da86:	9a08      	ldr	r2, [sp, #32]
 800da88:	2101      	movs	r1, #1
 800da8a:	441a      	add	r2, r3
 800da8c:	4658      	mov	r0, fp
 800da8e:	4498      	add	r8, r3
 800da90:	9208      	str	r2, [sp, #32]
 800da92:	f000 ffb7 	bl	800ea04 <__i2b>
 800da96:	4605      	mov	r5, r0
 800da98:	b15e      	cbz	r6, 800dab2 <_dtoa_r+0x74a>
 800da9a:	9b08      	ldr	r3, [sp, #32]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	dd08      	ble.n	800dab2 <_dtoa_r+0x74a>
 800daa0:	42b3      	cmp	r3, r6
 800daa2:	9a08      	ldr	r2, [sp, #32]
 800daa4:	bfa8      	it	ge
 800daa6:	4633      	movge	r3, r6
 800daa8:	eba8 0803 	sub.w	r8, r8, r3
 800daac:	1af6      	subs	r6, r6, r3
 800daae:	1ad3      	subs	r3, r2, r3
 800dab0:	9308      	str	r3, [sp, #32]
 800dab2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dab4:	b1f3      	cbz	r3, 800daf4 <_dtoa_r+0x78c>
 800dab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f000 80b7 	beq.w	800dc2c <_dtoa_r+0x8c4>
 800dabe:	b18c      	cbz	r4, 800dae4 <_dtoa_r+0x77c>
 800dac0:	4629      	mov	r1, r5
 800dac2:	4622      	mov	r2, r4
 800dac4:	4658      	mov	r0, fp
 800dac6:	f001 f85d 	bl	800eb84 <__pow5mult>
 800daca:	464a      	mov	r2, r9
 800dacc:	4601      	mov	r1, r0
 800dace:	4605      	mov	r5, r0
 800dad0:	4658      	mov	r0, fp
 800dad2:	f000 ffad 	bl	800ea30 <__multiply>
 800dad6:	4649      	mov	r1, r9
 800dad8:	9004      	str	r0, [sp, #16]
 800dada:	4658      	mov	r0, fp
 800dadc:	f000 fe94 	bl	800e808 <_Bfree>
 800dae0:	9b04      	ldr	r3, [sp, #16]
 800dae2:	4699      	mov	r9, r3
 800dae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dae6:	1b1a      	subs	r2, r3, r4
 800dae8:	d004      	beq.n	800daf4 <_dtoa_r+0x78c>
 800daea:	4649      	mov	r1, r9
 800daec:	4658      	mov	r0, fp
 800daee:	f001 f849 	bl	800eb84 <__pow5mult>
 800daf2:	4681      	mov	r9, r0
 800daf4:	2101      	movs	r1, #1
 800daf6:	4658      	mov	r0, fp
 800daf8:	f000 ff84 	bl	800ea04 <__i2b>
 800dafc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dafe:	4604      	mov	r4, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	f000 81cf 	beq.w	800dea4 <_dtoa_r+0xb3c>
 800db06:	461a      	mov	r2, r3
 800db08:	4601      	mov	r1, r0
 800db0a:	4658      	mov	r0, fp
 800db0c:	f001 f83a 	bl	800eb84 <__pow5mult>
 800db10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db12:	2b01      	cmp	r3, #1
 800db14:	4604      	mov	r4, r0
 800db16:	f300 8095 	bgt.w	800dc44 <_dtoa_r+0x8dc>
 800db1a:	9b02      	ldr	r3, [sp, #8]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f040 8087 	bne.w	800dc30 <_dtoa_r+0x8c8>
 800db22:	9b03      	ldr	r3, [sp, #12]
 800db24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f040 8089 	bne.w	800dc40 <_dtoa_r+0x8d8>
 800db2e:	9b03      	ldr	r3, [sp, #12]
 800db30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800db34:	0d1b      	lsrs	r3, r3, #20
 800db36:	051b      	lsls	r3, r3, #20
 800db38:	b12b      	cbz	r3, 800db46 <_dtoa_r+0x7de>
 800db3a:	9b08      	ldr	r3, [sp, #32]
 800db3c:	3301      	adds	r3, #1
 800db3e:	9308      	str	r3, [sp, #32]
 800db40:	f108 0801 	add.w	r8, r8, #1
 800db44:	2301      	movs	r3, #1
 800db46:	930a      	str	r3, [sp, #40]	@ 0x28
 800db48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	f000 81b0 	beq.w	800deb0 <_dtoa_r+0xb48>
 800db50:	6923      	ldr	r3, [r4, #16]
 800db52:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db56:	6918      	ldr	r0, [r3, #16]
 800db58:	f000 ff08 	bl	800e96c <__hi0bits>
 800db5c:	f1c0 0020 	rsb	r0, r0, #32
 800db60:	9b08      	ldr	r3, [sp, #32]
 800db62:	4418      	add	r0, r3
 800db64:	f010 001f 	ands.w	r0, r0, #31
 800db68:	d077      	beq.n	800dc5a <_dtoa_r+0x8f2>
 800db6a:	f1c0 0320 	rsb	r3, r0, #32
 800db6e:	2b04      	cmp	r3, #4
 800db70:	dd6b      	ble.n	800dc4a <_dtoa_r+0x8e2>
 800db72:	9b08      	ldr	r3, [sp, #32]
 800db74:	f1c0 001c 	rsb	r0, r0, #28
 800db78:	4403      	add	r3, r0
 800db7a:	4480      	add	r8, r0
 800db7c:	4406      	add	r6, r0
 800db7e:	9308      	str	r3, [sp, #32]
 800db80:	f1b8 0f00 	cmp.w	r8, #0
 800db84:	dd05      	ble.n	800db92 <_dtoa_r+0x82a>
 800db86:	4649      	mov	r1, r9
 800db88:	4642      	mov	r2, r8
 800db8a:	4658      	mov	r0, fp
 800db8c:	f001 f854 	bl	800ec38 <__lshift>
 800db90:	4681      	mov	r9, r0
 800db92:	9b08      	ldr	r3, [sp, #32]
 800db94:	2b00      	cmp	r3, #0
 800db96:	dd05      	ble.n	800dba4 <_dtoa_r+0x83c>
 800db98:	4621      	mov	r1, r4
 800db9a:	461a      	mov	r2, r3
 800db9c:	4658      	mov	r0, fp
 800db9e:	f001 f84b 	bl	800ec38 <__lshift>
 800dba2:	4604      	mov	r4, r0
 800dba4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d059      	beq.n	800dc5e <_dtoa_r+0x8f6>
 800dbaa:	4621      	mov	r1, r4
 800dbac:	4648      	mov	r0, r9
 800dbae:	f001 f8af 	bl	800ed10 <__mcmp>
 800dbb2:	2800      	cmp	r0, #0
 800dbb4:	da53      	bge.n	800dc5e <_dtoa_r+0x8f6>
 800dbb6:	1e7b      	subs	r3, r7, #1
 800dbb8:	9304      	str	r3, [sp, #16]
 800dbba:	4649      	mov	r1, r9
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	220a      	movs	r2, #10
 800dbc0:	4658      	mov	r0, fp
 800dbc2:	f000 fe43 	bl	800e84c <__multadd>
 800dbc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbc8:	4681      	mov	r9, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 8172 	beq.w	800deb4 <_dtoa_r+0xb4c>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	4629      	mov	r1, r5
 800dbd4:	220a      	movs	r2, #10
 800dbd6:	4658      	mov	r0, fp
 800dbd8:	f000 fe38 	bl	800e84c <__multadd>
 800dbdc:	9b00      	ldr	r3, [sp, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	4605      	mov	r5, r0
 800dbe2:	dc67      	bgt.n	800dcb4 <_dtoa_r+0x94c>
 800dbe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	dc41      	bgt.n	800dc6e <_dtoa_r+0x906>
 800dbea:	e063      	b.n	800dcb4 <_dtoa_r+0x94c>
 800dbec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dbee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dbf2:	e746      	b.n	800da82 <_dtoa_r+0x71a>
 800dbf4:	9b07      	ldr	r3, [sp, #28]
 800dbf6:	1e5c      	subs	r4, r3, #1
 800dbf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbfa:	42a3      	cmp	r3, r4
 800dbfc:	bfbf      	itttt	lt
 800dbfe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dc00:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dc02:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dc04:	1ae3      	sublt	r3, r4, r3
 800dc06:	bfb4      	ite	lt
 800dc08:	18d2      	addlt	r2, r2, r3
 800dc0a:	1b1c      	subge	r4, r3, r4
 800dc0c:	9b07      	ldr	r3, [sp, #28]
 800dc0e:	bfbc      	itt	lt
 800dc10:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dc12:	2400      	movlt	r4, #0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	bfb5      	itete	lt
 800dc18:	eba8 0603 	sublt.w	r6, r8, r3
 800dc1c:	9b07      	ldrge	r3, [sp, #28]
 800dc1e:	2300      	movlt	r3, #0
 800dc20:	4646      	movge	r6, r8
 800dc22:	e730      	b.n	800da86 <_dtoa_r+0x71e>
 800dc24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dc26:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dc28:	4646      	mov	r6, r8
 800dc2a:	e735      	b.n	800da98 <_dtoa_r+0x730>
 800dc2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dc2e:	e75c      	b.n	800daea <_dtoa_r+0x782>
 800dc30:	2300      	movs	r3, #0
 800dc32:	e788      	b.n	800db46 <_dtoa_r+0x7de>
 800dc34:	3fe00000 	.word	0x3fe00000
 800dc38:	40240000 	.word	0x40240000
 800dc3c:	40140000 	.word	0x40140000
 800dc40:	9b02      	ldr	r3, [sp, #8]
 800dc42:	e780      	b.n	800db46 <_dtoa_r+0x7de>
 800dc44:	2300      	movs	r3, #0
 800dc46:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc48:	e782      	b.n	800db50 <_dtoa_r+0x7e8>
 800dc4a:	d099      	beq.n	800db80 <_dtoa_r+0x818>
 800dc4c:	9a08      	ldr	r2, [sp, #32]
 800dc4e:	331c      	adds	r3, #28
 800dc50:	441a      	add	r2, r3
 800dc52:	4498      	add	r8, r3
 800dc54:	441e      	add	r6, r3
 800dc56:	9208      	str	r2, [sp, #32]
 800dc58:	e792      	b.n	800db80 <_dtoa_r+0x818>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	e7f6      	b.n	800dc4c <_dtoa_r+0x8e4>
 800dc5e:	9b07      	ldr	r3, [sp, #28]
 800dc60:	9704      	str	r7, [sp, #16]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	dc20      	bgt.n	800dca8 <_dtoa_r+0x940>
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	dd1e      	ble.n	800dcac <_dtoa_r+0x944>
 800dc6e:	9b00      	ldr	r3, [sp, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f47f aec0 	bne.w	800d9f6 <_dtoa_r+0x68e>
 800dc76:	4621      	mov	r1, r4
 800dc78:	2205      	movs	r2, #5
 800dc7a:	4658      	mov	r0, fp
 800dc7c:	f000 fde6 	bl	800e84c <__multadd>
 800dc80:	4601      	mov	r1, r0
 800dc82:	4604      	mov	r4, r0
 800dc84:	4648      	mov	r0, r9
 800dc86:	f001 f843 	bl	800ed10 <__mcmp>
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	f77f aeb3 	ble.w	800d9f6 <_dtoa_r+0x68e>
 800dc90:	4656      	mov	r6, sl
 800dc92:	2331      	movs	r3, #49	@ 0x31
 800dc94:	f806 3b01 	strb.w	r3, [r6], #1
 800dc98:	9b04      	ldr	r3, [sp, #16]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	9304      	str	r3, [sp, #16]
 800dc9e:	e6ae      	b.n	800d9fe <_dtoa_r+0x696>
 800dca0:	9c07      	ldr	r4, [sp, #28]
 800dca2:	9704      	str	r7, [sp, #16]
 800dca4:	4625      	mov	r5, r4
 800dca6:	e7f3      	b.n	800dc90 <_dtoa_r+0x928>
 800dca8:	9b07      	ldr	r3, [sp, #28]
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	f000 8104 	beq.w	800debc <_dtoa_r+0xb54>
 800dcb4:	2e00      	cmp	r6, #0
 800dcb6:	dd05      	ble.n	800dcc4 <_dtoa_r+0x95c>
 800dcb8:	4629      	mov	r1, r5
 800dcba:	4632      	mov	r2, r6
 800dcbc:	4658      	mov	r0, fp
 800dcbe:	f000 ffbb 	bl	800ec38 <__lshift>
 800dcc2:	4605      	mov	r5, r0
 800dcc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d05a      	beq.n	800dd80 <_dtoa_r+0xa18>
 800dcca:	6869      	ldr	r1, [r5, #4]
 800dccc:	4658      	mov	r0, fp
 800dcce:	f000 fd5b 	bl	800e788 <_Balloc>
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	b928      	cbnz	r0, 800dce2 <_dtoa_r+0x97a>
 800dcd6:	4b84      	ldr	r3, [pc, #528]	@ (800dee8 <_dtoa_r+0xb80>)
 800dcd8:	4602      	mov	r2, r0
 800dcda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dcde:	f7ff bb5a 	b.w	800d396 <_dtoa_r+0x2e>
 800dce2:	692a      	ldr	r2, [r5, #16]
 800dce4:	3202      	adds	r2, #2
 800dce6:	0092      	lsls	r2, r2, #2
 800dce8:	f105 010c 	add.w	r1, r5, #12
 800dcec:	300c      	adds	r0, #12
 800dcee:	f7ff fa77 	bl	800d1e0 <memcpy>
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	4631      	mov	r1, r6
 800dcf6:	4658      	mov	r0, fp
 800dcf8:	f000 ff9e 	bl	800ec38 <__lshift>
 800dcfc:	f10a 0301 	add.w	r3, sl, #1
 800dd00:	9307      	str	r3, [sp, #28]
 800dd02:	9b00      	ldr	r3, [sp, #0]
 800dd04:	4453      	add	r3, sl
 800dd06:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd08:	9b02      	ldr	r3, [sp, #8]
 800dd0a:	f003 0301 	and.w	r3, r3, #1
 800dd0e:	462f      	mov	r7, r5
 800dd10:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd12:	4605      	mov	r5, r0
 800dd14:	9b07      	ldr	r3, [sp, #28]
 800dd16:	4621      	mov	r1, r4
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	4648      	mov	r0, r9
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	f7ff fa9b 	bl	800d258 <quorem>
 800dd22:	4639      	mov	r1, r7
 800dd24:	9002      	str	r0, [sp, #8]
 800dd26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dd2a:	4648      	mov	r0, r9
 800dd2c:	f000 fff0 	bl	800ed10 <__mcmp>
 800dd30:	462a      	mov	r2, r5
 800dd32:	9008      	str	r0, [sp, #32]
 800dd34:	4621      	mov	r1, r4
 800dd36:	4658      	mov	r0, fp
 800dd38:	f001 f806 	bl	800ed48 <__mdiff>
 800dd3c:	68c2      	ldr	r2, [r0, #12]
 800dd3e:	4606      	mov	r6, r0
 800dd40:	bb02      	cbnz	r2, 800dd84 <_dtoa_r+0xa1c>
 800dd42:	4601      	mov	r1, r0
 800dd44:	4648      	mov	r0, r9
 800dd46:	f000 ffe3 	bl	800ed10 <__mcmp>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	4631      	mov	r1, r6
 800dd4e:	4658      	mov	r0, fp
 800dd50:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd52:	f000 fd59 	bl	800e808 <_Bfree>
 800dd56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd5a:	9e07      	ldr	r6, [sp, #28]
 800dd5c:	ea43 0102 	orr.w	r1, r3, r2
 800dd60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd62:	4319      	orrs	r1, r3
 800dd64:	d110      	bne.n	800dd88 <_dtoa_r+0xa20>
 800dd66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dd6a:	d029      	beq.n	800ddc0 <_dtoa_r+0xa58>
 800dd6c:	9b08      	ldr	r3, [sp, #32]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	dd02      	ble.n	800dd78 <_dtoa_r+0xa10>
 800dd72:	9b02      	ldr	r3, [sp, #8]
 800dd74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dd78:	9b00      	ldr	r3, [sp, #0]
 800dd7a:	f883 8000 	strb.w	r8, [r3]
 800dd7e:	e63f      	b.n	800da00 <_dtoa_r+0x698>
 800dd80:	4628      	mov	r0, r5
 800dd82:	e7bb      	b.n	800dcfc <_dtoa_r+0x994>
 800dd84:	2201      	movs	r2, #1
 800dd86:	e7e1      	b.n	800dd4c <_dtoa_r+0x9e4>
 800dd88:	9b08      	ldr	r3, [sp, #32]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	db04      	blt.n	800dd98 <_dtoa_r+0xa30>
 800dd8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd90:	430b      	orrs	r3, r1
 800dd92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dd94:	430b      	orrs	r3, r1
 800dd96:	d120      	bne.n	800ddda <_dtoa_r+0xa72>
 800dd98:	2a00      	cmp	r2, #0
 800dd9a:	dded      	ble.n	800dd78 <_dtoa_r+0xa10>
 800dd9c:	4649      	mov	r1, r9
 800dd9e:	2201      	movs	r2, #1
 800dda0:	4658      	mov	r0, fp
 800dda2:	f000 ff49 	bl	800ec38 <__lshift>
 800dda6:	4621      	mov	r1, r4
 800dda8:	4681      	mov	r9, r0
 800ddaa:	f000 ffb1 	bl	800ed10 <__mcmp>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	dc03      	bgt.n	800ddba <_dtoa_r+0xa52>
 800ddb2:	d1e1      	bne.n	800dd78 <_dtoa_r+0xa10>
 800ddb4:	f018 0f01 	tst.w	r8, #1
 800ddb8:	d0de      	beq.n	800dd78 <_dtoa_r+0xa10>
 800ddba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ddbe:	d1d8      	bne.n	800dd72 <_dtoa_r+0xa0a>
 800ddc0:	9a00      	ldr	r2, [sp, #0]
 800ddc2:	2339      	movs	r3, #57	@ 0x39
 800ddc4:	7013      	strb	r3, [r2, #0]
 800ddc6:	4633      	mov	r3, r6
 800ddc8:	461e      	mov	r6, r3
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ddd0:	2a39      	cmp	r2, #57	@ 0x39
 800ddd2:	d052      	beq.n	800de7a <_dtoa_r+0xb12>
 800ddd4:	3201      	adds	r2, #1
 800ddd6:	701a      	strb	r2, [r3, #0]
 800ddd8:	e612      	b.n	800da00 <_dtoa_r+0x698>
 800ddda:	2a00      	cmp	r2, #0
 800dddc:	dd07      	ble.n	800ddee <_dtoa_r+0xa86>
 800ddde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dde2:	d0ed      	beq.n	800ddc0 <_dtoa_r+0xa58>
 800dde4:	9a00      	ldr	r2, [sp, #0]
 800dde6:	f108 0301 	add.w	r3, r8, #1
 800ddea:	7013      	strb	r3, [r2, #0]
 800ddec:	e608      	b.n	800da00 <_dtoa_r+0x698>
 800ddee:	9b07      	ldr	r3, [sp, #28]
 800ddf0:	9a07      	ldr	r2, [sp, #28]
 800ddf2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ddf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d028      	beq.n	800de4e <_dtoa_r+0xae6>
 800ddfc:	4649      	mov	r1, r9
 800ddfe:	2300      	movs	r3, #0
 800de00:	220a      	movs	r2, #10
 800de02:	4658      	mov	r0, fp
 800de04:	f000 fd22 	bl	800e84c <__multadd>
 800de08:	42af      	cmp	r7, r5
 800de0a:	4681      	mov	r9, r0
 800de0c:	f04f 0300 	mov.w	r3, #0
 800de10:	f04f 020a 	mov.w	r2, #10
 800de14:	4639      	mov	r1, r7
 800de16:	4658      	mov	r0, fp
 800de18:	d107      	bne.n	800de2a <_dtoa_r+0xac2>
 800de1a:	f000 fd17 	bl	800e84c <__multadd>
 800de1e:	4607      	mov	r7, r0
 800de20:	4605      	mov	r5, r0
 800de22:	9b07      	ldr	r3, [sp, #28]
 800de24:	3301      	adds	r3, #1
 800de26:	9307      	str	r3, [sp, #28]
 800de28:	e774      	b.n	800dd14 <_dtoa_r+0x9ac>
 800de2a:	f000 fd0f 	bl	800e84c <__multadd>
 800de2e:	4629      	mov	r1, r5
 800de30:	4607      	mov	r7, r0
 800de32:	2300      	movs	r3, #0
 800de34:	220a      	movs	r2, #10
 800de36:	4658      	mov	r0, fp
 800de38:	f000 fd08 	bl	800e84c <__multadd>
 800de3c:	4605      	mov	r5, r0
 800de3e:	e7f0      	b.n	800de22 <_dtoa_r+0xaba>
 800de40:	9b00      	ldr	r3, [sp, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	bfcc      	ite	gt
 800de46:	461e      	movgt	r6, r3
 800de48:	2601      	movle	r6, #1
 800de4a:	4456      	add	r6, sl
 800de4c:	2700      	movs	r7, #0
 800de4e:	4649      	mov	r1, r9
 800de50:	2201      	movs	r2, #1
 800de52:	4658      	mov	r0, fp
 800de54:	f000 fef0 	bl	800ec38 <__lshift>
 800de58:	4621      	mov	r1, r4
 800de5a:	4681      	mov	r9, r0
 800de5c:	f000 ff58 	bl	800ed10 <__mcmp>
 800de60:	2800      	cmp	r0, #0
 800de62:	dcb0      	bgt.n	800ddc6 <_dtoa_r+0xa5e>
 800de64:	d102      	bne.n	800de6c <_dtoa_r+0xb04>
 800de66:	f018 0f01 	tst.w	r8, #1
 800de6a:	d1ac      	bne.n	800ddc6 <_dtoa_r+0xa5e>
 800de6c:	4633      	mov	r3, r6
 800de6e:	461e      	mov	r6, r3
 800de70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de74:	2a30      	cmp	r2, #48	@ 0x30
 800de76:	d0fa      	beq.n	800de6e <_dtoa_r+0xb06>
 800de78:	e5c2      	b.n	800da00 <_dtoa_r+0x698>
 800de7a:	459a      	cmp	sl, r3
 800de7c:	d1a4      	bne.n	800ddc8 <_dtoa_r+0xa60>
 800de7e:	9b04      	ldr	r3, [sp, #16]
 800de80:	3301      	adds	r3, #1
 800de82:	9304      	str	r3, [sp, #16]
 800de84:	2331      	movs	r3, #49	@ 0x31
 800de86:	f88a 3000 	strb.w	r3, [sl]
 800de8a:	e5b9      	b.n	800da00 <_dtoa_r+0x698>
 800de8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800deec <_dtoa_r+0xb84>
 800de92:	b11b      	cbz	r3, 800de9c <_dtoa_r+0xb34>
 800de94:	f10a 0308 	add.w	r3, sl, #8
 800de98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800de9a:	6013      	str	r3, [r2, #0]
 800de9c:	4650      	mov	r0, sl
 800de9e:	b019      	add	sp, #100	@ 0x64
 800dea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	f77f ae37 	ble.w	800db1a <_dtoa_r+0x7b2>
 800deac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800deae:	930a      	str	r3, [sp, #40]	@ 0x28
 800deb0:	2001      	movs	r0, #1
 800deb2:	e655      	b.n	800db60 <_dtoa_r+0x7f8>
 800deb4:	9b00      	ldr	r3, [sp, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f77f aed6 	ble.w	800dc68 <_dtoa_r+0x900>
 800debc:	4656      	mov	r6, sl
 800debe:	4621      	mov	r1, r4
 800dec0:	4648      	mov	r0, r9
 800dec2:	f7ff f9c9 	bl	800d258 <quorem>
 800dec6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800deca:	f806 8b01 	strb.w	r8, [r6], #1
 800dece:	9b00      	ldr	r3, [sp, #0]
 800ded0:	eba6 020a 	sub.w	r2, r6, sl
 800ded4:	4293      	cmp	r3, r2
 800ded6:	ddb3      	ble.n	800de40 <_dtoa_r+0xad8>
 800ded8:	4649      	mov	r1, r9
 800deda:	2300      	movs	r3, #0
 800dedc:	220a      	movs	r2, #10
 800dede:	4658      	mov	r0, fp
 800dee0:	f000 fcb4 	bl	800e84c <__multadd>
 800dee4:	4681      	mov	r9, r0
 800dee6:	e7ea      	b.n	800debe <_dtoa_r+0xb56>
 800dee8:	08011109 	.word	0x08011109
 800deec:	080110a4 	.word	0x080110a4

0800def0 <_free_r>:
 800def0:	b538      	push	{r3, r4, r5, lr}
 800def2:	4605      	mov	r5, r0
 800def4:	2900      	cmp	r1, #0
 800def6:	d041      	beq.n	800df7c <_free_r+0x8c>
 800def8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800defc:	1f0c      	subs	r4, r1, #4
 800defe:	2b00      	cmp	r3, #0
 800df00:	bfb8      	it	lt
 800df02:	18e4      	addlt	r4, r4, r3
 800df04:	f000 fc34 	bl	800e770 <__malloc_lock>
 800df08:	4a1d      	ldr	r2, [pc, #116]	@ (800df80 <_free_r+0x90>)
 800df0a:	6813      	ldr	r3, [r2, #0]
 800df0c:	b933      	cbnz	r3, 800df1c <_free_r+0x2c>
 800df0e:	6063      	str	r3, [r4, #4]
 800df10:	6014      	str	r4, [r2, #0]
 800df12:	4628      	mov	r0, r5
 800df14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df18:	f000 bc30 	b.w	800e77c <__malloc_unlock>
 800df1c:	42a3      	cmp	r3, r4
 800df1e:	d908      	bls.n	800df32 <_free_r+0x42>
 800df20:	6820      	ldr	r0, [r4, #0]
 800df22:	1821      	adds	r1, r4, r0
 800df24:	428b      	cmp	r3, r1
 800df26:	bf01      	itttt	eq
 800df28:	6819      	ldreq	r1, [r3, #0]
 800df2a:	685b      	ldreq	r3, [r3, #4]
 800df2c:	1809      	addeq	r1, r1, r0
 800df2e:	6021      	streq	r1, [r4, #0]
 800df30:	e7ed      	b.n	800df0e <_free_r+0x1e>
 800df32:	461a      	mov	r2, r3
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	b10b      	cbz	r3, 800df3c <_free_r+0x4c>
 800df38:	42a3      	cmp	r3, r4
 800df3a:	d9fa      	bls.n	800df32 <_free_r+0x42>
 800df3c:	6811      	ldr	r1, [r2, #0]
 800df3e:	1850      	adds	r0, r2, r1
 800df40:	42a0      	cmp	r0, r4
 800df42:	d10b      	bne.n	800df5c <_free_r+0x6c>
 800df44:	6820      	ldr	r0, [r4, #0]
 800df46:	4401      	add	r1, r0
 800df48:	1850      	adds	r0, r2, r1
 800df4a:	4283      	cmp	r3, r0
 800df4c:	6011      	str	r1, [r2, #0]
 800df4e:	d1e0      	bne.n	800df12 <_free_r+0x22>
 800df50:	6818      	ldr	r0, [r3, #0]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	6053      	str	r3, [r2, #4]
 800df56:	4408      	add	r0, r1
 800df58:	6010      	str	r0, [r2, #0]
 800df5a:	e7da      	b.n	800df12 <_free_r+0x22>
 800df5c:	d902      	bls.n	800df64 <_free_r+0x74>
 800df5e:	230c      	movs	r3, #12
 800df60:	602b      	str	r3, [r5, #0]
 800df62:	e7d6      	b.n	800df12 <_free_r+0x22>
 800df64:	6820      	ldr	r0, [r4, #0]
 800df66:	1821      	adds	r1, r4, r0
 800df68:	428b      	cmp	r3, r1
 800df6a:	bf04      	itt	eq
 800df6c:	6819      	ldreq	r1, [r3, #0]
 800df6e:	685b      	ldreq	r3, [r3, #4]
 800df70:	6063      	str	r3, [r4, #4]
 800df72:	bf04      	itt	eq
 800df74:	1809      	addeq	r1, r1, r0
 800df76:	6021      	streq	r1, [r4, #0]
 800df78:	6054      	str	r4, [r2, #4]
 800df7a:	e7ca      	b.n	800df12 <_free_r+0x22>
 800df7c:	bd38      	pop	{r3, r4, r5, pc}
 800df7e:	bf00      	nop
 800df80:	20003920 	.word	0x20003920

0800df84 <rshift>:
 800df84:	6903      	ldr	r3, [r0, #16]
 800df86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800df8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800df92:	f100 0414 	add.w	r4, r0, #20
 800df96:	dd45      	ble.n	800e024 <rshift+0xa0>
 800df98:	f011 011f 	ands.w	r1, r1, #31
 800df9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dfa0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dfa4:	d10c      	bne.n	800dfc0 <rshift+0x3c>
 800dfa6:	f100 0710 	add.w	r7, r0, #16
 800dfaa:	4629      	mov	r1, r5
 800dfac:	42b1      	cmp	r1, r6
 800dfae:	d334      	bcc.n	800e01a <rshift+0x96>
 800dfb0:	1a9b      	subs	r3, r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	1eea      	subs	r2, r5, #3
 800dfb6:	4296      	cmp	r6, r2
 800dfb8:	bf38      	it	cc
 800dfba:	2300      	movcc	r3, #0
 800dfbc:	4423      	add	r3, r4
 800dfbe:	e015      	b.n	800dfec <rshift+0x68>
 800dfc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dfc4:	f1c1 0820 	rsb	r8, r1, #32
 800dfc8:	40cf      	lsrs	r7, r1
 800dfca:	f105 0e04 	add.w	lr, r5, #4
 800dfce:	46a1      	mov	r9, r4
 800dfd0:	4576      	cmp	r6, lr
 800dfd2:	46f4      	mov	ip, lr
 800dfd4:	d815      	bhi.n	800e002 <rshift+0x7e>
 800dfd6:	1a9a      	subs	r2, r3, r2
 800dfd8:	0092      	lsls	r2, r2, #2
 800dfda:	3a04      	subs	r2, #4
 800dfdc:	3501      	adds	r5, #1
 800dfde:	42ae      	cmp	r6, r5
 800dfe0:	bf38      	it	cc
 800dfe2:	2200      	movcc	r2, #0
 800dfe4:	18a3      	adds	r3, r4, r2
 800dfe6:	50a7      	str	r7, [r4, r2]
 800dfe8:	b107      	cbz	r7, 800dfec <rshift+0x68>
 800dfea:	3304      	adds	r3, #4
 800dfec:	1b1a      	subs	r2, r3, r4
 800dfee:	42a3      	cmp	r3, r4
 800dff0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dff4:	bf08      	it	eq
 800dff6:	2300      	moveq	r3, #0
 800dff8:	6102      	str	r2, [r0, #16]
 800dffa:	bf08      	it	eq
 800dffc:	6143      	streq	r3, [r0, #20]
 800dffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e002:	f8dc c000 	ldr.w	ip, [ip]
 800e006:	fa0c fc08 	lsl.w	ip, ip, r8
 800e00a:	ea4c 0707 	orr.w	r7, ip, r7
 800e00e:	f849 7b04 	str.w	r7, [r9], #4
 800e012:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e016:	40cf      	lsrs	r7, r1
 800e018:	e7da      	b.n	800dfd0 <rshift+0x4c>
 800e01a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e01e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e022:	e7c3      	b.n	800dfac <rshift+0x28>
 800e024:	4623      	mov	r3, r4
 800e026:	e7e1      	b.n	800dfec <rshift+0x68>

0800e028 <__hexdig_fun>:
 800e028:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e02c:	2b09      	cmp	r3, #9
 800e02e:	d802      	bhi.n	800e036 <__hexdig_fun+0xe>
 800e030:	3820      	subs	r0, #32
 800e032:	b2c0      	uxtb	r0, r0
 800e034:	4770      	bx	lr
 800e036:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e03a:	2b05      	cmp	r3, #5
 800e03c:	d801      	bhi.n	800e042 <__hexdig_fun+0x1a>
 800e03e:	3847      	subs	r0, #71	@ 0x47
 800e040:	e7f7      	b.n	800e032 <__hexdig_fun+0xa>
 800e042:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e046:	2b05      	cmp	r3, #5
 800e048:	d801      	bhi.n	800e04e <__hexdig_fun+0x26>
 800e04a:	3827      	subs	r0, #39	@ 0x27
 800e04c:	e7f1      	b.n	800e032 <__hexdig_fun+0xa>
 800e04e:	2000      	movs	r0, #0
 800e050:	4770      	bx	lr
	...

0800e054 <__gethex>:
 800e054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e058:	b085      	sub	sp, #20
 800e05a:	468a      	mov	sl, r1
 800e05c:	9302      	str	r3, [sp, #8]
 800e05e:	680b      	ldr	r3, [r1, #0]
 800e060:	9001      	str	r0, [sp, #4]
 800e062:	4690      	mov	r8, r2
 800e064:	1c9c      	adds	r4, r3, #2
 800e066:	46a1      	mov	r9, r4
 800e068:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e06c:	2830      	cmp	r0, #48	@ 0x30
 800e06e:	d0fa      	beq.n	800e066 <__gethex+0x12>
 800e070:	eba9 0303 	sub.w	r3, r9, r3
 800e074:	f1a3 0b02 	sub.w	fp, r3, #2
 800e078:	f7ff ffd6 	bl	800e028 <__hexdig_fun>
 800e07c:	4605      	mov	r5, r0
 800e07e:	2800      	cmp	r0, #0
 800e080:	d168      	bne.n	800e154 <__gethex+0x100>
 800e082:	49a0      	ldr	r1, [pc, #640]	@ (800e304 <__gethex+0x2b0>)
 800e084:	2201      	movs	r2, #1
 800e086:	4648      	mov	r0, r9
 800e088:	f7fe ffb0 	bl	800cfec <strncmp>
 800e08c:	4607      	mov	r7, r0
 800e08e:	2800      	cmp	r0, #0
 800e090:	d167      	bne.n	800e162 <__gethex+0x10e>
 800e092:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e096:	4626      	mov	r6, r4
 800e098:	f7ff ffc6 	bl	800e028 <__hexdig_fun>
 800e09c:	2800      	cmp	r0, #0
 800e09e:	d062      	beq.n	800e166 <__gethex+0x112>
 800e0a0:	4623      	mov	r3, r4
 800e0a2:	7818      	ldrb	r0, [r3, #0]
 800e0a4:	2830      	cmp	r0, #48	@ 0x30
 800e0a6:	4699      	mov	r9, r3
 800e0a8:	f103 0301 	add.w	r3, r3, #1
 800e0ac:	d0f9      	beq.n	800e0a2 <__gethex+0x4e>
 800e0ae:	f7ff ffbb 	bl	800e028 <__hexdig_fun>
 800e0b2:	fab0 f580 	clz	r5, r0
 800e0b6:	096d      	lsrs	r5, r5, #5
 800e0b8:	f04f 0b01 	mov.w	fp, #1
 800e0bc:	464a      	mov	r2, r9
 800e0be:	4616      	mov	r6, r2
 800e0c0:	3201      	adds	r2, #1
 800e0c2:	7830      	ldrb	r0, [r6, #0]
 800e0c4:	f7ff ffb0 	bl	800e028 <__hexdig_fun>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d1f8      	bne.n	800e0be <__gethex+0x6a>
 800e0cc:	498d      	ldr	r1, [pc, #564]	@ (800e304 <__gethex+0x2b0>)
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	4630      	mov	r0, r6
 800e0d2:	f7fe ff8b 	bl	800cfec <strncmp>
 800e0d6:	2800      	cmp	r0, #0
 800e0d8:	d13f      	bne.n	800e15a <__gethex+0x106>
 800e0da:	b944      	cbnz	r4, 800e0ee <__gethex+0x9a>
 800e0dc:	1c74      	adds	r4, r6, #1
 800e0de:	4622      	mov	r2, r4
 800e0e0:	4616      	mov	r6, r2
 800e0e2:	3201      	adds	r2, #1
 800e0e4:	7830      	ldrb	r0, [r6, #0]
 800e0e6:	f7ff ff9f 	bl	800e028 <__hexdig_fun>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d1f8      	bne.n	800e0e0 <__gethex+0x8c>
 800e0ee:	1ba4      	subs	r4, r4, r6
 800e0f0:	00a7      	lsls	r7, r4, #2
 800e0f2:	7833      	ldrb	r3, [r6, #0]
 800e0f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e0f8:	2b50      	cmp	r3, #80	@ 0x50
 800e0fa:	d13e      	bne.n	800e17a <__gethex+0x126>
 800e0fc:	7873      	ldrb	r3, [r6, #1]
 800e0fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800e100:	d033      	beq.n	800e16a <__gethex+0x116>
 800e102:	2b2d      	cmp	r3, #45	@ 0x2d
 800e104:	d034      	beq.n	800e170 <__gethex+0x11c>
 800e106:	1c71      	adds	r1, r6, #1
 800e108:	2400      	movs	r4, #0
 800e10a:	7808      	ldrb	r0, [r1, #0]
 800e10c:	f7ff ff8c 	bl	800e028 <__hexdig_fun>
 800e110:	1e43      	subs	r3, r0, #1
 800e112:	b2db      	uxtb	r3, r3
 800e114:	2b18      	cmp	r3, #24
 800e116:	d830      	bhi.n	800e17a <__gethex+0x126>
 800e118:	f1a0 0210 	sub.w	r2, r0, #16
 800e11c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e120:	f7ff ff82 	bl	800e028 <__hexdig_fun>
 800e124:	f100 3cff 	add.w	ip, r0, #4294967295
 800e128:	fa5f fc8c 	uxtb.w	ip, ip
 800e12c:	f1bc 0f18 	cmp.w	ip, #24
 800e130:	f04f 030a 	mov.w	r3, #10
 800e134:	d91e      	bls.n	800e174 <__gethex+0x120>
 800e136:	b104      	cbz	r4, 800e13a <__gethex+0xe6>
 800e138:	4252      	negs	r2, r2
 800e13a:	4417      	add	r7, r2
 800e13c:	f8ca 1000 	str.w	r1, [sl]
 800e140:	b1ed      	cbz	r5, 800e17e <__gethex+0x12a>
 800e142:	f1bb 0f00 	cmp.w	fp, #0
 800e146:	bf0c      	ite	eq
 800e148:	2506      	moveq	r5, #6
 800e14a:	2500      	movne	r5, #0
 800e14c:	4628      	mov	r0, r5
 800e14e:	b005      	add	sp, #20
 800e150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e154:	2500      	movs	r5, #0
 800e156:	462c      	mov	r4, r5
 800e158:	e7b0      	b.n	800e0bc <__gethex+0x68>
 800e15a:	2c00      	cmp	r4, #0
 800e15c:	d1c7      	bne.n	800e0ee <__gethex+0x9a>
 800e15e:	4627      	mov	r7, r4
 800e160:	e7c7      	b.n	800e0f2 <__gethex+0x9e>
 800e162:	464e      	mov	r6, r9
 800e164:	462f      	mov	r7, r5
 800e166:	2501      	movs	r5, #1
 800e168:	e7c3      	b.n	800e0f2 <__gethex+0x9e>
 800e16a:	2400      	movs	r4, #0
 800e16c:	1cb1      	adds	r1, r6, #2
 800e16e:	e7cc      	b.n	800e10a <__gethex+0xb6>
 800e170:	2401      	movs	r4, #1
 800e172:	e7fb      	b.n	800e16c <__gethex+0x118>
 800e174:	fb03 0002 	mla	r0, r3, r2, r0
 800e178:	e7ce      	b.n	800e118 <__gethex+0xc4>
 800e17a:	4631      	mov	r1, r6
 800e17c:	e7de      	b.n	800e13c <__gethex+0xe8>
 800e17e:	eba6 0309 	sub.w	r3, r6, r9
 800e182:	3b01      	subs	r3, #1
 800e184:	4629      	mov	r1, r5
 800e186:	2b07      	cmp	r3, #7
 800e188:	dc0a      	bgt.n	800e1a0 <__gethex+0x14c>
 800e18a:	9801      	ldr	r0, [sp, #4]
 800e18c:	f000 fafc 	bl	800e788 <_Balloc>
 800e190:	4604      	mov	r4, r0
 800e192:	b940      	cbnz	r0, 800e1a6 <__gethex+0x152>
 800e194:	4b5c      	ldr	r3, [pc, #368]	@ (800e308 <__gethex+0x2b4>)
 800e196:	4602      	mov	r2, r0
 800e198:	21e4      	movs	r1, #228	@ 0xe4
 800e19a:	485c      	ldr	r0, [pc, #368]	@ (800e30c <__gethex+0x2b8>)
 800e19c:	f7ff f83e 	bl	800d21c <__assert_func>
 800e1a0:	3101      	adds	r1, #1
 800e1a2:	105b      	asrs	r3, r3, #1
 800e1a4:	e7ef      	b.n	800e186 <__gethex+0x132>
 800e1a6:	f100 0a14 	add.w	sl, r0, #20
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	4655      	mov	r5, sl
 800e1ae:	469b      	mov	fp, r3
 800e1b0:	45b1      	cmp	r9, r6
 800e1b2:	d337      	bcc.n	800e224 <__gethex+0x1d0>
 800e1b4:	f845 bb04 	str.w	fp, [r5], #4
 800e1b8:	eba5 050a 	sub.w	r5, r5, sl
 800e1bc:	10ad      	asrs	r5, r5, #2
 800e1be:	6125      	str	r5, [r4, #16]
 800e1c0:	4658      	mov	r0, fp
 800e1c2:	f000 fbd3 	bl	800e96c <__hi0bits>
 800e1c6:	016d      	lsls	r5, r5, #5
 800e1c8:	f8d8 6000 	ldr.w	r6, [r8]
 800e1cc:	1a2d      	subs	r5, r5, r0
 800e1ce:	42b5      	cmp	r5, r6
 800e1d0:	dd54      	ble.n	800e27c <__gethex+0x228>
 800e1d2:	1bad      	subs	r5, r5, r6
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f000 ff67 	bl	800f0aa <__any_on>
 800e1dc:	4681      	mov	r9, r0
 800e1de:	b178      	cbz	r0, 800e200 <__gethex+0x1ac>
 800e1e0:	1e6b      	subs	r3, r5, #1
 800e1e2:	1159      	asrs	r1, r3, #5
 800e1e4:	f003 021f 	and.w	r2, r3, #31
 800e1e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e1ec:	f04f 0901 	mov.w	r9, #1
 800e1f0:	fa09 f202 	lsl.w	r2, r9, r2
 800e1f4:	420a      	tst	r2, r1
 800e1f6:	d003      	beq.n	800e200 <__gethex+0x1ac>
 800e1f8:	454b      	cmp	r3, r9
 800e1fa:	dc36      	bgt.n	800e26a <__gethex+0x216>
 800e1fc:	f04f 0902 	mov.w	r9, #2
 800e200:	4629      	mov	r1, r5
 800e202:	4620      	mov	r0, r4
 800e204:	f7ff febe 	bl	800df84 <rshift>
 800e208:	442f      	add	r7, r5
 800e20a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e20e:	42bb      	cmp	r3, r7
 800e210:	da42      	bge.n	800e298 <__gethex+0x244>
 800e212:	9801      	ldr	r0, [sp, #4]
 800e214:	4621      	mov	r1, r4
 800e216:	f000 faf7 	bl	800e808 <_Bfree>
 800e21a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e21c:	2300      	movs	r3, #0
 800e21e:	6013      	str	r3, [r2, #0]
 800e220:	25a3      	movs	r5, #163	@ 0xa3
 800e222:	e793      	b.n	800e14c <__gethex+0xf8>
 800e224:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e228:	2a2e      	cmp	r2, #46	@ 0x2e
 800e22a:	d012      	beq.n	800e252 <__gethex+0x1fe>
 800e22c:	2b20      	cmp	r3, #32
 800e22e:	d104      	bne.n	800e23a <__gethex+0x1e6>
 800e230:	f845 bb04 	str.w	fp, [r5], #4
 800e234:	f04f 0b00 	mov.w	fp, #0
 800e238:	465b      	mov	r3, fp
 800e23a:	7830      	ldrb	r0, [r6, #0]
 800e23c:	9303      	str	r3, [sp, #12]
 800e23e:	f7ff fef3 	bl	800e028 <__hexdig_fun>
 800e242:	9b03      	ldr	r3, [sp, #12]
 800e244:	f000 000f 	and.w	r0, r0, #15
 800e248:	4098      	lsls	r0, r3
 800e24a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e24e:	3304      	adds	r3, #4
 800e250:	e7ae      	b.n	800e1b0 <__gethex+0x15c>
 800e252:	45b1      	cmp	r9, r6
 800e254:	d8ea      	bhi.n	800e22c <__gethex+0x1d8>
 800e256:	492b      	ldr	r1, [pc, #172]	@ (800e304 <__gethex+0x2b0>)
 800e258:	9303      	str	r3, [sp, #12]
 800e25a:	2201      	movs	r2, #1
 800e25c:	4630      	mov	r0, r6
 800e25e:	f7fe fec5 	bl	800cfec <strncmp>
 800e262:	9b03      	ldr	r3, [sp, #12]
 800e264:	2800      	cmp	r0, #0
 800e266:	d1e1      	bne.n	800e22c <__gethex+0x1d8>
 800e268:	e7a2      	b.n	800e1b0 <__gethex+0x15c>
 800e26a:	1ea9      	subs	r1, r5, #2
 800e26c:	4620      	mov	r0, r4
 800e26e:	f000 ff1c 	bl	800f0aa <__any_on>
 800e272:	2800      	cmp	r0, #0
 800e274:	d0c2      	beq.n	800e1fc <__gethex+0x1a8>
 800e276:	f04f 0903 	mov.w	r9, #3
 800e27a:	e7c1      	b.n	800e200 <__gethex+0x1ac>
 800e27c:	da09      	bge.n	800e292 <__gethex+0x23e>
 800e27e:	1b75      	subs	r5, r6, r5
 800e280:	4621      	mov	r1, r4
 800e282:	9801      	ldr	r0, [sp, #4]
 800e284:	462a      	mov	r2, r5
 800e286:	f000 fcd7 	bl	800ec38 <__lshift>
 800e28a:	1b7f      	subs	r7, r7, r5
 800e28c:	4604      	mov	r4, r0
 800e28e:	f100 0a14 	add.w	sl, r0, #20
 800e292:	f04f 0900 	mov.w	r9, #0
 800e296:	e7b8      	b.n	800e20a <__gethex+0x1b6>
 800e298:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e29c:	42bd      	cmp	r5, r7
 800e29e:	dd6f      	ble.n	800e380 <__gethex+0x32c>
 800e2a0:	1bed      	subs	r5, r5, r7
 800e2a2:	42ae      	cmp	r6, r5
 800e2a4:	dc34      	bgt.n	800e310 <__gethex+0x2bc>
 800e2a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e2aa:	2b02      	cmp	r3, #2
 800e2ac:	d022      	beq.n	800e2f4 <__gethex+0x2a0>
 800e2ae:	2b03      	cmp	r3, #3
 800e2b0:	d024      	beq.n	800e2fc <__gethex+0x2a8>
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d115      	bne.n	800e2e2 <__gethex+0x28e>
 800e2b6:	42ae      	cmp	r6, r5
 800e2b8:	d113      	bne.n	800e2e2 <__gethex+0x28e>
 800e2ba:	2e01      	cmp	r6, #1
 800e2bc:	d10b      	bne.n	800e2d6 <__gethex+0x282>
 800e2be:	9a02      	ldr	r2, [sp, #8]
 800e2c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e2c4:	6013      	str	r3, [r2, #0]
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	6123      	str	r3, [r4, #16]
 800e2ca:	f8ca 3000 	str.w	r3, [sl]
 800e2ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2d0:	2562      	movs	r5, #98	@ 0x62
 800e2d2:	601c      	str	r4, [r3, #0]
 800e2d4:	e73a      	b.n	800e14c <__gethex+0xf8>
 800e2d6:	1e71      	subs	r1, r6, #1
 800e2d8:	4620      	mov	r0, r4
 800e2da:	f000 fee6 	bl	800f0aa <__any_on>
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	d1ed      	bne.n	800e2be <__gethex+0x26a>
 800e2e2:	9801      	ldr	r0, [sp, #4]
 800e2e4:	4621      	mov	r1, r4
 800e2e6:	f000 fa8f 	bl	800e808 <_Bfree>
 800e2ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	6013      	str	r3, [r2, #0]
 800e2f0:	2550      	movs	r5, #80	@ 0x50
 800e2f2:	e72b      	b.n	800e14c <__gethex+0xf8>
 800e2f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d1f3      	bne.n	800e2e2 <__gethex+0x28e>
 800e2fa:	e7e0      	b.n	800e2be <__gethex+0x26a>
 800e2fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1dd      	bne.n	800e2be <__gethex+0x26a>
 800e302:	e7ee      	b.n	800e2e2 <__gethex+0x28e>
 800e304:	080108cc 	.word	0x080108cc
 800e308:	08011109 	.word	0x08011109
 800e30c:	0801111a 	.word	0x0801111a
 800e310:	1e6f      	subs	r7, r5, #1
 800e312:	f1b9 0f00 	cmp.w	r9, #0
 800e316:	d130      	bne.n	800e37a <__gethex+0x326>
 800e318:	b127      	cbz	r7, 800e324 <__gethex+0x2d0>
 800e31a:	4639      	mov	r1, r7
 800e31c:	4620      	mov	r0, r4
 800e31e:	f000 fec4 	bl	800f0aa <__any_on>
 800e322:	4681      	mov	r9, r0
 800e324:	117a      	asrs	r2, r7, #5
 800e326:	2301      	movs	r3, #1
 800e328:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e32c:	f007 071f 	and.w	r7, r7, #31
 800e330:	40bb      	lsls	r3, r7
 800e332:	4213      	tst	r3, r2
 800e334:	4629      	mov	r1, r5
 800e336:	4620      	mov	r0, r4
 800e338:	bf18      	it	ne
 800e33a:	f049 0902 	orrne.w	r9, r9, #2
 800e33e:	f7ff fe21 	bl	800df84 <rshift>
 800e342:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e346:	1b76      	subs	r6, r6, r5
 800e348:	2502      	movs	r5, #2
 800e34a:	f1b9 0f00 	cmp.w	r9, #0
 800e34e:	d047      	beq.n	800e3e0 <__gethex+0x38c>
 800e350:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e354:	2b02      	cmp	r3, #2
 800e356:	d015      	beq.n	800e384 <__gethex+0x330>
 800e358:	2b03      	cmp	r3, #3
 800e35a:	d017      	beq.n	800e38c <__gethex+0x338>
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d109      	bne.n	800e374 <__gethex+0x320>
 800e360:	f019 0f02 	tst.w	r9, #2
 800e364:	d006      	beq.n	800e374 <__gethex+0x320>
 800e366:	f8da 3000 	ldr.w	r3, [sl]
 800e36a:	ea49 0903 	orr.w	r9, r9, r3
 800e36e:	f019 0f01 	tst.w	r9, #1
 800e372:	d10e      	bne.n	800e392 <__gethex+0x33e>
 800e374:	f045 0510 	orr.w	r5, r5, #16
 800e378:	e032      	b.n	800e3e0 <__gethex+0x38c>
 800e37a:	f04f 0901 	mov.w	r9, #1
 800e37e:	e7d1      	b.n	800e324 <__gethex+0x2d0>
 800e380:	2501      	movs	r5, #1
 800e382:	e7e2      	b.n	800e34a <__gethex+0x2f6>
 800e384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e386:	f1c3 0301 	rsb	r3, r3, #1
 800e38a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e38c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d0f0      	beq.n	800e374 <__gethex+0x320>
 800e392:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e396:	f104 0314 	add.w	r3, r4, #20
 800e39a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e39e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e3a2:	f04f 0c00 	mov.w	ip, #0
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e3b0:	d01b      	beq.n	800e3ea <__gethex+0x396>
 800e3b2:	3201      	adds	r2, #1
 800e3b4:	6002      	str	r2, [r0, #0]
 800e3b6:	2d02      	cmp	r5, #2
 800e3b8:	f104 0314 	add.w	r3, r4, #20
 800e3bc:	d13c      	bne.n	800e438 <__gethex+0x3e4>
 800e3be:	f8d8 2000 	ldr.w	r2, [r8]
 800e3c2:	3a01      	subs	r2, #1
 800e3c4:	42b2      	cmp	r2, r6
 800e3c6:	d109      	bne.n	800e3dc <__gethex+0x388>
 800e3c8:	1171      	asrs	r1, r6, #5
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e3d0:	f006 061f 	and.w	r6, r6, #31
 800e3d4:	fa02 f606 	lsl.w	r6, r2, r6
 800e3d8:	421e      	tst	r6, r3
 800e3da:	d13a      	bne.n	800e452 <__gethex+0x3fe>
 800e3dc:	f045 0520 	orr.w	r5, r5, #32
 800e3e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3e2:	601c      	str	r4, [r3, #0]
 800e3e4:	9b02      	ldr	r3, [sp, #8]
 800e3e6:	601f      	str	r7, [r3, #0]
 800e3e8:	e6b0      	b.n	800e14c <__gethex+0xf8>
 800e3ea:	4299      	cmp	r1, r3
 800e3ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800e3f0:	d8d9      	bhi.n	800e3a6 <__gethex+0x352>
 800e3f2:	68a3      	ldr	r3, [r4, #8]
 800e3f4:	459b      	cmp	fp, r3
 800e3f6:	db17      	blt.n	800e428 <__gethex+0x3d4>
 800e3f8:	6861      	ldr	r1, [r4, #4]
 800e3fa:	9801      	ldr	r0, [sp, #4]
 800e3fc:	3101      	adds	r1, #1
 800e3fe:	f000 f9c3 	bl	800e788 <_Balloc>
 800e402:	4681      	mov	r9, r0
 800e404:	b918      	cbnz	r0, 800e40e <__gethex+0x3ba>
 800e406:	4b1a      	ldr	r3, [pc, #104]	@ (800e470 <__gethex+0x41c>)
 800e408:	4602      	mov	r2, r0
 800e40a:	2184      	movs	r1, #132	@ 0x84
 800e40c:	e6c5      	b.n	800e19a <__gethex+0x146>
 800e40e:	6922      	ldr	r2, [r4, #16]
 800e410:	3202      	adds	r2, #2
 800e412:	f104 010c 	add.w	r1, r4, #12
 800e416:	0092      	lsls	r2, r2, #2
 800e418:	300c      	adds	r0, #12
 800e41a:	f7fe fee1 	bl	800d1e0 <memcpy>
 800e41e:	4621      	mov	r1, r4
 800e420:	9801      	ldr	r0, [sp, #4]
 800e422:	f000 f9f1 	bl	800e808 <_Bfree>
 800e426:	464c      	mov	r4, r9
 800e428:	6923      	ldr	r3, [r4, #16]
 800e42a:	1c5a      	adds	r2, r3, #1
 800e42c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e430:	6122      	str	r2, [r4, #16]
 800e432:	2201      	movs	r2, #1
 800e434:	615a      	str	r2, [r3, #20]
 800e436:	e7be      	b.n	800e3b6 <__gethex+0x362>
 800e438:	6922      	ldr	r2, [r4, #16]
 800e43a:	455a      	cmp	r2, fp
 800e43c:	dd0b      	ble.n	800e456 <__gethex+0x402>
 800e43e:	2101      	movs	r1, #1
 800e440:	4620      	mov	r0, r4
 800e442:	f7ff fd9f 	bl	800df84 <rshift>
 800e446:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e44a:	3701      	adds	r7, #1
 800e44c:	42bb      	cmp	r3, r7
 800e44e:	f6ff aee0 	blt.w	800e212 <__gethex+0x1be>
 800e452:	2501      	movs	r5, #1
 800e454:	e7c2      	b.n	800e3dc <__gethex+0x388>
 800e456:	f016 061f 	ands.w	r6, r6, #31
 800e45a:	d0fa      	beq.n	800e452 <__gethex+0x3fe>
 800e45c:	4453      	add	r3, sl
 800e45e:	f1c6 0620 	rsb	r6, r6, #32
 800e462:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e466:	f000 fa81 	bl	800e96c <__hi0bits>
 800e46a:	42b0      	cmp	r0, r6
 800e46c:	dbe7      	blt.n	800e43e <__gethex+0x3ea>
 800e46e:	e7f0      	b.n	800e452 <__gethex+0x3fe>
 800e470:	08011109 	.word	0x08011109

0800e474 <L_shift>:
 800e474:	f1c2 0208 	rsb	r2, r2, #8
 800e478:	0092      	lsls	r2, r2, #2
 800e47a:	b570      	push	{r4, r5, r6, lr}
 800e47c:	f1c2 0620 	rsb	r6, r2, #32
 800e480:	6843      	ldr	r3, [r0, #4]
 800e482:	6804      	ldr	r4, [r0, #0]
 800e484:	fa03 f506 	lsl.w	r5, r3, r6
 800e488:	432c      	orrs	r4, r5
 800e48a:	40d3      	lsrs	r3, r2
 800e48c:	6004      	str	r4, [r0, #0]
 800e48e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e492:	4288      	cmp	r0, r1
 800e494:	d3f4      	bcc.n	800e480 <L_shift+0xc>
 800e496:	bd70      	pop	{r4, r5, r6, pc}

0800e498 <__match>:
 800e498:	b530      	push	{r4, r5, lr}
 800e49a:	6803      	ldr	r3, [r0, #0]
 800e49c:	3301      	adds	r3, #1
 800e49e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4a2:	b914      	cbnz	r4, 800e4aa <__match+0x12>
 800e4a4:	6003      	str	r3, [r0, #0]
 800e4a6:	2001      	movs	r0, #1
 800e4a8:	bd30      	pop	{r4, r5, pc}
 800e4aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e4b2:	2d19      	cmp	r5, #25
 800e4b4:	bf98      	it	ls
 800e4b6:	3220      	addls	r2, #32
 800e4b8:	42a2      	cmp	r2, r4
 800e4ba:	d0f0      	beq.n	800e49e <__match+0x6>
 800e4bc:	2000      	movs	r0, #0
 800e4be:	e7f3      	b.n	800e4a8 <__match+0x10>

0800e4c0 <__hexnan>:
 800e4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4c4:	680b      	ldr	r3, [r1, #0]
 800e4c6:	6801      	ldr	r1, [r0, #0]
 800e4c8:	115e      	asrs	r6, r3, #5
 800e4ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e4ce:	f013 031f 	ands.w	r3, r3, #31
 800e4d2:	b087      	sub	sp, #28
 800e4d4:	bf18      	it	ne
 800e4d6:	3604      	addne	r6, #4
 800e4d8:	2500      	movs	r5, #0
 800e4da:	1f37      	subs	r7, r6, #4
 800e4dc:	4682      	mov	sl, r0
 800e4de:	4690      	mov	r8, r2
 800e4e0:	9301      	str	r3, [sp, #4]
 800e4e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800e4e6:	46b9      	mov	r9, r7
 800e4e8:	463c      	mov	r4, r7
 800e4ea:	9502      	str	r5, [sp, #8]
 800e4ec:	46ab      	mov	fp, r5
 800e4ee:	784a      	ldrb	r2, [r1, #1]
 800e4f0:	1c4b      	adds	r3, r1, #1
 800e4f2:	9303      	str	r3, [sp, #12]
 800e4f4:	b342      	cbz	r2, 800e548 <__hexnan+0x88>
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	9105      	str	r1, [sp, #20]
 800e4fa:	9204      	str	r2, [sp, #16]
 800e4fc:	f7ff fd94 	bl	800e028 <__hexdig_fun>
 800e500:	2800      	cmp	r0, #0
 800e502:	d151      	bne.n	800e5a8 <__hexnan+0xe8>
 800e504:	9a04      	ldr	r2, [sp, #16]
 800e506:	9905      	ldr	r1, [sp, #20]
 800e508:	2a20      	cmp	r2, #32
 800e50a:	d818      	bhi.n	800e53e <__hexnan+0x7e>
 800e50c:	9b02      	ldr	r3, [sp, #8]
 800e50e:	459b      	cmp	fp, r3
 800e510:	dd13      	ble.n	800e53a <__hexnan+0x7a>
 800e512:	454c      	cmp	r4, r9
 800e514:	d206      	bcs.n	800e524 <__hexnan+0x64>
 800e516:	2d07      	cmp	r5, #7
 800e518:	dc04      	bgt.n	800e524 <__hexnan+0x64>
 800e51a:	462a      	mov	r2, r5
 800e51c:	4649      	mov	r1, r9
 800e51e:	4620      	mov	r0, r4
 800e520:	f7ff ffa8 	bl	800e474 <L_shift>
 800e524:	4544      	cmp	r4, r8
 800e526:	d952      	bls.n	800e5ce <__hexnan+0x10e>
 800e528:	2300      	movs	r3, #0
 800e52a:	f1a4 0904 	sub.w	r9, r4, #4
 800e52e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e532:	f8cd b008 	str.w	fp, [sp, #8]
 800e536:	464c      	mov	r4, r9
 800e538:	461d      	mov	r5, r3
 800e53a:	9903      	ldr	r1, [sp, #12]
 800e53c:	e7d7      	b.n	800e4ee <__hexnan+0x2e>
 800e53e:	2a29      	cmp	r2, #41	@ 0x29
 800e540:	d157      	bne.n	800e5f2 <__hexnan+0x132>
 800e542:	3102      	adds	r1, #2
 800e544:	f8ca 1000 	str.w	r1, [sl]
 800e548:	f1bb 0f00 	cmp.w	fp, #0
 800e54c:	d051      	beq.n	800e5f2 <__hexnan+0x132>
 800e54e:	454c      	cmp	r4, r9
 800e550:	d206      	bcs.n	800e560 <__hexnan+0xa0>
 800e552:	2d07      	cmp	r5, #7
 800e554:	dc04      	bgt.n	800e560 <__hexnan+0xa0>
 800e556:	462a      	mov	r2, r5
 800e558:	4649      	mov	r1, r9
 800e55a:	4620      	mov	r0, r4
 800e55c:	f7ff ff8a 	bl	800e474 <L_shift>
 800e560:	4544      	cmp	r4, r8
 800e562:	d936      	bls.n	800e5d2 <__hexnan+0x112>
 800e564:	f1a8 0204 	sub.w	r2, r8, #4
 800e568:	4623      	mov	r3, r4
 800e56a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e56e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e572:	429f      	cmp	r7, r3
 800e574:	d2f9      	bcs.n	800e56a <__hexnan+0xaa>
 800e576:	1b3b      	subs	r3, r7, r4
 800e578:	f023 0303 	bic.w	r3, r3, #3
 800e57c:	3304      	adds	r3, #4
 800e57e:	3401      	adds	r4, #1
 800e580:	3e03      	subs	r6, #3
 800e582:	42b4      	cmp	r4, r6
 800e584:	bf88      	it	hi
 800e586:	2304      	movhi	r3, #4
 800e588:	4443      	add	r3, r8
 800e58a:	2200      	movs	r2, #0
 800e58c:	f843 2b04 	str.w	r2, [r3], #4
 800e590:	429f      	cmp	r7, r3
 800e592:	d2fb      	bcs.n	800e58c <__hexnan+0xcc>
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	b91b      	cbnz	r3, 800e5a0 <__hexnan+0xe0>
 800e598:	4547      	cmp	r7, r8
 800e59a:	d128      	bne.n	800e5ee <__hexnan+0x12e>
 800e59c:	2301      	movs	r3, #1
 800e59e:	603b      	str	r3, [r7, #0]
 800e5a0:	2005      	movs	r0, #5
 800e5a2:	b007      	add	sp, #28
 800e5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a8:	3501      	adds	r5, #1
 800e5aa:	2d08      	cmp	r5, #8
 800e5ac:	f10b 0b01 	add.w	fp, fp, #1
 800e5b0:	dd06      	ble.n	800e5c0 <__hexnan+0x100>
 800e5b2:	4544      	cmp	r4, r8
 800e5b4:	d9c1      	bls.n	800e53a <__hexnan+0x7a>
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5bc:	2501      	movs	r5, #1
 800e5be:	3c04      	subs	r4, #4
 800e5c0:	6822      	ldr	r2, [r4, #0]
 800e5c2:	f000 000f 	and.w	r0, r0, #15
 800e5c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e5ca:	6020      	str	r0, [r4, #0]
 800e5cc:	e7b5      	b.n	800e53a <__hexnan+0x7a>
 800e5ce:	2508      	movs	r5, #8
 800e5d0:	e7b3      	b.n	800e53a <__hexnan+0x7a>
 800e5d2:	9b01      	ldr	r3, [sp, #4]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d0dd      	beq.n	800e594 <__hexnan+0xd4>
 800e5d8:	f1c3 0320 	rsb	r3, r3, #32
 800e5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e0:	40da      	lsrs	r2, r3
 800e5e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e5e6:	4013      	ands	r3, r2
 800e5e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800e5ec:	e7d2      	b.n	800e594 <__hexnan+0xd4>
 800e5ee:	3f04      	subs	r7, #4
 800e5f0:	e7d0      	b.n	800e594 <__hexnan+0xd4>
 800e5f2:	2004      	movs	r0, #4
 800e5f4:	e7d5      	b.n	800e5a2 <__hexnan+0xe2>
	...

0800e5f8 <malloc>:
 800e5f8:	4b02      	ldr	r3, [pc, #8]	@ (800e604 <malloc+0xc>)
 800e5fa:	4601      	mov	r1, r0
 800e5fc:	6818      	ldr	r0, [r3, #0]
 800e5fe:	f000 b825 	b.w	800e64c <_malloc_r>
 800e602:	bf00      	nop
 800e604:	20000184 	.word	0x20000184

0800e608 <sbrk_aligned>:
 800e608:	b570      	push	{r4, r5, r6, lr}
 800e60a:	4e0f      	ldr	r6, [pc, #60]	@ (800e648 <sbrk_aligned+0x40>)
 800e60c:	460c      	mov	r4, r1
 800e60e:	6831      	ldr	r1, [r6, #0]
 800e610:	4605      	mov	r5, r0
 800e612:	b911      	cbnz	r1, 800e61a <sbrk_aligned+0x12>
 800e614:	f001 f98a 	bl	800f92c <_sbrk_r>
 800e618:	6030      	str	r0, [r6, #0]
 800e61a:	4621      	mov	r1, r4
 800e61c:	4628      	mov	r0, r5
 800e61e:	f001 f985 	bl	800f92c <_sbrk_r>
 800e622:	1c43      	adds	r3, r0, #1
 800e624:	d103      	bne.n	800e62e <sbrk_aligned+0x26>
 800e626:	f04f 34ff 	mov.w	r4, #4294967295
 800e62a:	4620      	mov	r0, r4
 800e62c:	bd70      	pop	{r4, r5, r6, pc}
 800e62e:	1cc4      	adds	r4, r0, #3
 800e630:	f024 0403 	bic.w	r4, r4, #3
 800e634:	42a0      	cmp	r0, r4
 800e636:	d0f8      	beq.n	800e62a <sbrk_aligned+0x22>
 800e638:	1a21      	subs	r1, r4, r0
 800e63a:	4628      	mov	r0, r5
 800e63c:	f001 f976 	bl	800f92c <_sbrk_r>
 800e640:	3001      	adds	r0, #1
 800e642:	d1f2      	bne.n	800e62a <sbrk_aligned+0x22>
 800e644:	e7ef      	b.n	800e626 <sbrk_aligned+0x1e>
 800e646:	bf00      	nop
 800e648:	2000391c 	.word	0x2000391c

0800e64c <_malloc_r>:
 800e64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e650:	1ccd      	adds	r5, r1, #3
 800e652:	f025 0503 	bic.w	r5, r5, #3
 800e656:	3508      	adds	r5, #8
 800e658:	2d0c      	cmp	r5, #12
 800e65a:	bf38      	it	cc
 800e65c:	250c      	movcc	r5, #12
 800e65e:	2d00      	cmp	r5, #0
 800e660:	4606      	mov	r6, r0
 800e662:	db01      	blt.n	800e668 <_malloc_r+0x1c>
 800e664:	42a9      	cmp	r1, r5
 800e666:	d904      	bls.n	800e672 <_malloc_r+0x26>
 800e668:	230c      	movs	r3, #12
 800e66a:	6033      	str	r3, [r6, #0]
 800e66c:	2000      	movs	r0, #0
 800e66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e672:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e748 <_malloc_r+0xfc>
 800e676:	f000 f87b 	bl	800e770 <__malloc_lock>
 800e67a:	f8d8 3000 	ldr.w	r3, [r8]
 800e67e:	461c      	mov	r4, r3
 800e680:	bb44      	cbnz	r4, 800e6d4 <_malloc_r+0x88>
 800e682:	4629      	mov	r1, r5
 800e684:	4630      	mov	r0, r6
 800e686:	f7ff ffbf 	bl	800e608 <sbrk_aligned>
 800e68a:	1c43      	adds	r3, r0, #1
 800e68c:	4604      	mov	r4, r0
 800e68e:	d158      	bne.n	800e742 <_malloc_r+0xf6>
 800e690:	f8d8 4000 	ldr.w	r4, [r8]
 800e694:	4627      	mov	r7, r4
 800e696:	2f00      	cmp	r7, #0
 800e698:	d143      	bne.n	800e722 <_malloc_r+0xd6>
 800e69a:	2c00      	cmp	r4, #0
 800e69c:	d04b      	beq.n	800e736 <_malloc_r+0xea>
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	4639      	mov	r1, r7
 800e6a2:	4630      	mov	r0, r6
 800e6a4:	eb04 0903 	add.w	r9, r4, r3
 800e6a8:	f001 f940 	bl	800f92c <_sbrk_r>
 800e6ac:	4581      	cmp	r9, r0
 800e6ae:	d142      	bne.n	800e736 <_malloc_r+0xea>
 800e6b0:	6821      	ldr	r1, [r4, #0]
 800e6b2:	1a6d      	subs	r5, r5, r1
 800e6b4:	4629      	mov	r1, r5
 800e6b6:	4630      	mov	r0, r6
 800e6b8:	f7ff ffa6 	bl	800e608 <sbrk_aligned>
 800e6bc:	3001      	adds	r0, #1
 800e6be:	d03a      	beq.n	800e736 <_malloc_r+0xea>
 800e6c0:	6823      	ldr	r3, [r4, #0]
 800e6c2:	442b      	add	r3, r5
 800e6c4:	6023      	str	r3, [r4, #0]
 800e6c6:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ca:	685a      	ldr	r2, [r3, #4]
 800e6cc:	bb62      	cbnz	r2, 800e728 <_malloc_r+0xdc>
 800e6ce:	f8c8 7000 	str.w	r7, [r8]
 800e6d2:	e00f      	b.n	800e6f4 <_malloc_r+0xa8>
 800e6d4:	6822      	ldr	r2, [r4, #0]
 800e6d6:	1b52      	subs	r2, r2, r5
 800e6d8:	d420      	bmi.n	800e71c <_malloc_r+0xd0>
 800e6da:	2a0b      	cmp	r2, #11
 800e6dc:	d917      	bls.n	800e70e <_malloc_r+0xc2>
 800e6de:	1961      	adds	r1, r4, r5
 800e6e0:	42a3      	cmp	r3, r4
 800e6e2:	6025      	str	r5, [r4, #0]
 800e6e4:	bf18      	it	ne
 800e6e6:	6059      	strne	r1, [r3, #4]
 800e6e8:	6863      	ldr	r3, [r4, #4]
 800e6ea:	bf08      	it	eq
 800e6ec:	f8c8 1000 	streq.w	r1, [r8]
 800e6f0:	5162      	str	r2, [r4, r5]
 800e6f2:	604b      	str	r3, [r1, #4]
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	f000 f841 	bl	800e77c <__malloc_unlock>
 800e6fa:	f104 000b 	add.w	r0, r4, #11
 800e6fe:	1d23      	adds	r3, r4, #4
 800e700:	f020 0007 	bic.w	r0, r0, #7
 800e704:	1ac2      	subs	r2, r0, r3
 800e706:	bf1c      	itt	ne
 800e708:	1a1b      	subne	r3, r3, r0
 800e70a:	50a3      	strne	r3, [r4, r2]
 800e70c:	e7af      	b.n	800e66e <_malloc_r+0x22>
 800e70e:	6862      	ldr	r2, [r4, #4]
 800e710:	42a3      	cmp	r3, r4
 800e712:	bf0c      	ite	eq
 800e714:	f8c8 2000 	streq.w	r2, [r8]
 800e718:	605a      	strne	r2, [r3, #4]
 800e71a:	e7eb      	b.n	800e6f4 <_malloc_r+0xa8>
 800e71c:	4623      	mov	r3, r4
 800e71e:	6864      	ldr	r4, [r4, #4]
 800e720:	e7ae      	b.n	800e680 <_malloc_r+0x34>
 800e722:	463c      	mov	r4, r7
 800e724:	687f      	ldr	r7, [r7, #4]
 800e726:	e7b6      	b.n	800e696 <_malloc_r+0x4a>
 800e728:	461a      	mov	r2, r3
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	42a3      	cmp	r3, r4
 800e72e:	d1fb      	bne.n	800e728 <_malloc_r+0xdc>
 800e730:	2300      	movs	r3, #0
 800e732:	6053      	str	r3, [r2, #4]
 800e734:	e7de      	b.n	800e6f4 <_malloc_r+0xa8>
 800e736:	230c      	movs	r3, #12
 800e738:	6033      	str	r3, [r6, #0]
 800e73a:	4630      	mov	r0, r6
 800e73c:	f000 f81e 	bl	800e77c <__malloc_unlock>
 800e740:	e794      	b.n	800e66c <_malloc_r+0x20>
 800e742:	6005      	str	r5, [r0, #0]
 800e744:	e7d6      	b.n	800e6f4 <_malloc_r+0xa8>
 800e746:	bf00      	nop
 800e748:	20003920 	.word	0x20003920

0800e74c <__ascii_mbtowc>:
 800e74c:	b082      	sub	sp, #8
 800e74e:	b901      	cbnz	r1, 800e752 <__ascii_mbtowc+0x6>
 800e750:	a901      	add	r1, sp, #4
 800e752:	b142      	cbz	r2, 800e766 <__ascii_mbtowc+0x1a>
 800e754:	b14b      	cbz	r3, 800e76a <__ascii_mbtowc+0x1e>
 800e756:	7813      	ldrb	r3, [r2, #0]
 800e758:	600b      	str	r3, [r1, #0]
 800e75a:	7812      	ldrb	r2, [r2, #0]
 800e75c:	1e10      	subs	r0, r2, #0
 800e75e:	bf18      	it	ne
 800e760:	2001      	movne	r0, #1
 800e762:	b002      	add	sp, #8
 800e764:	4770      	bx	lr
 800e766:	4610      	mov	r0, r2
 800e768:	e7fb      	b.n	800e762 <__ascii_mbtowc+0x16>
 800e76a:	f06f 0001 	mvn.w	r0, #1
 800e76e:	e7f8      	b.n	800e762 <__ascii_mbtowc+0x16>

0800e770 <__malloc_lock>:
 800e770:	4801      	ldr	r0, [pc, #4]	@ (800e778 <__malloc_lock+0x8>)
 800e772:	f7fe bd33 	b.w	800d1dc <__retarget_lock_acquire_recursive>
 800e776:	bf00      	nop
 800e778:	20003918 	.word	0x20003918

0800e77c <__malloc_unlock>:
 800e77c:	4801      	ldr	r0, [pc, #4]	@ (800e784 <__malloc_unlock+0x8>)
 800e77e:	f7fe bd2e 	b.w	800d1de <__retarget_lock_release_recursive>
 800e782:	bf00      	nop
 800e784:	20003918 	.word	0x20003918

0800e788 <_Balloc>:
 800e788:	b570      	push	{r4, r5, r6, lr}
 800e78a:	69c6      	ldr	r6, [r0, #28]
 800e78c:	4604      	mov	r4, r0
 800e78e:	460d      	mov	r5, r1
 800e790:	b976      	cbnz	r6, 800e7b0 <_Balloc+0x28>
 800e792:	2010      	movs	r0, #16
 800e794:	f7ff ff30 	bl	800e5f8 <malloc>
 800e798:	4602      	mov	r2, r0
 800e79a:	61e0      	str	r0, [r4, #28]
 800e79c:	b920      	cbnz	r0, 800e7a8 <_Balloc+0x20>
 800e79e:	4b18      	ldr	r3, [pc, #96]	@ (800e800 <_Balloc+0x78>)
 800e7a0:	4818      	ldr	r0, [pc, #96]	@ (800e804 <_Balloc+0x7c>)
 800e7a2:	216b      	movs	r1, #107	@ 0x6b
 800e7a4:	f7fe fd3a 	bl	800d21c <__assert_func>
 800e7a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7ac:	6006      	str	r6, [r0, #0]
 800e7ae:	60c6      	str	r6, [r0, #12]
 800e7b0:	69e6      	ldr	r6, [r4, #28]
 800e7b2:	68f3      	ldr	r3, [r6, #12]
 800e7b4:	b183      	cbz	r3, 800e7d8 <_Balloc+0x50>
 800e7b6:	69e3      	ldr	r3, [r4, #28]
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e7be:	b9b8      	cbnz	r0, 800e7f0 <_Balloc+0x68>
 800e7c0:	2101      	movs	r1, #1
 800e7c2:	fa01 f605 	lsl.w	r6, r1, r5
 800e7c6:	1d72      	adds	r2, r6, #5
 800e7c8:	0092      	lsls	r2, r2, #2
 800e7ca:	4620      	mov	r0, r4
 800e7cc:	f001 f8c5 	bl	800f95a <_calloc_r>
 800e7d0:	b160      	cbz	r0, 800e7ec <_Balloc+0x64>
 800e7d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e7d6:	e00e      	b.n	800e7f6 <_Balloc+0x6e>
 800e7d8:	2221      	movs	r2, #33	@ 0x21
 800e7da:	2104      	movs	r1, #4
 800e7dc:	4620      	mov	r0, r4
 800e7de:	f001 f8bc 	bl	800f95a <_calloc_r>
 800e7e2:	69e3      	ldr	r3, [r4, #28]
 800e7e4:	60f0      	str	r0, [r6, #12]
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d1e4      	bne.n	800e7b6 <_Balloc+0x2e>
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	bd70      	pop	{r4, r5, r6, pc}
 800e7f0:	6802      	ldr	r2, [r0, #0]
 800e7f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e7fc:	e7f7      	b.n	800e7ee <_Balloc+0x66>
 800e7fe:	bf00      	nop
 800e800:	08010fef 	.word	0x08010fef
 800e804:	0801117a 	.word	0x0801117a

0800e808 <_Bfree>:
 800e808:	b570      	push	{r4, r5, r6, lr}
 800e80a:	69c6      	ldr	r6, [r0, #28]
 800e80c:	4605      	mov	r5, r0
 800e80e:	460c      	mov	r4, r1
 800e810:	b976      	cbnz	r6, 800e830 <_Bfree+0x28>
 800e812:	2010      	movs	r0, #16
 800e814:	f7ff fef0 	bl	800e5f8 <malloc>
 800e818:	4602      	mov	r2, r0
 800e81a:	61e8      	str	r0, [r5, #28]
 800e81c:	b920      	cbnz	r0, 800e828 <_Bfree+0x20>
 800e81e:	4b09      	ldr	r3, [pc, #36]	@ (800e844 <_Bfree+0x3c>)
 800e820:	4809      	ldr	r0, [pc, #36]	@ (800e848 <_Bfree+0x40>)
 800e822:	218f      	movs	r1, #143	@ 0x8f
 800e824:	f7fe fcfa 	bl	800d21c <__assert_func>
 800e828:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e82c:	6006      	str	r6, [r0, #0]
 800e82e:	60c6      	str	r6, [r0, #12]
 800e830:	b13c      	cbz	r4, 800e842 <_Bfree+0x3a>
 800e832:	69eb      	ldr	r3, [r5, #28]
 800e834:	6862      	ldr	r2, [r4, #4]
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e83c:	6021      	str	r1, [r4, #0]
 800e83e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e842:	bd70      	pop	{r4, r5, r6, pc}
 800e844:	08010fef 	.word	0x08010fef
 800e848:	0801117a 	.word	0x0801117a

0800e84c <__multadd>:
 800e84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e850:	690d      	ldr	r5, [r1, #16]
 800e852:	4607      	mov	r7, r0
 800e854:	460c      	mov	r4, r1
 800e856:	461e      	mov	r6, r3
 800e858:	f101 0c14 	add.w	ip, r1, #20
 800e85c:	2000      	movs	r0, #0
 800e85e:	f8dc 3000 	ldr.w	r3, [ip]
 800e862:	b299      	uxth	r1, r3
 800e864:	fb02 6101 	mla	r1, r2, r1, r6
 800e868:	0c1e      	lsrs	r6, r3, #16
 800e86a:	0c0b      	lsrs	r3, r1, #16
 800e86c:	fb02 3306 	mla	r3, r2, r6, r3
 800e870:	b289      	uxth	r1, r1
 800e872:	3001      	adds	r0, #1
 800e874:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e878:	4285      	cmp	r5, r0
 800e87a:	f84c 1b04 	str.w	r1, [ip], #4
 800e87e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e882:	dcec      	bgt.n	800e85e <__multadd+0x12>
 800e884:	b30e      	cbz	r6, 800e8ca <__multadd+0x7e>
 800e886:	68a3      	ldr	r3, [r4, #8]
 800e888:	42ab      	cmp	r3, r5
 800e88a:	dc19      	bgt.n	800e8c0 <__multadd+0x74>
 800e88c:	6861      	ldr	r1, [r4, #4]
 800e88e:	4638      	mov	r0, r7
 800e890:	3101      	adds	r1, #1
 800e892:	f7ff ff79 	bl	800e788 <_Balloc>
 800e896:	4680      	mov	r8, r0
 800e898:	b928      	cbnz	r0, 800e8a6 <__multadd+0x5a>
 800e89a:	4602      	mov	r2, r0
 800e89c:	4b0c      	ldr	r3, [pc, #48]	@ (800e8d0 <__multadd+0x84>)
 800e89e:	480d      	ldr	r0, [pc, #52]	@ (800e8d4 <__multadd+0x88>)
 800e8a0:	21ba      	movs	r1, #186	@ 0xba
 800e8a2:	f7fe fcbb 	bl	800d21c <__assert_func>
 800e8a6:	6922      	ldr	r2, [r4, #16]
 800e8a8:	3202      	adds	r2, #2
 800e8aa:	f104 010c 	add.w	r1, r4, #12
 800e8ae:	0092      	lsls	r2, r2, #2
 800e8b0:	300c      	adds	r0, #12
 800e8b2:	f7fe fc95 	bl	800d1e0 <memcpy>
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	4638      	mov	r0, r7
 800e8ba:	f7ff ffa5 	bl	800e808 <_Bfree>
 800e8be:	4644      	mov	r4, r8
 800e8c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e8c4:	3501      	adds	r5, #1
 800e8c6:	615e      	str	r6, [r3, #20]
 800e8c8:	6125      	str	r5, [r4, #16]
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d0:	08011109 	.word	0x08011109
 800e8d4:	0801117a 	.word	0x0801117a

0800e8d8 <__s2b>:
 800e8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8dc:	460c      	mov	r4, r1
 800e8de:	4615      	mov	r5, r2
 800e8e0:	461f      	mov	r7, r3
 800e8e2:	2209      	movs	r2, #9
 800e8e4:	3308      	adds	r3, #8
 800e8e6:	4606      	mov	r6, r0
 800e8e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	db09      	blt.n	800e908 <__s2b+0x30>
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f7ff ff47 	bl	800e788 <_Balloc>
 800e8fa:	b940      	cbnz	r0, 800e90e <__s2b+0x36>
 800e8fc:	4602      	mov	r2, r0
 800e8fe:	4b19      	ldr	r3, [pc, #100]	@ (800e964 <__s2b+0x8c>)
 800e900:	4819      	ldr	r0, [pc, #100]	@ (800e968 <__s2b+0x90>)
 800e902:	21d3      	movs	r1, #211	@ 0xd3
 800e904:	f7fe fc8a 	bl	800d21c <__assert_func>
 800e908:	0052      	lsls	r2, r2, #1
 800e90a:	3101      	adds	r1, #1
 800e90c:	e7f0      	b.n	800e8f0 <__s2b+0x18>
 800e90e:	9b08      	ldr	r3, [sp, #32]
 800e910:	6143      	str	r3, [r0, #20]
 800e912:	2d09      	cmp	r5, #9
 800e914:	f04f 0301 	mov.w	r3, #1
 800e918:	6103      	str	r3, [r0, #16]
 800e91a:	dd16      	ble.n	800e94a <__s2b+0x72>
 800e91c:	f104 0909 	add.w	r9, r4, #9
 800e920:	46c8      	mov	r8, r9
 800e922:	442c      	add	r4, r5
 800e924:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e928:	4601      	mov	r1, r0
 800e92a:	3b30      	subs	r3, #48	@ 0x30
 800e92c:	220a      	movs	r2, #10
 800e92e:	4630      	mov	r0, r6
 800e930:	f7ff ff8c 	bl	800e84c <__multadd>
 800e934:	45a0      	cmp	r8, r4
 800e936:	d1f5      	bne.n	800e924 <__s2b+0x4c>
 800e938:	f1a5 0408 	sub.w	r4, r5, #8
 800e93c:	444c      	add	r4, r9
 800e93e:	1b2d      	subs	r5, r5, r4
 800e940:	1963      	adds	r3, r4, r5
 800e942:	42bb      	cmp	r3, r7
 800e944:	db04      	blt.n	800e950 <__s2b+0x78>
 800e946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e94a:	340a      	adds	r4, #10
 800e94c:	2509      	movs	r5, #9
 800e94e:	e7f6      	b.n	800e93e <__s2b+0x66>
 800e950:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e954:	4601      	mov	r1, r0
 800e956:	3b30      	subs	r3, #48	@ 0x30
 800e958:	220a      	movs	r2, #10
 800e95a:	4630      	mov	r0, r6
 800e95c:	f7ff ff76 	bl	800e84c <__multadd>
 800e960:	e7ee      	b.n	800e940 <__s2b+0x68>
 800e962:	bf00      	nop
 800e964:	08011109 	.word	0x08011109
 800e968:	0801117a 	.word	0x0801117a

0800e96c <__hi0bits>:
 800e96c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e970:	4603      	mov	r3, r0
 800e972:	bf36      	itet	cc
 800e974:	0403      	lslcc	r3, r0, #16
 800e976:	2000      	movcs	r0, #0
 800e978:	2010      	movcc	r0, #16
 800e97a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e97e:	bf3c      	itt	cc
 800e980:	021b      	lslcc	r3, r3, #8
 800e982:	3008      	addcc	r0, #8
 800e984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e988:	bf3c      	itt	cc
 800e98a:	011b      	lslcc	r3, r3, #4
 800e98c:	3004      	addcc	r0, #4
 800e98e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e992:	bf3c      	itt	cc
 800e994:	009b      	lslcc	r3, r3, #2
 800e996:	3002      	addcc	r0, #2
 800e998:	2b00      	cmp	r3, #0
 800e99a:	db05      	blt.n	800e9a8 <__hi0bits+0x3c>
 800e99c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e9a0:	f100 0001 	add.w	r0, r0, #1
 800e9a4:	bf08      	it	eq
 800e9a6:	2020      	moveq	r0, #32
 800e9a8:	4770      	bx	lr

0800e9aa <__lo0bits>:
 800e9aa:	6803      	ldr	r3, [r0, #0]
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	f013 0007 	ands.w	r0, r3, #7
 800e9b2:	d00b      	beq.n	800e9cc <__lo0bits+0x22>
 800e9b4:	07d9      	lsls	r1, r3, #31
 800e9b6:	d421      	bmi.n	800e9fc <__lo0bits+0x52>
 800e9b8:	0798      	lsls	r0, r3, #30
 800e9ba:	bf49      	itett	mi
 800e9bc:	085b      	lsrmi	r3, r3, #1
 800e9be:	089b      	lsrpl	r3, r3, #2
 800e9c0:	2001      	movmi	r0, #1
 800e9c2:	6013      	strmi	r3, [r2, #0]
 800e9c4:	bf5c      	itt	pl
 800e9c6:	6013      	strpl	r3, [r2, #0]
 800e9c8:	2002      	movpl	r0, #2
 800e9ca:	4770      	bx	lr
 800e9cc:	b299      	uxth	r1, r3
 800e9ce:	b909      	cbnz	r1, 800e9d4 <__lo0bits+0x2a>
 800e9d0:	0c1b      	lsrs	r3, r3, #16
 800e9d2:	2010      	movs	r0, #16
 800e9d4:	b2d9      	uxtb	r1, r3
 800e9d6:	b909      	cbnz	r1, 800e9dc <__lo0bits+0x32>
 800e9d8:	3008      	adds	r0, #8
 800e9da:	0a1b      	lsrs	r3, r3, #8
 800e9dc:	0719      	lsls	r1, r3, #28
 800e9de:	bf04      	itt	eq
 800e9e0:	091b      	lsreq	r3, r3, #4
 800e9e2:	3004      	addeq	r0, #4
 800e9e4:	0799      	lsls	r1, r3, #30
 800e9e6:	bf04      	itt	eq
 800e9e8:	089b      	lsreq	r3, r3, #2
 800e9ea:	3002      	addeq	r0, #2
 800e9ec:	07d9      	lsls	r1, r3, #31
 800e9ee:	d403      	bmi.n	800e9f8 <__lo0bits+0x4e>
 800e9f0:	085b      	lsrs	r3, r3, #1
 800e9f2:	f100 0001 	add.w	r0, r0, #1
 800e9f6:	d003      	beq.n	800ea00 <__lo0bits+0x56>
 800e9f8:	6013      	str	r3, [r2, #0]
 800e9fa:	4770      	bx	lr
 800e9fc:	2000      	movs	r0, #0
 800e9fe:	4770      	bx	lr
 800ea00:	2020      	movs	r0, #32
 800ea02:	4770      	bx	lr

0800ea04 <__i2b>:
 800ea04:	b510      	push	{r4, lr}
 800ea06:	460c      	mov	r4, r1
 800ea08:	2101      	movs	r1, #1
 800ea0a:	f7ff febd 	bl	800e788 <_Balloc>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	b928      	cbnz	r0, 800ea1e <__i2b+0x1a>
 800ea12:	4b05      	ldr	r3, [pc, #20]	@ (800ea28 <__i2b+0x24>)
 800ea14:	4805      	ldr	r0, [pc, #20]	@ (800ea2c <__i2b+0x28>)
 800ea16:	f240 1145 	movw	r1, #325	@ 0x145
 800ea1a:	f7fe fbff 	bl	800d21c <__assert_func>
 800ea1e:	2301      	movs	r3, #1
 800ea20:	6144      	str	r4, [r0, #20]
 800ea22:	6103      	str	r3, [r0, #16]
 800ea24:	bd10      	pop	{r4, pc}
 800ea26:	bf00      	nop
 800ea28:	08011109 	.word	0x08011109
 800ea2c:	0801117a 	.word	0x0801117a

0800ea30 <__multiply>:
 800ea30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea34:	4614      	mov	r4, r2
 800ea36:	690a      	ldr	r2, [r1, #16]
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	bfa8      	it	ge
 800ea3e:	4623      	movge	r3, r4
 800ea40:	460f      	mov	r7, r1
 800ea42:	bfa4      	itt	ge
 800ea44:	460c      	movge	r4, r1
 800ea46:	461f      	movge	r7, r3
 800ea48:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ea4c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ea50:	68a3      	ldr	r3, [r4, #8]
 800ea52:	6861      	ldr	r1, [r4, #4]
 800ea54:	eb0a 0609 	add.w	r6, sl, r9
 800ea58:	42b3      	cmp	r3, r6
 800ea5a:	b085      	sub	sp, #20
 800ea5c:	bfb8      	it	lt
 800ea5e:	3101      	addlt	r1, #1
 800ea60:	f7ff fe92 	bl	800e788 <_Balloc>
 800ea64:	b930      	cbnz	r0, 800ea74 <__multiply+0x44>
 800ea66:	4602      	mov	r2, r0
 800ea68:	4b44      	ldr	r3, [pc, #272]	@ (800eb7c <__multiply+0x14c>)
 800ea6a:	4845      	ldr	r0, [pc, #276]	@ (800eb80 <__multiply+0x150>)
 800ea6c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ea70:	f7fe fbd4 	bl	800d21c <__assert_func>
 800ea74:	f100 0514 	add.w	r5, r0, #20
 800ea78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea7c:	462b      	mov	r3, r5
 800ea7e:	2200      	movs	r2, #0
 800ea80:	4543      	cmp	r3, r8
 800ea82:	d321      	bcc.n	800eac8 <__multiply+0x98>
 800ea84:	f107 0114 	add.w	r1, r7, #20
 800ea88:	f104 0214 	add.w	r2, r4, #20
 800ea8c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ea90:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ea94:	9302      	str	r3, [sp, #8]
 800ea96:	1b13      	subs	r3, r2, r4
 800ea98:	3b15      	subs	r3, #21
 800ea9a:	f023 0303 	bic.w	r3, r3, #3
 800ea9e:	3304      	adds	r3, #4
 800eaa0:	f104 0715 	add.w	r7, r4, #21
 800eaa4:	42ba      	cmp	r2, r7
 800eaa6:	bf38      	it	cc
 800eaa8:	2304      	movcc	r3, #4
 800eaaa:	9301      	str	r3, [sp, #4]
 800eaac:	9b02      	ldr	r3, [sp, #8]
 800eaae:	9103      	str	r1, [sp, #12]
 800eab0:	428b      	cmp	r3, r1
 800eab2:	d80c      	bhi.n	800eace <__multiply+0x9e>
 800eab4:	2e00      	cmp	r6, #0
 800eab6:	dd03      	ble.n	800eac0 <__multiply+0x90>
 800eab8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d05b      	beq.n	800eb78 <__multiply+0x148>
 800eac0:	6106      	str	r6, [r0, #16]
 800eac2:	b005      	add	sp, #20
 800eac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac8:	f843 2b04 	str.w	r2, [r3], #4
 800eacc:	e7d8      	b.n	800ea80 <__multiply+0x50>
 800eace:	f8b1 a000 	ldrh.w	sl, [r1]
 800ead2:	f1ba 0f00 	cmp.w	sl, #0
 800ead6:	d024      	beq.n	800eb22 <__multiply+0xf2>
 800ead8:	f104 0e14 	add.w	lr, r4, #20
 800eadc:	46a9      	mov	r9, r5
 800eade:	f04f 0c00 	mov.w	ip, #0
 800eae2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eae6:	f8d9 3000 	ldr.w	r3, [r9]
 800eaea:	fa1f fb87 	uxth.w	fp, r7
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	fb0a 330b 	mla	r3, sl, fp, r3
 800eaf4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800eaf8:	f8d9 7000 	ldr.w	r7, [r9]
 800eafc:	4463      	add	r3, ip
 800eafe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eb02:	fb0a c70b 	mla	r7, sl, fp, ip
 800eb06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eb10:	4572      	cmp	r2, lr
 800eb12:	f849 3b04 	str.w	r3, [r9], #4
 800eb16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eb1a:	d8e2      	bhi.n	800eae2 <__multiply+0xb2>
 800eb1c:	9b01      	ldr	r3, [sp, #4]
 800eb1e:	f845 c003 	str.w	ip, [r5, r3]
 800eb22:	9b03      	ldr	r3, [sp, #12]
 800eb24:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eb28:	3104      	adds	r1, #4
 800eb2a:	f1b9 0f00 	cmp.w	r9, #0
 800eb2e:	d021      	beq.n	800eb74 <__multiply+0x144>
 800eb30:	682b      	ldr	r3, [r5, #0]
 800eb32:	f104 0c14 	add.w	ip, r4, #20
 800eb36:	46ae      	mov	lr, r5
 800eb38:	f04f 0a00 	mov.w	sl, #0
 800eb3c:	f8bc b000 	ldrh.w	fp, [ip]
 800eb40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800eb44:	fb09 770b 	mla	r7, r9, fp, r7
 800eb48:	4457      	add	r7, sl
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eb50:	f84e 3b04 	str.w	r3, [lr], #4
 800eb54:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eb58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb5c:	f8be 3000 	ldrh.w	r3, [lr]
 800eb60:	fb09 330a 	mla	r3, r9, sl, r3
 800eb64:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800eb68:	4562      	cmp	r2, ip
 800eb6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eb6e:	d8e5      	bhi.n	800eb3c <__multiply+0x10c>
 800eb70:	9f01      	ldr	r7, [sp, #4]
 800eb72:	51eb      	str	r3, [r5, r7]
 800eb74:	3504      	adds	r5, #4
 800eb76:	e799      	b.n	800eaac <__multiply+0x7c>
 800eb78:	3e01      	subs	r6, #1
 800eb7a:	e79b      	b.n	800eab4 <__multiply+0x84>
 800eb7c:	08011109 	.word	0x08011109
 800eb80:	0801117a 	.word	0x0801117a

0800eb84 <__pow5mult>:
 800eb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb88:	4615      	mov	r5, r2
 800eb8a:	f012 0203 	ands.w	r2, r2, #3
 800eb8e:	4607      	mov	r7, r0
 800eb90:	460e      	mov	r6, r1
 800eb92:	d007      	beq.n	800eba4 <__pow5mult+0x20>
 800eb94:	4c25      	ldr	r4, [pc, #148]	@ (800ec2c <__pow5mult+0xa8>)
 800eb96:	3a01      	subs	r2, #1
 800eb98:	2300      	movs	r3, #0
 800eb9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb9e:	f7ff fe55 	bl	800e84c <__multadd>
 800eba2:	4606      	mov	r6, r0
 800eba4:	10ad      	asrs	r5, r5, #2
 800eba6:	d03d      	beq.n	800ec24 <__pow5mult+0xa0>
 800eba8:	69fc      	ldr	r4, [r7, #28]
 800ebaa:	b97c      	cbnz	r4, 800ebcc <__pow5mult+0x48>
 800ebac:	2010      	movs	r0, #16
 800ebae:	f7ff fd23 	bl	800e5f8 <malloc>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	61f8      	str	r0, [r7, #28]
 800ebb6:	b928      	cbnz	r0, 800ebc4 <__pow5mult+0x40>
 800ebb8:	4b1d      	ldr	r3, [pc, #116]	@ (800ec30 <__pow5mult+0xac>)
 800ebba:	481e      	ldr	r0, [pc, #120]	@ (800ec34 <__pow5mult+0xb0>)
 800ebbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ebc0:	f7fe fb2c 	bl	800d21c <__assert_func>
 800ebc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebc8:	6004      	str	r4, [r0, #0]
 800ebca:	60c4      	str	r4, [r0, #12]
 800ebcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ebd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebd4:	b94c      	cbnz	r4, 800ebea <__pow5mult+0x66>
 800ebd6:	f240 2171 	movw	r1, #625	@ 0x271
 800ebda:	4638      	mov	r0, r7
 800ebdc:	f7ff ff12 	bl	800ea04 <__i2b>
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	6003      	str	r3, [r0, #0]
 800ebea:	f04f 0900 	mov.w	r9, #0
 800ebee:	07eb      	lsls	r3, r5, #31
 800ebf0:	d50a      	bpl.n	800ec08 <__pow5mult+0x84>
 800ebf2:	4631      	mov	r1, r6
 800ebf4:	4622      	mov	r2, r4
 800ebf6:	4638      	mov	r0, r7
 800ebf8:	f7ff ff1a 	bl	800ea30 <__multiply>
 800ebfc:	4631      	mov	r1, r6
 800ebfe:	4680      	mov	r8, r0
 800ec00:	4638      	mov	r0, r7
 800ec02:	f7ff fe01 	bl	800e808 <_Bfree>
 800ec06:	4646      	mov	r6, r8
 800ec08:	106d      	asrs	r5, r5, #1
 800ec0a:	d00b      	beq.n	800ec24 <__pow5mult+0xa0>
 800ec0c:	6820      	ldr	r0, [r4, #0]
 800ec0e:	b938      	cbnz	r0, 800ec20 <__pow5mult+0x9c>
 800ec10:	4622      	mov	r2, r4
 800ec12:	4621      	mov	r1, r4
 800ec14:	4638      	mov	r0, r7
 800ec16:	f7ff ff0b 	bl	800ea30 <__multiply>
 800ec1a:	6020      	str	r0, [r4, #0]
 800ec1c:	f8c0 9000 	str.w	r9, [r0]
 800ec20:	4604      	mov	r4, r0
 800ec22:	e7e4      	b.n	800ebee <__pow5mult+0x6a>
 800ec24:	4630      	mov	r0, r6
 800ec26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec2a:	bf00      	nop
 800ec2c:	080111d4 	.word	0x080111d4
 800ec30:	08010fef 	.word	0x08010fef
 800ec34:	0801117a 	.word	0x0801117a

0800ec38 <__lshift>:
 800ec38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec3c:	460c      	mov	r4, r1
 800ec3e:	6849      	ldr	r1, [r1, #4]
 800ec40:	6923      	ldr	r3, [r4, #16]
 800ec42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec46:	68a3      	ldr	r3, [r4, #8]
 800ec48:	4607      	mov	r7, r0
 800ec4a:	4691      	mov	r9, r2
 800ec4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec50:	f108 0601 	add.w	r6, r8, #1
 800ec54:	42b3      	cmp	r3, r6
 800ec56:	db0b      	blt.n	800ec70 <__lshift+0x38>
 800ec58:	4638      	mov	r0, r7
 800ec5a:	f7ff fd95 	bl	800e788 <_Balloc>
 800ec5e:	4605      	mov	r5, r0
 800ec60:	b948      	cbnz	r0, 800ec76 <__lshift+0x3e>
 800ec62:	4602      	mov	r2, r0
 800ec64:	4b28      	ldr	r3, [pc, #160]	@ (800ed08 <__lshift+0xd0>)
 800ec66:	4829      	ldr	r0, [pc, #164]	@ (800ed0c <__lshift+0xd4>)
 800ec68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ec6c:	f7fe fad6 	bl	800d21c <__assert_func>
 800ec70:	3101      	adds	r1, #1
 800ec72:	005b      	lsls	r3, r3, #1
 800ec74:	e7ee      	b.n	800ec54 <__lshift+0x1c>
 800ec76:	2300      	movs	r3, #0
 800ec78:	f100 0114 	add.w	r1, r0, #20
 800ec7c:	f100 0210 	add.w	r2, r0, #16
 800ec80:	4618      	mov	r0, r3
 800ec82:	4553      	cmp	r3, sl
 800ec84:	db33      	blt.n	800ecee <__lshift+0xb6>
 800ec86:	6920      	ldr	r0, [r4, #16]
 800ec88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec8c:	f104 0314 	add.w	r3, r4, #20
 800ec90:	f019 091f 	ands.w	r9, r9, #31
 800ec94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ec9c:	d02b      	beq.n	800ecf6 <__lshift+0xbe>
 800ec9e:	f1c9 0e20 	rsb	lr, r9, #32
 800eca2:	468a      	mov	sl, r1
 800eca4:	2200      	movs	r2, #0
 800eca6:	6818      	ldr	r0, [r3, #0]
 800eca8:	fa00 f009 	lsl.w	r0, r0, r9
 800ecac:	4310      	orrs	r0, r2
 800ecae:	f84a 0b04 	str.w	r0, [sl], #4
 800ecb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecb6:	459c      	cmp	ip, r3
 800ecb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800ecbc:	d8f3      	bhi.n	800eca6 <__lshift+0x6e>
 800ecbe:	ebac 0304 	sub.w	r3, ip, r4
 800ecc2:	3b15      	subs	r3, #21
 800ecc4:	f023 0303 	bic.w	r3, r3, #3
 800ecc8:	3304      	adds	r3, #4
 800ecca:	f104 0015 	add.w	r0, r4, #21
 800ecce:	4584      	cmp	ip, r0
 800ecd0:	bf38      	it	cc
 800ecd2:	2304      	movcc	r3, #4
 800ecd4:	50ca      	str	r2, [r1, r3]
 800ecd6:	b10a      	cbz	r2, 800ecdc <__lshift+0xa4>
 800ecd8:	f108 0602 	add.w	r6, r8, #2
 800ecdc:	3e01      	subs	r6, #1
 800ecde:	4638      	mov	r0, r7
 800ece0:	612e      	str	r6, [r5, #16]
 800ece2:	4621      	mov	r1, r4
 800ece4:	f7ff fd90 	bl	800e808 <_Bfree>
 800ece8:	4628      	mov	r0, r5
 800ecea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecee:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	e7c5      	b.n	800ec82 <__lshift+0x4a>
 800ecf6:	3904      	subs	r1, #4
 800ecf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecfc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed00:	459c      	cmp	ip, r3
 800ed02:	d8f9      	bhi.n	800ecf8 <__lshift+0xc0>
 800ed04:	e7ea      	b.n	800ecdc <__lshift+0xa4>
 800ed06:	bf00      	nop
 800ed08:	08011109 	.word	0x08011109
 800ed0c:	0801117a 	.word	0x0801117a

0800ed10 <__mcmp>:
 800ed10:	690a      	ldr	r2, [r1, #16]
 800ed12:	4603      	mov	r3, r0
 800ed14:	6900      	ldr	r0, [r0, #16]
 800ed16:	1a80      	subs	r0, r0, r2
 800ed18:	b530      	push	{r4, r5, lr}
 800ed1a:	d10e      	bne.n	800ed3a <__mcmp+0x2a>
 800ed1c:	3314      	adds	r3, #20
 800ed1e:	3114      	adds	r1, #20
 800ed20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ed24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ed28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed30:	4295      	cmp	r5, r2
 800ed32:	d003      	beq.n	800ed3c <__mcmp+0x2c>
 800ed34:	d205      	bcs.n	800ed42 <__mcmp+0x32>
 800ed36:	f04f 30ff 	mov.w	r0, #4294967295
 800ed3a:	bd30      	pop	{r4, r5, pc}
 800ed3c:	42a3      	cmp	r3, r4
 800ed3e:	d3f3      	bcc.n	800ed28 <__mcmp+0x18>
 800ed40:	e7fb      	b.n	800ed3a <__mcmp+0x2a>
 800ed42:	2001      	movs	r0, #1
 800ed44:	e7f9      	b.n	800ed3a <__mcmp+0x2a>
	...

0800ed48 <__mdiff>:
 800ed48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed4c:	4689      	mov	r9, r1
 800ed4e:	4606      	mov	r6, r0
 800ed50:	4611      	mov	r1, r2
 800ed52:	4648      	mov	r0, r9
 800ed54:	4614      	mov	r4, r2
 800ed56:	f7ff ffdb 	bl	800ed10 <__mcmp>
 800ed5a:	1e05      	subs	r5, r0, #0
 800ed5c:	d112      	bne.n	800ed84 <__mdiff+0x3c>
 800ed5e:	4629      	mov	r1, r5
 800ed60:	4630      	mov	r0, r6
 800ed62:	f7ff fd11 	bl	800e788 <_Balloc>
 800ed66:	4602      	mov	r2, r0
 800ed68:	b928      	cbnz	r0, 800ed76 <__mdiff+0x2e>
 800ed6a:	4b3f      	ldr	r3, [pc, #252]	@ (800ee68 <__mdiff+0x120>)
 800ed6c:	f240 2137 	movw	r1, #567	@ 0x237
 800ed70:	483e      	ldr	r0, [pc, #248]	@ (800ee6c <__mdiff+0x124>)
 800ed72:	f7fe fa53 	bl	800d21c <__assert_func>
 800ed76:	2301      	movs	r3, #1
 800ed78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed7c:	4610      	mov	r0, r2
 800ed7e:	b003      	add	sp, #12
 800ed80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed84:	bfbc      	itt	lt
 800ed86:	464b      	movlt	r3, r9
 800ed88:	46a1      	movlt	r9, r4
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ed90:	bfba      	itte	lt
 800ed92:	461c      	movlt	r4, r3
 800ed94:	2501      	movlt	r5, #1
 800ed96:	2500      	movge	r5, #0
 800ed98:	f7ff fcf6 	bl	800e788 <_Balloc>
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	b918      	cbnz	r0, 800eda8 <__mdiff+0x60>
 800eda0:	4b31      	ldr	r3, [pc, #196]	@ (800ee68 <__mdiff+0x120>)
 800eda2:	f240 2145 	movw	r1, #581	@ 0x245
 800eda6:	e7e3      	b.n	800ed70 <__mdiff+0x28>
 800eda8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800edac:	6926      	ldr	r6, [r4, #16]
 800edae:	60c5      	str	r5, [r0, #12]
 800edb0:	f109 0310 	add.w	r3, r9, #16
 800edb4:	f109 0514 	add.w	r5, r9, #20
 800edb8:	f104 0e14 	add.w	lr, r4, #20
 800edbc:	f100 0b14 	add.w	fp, r0, #20
 800edc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800edc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800edc8:	9301      	str	r3, [sp, #4]
 800edca:	46d9      	mov	r9, fp
 800edcc:	f04f 0c00 	mov.w	ip, #0
 800edd0:	9b01      	ldr	r3, [sp, #4]
 800edd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800edd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800edda:	9301      	str	r3, [sp, #4]
 800eddc:	fa1f f38a 	uxth.w	r3, sl
 800ede0:	4619      	mov	r1, r3
 800ede2:	b283      	uxth	r3, r0
 800ede4:	1acb      	subs	r3, r1, r3
 800ede6:	0c00      	lsrs	r0, r0, #16
 800ede8:	4463      	add	r3, ip
 800edea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800edee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800edf8:	4576      	cmp	r6, lr
 800edfa:	f849 3b04 	str.w	r3, [r9], #4
 800edfe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee02:	d8e5      	bhi.n	800edd0 <__mdiff+0x88>
 800ee04:	1b33      	subs	r3, r6, r4
 800ee06:	3b15      	subs	r3, #21
 800ee08:	f023 0303 	bic.w	r3, r3, #3
 800ee0c:	3415      	adds	r4, #21
 800ee0e:	3304      	adds	r3, #4
 800ee10:	42a6      	cmp	r6, r4
 800ee12:	bf38      	it	cc
 800ee14:	2304      	movcc	r3, #4
 800ee16:	441d      	add	r5, r3
 800ee18:	445b      	add	r3, fp
 800ee1a:	461e      	mov	r6, r3
 800ee1c:	462c      	mov	r4, r5
 800ee1e:	4544      	cmp	r4, r8
 800ee20:	d30e      	bcc.n	800ee40 <__mdiff+0xf8>
 800ee22:	f108 0103 	add.w	r1, r8, #3
 800ee26:	1b49      	subs	r1, r1, r5
 800ee28:	f021 0103 	bic.w	r1, r1, #3
 800ee2c:	3d03      	subs	r5, #3
 800ee2e:	45a8      	cmp	r8, r5
 800ee30:	bf38      	it	cc
 800ee32:	2100      	movcc	r1, #0
 800ee34:	440b      	add	r3, r1
 800ee36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee3a:	b191      	cbz	r1, 800ee62 <__mdiff+0x11a>
 800ee3c:	6117      	str	r7, [r2, #16]
 800ee3e:	e79d      	b.n	800ed7c <__mdiff+0x34>
 800ee40:	f854 1b04 	ldr.w	r1, [r4], #4
 800ee44:	46e6      	mov	lr, ip
 800ee46:	0c08      	lsrs	r0, r1, #16
 800ee48:	fa1c fc81 	uxtah	ip, ip, r1
 800ee4c:	4471      	add	r1, lr
 800ee4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ee52:	b289      	uxth	r1, r1
 800ee54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ee58:	f846 1b04 	str.w	r1, [r6], #4
 800ee5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee60:	e7dd      	b.n	800ee1e <__mdiff+0xd6>
 800ee62:	3f01      	subs	r7, #1
 800ee64:	e7e7      	b.n	800ee36 <__mdiff+0xee>
 800ee66:	bf00      	nop
 800ee68:	08011109 	.word	0x08011109
 800ee6c:	0801117a 	.word	0x0801117a

0800ee70 <__ulp>:
 800ee70:	b082      	sub	sp, #8
 800ee72:	ed8d 0b00 	vstr	d0, [sp]
 800ee76:	9a01      	ldr	r2, [sp, #4]
 800ee78:	4b0f      	ldr	r3, [pc, #60]	@ (800eeb8 <__ulp+0x48>)
 800ee7a:	4013      	ands	r3, r2
 800ee7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	dc08      	bgt.n	800ee96 <__ulp+0x26>
 800ee84:	425b      	negs	r3, r3
 800ee86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ee8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ee8e:	da04      	bge.n	800ee9a <__ulp+0x2a>
 800ee90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ee94:	4113      	asrs	r3, r2
 800ee96:	2200      	movs	r2, #0
 800ee98:	e008      	b.n	800eeac <__ulp+0x3c>
 800ee9a:	f1a2 0314 	sub.w	r3, r2, #20
 800ee9e:	2b1e      	cmp	r3, #30
 800eea0:	bfda      	itte	le
 800eea2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800eea6:	40da      	lsrle	r2, r3
 800eea8:	2201      	movgt	r2, #1
 800eeaa:	2300      	movs	r3, #0
 800eeac:	4619      	mov	r1, r3
 800eeae:	4610      	mov	r0, r2
 800eeb0:	ec41 0b10 	vmov	d0, r0, r1
 800eeb4:	b002      	add	sp, #8
 800eeb6:	4770      	bx	lr
 800eeb8:	7ff00000 	.word	0x7ff00000

0800eebc <__b2d>:
 800eebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec0:	6906      	ldr	r6, [r0, #16]
 800eec2:	f100 0814 	add.w	r8, r0, #20
 800eec6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800eeca:	1f37      	subs	r7, r6, #4
 800eecc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eed0:	4610      	mov	r0, r2
 800eed2:	f7ff fd4b 	bl	800e96c <__hi0bits>
 800eed6:	f1c0 0320 	rsb	r3, r0, #32
 800eeda:	280a      	cmp	r0, #10
 800eedc:	600b      	str	r3, [r1, #0]
 800eede:	491b      	ldr	r1, [pc, #108]	@ (800ef4c <__b2d+0x90>)
 800eee0:	dc15      	bgt.n	800ef0e <__b2d+0x52>
 800eee2:	f1c0 0c0b 	rsb	ip, r0, #11
 800eee6:	fa22 f30c 	lsr.w	r3, r2, ip
 800eeea:	45b8      	cmp	r8, r7
 800eeec:	ea43 0501 	orr.w	r5, r3, r1
 800eef0:	bf34      	ite	cc
 800eef2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800eef6:	2300      	movcs	r3, #0
 800eef8:	3015      	adds	r0, #21
 800eefa:	fa02 f000 	lsl.w	r0, r2, r0
 800eefe:	fa23 f30c 	lsr.w	r3, r3, ip
 800ef02:	4303      	orrs	r3, r0
 800ef04:	461c      	mov	r4, r3
 800ef06:	ec45 4b10 	vmov	d0, r4, r5
 800ef0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef0e:	45b8      	cmp	r8, r7
 800ef10:	bf3a      	itte	cc
 800ef12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ef16:	f1a6 0708 	subcc.w	r7, r6, #8
 800ef1a:	2300      	movcs	r3, #0
 800ef1c:	380b      	subs	r0, #11
 800ef1e:	d012      	beq.n	800ef46 <__b2d+0x8a>
 800ef20:	f1c0 0120 	rsb	r1, r0, #32
 800ef24:	fa23 f401 	lsr.w	r4, r3, r1
 800ef28:	4082      	lsls	r2, r0
 800ef2a:	4322      	orrs	r2, r4
 800ef2c:	4547      	cmp	r7, r8
 800ef2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ef32:	bf8c      	ite	hi
 800ef34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ef38:	2200      	movls	r2, #0
 800ef3a:	4083      	lsls	r3, r0
 800ef3c:	40ca      	lsrs	r2, r1
 800ef3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ef42:	4313      	orrs	r3, r2
 800ef44:	e7de      	b.n	800ef04 <__b2d+0x48>
 800ef46:	ea42 0501 	orr.w	r5, r2, r1
 800ef4a:	e7db      	b.n	800ef04 <__b2d+0x48>
 800ef4c:	3ff00000 	.word	0x3ff00000

0800ef50 <__d2b>:
 800ef50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef54:	460f      	mov	r7, r1
 800ef56:	2101      	movs	r1, #1
 800ef58:	ec59 8b10 	vmov	r8, r9, d0
 800ef5c:	4616      	mov	r6, r2
 800ef5e:	f7ff fc13 	bl	800e788 <_Balloc>
 800ef62:	4604      	mov	r4, r0
 800ef64:	b930      	cbnz	r0, 800ef74 <__d2b+0x24>
 800ef66:	4602      	mov	r2, r0
 800ef68:	4b23      	ldr	r3, [pc, #140]	@ (800eff8 <__d2b+0xa8>)
 800ef6a:	4824      	ldr	r0, [pc, #144]	@ (800effc <__d2b+0xac>)
 800ef6c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ef70:	f7fe f954 	bl	800d21c <__assert_func>
 800ef74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ef78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef7c:	b10d      	cbz	r5, 800ef82 <__d2b+0x32>
 800ef7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ef82:	9301      	str	r3, [sp, #4]
 800ef84:	f1b8 0300 	subs.w	r3, r8, #0
 800ef88:	d023      	beq.n	800efd2 <__d2b+0x82>
 800ef8a:	4668      	mov	r0, sp
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	f7ff fd0c 	bl	800e9aa <__lo0bits>
 800ef92:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ef96:	b1d0      	cbz	r0, 800efce <__d2b+0x7e>
 800ef98:	f1c0 0320 	rsb	r3, r0, #32
 800ef9c:	fa02 f303 	lsl.w	r3, r2, r3
 800efa0:	430b      	orrs	r3, r1
 800efa2:	40c2      	lsrs	r2, r0
 800efa4:	6163      	str	r3, [r4, #20]
 800efa6:	9201      	str	r2, [sp, #4]
 800efa8:	9b01      	ldr	r3, [sp, #4]
 800efaa:	61a3      	str	r3, [r4, #24]
 800efac:	2b00      	cmp	r3, #0
 800efae:	bf0c      	ite	eq
 800efb0:	2201      	moveq	r2, #1
 800efb2:	2202      	movne	r2, #2
 800efb4:	6122      	str	r2, [r4, #16]
 800efb6:	b1a5      	cbz	r5, 800efe2 <__d2b+0x92>
 800efb8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800efbc:	4405      	add	r5, r0
 800efbe:	603d      	str	r5, [r7, #0]
 800efc0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800efc4:	6030      	str	r0, [r6, #0]
 800efc6:	4620      	mov	r0, r4
 800efc8:	b003      	add	sp, #12
 800efca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efce:	6161      	str	r1, [r4, #20]
 800efd0:	e7ea      	b.n	800efa8 <__d2b+0x58>
 800efd2:	a801      	add	r0, sp, #4
 800efd4:	f7ff fce9 	bl	800e9aa <__lo0bits>
 800efd8:	9b01      	ldr	r3, [sp, #4]
 800efda:	6163      	str	r3, [r4, #20]
 800efdc:	3020      	adds	r0, #32
 800efde:	2201      	movs	r2, #1
 800efe0:	e7e8      	b.n	800efb4 <__d2b+0x64>
 800efe2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800efe6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800efea:	6038      	str	r0, [r7, #0]
 800efec:	6918      	ldr	r0, [r3, #16]
 800efee:	f7ff fcbd 	bl	800e96c <__hi0bits>
 800eff2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eff6:	e7e5      	b.n	800efc4 <__d2b+0x74>
 800eff8:	08011109 	.word	0x08011109
 800effc:	0801117a 	.word	0x0801117a

0800f000 <__ratio>:
 800f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f004:	b085      	sub	sp, #20
 800f006:	e9cd 1000 	strd	r1, r0, [sp]
 800f00a:	a902      	add	r1, sp, #8
 800f00c:	f7ff ff56 	bl	800eebc <__b2d>
 800f010:	9800      	ldr	r0, [sp, #0]
 800f012:	a903      	add	r1, sp, #12
 800f014:	ec55 4b10 	vmov	r4, r5, d0
 800f018:	f7ff ff50 	bl	800eebc <__b2d>
 800f01c:	9b01      	ldr	r3, [sp, #4]
 800f01e:	6919      	ldr	r1, [r3, #16]
 800f020:	9b00      	ldr	r3, [sp, #0]
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	1ac9      	subs	r1, r1, r3
 800f026:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f02a:	1a9b      	subs	r3, r3, r2
 800f02c:	ec5b ab10 	vmov	sl, fp, d0
 800f030:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f034:	2b00      	cmp	r3, #0
 800f036:	bfce      	itee	gt
 800f038:	462a      	movgt	r2, r5
 800f03a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f03e:	465a      	movle	r2, fp
 800f040:	462f      	mov	r7, r5
 800f042:	46d9      	mov	r9, fp
 800f044:	bfcc      	ite	gt
 800f046:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f04a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f04e:	464b      	mov	r3, r9
 800f050:	4652      	mov	r2, sl
 800f052:	4620      	mov	r0, r4
 800f054:	4639      	mov	r1, r7
 800f056:	f7f1 fc19 	bl	800088c <__aeabi_ddiv>
 800f05a:	ec41 0b10 	vmov	d0, r0, r1
 800f05e:	b005      	add	sp, #20
 800f060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f064 <__copybits>:
 800f064:	3901      	subs	r1, #1
 800f066:	b570      	push	{r4, r5, r6, lr}
 800f068:	1149      	asrs	r1, r1, #5
 800f06a:	6914      	ldr	r4, [r2, #16]
 800f06c:	3101      	adds	r1, #1
 800f06e:	f102 0314 	add.w	r3, r2, #20
 800f072:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f076:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f07a:	1f05      	subs	r5, r0, #4
 800f07c:	42a3      	cmp	r3, r4
 800f07e:	d30c      	bcc.n	800f09a <__copybits+0x36>
 800f080:	1aa3      	subs	r3, r4, r2
 800f082:	3b11      	subs	r3, #17
 800f084:	f023 0303 	bic.w	r3, r3, #3
 800f088:	3211      	adds	r2, #17
 800f08a:	42a2      	cmp	r2, r4
 800f08c:	bf88      	it	hi
 800f08e:	2300      	movhi	r3, #0
 800f090:	4418      	add	r0, r3
 800f092:	2300      	movs	r3, #0
 800f094:	4288      	cmp	r0, r1
 800f096:	d305      	bcc.n	800f0a4 <__copybits+0x40>
 800f098:	bd70      	pop	{r4, r5, r6, pc}
 800f09a:	f853 6b04 	ldr.w	r6, [r3], #4
 800f09e:	f845 6f04 	str.w	r6, [r5, #4]!
 800f0a2:	e7eb      	b.n	800f07c <__copybits+0x18>
 800f0a4:	f840 3b04 	str.w	r3, [r0], #4
 800f0a8:	e7f4      	b.n	800f094 <__copybits+0x30>

0800f0aa <__any_on>:
 800f0aa:	f100 0214 	add.w	r2, r0, #20
 800f0ae:	6900      	ldr	r0, [r0, #16]
 800f0b0:	114b      	asrs	r3, r1, #5
 800f0b2:	4298      	cmp	r0, r3
 800f0b4:	b510      	push	{r4, lr}
 800f0b6:	db11      	blt.n	800f0dc <__any_on+0x32>
 800f0b8:	dd0a      	ble.n	800f0d0 <__any_on+0x26>
 800f0ba:	f011 011f 	ands.w	r1, r1, #31
 800f0be:	d007      	beq.n	800f0d0 <__any_on+0x26>
 800f0c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f0c4:	fa24 f001 	lsr.w	r0, r4, r1
 800f0c8:	fa00 f101 	lsl.w	r1, r0, r1
 800f0cc:	428c      	cmp	r4, r1
 800f0ce:	d10b      	bne.n	800f0e8 <__any_on+0x3e>
 800f0d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d803      	bhi.n	800f0e0 <__any_on+0x36>
 800f0d8:	2000      	movs	r0, #0
 800f0da:	bd10      	pop	{r4, pc}
 800f0dc:	4603      	mov	r3, r0
 800f0de:	e7f7      	b.n	800f0d0 <__any_on+0x26>
 800f0e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f0e4:	2900      	cmp	r1, #0
 800f0e6:	d0f5      	beq.n	800f0d4 <__any_on+0x2a>
 800f0e8:	2001      	movs	r0, #1
 800f0ea:	e7f6      	b.n	800f0da <__any_on+0x30>

0800f0ec <_strtol_l.constprop.0>:
 800f0ec:	2b24      	cmp	r3, #36	@ 0x24
 800f0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0f2:	4686      	mov	lr, r0
 800f0f4:	4690      	mov	r8, r2
 800f0f6:	d801      	bhi.n	800f0fc <_strtol_l.constprop.0+0x10>
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d106      	bne.n	800f10a <_strtol_l.constprop.0+0x1e>
 800f0fc:	f7fe f842 	bl	800d184 <__errno>
 800f100:	2316      	movs	r3, #22
 800f102:	6003      	str	r3, [r0, #0]
 800f104:	2000      	movs	r0, #0
 800f106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f10a:	4834      	ldr	r0, [pc, #208]	@ (800f1dc <_strtol_l.constprop.0+0xf0>)
 800f10c:	460d      	mov	r5, r1
 800f10e:	462a      	mov	r2, r5
 800f110:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f114:	5d06      	ldrb	r6, [r0, r4]
 800f116:	f016 0608 	ands.w	r6, r6, #8
 800f11a:	d1f8      	bne.n	800f10e <_strtol_l.constprop.0+0x22>
 800f11c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f11e:	d12d      	bne.n	800f17c <_strtol_l.constprop.0+0x90>
 800f120:	782c      	ldrb	r4, [r5, #0]
 800f122:	2601      	movs	r6, #1
 800f124:	1c95      	adds	r5, r2, #2
 800f126:	f033 0210 	bics.w	r2, r3, #16
 800f12a:	d109      	bne.n	800f140 <_strtol_l.constprop.0+0x54>
 800f12c:	2c30      	cmp	r4, #48	@ 0x30
 800f12e:	d12a      	bne.n	800f186 <_strtol_l.constprop.0+0x9a>
 800f130:	782a      	ldrb	r2, [r5, #0]
 800f132:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f136:	2a58      	cmp	r2, #88	@ 0x58
 800f138:	d125      	bne.n	800f186 <_strtol_l.constprop.0+0x9a>
 800f13a:	786c      	ldrb	r4, [r5, #1]
 800f13c:	2310      	movs	r3, #16
 800f13e:	3502      	adds	r5, #2
 800f140:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f144:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f148:	2200      	movs	r2, #0
 800f14a:	fbbc f9f3 	udiv	r9, ip, r3
 800f14e:	4610      	mov	r0, r2
 800f150:	fb03 ca19 	mls	sl, r3, r9, ip
 800f154:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f158:	2f09      	cmp	r7, #9
 800f15a:	d81b      	bhi.n	800f194 <_strtol_l.constprop.0+0xa8>
 800f15c:	463c      	mov	r4, r7
 800f15e:	42a3      	cmp	r3, r4
 800f160:	dd27      	ble.n	800f1b2 <_strtol_l.constprop.0+0xc6>
 800f162:	1c57      	adds	r7, r2, #1
 800f164:	d007      	beq.n	800f176 <_strtol_l.constprop.0+0x8a>
 800f166:	4581      	cmp	r9, r0
 800f168:	d320      	bcc.n	800f1ac <_strtol_l.constprop.0+0xc0>
 800f16a:	d101      	bne.n	800f170 <_strtol_l.constprop.0+0x84>
 800f16c:	45a2      	cmp	sl, r4
 800f16e:	db1d      	blt.n	800f1ac <_strtol_l.constprop.0+0xc0>
 800f170:	fb00 4003 	mla	r0, r0, r3, r4
 800f174:	2201      	movs	r2, #1
 800f176:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f17a:	e7eb      	b.n	800f154 <_strtol_l.constprop.0+0x68>
 800f17c:	2c2b      	cmp	r4, #43	@ 0x2b
 800f17e:	bf04      	itt	eq
 800f180:	782c      	ldrbeq	r4, [r5, #0]
 800f182:	1c95      	addeq	r5, r2, #2
 800f184:	e7cf      	b.n	800f126 <_strtol_l.constprop.0+0x3a>
 800f186:	2b00      	cmp	r3, #0
 800f188:	d1da      	bne.n	800f140 <_strtol_l.constprop.0+0x54>
 800f18a:	2c30      	cmp	r4, #48	@ 0x30
 800f18c:	bf0c      	ite	eq
 800f18e:	2308      	moveq	r3, #8
 800f190:	230a      	movne	r3, #10
 800f192:	e7d5      	b.n	800f140 <_strtol_l.constprop.0+0x54>
 800f194:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f198:	2f19      	cmp	r7, #25
 800f19a:	d801      	bhi.n	800f1a0 <_strtol_l.constprop.0+0xb4>
 800f19c:	3c37      	subs	r4, #55	@ 0x37
 800f19e:	e7de      	b.n	800f15e <_strtol_l.constprop.0+0x72>
 800f1a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f1a4:	2f19      	cmp	r7, #25
 800f1a6:	d804      	bhi.n	800f1b2 <_strtol_l.constprop.0+0xc6>
 800f1a8:	3c57      	subs	r4, #87	@ 0x57
 800f1aa:	e7d8      	b.n	800f15e <_strtol_l.constprop.0+0x72>
 800f1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f1b0:	e7e1      	b.n	800f176 <_strtol_l.constprop.0+0x8a>
 800f1b2:	1c53      	adds	r3, r2, #1
 800f1b4:	d108      	bne.n	800f1c8 <_strtol_l.constprop.0+0xdc>
 800f1b6:	2322      	movs	r3, #34	@ 0x22
 800f1b8:	f8ce 3000 	str.w	r3, [lr]
 800f1bc:	4660      	mov	r0, ip
 800f1be:	f1b8 0f00 	cmp.w	r8, #0
 800f1c2:	d0a0      	beq.n	800f106 <_strtol_l.constprop.0+0x1a>
 800f1c4:	1e69      	subs	r1, r5, #1
 800f1c6:	e006      	b.n	800f1d6 <_strtol_l.constprop.0+0xea>
 800f1c8:	b106      	cbz	r6, 800f1cc <_strtol_l.constprop.0+0xe0>
 800f1ca:	4240      	negs	r0, r0
 800f1cc:	f1b8 0f00 	cmp.w	r8, #0
 800f1d0:	d099      	beq.n	800f106 <_strtol_l.constprop.0+0x1a>
 800f1d2:	2a00      	cmp	r2, #0
 800f1d4:	d1f6      	bne.n	800f1c4 <_strtol_l.constprop.0+0xd8>
 800f1d6:	f8c8 1000 	str.w	r1, [r8]
 800f1da:	e794      	b.n	800f106 <_strtol_l.constprop.0+0x1a>
 800f1dc:	080112d1 	.word	0x080112d1

0800f1e0 <_strtol_r>:
 800f1e0:	f7ff bf84 	b.w	800f0ec <_strtol_l.constprop.0>

0800f1e4 <__ascii_wctomb>:
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	4608      	mov	r0, r1
 800f1e8:	b141      	cbz	r1, 800f1fc <__ascii_wctomb+0x18>
 800f1ea:	2aff      	cmp	r2, #255	@ 0xff
 800f1ec:	d904      	bls.n	800f1f8 <__ascii_wctomb+0x14>
 800f1ee:	228a      	movs	r2, #138	@ 0x8a
 800f1f0:	601a      	str	r2, [r3, #0]
 800f1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f6:	4770      	bx	lr
 800f1f8:	700a      	strb	r2, [r1, #0]
 800f1fa:	2001      	movs	r0, #1
 800f1fc:	4770      	bx	lr

0800f1fe <__ssputs_r>:
 800f1fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f202:	688e      	ldr	r6, [r1, #8]
 800f204:	461f      	mov	r7, r3
 800f206:	42be      	cmp	r6, r7
 800f208:	680b      	ldr	r3, [r1, #0]
 800f20a:	4682      	mov	sl, r0
 800f20c:	460c      	mov	r4, r1
 800f20e:	4690      	mov	r8, r2
 800f210:	d82d      	bhi.n	800f26e <__ssputs_r+0x70>
 800f212:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f216:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f21a:	d026      	beq.n	800f26a <__ssputs_r+0x6c>
 800f21c:	6965      	ldr	r5, [r4, #20]
 800f21e:	6909      	ldr	r1, [r1, #16]
 800f220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f224:	eba3 0901 	sub.w	r9, r3, r1
 800f228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f22c:	1c7b      	adds	r3, r7, #1
 800f22e:	444b      	add	r3, r9
 800f230:	106d      	asrs	r5, r5, #1
 800f232:	429d      	cmp	r5, r3
 800f234:	bf38      	it	cc
 800f236:	461d      	movcc	r5, r3
 800f238:	0553      	lsls	r3, r2, #21
 800f23a:	d527      	bpl.n	800f28c <__ssputs_r+0x8e>
 800f23c:	4629      	mov	r1, r5
 800f23e:	f7ff fa05 	bl	800e64c <_malloc_r>
 800f242:	4606      	mov	r6, r0
 800f244:	b360      	cbz	r0, 800f2a0 <__ssputs_r+0xa2>
 800f246:	6921      	ldr	r1, [r4, #16]
 800f248:	464a      	mov	r2, r9
 800f24a:	f7fd ffc9 	bl	800d1e0 <memcpy>
 800f24e:	89a3      	ldrh	r3, [r4, #12]
 800f250:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f258:	81a3      	strh	r3, [r4, #12]
 800f25a:	6126      	str	r6, [r4, #16]
 800f25c:	6165      	str	r5, [r4, #20]
 800f25e:	444e      	add	r6, r9
 800f260:	eba5 0509 	sub.w	r5, r5, r9
 800f264:	6026      	str	r6, [r4, #0]
 800f266:	60a5      	str	r5, [r4, #8]
 800f268:	463e      	mov	r6, r7
 800f26a:	42be      	cmp	r6, r7
 800f26c:	d900      	bls.n	800f270 <__ssputs_r+0x72>
 800f26e:	463e      	mov	r6, r7
 800f270:	6820      	ldr	r0, [r4, #0]
 800f272:	4632      	mov	r2, r6
 800f274:	4641      	mov	r1, r8
 800f276:	f000 fb1d 	bl	800f8b4 <memmove>
 800f27a:	68a3      	ldr	r3, [r4, #8]
 800f27c:	1b9b      	subs	r3, r3, r6
 800f27e:	60a3      	str	r3, [r4, #8]
 800f280:	6823      	ldr	r3, [r4, #0]
 800f282:	4433      	add	r3, r6
 800f284:	6023      	str	r3, [r4, #0]
 800f286:	2000      	movs	r0, #0
 800f288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f28c:	462a      	mov	r2, r5
 800f28e:	f000 fb78 	bl	800f982 <_realloc_r>
 800f292:	4606      	mov	r6, r0
 800f294:	2800      	cmp	r0, #0
 800f296:	d1e0      	bne.n	800f25a <__ssputs_r+0x5c>
 800f298:	6921      	ldr	r1, [r4, #16]
 800f29a:	4650      	mov	r0, sl
 800f29c:	f7fe fe28 	bl	800def0 <_free_r>
 800f2a0:	230c      	movs	r3, #12
 800f2a2:	f8ca 3000 	str.w	r3, [sl]
 800f2a6:	89a3      	ldrh	r3, [r4, #12]
 800f2a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2ac:	81a3      	strh	r3, [r4, #12]
 800f2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b2:	e7e9      	b.n	800f288 <__ssputs_r+0x8a>

0800f2b4 <_svfiprintf_r>:
 800f2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b8:	4698      	mov	r8, r3
 800f2ba:	898b      	ldrh	r3, [r1, #12]
 800f2bc:	061b      	lsls	r3, r3, #24
 800f2be:	b09d      	sub	sp, #116	@ 0x74
 800f2c0:	4607      	mov	r7, r0
 800f2c2:	460d      	mov	r5, r1
 800f2c4:	4614      	mov	r4, r2
 800f2c6:	d510      	bpl.n	800f2ea <_svfiprintf_r+0x36>
 800f2c8:	690b      	ldr	r3, [r1, #16]
 800f2ca:	b973      	cbnz	r3, 800f2ea <_svfiprintf_r+0x36>
 800f2cc:	2140      	movs	r1, #64	@ 0x40
 800f2ce:	f7ff f9bd 	bl	800e64c <_malloc_r>
 800f2d2:	6028      	str	r0, [r5, #0]
 800f2d4:	6128      	str	r0, [r5, #16]
 800f2d6:	b930      	cbnz	r0, 800f2e6 <_svfiprintf_r+0x32>
 800f2d8:	230c      	movs	r3, #12
 800f2da:	603b      	str	r3, [r7, #0]
 800f2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e0:	b01d      	add	sp, #116	@ 0x74
 800f2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2e6:	2340      	movs	r3, #64	@ 0x40
 800f2e8:	616b      	str	r3, [r5, #20]
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2ee:	2320      	movs	r3, #32
 800f2f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2f8:	2330      	movs	r3, #48	@ 0x30
 800f2fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f498 <_svfiprintf_r+0x1e4>
 800f2fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f302:	f04f 0901 	mov.w	r9, #1
 800f306:	4623      	mov	r3, r4
 800f308:	469a      	mov	sl, r3
 800f30a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f30e:	b10a      	cbz	r2, 800f314 <_svfiprintf_r+0x60>
 800f310:	2a25      	cmp	r2, #37	@ 0x25
 800f312:	d1f9      	bne.n	800f308 <_svfiprintf_r+0x54>
 800f314:	ebba 0b04 	subs.w	fp, sl, r4
 800f318:	d00b      	beq.n	800f332 <_svfiprintf_r+0x7e>
 800f31a:	465b      	mov	r3, fp
 800f31c:	4622      	mov	r2, r4
 800f31e:	4629      	mov	r1, r5
 800f320:	4638      	mov	r0, r7
 800f322:	f7ff ff6c 	bl	800f1fe <__ssputs_r>
 800f326:	3001      	adds	r0, #1
 800f328:	f000 80a7 	beq.w	800f47a <_svfiprintf_r+0x1c6>
 800f32c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f32e:	445a      	add	r2, fp
 800f330:	9209      	str	r2, [sp, #36]	@ 0x24
 800f332:	f89a 3000 	ldrb.w	r3, [sl]
 800f336:	2b00      	cmp	r3, #0
 800f338:	f000 809f 	beq.w	800f47a <_svfiprintf_r+0x1c6>
 800f33c:	2300      	movs	r3, #0
 800f33e:	f04f 32ff 	mov.w	r2, #4294967295
 800f342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f346:	f10a 0a01 	add.w	sl, sl, #1
 800f34a:	9304      	str	r3, [sp, #16]
 800f34c:	9307      	str	r3, [sp, #28]
 800f34e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f352:	931a      	str	r3, [sp, #104]	@ 0x68
 800f354:	4654      	mov	r4, sl
 800f356:	2205      	movs	r2, #5
 800f358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f35c:	484e      	ldr	r0, [pc, #312]	@ (800f498 <_svfiprintf_r+0x1e4>)
 800f35e:	f7f0 ff57 	bl	8000210 <memchr>
 800f362:	9a04      	ldr	r2, [sp, #16]
 800f364:	b9d8      	cbnz	r0, 800f39e <_svfiprintf_r+0xea>
 800f366:	06d0      	lsls	r0, r2, #27
 800f368:	bf44      	itt	mi
 800f36a:	2320      	movmi	r3, #32
 800f36c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f370:	0711      	lsls	r1, r2, #28
 800f372:	bf44      	itt	mi
 800f374:	232b      	movmi	r3, #43	@ 0x2b
 800f376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f37a:	f89a 3000 	ldrb.w	r3, [sl]
 800f37e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f380:	d015      	beq.n	800f3ae <_svfiprintf_r+0xfa>
 800f382:	9a07      	ldr	r2, [sp, #28]
 800f384:	4654      	mov	r4, sl
 800f386:	2000      	movs	r0, #0
 800f388:	f04f 0c0a 	mov.w	ip, #10
 800f38c:	4621      	mov	r1, r4
 800f38e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f392:	3b30      	subs	r3, #48	@ 0x30
 800f394:	2b09      	cmp	r3, #9
 800f396:	d94b      	bls.n	800f430 <_svfiprintf_r+0x17c>
 800f398:	b1b0      	cbz	r0, 800f3c8 <_svfiprintf_r+0x114>
 800f39a:	9207      	str	r2, [sp, #28]
 800f39c:	e014      	b.n	800f3c8 <_svfiprintf_r+0x114>
 800f39e:	eba0 0308 	sub.w	r3, r0, r8
 800f3a2:	fa09 f303 	lsl.w	r3, r9, r3
 800f3a6:	4313      	orrs	r3, r2
 800f3a8:	9304      	str	r3, [sp, #16]
 800f3aa:	46a2      	mov	sl, r4
 800f3ac:	e7d2      	b.n	800f354 <_svfiprintf_r+0xa0>
 800f3ae:	9b03      	ldr	r3, [sp, #12]
 800f3b0:	1d19      	adds	r1, r3, #4
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	9103      	str	r1, [sp, #12]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	bfbb      	ittet	lt
 800f3ba:	425b      	neglt	r3, r3
 800f3bc:	f042 0202 	orrlt.w	r2, r2, #2
 800f3c0:	9307      	strge	r3, [sp, #28]
 800f3c2:	9307      	strlt	r3, [sp, #28]
 800f3c4:	bfb8      	it	lt
 800f3c6:	9204      	strlt	r2, [sp, #16]
 800f3c8:	7823      	ldrb	r3, [r4, #0]
 800f3ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3cc:	d10a      	bne.n	800f3e4 <_svfiprintf_r+0x130>
 800f3ce:	7863      	ldrb	r3, [r4, #1]
 800f3d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3d2:	d132      	bne.n	800f43a <_svfiprintf_r+0x186>
 800f3d4:	9b03      	ldr	r3, [sp, #12]
 800f3d6:	1d1a      	adds	r2, r3, #4
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	9203      	str	r2, [sp, #12]
 800f3dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3e0:	3402      	adds	r4, #2
 800f3e2:	9305      	str	r3, [sp, #20]
 800f3e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f4a8 <_svfiprintf_r+0x1f4>
 800f3e8:	7821      	ldrb	r1, [r4, #0]
 800f3ea:	2203      	movs	r2, #3
 800f3ec:	4650      	mov	r0, sl
 800f3ee:	f7f0 ff0f 	bl	8000210 <memchr>
 800f3f2:	b138      	cbz	r0, 800f404 <_svfiprintf_r+0x150>
 800f3f4:	9b04      	ldr	r3, [sp, #16]
 800f3f6:	eba0 000a 	sub.w	r0, r0, sl
 800f3fa:	2240      	movs	r2, #64	@ 0x40
 800f3fc:	4082      	lsls	r2, r0
 800f3fe:	4313      	orrs	r3, r2
 800f400:	3401      	adds	r4, #1
 800f402:	9304      	str	r3, [sp, #16]
 800f404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f408:	4824      	ldr	r0, [pc, #144]	@ (800f49c <_svfiprintf_r+0x1e8>)
 800f40a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f40e:	2206      	movs	r2, #6
 800f410:	f7f0 fefe 	bl	8000210 <memchr>
 800f414:	2800      	cmp	r0, #0
 800f416:	d036      	beq.n	800f486 <_svfiprintf_r+0x1d2>
 800f418:	4b21      	ldr	r3, [pc, #132]	@ (800f4a0 <_svfiprintf_r+0x1ec>)
 800f41a:	bb1b      	cbnz	r3, 800f464 <_svfiprintf_r+0x1b0>
 800f41c:	9b03      	ldr	r3, [sp, #12]
 800f41e:	3307      	adds	r3, #7
 800f420:	f023 0307 	bic.w	r3, r3, #7
 800f424:	3308      	adds	r3, #8
 800f426:	9303      	str	r3, [sp, #12]
 800f428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f42a:	4433      	add	r3, r6
 800f42c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f42e:	e76a      	b.n	800f306 <_svfiprintf_r+0x52>
 800f430:	fb0c 3202 	mla	r2, ip, r2, r3
 800f434:	460c      	mov	r4, r1
 800f436:	2001      	movs	r0, #1
 800f438:	e7a8      	b.n	800f38c <_svfiprintf_r+0xd8>
 800f43a:	2300      	movs	r3, #0
 800f43c:	3401      	adds	r4, #1
 800f43e:	9305      	str	r3, [sp, #20]
 800f440:	4619      	mov	r1, r3
 800f442:	f04f 0c0a 	mov.w	ip, #10
 800f446:	4620      	mov	r0, r4
 800f448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f44c:	3a30      	subs	r2, #48	@ 0x30
 800f44e:	2a09      	cmp	r2, #9
 800f450:	d903      	bls.n	800f45a <_svfiprintf_r+0x1a6>
 800f452:	2b00      	cmp	r3, #0
 800f454:	d0c6      	beq.n	800f3e4 <_svfiprintf_r+0x130>
 800f456:	9105      	str	r1, [sp, #20]
 800f458:	e7c4      	b.n	800f3e4 <_svfiprintf_r+0x130>
 800f45a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f45e:	4604      	mov	r4, r0
 800f460:	2301      	movs	r3, #1
 800f462:	e7f0      	b.n	800f446 <_svfiprintf_r+0x192>
 800f464:	ab03      	add	r3, sp, #12
 800f466:	9300      	str	r3, [sp, #0]
 800f468:	462a      	mov	r2, r5
 800f46a:	4b0e      	ldr	r3, [pc, #56]	@ (800f4a4 <_svfiprintf_r+0x1f0>)
 800f46c:	a904      	add	r1, sp, #16
 800f46e:	4638      	mov	r0, r7
 800f470:	f7fb fff4 	bl	800b45c <_printf_float>
 800f474:	1c42      	adds	r2, r0, #1
 800f476:	4606      	mov	r6, r0
 800f478:	d1d6      	bne.n	800f428 <_svfiprintf_r+0x174>
 800f47a:	89ab      	ldrh	r3, [r5, #12]
 800f47c:	065b      	lsls	r3, r3, #25
 800f47e:	f53f af2d 	bmi.w	800f2dc <_svfiprintf_r+0x28>
 800f482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f484:	e72c      	b.n	800f2e0 <_svfiprintf_r+0x2c>
 800f486:	ab03      	add	r3, sp, #12
 800f488:	9300      	str	r3, [sp, #0]
 800f48a:	462a      	mov	r2, r5
 800f48c:	4b05      	ldr	r3, [pc, #20]	@ (800f4a4 <_svfiprintf_r+0x1f0>)
 800f48e:	a904      	add	r1, sp, #16
 800f490:	4638      	mov	r0, r7
 800f492:	f7fc fa7b 	bl	800b98c <_printf_i>
 800f496:	e7ed      	b.n	800f474 <_svfiprintf_r+0x1c0>
 800f498:	080113d1 	.word	0x080113d1
 800f49c:	080113db 	.word	0x080113db
 800f4a0:	0800b45d 	.word	0x0800b45d
 800f4a4:	0800f1ff 	.word	0x0800f1ff
 800f4a8:	080113d7 	.word	0x080113d7

0800f4ac <__sfputc_r>:
 800f4ac:	6893      	ldr	r3, [r2, #8]
 800f4ae:	3b01      	subs	r3, #1
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	b410      	push	{r4}
 800f4b4:	6093      	str	r3, [r2, #8]
 800f4b6:	da08      	bge.n	800f4ca <__sfputc_r+0x1e>
 800f4b8:	6994      	ldr	r4, [r2, #24]
 800f4ba:	42a3      	cmp	r3, r4
 800f4bc:	db01      	blt.n	800f4c2 <__sfputc_r+0x16>
 800f4be:	290a      	cmp	r1, #10
 800f4c0:	d103      	bne.n	800f4ca <__sfputc_r+0x1e>
 800f4c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4c6:	f7fd ba76 	b.w	800c9b6 <__swbuf_r>
 800f4ca:	6813      	ldr	r3, [r2, #0]
 800f4cc:	1c58      	adds	r0, r3, #1
 800f4ce:	6010      	str	r0, [r2, #0]
 800f4d0:	7019      	strb	r1, [r3, #0]
 800f4d2:	4608      	mov	r0, r1
 800f4d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4d8:	4770      	bx	lr

0800f4da <__sfputs_r>:
 800f4da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4dc:	4606      	mov	r6, r0
 800f4de:	460f      	mov	r7, r1
 800f4e0:	4614      	mov	r4, r2
 800f4e2:	18d5      	adds	r5, r2, r3
 800f4e4:	42ac      	cmp	r4, r5
 800f4e6:	d101      	bne.n	800f4ec <__sfputs_r+0x12>
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	e007      	b.n	800f4fc <__sfputs_r+0x22>
 800f4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4f0:	463a      	mov	r2, r7
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	f7ff ffda 	bl	800f4ac <__sfputc_r>
 800f4f8:	1c43      	adds	r3, r0, #1
 800f4fa:	d1f3      	bne.n	800f4e4 <__sfputs_r+0xa>
 800f4fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f500 <_vfiprintf_r>:
 800f500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f504:	460d      	mov	r5, r1
 800f506:	b09d      	sub	sp, #116	@ 0x74
 800f508:	4614      	mov	r4, r2
 800f50a:	4698      	mov	r8, r3
 800f50c:	4606      	mov	r6, r0
 800f50e:	b118      	cbz	r0, 800f518 <_vfiprintf_r+0x18>
 800f510:	6a03      	ldr	r3, [r0, #32]
 800f512:	b90b      	cbnz	r3, 800f518 <_vfiprintf_r+0x18>
 800f514:	f7fc ffc6 	bl	800c4a4 <__sinit>
 800f518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f51a:	07d9      	lsls	r1, r3, #31
 800f51c:	d405      	bmi.n	800f52a <_vfiprintf_r+0x2a>
 800f51e:	89ab      	ldrh	r3, [r5, #12]
 800f520:	059a      	lsls	r2, r3, #22
 800f522:	d402      	bmi.n	800f52a <_vfiprintf_r+0x2a>
 800f524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f526:	f7fd fe59 	bl	800d1dc <__retarget_lock_acquire_recursive>
 800f52a:	89ab      	ldrh	r3, [r5, #12]
 800f52c:	071b      	lsls	r3, r3, #28
 800f52e:	d501      	bpl.n	800f534 <_vfiprintf_r+0x34>
 800f530:	692b      	ldr	r3, [r5, #16]
 800f532:	b99b      	cbnz	r3, 800f55c <_vfiprintf_r+0x5c>
 800f534:	4629      	mov	r1, r5
 800f536:	4630      	mov	r0, r6
 800f538:	f7fd fa7c 	bl	800ca34 <__swsetup_r>
 800f53c:	b170      	cbz	r0, 800f55c <_vfiprintf_r+0x5c>
 800f53e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f540:	07dc      	lsls	r4, r3, #31
 800f542:	d504      	bpl.n	800f54e <_vfiprintf_r+0x4e>
 800f544:	f04f 30ff 	mov.w	r0, #4294967295
 800f548:	b01d      	add	sp, #116	@ 0x74
 800f54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54e:	89ab      	ldrh	r3, [r5, #12]
 800f550:	0598      	lsls	r0, r3, #22
 800f552:	d4f7      	bmi.n	800f544 <_vfiprintf_r+0x44>
 800f554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f556:	f7fd fe42 	bl	800d1de <__retarget_lock_release_recursive>
 800f55a:	e7f3      	b.n	800f544 <_vfiprintf_r+0x44>
 800f55c:	2300      	movs	r3, #0
 800f55e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f560:	2320      	movs	r3, #32
 800f562:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f566:	f8cd 800c 	str.w	r8, [sp, #12]
 800f56a:	2330      	movs	r3, #48	@ 0x30
 800f56c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f71c <_vfiprintf_r+0x21c>
 800f570:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f574:	f04f 0901 	mov.w	r9, #1
 800f578:	4623      	mov	r3, r4
 800f57a:	469a      	mov	sl, r3
 800f57c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f580:	b10a      	cbz	r2, 800f586 <_vfiprintf_r+0x86>
 800f582:	2a25      	cmp	r2, #37	@ 0x25
 800f584:	d1f9      	bne.n	800f57a <_vfiprintf_r+0x7a>
 800f586:	ebba 0b04 	subs.w	fp, sl, r4
 800f58a:	d00b      	beq.n	800f5a4 <_vfiprintf_r+0xa4>
 800f58c:	465b      	mov	r3, fp
 800f58e:	4622      	mov	r2, r4
 800f590:	4629      	mov	r1, r5
 800f592:	4630      	mov	r0, r6
 800f594:	f7ff ffa1 	bl	800f4da <__sfputs_r>
 800f598:	3001      	adds	r0, #1
 800f59a:	f000 80a7 	beq.w	800f6ec <_vfiprintf_r+0x1ec>
 800f59e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5a0:	445a      	add	r2, fp
 800f5a2:	9209      	str	r2, [sp, #36]	@ 0x24
 800f5a4:	f89a 3000 	ldrb.w	r3, [sl]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f000 809f 	beq.w	800f6ec <_vfiprintf_r+0x1ec>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f5b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5b8:	f10a 0a01 	add.w	sl, sl, #1
 800f5bc:	9304      	str	r3, [sp, #16]
 800f5be:	9307      	str	r3, [sp, #28]
 800f5c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f5c4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5c6:	4654      	mov	r4, sl
 800f5c8:	2205      	movs	r2, #5
 800f5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5ce:	4853      	ldr	r0, [pc, #332]	@ (800f71c <_vfiprintf_r+0x21c>)
 800f5d0:	f7f0 fe1e 	bl	8000210 <memchr>
 800f5d4:	9a04      	ldr	r2, [sp, #16]
 800f5d6:	b9d8      	cbnz	r0, 800f610 <_vfiprintf_r+0x110>
 800f5d8:	06d1      	lsls	r1, r2, #27
 800f5da:	bf44      	itt	mi
 800f5dc:	2320      	movmi	r3, #32
 800f5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5e2:	0713      	lsls	r3, r2, #28
 800f5e4:	bf44      	itt	mi
 800f5e6:	232b      	movmi	r3, #43	@ 0x2b
 800f5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f5f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5f2:	d015      	beq.n	800f620 <_vfiprintf_r+0x120>
 800f5f4:	9a07      	ldr	r2, [sp, #28]
 800f5f6:	4654      	mov	r4, sl
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	f04f 0c0a 	mov.w	ip, #10
 800f5fe:	4621      	mov	r1, r4
 800f600:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f604:	3b30      	subs	r3, #48	@ 0x30
 800f606:	2b09      	cmp	r3, #9
 800f608:	d94b      	bls.n	800f6a2 <_vfiprintf_r+0x1a2>
 800f60a:	b1b0      	cbz	r0, 800f63a <_vfiprintf_r+0x13a>
 800f60c:	9207      	str	r2, [sp, #28]
 800f60e:	e014      	b.n	800f63a <_vfiprintf_r+0x13a>
 800f610:	eba0 0308 	sub.w	r3, r0, r8
 800f614:	fa09 f303 	lsl.w	r3, r9, r3
 800f618:	4313      	orrs	r3, r2
 800f61a:	9304      	str	r3, [sp, #16]
 800f61c:	46a2      	mov	sl, r4
 800f61e:	e7d2      	b.n	800f5c6 <_vfiprintf_r+0xc6>
 800f620:	9b03      	ldr	r3, [sp, #12]
 800f622:	1d19      	adds	r1, r3, #4
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	9103      	str	r1, [sp, #12]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	bfbb      	ittet	lt
 800f62c:	425b      	neglt	r3, r3
 800f62e:	f042 0202 	orrlt.w	r2, r2, #2
 800f632:	9307      	strge	r3, [sp, #28]
 800f634:	9307      	strlt	r3, [sp, #28]
 800f636:	bfb8      	it	lt
 800f638:	9204      	strlt	r2, [sp, #16]
 800f63a:	7823      	ldrb	r3, [r4, #0]
 800f63c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f63e:	d10a      	bne.n	800f656 <_vfiprintf_r+0x156>
 800f640:	7863      	ldrb	r3, [r4, #1]
 800f642:	2b2a      	cmp	r3, #42	@ 0x2a
 800f644:	d132      	bne.n	800f6ac <_vfiprintf_r+0x1ac>
 800f646:	9b03      	ldr	r3, [sp, #12]
 800f648:	1d1a      	adds	r2, r3, #4
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	9203      	str	r2, [sp, #12]
 800f64e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f652:	3402      	adds	r4, #2
 800f654:	9305      	str	r3, [sp, #20]
 800f656:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f72c <_vfiprintf_r+0x22c>
 800f65a:	7821      	ldrb	r1, [r4, #0]
 800f65c:	2203      	movs	r2, #3
 800f65e:	4650      	mov	r0, sl
 800f660:	f7f0 fdd6 	bl	8000210 <memchr>
 800f664:	b138      	cbz	r0, 800f676 <_vfiprintf_r+0x176>
 800f666:	9b04      	ldr	r3, [sp, #16]
 800f668:	eba0 000a 	sub.w	r0, r0, sl
 800f66c:	2240      	movs	r2, #64	@ 0x40
 800f66e:	4082      	lsls	r2, r0
 800f670:	4313      	orrs	r3, r2
 800f672:	3401      	adds	r4, #1
 800f674:	9304      	str	r3, [sp, #16]
 800f676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f67a:	4829      	ldr	r0, [pc, #164]	@ (800f720 <_vfiprintf_r+0x220>)
 800f67c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f680:	2206      	movs	r2, #6
 800f682:	f7f0 fdc5 	bl	8000210 <memchr>
 800f686:	2800      	cmp	r0, #0
 800f688:	d03f      	beq.n	800f70a <_vfiprintf_r+0x20a>
 800f68a:	4b26      	ldr	r3, [pc, #152]	@ (800f724 <_vfiprintf_r+0x224>)
 800f68c:	bb1b      	cbnz	r3, 800f6d6 <_vfiprintf_r+0x1d6>
 800f68e:	9b03      	ldr	r3, [sp, #12]
 800f690:	3307      	adds	r3, #7
 800f692:	f023 0307 	bic.w	r3, r3, #7
 800f696:	3308      	adds	r3, #8
 800f698:	9303      	str	r3, [sp, #12]
 800f69a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f69c:	443b      	add	r3, r7
 800f69e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6a0:	e76a      	b.n	800f578 <_vfiprintf_r+0x78>
 800f6a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6a6:	460c      	mov	r4, r1
 800f6a8:	2001      	movs	r0, #1
 800f6aa:	e7a8      	b.n	800f5fe <_vfiprintf_r+0xfe>
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	3401      	adds	r4, #1
 800f6b0:	9305      	str	r3, [sp, #20]
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	f04f 0c0a 	mov.w	ip, #10
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6be:	3a30      	subs	r2, #48	@ 0x30
 800f6c0:	2a09      	cmp	r2, #9
 800f6c2:	d903      	bls.n	800f6cc <_vfiprintf_r+0x1cc>
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d0c6      	beq.n	800f656 <_vfiprintf_r+0x156>
 800f6c8:	9105      	str	r1, [sp, #20]
 800f6ca:	e7c4      	b.n	800f656 <_vfiprintf_r+0x156>
 800f6cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	e7f0      	b.n	800f6b8 <_vfiprintf_r+0x1b8>
 800f6d6:	ab03      	add	r3, sp, #12
 800f6d8:	9300      	str	r3, [sp, #0]
 800f6da:	462a      	mov	r2, r5
 800f6dc:	4b12      	ldr	r3, [pc, #72]	@ (800f728 <_vfiprintf_r+0x228>)
 800f6de:	a904      	add	r1, sp, #16
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	f7fb febb 	bl	800b45c <_printf_float>
 800f6e6:	4607      	mov	r7, r0
 800f6e8:	1c78      	adds	r0, r7, #1
 800f6ea:	d1d6      	bne.n	800f69a <_vfiprintf_r+0x19a>
 800f6ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6ee:	07d9      	lsls	r1, r3, #31
 800f6f0:	d405      	bmi.n	800f6fe <_vfiprintf_r+0x1fe>
 800f6f2:	89ab      	ldrh	r3, [r5, #12]
 800f6f4:	059a      	lsls	r2, r3, #22
 800f6f6:	d402      	bmi.n	800f6fe <_vfiprintf_r+0x1fe>
 800f6f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6fa:	f7fd fd70 	bl	800d1de <__retarget_lock_release_recursive>
 800f6fe:	89ab      	ldrh	r3, [r5, #12]
 800f700:	065b      	lsls	r3, r3, #25
 800f702:	f53f af1f 	bmi.w	800f544 <_vfiprintf_r+0x44>
 800f706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f708:	e71e      	b.n	800f548 <_vfiprintf_r+0x48>
 800f70a:	ab03      	add	r3, sp, #12
 800f70c:	9300      	str	r3, [sp, #0]
 800f70e:	462a      	mov	r2, r5
 800f710:	4b05      	ldr	r3, [pc, #20]	@ (800f728 <_vfiprintf_r+0x228>)
 800f712:	a904      	add	r1, sp, #16
 800f714:	4630      	mov	r0, r6
 800f716:	f7fc f939 	bl	800b98c <_printf_i>
 800f71a:	e7e4      	b.n	800f6e6 <_vfiprintf_r+0x1e6>
 800f71c:	080113d1 	.word	0x080113d1
 800f720:	080113db 	.word	0x080113db
 800f724:	0800b45d 	.word	0x0800b45d
 800f728:	0800f4db 	.word	0x0800f4db
 800f72c:	080113d7 	.word	0x080113d7

0800f730 <fileno>:
 800f730:	b538      	push	{r3, r4, r5, lr}
 800f732:	4d13      	ldr	r5, [pc, #76]	@ (800f780 <fileno+0x50>)
 800f734:	4604      	mov	r4, r0
 800f736:	6828      	ldr	r0, [r5, #0]
 800f738:	b118      	cbz	r0, 800f742 <fileno+0x12>
 800f73a:	6a03      	ldr	r3, [r0, #32]
 800f73c:	b90b      	cbnz	r3, 800f742 <fileno+0x12>
 800f73e:	f7fc feb1 	bl	800c4a4 <__sinit>
 800f742:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f744:	07d8      	lsls	r0, r3, #31
 800f746:	d405      	bmi.n	800f754 <fileno+0x24>
 800f748:	89a3      	ldrh	r3, [r4, #12]
 800f74a:	0599      	lsls	r1, r3, #22
 800f74c:	d402      	bmi.n	800f754 <fileno+0x24>
 800f74e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f750:	f7fd fd44 	bl	800d1dc <__retarget_lock_acquire_recursive>
 800f754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f758:	b15b      	cbz	r3, 800f772 <fileno+0x42>
 800f75a:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800f75e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f760:	07d2      	lsls	r2, r2, #31
 800f762:	d404      	bmi.n	800f76e <fileno+0x3e>
 800f764:	059b      	lsls	r3, r3, #22
 800f766:	d402      	bmi.n	800f76e <fileno+0x3e>
 800f768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f76a:	f7fd fd38 	bl	800d1de <__retarget_lock_release_recursive>
 800f76e:	4628      	mov	r0, r5
 800f770:	bd38      	pop	{r3, r4, r5, pc}
 800f772:	682a      	ldr	r2, [r5, #0]
 800f774:	2109      	movs	r1, #9
 800f776:	6011      	str	r1, [r2, #0]
 800f778:	f04f 35ff 	mov.w	r5, #4294967295
 800f77c:	e7ef      	b.n	800f75e <fileno+0x2e>
 800f77e:	bf00      	nop
 800f780:	20000184 	.word	0x20000184

0800f784 <__sflags>:
 800f784:	780b      	ldrb	r3, [r1, #0]
 800f786:	2b72      	cmp	r3, #114	@ 0x72
 800f788:	b530      	push	{r4, r5, lr}
 800f78a:	d022      	beq.n	800f7d2 <__sflags+0x4e>
 800f78c:	2b77      	cmp	r3, #119	@ 0x77
 800f78e:	d024      	beq.n	800f7da <__sflags+0x56>
 800f790:	2b61      	cmp	r3, #97	@ 0x61
 800f792:	d027      	beq.n	800f7e4 <__sflags+0x60>
 800f794:	2316      	movs	r3, #22
 800f796:	6003      	str	r3, [r0, #0]
 800f798:	2000      	movs	r0, #0
 800f79a:	bd30      	pop	{r4, r5, pc}
 800f79c:	2d62      	cmp	r5, #98	@ 0x62
 800f79e:	d012      	beq.n	800f7c6 <__sflags+0x42>
 800f7a0:	2d78      	cmp	r5, #120	@ 0x78
 800f7a2:	d013      	beq.n	800f7cc <__sflags+0x48>
 800f7a4:	2d2b      	cmp	r5, #43	@ 0x2b
 800f7a6:	d107      	bne.n	800f7b8 <__sflags+0x34>
 800f7a8:	f020 001c 	bic.w	r0, r0, #28
 800f7ac:	f023 0303 	bic.w	r3, r3, #3
 800f7b0:	f040 0010 	orr.w	r0, r0, #16
 800f7b4:	f043 0302 	orr.w	r3, r3, #2
 800f7b8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800f7bc:	2d00      	cmp	r5, #0
 800f7be:	d1ed      	bne.n	800f79c <__sflags+0x18>
 800f7c0:	4323      	orrs	r3, r4
 800f7c2:	6013      	str	r3, [r2, #0]
 800f7c4:	e7e9      	b.n	800f79a <__sflags+0x16>
 800f7c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f7ca:	e7f5      	b.n	800f7b8 <__sflags+0x34>
 800f7cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800f7d0:	e7f2      	b.n	800f7b8 <__sflags+0x34>
 800f7d2:	2400      	movs	r4, #0
 800f7d4:	4623      	mov	r3, r4
 800f7d6:	2004      	movs	r0, #4
 800f7d8:	e7ee      	b.n	800f7b8 <__sflags+0x34>
 800f7da:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
 800f7de:	2301      	movs	r3, #1
 800f7e0:	2008      	movs	r0, #8
 800f7e2:	e7e9      	b.n	800f7b8 <__sflags+0x34>
 800f7e4:	f44f 7402 	mov.w	r4, #520	@ 0x208
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	f44f 7084 	mov.w	r0, #264	@ 0x108
 800f7ee:	e7e3      	b.n	800f7b8 <__sflags+0x34>

0800f7f0 <__swhatbuf_r>:
 800f7f0:	b570      	push	{r4, r5, r6, lr}
 800f7f2:	460c      	mov	r4, r1
 800f7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7f8:	2900      	cmp	r1, #0
 800f7fa:	b096      	sub	sp, #88	@ 0x58
 800f7fc:	4615      	mov	r5, r2
 800f7fe:	461e      	mov	r6, r3
 800f800:	da0d      	bge.n	800f81e <__swhatbuf_r+0x2e>
 800f802:	89a3      	ldrh	r3, [r4, #12]
 800f804:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f808:	f04f 0100 	mov.w	r1, #0
 800f80c:	bf14      	ite	ne
 800f80e:	2340      	movne	r3, #64	@ 0x40
 800f810:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f814:	2000      	movs	r0, #0
 800f816:	6031      	str	r1, [r6, #0]
 800f818:	602b      	str	r3, [r5, #0]
 800f81a:	b016      	add	sp, #88	@ 0x58
 800f81c:	bd70      	pop	{r4, r5, r6, pc}
 800f81e:	466a      	mov	r2, sp
 800f820:	f000 f862 	bl	800f8e8 <_fstat_r>
 800f824:	2800      	cmp	r0, #0
 800f826:	dbec      	blt.n	800f802 <__swhatbuf_r+0x12>
 800f828:	9901      	ldr	r1, [sp, #4]
 800f82a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f82e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f832:	4259      	negs	r1, r3
 800f834:	4159      	adcs	r1, r3
 800f836:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f83a:	e7eb      	b.n	800f814 <__swhatbuf_r+0x24>

0800f83c <__smakebuf_r>:
 800f83c:	898b      	ldrh	r3, [r1, #12]
 800f83e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f840:	079d      	lsls	r5, r3, #30
 800f842:	4606      	mov	r6, r0
 800f844:	460c      	mov	r4, r1
 800f846:	d507      	bpl.n	800f858 <__smakebuf_r+0x1c>
 800f848:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f84c:	6023      	str	r3, [r4, #0]
 800f84e:	6123      	str	r3, [r4, #16]
 800f850:	2301      	movs	r3, #1
 800f852:	6163      	str	r3, [r4, #20]
 800f854:	b003      	add	sp, #12
 800f856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f858:	ab01      	add	r3, sp, #4
 800f85a:	466a      	mov	r2, sp
 800f85c:	f7ff ffc8 	bl	800f7f0 <__swhatbuf_r>
 800f860:	9f00      	ldr	r7, [sp, #0]
 800f862:	4605      	mov	r5, r0
 800f864:	4639      	mov	r1, r7
 800f866:	4630      	mov	r0, r6
 800f868:	f7fe fef0 	bl	800e64c <_malloc_r>
 800f86c:	b948      	cbnz	r0, 800f882 <__smakebuf_r+0x46>
 800f86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f872:	059a      	lsls	r2, r3, #22
 800f874:	d4ee      	bmi.n	800f854 <__smakebuf_r+0x18>
 800f876:	f023 0303 	bic.w	r3, r3, #3
 800f87a:	f043 0302 	orr.w	r3, r3, #2
 800f87e:	81a3      	strh	r3, [r4, #12]
 800f880:	e7e2      	b.n	800f848 <__smakebuf_r+0xc>
 800f882:	89a3      	ldrh	r3, [r4, #12]
 800f884:	6020      	str	r0, [r4, #0]
 800f886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f88a:	81a3      	strh	r3, [r4, #12]
 800f88c:	9b01      	ldr	r3, [sp, #4]
 800f88e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f892:	b15b      	cbz	r3, 800f8ac <__smakebuf_r+0x70>
 800f894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f898:	4630      	mov	r0, r6
 800f89a:	f000 f837 	bl	800f90c <_isatty_r>
 800f89e:	b128      	cbz	r0, 800f8ac <__smakebuf_r+0x70>
 800f8a0:	89a3      	ldrh	r3, [r4, #12]
 800f8a2:	f023 0303 	bic.w	r3, r3, #3
 800f8a6:	f043 0301 	orr.w	r3, r3, #1
 800f8aa:	81a3      	strh	r3, [r4, #12]
 800f8ac:	89a3      	ldrh	r3, [r4, #12]
 800f8ae:	431d      	orrs	r5, r3
 800f8b0:	81a5      	strh	r5, [r4, #12]
 800f8b2:	e7cf      	b.n	800f854 <__smakebuf_r+0x18>

0800f8b4 <memmove>:
 800f8b4:	4288      	cmp	r0, r1
 800f8b6:	b510      	push	{r4, lr}
 800f8b8:	eb01 0402 	add.w	r4, r1, r2
 800f8bc:	d902      	bls.n	800f8c4 <memmove+0x10>
 800f8be:	4284      	cmp	r4, r0
 800f8c0:	4623      	mov	r3, r4
 800f8c2:	d807      	bhi.n	800f8d4 <memmove+0x20>
 800f8c4:	1e43      	subs	r3, r0, #1
 800f8c6:	42a1      	cmp	r1, r4
 800f8c8:	d008      	beq.n	800f8dc <memmove+0x28>
 800f8ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f8d2:	e7f8      	b.n	800f8c6 <memmove+0x12>
 800f8d4:	4402      	add	r2, r0
 800f8d6:	4601      	mov	r1, r0
 800f8d8:	428a      	cmp	r2, r1
 800f8da:	d100      	bne.n	800f8de <memmove+0x2a>
 800f8dc:	bd10      	pop	{r4, pc}
 800f8de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f8e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f8e6:	e7f7      	b.n	800f8d8 <memmove+0x24>

0800f8e8 <_fstat_r>:
 800f8e8:	b538      	push	{r3, r4, r5, lr}
 800f8ea:	4d07      	ldr	r5, [pc, #28]	@ (800f908 <_fstat_r+0x20>)
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	4608      	mov	r0, r1
 800f8f2:	4611      	mov	r1, r2
 800f8f4:	602b      	str	r3, [r5, #0]
 800f8f6:	f7fa fdfa 	bl	800a4ee <_fstat>
 800f8fa:	1c43      	adds	r3, r0, #1
 800f8fc:	d102      	bne.n	800f904 <_fstat_r+0x1c>
 800f8fe:	682b      	ldr	r3, [r5, #0]
 800f900:	b103      	cbz	r3, 800f904 <_fstat_r+0x1c>
 800f902:	6023      	str	r3, [r4, #0]
 800f904:	bd38      	pop	{r3, r4, r5, pc}
 800f906:	bf00      	nop
 800f908:	20003914 	.word	0x20003914

0800f90c <_isatty_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4d06      	ldr	r5, [pc, #24]	@ (800f928 <_isatty_r+0x1c>)
 800f910:	2300      	movs	r3, #0
 800f912:	4604      	mov	r4, r0
 800f914:	4608      	mov	r0, r1
 800f916:	602b      	str	r3, [r5, #0]
 800f918:	f7fa fe75 	bl	800a606 <_isatty>
 800f91c:	1c43      	adds	r3, r0, #1
 800f91e:	d102      	bne.n	800f926 <_isatty_r+0x1a>
 800f920:	682b      	ldr	r3, [r5, #0]
 800f922:	b103      	cbz	r3, 800f926 <_isatty_r+0x1a>
 800f924:	6023      	str	r3, [r4, #0]
 800f926:	bd38      	pop	{r3, r4, r5, pc}
 800f928:	20003914 	.word	0x20003914

0800f92c <_sbrk_r>:
 800f92c:	b538      	push	{r3, r4, r5, lr}
 800f92e:	4d06      	ldr	r5, [pc, #24]	@ (800f948 <_sbrk_r+0x1c>)
 800f930:	2300      	movs	r3, #0
 800f932:	4604      	mov	r4, r0
 800f934:	4608      	mov	r0, r1
 800f936:	602b      	str	r3, [r5, #0]
 800f938:	f7f7 fa88 	bl	8006e4c <_sbrk>
 800f93c:	1c43      	adds	r3, r0, #1
 800f93e:	d102      	bne.n	800f946 <_sbrk_r+0x1a>
 800f940:	682b      	ldr	r3, [r5, #0]
 800f942:	b103      	cbz	r3, 800f946 <_sbrk_r+0x1a>
 800f944:	6023      	str	r3, [r4, #0]
 800f946:	bd38      	pop	{r3, r4, r5, pc}
 800f948:	20003914 	.word	0x20003914

0800f94c <abort>:
 800f94c:	b508      	push	{r3, lr}
 800f94e:	2006      	movs	r0, #6
 800f950:	f000 f86e 	bl	800fa30 <raise>
 800f954:	2001      	movs	r0, #1
 800f956:	f000 ff0b 	bl	8010770 <_exit>

0800f95a <_calloc_r>:
 800f95a:	b570      	push	{r4, r5, r6, lr}
 800f95c:	fba1 5402 	umull	r5, r4, r1, r2
 800f960:	b93c      	cbnz	r4, 800f972 <_calloc_r+0x18>
 800f962:	4629      	mov	r1, r5
 800f964:	f7fe fe72 	bl	800e64c <_malloc_r>
 800f968:	4606      	mov	r6, r0
 800f96a:	b928      	cbnz	r0, 800f978 <_calloc_r+0x1e>
 800f96c:	2600      	movs	r6, #0
 800f96e:	4630      	mov	r0, r6
 800f970:	bd70      	pop	{r4, r5, r6, pc}
 800f972:	220c      	movs	r2, #12
 800f974:	6002      	str	r2, [r0, #0]
 800f976:	e7f9      	b.n	800f96c <_calloc_r+0x12>
 800f978:	462a      	mov	r2, r5
 800f97a:	4621      	mov	r1, r4
 800f97c:	f7fd f947 	bl	800cc0e <memset>
 800f980:	e7f5      	b.n	800f96e <_calloc_r+0x14>

0800f982 <_realloc_r>:
 800f982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f986:	4680      	mov	r8, r0
 800f988:	4615      	mov	r5, r2
 800f98a:	460c      	mov	r4, r1
 800f98c:	b921      	cbnz	r1, 800f998 <_realloc_r+0x16>
 800f98e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f992:	4611      	mov	r1, r2
 800f994:	f7fe be5a 	b.w	800e64c <_malloc_r>
 800f998:	b92a      	cbnz	r2, 800f9a6 <_realloc_r+0x24>
 800f99a:	f7fe faa9 	bl	800def0 <_free_r>
 800f99e:	2400      	movs	r4, #0
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9a6:	f000 f85f 	bl	800fa68 <_malloc_usable_size_r>
 800f9aa:	4285      	cmp	r5, r0
 800f9ac:	4606      	mov	r6, r0
 800f9ae:	d802      	bhi.n	800f9b6 <_realloc_r+0x34>
 800f9b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f9b4:	d8f4      	bhi.n	800f9a0 <_realloc_r+0x1e>
 800f9b6:	4629      	mov	r1, r5
 800f9b8:	4640      	mov	r0, r8
 800f9ba:	f7fe fe47 	bl	800e64c <_malloc_r>
 800f9be:	4607      	mov	r7, r0
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	d0ec      	beq.n	800f99e <_realloc_r+0x1c>
 800f9c4:	42b5      	cmp	r5, r6
 800f9c6:	462a      	mov	r2, r5
 800f9c8:	4621      	mov	r1, r4
 800f9ca:	bf28      	it	cs
 800f9cc:	4632      	movcs	r2, r6
 800f9ce:	f7fd fc07 	bl	800d1e0 <memcpy>
 800f9d2:	4621      	mov	r1, r4
 800f9d4:	4640      	mov	r0, r8
 800f9d6:	f7fe fa8b 	bl	800def0 <_free_r>
 800f9da:	463c      	mov	r4, r7
 800f9dc:	e7e0      	b.n	800f9a0 <_realloc_r+0x1e>

0800f9de <_raise_r>:
 800f9de:	291f      	cmp	r1, #31
 800f9e0:	b538      	push	{r3, r4, r5, lr}
 800f9e2:	4605      	mov	r5, r0
 800f9e4:	460c      	mov	r4, r1
 800f9e6:	d904      	bls.n	800f9f2 <_raise_r+0x14>
 800f9e8:	2316      	movs	r3, #22
 800f9ea:	6003      	str	r3, [r0, #0]
 800f9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f9f0:	bd38      	pop	{r3, r4, r5, pc}
 800f9f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f9f4:	b112      	cbz	r2, 800f9fc <_raise_r+0x1e>
 800f9f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9fa:	b94b      	cbnz	r3, 800fa10 <_raise_r+0x32>
 800f9fc:	4628      	mov	r0, r5
 800f9fe:	f000 f831 	bl	800fa64 <_getpid_r>
 800fa02:	4622      	mov	r2, r4
 800fa04:	4601      	mov	r1, r0
 800fa06:	4628      	mov	r0, r5
 800fa08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa0c:	f000 b818 	b.w	800fa40 <_kill_r>
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d00a      	beq.n	800fa2a <_raise_r+0x4c>
 800fa14:	1c59      	adds	r1, r3, #1
 800fa16:	d103      	bne.n	800fa20 <_raise_r+0x42>
 800fa18:	2316      	movs	r3, #22
 800fa1a:	6003      	str	r3, [r0, #0]
 800fa1c:	2001      	movs	r0, #1
 800fa1e:	e7e7      	b.n	800f9f0 <_raise_r+0x12>
 800fa20:	2100      	movs	r1, #0
 800fa22:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa26:	4620      	mov	r0, r4
 800fa28:	4798      	blx	r3
 800fa2a:	2000      	movs	r0, #0
 800fa2c:	e7e0      	b.n	800f9f0 <_raise_r+0x12>
	...

0800fa30 <raise>:
 800fa30:	4b02      	ldr	r3, [pc, #8]	@ (800fa3c <raise+0xc>)
 800fa32:	4601      	mov	r1, r0
 800fa34:	6818      	ldr	r0, [r3, #0]
 800fa36:	f7ff bfd2 	b.w	800f9de <_raise_r>
 800fa3a:	bf00      	nop
 800fa3c:	20000184 	.word	0x20000184

0800fa40 <_kill_r>:
 800fa40:	b538      	push	{r3, r4, r5, lr}
 800fa42:	4d07      	ldr	r5, [pc, #28]	@ (800fa60 <_kill_r+0x20>)
 800fa44:	2300      	movs	r3, #0
 800fa46:	4604      	mov	r4, r0
 800fa48:	4608      	mov	r0, r1
 800fa4a:	4611      	mov	r1, r2
 800fa4c:	602b      	str	r3, [r5, #0]
 800fa4e:	f000 fe87 	bl	8010760 <_kill>
 800fa52:	1c43      	adds	r3, r0, #1
 800fa54:	d102      	bne.n	800fa5c <_kill_r+0x1c>
 800fa56:	682b      	ldr	r3, [r5, #0]
 800fa58:	b103      	cbz	r3, 800fa5c <_kill_r+0x1c>
 800fa5a:	6023      	str	r3, [r4, #0]
 800fa5c:	bd38      	pop	{r3, r4, r5, pc}
 800fa5e:	bf00      	nop
 800fa60:	20003914 	.word	0x20003914

0800fa64 <_getpid_r>:
 800fa64:	f7fa bd20 	b.w	800a4a8 <_getpid>

0800fa68 <_malloc_usable_size_r>:
 800fa68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa6c:	1f18      	subs	r0, r3, #4
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	bfbc      	itt	lt
 800fa72:	580b      	ldrlt	r3, [r1, r0]
 800fa74:	18c0      	addlt	r0, r0, r3
 800fa76:	4770      	bx	lr

0800fa78 <sqrtf>:
 800fa78:	b508      	push	{r3, lr}
 800fa7a:	ed2d 8b02 	vpush	{d8}
 800fa7e:	eeb0 8a40 	vmov.f32	s16, s0
 800fa82:	f000 f97d 	bl	800fd80 <__ieee754_sqrtf>
 800fa86:	eeb4 8a48 	vcmp.f32	s16, s16
 800fa8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa8e:	d60c      	bvs.n	800faaa <sqrtf+0x32>
 800fa90:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800fab0 <sqrtf+0x38>
 800fa94:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fa98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa9c:	d505      	bpl.n	800faaa <sqrtf+0x32>
 800fa9e:	f7fd fb71 	bl	800d184 <__errno>
 800faa2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800faa6:	2321      	movs	r3, #33	@ 0x21
 800faa8:	6003      	str	r3, [r0, #0]
 800faaa:	ecbd 8b02 	vpop	{d8}
 800faae:	bd08      	pop	{r3, pc}
 800fab0:	00000000 	.word	0x00000000

0800fab4 <atanf>:
 800fab4:	b538      	push	{r3, r4, r5, lr}
 800fab6:	ee10 5a10 	vmov	r5, s0
 800faba:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800fabe:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800fac2:	eef0 7a40 	vmov.f32	s15, s0
 800fac6:	d310      	bcc.n	800faea <atanf+0x36>
 800fac8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800facc:	d904      	bls.n	800fad8 <atanf+0x24>
 800face:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fad2:	eeb0 0a67 	vmov.f32	s0, s15
 800fad6:	bd38      	pop	{r3, r4, r5, pc}
 800fad8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800fc10 <atanf+0x15c>
 800fadc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800fc14 <atanf+0x160>
 800fae0:	2d00      	cmp	r5, #0
 800fae2:	bfc8      	it	gt
 800fae4:	eef0 7a47 	vmovgt.f32	s15, s14
 800fae8:	e7f3      	b.n	800fad2 <atanf+0x1e>
 800faea:	4b4b      	ldr	r3, [pc, #300]	@ (800fc18 <atanf+0x164>)
 800faec:	429c      	cmp	r4, r3
 800faee:	d810      	bhi.n	800fb12 <atanf+0x5e>
 800faf0:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800faf4:	d20a      	bcs.n	800fb0c <atanf+0x58>
 800faf6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800fc1c <atanf+0x168>
 800fafa:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fafe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb02:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fb06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb0a:	dce2      	bgt.n	800fad2 <atanf+0x1e>
 800fb0c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb10:	e013      	b.n	800fb3a <atanf+0x86>
 800fb12:	f000 f8e7 	bl	800fce4 <fabsf>
 800fb16:	4b42      	ldr	r3, [pc, #264]	@ (800fc20 <atanf+0x16c>)
 800fb18:	429c      	cmp	r4, r3
 800fb1a:	d84f      	bhi.n	800fbbc <atanf+0x108>
 800fb1c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800fb20:	429c      	cmp	r4, r3
 800fb22:	d841      	bhi.n	800fba8 <atanf+0xf4>
 800fb24:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800fb28:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800fb2c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fb30:	2300      	movs	r3, #0
 800fb32:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fb36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fb3a:	1c5a      	adds	r2, r3, #1
 800fb3c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800fb40:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800fc24 <atanf+0x170>
 800fb44:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800fc28 <atanf+0x174>
 800fb48:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800fc2c <atanf+0x178>
 800fb4c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fb50:	eee6 5a87 	vfma.f32	s11, s13, s14
 800fb54:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800fc30 <atanf+0x17c>
 800fb58:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fb5c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800fc34 <atanf+0x180>
 800fb60:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fb64:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800fc38 <atanf+0x184>
 800fb68:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fb6c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800fc3c <atanf+0x188>
 800fb70:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fb74:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800fc40 <atanf+0x18c>
 800fb78:	eea6 5a87 	vfma.f32	s10, s13, s14
 800fb7c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800fc44 <atanf+0x190>
 800fb80:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fb84:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800fc48 <atanf+0x194>
 800fb88:	eea7 5a26 	vfma.f32	s10, s14, s13
 800fb8c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800fc4c <atanf+0x198>
 800fb90:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fb94:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fb98:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fb9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fba0:	d121      	bne.n	800fbe6 <atanf+0x132>
 800fba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fba6:	e794      	b.n	800fad2 <atanf+0x1e>
 800fba8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fbac:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fbb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fbba:	e7be      	b.n	800fb3a <atanf+0x86>
 800fbbc:	4b24      	ldr	r3, [pc, #144]	@ (800fc50 <atanf+0x19c>)
 800fbbe:	429c      	cmp	r4, r3
 800fbc0:	d80b      	bhi.n	800fbda <atanf+0x126>
 800fbc2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800fbc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fbca:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fbce:	2302      	movs	r3, #2
 800fbd0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fbd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fbd8:	e7af      	b.n	800fb3a <atanf+0x86>
 800fbda:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800fbde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fbe2:	2303      	movs	r3, #3
 800fbe4:	e7a9      	b.n	800fb3a <atanf+0x86>
 800fbe6:	4a1b      	ldr	r2, [pc, #108]	@ (800fc54 <atanf+0x1a0>)
 800fbe8:	491b      	ldr	r1, [pc, #108]	@ (800fc58 <atanf+0x1a4>)
 800fbea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fbee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fbf2:	edd3 6a00 	vldr	s13, [r3]
 800fbf6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800fbfa:	2d00      	cmp	r5, #0
 800fbfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc00:	edd2 7a00 	vldr	s15, [r2]
 800fc04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc08:	bfb8      	it	lt
 800fc0a:	eef1 7a67 	vneglt.f32	s15, s15
 800fc0e:	e760      	b.n	800fad2 <atanf+0x1e>
 800fc10:	bfc90fdb 	.word	0xbfc90fdb
 800fc14:	3fc90fdb 	.word	0x3fc90fdb
 800fc18:	3edfffff 	.word	0x3edfffff
 800fc1c:	7149f2ca 	.word	0x7149f2ca
 800fc20:	3f97ffff 	.word	0x3f97ffff
 800fc24:	3c8569d7 	.word	0x3c8569d7
 800fc28:	3d4bda59 	.word	0x3d4bda59
 800fc2c:	bd6ef16b 	.word	0xbd6ef16b
 800fc30:	3d886b35 	.word	0x3d886b35
 800fc34:	3dba2e6e 	.word	0x3dba2e6e
 800fc38:	3e124925 	.word	0x3e124925
 800fc3c:	3eaaaaab 	.word	0x3eaaaaab
 800fc40:	bd15a221 	.word	0xbd15a221
 800fc44:	bd9d8795 	.word	0xbd9d8795
 800fc48:	bde38e38 	.word	0xbde38e38
 800fc4c:	be4ccccd 	.word	0xbe4ccccd
 800fc50:	401bffff 	.word	0x401bffff
 800fc54:	080113f4 	.word	0x080113f4
 800fc58:	080113e4 	.word	0x080113e4

0800fc5c <cosf>:
 800fc5c:	ee10 3a10 	vmov	r3, s0
 800fc60:	b507      	push	{r0, r1, r2, lr}
 800fc62:	4a1e      	ldr	r2, [pc, #120]	@ (800fcdc <cosf+0x80>)
 800fc64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d806      	bhi.n	800fc7a <cosf+0x1e>
 800fc6c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800fce0 <cosf+0x84>
 800fc70:	b003      	add	sp, #12
 800fc72:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc76:	f000 b887 	b.w	800fd88 <__kernel_cosf>
 800fc7a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fc7e:	d304      	bcc.n	800fc8a <cosf+0x2e>
 800fc80:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fc84:	b003      	add	sp, #12
 800fc86:	f85d fb04 	ldr.w	pc, [sp], #4
 800fc8a:	4668      	mov	r0, sp
 800fc8c:	f000 f91c 	bl	800fec8 <__ieee754_rem_pio2f>
 800fc90:	f000 0003 	and.w	r0, r0, #3
 800fc94:	2801      	cmp	r0, #1
 800fc96:	d009      	beq.n	800fcac <cosf+0x50>
 800fc98:	2802      	cmp	r0, #2
 800fc9a:	d010      	beq.n	800fcbe <cosf+0x62>
 800fc9c:	b9b0      	cbnz	r0, 800fccc <cosf+0x70>
 800fc9e:	eddd 0a01 	vldr	s1, [sp, #4]
 800fca2:	ed9d 0a00 	vldr	s0, [sp]
 800fca6:	f000 f86f 	bl	800fd88 <__kernel_cosf>
 800fcaa:	e7eb      	b.n	800fc84 <cosf+0x28>
 800fcac:	eddd 0a01 	vldr	s1, [sp, #4]
 800fcb0:	ed9d 0a00 	vldr	s0, [sp]
 800fcb4:	f000 f8c0 	bl	800fe38 <__kernel_sinf>
 800fcb8:	eeb1 0a40 	vneg.f32	s0, s0
 800fcbc:	e7e2      	b.n	800fc84 <cosf+0x28>
 800fcbe:	eddd 0a01 	vldr	s1, [sp, #4]
 800fcc2:	ed9d 0a00 	vldr	s0, [sp]
 800fcc6:	f000 f85f 	bl	800fd88 <__kernel_cosf>
 800fcca:	e7f5      	b.n	800fcb8 <cosf+0x5c>
 800fccc:	eddd 0a01 	vldr	s1, [sp, #4]
 800fcd0:	ed9d 0a00 	vldr	s0, [sp]
 800fcd4:	2001      	movs	r0, #1
 800fcd6:	f000 f8af 	bl	800fe38 <__kernel_sinf>
 800fcda:	e7d3      	b.n	800fc84 <cosf+0x28>
 800fcdc:	3f490fd8 	.word	0x3f490fd8
 800fce0:	00000000 	.word	0x00000000

0800fce4 <fabsf>:
 800fce4:	ee10 3a10 	vmov	r3, s0
 800fce8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fcec:	ee00 3a10 	vmov	s0, r3
 800fcf0:	4770      	bx	lr
	...

0800fcf4 <sinf>:
 800fcf4:	ee10 3a10 	vmov	r3, s0
 800fcf8:	b507      	push	{r0, r1, r2, lr}
 800fcfa:	4a1f      	ldr	r2, [pc, #124]	@ (800fd78 <sinf+0x84>)
 800fcfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d807      	bhi.n	800fd14 <sinf+0x20>
 800fd04:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800fd7c <sinf+0x88>
 800fd08:	2000      	movs	r0, #0
 800fd0a:	b003      	add	sp, #12
 800fd0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd10:	f000 b892 	b.w	800fe38 <__kernel_sinf>
 800fd14:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fd18:	d304      	bcc.n	800fd24 <sinf+0x30>
 800fd1a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fd1e:	b003      	add	sp, #12
 800fd20:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd24:	4668      	mov	r0, sp
 800fd26:	f000 f8cf 	bl	800fec8 <__ieee754_rem_pio2f>
 800fd2a:	f000 0003 	and.w	r0, r0, #3
 800fd2e:	2801      	cmp	r0, #1
 800fd30:	d00a      	beq.n	800fd48 <sinf+0x54>
 800fd32:	2802      	cmp	r0, #2
 800fd34:	d00f      	beq.n	800fd56 <sinf+0x62>
 800fd36:	b9c0      	cbnz	r0, 800fd6a <sinf+0x76>
 800fd38:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd3c:	ed9d 0a00 	vldr	s0, [sp]
 800fd40:	2001      	movs	r0, #1
 800fd42:	f000 f879 	bl	800fe38 <__kernel_sinf>
 800fd46:	e7ea      	b.n	800fd1e <sinf+0x2a>
 800fd48:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd4c:	ed9d 0a00 	vldr	s0, [sp]
 800fd50:	f000 f81a 	bl	800fd88 <__kernel_cosf>
 800fd54:	e7e3      	b.n	800fd1e <sinf+0x2a>
 800fd56:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd5a:	ed9d 0a00 	vldr	s0, [sp]
 800fd5e:	2001      	movs	r0, #1
 800fd60:	f000 f86a 	bl	800fe38 <__kernel_sinf>
 800fd64:	eeb1 0a40 	vneg.f32	s0, s0
 800fd68:	e7d9      	b.n	800fd1e <sinf+0x2a>
 800fd6a:	eddd 0a01 	vldr	s1, [sp, #4]
 800fd6e:	ed9d 0a00 	vldr	s0, [sp]
 800fd72:	f000 f809 	bl	800fd88 <__kernel_cosf>
 800fd76:	e7f5      	b.n	800fd64 <sinf+0x70>
 800fd78:	3f490fd8 	.word	0x3f490fd8
 800fd7c:	00000000 	.word	0x00000000

0800fd80 <__ieee754_sqrtf>:
 800fd80:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fd84:	4770      	bx	lr
	...

0800fd88 <__kernel_cosf>:
 800fd88:	ee10 3a10 	vmov	r3, s0
 800fd8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fd90:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fd94:	eef0 6a40 	vmov.f32	s13, s0
 800fd98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fd9c:	d204      	bcs.n	800fda8 <__kernel_cosf+0x20>
 800fd9e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800fda2:	ee17 2a90 	vmov	r2, s15
 800fda6:	b342      	cbz	r2, 800fdfa <__kernel_cosf+0x72>
 800fda8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fdac:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800fe18 <__kernel_cosf+0x90>
 800fdb0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800fe1c <__kernel_cosf+0x94>
 800fdb4:	4a1a      	ldr	r2, [pc, #104]	@ (800fe20 <__kernel_cosf+0x98>)
 800fdb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fe24 <__kernel_cosf+0x9c>
 800fdc0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fdc4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800fe28 <__kernel_cosf+0xa0>
 800fdc8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fdcc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800fe2c <__kernel_cosf+0xa4>
 800fdd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fdd4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800fe30 <__kernel_cosf+0xa8>
 800fdd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fddc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800fde0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800fde4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fde8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800fdec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdf0:	d804      	bhi.n	800fdfc <__kernel_cosf+0x74>
 800fdf2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800fdf6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fdfa:	4770      	bx	lr
 800fdfc:	4a0d      	ldr	r2, [pc, #52]	@ (800fe34 <__kernel_cosf+0xac>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	bf9a      	itte	ls
 800fe02:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800fe06:	ee07 3a10 	vmovls	s14, r3
 800fe0a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800fe0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fe12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe16:	e7ec      	b.n	800fdf2 <__kernel_cosf+0x6a>
 800fe18:	ad47d74e 	.word	0xad47d74e
 800fe1c:	310f74f6 	.word	0x310f74f6
 800fe20:	3e999999 	.word	0x3e999999
 800fe24:	b493f27c 	.word	0xb493f27c
 800fe28:	37d00d01 	.word	0x37d00d01
 800fe2c:	bab60b61 	.word	0xbab60b61
 800fe30:	3d2aaaab 	.word	0x3d2aaaab
 800fe34:	3f480000 	.word	0x3f480000

0800fe38 <__kernel_sinf>:
 800fe38:	ee10 3a10 	vmov	r3, s0
 800fe3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fe40:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800fe44:	d204      	bcs.n	800fe50 <__kernel_sinf+0x18>
 800fe46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fe4a:	ee17 3a90 	vmov	r3, s15
 800fe4e:	b35b      	cbz	r3, 800fea8 <__kernel_sinf+0x70>
 800fe50:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fe54:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800feac <__kernel_sinf+0x74>
 800fe58:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800feb0 <__kernel_sinf+0x78>
 800fe5c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fe60:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800feb4 <__kernel_sinf+0x7c>
 800fe64:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fe68:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800feb8 <__kernel_sinf+0x80>
 800fe6c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fe70:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800febc <__kernel_sinf+0x84>
 800fe74:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fe78:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fe7c:	b930      	cbnz	r0, 800fe8c <__kernel_sinf+0x54>
 800fe7e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800fec0 <__kernel_sinf+0x88>
 800fe82:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fe86:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fe8a:	4770      	bx	lr
 800fe8c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fe90:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800fe94:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fe98:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fe9c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800fec4 <__kernel_sinf+0x8c>
 800fea0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fea4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	2f2ec9d3 	.word	0x2f2ec9d3
 800feb0:	b2d72f34 	.word	0xb2d72f34
 800feb4:	3638ef1b 	.word	0x3638ef1b
 800feb8:	b9500d01 	.word	0xb9500d01
 800febc:	3c088889 	.word	0x3c088889
 800fec0:	be2aaaab 	.word	0xbe2aaaab
 800fec4:	3e2aaaab 	.word	0x3e2aaaab

0800fec8 <__ieee754_rem_pio2f>:
 800fec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800feca:	ee10 6a10 	vmov	r6, s0
 800fece:	4b88      	ldr	r3, [pc, #544]	@ (80100f0 <__ieee754_rem_pio2f+0x228>)
 800fed0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800fed4:	429d      	cmp	r5, r3
 800fed6:	b087      	sub	sp, #28
 800fed8:	4604      	mov	r4, r0
 800feda:	d805      	bhi.n	800fee8 <__ieee754_rem_pio2f+0x20>
 800fedc:	2300      	movs	r3, #0
 800fede:	ed80 0a00 	vstr	s0, [r0]
 800fee2:	6043      	str	r3, [r0, #4]
 800fee4:	2000      	movs	r0, #0
 800fee6:	e022      	b.n	800ff2e <__ieee754_rem_pio2f+0x66>
 800fee8:	4b82      	ldr	r3, [pc, #520]	@ (80100f4 <__ieee754_rem_pio2f+0x22c>)
 800feea:	429d      	cmp	r5, r3
 800feec:	d83a      	bhi.n	800ff64 <__ieee754_rem_pio2f+0x9c>
 800feee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fef2:	2e00      	cmp	r6, #0
 800fef4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80100f8 <__ieee754_rem_pio2f+0x230>
 800fef8:	4a80      	ldr	r2, [pc, #512]	@ (80100fc <__ieee754_rem_pio2f+0x234>)
 800fefa:	f023 030f 	bic.w	r3, r3, #15
 800fefe:	dd18      	ble.n	800ff32 <__ieee754_rem_pio2f+0x6a>
 800ff00:	4293      	cmp	r3, r2
 800ff02:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ff06:	bf09      	itett	eq
 800ff08:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8010100 <__ieee754_rem_pio2f+0x238>
 800ff0c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8010104 <__ieee754_rem_pio2f+0x23c>
 800ff10:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8010108 <__ieee754_rem_pio2f+0x240>
 800ff14:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ff18:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800ff1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff20:	ed80 7a00 	vstr	s14, [r0]
 800ff24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ff28:	edc0 7a01 	vstr	s15, [r0, #4]
 800ff2c:	2001      	movs	r0, #1
 800ff2e:	b007      	add	sp, #28
 800ff30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff32:	4293      	cmp	r3, r2
 800ff34:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ff38:	bf09      	itett	eq
 800ff3a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8010100 <__ieee754_rem_pio2f+0x238>
 800ff3e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8010104 <__ieee754_rem_pio2f+0x23c>
 800ff42:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8010108 <__ieee754_rem_pio2f+0x240>
 800ff46:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ff4a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ff4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff52:	ed80 7a00 	vstr	s14, [r0]
 800ff56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff5a:	edc0 7a01 	vstr	s15, [r0, #4]
 800ff5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff62:	e7e4      	b.n	800ff2e <__ieee754_rem_pio2f+0x66>
 800ff64:	4b69      	ldr	r3, [pc, #420]	@ (801010c <__ieee754_rem_pio2f+0x244>)
 800ff66:	429d      	cmp	r5, r3
 800ff68:	d873      	bhi.n	8010052 <__ieee754_rem_pio2f+0x18a>
 800ff6a:	f7ff febb 	bl	800fce4 <fabsf>
 800ff6e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8010110 <__ieee754_rem_pio2f+0x248>
 800ff72:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ff76:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ff7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ff82:	ee17 0a90 	vmov	r0, s15
 800ff86:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80100f8 <__ieee754_rem_pio2f+0x230>
 800ff8a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ff8e:	281f      	cmp	r0, #31
 800ff90:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010104 <__ieee754_rem_pio2f+0x23c>
 800ff94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff98:	eeb1 6a47 	vneg.f32	s12, s14
 800ff9c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ffa0:	ee16 1a90 	vmov	r1, s13
 800ffa4:	dc09      	bgt.n	800ffba <__ieee754_rem_pio2f+0xf2>
 800ffa6:	4a5b      	ldr	r2, [pc, #364]	@ (8010114 <__ieee754_rem_pio2f+0x24c>)
 800ffa8:	1e47      	subs	r7, r0, #1
 800ffaa:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ffae:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800ffb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ffb6:	4293      	cmp	r3, r2
 800ffb8:	d107      	bne.n	800ffca <__ieee754_rem_pio2f+0x102>
 800ffba:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800ffbe:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800ffc2:	2a08      	cmp	r2, #8
 800ffc4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ffc8:	dc14      	bgt.n	800fff4 <__ieee754_rem_pio2f+0x12c>
 800ffca:	6021      	str	r1, [r4, #0]
 800ffcc:	ed94 7a00 	vldr	s14, [r4]
 800ffd0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ffd4:	2e00      	cmp	r6, #0
 800ffd6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ffda:	ed84 0a01 	vstr	s0, [r4, #4]
 800ffde:	daa6      	bge.n	800ff2e <__ieee754_rem_pio2f+0x66>
 800ffe0:	eeb1 7a47 	vneg.f32	s14, s14
 800ffe4:	eeb1 0a40 	vneg.f32	s0, s0
 800ffe8:	ed84 7a00 	vstr	s14, [r4]
 800ffec:	ed84 0a01 	vstr	s0, [r4, #4]
 800fff0:	4240      	negs	r0, r0
 800fff2:	e79c      	b.n	800ff2e <__ieee754_rem_pio2f+0x66>
 800fff4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8010100 <__ieee754_rem_pio2f+0x238>
 800fff8:	eef0 6a40 	vmov.f32	s13, s0
 800fffc:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010000:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010004:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010008:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8010108 <__ieee754_rem_pio2f+0x240>
 801000c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010010:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010014:	ee15 2a90 	vmov	r2, s11
 8010018:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801001c:	1a5b      	subs	r3, r3, r1
 801001e:	2b19      	cmp	r3, #25
 8010020:	dc04      	bgt.n	801002c <__ieee754_rem_pio2f+0x164>
 8010022:	edc4 5a00 	vstr	s11, [r4]
 8010026:	eeb0 0a66 	vmov.f32	s0, s13
 801002a:	e7cf      	b.n	800ffcc <__ieee754_rem_pio2f+0x104>
 801002c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8010118 <__ieee754_rem_pio2f+0x250>
 8010030:	eeb0 0a66 	vmov.f32	s0, s13
 8010034:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010038:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801003c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801011c <__ieee754_rem_pio2f+0x254>
 8010040:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010044:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010048:	ee30 7a67 	vsub.f32	s14, s0, s15
 801004c:	ed84 7a00 	vstr	s14, [r4]
 8010050:	e7bc      	b.n	800ffcc <__ieee754_rem_pio2f+0x104>
 8010052:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8010056:	d306      	bcc.n	8010066 <__ieee754_rem_pio2f+0x19e>
 8010058:	ee70 7a40 	vsub.f32	s15, s0, s0
 801005c:	edc0 7a01 	vstr	s15, [r0, #4]
 8010060:	edc0 7a00 	vstr	s15, [r0]
 8010064:	e73e      	b.n	800fee4 <__ieee754_rem_pio2f+0x1c>
 8010066:	15ea      	asrs	r2, r5, #23
 8010068:	3a86      	subs	r2, #134	@ 0x86
 801006a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801006e:	ee07 3a90 	vmov	s15, r3
 8010072:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010076:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8010120 <__ieee754_rem_pio2f+0x258>
 801007a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801007e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010082:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010086:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801008a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801008e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010092:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010096:	ed8d 7a04 	vstr	s14, [sp, #16]
 801009a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801009e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80100a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a6:	edcd 7a05 	vstr	s15, [sp, #20]
 80100aa:	d11e      	bne.n	80100ea <__ieee754_rem_pio2f+0x222>
 80100ac:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80100b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b4:	bf0c      	ite	eq
 80100b6:	2301      	moveq	r3, #1
 80100b8:	2302      	movne	r3, #2
 80100ba:	491a      	ldr	r1, [pc, #104]	@ (8010124 <__ieee754_rem_pio2f+0x25c>)
 80100bc:	9101      	str	r1, [sp, #4]
 80100be:	2102      	movs	r1, #2
 80100c0:	9100      	str	r1, [sp, #0]
 80100c2:	a803      	add	r0, sp, #12
 80100c4:	4621      	mov	r1, r4
 80100c6:	f000 f82f 	bl	8010128 <__kernel_rem_pio2f>
 80100ca:	2e00      	cmp	r6, #0
 80100cc:	f6bf af2f 	bge.w	800ff2e <__ieee754_rem_pio2f+0x66>
 80100d0:	edd4 7a00 	vldr	s15, [r4]
 80100d4:	eef1 7a67 	vneg.f32	s15, s15
 80100d8:	edc4 7a00 	vstr	s15, [r4]
 80100dc:	edd4 7a01 	vldr	s15, [r4, #4]
 80100e0:	eef1 7a67 	vneg.f32	s15, s15
 80100e4:	edc4 7a01 	vstr	s15, [r4, #4]
 80100e8:	e782      	b.n	800fff0 <__ieee754_rem_pio2f+0x128>
 80100ea:	2303      	movs	r3, #3
 80100ec:	e7e5      	b.n	80100ba <__ieee754_rem_pio2f+0x1f2>
 80100ee:	bf00      	nop
 80100f0:	3f490fd8 	.word	0x3f490fd8
 80100f4:	4016cbe3 	.word	0x4016cbe3
 80100f8:	3fc90f80 	.word	0x3fc90f80
 80100fc:	3fc90fd0 	.word	0x3fc90fd0
 8010100:	37354400 	.word	0x37354400
 8010104:	37354443 	.word	0x37354443
 8010108:	2e85a308 	.word	0x2e85a308
 801010c:	43490f80 	.word	0x43490f80
 8010110:	3f22f984 	.word	0x3f22f984
 8010114:	08011404 	.word	0x08011404
 8010118:	2e85a300 	.word	0x2e85a300
 801011c:	248d3132 	.word	0x248d3132
 8010120:	43800000 	.word	0x43800000
 8010124:	08011484 	.word	0x08011484

08010128 <__kernel_rem_pio2f>:
 8010128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801012c:	ed2d 8b04 	vpush	{d8-d9}
 8010130:	b0d9      	sub	sp, #356	@ 0x164
 8010132:	4690      	mov	r8, r2
 8010134:	9001      	str	r0, [sp, #4]
 8010136:	4ab9      	ldr	r2, [pc, #740]	@ (801041c <__kernel_rem_pio2f+0x2f4>)
 8010138:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801013a:	f118 0f04 	cmn.w	r8, #4
 801013e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010142:	460f      	mov	r7, r1
 8010144:	f103 3bff 	add.w	fp, r3, #4294967295
 8010148:	db27      	blt.n	801019a <__kernel_rem_pio2f+0x72>
 801014a:	f1b8 0203 	subs.w	r2, r8, #3
 801014e:	bf48      	it	mi
 8010150:	f108 0204 	addmi.w	r2, r8, #4
 8010154:	10d2      	asrs	r2, r2, #3
 8010156:	1c55      	adds	r5, r2, #1
 8010158:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801015a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801042c <__kernel_rem_pio2f+0x304>
 801015e:	00e8      	lsls	r0, r5, #3
 8010160:	eba2 060b 	sub.w	r6, r2, fp
 8010164:	9002      	str	r0, [sp, #8]
 8010166:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801016a:	eb0a 0c0b 	add.w	ip, sl, fp
 801016e:	ac1c      	add	r4, sp, #112	@ 0x70
 8010170:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010174:	2000      	movs	r0, #0
 8010176:	4560      	cmp	r0, ip
 8010178:	dd11      	ble.n	801019e <__kernel_rem_pio2f+0x76>
 801017a:	a91c      	add	r1, sp, #112	@ 0x70
 801017c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010180:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010184:	f04f 0c00 	mov.w	ip, #0
 8010188:	45d4      	cmp	ip, sl
 801018a:	dc27      	bgt.n	80101dc <__kernel_rem_pio2f+0xb4>
 801018c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010190:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801042c <__kernel_rem_pio2f+0x304>
 8010194:	4606      	mov	r6, r0
 8010196:	2400      	movs	r4, #0
 8010198:	e016      	b.n	80101c8 <__kernel_rem_pio2f+0xa0>
 801019a:	2200      	movs	r2, #0
 801019c:	e7db      	b.n	8010156 <__kernel_rem_pio2f+0x2e>
 801019e:	42c6      	cmn	r6, r0
 80101a0:	bf5d      	ittte	pl
 80101a2:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80101a6:	ee07 1a90 	vmovpl	s15, r1
 80101aa:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80101ae:	eef0 7a47 	vmovmi.f32	s15, s14
 80101b2:	ece4 7a01 	vstmia	r4!, {s15}
 80101b6:	3001      	adds	r0, #1
 80101b8:	e7dd      	b.n	8010176 <__kernel_rem_pio2f+0x4e>
 80101ba:	ecfe 6a01 	vldmia	lr!, {s13}
 80101be:	ed96 7a00 	vldr	s14, [r6]
 80101c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80101c6:	3401      	adds	r4, #1
 80101c8:	455c      	cmp	r4, fp
 80101ca:	f1a6 0604 	sub.w	r6, r6, #4
 80101ce:	ddf4      	ble.n	80101ba <__kernel_rem_pio2f+0x92>
 80101d0:	ece9 7a01 	vstmia	r9!, {s15}
 80101d4:	f10c 0c01 	add.w	ip, ip, #1
 80101d8:	3004      	adds	r0, #4
 80101da:	e7d5      	b.n	8010188 <__kernel_rem_pio2f+0x60>
 80101dc:	a908      	add	r1, sp, #32
 80101de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80101e2:	9104      	str	r1, [sp, #16]
 80101e4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80101e6:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8010428 <__kernel_rem_pio2f+0x300>
 80101ea:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8010424 <__kernel_rem_pio2f+0x2fc>
 80101ee:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80101f2:	9203      	str	r2, [sp, #12]
 80101f4:	4654      	mov	r4, sl
 80101f6:	00a2      	lsls	r2, r4, #2
 80101f8:	9205      	str	r2, [sp, #20]
 80101fa:	aa58      	add	r2, sp, #352	@ 0x160
 80101fc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010200:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010204:	a944      	add	r1, sp, #272	@ 0x110
 8010206:	aa08      	add	r2, sp, #32
 8010208:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801020c:	4694      	mov	ip, r2
 801020e:	4626      	mov	r6, r4
 8010210:	2e00      	cmp	r6, #0
 8010212:	f1a0 0004 	sub.w	r0, r0, #4
 8010216:	dc4c      	bgt.n	80102b2 <__kernel_rem_pio2f+0x18a>
 8010218:	4628      	mov	r0, r5
 801021a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801021e:	f000 f9f5 	bl	801060c <scalbnf>
 8010222:	eeb0 8a40 	vmov.f32	s16, s0
 8010226:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801022a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801022e:	f000 fa53 	bl	80106d8 <floorf>
 8010232:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010236:	eea0 8a67 	vfms.f32	s16, s0, s15
 801023a:	2d00      	cmp	r5, #0
 801023c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010240:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010244:	ee17 9a90 	vmov	r9, s15
 8010248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801024c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010250:	dd41      	ble.n	80102d6 <__kernel_rem_pio2f+0x1ae>
 8010252:	f104 3cff 	add.w	ip, r4, #4294967295
 8010256:	a908      	add	r1, sp, #32
 8010258:	f1c5 0e08 	rsb	lr, r5, #8
 801025c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010260:	fa46 f00e 	asr.w	r0, r6, lr
 8010264:	4481      	add	r9, r0
 8010266:	fa00 f00e 	lsl.w	r0, r0, lr
 801026a:	1a36      	subs	r6, r6, r0
 801026c:	f1c5 0007 	rsb	r0, r5, #7
 8010270:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010274:	4106      	asrs	r6, r0
 8010276:	2e00      	cmp	r6, #0
 8010278:	dd3c      	ble.n	80102f4 <__kernel_rem_pio2f+0x1cc>
 801027a:	f04f 0e00 	mov.w	lr, #0
 801027e:	f109 0901 	add.w	r9, r9, #1
 8010282:	4670      	mov	r0, lr
 8010284:	4574      	cmp	r4, lr
 8010286:	dc68      	bgt.n	801035a <__kernel_rem_pio2f+0x232>
 8010288:	2d00      	cmp	r5, #0
 801028a:	dd03      	ble.n	8010294 <__kernel_rem_pio2f+0x16c>
 801028c:	2d01      	cmp	r5, #1
 801028e:	d074      	beq.n	801037a <__kernel_rem_pio2f+0x252>
 8010290:	2d02      	cmp	r5, #2
 8010292:	d07d      	beq.n	8010390 <__kernel_rem_pio2f+0x268>
 8010294:	2e02      	cmp	r6, #2
 8010296:	d12d      	bne.n	80102f4 <__kernel_rem_pio2f+0x1cc>
 8010298:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801029c:	ee30 8a48 	vsub.f32	s16, s0, s16
 80102a0:	b340      	cbz	r0, 80102f4 <__kernel_rem_pio2f+0x1cc>
 80102a2:	4628      	mov	r0, r5
 80102a4:	9306      	str	r3, [sp, #24]
 80102a6:	f000 f9b1 	bl	801060c <scalbnf>
 80102aa:	9b06      	ldr	r3, [sp, #24]
 80102ac:	ee38 8a40 	vsub.f32	s16, s16, s0
 80102b0:	e020      	b.n	80102f4 <__kernel_rem_pio2f+0x1cc>
 80102b2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80102b6:	3e01      	subs	r6, #1
 80102b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80102c0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80102c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80102c8:	ecac 0a01 	vstmia	ip!, {s0}
 80102cc:	ed90 0a00 	vldr	s0, [r0]
 80102d0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80102d4:	e79c      	b.n	8010210 <__kernel_rem_pio2f+0xe8>
 80102d6:	d105      	bne.n	80102e4 <__kernel_rem_pio2f+0x1bc>
 80102d8:	1e60      	subs	r0, r4, #1
 80102da:	a908      	add	r1, sp, #32
 80102dc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80102e0:	11f6      	asrs	r6, r6, #7
 80102e2:	e7c8      	b.n	8010276 <__kernel_rem_pio2f+0x14e>
 80102e4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80102e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80102ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f0:	da31      	bge.n	8010356 <__kernel_rem_pio2f+0x22e>
 80102f2:	2600      	movs	r6, #0
 80102f4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80102f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102fc:	f040 8098 	bne.w	8010430 <__kernel_rem_pio2f+0x308>
 8010300:	1e60      	subs	r0, r4, #1
 8010302:	2200      	movs	r2, #0
 8010304:	4550      	cmp	r0, sl
 8010306:	da4b      	bge.n	80103a0 <__kernel_rem_pio2f+0x278>
 8010308:	2a00      	cmp	r2, #0
 801030a:	d065      	beq.n	80103d8 <__kernel_rem_pio2f+0x2b0>
 801030c:	3c01      	subs	r4, #1
 801030e:	ab08      	add	r3, sp, #32
 8010310:	3d08      	subs	r5, #8
 8010312:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d0f8      	beq.n	801030c <__kernel_rem_pio2f+0x1e4>
 801031a:	4628      	mov	r0, r5
 801031c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010320:	f000 f974 	bl	801060c <scalbnf>
 8010324:	1c63      	adds	r3, r4, #1
 8010326:	aa44      	add	r2, sp, #272	@ 0x110
 8010328:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8010428 <__kernel_rem_pio2f+0x300>
 801032c:	0099      	lsls	r1, r3, #2
 801032e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010332:	4623      	mov	r3, r4
 8010334:	2b00      	cmp	r3, #0
 8010336:	f280 80a9 	bge.w	801048c <__kernel_rem_pio2f+0x364>
 801033a:	4623      	mov	r3, r4
 801033c:	2b00      	cmp	r3, #0
 801033e:	f2c0 80c7 	blt.w	80104d0 <__kernel_rem_pio2f+0x3a8>
 8010342:	aa44      	add	r2, sp, #272	@ 0x110
 8010344:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010348:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8010420 <__kernel_rem_pio2f+0x2f8>
 801034c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801042c <__kernel_rem_pio2f+0x304>
 8010350:	2000      	movs	r0, #0
 8010352:	1ae2      	subs	r2, r4, r3
 8010354:	e0b1      	b.n	80104ba <__kernel_rem_pio2f+0x392>
 8010356:	2602      	movs	r6, #2
 8010358:	e78f      	b.n	801027a <__kernel_rem_pio2f+0x152>
 801035a:	f852 1b04 	ldr.w	r1, [r2], #4
 801035e:	b948      	cbnz	r0, 8010374 <__kernel_rem_pio2f+0x24c>
 8010360:	b121      	cbz	r1, 801036c <__kernel_rem_pio2f+0x244>
 8010362:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010366:	f842 1c04 	str.w	r1, [r2, #-4]
 801036a:	2101      	movs	r1, #1
 801036c:	f10e 0e01 	add.w	lr, lr, #1
 8010370:	4608      	mov	r0, r1
 8010372:	e787      	b.n	8010284 <__kernel_rem_pio2f+0x15c>
 8010374:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010378:	e7f5      	b.n	8010366 <__kernel_rem_pio2f+0x23e>
 801037a:	f104 3cff 	add.w	ip, r4, #4294967295
 801037e:	aa08      	add	r2, sp, #32
 8010380:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010384:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010388:	a908      	add	r1, sp, #32
 801038a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801038e:	e781      	b.n	8010294 <__kernel_rem_pio2f+0x16c>
 8010390:	f104 3cff 	add.w	ip, r4, #4294967295
 8010394:	aa08      	add	r2, sp, #32
 8010396:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801039a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801039e:	e7f3      	b.n	8010388 <__kernel_rem_pio2f+0x260>
 80103a0:	a908      	add	r1, sp, #32
 80103a2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80103a6:	3801      	subs	r0, #1
 80103a8:	430a      	orrs	r2, r1
 80103aa:	e7ab      	b.n	8010304 <__kernel_rem_pio2f+0x1dc>
 80103ac:	3201      	adds	r2, #1
 80103ae:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80103b2:	2e00      	cmp	r6, #0
 80103b4:	d0fa      	beq.n	80103ac <__kernel_rem_pio2f+0x284>
 80103b6:	9905      	ldr	r1, [sp, #20]
 80103b8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80103bc:	eb0d 0001 	add.w	r0, sp, r1
 80103c0:	18e6      	adds	r6, r4, r3
 80103c2:	a91c      	add	r1, sp, #112	@ 0x70
 80103c4:	f104 0c01 	add.w	ip, r4, #1
 80103c8:	384c      	subs	r0, #76	@ 0x4c
 80103ca:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80103ce:	4422      	add	r2, r4
 80103d0:	4562      	cmp	r2, ip
 80103d2:	da04      	bge.n	80103de <__kernel_rem_pio2f+0x2b6>
 80103d4:	4614      	mov	r4, r2
 80103d6:	e70e      	b.n	80101f6 <__kernel_rem_pio2f+0xce>
 80103d8:	9804      	ldr	r0, [sp, #16]
 80103da:	2201      	movs	r2, #1
 80103dc:	e7e7      	b.n	80103ae <__kernel_rem_pio2f+0x286>
 80103de:	9903      	ldr	r1, [sp, #12]
 80103e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80103e4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80103e8:	9105      	str	r1, [sp, #20]
 80103ea:	ee07 1a90 	vmov	s15, r1
 80103ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103f2:	2400      	movs	r4, #0
 80103f4:	ece6 7a01 	vstmia	r6!, {s15}
 80103f8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801042c <__kernel_rem_pio2f+0x304>
 80103fc:	46b1      	mov	r9, r6
 80103fe:	455c      	cmp	r4, fp
 8010400:	dd04      	ble.n	801040c <__kernel_rem_pio2f+0x2e4>
 8010402:	ece0 7a01 	vstmia	r0!, {s15}
 8010406:	f10c 0c01 	add.w	ip, ip, #1
 801040a:	e7e1      	b.n	80103d0 <__kernel_rem_pio2f+0x2a8>
 801040c:	ecfe 6a01 	vldmia	lr!, {s13}
 8010410:	ed39 7a01 	vldmdb	r9!, {s14}
 8010414:	3401      	adds	r4, #1
 8010416:	eee6 7a87 	vfma.f32	s15, s13, s14
 801041a:	e7f0      	b.n	80103fe <__kernel_rem_pio2f+0x2d6>
 801041c:	080117c8 	.word	0x080117c8
 8010420:	0801179c 	.word	0x0801179c
 8010424:	43800000 	.word	0x43800000
 8010428:	3b800000 	.word	0x3b800000
 801042c:	00000000 	.word	0x00000000
 8010430:	9b02      	ldr	r3, [sp, #8]
 8010432:	eeb0 0a48 	vmov.f32	s0, s16
 8010436:	eba3 0008 	sub.w	r0, r3, r8
 801043a:	f000 f8e7 	bl	801060c <scalbnf>
 801043e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8010424 <__kernel_rem_pio2f+0x2fc>
 8010442:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801044a:	db19      	blt.n	8010480 <__kernel_rem_pio2f+0x358>
 801044c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8010428 <__kernel_rem_pio2f+0x300>
 8010450:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010454:	aa08      	add	r2, sp, #32
 8010456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801045a:	3508      	adds	r5, #8
 801045c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010460:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010468:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801046c:	ee10 3a10 	vmov	r3, s0
 8010470:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010474:	ee17 3a90 	vmov	r3, s15
 8010478:	3401      	adds	r4, #1
 801047a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801047e:	e74c      	b.n	801031a <__kernel_rem_pio2f+0x1f2>
 8010480:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010484:	aa08      	add	r2, sp, #32
 8010486:	ee10 3a10 	vmov	r3, s0
 801048a:	e7f6      	b.n	801047a <__kernel_rem_pio2f+0x352>
 801048c:	a808      	add	r0, sp, #32
 801048e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010492:	9001      	str	r0, [sp, #4]
 8010494:	ee07 0a90 	vmov	s15, r0
 8010498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801049c:	3b01      	subs	r3, #1
 801049e:	ee67 7a80 	vmul.f32	s15, s15, s0
 80104a2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80104a6:	ed62 7a01 	vstmdb	r2!, {s15}
 80104aa:	e743      	b.n	8010334 <__kernel_rem_pio2f+0x20c>
 80104ac:	ecfc 6a01 	vldmia	ip!, {s13}
 80104b0:	ecb5 7a01 	vldmia	r5!, {s14}
 80104b4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80104b8:	3001      	adds	r0, #1
 80104ba:	4550      	cmp	r0, sl
 80104bc:	dc01      	bgt.n	80104c2 <__kernel_rem_pio2f+0x39a>
 80104be:	4282      	cmp	r2, r0
 80104c0:	daf4      	bge.n	80104ac <__kernel_rem_pio2f+0x384>
 80104c2:	a858      	add	r0, sp, #352	@ 0x160
 80104c4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80104c8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80104cc:	3b01      	subs	r3, #1
 80104ce:	e735      	b.n	801033c <__kernel_rem_pio2f+0x214>
 80104d0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80104d2:	2b02      	cmp	r3, #2
 80104d4:	dc09      	bgt.n	80104ea <__kernel_rem_pio2f+0x3c2>
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	dc2b      	bgt.n	8010532 <__kernel_rem_pio2f+0x40a>
 80104da:	d044      	beq.n	8010566 <__kernel_rem_pio2f+0x43e>
 80104dc:	f009 0007 	and.w	r0, r9, #7
 80104e0:	b059      	add	sp, #356	@ 0x164
 80104e2:	ecbd 8b04 	vpop	{d8-d9}
 80104e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ea:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80104ec:	2b03      	cmp	r3, #3
 80104ee:	d1f5      	bne.n	80104dc <__kernel_rem_pio2f+0x3b4>
 80104f0:	aa30      	add	r2, sp, #192	@ 0xc0
 80104f2:	1f0b      	subs	r3, r1, #4
 80104f4:	4413      	add	r3, r2
 80104f6:	461a      	mov	r2, r3
 80104f8:	4620      	mov	r0, r4
 80104fa:	2800      	cmp	r0, #0
 80104fc:	f1a2 0204 	sub.w	r2, r2, #4
 8010500:	dc52      	bgt.n	80105a8 <__kernel_rem_pio2f+0x480>
 8010502:	4622      	mov	r2, r4
 8010504:	2a01      	cmp	r2, #1
 8010506:	f1a3 0304 	sub.w	r3, r3, #4
 801050a:	dc5d      	bgt.n	80105c8 <__kernel_rem_pio2f+0x4a0>
 801050c:	ab30      	add	r3, sp, #192	@ 0xc0
 801050e:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801042c <__kernel_rem_pio2f+0x304>
 8010512:	440b      	add	r3, r1
 8010514:	2c01      	cmp	r4, #1
 8010516:	dc67      	bgt.n	80105e8 <__kernel_rem_pio2f+0x4c0>
 8010518:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801051c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8010520:	2e00      	cmp	r6, #0
 8010522:	d167      	bne.n	80105f4 <__kernel_rem_pio2f+0x4cc>
 8010524:	edc7 6a00 	vstr	s13, [r7]
 8010528:	ed87 7a01 	vstr	s14, [r7, #4]
 801052c:	edc7 7a02 	vstr	s15, [r7, #8]
 8010530:	e7d4      	b.n	80104dc <__kernel_rem_pio2f+0x3b4>
 8010532:	ab30      	add	r3, sp, #192	@ 0xc0
 8010534:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801042c <__kernel_rem_pio2f+0x304>
 8010538:	440b      	add	r3, r1
 801053a:	4622      	mov	r2, r4
 801053c:	2a00      	cmp	r2, #0
 801053e:	da24      	bge.n	801058a <__kernel_rem_pio2f+0x462>
 8010540:	b34e      	cbz	r6, 8010596 <__kernel_rem_pio2f+0x46e>
 8010542:	eef1 7a47 	vneg.f32	s15, s14
 8010546:	edc7 7a00 	vstr	s15, [r7]
 801054a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801054e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010552:	aa31      	add	r2, sp, #196	@ 0xc4
 8010554:	2301      	movs	r3, #1
 8010556:	429c      	cmp	r4, r3
 8010558:	da20      	bge.n	801059c <__kernel_rem_pio2f+0x474>
 801055a:	b10e      	cbz	r6, 8010560 <__kernel_rem_pio2f+0x438>
 801055c:	eef1 7a67 	vneg.f32	s15, s15
 8010560:	edc7 7a01 	vstr	s15, [r7, #4]
 8010564:	e7ba      	b.n	80104dc <__kernel_rem_pio2f+0x3b4>
 8010566:	ab30      	add	r3, sp, #192	@ 0xc0
 8010568:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801042c <__kernel_rem_pio2f+0x304>
 801056c:	440b      	add	r3, r1
 801056e:	2c00      	cmp	r4, #0
 8010570:	da05      	bge.n	801057e <__kernel_rem_pio2f+0x456>
 8010572:	b10e      	cbz	r6, 8010578 <__kernel_rem_pio2f+0x450>
 8010574:	eef1 7a67 	vneg.f32	s15, s15
 8010578:	edc7 7a00 	vstr	s15, [r7]
 801057c:	e7ae      	b.n	80104dc <__kernel_rem_pio2f+0x3b4>
 801057e:	ed33 7a01 	vldmdb	r3!, {s14}
 8010582:	3c01      	subs	r4, #1
 8010584:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010588:	e7f1      	b.n	801056e <__kernel_rem_pio2f+0x446>
 801058a:	ed73 7a01 	vldmdb	r3!, {s15}
 801058e:	3a01      	subs	r2, #1
 8010590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010594:	e7d2      	b.n	801053c <__kernel_rem_pio2f+0x414>
 8010596:	eef0 7a47 	vmov.f32	s15, s14
 801059a:	e7d4      	b.n	8010546 <__kernel_rem_pio2f+0x41e>
 801059c:	ecb2 7a01 	vldmia	r2!, {s14}
 80105a0:	3301      	adds	r3, #1
 80105a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80105a6:	e7d6      	b.n	8010556 <__kernel_rem_pio2f+0x42e>
 80105a8:	edd2 7a00 	vldr	s15, [r2]
 80105ac:	edd2 6a01 	vldr	s13, [r2, #4]
 80105b0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80105b4:	3801      	subs	r0, #1
 80105b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80105ba:	ed82 7a00 	vstr	s14, [r2]
 80105be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80105c2:	edc2 7a01 	vstr	s15, [r2, #4]
 80105c6:	e798      	b.n	80104fa <__kernel_rem_pio2f+0x3d2>
 80105c8:	edd3 7a00 	vldr	s15, [r3]
 80105cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80105d0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80105d4:	3a01      	subs	r2, #1
 80105d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80105da:	ed83 7a00 	vstr	s14, [r3]
 80105de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80105e2:	edc3 7a01 	vstr	s15, [r3, #4]
 80105e6:	e78d      	b.n	8010504 <__kernel_rem_pio2f+0x3dc>
 80105e8:	ed33 7a01 	vldmdb	r3!, {s14}
 80105ec:	3c01      	subs	r4, #1
 80105ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80105f2:	e78f      	b.n	8010514 <__kernel_rem_pio2f+0x3ec>
 80105f4:	eef1 6a66 	vneg.f32	s13, s13
 80105f8:	eeb1 7a47 	vneg.f32	s14, s14
 80105fc:	edc7 6a00 	vstr	s13, [r7]
 8010600:	ed87 7a01 	vstr	s14, [r7, #4]
 8010604:	eef1 7a67 	vneg.f32	s15, s15
 8010608:	e790      	b.n	801052c <__kernel_rem_pio2f+0x404>
 801060a:	bf00      	nop

0801060c <scalbnf>:
 801060c:	ee10 3a10 	vmov	r3, s0
 8010610:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010614:	d02b      	beq.n	801066e <scalbnf+0x62>
 8010616:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801061a:	d302      	bcc.n	8010622 <scalbnf+0x16>
 801061c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010620:	4770      	bx	lr
 8010622:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010626:	d123      	bne.n	8010670 <scalbnf+0x64>
 8010628:	4b24      	ldr	r3, [pc, #144]	@ (80106bc <scalbnf+0xb0>)
 801062a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80106c0 <scalbnf+0xb4>
 801062e:	4298      	cmp	r0, r3
 8010630:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010634:	db17      	blt.n	8010666 <scalbnf+0x5a>
 8010636:	ee10 3a10 	vmov	r3, s0
 801063a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801063e:	3a19      	subs	r2, #25
 8010640:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010644:	4288      	cmp	r0, r1
 8010646:	dd15      	ble.n	8010674 <scalbnf+0x68>
 8010648:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80106c4 <scalbnf+0xb8>
 801064c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80106c8 <scalbnf+0xbc>
 8010650:	ee10 3a10 	vmov	r3, s0
 8010654:	eeb0 7a67 	vmov.f32	s14, s15
 8010658:	2b00      	cmp	r3, #0
 801065a:	bfb8      	it	lt
 801065c:	eef0 7a66 	vmovlt.f32	s15, s13
 8010660:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010664:	4770      	bx	lr
 8010666:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80106cc <scalbnf+0xc0>
 801066a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801066e:	4770      	bx	lr
 8010670:	0dd2      	lsrs	r2, r2, #23
 8010672:	e7e5      	b.n	8010640 <scalbnf+0x34>
 8010674:	4410      	add	r0, r2
 8010676:	28fe      	cmp	r0, #254	@ 0xfe
 8010678:	dce6      	bgt.n	8010648 <scalbnf+0x3c>
 801067a:	2800      	cmp	r0, #0
 801067c:	dd06      	ble.n	801068c <scalbnf+0x80>
 801067e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010682:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010686:	ee00 3a10 	vmov	s0, r3
 801068a:	4770      	bx	lr
 801068c:	f110 0f16 	cmn.w	r0, #22
 8010690:	da09      	bge.n	80106a6 <scalbnf+0x9a>
 8010692:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80106cc <scalbnf+0xc0>
 8010696:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80106d0 <scalbnf+0xc4>
 801069a:	ee10 3a10 	vmov	r3, s0
 801069e:	eeb0 7a67 	vmov.f32	s14, s15
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	e7d9      	b.n	801065a <scalbnf+0x4e>
 80106a6:	3019      	adds	r0, #25
 80106a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80106ac:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80106b0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80106d4 <scalbnf+0xc8>
 80106b4:	ee07 3a90 	vmov	s15, r3
 80106b8:	e7d7      	b.n	801066a <scalbnf+0x5e>
 80106ba:	bf00      	nop
 80106bc:	ffff3cb0 	.word	0xffff3cb0
 80106c0:	4c000000 	.word	0x4c000000
 80106c4:	7149f2ca 	.word	0x7149f2ca
 80106c8:	f149f2ca 	.word	0xf149f2ca
 80106cc:	0da24260 	.word	0x0da24260
 80106d0:	8da24260 	.word	0x8da24260
 80106d4:	33000000 	.word	0x33000000

080106d8 <floorf>:
 80106d8:	ee10 3a10 	vmov	r3, s0
 80106dc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80106e0:	3a7f      	subs	r2, #127	@ 0x7f
 80106e2:	2a16      	cmp	r2, #22
 80106e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80106e8:	dc2b      	bgt.n	8010742 <floorf+0x6a>
 80106ea:	2a00      	cmp	r2, #0
 80106ec:	da12      	bge.n	8010714 <floorf+0x3c>
 80106ee:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010754 <floorf+0x7c>
 80106f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80106f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80106fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106fe:	dd06      	ble.n	801070e <floorf+0x36>
 8010700:	2b00      	cmp	r3, #0
 8010702:	da24      	bge.n	801074e <floorf+0x76>
 8010704:	2900      	cmp	r1, #0
 8010706:	4b14      	ldr	r3, [pc, #80]	@ (8010758 <floorf+0x80>)
 8010708:	bf08      	it	eq
 801070a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801070e:	ee00 3a10 	vmov	s0, r3
 8010712:	4770      	bx	lr
 8010714:	4911      	ldr	r1, [pc, #68]	@ (801075c <floorf+0x84>)
 8010716:	4111      	asrs	r1, r2
 8010718:	420b      	tst	r3, r1
 801071a:	d0fa      	beq.n	8010712 <floorf+0x3a>
 801071c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010754 <floorf+0x7c>
 8010720:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010724:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801072c:	ddef      	ble.n	801070e <floorf+0x36>
 801072e:	2b00      	cmp	r3, #0
 8010730:	bfbe      	ittt	lt
 8010732:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010736:	fa40 f202 	asrlt.w	r2, r0, r2
 801073a:	189b      	addlt	r3, r3, r2
 801073c:	ea23 0301 	bic.w	r3, r3, r1
 8010740:	e7e5      	b.n	801070e <floorf+0x36>
 8010742:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010746:	d3e4      	bcc.n	8010712 <floorf+0x3a>
 8010748:	ee30 0a00 	vadd.f32	s0, s0, s0
 801074c:	4770      	bx	lr
 801074e:	2300      	movs	r3, #0
 8010750:	e7dd      	b.n	801070e <floorf+0x36>
 8010752:	bf00      	nop
 8010754:	7149f2ca 	.word	0x7149f2ca
 8010758:	bf800000 	.word	0xbf800000
 801075c:	007fffff 	.word	0x007fffff

08010760 <_kill>:
 8010760:	4b02      	ldr	r3, [pc, #8]	@ (801076c <_kill+0xc>)
 8010762:	2258      	movs	r2, #88	@ 0x58
 8010764:	601a      	str	r2, [r3, #0]
 8010766:	f04f 30ff 	mov.w	r0, #4294967295
 801076a:	4770      	bx	lr
 801076c:	20003914 	.word	0x20003914

08010770 <_exit>:
 8010770:	e7fe      	b.n	8010770 <_exit>
	...

08010774 <_init>:
 8010774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010776:	bf00      	nop
 8010778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801077a:	bc08      	pop	{r3}
 801077c:	469e      	mov	lr, r3
 801077e:	4770      	bx	lr

08010780 <_fini>:
 8010780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010782:	bf00      	nop
 8010784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010786:	bc08      	pop	{r3}
 8010788:	469e      	mov	lr, r3
 801078a:	4770      	bx	lr
