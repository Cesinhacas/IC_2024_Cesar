
MTS_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006c80  08006c80  00007c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cb8  08006cb8  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006cb8  08006cb8  00007cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cc0  08006cc0  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cc0  08006cc0  00007cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cc4  08006cc4  00007cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006cc8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000005c  08006d24  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08006d24  00008298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001014b  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b5  00000000  00000000  000181d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0001a490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4c  00000000  00000000  0001b1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000269a5  00000000  00000000  0001bc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145ba  00000000  00000000  000425b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f08f5  00000000  00000000  00056b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147460  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b8  00000000  00000000  001474a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0014ad5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006c68 	.word	0x08006c68

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	08006c68 	.word	0x08006c68

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <inverter_matriz>:
#include <math.h>
#include "calib.h"


void inverter_matriz(float matriz[N][N], float inversa[N][N])
{
 80004f8:	b480      	push	{r7}
 80004fa:	b08b      	sub	sp, #44	@ 0x2c
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
    // Inicializando a matriz identidade na matriz inversa
    for (int i = 0; i < N; i++) {
 8000502:	2300      	movs	r3, #0
 8000504:	627b      	str	r3, [r7, #36]	@ 0x24
 8000506:	e02c      	b.n	8000562 <inverter_matriz+0x6a>
        for (int j = 0; j < N; j++) {
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
 800050c:	e023      	b.n	8000556 <inverter_matriz+0x5e>
            if (i == j) {
 800050e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000510:	6a3b      	ldr	r3, [r7, #32]
 8000512:	429a      	cmp	r2, r3
 8000514:	d10e      	bne.n	8000534 <inverter_matriz+0x3c>
                inversa[i][j] = 1;
 8000516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000518:	4613      	mov	r3, r2
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	4413      	add	r3, r2
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	461a      	mov	r2, r3
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	441a      	add	r2, r3
 8000526:	6a3b      	ldr	r3, [r7, #32]
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	4413      	add	r3, r2
 800052c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e00d      	b.n	8000550 <inverter_matriz+0x58>
            } else {
                inversa[i][j] = 0;
 8000534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000536:	4613      	mov	r3, r2
 8000538:	00db      	lsls	r3, r3, #3
 800053a:	4413      	add	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	461a      	mov	r2, r3
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	441a      	add	r2, r3
 8000544:	6a3b      	ldr	r3, [r7, #32]
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	f04f 0200 	mov.w	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < N; j++) {
 8000550:	6a3b      	ldr	r3, [r7, #32]
 8000552:	3301      	adds	r3, #1
 8000554:	623b      	str	r3, [r7, #32]
 8000556:	6a3b      	ldr	r3, [r7, #32]
 8000558:	2b08      	cmp	r3, #8
 800055a:	ddd8      	ble.n	800050e <inverter_matriz+0x16>
    for (int i = 0; i < N; i++) {
 800055c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800055e:	3301      	adds	r3, #1
 8000560:	627b      	str	r3, [r7, #36]	@ 0x24
 8000562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000564:	2b08      	cmp	r3, #8
 8000566:	ddcf      	ble.n	8000508 <inverter_matriz+0x10>
            }
        }
    }

    // Aplicando o método de Gauss-Jordan
    for (int i = 0; i < N; i++)
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
 800056c:	e0d1      	b.n	8000712 <inverter_matriz+0x21a>
    {
        float pivot = matriz[i][i];
 800056e:	69fa      	ldr	r2, [r7, #28]
 8000570:	4613      	mov	r3, r2
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	4413      	add	r3, r2
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	461a      	mov	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	441a      	add	r2, r3
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	60fb      	str	r3, [r7, #12]
        for (int j = 0; j < N; j++)
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
 800058c:	e03e      	b.n	800060c <inverter_matriz+0x114>
        {
            matriz[i][j] /= pivot;
 800058e:	69fa      	ldr	r2, [r7, #28]
 8000590:	4613      	mov	r3, r2
 8000592:	00db      	lsls	r3, r3, #3
 8000594:	4413      	add	r3, r2
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	461a      	mov	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	441a      	add	r2, r3
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	4413      	add	r3, r2
 80005a4:	edd3 6a00 	vldr	s13, [r3]
 80005a8:	69fa      	ldr	r2, [r7, #28]
 80005aa:	4613      	mov	r3, r2
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	4413      	add	r3, r2
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	461a      	mov	r2, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	441a      	add	r2, r3
 80005b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80005bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005c0:	69bb      	ldr	r3, [r7, #24]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	edc3 7a00 	vstr	s15, [r3]
            inversa[i][j] /= pivot;
 80005ca:	69fa      	ldr	r2, [r7, #28]
 80005cc:	4613      	mov	r3, r2
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	4413      	add	r3, r2
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	461a      	mov	r2, r3
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	441a      	add	r2, r3
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	edd3 6a00 	vldr	s13, [r3]
 80005e4:	69fa      	ldr	r2, [r7, #28]
 80005e6:	4613      	mov	r3, r2
 80005e8:	00db      	lsls	r3, r3, #3
 80005ea:	4413      	add	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	461a      	mov	r2, r3
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	441a      	add	r2, r3
 80005f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80005f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < N; j++)
 8000606:	69bb      	ldr	r3, [r7, #24]
 8000608:	3301      	adds	r3, #1
 800060a:	61bb      	str	r3, [r7, #24]
 800060c:	69bb      	ldr	r3, [r7, #24]
 800060e:	2b08      	cmp	r3, #8
 8000610:	ddbd      	ble.n	800058e <inverter_matriz+0x96>
        }

        for (int k = 0; k < N; k++)
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	e076      	b.n	8000706 <inverter_matriz+0x20e>
        {
            if (k != i)
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	429a      	cmp	r2, r3
 800061e:	d06f      	beq.n	8000700 <inverter_matriz+0x208>
            {
                float fator = matriz[k][i];
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	4613      	mov	r3, r2
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	4413      	add	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	461a      	mov	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	441a      	add	r2, r3
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4413      	add	r3, r2
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	60bb      	str	r3, [r7, #8]
                for (int j = 0; j < N; j++)
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	e05c      	b.n	80006fa <inverter_matriz+0x202>
                {
                    matriz[k][j] -= fator * matriz[i][j];
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	4613      	mov	r3, r2
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	4413      	add	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	461a      	mov	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	441a      	add	r2, r3
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	ed93 7a00 	vldr	s14, [r3]
 800065a:	69fa      	ldr	r2, [r7, #28]
 800065c:	4613      	mov	r3, r2
 800065e:	00db      	lsls	r3, r3, #3
 8000660:	4413      	add	r3, r2
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	461a      	mov	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	441a      	add	r2, r3
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	edd3 6a00 	vldr	s13, [r3]
 8000674:	edd7 7a02 	vldr	s15, [r7, #8]
 8000678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800067c:	697a      	ldr	r2, [r7, #20]
 800067e:	4613      	mov	r3, r2
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	4413      	add	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	461a      	mov	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	441a      	add	r2, r3
 800068c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	edc3 7a00 	vstr	s15, [r3]
                    inversa[k][j] -= fator * inversa[i][j];
 800069a:	697a      	ldr	r2, [r7, #20]
 800069c:	4613      	mov	r3, r2
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	4413      	add	r3, r2
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	461a      	mov	r2, r3
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	441a      	add	r2, r3
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	4413      	add	r3, r2
 80006b0:	ed93 7a00 	vldr	s14, [r3]
 80006b4:	69fa      	ldr	r2, [r7, #28]
 80006b6:	4613      	mov	r3, r2
 80006b8:	00db      	lsls	r3, r3, #3
 80006ba:	4413      	add	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	461a      	mov	r2, r3
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	441a      	add	r2, r3
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	edd3 6a00 	vldr	s13, [r3]
 80006ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80006d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80006d6:	697a      	ldr	r2, [r7, #20]
 80006d8:	4613      	mov	r3, r2
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	4413      	add	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	461a      	mov	r2, r3
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	441a      	add	r2, r3
 80006e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	4413      	add	r3, r2
 80006f0:	edc3 7a00 	vstr	s15, [r3]
                for (int j = 0; j < N; j++)
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	3301      	adds	r3, #1
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	2b08      	cmp	r3, #8
 80006fe:	dd9f      	ble.n	8000640 <inverter_matriz+0x148>
        for (int k = 0; k < N; k++)
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	3301      	adds	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	2b08      	cmp	r3, #8
 800070a:	dd85      	ble.n	8000618 <inverter_matriz+0x120>
    for (int i = 0; i < N; i++)
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	3301      	adds	r3, #1
 8000710:	61fb      	str	r3, [r7, #28]
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	2b08      	cmp	r3, #8
 8000716:	f77f af2a 	ble.w	800056e <inverter_matriz+0x76>
                }
            }
        }
    }
}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	372c      	adds	r7, #44	@ 0x2c
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <ETS>:

    return passo;
}

void ETS(float *mx, float *my, float *mz, float *p)
{
 8000728:	b590      	push	{r4, r7, lr}
 800072a:	ed2d 8b02 	vpush	{d8}
 800072e:	f5ad 3da6 	sub.w	sp, sp, #84992	@ 0x14c00
 8000732:	b0c9      	sub	sp, #292	@ 0x124
 8000734:	af00      	add	r7, sp, #0
 8000736:	f507 6452 	add.w	r4, r7, #3360	@ 0xd20
 800073a:	f6a4 5414 	subw	r4, r4, #3348	@ 0xd14
 800073e:	6020      	str	r0, [r4, #0]
 8000740:	f507 6052 	add.w	r0, r7, #3360	@ 0xd20
 8000744:	f6a0 5018 	subw	r0, r0, #3352	@ 0xd18
 8000748:	6001      	str	r1, [r0, #0]
 800074a:	f507 6152 	add.w	r1, r7, #3360	@ 0xd20
 800074e:	f6a1 511c 	subw	r1, r1, #3356	@ 0xd1c
 8000752:	600a      	str	r2, [r1, #0]
 8000754:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8000758:	f5a2 6252 	sub.w	r2, r2, #3360	@ 0xd20
 800075c:	6013      	str	r3, [r2, #0]
    //Cria a matriz H
    float mat_H[N][tam], my_2[tam];
    float H_Ht[N][N], inv[N][N];
    float mul_mat[N][tam];
    float X[N];
    float psi7 = 0, psi8 = 0, divs = 0, n1 = 0, n2 = 0, n3 = 0, n4 = 0, n5 = 0, n6 = 0, bx = 0, by = 0, bz = 0, sx = 0, sy = 0, sz = 0, rho = 0, phi = 0, lambida = 0;
 800075e:	f04f 0300 	mov.w	r3, #0
 8000762:	4a42      	ldr	r2, [pc, #264]	@ (800086c <ETS+0x144>)
 8000764:	443a      	add	r2, r7
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	4a40      	ldr	r2, [pc, #256]	@ (8000870 <ETS+0x148>)
 800076e:	443a      	add	r2, r7
 8000770:	6013      	str	r3, [r2, #0]
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	4a3f      	ldr	r2, [pc, #252]	@ (8000874 <ETS+0x14c>)
 8000778:	443a      	add	r2, r7
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	4a3d      	ldr	r2, [pc, #244]	@ (8000878 <ETS+0x150>)
 8000782:	443a      	add	r2, r7
 8000784:	6013      	str	r3, [r2, #0]
 8000786:	f04f 0300 	mov.w	r3, #0
 800078a:	4a3c      	ldr	r2, [pc, #240]	@ (800087c <ETS+0x154>)
 800078c:	443a      	add	r2, r7
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	f04f 0300 	mov.w	r3, #0
 8000794:	4a3a      	ldr	r2, [pc, #232]	@ (8000880 <ETS+0x158>)
 8000796:	443a      	add	r2, r7
 8000798:	6013      	str	r3, [r2, #0]
 800079a:	f04f 0300 	mov.w	r3, #0
 800079e:	4a39      	ldr	r2, [pc, #228]	@ (8000884 <ETS+0x15c>)
 80007a0:	443a      	add	r2, r7
 80007a2:	6013      	str	r3, [r2, #0]
 80007a4:	f04f 0300 	mov.w	r3, #0
 80007a8:	4a37      	ldr	r2, [pc, #220]	@ (8000888 <ETS+0x160>)
 80007aa:	443a      	add	r2, r7
 80007ac:	6013      	str	r3, [r2, #0]
 80007ae:	f04f 0300 	mov.w	r3, #0
 80007b2:	4a36      	ldr	r2, [pc, #216]	@ (800088c <ETS+0x164>)
 80007b4:	443a      	add	r2, r7
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	f04f 0300 	mov.w	r3, #0
 80007bc:	4a34      	ldr	r2, [pc, #208]	@ (8000890 <ETS+0x168>)
 80007be:	443a      	add	r2, r7
 80007c0:	6013      	str	r3, [r2, #0]
 80007c2:	f04f 0300 	mov.w	r3, #0
 80007c6:	4a33      	ldr	r2, [pc, #204]	@ (8000894 <ETS+0x16c>)
 80007c8:	443a      	add	r2, r7
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	4a31      	ldr	r2, [pc, #196]	@ (8000898 <ETS+0x170>)
 80007d2:	443a      	add	r2, r7
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	f04f 0300 	mov.w	r3, #0
 80007da:	4a30      	ldr	r2, [pc, #192]	@ (800089c <ETS+0x174>)
 80007dc:	443a      	add	r2, r7
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	f04f 0300 	mov.w	r3, #0
 80007e4:	4a2e      	ldr	r2, [pc, #184]	@ (80008a0 <ETS+0x178>)
 80007e6:	443a      	add	r2, r7
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	4a2d      	ldr	r2, [pc, #180]	@ (80008a4 <ETS+0x17c>)
 80007f0:	443a      	add	r2, r7
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	f04f 0300 	mov.w	r3, #0
 80007f8:	4a2b      	ldr	r2, [pc, #172]	@ (80008a8 <ETS+0x180>)
 80007fa:	443a      	add	r2, r7
 80007fc:	6013      	str	r3, [r2, #0]
 80007fe:	f04f 0300 	mov.w	r3, #0
 8000802:	4a2a      	ldr	r2, [pc, #168]	@ (80008ac <ETS+0x184>)
 8000804:	443a      	add	r2, r7
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	f04f 0300 	mov.w	r3, #0
 800080c:	4a28      	ldr	r2, [pc, #160]	@ (80008b0 <ETS+0x188>)
 800080e:	443a      	add	r2, r7
 8000810:	6013      	str	r3, [r2, #0]
    float X1_2 = 0, X2_2 = 0, X3_2 = 0, X4_2 = 0, X5_2 = 0, X6_2 = 0, X7_2 = 0, X8_2 = 0;
 8000812:	f04f 0300 	mov.w	r3, #0
 8000816:	4a27      	ldr	r2, [pc, #156]	@ (80008b4 <ETS+0x18c>)
 8000818:	443a      	add	r2, r7
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	f04f 0300 	mov.w	r3, #0
 8000820:	4a25      	ldr	r2, [pc, #148]	@ (80008b8 <ETS+0x190>)
 8000822:	443a      	add	r2, r7
 8000824:	6013      	str	r3, [r2, #0]
 8000826:	f04f 0300 	mov.w	r3, #0
 800082a:	4a24      	ldr	r2, [pc, #144]	@ (80008bc <ETS+0x194>)
 800082c:	443a      	add	r2, r7
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	4a22      	ldr	r2, [pc, #136]	@ (80008c0 <ETS+0x198>)
 8000836:	443a      	add	r2, r7
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	f04f 0300 	mov.w	r3, #0
 800083e:	4a21      	ldr	r2, [pc, #132]	@ (80008c4 <ETS+0x19c>)
 8000840:	443a      	add	r2, r7
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	f04f 0300 	mov.w	r3, #0
 8000848:	4a1f      	ldr	r2, [pc, #124]	@ (80008c8 <ETS+0x1a0>)
 800084a:	443a      	add	r2, r7
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	f04f 0300 	mov.w	r3, #0
 8000852:	4a1e      	ldr	r2, [pc, #120]	@ (80008cc <ETS+0x1a4>)
 8000854:	443a      	add	r2, r7
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	f04f 0300 	mov.w	r3, #0
 800085c:	4a1c      	ldr	r2, [pc, #112]	@ (80008d0 <ETS+0x1a8>)
 800085e:	443a      	add	r2, r7
 8000860:	6013      	str	r3, [r2, #0]
    for(int i=0; i < tam; i++)
 8000862:	2300      	movs	r3, #0
 8000864:	4a1b      	ldr	r2, [pc, #108]	@ (80008d4 <ETS+0x1ac>)
 8000866:	443a      	add	r2, r7
 8000868:	6013      	str	r3, [r2, #0]
 800086a:	e186      	b.n	8000b7a <ETS+0x452>
 800086c:	00014cf8 	.word	0x00014cf8
 8000870:	00014cf4 	.word	0x00014cf4
 8000874:	00014cf0 	.word	0x00014cf0
 8000878:	00014cec 	.word	0x00014cec
 800087c:	00014ce8 	.word	0x00014ce8
 8000880:	00014ce4 	.word	0x00014ce4
 8000884:	00014ce0 	.word	0x00014ce0
 8000888:	00014cdc 	.word	0x00014cdc
 800088c:	00014cd8 	.word	0x00014cd8
 8000890:	00014cd4 	.word	0x00014cd4
 8000894:	00014cd0 	.word	0x00014cd0
 8000898:	00014ccc 	.word	0x00014ccc
 800089c:	00014cc8 	.word	0x00014cc8
 80008a0:	00014cc4 	.word	0x00014cc4
 80008a4:	00014cc0 	.word	0x00014cc0
 80008a8:	00014cbc 	.word	0x00014cbc
 80008ac:	00014cb8 	.word	0x00014cb8
 80008b0:	00014cb4 	.word	0x00014cb4
 80008b4:	00014cb0 	.word	0x00014cb0
 80008b8:	00014cac 	.word	0x00014cac
 80008bc:	00014ca8 	.word	0x00014ca8
 80008c0:	00014ca4 	.word	0x00014ca4
 80008c4:	00014ca0 	.word	0x00014ca0
 80008c8:	00014c9c 	.word	0x00014c9c
 80008cc:	00014c98 	.word	0x00014c98
 80008d0:	00014c94 	.word	0x00014c94
 80008d4:	00014d1c 	.word	0x00014d1c
    {
        mat_H[0][i] = mx[i]*mx[i];
 80008d8:	4bb1      	ldr	r3, [pc, #708]	@ (8000ba0 <ETS+0x478>)
 80008da:	443b      	add	r3, r7
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80008e4:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 80008e8:	6812      	ldr	r2, [r2, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	ed93 7a00 	vldr	s14, [r3]
 80008f0:	4bab      	ldr	r3, [pc, #684]	@ (8000ba0 <ETS+0x478>)
 80008f2:	443b      	add	r3, r7
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80008fc:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 8000900:	6812      	ldr	r2, [r2, #0]
 8000902:	4413      	add	r3, r2
 8000904:	edd3 7a00 	vldr	s15, [r3]
 8000908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800090c:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8000910:	443b      	add	r3, r7
 8000912:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8000916:	4ba2      	ldr	r3, [pc, #648]	@ (8000ba0 <ETS+0x478>)
 8000918:	443b      	add	r3, r7
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	4413      	add	r3, r2
 8000920:	edc3 7a00 	vstr	s15, [r3]
        mat_H[1][i] = mx[i]*my[i];
 8000924:	4b9e      	ldr	r3, [pc, #632]	@ (8000ba0 <ETS+0x478>)
 8000926:	443b      	add	r3, r7
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8000930:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 8000934:	6812      	ldr	r2, [r2, #0]
 8000936:	4413      	add	r3, r2
 8000938:	ed93 7a00 	vldr	s14, [r3]
 800093c:	4b98      	ldr	r3, [pc, #608]	@ (8000ba0 <ETS+0x478>)
 800093e:	443b      	add	r3, r7
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8000948:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	4413      	add	r3, r2
 8000950:	edd3 7a00 	vldr	s15, [r3]
 8000954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000958:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 800095c:	443b      	add	r3, r7
 800095e:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8000962:	4b8f      	ldr	r3, [pc, #572]	@ (8000ba0 <ETS+0x478>)
 8000964:	443b      	add	r3, r7
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f203 4357 	addw	r3, r3, #1111	@ 0x457
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	edc3 7a00 	vstr	s15, [r3]
        mat_H[2][i] = mx[i]*mz[i];
 8000974:	4b8a      	ldr	r3, [pc, #552]	@ (8000ba0 <ETS+0x478>)
 8000976:	443b      	add	r3, r7
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8000980:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 8000984:	6812      	ldr	r2, [r2, #0]
 8000986:	4413      	add	r3, r2
 8000988:	ed93 7a00 	vldr	s14, [r3]
 800098c:	4b84      	ldr	r3, [pc, #528]	@ (8000ba0 <ETS+0x478>)
 800098e:	443b      	add	r3, r7
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8000998:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 800099c:	6812      	ldr	r2, [r2, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	edd3 7a00 	vldr	s15, [r3]
 80009a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009a8:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 80009ac:	443b      	add	r3, r7
 80009ae:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 80009b2:	4b7b      	ldr	r3, [pc, #492]	@ (8000ba0 <ETS+0x478>)
 80009b4:	443b      	add	r3, r7
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f603 03ae 	addw	r3, r3, #2222	@ 0x8ae
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	edc3 7a00 	vstr	s15, [r3]
        mat_H[3][i] = my[i]*mz[i];
 80009c4:	4b76      	ldr	r3, [pc, #472]	@ (8000ba0 <ETS+0x478>)
 80009c6:	443b      	add	r3, r7
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80009d0:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 80009d4:	6812      	ldr	r2, [r2, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	ed93 7a00 	vldr	s14, [r3]
 80009dc:	4b70      	ldr	r3, [pc, #448]	@ (8000ba0 <ETS+0x478>)
 80009de:	443b      	add	r3, r7
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 80009e8:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 80009ec:	6812      	ldr	r2, [r2, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	edd3 7a00 	vldr	s15, [r3]
 80009f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009f8:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 80009fc:	443b      	add	r3, r7
 80009fe:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8000a02:	4b67      	ldr	r3, [pc, #412]	@ (8000ba0 <ETS+0x478>)
 8000a04:	443b      	add	r3, r7
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f603 5305 	addw	r3, r3, #3333	@ 0xd05
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	edc3 7a00 	vstr	s15, [r3]
        mat_H[4][i] = mz[i]*mz[i];
 8000a14:	4b62      	ldr	r3, [pc, #392]	@ (8000ba0 <ETS+0x478>)
 8000a16:	443b      	add	r3, r7
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8000a20:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8000a24:	6812      	ldr	r2, [r2, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	ed93 7a00 	vldr	s14, [r3]
 8000a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8000ba0 <ETS+0x478>)
 8000a2e:	443b      	add	r3, r7
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8000a38:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8000a3c:	6812      	ldr	r2, [r2, #0]
 8000a3e:	4413      	add	r3, r2
 8000a40:	edd3 7a00 	vldr	s15, [r3]
 8000a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a48:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8000a4c:	443b      	add	r3, r7
 8000a4e:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8000a52:	4b53      	ldr	r3, [pc, #332]	@ (8000ba0 <ETS+0x478>)
 8000a54:	443b      	add	r3, r7
 8000a56:	6819      	ldr	r1, [r3, #0]
 8000a58:	f241 135c 	movw	r3, #4444	@ 0x115c
 8000a5c:	440b      	add	r3, r1
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4413      	add	r3, r2
 8000a62:	edc3 7a00 	vstr	s15, [r3]
        mat_H[5][i] = mx[i];
 8000a66:	4b4e      	ldr	r3, [pc, #312]	@ (8000ba0 <ETS+0x478>)
 8000a68:	443b      	add	r3, r7
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8000a72:	f6a2 5214 	subw	r2, r2, #3348	@ 0xd14
 8000a76:	6812      	ldr	r2, [r2, #0]
 8000a78:	4413      	add	r3, r2
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8000a80:	443b      	add	r3, r7
 8000a82:	f6a3 41c8 	subw	r1, r3, #3272	@ 0xcc8
 8000a86:	4b46      	ldr	r3, [pc, #280]	@ (8000ba0 <ETS+0x478>)
 8000a88:	443b      	add	r3, r7
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8000a90:	4403      	add	r3, r0
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	440b      	add	r3, r1
 8000a96:	601a      	str	r2, [r3, #0]
        mat_H[6][i] = my[i];
 8000a98:	4b41      	ldr	r3, [pc, #260]	@ (8000ba0 <ETS+0x478>)
 8000a9a:	443b      	add	r3, r7
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8000aa4:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8000ab2:	443b      	add	r3, r7
 8000ab4:	f6a3 41c8 	subw	r1, r3, #3272	@ 0xcc8
 8000ab8:	4b39      	ldr	r3, [pc, #228]	@ (8000ba0 <ETS+0x478>)
 8000aba:	443b      	add	r3, r7
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	f641 230a 	movw	r3, #6666	@ 0x1a0a
 8000ac2:	4403      	add	r3, r0
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	440b      	add	r3, r1
 8000ac8:	601a      	str	r2, [r3, #0]
        mat_H[7][i] = mz[i];
 8000aca:	4b35      	ldr	r3, [pc, #212]	@ (8000ba0 <ETS+0x478>)
 8000acc:	443b      	add	r3, r7
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8000ad6:	f6a2 521c 	subw	r2, r2, #3356	@ 0xd1c
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	4413      	add	r3, r2
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8000ae4:	443b      	add	r3, r7
 8000ae6:	f6a3 41c8 	subw	r1, r3, #3272	@ 0xcc8
 8000aea:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba0 <ETS+0x478>)
 8000aec:	443b      	add	r3, r7
 8000aee:	6818      	ldr	r0, [r3, #0]
 8000af0:	f641 6361 	movw	r3, #7777	@ 0x1e61
 8000af4:	4403      	add	r3, r0
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	440b      	add	r3, r1
 8000afa:	601a      	str	r2, [r3, #0]
        mat_H[8][i] = 1;
 8000afc:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8000b00:	443b      	add	r3, r7
 8000b02:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8000b06:	4b26      	ldr	r3, [pc, #152]	@ (8000ba0 <ETS+0x478>)
 8000b08:	443b      	add	r3, r7
 8000b0a:	6819      	ldr	r1, [r3, #0]
 8000b0c:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8000b10:	440b      	add	r3, r1
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000b1a:	601a      	str	r2, [r3, #0]
        my_2[i] = -(my[i]*my[i]);
 8000b1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <ETS+0x478>)
 8000b1e:	443b      	add	r3, r7
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8000b28:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8000b2c:	6812      	ldr	r2, [r2, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	ed93 7a00 	vldr	s14, [r3]
 8000b34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <ETS+0x478>)
 8000b36:	443b      	add	r3, r7
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	f507 6252 	add.w	r2, r7, #3360	@ 0xd20
 8000b40:	f6a2 5218 	subw	r2, r2, #3352	@ 0xd18
 8000b44:	6812      	ldr	r2, [r2, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b50:	eef1 7a67 	vneg.f32	s15, s15
 8000b54:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8000b58:	443b      	add	r3, r7
 8000b5a:	f6a3 6224 	subw	r2, r3, #3620	@ 0xe24
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <ETS+0x478>)
 8000b60:	443b      	add	r3, r7
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0; i < tam; i++)
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <ETS+0x478>)
 8000b6e:	443b      	add	r3, r7
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <ETS+0x478>)
 8000b76:	443a      	add	r2, r7
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <ETS+0x478>)
 8000b7c:	443b      	add	r3, r7
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f240 4256 	movw	r2, #1110	@ 0x456
 8000b84:	4293      	cmp	r3, r2
 8000b86:	f77f aea7 	ble.w	80008d8 <ETS+0x1b0>
    }

    //Multiplicação da matriz H por sua transposta
    for(int i=0; i < N; i++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ba4 <ETS+0x47c>)
 8000b8e:	443a      	add	r2, r7
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e098      	b.n	8000cc6 <ETS+0x59e>
    {
        for(int j=0; j < N; j++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <ETS+0x480>)
 8000b98:	443a      	add	r2, r7
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	e086      	b.n	8000cac <ETS+0x584>
 8000b9e:	bf00      	nop
 8000ba0:	00014d1c 	.word	0x00014d1c
 8000ba4:	00014d18 	.word	0x00014d18
 8000ba8:	00014d14 	.word	0x00014d14
        {
            H_Ht[i][j] = 0;
 8000bac:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8000bb0:	443b      	add	r3, r7
 8000bb2:	f6a3 7168 	subw	r1, r3, #3944	@ 0xf68
 8000bb6:	4ba7      	ldr	r3, [pc, #668]	@ (8000e54 <ETS+0x72c>)
 8000bb8:	443b      	add	r3, r7
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4aa5      	ldr	r2, [pc, #660]	@ (8000e58 <ETS+0x730>)
 8000bc4:	443a      	add	r2, r7
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	4413      	add	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	440b      	add	r3, r1
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
            for(int k = 0; k < tam; k++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	4aa1      	ldr	r2, [pc, #644]	@ (8000e5c <ETS+0x734>)
 8000bd8:	443a      	add	r2, r7
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e058      	b.n	8000c90 <ETS+0x568>
            {
                H_Ht[i][j] += mat_H[i][k]*mat_H[j][k];
 8000bde:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8000be2:	443b      	add	r3, r7
 8000be4:	f6a3 7168 	subw	r1, r3, #3944	@ 0xf68
 8000be8:	4b9a      	ldr	r3, [pc, #616]	@ (8000e54 <ETS+0x72c>)
 8000bea:	443b      	add	r3, r7
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a98      	ldr	r2, [pc, #608]	@ (8000e58 <ETS+0x730>)
 8000bf6:	443a      	add	r2, r7
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	440b      	add	r3, r1
 8000c00:	ed93 7a00 	vldr	s14, [r3]
 8000c04:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8000c08:	443b      	add	r3, r7
 8000c0a:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8000c0e:	4b91      	ldr	r3, [pc, #580]	@ (8000e54 <ETS+0x72c>)
 8000c10:	443b      	add	r3, r7
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f240 4157 	movw	r1, #1111	@ 0x457
 8000c18:	fb03 f101 	mul.w	r1, r3, r1
 8000c1c:	4b8f      	ldr	r3, [pc, #572]	@ (8000e5c <ETS+0x734>)
 8000c1e:	443b      	add	r3, r7
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	440b      	add	r3, r1
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	edd3 6a00 	vldr	s13, [r3]
 8000c2c:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8000c30:	443b      	add	r3, r7
 8000c32:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8000c36:	4b88      	ldr	r3, [pc, #544]	@ (8000e58 <ETS+0x730>)
 8000c38:	443b      	add	r3, r7
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f240 4157 	movw	r1, #1111	@ 0x457
 8000c40:	fb03 f101 	mul.w	r1, r3, r1
 8000c44:	4b85      	ldr	r3, [pc, #532]	@ (8000e5c <ETS+0x734>)
 8000c46:	443b      	add	r3, r7
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	440b      	add	r3, r1
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	edd3 7a00 	vldr	s15, [r3]
 8000c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c5c:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8000c60:	443b      	add	r3, r7
 8000c62:	f6a3 7168 	subw	r1, r3, #3944	@ 0xf68
 8000c66:	4b7b      	ldr	r3, [pc, #492]	@ (8000e54 <ETS+0x72c>)
 8000c68:	443b      	add	r3, r7
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4413      	add	r3, r2
 8000c72:	4a79      	ldr	r2, [pc, #484]	@ (8000e58 <ETS+0x730>)
 8000c74:	443a      	add	r2, r7
 8000c76:	6812      	ldr	r2, [r2, #0]
 8000c78:	4413      	add	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < tam; k++)
 8000c82:	4b76      	ldr	r3, [pc, #472]	@ (8000e5c <ETS+0x734>)
 8000c84:	443b      	add	r3, r7
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a74      	ldr	r2, [pc, #464]	@ (8000e5c <ETS+0x734>)
 8000c8c:	443a      	add	r2, r7
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b72      	ldr	r3, [pc, #456]	@ (8000e5c <ETS+0x734>)
 8000c92:	443b      	add	r3, r7
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f240 4256 	movw	r2, #1110	@ 0x456
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	dd9f      	ble.n	8000bde <ETS+0x4b6>
        for(int j=0; j < N; j++)
 8000c9e:	4b6e      	ldr	r3, [pc, #440]	@ (8000e58 <ETS+0x730>)
 8000ca0:	443b      	add	r3, r7
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	4a6c      	ldr	r2, [pc, #432]	@ (8000e58 <ETS+0x730>)
 8000ca8:	443a      	add	r2, r7
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b6a      	ldr	r3, [pc, #424]	@ (8000e58 <ETS+0x730>)
 8000cae:	443b      	add	r3, r7
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	f77f af7a 	ble.w	8000bac <ETS+0x484>
    for(int i=0; i < N; i++)
 8000cb8:	4b66      	ldr	r3, [pc, #408]	@ (8000e54 <ETS+0x72c>)
 8000cba:	443b      	add	r3, r7
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	4a64      	ldr	r2, [pc, #400]	@ (8000e54 <ETS+0x72c>)
 8000cc2:	443a      	add	r2, r7
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	4b63      	ldr	r3, [pc, #396]	@ (8000e54 <ETS+0x72c>)
 8000cc8:	443b      	add	r3, r7
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	f77f af61 	ble.w	8000b94 <ETS+0x46c>
            }
        }
    }

    inverter_matriz(H_Ht, inv);
 8000cd2:	4a63      	ldr	r2, [pc, #396]	@ (8000e60 <ETS+0x738>)
 8000cd4:	4b63      	ldr	r3, [pc, #396]	@ (8000e64 <ETS+0x73c>)
 8000cd6:	4413      	add	r3, r2
 8000cd8:	19da      	adds	r2, r3, r7
 8000cda:	4b63      	ldr	r3, [pc, #396]	@ (8000e68 <ETS+0x740>)
 8000cdc:	f503 33a6 	add.w	r3, r3, #84992	@ 0x14c00
 8000ce0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8000ce4:	443b      	add	r3, r7
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fc05 	bl	80004f8 <inverter_matriz>

    //Multiplica a inversa por H transposta
    for(int i=0; i < N; i++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	4a5e      	ldr	r2, [pc, #376]	@ (8000e6c <ETS+0x744>)
 8000cf2:	443a      	add	r2, r7
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	e090      	b.n	8000e1a <ETS+0x6f2>
    {
        for(int j=0; j < tam; j++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	4a5d      	ldr	r2, [pc, #372]	@ (8000e70 <ETS+0x748>)
 8000cfc:	443a      	add	r2, r7
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	e07c      	b.n	8000dfc <ETS+0x6d4>
        {
            mul_mat[i][j] = 0;
 8000d02:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000d06:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8000d0a:	4b58      	ldr	r3, [pc, #352]	@ (8000e6c <ETS+0x744>)
 8000d0c:	443b      	add	r3, r7
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f240 4157 	movw	r1, #1111	@ 0x457
 8000d14:	fb03 f101 	mul.w	r1, r3, r1
 8000d18:	4b55      	ldr	r3, [pc, #340]	@ (8000e70 <ETS+0x748>)
 8000d1a:	443b      	add	r3, r7
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	440b      	add	r3, r1
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	f04f 0200 	mov.w	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
            for(int k=0; k < N; k++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	4a51      	ldr	r2, [pc, #324]	@ (8000e74 <ETS+0x74c>)
 8000d2e:	443a      	add	r2, r7
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	e057      	b.n	8000de4 <ETS+0x6bc>
            {
                mul_mat[i][j] += inv[i][k]*mat_H[k][j];
 8000d34:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000d38:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8000d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8000e6c <ETS+0x744>)
 8000d3e:	443b      	add	r3, r7
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f240 4157 	movw	r1, #1111	@ 0x457
 8000d46:	fb03 f101 	mul.w	r1, r3, r1
 8000d4a:	4b49      	ldr	r3, [pc, #292]	@ (8000e70 <ETS+0x748>)
 8000d4c:	443b      	add	r3, r7
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	440b      	add	r3, r1
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	ed93 7a00 	vldr	s14, [r3]
 8000d5a:	f649 5320 	movw	r3, #40224	@ 0x9d20
 8000d5e:	443b      	add	r3, r7
 8000d60:	4619      	mov	r1, r3
 8000d62:	4b42      	ldr	r3, [pc, #264]	@ (8000e6c <ETS+0x744>)
 8000d64:	443b      	add	r3, r7
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a41      	ldr	r2, [pc, #260]	@ (8000e74 <ETS+0x74c>)
 8000d70:	443a      	add	r2, r7
 8000d72:	6812      	ldr	r2, [r2, #0]
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	3bac      	subs	r3, #172	@ 0xac
 8000d7c:	edd3 6a00 	vldr	s13, [r3]
 8000d80:	f64b 5320 	movw	r3, #48416	@ 0xbd20
 8000d84:	443b      	add	r3, r7
 8000d86:	f6a3 42c8 	subw	r2, r3, #3272	@ 0xcc8
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <ETS+0x74c>)
 8000d8c:	443b      	add	r3, r7
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f240 4157 	movw	r1, #1111	@ 0x457
 8000d94:	fb03 f101 	mul.w	r1, r3, r1
 8000d98:	4b35      	ldr	r3, [pc, #212]	@ (8000e70 <ETS+0x748>)
 8000d9a:	443b      	add	r3, r7
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	440b      	add	r3, r1
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	edd3 7a00 	vldr	s15, [r3]
 8000da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000db4:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8000db8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e6c <ETS+0x744>)
 8000dba:	443b      	add	r3, r7
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f240 4157 	movw	r1, #1111	@ 0x457
 8000dc2:	fb03 f101 	mul.w	r1, r3, r1
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e70 <ETS+0x748>)
 8000dc8:	443b      	add	r3, r7
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	440b      	add	r3, r1
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	4413      	add	r3, r2
 8000dd2:	edc3 7a00 	vstr	s15, [r3]
            for(int k=0; k < N; k++)
 8000dd6:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <ETS+0x74c>)
 8000dd8:	443b      	add	r3, r7
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	4a25      	ldr	r2, [pc, #148]	@ (8000e74 <ETS+0x74c>)
 8000de0:	443a      	add	r2, r7
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <ETS+0x74c>)
 8000de6:	443b      	add	r3, r7
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b08      	cmp	r3, #8
 8000dec:	dda2      	ble.n	8000d34 <ETS+0x60c>
        for(int j=0; j < tam; j++)
 8000dee:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <ETS+0x748>)
 8000df0:	443b      	add	r3, r7
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a1e      	ldr	r2, [pc, #120]	@ (8000e70 <ETS+0x748>)
 8000df8:	443a      	add	r2, r7
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e70 <ETS+0x748>)
 8000dfe:	443b      	add	r3, r7
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f240 4256 	movw	r2, #1110	@ 0x456
 8000e06:	4293      	cmp	r3, r2
 8000e08:	f77f af7b 	ble.w	8000d02 <ETS+0x5da>
    for(int i=0; i < N; i++)
 8000e0c:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <ETS+0x744>)
 8000e0e:	443b      	add	r3, r7
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	4a15      	ldr	r2, [pc, #84]	@ (8000e6c <ETS+0x744>)
 8000e16:	443a      	add	r2, r7
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <ETS+0x744>)
 8000e1c:	443b      	add	r3, r7
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b08      	cmp	r3, #8
 8000e22:	f77f af69 	ble.w	8000cf8 <ETS+0x5d0>
            }
        }
    }

    //Resultado da psedo-inversa
    for(int i=0; i < N; i++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	4a13      	ldr	r2, [pc, #76]	@ (8000e78 <ETS+0x750>)
 8000e2a:	443a      	add	r2, r7
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e075      	b.n	8000f1c <ETS+0x7f4>
    {
        X[i] = 0;
 8000e30:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000e34:	f6a3 520c 	subw	r2, r3, #3340	@ 0xd0c
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <ETS+0x750>)
 8000e3a:	443b      	add	r3, r7
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
        for(int j=0; j < tam; j++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e7c <ETS+0x754>)
 8000e4c:	443a      	add	r2, r7
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e056      	b.n	8000f00 <ETS+0x7d8>
 8000e52:	bf00      	nop
 8000e54:	00014d18 	.word	0x00014d18
 8000e58:	00014d14 	.word	0x00014d14
 8000e5c:	00014d10 	.word	0x00014d10
 8000e60:	ffff4f54 	.word	0xffff4f54
 8000e64:	00014d20 	.word	0x00014d20
 8000e68:	ffff5098 	.word	0xffff5098
 8000e6c:	00014d0c 	.word	0x00014d0c
 8000e70:	00014d08 	.word	0x00014d08
 8000e74:	00014d04 	.word	0x00014d04
 8000e78:	00014d00 	.word	0x00014d00
 8000e7c:	00014cfc 	.word	0x00014cfc
        {
            X[i] += mul_mat[i][j]*my_2[j];
 8000e80:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000e84:	f6a3 520c 	subw	r2, r3, #3340	@ 0xd0c
 8000e88:	4bdb      	ldr	r3, [pc, #876]	@ (80011f8 <ETS+0xad0>)
 8000e8a:	443b      	add	r3, r7
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	ed93 7a00 	vldr	s14, [r3]
 8000e96:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000e9a:	f6a3 42e8 	subw	r2, r3, #3304	@ 0xce8
 8000e9e:	4bd6      	ldr	r3, [pc, #856]	@ (80011f8 <ETS+0xad0>)
 8000ea0:	443b      	add	r3, r7
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f240 4157 	movw	r1, #1111	@ 0x457
 8000ea8:	fb03 f101 	mul.w	r1, r3, r1
 8000eac:	4bd3      	ldr	r3, [pc, #844]	@ (80011fc <ETS+0xad4>)
 8000eae:	443b      	add	r3, r7
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	440b      	add	r3, r1
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	edd3 6a00 	vldr	s13, [r3]
 8000ebc:	f64a 5320 	movw	r3, #44320	@ 0xad20
 8000ec0:	443b      	add	r3, r7
 8000ec2:	f6a3 6224 	subw	r2, r3, #3620	@ 0xe24
 8000ec6:	4bcd      	ldr	r3, [pc, #820]	@ (80011fc <ETS+0xad4>)
 8000ec8:	443b      	add	r3, r7
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000edc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000ee0:	f6a3 520c 	subw	r2, r3, #3340	@ 0xd0c
 8000ee4:	4bc4      	ldr	r3, [pc, #784]	@ (80011f8 <ETS+0xad0>)
 8000ee6:	443b      	add	r3, r7
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	edc3 7a00 	vstr	s15, [r3]
        for(int j=0; j < tam; j++)
 8000ef2:	4bc2      	ldr	r3, [pc, #776]	@ (80011fc <ETS+0xad4>)
 8000ef4:	443b      	add	r3, r7
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	4ac0      	ldr	r2, [pc, #768]	@ (80011fc <ETS+0xad4>)
 8000efc:	443a      	add	r2, r7
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	4bbe      	ldr	r3, [pc, #760]	@ (80011fc <ETS+0xad4>)
 8000f02:	443b      	add	r3, r7
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f240 4256 	movw	r2, #1110	@ 0x456
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	ddb8      	ble.n	8000e80 <ETS+0x758>
    for(int i=0; i < N; i++)
 8000f0e:	4bba      	ldr	r3, [pc, #744]	@ (80011f8 <ETS+0xad0>)
 8000f10:	443b      	add	r3, r7
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4ab8      	ldr	r2, [pc, #736]	@ (80011f8 <ETS+0xad0>)
 8000f18:	443a      	add	r2, r7
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4bb6      	ldr	r3, [pc, #728]	@ (80011f8 <ETS+0xad0>)
 8000f1e:	443b      	add	r3, r7
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	dd84      	ble.n	8000e30 <ETS+0x708>
        }
    }


    // Segundo passo, encontrando os parâmetros
    X1_2 = X[1]*X[1];
 8000f26:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000f2a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8000f2e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f32:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000f36:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8000f3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f42:	4baf      	ldr	r3, [pc, #700]	@ (8001200 <ETS+0xad8>)
 8000f44:	443b      	add	r3, r7
 8000f46:	edc3 7a00 	vstr	s15, [r3]
    X2_2 = X[2]*X[2];
 8000f4a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000f4e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8000f52:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f56:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000f5a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8000f5e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f66:	4ba7      	ldr	r3, [pc, #668]	@ (8001204 <ETS+0xadc>)
 8000f68:	443b      	add	r3, r7
 8000f6a:	edc3 7a00 	vstr	s15, [r3]
    X3_2 = X[3]*X[3];
 8000f6e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000f72:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8000f76:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f7a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000f7e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8000f82:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8a:	4b9f      	ldr	r3, [pc, #636]	@ (8001208 <ETS+0xae0>)
 8000f8c:	443b      	add	r3, r7
 8000f8e:	edc3 7a00 	vstr	s15, [r3]
    X4_2 = X[4]*X[4];
 8000f92:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000f96:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8000f9a:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f9e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000fa2:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8000fa6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fae:	4b97      	ldr	r3, [pc, #604]	@ (800120c <ETS+0xae4>)
 8000fb0:	443b      	add	r3, r7
 8000fb2:	edc3 7a00 	vstr	s15, [r3]
    X5_2 = X[5]*X[5];
 8000fb6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000fba:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8000fbe:	ed93 7a05 	vldr	s14, [r3, #20]
 8000fc2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000fc6:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8000fca:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd2:	4b8f      	ldr	r3, [pc, #572]	@ (8001210 <ETS+0xae8>)
 8000fd4:	443b      	add	r3, r7
 8000fd6:	edc3 7a00 	vstr	s15, [r3]
    X6_2 = X[6]*X[6];
 8000fda:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000fde:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8000fe2:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fe6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8000fea:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8000fee:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff6:	4b87      	ldr	r3, [pc, #540]	@ (8001214 <ETS+0xaec>)
 8000ff8:	443b      	add	r3, r7
 8000ffa:	edc3 7a00 	vstr	s15, [r3]
    X7_2 = X[7]*X[7];
 8000ffe:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001002:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001006:	ed93 7a07 	vldr	s14, [r3, #28]
 800100a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800100e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001012:	edd3 7a07 	vldr	s15, [r3, #28]
 8001016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101a:	4b7f      	ldr	r3, [pc, #508]	@ (8001218 <ETS+0xaf0>)
 800101c:	443b      	add	r3, r7
 800101e:	edc3 7a00 	vstr	s15, [r3]
    X8_2 = X[8]*X[8];
 8001022:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001026:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800102a:	ed93 7a08 	vldr	s14, [r3, #32]
 800102e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001032:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001036:	edd3 7a08 	vldr	s15, [r3, #32]
 800103a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103e:	4b77      	ldr	r3, [pc, #476]	@ (800121c <ETS+0xaf4>)
 8001040:	443b      	add	r3, r7
 8001042:	edc3 7a00 	vstr	s15, [r3]

    psi7 = 2*(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]);
 8001046:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800104a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800104e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001052:	4b6b      	ldr	r3, [pc, #428]	@ (8001200 <ETS+0xad8>)
 8001054:	443b      	add	r3, r7
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001062:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001066:	edd3 6a01 	vldr	s13, [r3, #4]
 800106a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800106e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001072:	edd3 7a02 	vldr	s15, [r3, #8]
 8001076:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800107a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800107e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001082:	edd3 7a03 	vldr	s15, [r3, #12]
 8001086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800108e:	4b5d      	ldr	r3, [pc, #372]	@ (8001204 <ETS+0xadc>)
 8001090:	443b      	add	r3, r7
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	ee37 7a27 	vadd.f32	s14, s14, s15
 800109a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800109e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80010a2:	edd3 6a00 	vldr	s13, [r3]
 80010a6:	4b58      	ldr	r3, [pc, #352]	@ (8001208 <ETS+0xae0>)
 80010a8:	443b      	add	r3, r7
 80010aa:	edd3 7a00 	vldr	s15, [r3]
 80010ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010b6:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80010ba:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80010be:	edd3 7a00 	vldr	s15, [r3]
 80010c2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80010c6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80010ca:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80010ce:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80010d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80010d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001220 <ETS+0xaf8>)
 80010e4:	443b      	add	r3, r7
 80010e6:	edc3 7a00 	vstr	s15, [r3]
    bx = -(X3_2 * X[5] + 2*X[2]*X[7] - 4*X[4]*X[5] - X[1]*X[3]*X[7] + 2*X[1]*X[4]*X[6] - X[2]*X[3]*X[6]) / psi7;
 80010ea:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80010ee:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80010f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80010f6:	4b44      	ldr	r3, [pc, #272]	@ (8001208 <ETS+0xae0>)
 80010f8:	443b      	add	r3, r7
 80010fa:	edd3 7a00 	vldr	s15, [r3]
 80010fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001102:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001106:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800110a:	edd3 7a02 	vldr	s15, [r3, #8]
 800110e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001112:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001116:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800111a:	edd3 7a07 	vldr	s15, [r3, #28]
 800111e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001122:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001126:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800112a:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800112e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001132:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001136:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800113a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800113e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001142:	edd3 7a05 	vldr	s15, [r3, #20]
 8001146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800114a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800114e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001152:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001156:	edd3 6a01 	vldr	s13, [r3, #4]
 800115a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800115e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001162:	edd3 7a03 	vldr	s15, [r3, #12]
 8001166:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800116a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800116e:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001172:	edd3 7a07 	vldr	s15, [r3, #28]
 8001176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800117a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800117e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001182:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001186:	edd3 7a01 	vldr	s15, [r3, #4]
 800118a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800118e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001192:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001196:	edd3 7a04 	vldr	s15, [r3, #16]
 800119a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800119e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80011a2:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80011a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80011aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011b2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80011b6:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80011ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80011be:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80011c2:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80011c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80011ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011ce:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80011d2:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80011d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80011da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e2:	eef1 6a67 	vneg.f32	s13, s15
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <ETS+0xaf8>)
 80011e8:	443b      	add	r3, r7
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <ETS+0xafc>)
 80011f4:	443b      	add	r3, r7
 80011f6:	e017      	b.n	8001228 <ETS+0xb00>
 80011f8:	00014d00 	.word	0x00014d00
 80011fc:	00014cfc 	.word	0x00014cfc
 8001200:	00014cb0 	.word	0x00014cb0
 8001204:	00014cac 	.word	0x00014cac
 8001208:	00014ca8 	.word	0x00014ca8
 800120c:	00014ca4 	.word	0x00014ca4
 8001210:	00014ca0 	.word	0x00014ca0
 8001214:	00014c9c 	.word	0x00014c9c
 8001218:	00014c98 	.word	0x00014c98
 800121c:	00014c94 	.word	0x00014c94
 8001220:	00014cf8 	.word	0x00014cf8
 8001224:	00014cd4 	.word	0x00014cd4
 8001228:	edc3 7a00 	vstr	s15, [r3]
    by = -(X2_2 * X[6] + 2*X[0]*X[3]*X[7] - 4*X[0]*X[4]*X[6] - X[1]*X[2]*X[7] + 2*X[1]*X[4]*X[5] - X[2]*X[3]*X[5]) / psi7;
 800122c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001230:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001234:	ed93 7a06 	vldr	s14, [r3, #24]
 8001238:	4bf2      	ldr	r3, [pc, #968]	@ (8001604 <ETS+0xedc>)
 800123a:	443b      	add	r3, r7
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001244:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001248:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001254:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001258:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800125c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001260:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001264:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001268:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800126c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001278:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800127c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001280:	edd3 7a00 	vldr	s15, [r3]
 8001284:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001288:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800128c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001290:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001294:	edd3 7a04 	vldr	s15, [r3, #16]
 8001298:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800129c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80012a0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80012a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80012a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80012b4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80012b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80012bc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80012c0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80012c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012cc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80012d0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80012d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80012d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012e0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80012e4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80012e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80012f0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80012f4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80012f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80012fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001300:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001304:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001308:	edd3 7a05 	vldr	s15, [r3, #20]
 800130c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001314:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001318:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800131c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001320:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001324:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001328:	edd3 7a03 	vldr	s15, [r3, #12]
 800132c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001330:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001334:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001338:	edd3 7a05 	vldr	s15, [r3, #20]
 800133c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001344:	eef1 6a67 	vneg.f32	s13, s15
 8001348:	4baf      	ldr	r3, [pc, #700]	@ (8001608 <ETS+0xee0>)
 800134a:	443b      	add	r3, r7
 800134c:	ed93 7a00 	vldr	s14, [r3]
 8001350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001354:	4bad      	ldr	r3, [pc, #692]	@ (800160c <ETS+0xee4>)
 8001356:	443b      	add	r3, r7
 8001358:	edc3 7a00 	vstr	s15, [r3]
    bz = -(X1_2*X[7] - 4*X[0]*X[7] + 2*X[2]*X[5] + 2*X[0]*X[3]*X[6] - X[1]*X[2]*X[6] - X[1]*X[3]*X[5]) / psi7;
 800135c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001360:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	4ba9      	ldr	r3, [pc, #676]	@ (8001610 <ETS+0xee8>)
 800136a:	443b      	add	r3, r7
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001374:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001378:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800137c:	edd3 7a00 	vldr	s15, [r3]
 8001380:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001384:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001388:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800138c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001390:	edd3 7a07 	vldr	s15, [r3, #28]
 8001394:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001398:	ee37 7a67 	vsub.f32	s14, s14, s15
 800139c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80013a0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80013a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80013a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80013ac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80013b0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80013b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80013b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80013c4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80013d0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80013d4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80013d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80013dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013e0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80013e4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80013e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80013ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80013f8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80013fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001400:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001404:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001408:	edd3 7a02 	vldr	s15, [r3, #8]
 800140c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001410:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001414:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001418:	edd3 7a06 	vldr	s15, [r3, #24]
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001424:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001428:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800142c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001430:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001434:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001438:	edd3 7a03 	vldr	s15, [r3, #12]
 800143c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001440:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001444:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001448:	edd3 7a05 	vldr	s15, [r3, #20]
 800144c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001454:	eef1 6a67 	vneg.f32	s13, s15
 8001458:	4b6b      	ldr	r3, [pc, #428]	@ (8001608 <ETS+0xee0>)
 800145a:	443b      	add	r3, r7
 800145c:	ed93 7a00 	vldr	s14, [r3]
 8001460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001464:	4b6b      	ldr	r3, [pc, #428]	@ (8001614 <ETS+0xeec>)
 8001466:	443b      	add	r3, r7
 8001468:	edc3 7a00 	vstr	s15, [r3]

    psi8 = -X1_2*X7_2 + 4*X[4]*X[8]*X1_2 - 4*X[8]*X[1]*X[2]*X[3] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[4]*X[1]*X[5]*X[6] - X2_2*X6_2 + 4*X[8]*X2_2 + 2*X[2]*X[3]*X[5]*X[6] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[0]*X[8]*X3_2 + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8] - 4*X[0]*X[3]*X[6]*X[7];
 800146c:	4b68      	ldr	r3, [pc, #416]	@ (8001610 <ETS+0xee8>)
 800146e:	443b      	add	r3, r7
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	eeb1 7a67 	vneg.f32	s14, s15
 8001478:	4b67      	ldr	r3, [pc, #412]	@ (8001618 <ETS+0xef0>)
 800147a:	443b      	add	r3, r7
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001484:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001488:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800148c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001490:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001494:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001498:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800149c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80014a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80014a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014a8:	4b59      	ldr	r3, [pc, #356]	@ (8001610 <ETS+0xee8>)
 80014aa:	443b      	add	r3, r7
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80014bc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80014c0:	edd3 7a08 	vldr	s15, [r3, #32]
 80014c4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80014c8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80014cc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80014d0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80014d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014dc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80014e0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80014e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80014e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014ec:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80014f0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80014f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80014f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001500:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001504:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001508:	edd3 7a01 	vldr	s15, [r3, #4]
 800150c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001510:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001514:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001518:	edd3 7a02 	vldr	s15, [r3, #8]
 800151c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001520:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001524:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001528:	edd3 7a06 	vldr	s15, [r3, #24]
 800152c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001530:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001534:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001538:	edd3 7a07 	vldr	s15, [r3, #28]
 800153c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001544:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001548:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800154c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001550:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001554:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001558:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800155c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001560:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001564:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001568:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800156c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001570:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001574:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001578:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800157c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001588:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800158c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001590:	edd3 7a04 	vldr	s15, [r3, #16]
 8001594:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001598:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800159c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80015a0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80015a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80015a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015ac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80015b0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80015b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80015b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015bc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80015c0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80015c4:	edd3 7a06 	vldr	s15, [r3, #24]
 80015c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <ETS+0xedc>)
 80015d2:	443b      	add	r3, r7
 80015d4:	edd3 6a00 	vldr	s13, [r3]
 80015d8:	4b10      	ldr	r3, [pc, #64]	@ (800161c <ETS+0xef4>)
 80015da:	443b      	add	r3, r7
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015e8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80015ec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80015f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80015f4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80015f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80015fc:	4b01      	ldr	r3, [pc, #4]	@ (8001604 <ETS+0xedc>)
 80015fe:	443b      	add	r3, r7
 8001600:	e00e      	b.n	8001620 <ETS+0xef8>
 8001602:	bf00      	nop
 8001604:	00014cac 	.word	0x00014cac
 8001608:	00014cf8 	.word	0x00014cf8
 800160c:	00014cd0 	.word	0x00014cd0
 8001610:	00014cb0 	.word	0x00014cb0
 8001614:	00014ccc 	.word	0x00014ccc
 8001618:	00014c98 	.word	0x00014c98
 800161c:	00014c9c 	.word	0x00014c9c
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800162c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001630:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001634:	edd3 7a02 	vldr	s15, [r3, #8]
 8001638:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800163c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001640:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001644:	edd3 7a03 	vldr	s15, [r3, #12]
 8001648:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800164c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001650:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001654:	edd3 7a05 	vldr	s15, [r3, #20]
 8001658:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800165c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001660:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001664:	edd3 7a06 	vldr	s15, [r3, #24]
 8001668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001670:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001674:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001678:	edd3 7a02 	vldr	s15, [r3, #8]
 800167c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001680:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001684:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001688:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800168c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001690:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001694:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001698:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800169c:	edd3 7a07 	vldr	s15, [r3, #28]
 80016a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a8:	4be4      	ldr	r3, [pc, #912]	@ (8001a3c <ETS+0x1314>)
 80016aa:	443b      	add	r3, r7
 80016ac:	edd3 6a00 	vldr	s13, [r3]
 80016b0:	4be3      	ldr	r3, [pc, #908]	@ (8001a40 <ETS+0x1318>)
 80016b2:	443b      	add	r3, r7
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80016c4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80016d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016d4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80016d8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80016dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80016e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016e4:	4bd5      	ldr	r3, [pc, #852]	@ (8001a3c <ETS+0x1314>)
 80016e6:	443b      	add	r3, r7
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80016f8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80016fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001700:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001704:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001708:	4bcd      	ldr	r3, [pc, #820]	@ (8001a40 <ETS+0x1318>)
 800170a:	443b      	add	r3, r7
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001714:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001718:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800171c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001728:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800172c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001730:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001734:	edd3 7a04 	vldr	s15, [r3, #16]
 8001738:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800173c:	4bc1      	ldr	r3, [pc, #772]	@ (8001a44 <ETS+0x131c>)
 800173e:	443b      	add	r3, r7
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800174c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001750:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800175c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001760:	4bb9      	ldr	r3, [pc, #740]	@ (8001a48 <ETS+0x1320>)
 8001762:	443b      	add	r3, r7
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800176c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001770:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001774:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001780:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001784:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001788:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800178c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001790:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001794:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001798:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800179c:	edd3 7a08 	vldr	s15, [r3, #32]
 80017a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017a8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80017ac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80017b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017bc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80017c0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80017c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80017c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017cc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80017d0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80017d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80017d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017dc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80017e0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80017e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80017e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f0:	4b96      	ldr	r3, [pc, #600]	@ (8001a4c <ETS+0x1324>)
 80017f2:	443b      	add	r3, r7
 80017f4:	edc3 7a00 	vstr	s15, [r3]

    divs =  2 * fabsf(X[4])*fabsf(X[4])*fabsf(X[4]) * (X[4] * X1_2 - X[1] * X[2] * X[3] + X2_2 + X[0] * X3_2 - 4 * X[0] * X[4]);
 80017f8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80017fc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001800:	edd3 7a04 	vldr	s15, [r3, #16]
 8001804:	eef0 7ae7 	vabs.f32	s15, s15
 8001808:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800180c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001810:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001814:	edd3 7a04 	vldr	s15, [r3, #16]
 8001818:	eef0 7ae7 	vabs.f32	s15, s15
 800181c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001820:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001824:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001828:	edd3 7a04 	vldr	s15, [r3, #16]
 800182c:	eef0 7ae7 	vabs.f32	s15, s15
 8001830:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001834:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001838:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800183c:	edd3 6a04 	vldr	s13, [r3, #16]
 8001840:	4b83      	ldr	r3, [pc, #524]	@ (8001a50 <ETS+0x1328>)
 8001842:	443b      	add	r3, r7
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800184c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001850:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001854:	ed93 6a01 	vldr	s12, [r3, #4]
 8001858:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800185c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001860:	edd3 7a02 	vldr	s15, [r3, #8]
 8001864:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001868:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800186c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001870:	edd3 7a03 	vldr	s15, [r3, #12]
 8001874:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001878:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800187c:	4b75      	ldr	r3, [pc, #468]	@ (8001a54 <ETS+0x132c>)
 800187e:	443b      	add	r3, r7
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001888:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800188c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001890:	ed93 6a00 	vldr	s12, [r3]
 8001894:	4b69      	ldr	r3, [pc, #420]	@ (8001a3c <ETS+0x1314>)
 8001896:	443b      	add	r3, r7
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018a0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018a4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80018a8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 80018b4:	ee27 6a86 	vmul.f32	s12, s15, s12
 80018b8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80018bc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80018c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80018c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d0:	4b61      	ldr	r3, [pc, #388]	@ (8001a58 <ETS+0x1330>)
 80018d2:	443b      	add	r3, r7
 80018d4:	edc3 7a00 	vstr	s15, [r3]

    sx = -X4_2*X[4] * sqrtf(psi8 * (-X3_2 + 4*X[4])) / (divs);
 80018d8:	4b60      	ldr	r3, [pc, #384]	@ (8001a5c <ETS+0x1334>)
 80018da:	443b      	add	r3, r7
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	eeb1 7a67 	vneg.f32	s14, s15
 80018e4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80018e8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80018ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80018f0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80018f4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80018f8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80018fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001900:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001904:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001908:	4b4c      	ldr	r3, [pc, #304]	@ (8001a3c <ETS+0x1314>)
 800190a:	443b      	add	r3, r7
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001914:	4b4d      	ldr	r3, [pc, #308]	@ (8001a4c <ETS+0x1324>)
 8001916:	443b      	add	r3, r7
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001920:	eeb0 0a67 	vmov.f32	s0, s15
 8001924:	f005 f8a4 	bl	8006a70 <sqrtf>
 8001928:	eef0 7a40 	vmov.f32	s15, s0
 800192c:	ee68 6a27 	vmul.f32	s13, s16, s15
 8001930:	4b49      	ldr	r3, [pc, #292]	@ (8001a58 <ETS+0x1330>)
 8001932:	443b      	add	r3, r7
 8001934:	ed93 7a00 	vldr	s14, [r3]
 8001938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800193c:	4b48      	ldr	r3, [pc, #288]	@ (8001a60 <ETS+0x1338>)
 800193e:	443b      	add	r3, r7
 8001940:	edc3 7a00 	vstr	s15, [r3]
    sy = -X4_2*X[4] * sqrtf(psi8 * (-X2_2 + 4*X[0]*X[4])) / (divs);
 8001944:	4b45      	ldr	r3, [pc, #276]	@ (8001a5c <ETS+0x1334>)
 8001946:	443b      	add	r3, r7
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	eeb1 7a67 	vneg.f32	s14, s15
 8001950:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001954:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001958:	edd3 7a04 	vldr	s15, [r3, #16]
 800195c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001960:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001964:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001970:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001974:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001978:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800197c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001980:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001984:	4b33      	ldr	r3, [pc, #204]	@ (8001a54 <ETS+0x132c>)
 8001986:	443b      	add	r3, r7
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001990:	4b2e      	ldr	r3, [pc, #184]	@ (8001a4c <ETS+0x1324>)
 8001992:	443b      	add	r3, r7
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199c:	eeb0 0a67 	vmov.f32	s0, s15
 80019a0:	f005 f866 	bl	8006a70 <sqrtf>
 80019a4:	eef0 7a40 	vmov.f32	s15, s0
 80019a8:	ee68 6a27 	vmul.f32	s13, s16, s15
 80019ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001a58 <ETS+0x1330>)
 80019ae:	443b      	add	r3, r7
 80019b0:	ed93 7a00 	vldr	s14, [r3]
 80019b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a64 <ETS+0x133c>)
 80019ba:	443b      	add	r3, r7
 80019bc:	edc3 7a00 	vstr	s15, [r3]
    sz = -X4_2*X[4] * sqrtf(psi8 * (-X1_2 + 4*X[0])) / (divs);
 80019c0:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <ETS+0x1334>)
 80019c2:	443b      	add	r3, r7
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	eeb1 7a67 	vneg.f32	s14, s15
 80019cc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80019d0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80019d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80019d8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80019dc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80019e0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80019e4:	edd3 7a00 	vldr	s15, [r3]
 80019e8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80019ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019f0:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <ETS+0x1328>)
 80019f2:	443b      	add	r3, r7
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <ETS+0x1324>)
 80019fe:	443b      	add	r3, r7
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a08:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0c:	f005 f830 	bl	8006a70 <sqrtf>
 8001a10:	eef0 7a40 	vmov.f32	s15, s0
 8001a14:	ee68 6a27 	vmul.f32	s13, s16, s15
 8001a18:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <ETS+0x1330>)
 8001a1a:	443b      	add	r3, r7
 8001a1c:	ed93 7a00 	vldr	s14, [r3]
 8001a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a24:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <ETS+0x1340>)
 8001a26:	443b      	add	r3, r7
 8001a28:	edc3 7a00 	vstr	s15, [r3]

    rho = (2 * X[1]*X[4] - X[2]*X[3]) / (2*X4_2 * sqrtf(-(X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4]) / (X4_2*X[4])));
 8001a2c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a30:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001a34:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a38:	e018      	b.n	8001a6c <ETS+0x1344>
 8001a3a:	bf00      	nop
 8001a3c:	00014ca8 	.word	0x00014ca8
 8001a40:	00014ca0 	.word	0x00014ca0
 8001a44:	00014c9c 	.word	0x00014c9c
 8001a48:	00014c98 	.word	0x00014c98
 8001a4c:	00014cf4 	.word	0x00014cf4
 8001a50:	00014cb0 	.word	0x00014cb0
 8001a54:	00014cac 	.word	0x00014cac
 8001a58:	00014cf0 	.word	0x00014cf0
 8001a5c:	00014ca4 	.word	0x00014ca4
 8001a60:	00014cc8 	.word	0x00014cc8
 8001a64:	00014cc4 	.word	0x00014cc4
 8001a68:	00014cc0 	.word	0x00014cc0
 8001a6c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a70:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a74:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001a78:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a80:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a84:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001a88:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a8c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001a90:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001a94:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9c:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001aa0:	4be2      	ldr	r3, [pc, #904]	@ (8001e2c <ETS+0x1704>)
 8001aa2:	443b      	add	r3, r7
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8001aac:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001ab0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001ab4:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ab8:	4bdd      	ldr	r3, [pc, #884]	@ (8001e30 <ETS+0x1708>)
 8001aba:	443b      	add	r3, r7
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001ac8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001acc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001ad0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001ad4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001ad8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001adc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ae0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001ae4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001ae8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001af4:	4bcf      	ldr	r3, [pc, #828]	@ (8001e34 <ETS+0x170c>)
 8001af6:	443b      	add	r3, r7
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b00:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b04:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001b08:	edd3 6a00 	vldr	s13, [r3]
 8001b0c:	4bca      	ldr	r3, [pc, #808]	@ (8001e38 <ETS+0x1710>)
 8001b0e:	443b      	add	r3, r7
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b1c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b20:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001b2c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b30:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b34:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001b38:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b44:	eeb1 7a67 	vneg.f32	s14, s15
 8001b48:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001b4c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001b50:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b54:	4bb5      	ldr	r3, [pc, #724]	@ (8001e2c <ETS+0x1704>)
 8001b56:	443b      	add	r3, r7
 8001b58:	edd3 7a00 	vldr	s15, [r3]
 8001b5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b64:	eeb0 0a66 	vmov.f32	s0, s13
 8001b68:	f004 ff82 	bl	8006a70 <sqrtf>
 8001b6c:	eef0 7a40 	vmov.f32	s15, s0
 8001b70:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8001b74:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001b78:	4bb0      	ldr	r3, [pc, #704]	@ (8001e3c <ETS+0x1714>)
 8001b7a:	443b      	add	r3, r7
 8001b7c:	edc3 7a00 	vstr	s15, [r3]
    rho = -atanf(rho);
 8001b80:	4bae      	ldr	r3, [pc, #696]	@ (8001e3c <ETS+0x1714>)
 8001b82:	443b      	add	r3, r7
 8001b84:	ed93 0a00 	vldr	s0, [r3]
 8001b88:	f004 ff90 	bl	8006aac <atanf>
 8001b8c:	eef0 7a40 	vmov.f32	s15, s0
 8001b90:	eef1 7a67 	vneg.f32	s15, s15
 8001b94:	4ba9      	ldr	r3, [pc, #676]	@ (8001e3c <ETS+0x1714>)
 8001b96:	443b      	add	r3, r7
 8001b98:	edc3 7a00 	vstr	s15, [r3]
    lambida = -atanf((X[3] / X[4]) * sqrtf(-(X4_2 * (X[4]*X1_2 - X[1]*X[2]*X[3] + X2_2 - 4*X[0]*X[4]) / (2*X1_2*X3_2*X[4] - 4* X1_2 * X4_2 - 4*X1_2 * X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2 * X3_2 + X[0]* X3_2*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2))));
 8001b9c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001ba0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001ba4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ba8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001bac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001bb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bb4:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8001bb8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001bbc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001bc0:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bc4:	4b9a      	ldr	r3, [pc, #616]	@ (8001e30 <ETS+0x1708>)
 8001bc6:	443b      	add	r3, r7
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001bd4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001bd8:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bdc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001be0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001be4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001be8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bec:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001bf0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001bf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c00:	4b8c      	ldr	r3, [pc, #560]	@ (8001e34 <ETS+0x170c>)
 8001c02:	443b      	add	r3, r7
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001c10:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001c1c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c20:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001c24:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001c28:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c34:	4b7d      	ldr	r3, [pc, #500]	@ (8001e2c <ETS+0x1704>)
 8001c36:	443b      	add	r3, r7
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c40:	4b7b      	ldr	r3, [pc, #492]	@ (8001e30 <ETS+0x1708>)
 8001c42:	443b      	add	r3, r7
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c4c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e38 <ETS+0x1710>)
 8001c4e:	443b      	add	r3, r7
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c58:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001c5c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001c60:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c68:	4b71      	ldr	r3, [pc, #452]	@ (8001e30 <ETS+0x1708>)
 8001c6a:	443b      	add	r3, r7
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8001c74:	ee27 6a86 	vmul.f32	s12, s15, s12
 8001c78:	4b6c      	ldr	r3, [pc, #432]	@ (8001e2c <ETS+0x1704>)
 8001c7a:	443b      	add	r3, r7
 8001c7c:	edd3 7a00 	vldr	s15, [r3]
 8001c80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c88:	4b69      	ldr	r3, [pc, #420]	@ (8001e30 <ETS+0x1708>)
 8001c8a:	443b      	add	r3, r7
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 8001c94:	ee27 6a86 	vmul.f32	s12, s15, s12
 8001c98:	4b64      	ldr	r3, [pc, #400]	@ (8001e2c <ETS+0x1704>)
 8001c9a:	443b      	add	r3, r7
 8001c9c:	edd3 7a00 	vldr	s15, [r3]
 8001ca0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ca4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ca8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001cac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001cb0:	ed93 6a01 	vldr	s12, [r3, #4]
 8001cb4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001cb8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001cbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cc0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8001e38 <ETS+0x1710>)
 8001cc6:	443b      	add	r3, r7
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cd0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001cd4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001cd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cdc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ce0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ce4:	4b53      	ldr	r3, [pc, #332]	@ (8001e34 <ETS+0x170c>)
 8001ce6:	443b      	add	r3, r7
 8001ce8:	ed93 6a00 	vldr	s12, [r3]
 8001cec:	4b52      	ldr	r3, [pc, #328]	@ (8001e38 <ETS+0x1710>)
 8001cee:	443b      	add	r3, r7
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cfc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001d00:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001d04:	ed93 6a00 	vldr	s12, [r3]
 8001d08:	4b4b      	ldr	r3, [pc, #300]	@ (8001e38 <ETS+0x1710>)
 8001d0a:	443b      	add	r3, r7
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d14:	4b48      	ldr	r3, [pc, #288]	@ (8001e38 <ETS+0x1710>)
 8001d16:	443b      	add	r3, r7
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d24:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001d28:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
 8001d34:	ee27 6a86 	vmul.f32	s12, s15, s12
 8001d38:	4b3f      	ldr	r3, [pc, #252]	@ (8001e38 <ETS+0x1710>)
 8001d3a:	443b      	add	r3, r7
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d44:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001d48:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001d4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d50:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d58:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001d5c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 8001d68:	ee27 6a86 	vmul.f32	s12, s15, s12
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e2c <ETS+0x1704>)
 8001d6e:	443b      	add	r3, r7
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d80:	eef1 7a67 	vneg.f32	s15, s15
 8001d84:	eeb0 0a67 	vmov.f32	s0, s15
 8001d88:	f004 fe72 	bl	8006a70 <sqrtf>
 8001d8c:	eef0 7a40 	vmov.f32	s15, s0
 8001d90:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d94:	eeb0 0a67 	vmov.f32	s0, s15
 8001d98:	f004 fe88 	bl	8006aac <atanf>
 8001d9c:	eef0 7a40 	vmov.f32	s15, s0
 8001da0:	eef1 7a67 	vneg.f32	s15, s15
 8001da4:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <ETS+0x1718>)
 8001da6:	443b      	add	r3, r7
 8001da8:	edc3 7a00 	vstr	s15, [r3]

    n1 = -X1_2*X7_2 + 4*X1_2*X[4]*X[8] - 4*X[1]*X[2]*X[3]*X[8] + 2*X[1]*X[2]*X[6]*X[7] + 2*X[1]*X[3]*X[5]*X[7] - 4*X[1]*X[4]*X[5]*X[6] - X2_2*X6_2 + 2*X[2]*X[3]*X[5]*X[6] + 4*X2_2*X[8] - 4*X[2]*X[5]*X[7] - X3_2*X5_2 + 4*X[1]*X3_2*X[8] - 4*X[0]*X[3]*X[6]*X[7] + 4*X[4]*X5_2 + 4*X[0]*X[4]*X6_2 + 4*X[0]*X7_2 - 16*X[0]*X[4]*X[8];
 8001dac:	4b20      	ldr	r3, [pc, #128]	@ (8001e30 <ETS+0x1708>)
 8001dae:	443b      	add	r3, r7
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	eeb1 7a67 	vneg.f32	s14, s15
 8001db8:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <ETS+0x171c>)
 8001dba:	443b      	add	r3, r7
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e30 <ETS+0x1708>)
 8001dc6:	443b      	add	r3, r7
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001dd0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001dd4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001dd8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001ddc:	edd3 7a04 	vldr	s15, [r3, #16]
 8001de0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001de4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001de8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001dec:	edd3 7a08 	vldr	s15, [r3, #32]
 8001df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001dfc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001e00:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e04:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001e08:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e0c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001e10:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001e14:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e1c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001e20:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001e24:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e28:	e00e      	b.n	8001e48 <ETS+0x1720>
 8001e2a:	bf00      	nop
 8001e2c:	00014ca4 	.word	0x00014ca4
 8001e30:	00014cb0 	.word	0x00014cb0
 8001e34:	00014cac 	.word	0x00014cac
 8001e38:	00014ca8 	.word	0x00014ca8
 8001e3c:	00014cbc 	.word	0x00014cbc
 8001e40:	00014cb4 	.word	0x00014cb4
 8001e44:	00014c98 	.word	0x00014c98
 8001e48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e4c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001e50:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001e54:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e60:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001e64:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001e68:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e6c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001e70:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001e74:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001e78:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e80:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001e84:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001e88:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e90:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001e94:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001e98:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001ea8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001eac:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eb0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001eb4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001eb8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001ebc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ec0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001ec8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001ecc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ed0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ed4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001ed8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001edc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ee8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001eec:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001ef0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ef4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001ef8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001efc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001f00:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001f04:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f0c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001f10:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001f14:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f1c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001f20:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001f24:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f30:	4be7      	ldr	r3, [pc, #924]	@ (80022d0 <ETS+0x1ba8>)
 8001f32:	443b      	add	r3, r7
 8001f34:	edd3 6a00 	vldr	s13, [r3]
 8001f38:	4be6      	ldr	r3, [pc, #920]	@ (80022d4 <ETS+0x1bac>)
 8001f3a:	443b      	add	r3, r7
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f48:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001f4c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001f50:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f54:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f58:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001f5c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001f60:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f68:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001f6c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001f70:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f78:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001f7c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001f80:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f8c:	4bd0      	ldr	r3, [pc, #832]	@ (80022d0 <ETS+0x1ba8>)
 8001f8e:	443b      	add	r3, r7
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001f98:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001f9c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001fa0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001fa4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001fb4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001fb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fbc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001fc0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001fc4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001fc8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001fcc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fd4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8001fd8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8001fdc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fe8:	4bbb      	ldr	r3, [pc, #748]	@ (80022d8 <ETS+0x1bb0>)
 8001fea:	443b      	add	r3, r7
 8001fec:	edd3 6a00 	vldr	s13, [r3]
 8001ff0:	4bba      	ldr	r3, [pc, #744]	@ (80022dc <ETS+0x1bb4>)
 8001ff2:	443b      	add	r3, r7
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ffc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002000:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002004:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002008:	edd3 7a01 	vldr	s15, [r3, #4]
 800200c:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002010:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002014:	4bb0      	ldr	r3, [pc, #704]	@ (80022d8 <ETS+0x1bb0>)
 8002016:	443b      	add	r3, r7
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002020:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002024:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002028:	edd3 7a08 	vldr	s15, [r3, #32]
 800202c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002034:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002038:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002044:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002048:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800204c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002050:	edd3 7a03 	vldr	s15, [r3, #12]
 8002054:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002058:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800205c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002060:	edd3 7a06 	vldr	s15, [r3, #24]
 8002064:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002068:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800206c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002070:	edd3 7a07 	vldr	s15, [r3, #28]
 8002074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002078:	ee37 7a67 	vsub.f32	s14, s14, s15
 800207c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002080:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002084:	edd3 7a04 	vldr	s15, [r3, #16]
 8002088:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800208c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002090:	4b92      	ldr	r3, [pc, #584]	@ (80022dc <ETS+0x1bb4>)
 8002092:	443b      	add	r3, r7
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80020a4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80020b0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020b4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80020b8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80020bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80020c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020c4:	4b83      	ldr	r3, [pc, #524]	@ (80022d4 <ETS+0x1bac>)
 80020c6:	443b      	add	r3, r7
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80020d8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80020e4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020e8:	4b7d      	ldr	r3, [pc, #500]	@ (80022e0 <ETS+0x1bb8>)
 80020ea:	443b      	add	r3, r7
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020f8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80020fc:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8002108:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800210c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002110:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002114:	edd3 7a04 	vldr	s15, [r3, #16]
 8002118:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800211c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002120:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002124:	edd3 7a08 	vldr	s15, [r3, #32]
 8002128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002130:	4b6c      	ldr	r3, [pc, #432]	@ (80022e4 <ETS+0x1bbc>)
 8002132:	443b      	add	r3, r7
 8002134:	edc3 7a00 	vstr	s15, [r3]
    n2 = X1_2*X[4] - X[1]*X[2]*X[3] + X2_2 + X[0]*X3_2 - 4*X[0]*X[4];
 8002138:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800213c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002140:	ed93 7a04 	vldr	s14, [r3, #16]
 8002144:	4b68      	ldr	r3, [pc, #416]	@ (80022e8 <ETS+0x1bc0>)
 8002146:	443b      	add	r3, r7
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002150:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002154:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002158:	edd3 6a01 	vldr	s13, [r3, #4]
 800215c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002160:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002164:	edd3 7a02 	vldr	s15, [r3, #8]
 8002168:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800216c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002170:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002174:	edd3 7a03 	vldr	s15, [r3, #12]
 8002178:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800217c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002180:	4b53      	ldr	r3, [pc, #332]	@ (80022d0 <ETS+0x1ba8>)
 8002182:	443b      	add	r3, r7
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800218c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002190:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002194:	edd3 6a00 	vldr	s13, [r3]
 8002198:	4b4f      	ldr	r3, [pc, #316]	@ (80022d8 <ETS+0x1bb0>)
 800219a:	443b      	add	r3, r7
 800219c:	edd3 7a00 	vldr	s15, [r3]
 80021a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021a8:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80021ac:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80021b0:	edd3 7a00 	vldr	s15, [r3]
 80021b4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80021b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80021bc:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80021c0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80021c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80021c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d0:	4b46      	ldr	r3, [pc, #280]	@ (80022ec <ETS+0x1bc4>)
 80021d2:	443b      	add	r3, r7
 80021d4:	edc3 7a00 	vstr	s15, [r3]
    n3 = 2*X1_2*X3_2*X[4] - 4*X1_2*X4_2 - X[1]*X[2]*X3_2*X[3] + X2_2*X3_2 + X[0]*X3_2 - 8*X[0]*X3_2*X[4] + 16*X[0]*X4_2;
 80021d8:	4b43      	ldr	r3, [pc, #268]	@ (80022e8 <ETS+0x1bc0>)
 80021da:	443b      	add	r3, r7
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80021e4:	4b3c      	ldr	r3, [pc, #240]	@ (80022d8 <ETS+0x1bb0>)
 80021e6:	443b      	add	r3, r7
 80021e8:	edd3 7a00 	vldr	s15, [r3]
 80021ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80021f4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80021f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80021fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002200:	4b39      	ldr	r3, [pc, #228]	@ (80022e8 <ETS+0x1bc0>)
 8002202:	443b      	add	r3, r7
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800220c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002210:	4b37      	ldr	r3, [pc, #220]	@ (80022f0 <ETS+0x1bc8>)
 8002212:	443b      	add	r3, r7
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002220:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002224:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002228:	edd3 6a01 	vldr	s13, [r3, #4]
 800222c:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002230:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002234:	edd3 7a02 	vldr	s15, [r3, #8]
 8002238:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800223c:	4b26      	ldr	r3, [pc, #152]	@ (80022d8 <ETS+0x1bb0>)
 800223e:	443b      	add	r3, r7
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002248:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800224c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002250:	edd3 7a03 	vldr	s15, [r3, #12]
 8002254:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002258:	ee37 7a67 	vsub.f32	s14, s14, s15
 800225c:	4b1c      	ldr	r3, [pc, #112]	@ (80022d0 <ETS+0x1ba8>)
 800225e:	443b      	add	r3, r7
 8002260:	edd3 6a00 	vldr	s13, [r3]
 8002264:	4b1c      	ldr	r3, [pc, #112]	@ (80022d8 <ETS+0x1bb0>)
 8002266:	443b      	add	r3, r7
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002274:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002278:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800227c:	edd3 6a00 	vldr	s13, [r3]
 8002280:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <ETS+0x1bb0>)
 8002282:	443b      	add	r3, r7
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800228c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002290:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002294:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80022a0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80022a4:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <ETS+0x1bb0>)
 80022a6:	443b      	add	r3, r7
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022b0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80022b4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80022b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80022bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022c4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80022c8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80022cc:	e012      	b.n	80022f4 <ETS+0x1bcc>
 80022ce:	bf00      	nop
 80022d0:	00014cac 	.word	0x00014cac
 80022d4:	00014c9c 	.word	0x00014c9c
 80022d8:	00014ca8 	.word	0x00014ca8
 80022dc:	00014ca0 	.word	0x00014ca0
 80022e0:	00014c98 	.word	0x00014c98
 80022e4:	00014cec 	.word	0x00014cec
 80022e8:	00014cb0 	.word	0x00014cb0
 80022ec:	00014ce8 	.word	0x00014ce8
 80022f0:	00014ca4 	.word	0x00014ca4
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80022fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002300:	4bbd      	ldr	r3, [pc, #756]	@ (80025f8 <ETS+0x1ed0>)
 8002302:	443b      	add	r3, r7
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800230c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002310:	4bba      	ldr	r3, [pc, #744]	@ (80025fc <ETS+0x1ed4>)
 8002312:	443b      	add	r3, r7
 8002314:	edc3 7a00 	vstr	s15, [r3]
    n4 = 4*X[4] - X3_2;
 8002318:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800231c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002320:	edd3 7a04 	vldr	s15, [r3, #16]
 8002324:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800232c:	4bb4      	ldr	r3, [pc, #720]	@ (8002600 <ETS+0x1ed8>)
 800232e:	443b      	add	r3, r7
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002338:	4bb2      	ldr	r3, [pc, #712]	@ (8002604 <ETS+0x1edc>)
 800233a:	443b      	add	r3, r7
 800233c:	edc3 7a00 	vstr	s15, [r3]
    n5 = 4*X[0]*X[4] - X2_2;
 8002340:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002344:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002354:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002358:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800235c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002364:	4ba8      	ldr	r3, [pc, #672]	@ (8002608 <ETS+0x1ee0>)
 8002366:	443b      	add	r3, r7
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002370:	4ba6      	ldr	r3, [pc, #664]	@ (800260c <ETS+0x1ee4>)
 8002372:	443b      	add	r3, r7
 8002374:	edc3 7a00 	vstr	s15, [r3]
    n6 = 4*X[0] - X1_2;
 8002378:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800237c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002380:	edd3 7a00 	vldr	s15, [r3]
 8002384:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002388:	ee27 7a87 	vmul.f32	s14, s15, s14
 800238c:	4ba0      	ldr	r3, [pc, #640]	@ (8002610 <ETS+0x1ee8>)
 800238e:	443b      	add	r3, r7
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002398:	4b9e      	ldr	r3, [pc, #632]	@ (8002614 <ETS+0x1eec>)
 800239a:	443b      	add	r3, r7
 800239c:	edc3 7a00 	vstr	s15, [r3]

    phi = -atanf((fabsf(X[4])*sqrtf(n1*n5) * (2*X[2] - X[1]*X[3]) * sqrtf((X[4]*n4*n6) / n3)) / (X4_2 * sqrtf(-n2 / X[4]) * sqrtf(n1*n6) * sqrtf(-(n2 * n4) / n3) * sqrtf(-(n4*n5) / (X[4]*n2))));
 80023a0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80023a4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80023a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80023ac:	eeb0 8ae7 	vabs.f32	s16, s15
 80023b0:	4b99      	ldr	r3, [pc, #612]	@ (8002618 <ETS+0x1ef0>)
 80023b2:	443b      	add	r3, r7
 80023b4:	ed93 7a00 	vldr	s14, [r3]
 80023b8:	4b94      	ldr	r3, [pc, #592]	@ (800260c <ETS+0x1ee4>)
 80023ba:	443b      	add	r3, r7
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c4:	eeb0 0a67 	vmov.f32	s0, s15
 80023c8:	f004 fb52 	bl	8006a70 <sqrtf>
 80023cc:	eef0 7a40 	vmov.f32	s15, s0
 80023d0:	ee28 7a27 	vmul.f32	s14, s16, s15
 80023d4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80023d8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80023dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80023e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80023e4:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80023e8:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80023ec:	ed93 6a01 	vldr	s12, [r3, #4]
 80023f0:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80023f4:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80023f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80023fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002400:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002404:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002408:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800240c:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 8002410:	ed93 7a04 	vldr	s14, [r3, #16]
 8002414:	4b7b      	ldr	r3, [pc, #492]	@ (8002604 <ETS+0x1edc>)
 8002416:	443b      	add	r3, r7
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002420:	4b7c      	ldr	r3, [pc, #496]	@ (8002614 <ETS+0x1eec>)
 8002422:	443b      	add	r3, r7
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242c:	4b73      	ldr	r3, [pc, #460]	@ (80025fc <ETS+0x1ed4>)
 800242e:	443b      	add	r3, r7
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002438:	eeb0 0a66 	vmov.f32	s0, s13
 800243c:	f004 fb18 	bl	8006a70 <sqrtf>
 8002440:	eef0 7a40 	vmov.f32	s15, s0
 8002444:	ee28 8a27 	vmul.f32	s16, s16, s15
 8002448:	4b74      	ldr	r3, [pc, #464]	@ (800261c <ETS+0x1ef4>)
 800244a:	443b      	add	r3, r7
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	eeb1 7a67 	vneg.f32	s14, s15
 8002454:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002458:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 800245c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002460:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002464:	eeb0 0a66 	vmov.f32	s0, s13
 8002468:	f004 fb02 	bl	8006a70 <sqrtf>
 800246c:	eeb0 7a40 	vmov.f32	s14, s0
 8002470:	4b61      	ldr	r3, [pc, #388]	@ (80025f8 <ETS+0x1ed0>)
 8002472:	443b      	add	r3, r7
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	ee67 8a27 	vmul.f32	s17, s14, s15
 800247c:	4b66      	ldr	r3, [pc, #408]	@ (8002618 <ETS+0x1ef0>)
 800247e:	443b      	add	r3, r7
 8002480:	ed93 7a00 	vldr	s14, [r3]
 8002484:	4b63      	ldr	r3, [pc, #396]	@ (8002614 <ETS+0x1eec>)
 8002486:	443b      	add	r3, r7
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002490:	eeb0 0a67 	vmov.f32	s0, s15
 8002494:	f004 faec 	bl	8006a70 <sqrtf>
 8002498:	eef0 7a40 	vmov.f32	s15, s0
 800249c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80024a0:	4b5e      	ldr	r3, [pc, #376]	@ (800261c <ETS+0x1ef4>)
 80024a2:	443b      	add	r3, r7
 80024a4:	ed93 7a00 	vldr	s14, [r3]
 80024a8:	4b56      	ldr	r3, [pc, #344]	@ (8002604 <ETS+0x1edc>)
 80024aa:	443b      	add	r3, r7
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b4:	eeb1 7a67 	vneg.f32	s14, s15
 80024b8:	4b50      	ldr	r3, [pc, #320]	@ (80025fc <ETS+0x1ed4>)
 80024ba:	443b      	add	r3, r7
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80024c4:	eeb0 0a66 	vmov.f32	s0, s13
 80024c8:	f004 fad2 	bl	8006a70 <sqrtf>
 80024cc:	eef0 7a40 	vmov.f32	s15, s0
 80024d0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80024d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002604 <ETS+0x1edc>)
 80024d6:	443b      	add	r3, r7
 80024d8:	ed93 7a00 	vldr	s14, [r3]
 80024dc:	4b4b      	ldr	r3, [pc, #300]	@ (800260c <ETS+0x1ee4>)
 80024de:	443b      	add	r3, r7
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e8:	eeb1 7a67 	vneg.f32	s14, s15
 80024ec:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80024f0:	f6a3 530c 	subw	r3, r3, #3340	@ 0xd0c
 80024f4:	edd3 6a04 	vldr	s13, [r3, #16]
 80024f8:	4b48      	ldr	r3, [pc, #288]	@ (800261c <ETS+0x1ef4>)
 80024fa:	443b      	add	r3, r7
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002504:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002508:	eeb0 0a66 	vmov.f32	s0, s13
 800250c:	f004 fab0 	bl	8006a70 <sqrtf>
 8002510:	eef0 7a40 	vmov.f32	s15, s0
 8002514:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002518:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800251c:	eeb0 0a47 	vmov.f32	s0, s14
 8002520:	f004 fac4 	bl	8006aac <atanf>
 8002524:	eef0 7a40 	vmov.f32	s15, s0
 8002528:	eef1 7a67 	vneg.f32	s15, s15
 800252c:	4b3c      	ldr	r3, [pc, #240]	@ (8002620 <ETS+0x1ef8>)
 800252e:	443b      	add	r3, r7
 8002530:	edc3 7a00 	vstr	s15, [r3]

    p[0] = sx;
 8002534:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002538:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a39      	ldr	r2, [pc, #228]	@ (8002624 <ETS+0x1efc>)
 8002540:	443a      	add	r2, r7
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	601a      	str	r2, [r3, #0]
    p[1] = sy;
 8002546:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800254a:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	3304      	adds	r3, #4
 8002552:	4a35      	ldr	r2, [pc, #212]	@ (8002628 <ETS+0x1f00>)
 8002554:	443a      	add	r2, r7
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	601a      	str	r2, [r3, #0]
    p[2] = sz;
 800255a:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800255e:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3308      	adds	r3, #8
 8002566:	4a31      	ldr	r2, [pc, #196]	@ (800262c <ETS+0x1f04>)
 8002568:	443a      	add	r2, r7
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	601a      	str	r2, [r3, #0]
    p[3] = bx;
 800256e:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002572:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	330c      	adds	r3, #12
 800257a:	4a2d      	ldr	r2, [pc, #180]	@ (8002630 <ETS+0x1f08>)
 800257c:	443a      	add	r2, r7
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	601a      	str	r2, [r3, #0]
    p[4] = by;
 8002582:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 8002586:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3310      	adds	r3, #16
 800258e:	4a29      	ldr	r2, [pc, #164]	@ (8002634 <ETS+0x1f0c>)
 8002590:	443a      	add	r2, r7
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	601a      	str	r2, [r3, #0]
    p[5] = bz;
 8002596:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 800259a:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3314      	adds	r3, #20
 80025a2:	4a25      	ldr	r2, [pc, #148]	@ (8002638 <ETS+0x1f10>)
 80025a4:	443a      	add	r2, r7
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	601a      	str	r2, [r3, #0]
    p[6] = rho;
 80025aa:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80025ae:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3318      	adds	r3, #24
 80025b6:	4a21      	ldr	r2, [pc, #132]	@ (800263c <ETS+0x1f14>)
 80025b8:	443a      	add	r2, r7
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	601a      	str	r2, [r3, #0]
    p[7] = phi;
 80025be:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80025c2:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	331c      	adds	r3, #28
 80025ca:	4a15      	ldr	r2, [pc, #84]	@ (8002620 <ETS+0x1ef8>)
 80025cc:	443a      	add	r2, r7
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	601a      	str	r2, [r3, #0]
    p[8] = lambida;
 80025d2:	f507 6352 	add.w	r3, r7, #3360	@ 0xd20
 80025d6:	f5a3 6352 	sub.w	r3, r3, #3360	@ 0xd20
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	3320      	adds	r3, #32
 80025de:	4a18      	ldr	r2, [pc, #96]	@ (8002640 <ETS+0x1f18>)
 80025e0:	443a      	add	r2, r7
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	601a      	str	r2, [r3, #0]
}
 80025e6:	bf00      	nop
 80025e8:	f507 37a6 	add.w	r7, r7, #84992	@ 0x14c00
 80025ec:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 80025f0:	46bd      	mov	sp, r7
 80025f2:	ecbd 8b02 	vpop	{d8}
 80025f6:	bd90      	pop	{r4, r7, pc}
 80025f8:	00014ca4 	.word	0x00014ca4
 80025fc:	00014ce4 	.word	0x00014ce4
 8002600:	00014ca8 	.word	0x00014ca8
 8002604:	00014ce0 	.word	0x00014ce0
 8002608:	00014cac 	.word	0x00014cac
 800260c:	00014cdc 	.word	0x00014cdc
 8002610:	00014cb0 	.word	0x00014cb0
 8002614:	00014cd8 	.word	0x00014cd8
 8002618:	00014cec 	.word	0x00014cec
 800261c:	00014ce8 	.word	0x00014ce8
 8002620:	00014cb8 	.word	0x00014cb8
 8002624:	00014cc8 	.word	0x00014cc8
 8002628:	00014cc4 	.word	0x00014cc4
 800262c:	00014cc0 	.word	0x00014cc0
 8002630:	00014cd4 	.word	0x00014cd4
 8002634:	00014cd0 	.word	0x00014cd0
 8002638:	00014ccc 	.word	0x00014ccc
 800263c:	00014cbc 	.word	0x00014cbc
 8002640:	00014cb4 	.word	0x00014cb4

08002644 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	@ 0x30
 8002648:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800265a:	4b75      	ldr	r3, [pc, #468]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	4a74      	ldr	r2, [pc, #464]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6313      	str	r3, [r2, #48]	@ 0x30
 8002666:	4b72      	ldr	r3, [pc, #456]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002672:	4b6f      	ldr	r3, [pc, #444]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a6e      	ldr	r2, [pc, #440]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 8002678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b6c      	ldr	r3, [pc, #432]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800268a:	4b69      	ldr	r3, [pc, #420]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a68      	ldr	r2, [pc, #416]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b66      	ldr	r3, [pc, #408]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a2:	4b63      	ldr	r3, [pc, #396]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	4a62      	ldr	r2, [pc, #392]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ae:	4b60      	ldr	r3, [pc, #384]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	4a5c      	ldr	r2, [pc, #368]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 80026c0:	f043 0308 	orr.w	r3, r3, #8
 80026c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026d2:	4b57      	ldr	r3, [pc, #348]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	4a56      	ldr	r2, [pc, #344]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 80026d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026de:	4b54      	ldr	r3, [pc, #336]	@ (8002830 <MX_GPIO_Init+0x1ec>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e6:	607b      	str	r3, [r7, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2140      	movs	r1, #64	@ 0x40
 80026ee:	4851      	ldr	r0, [pc, #324]	@ (8002834 <MX_GPIO_Init+0x1f0>)
 80026f0:	f001 f812 	bl	8003718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80026f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002704:	f107 031c 	add.w	r3, r7, #28
 8002708:	4619      	mov	r1, r3
 800270a:	484b      	ldr	r0, [pc, #300]	@ (8002838 <MX_GPIO_Init+0x1f4>)
 800270c:	f000 fe58 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002710:	2332      	movs	r3, #50	@ 0x32
 8002712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271c:	2303      	movs	r3, #3
 800271e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002720:	230b      	movs	r3, #11
 8002722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	4619      	mov	r1, r3
 800272a:	4843      	ldr	r0, [pc, #268]	@ (8002838 <MX_GPIO_Init+0x1f4>)
 800272c:	f000 fe48 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002730:	2386      	movs	r3, #134	@ 0x86
 8002732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002740:	230b      	movs	r3, #11
 8002742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002744:	f107 031c 	add.w	r3, r7, #28
 8002748:	4619      	mov	r1, r3
 800274a:	483c      	ldr	r0, [pc, #240]	@ (800283c <MX_GPIO_Init+0x1f8>)
 800274c:	f000 fe38 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002762:	230b      	movs	r3, #11
 8002764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	4834      	ldr	r0, [pc, #208]	@ (8002840 <MX_GPIO_Init+0x1fc>)
 800276e:	f000 fe27 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002772:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002784:	2307      	movs	r3, #7
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	4619      	mov	r1, r3
 800278e:	482d      	ldr	r0, [pc, #180]	@ (8002844 <MX_GPIO_Init+0x200>)
 8002790:	f000 fe16 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002794:	2340      	movs	r3, #64	@ 0x40
 8002796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002798:	2301      	movs	r3, #1
 800279a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80027a4:	f107 031c 	add.w	r3, r7, #28
 80027a8:	4619      	mov	r1, r3
 80027aa:	4822      	ldr	r0, [pc, #136]	@ (8002834 <MX_GPIO_Init+0x1f0>)
 80027ac:	f000 fe08 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4619      	mov	r1, r3
 80027c2:	481c      	ldr	r0, [pc, #112]	@ (8002834 <MX_GPIO_Init+0x1f0>)
 80027c4:	f000 fdfc 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80027c8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d6:	2303      	movs	r3, #3
 80027d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80027da:	230a      	movs	r3, #10
 80027dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f107 031c 	add.w	r3, r7, #28
 80027e2:	4619      	mov	r1, r3
 80027e4:	4815      	ldr	r0, [pc, #84]	@ (800283c <MX_GPIO_Init+0x1f8>)
 80027e6:	f000 fdeb 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80027ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 031c 	add.w	r3, r7, #28
 80027fc:	4619      	mov	r1, r3
 80027fe:	480f      	ldr	r0, [pc, #60]	@ (800283c <MX_GPIO_Init+0x1f8>)
 8002800:	f000 fdde 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002804:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002812:	2303      	movs	r3, #3
 8002814:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002816:	230b      	movs	r3, #11
 8002818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800281a:	f107 031c 	add.w	r3, r7, #28
 800281e:	4619      	mov	r1, r3
 8002820:	4804      	ldr	r0, [pc, #16]	@ (8002834 <MX_GPIO_Init+0x1f0>)
 8002822:	f000 fdcd 	bl	80033c0 <HAL_GPIO_Init>

}
 8002826:	bf00      	nop
 8002828:	3730      	adds	r7, #48	@ 0x30
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40021800 	.word	0x40021800
 8002838:	40020800 	.word	0x40020800
 800283c:	40020000 	.word	0x40020000
 8002840:	40020400 	.word	0x40020400
 8002844:	40020c00 	.word	0x40020c00

08002848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	f5ad 5d51 	sub.w	sp, sp, #13376	@ 0x3440
 800284e:	b08a      	sub	sp, #40	@ 0x28
 8002850:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002852:	f000 fbb4 	bl	8002fbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002856:	f000 f971 	bl	8002b3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800285a:	f7ff fef3 	bl	8002644 <MX_GPIO_Init>
  MX_TIM2_Init();
 800285e:	f000 fa7f 	bl	8002d60 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002862:	f000 faed 	bl	8002e40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data_received = 1;
 8002866:	2301      	movs	r3, #1
 8002868:	f243 4252 	movw	r2, #13394	@ 0x3452
 800286c:	443a      	add	r2, r7
 800286e:	7013      	strb	r3, [r2, #0]

  uint32_t ETS_counter = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	f243 4264 	movw	r2, #13412	@ 0x3464
 8002876:	443a      	add	r2, r7
 8002878:	6013      	str	r3, [r2, #0]
  uint32_t NLLS_counter = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	f243 4260 	movw	r2, #13408	@ 0x3460
 8002880:	443a      	add	r2, r7
 8002882:	6013      	str	r3, [r2, #0]

  float mx[1112] = {0}, my[1112] = {0}, mz[1112] = {0};
 8002884:	f242 4368 	movw	r3, #9320	@ 0x2468
 8002888:	443b      	add	r3, r7
 800288a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800288e:	4618      	mov	r0, r3
 8002890:	f44f 538b 	mov.w	r3, #4448	@ 0x1160
 8002894:	461a      	mov	r2, r3
 8002896:	2100      	movs	r1, #0
 8002898:	f004 f8b8 	bl	8006a0c <memset>
 800289c:	f241 4368 	movw	r3, #5224	@ 0x1468
 80028a0:	443b      	add	r3, r7
 80028a2:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 80028a6:	4618      	mov	r0, r3
 80028a8:	f44f 538b 	mov.w	r3, #4448	@ 0x1160
 80028ac:	461a      	mov	r2, r3
 80028ae:	2100      	movs	r1, #0
 80028b0:	f004 f8ac 	bl	8006a0c <memset>
 80028b4:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80028b8:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
 80028bc:	4618      	mov	r0, r3
 80028be:	f44f 538b 	mov.w	r3, #4448	@ 0x1160
 80028c2:	461a      	mov	r2, r3
 80028c4:	2100      	movs	r1, #0
 80028c6:	f004 f8a1 	bl	8006a0c <memset>
  float p[9] = {0}, p0 = {0};
 80028ca:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80028ce:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80028d2:	4618      	mov	r0, r3
 80028d4:	2324      	movs	r3, #36	@ 0x24
 80028d6:	461a      	mov	r2, r3
 80028d8:	2100      	movs	r1, #0
 80028da:	f004 f897 	bl	8006a0c <memset>
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	f243 4254 	movw	r2, #13396	@ 0x3454
 80028e6:	443a      	add	r2, r7
 80028e8:	6013      	str	r3, [r2, #0]
  uint8_t passos_NLLS = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	f243 4253 	movw	r2, #13395	@ 0x3453
 80028f0:	443a      	add	r2, r7
 80028f2:	7013      	strb	r3, [r2, #0]
  uint8_t tempo_exe_ETS[4] = {0}, tempo_exe_NLLS[4] = {0};
 80028f4:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80028f8:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8002904:	f2a3 4364 	subw	r3, r3, #1124	@ 0x464
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive(&huart2, &run, 1, 100);
 800290c:	2364      	movs	r3, #100	@ 0x64
 800290e:	2201      	movs	r2, #1
 8002910:	4980      	ldr	r1, [pc, #512]	@ (8002b14 <main+0x2cc>)
 8002912:	4881      	ldr	r0, [pc, #516]	@ (8002b18 <main+0x2d0>)
 8002914:	f002 fd9f 	bl	8005456 <HAL_UART_Receive>
	if(run != 0)
 8002918:	4b7e      	ldr	r3, [pc, #504]	@ (8002b14 <main+0x2cc>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f5      	beq.n	800290c <main+0xc4>
	{
		for(uint16_t i = 0; i <= 1112; i+=4)
 8002920:	2300      	movs	r3, #0
 8002922:	f243 425e 	movw	r2, #13406	@ 0x345e
 8002926:	443a      	add	r2, r7
 8002928:	8013      	strh	r3, [r2, #0]
 800292a:	e01b      	b.n	8002964 <main+0x11c>
			{
				HAL_UART_Receive_IT(&huart2, conv.b, 1);
 800292c:	2201      	movs	r2, #1
 800292e:	497b      	ldr	r1, [pc, #492]	@ (8002b1c <main+0x2d4>)
 8002930:	4879      	ldr	r0, [pc, #484]	@ (8002b18 <main+0x2d0>)
 8002932:	f002 fe58 	bl	80055e6 <HAL_UART_Receive_IT>
				mx[i] = conv.f;
 8002936:	f243 435e 	movw	r3, #13406	@ 0x345e
 800293a:	443b      	add	r3, r7
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	4a77      	ldr	r2, [pc, #476]	@ (8002b1c <main+0x2d4>)
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	f242 4168 	movw	r1, #9320	@ 0x2468
 8002946:	4439      	add	r1, r7
 8002948:	f5a1 71bc 	sub.w	r1, r1, #376	@ 0x178
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i <= 1112; i+=4)
 8002952:	f243 435e 	movw	r3, #13406	@ 0x345e
 8002956:	443b      	add	r3, r7
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	3304      	adds	r3, #4
 800295c:	f243 425e 	movw	r2, #13406	@ 0x345e
 8002960:	443a      	add	r2, r7
 8002962:	8013      	strh	r3, [r2, #0]
 8002964:	f243 435e 	movw	r3, #13406	@ 0x345e
 8002968:	443b      	add	r3, r7
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8002970:	d9dc      	bls.n	800292c <main+0xe4>
			}
			HAL_UART_Transmit(&huart2, &data_received, 1, 10);
 8002972:	f243 4152 	movw	r1, #13394	@ 0x3452
 8002976:	4439      	add	r1, r7
 8002978:	230a      	movs	r3, #10
 800297a:	2201      	movs	r2, #1
 800297c:	4866      	ldr	r0, [pc, #408]	@ (8002b18 <main+0x2d0>)
 800297e:	f002 fce1 	bl	8005344 <HAL_UART_Transmit>

			for(uint16_t i = 0; i <= 1112; i+=4)
 8002982:	2300      	movs	r3, #0
 8002984:	f243 425c 	movw	r2, #13404	@ 0x345c
 8002988:	443a      	add	r2, r7
 800298a:	8013      	strh	r3, [r2, #0]
 800298c:	e01b      	b.n	80029c6 <main+0x17e>
			{
				HAL_UART_Receive_IT(&huart2, conv.b, 1);
 800298e:	2201      	movs	r2, #1
 8002990:	4962      	ldr	r1, [pc, #392]	@ (8002b1c <main+0x2d4>)
 8002992:	4861      	ldr	r0, [pc, #388]	@ (8002b18 <main+0x2d0>)
 8002994:	f002 fe27 	bl	80055e6 <HAL_UART_Receive_IT>
				my[i] = conv.f;
 8002998:	f243 435c 	movw	r3, #13404	@ 0x345c
 800299c:	443b      	add	r3, r7
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	4a5e      	ldr	r2, [pc, #376]	@ (8002b1c <main+0x2d4>)
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	f241 4168 	movw	r1, #5224	@ 0x1468
 80029a8:	4439      	add	r1, r7
 80029aa:	f5a1 7136 	sub.w	r1, r1, #728	@ 0x2d8
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	601a      	str	r2, [r3, #0]
			for(uint16_t i = 0; i <= 1112; i+=4)
 80029b4:	f243 435c 	movw	r3, #13404	@ 0x345c
 80029b8:	443b      	add	r3, r7
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	3304      	adds	r3, #4
 80029be:	f243 425c 	movw	r2, #13404	@ 0x345c
 80029c2:	443a      	add	r2, r7
 80029c4:	8013      	strh	r3, [r2, #0]
 80029c6:	f243 435c 	movw	r3, #13404	@ 0x345c
 80029ca:	443b      	add	r3, r7
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 80029d2:	d9dc      	bls.n	800298e <main+0x146>
			}
			HAL_UART_Transmit(&huart2, &data_received, 1, 10);
 80029d4:	f243 4152 	movw	r1, #13394	@ 0x3452
 80029d8:	4439      	add	r1, r7
 80029da:	230a      	movs	r3, #10
 80029dc:	2201      	movs	r2, #1
 80029de:	484e      	ldr	r0, [pc, #312]	@ (8002b18 <main+0x2d0>)
 80029e0:	f002 fcb0 	bl	8005344 <HAL_UART_Transmit>

			for(uint16_t i = 0; i <= 1112; i+=4)
 80029e4:	2300      	movs	r3, #0
 80029e6:	f243 425a 	movw	r2, #13402	@ 0x345a
 80029ea:	443a      	add	r2, r7
 80029ec:	8013      	strh	r3, [r2, #0]
 80029ee:	e01a      	b.n	8002a26 <main+0x1de>
			{
				HAL_UART_Receive_IT(&huart2, conv.b, 1);
 80029f0:	2201      	movs	r2, #1
 80029f2:	494a      	ldr	r1, [pc, #296]	@ (8002b1c <main+0x2d4>)
 80029f4:	4848      	ldr	r0, [pc, #288]	@ (8002b18 <main+0x2d0>)
 80029f6:	f002 fdf6 	bl	80055e6 <HAL_UART_Receive_IT>
				mz[i] = conv.f;
 80029fa:	f243 435a 	movw	r3, #13402	@ 0x345a
 80029fe:	443b      	add	r3, r7
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	4a46      	ldr	r2, [pc, #280]	@ (8002b1c <main+0x2d4>)
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8002a0a:	f5a1 6187 	sub.w	r1, r1, #1080	@ 0x438
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	601a      	str	r2, [r3, #0]
			for(uint16_t i = 0; i <= 1112; i+=4)
 8002a14:	f243 435a 	movw	r3, #13402	@ 0x345a
 8002a18:	443b      	add	r3, r7
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	f243 425a 	movw	r2, #13402	@ 0x345a
 8002a22:	443a      	add	r2, r7
 8002a24:	8013      	strh	r3, [r2, #0]
 8002a26:	f243 435a 	movw	r3, #13402	@ 0x345a
 8002a2a:	443b      	add	r3, r7
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	f5b3 6f8b 	cmp.w	r3, #1112	@ 0x458
 8002a32:	d9dd      	bls.n	80029f0 <main+0x1a8>
			}
			HAL_UART_Transmit(&huart2, &data_received, 1, 10);
 8002a34:	f243 4152 	movw	r1, #13394	@ 0x3452
 8002a38:	4439      	add	r1, r7
 8002a3a:	230a      	movs	r3, #10
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	4836      	ldr	r0, [pc, #216]	@ (8002b18 <main+0x2d0>)
 8002a40:	f002 fc80 	bl	8005344 <HAL_UART_Transmit>

			global_counter = 0;
 8002a44:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <main+0x2d8>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
			//HAL_TIM_Base_Start_IT(&htim2);

			ETS(mx, my, mz, p);
 8002a4a:	4b36      	ldr	r3, [pc, #216]	@ (8002b24 <main+0x2dc>)
 8002a4c:	f503 5351 	add.w	r3, r3, #13376	@ 0x3440
 8002a50:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8002a54:	443b      	add	r3, r7
 8002a56:	4a34      	ldr	r2, [pc, #208]	@ (8002b28 <main+0x2e0>)
 8002a58:	f502 5251 	add.w	r2, r2, #13376	@ 0x3440
 8002a5c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8002a60:	443a      	add	r2, r7
 8002a62:	4932      	ldr	r1, [pc, #200]	@ (8002b2c <main+0x2e4>)
 8002a64:	f501 5151 	add.w	r1, r1, #13376	@ 0x3440
 8002a68:	f101 0128 	add.w	r1, r1, #40	@ 0x28
 8002a6c:	4439      	add	r1, r7
 8002a6e:	4830      	ldr	r0, [pc, #192]	@ (8002b30 <main+0x2e8>)
 8002a70:	f500 5051 	add.w	r0, r0, #13376	@ 0x3440
 8002a74:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 8002a78:	4438      	add	r0, r7
 8002a7a:	f7fd fe55 	bl	8000728 <ETS>

			HAL_TIM_Base_Stop_IT(&htim2);
 8002a7e:	482d      	ldr	r0, [pc, #180]	@ (8002b34 <main+0x2ec>)
 8002a80:	f001 ffee 	bl	8004a60 <HAL_TIM_Base_Stop_IT>
			ETS_counter = timer_counter + ETS_counter;
 8002a84:	4b2c      	ldr	r3, [pc, #176]	@ (8002b38 <main+0x2f0>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f243 4264 	movw	r2, #13412	@ 0x3464
 8002a8c:	443a      	add	r2, r7
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	4413      	add	r3, r2
 8002a92:	f243 4264 	movw	r2, #13412	@ 0x3464
 8002a96:	443a      	add	r2, r7
 8002a98:	6013      	str	r3, [r2, #0]


			timer_counter = 0;
 8002a9a:	4b27      	ldr	r3, [pc, #156]	@ (8002b38 <main+0x2f0>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8002aa0:	4824      	ldr	r0, [pc, #144]	@ (8002b34 <main+0x2ec>)
 8002aa2:	f001 ff65 	bl	8004970 <HAL_TIM_Base_Start_IT>

			//passos_NLLS = NLLS(mx, my, mz, p0);

			HAL_TIM_Base_Stop_IT(&htim2);
 8002aa6:	4823      	ldr	r0, [pc, #140]	@ (8002b34 <main+0x2ec>)
 8002aa8:	f001 ffda 	bl	8004a60 <HAL_TIM_Base_Stop_IT>
			NLLS_counter = timer_counter + NLLS_counter;
 8002aac:	4b22      	ldr	r3, [pc, #136]	@ (8002b38 <main+0x2f0>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f243 4260 	movw	r2, #13408	@ 0x3460
 8002ab4:	443a      	add	r2, r7
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f243 4260 	movw	r2, #13408	@ 0x3460
 8002abe:	443a      	add	r2, r7
 8002ac0:	6013      	str	r3, [r2, #0]

			for(uint8_t i = 0; i <= 9; i++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f243 4259 	movw	r2, #13401	@ 0x3459
 8002ac8:	443a      	add	r2, r7
 8002aca:	7013      	strb	r3, [r2, #0]
 8002acc:	e01b      	b.n	8002b06 <main+0x2be>
			{
				conv.f = p[i];
 8002ace:	f243 4359 	movw	r3, #13401	@ 0x3459
 8002ad2:	443b      	add	r3, r7
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 8002ada:	f2a2 425c 	subw	r2, r2, #1116	@ 0x45c
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b1c <main+0x2d4>)
 8002ae6:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, conv.b, 4, 100);
 8002ae8:	2364      	movs	r3, #100	@ 0x64
 8002aea:	2204      	movs	r2, #4
 8002aec:	490b      	ldr	r1, [pc, #44]	@ (8002b1c <main+0x2d4>)
 8002aee:	480a      	ldr	r0, [pc, #40]	@ (8002b18 <main+0x2d0>)
 8002af0:	f002 fc28 	bl	8005344 <HAL_UART_Transmit>
			for(uint8_t i = 0; i <= 9; i++)
 8002af4:	f243 4359 	movw	r3, #13401	@ 0x3459
 8002af8:	443b      	add	r3, r7
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	f243 4259 	movw	r2, #13401	@ 0x3459
 8002b02:	443a      	add	r2, r7
 8002b04:	7013      	strb	r3, [r2, #0]
 8002b06:	f243 4359 	movw	r3, #13401	@ 0x3459
 8002b0a:	443b      	add	r3, r7
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b09      	cmp	r3, #9
 8002b10:	d9dd      	bls.n	8002ace <main+0x286>
	HAL_UART_Receive(&huart2, &run, 1, 100);
 8002b12:	e6fb      	b.n	800290c <main+0xc4>
 8002b14:	20000080 	.word	0x20000080
 8002b18:	200000d4 	.word	0x200000d4
 8002b1c:	20000084 	.word	0x20000084
 8002b20:	20000078 	.word	0x20000078
 8002b24:	ffffcba4 	.word	0xffffcba4
 8002b28:	ffffcbc8 	.word	0xffffcbc8
 8002b2c:	ffffdd28 	.word	0xffffdd28
 8002b30:	ffffee88 	.word	0xffffee88
 8002b34:	20000088 	.word	0x20000088
 8002b38:	2000007c 	.word	0x2000007c

08002b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b094      	sub	sp, #80	@ 0x50
 8002b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b42:	f107 0320 	add.w	r3, r7, #32
 8002b46:	2230      	movs	r2, #48	@ 0x30
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 ff5e 	bl	8006a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b60:	4b27      	ldr	r3, [pc, #156]	@ (8002c00 <SystemClock_Config+0xc4>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <SystemClock_Config+0xc4>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6c:	4b24      	ldr	r3, [pc, #144]	@ (8002c00 <SystemClock_Config+0xc4>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b78:	4b22      	ldr	r3, [pc, #136]	@ (8002c04 <SystemClock_Config+0xc8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002b80:	4a20      	ldr	r2, [pc, #128]	@ (8002c04 <SystemClock_Config+0xc8>)
 8002b82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <SystemClock_Config+0xc8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b94:	2301      	movs	r3, #1
 8002b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b98:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ba2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ba8:	2304      	movs	r3, #4
 8002baa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002bac:	2348      	movs	r3, #72	@ 0x48
 8002bae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bb8:	f107 0320 	add.w	r3, r7, #32
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fdc5 	bl	800374c <HAL_RCC_OscConfig>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002bc8:	f000 f84a 	bl	8002c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bcc:	230f      	movs	r3, #15
 8002bce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002be2:	f107 030c 	add.w	r3, r7, #12
 8002be6:	2102      	movs	r1, #2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 f853 	bl	8003c94 <HAL_RCC_ClockConfig>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002bf4:	f000 f834 	bl	8002c60 <Error_Handler>
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3750      	adds	r7, #80	@ 0x50
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40007000 	.word	0x40007000

08002c08 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0e      	ldr	r2, [pc, #56]	@ (8002c50 <HAL_UART_RxCpltCallback+0x48>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d10f      	bne.n	8002c3a <HAL_UART_RxCpltCallback+0x32>
        // Recomeça a recepção de 4 bytes
    	global_counter++;
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c54 <HAL_UART_RxCpltCallback+0x4c>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <HAL_UART_RxCpltCallback+0x4c>)
 8002c24:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &conv.b[global_counter], 1);
 8002c26:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <HAL_UART_RxCpltCallback+0x4c>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <HAL_UART_RxCpltCallback+0x50>)
 8002c2e:	4413      	add	r3, r2
 8002c30:	2201      	movs	r2, #1
 8002c32:	4619      	mov	r1, r3
 8002c34:	4809      	ldr	r0, [pc, #36]	@ (8002c5c <HAL_UART_RxCpltCallback+0x54>)
 8002c36:	f002 fcd6 	bl	80055e6 <HAL_UART_Receive_IT>
    }
    if(global_counter <= 4)
 8002c3a:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <HAL_UART_RxCpltCallback+0x4c>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d802      	bhi.n	8002c48 <HAL_UART_RxCpltCallback+0x40>
    {
    	global_counter = 0;
 8002c42:	4b04      	ldr	r3, [pc, #16]	@ (8002c54 <HAL_UART_RxCpltCallback+0x4c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
    }
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40004400 	.word	0x40004400
 8002c54:	20000078 	.word	0x20000078
 8002c58:	20000084 	.word	0x20000084
 8002c5c:	200000d4 	.word	0x200000d4

08002c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c64:	b672      	cpsid	i
}
 8002c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <Error_Handler+0x8>

08002c6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	4b0f      	ldr	r3, [pc, #60]	@ (8002cb0 <HAL_MspInit+0x44>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c76:	4a0e      	ldr	r2, [pc, #56]	@ (8002cb0 <HAL_MspInit+0x44>)
 8002c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <HAL_MspInit+0x44>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c86:	607b      	str	r3, [r7, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <HAL_MspInit+0x44>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	4a08      	ldr	r2, [pc, #32]	@ (8002cb0 <HAL_MspInit+0x44>)
 8002c90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c96:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <HAL_MspInit+0x44>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800

08002cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <NMI_Handler+0x4>

08002cbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <HardFault_Handler+0x4>

08002cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <MemManage_Handler+0x4>

08002ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <BusFault_Handler+0x4>

08002cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <UsageFault_Handler+0x4>

08002cdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d0a:	f000 f995 	bl	8003038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d18:	4802      	ldr	r0, [pc, #8]	@ (8002d24 <TIM2_IRQHandler+0x10>)
 8002d1a:	f001 fed0 	bl	8004abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000088 	.word	0x20000088

08002d28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d2c:	4802      	ldr	r0, [pc, #8]	@ (8002d38 <USART2_IRQHandler+0x10>)
 8002d2e:	f002 fc9f 	bl	8005670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200000d4 	.word	0x200000d4

08002d3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d40:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <SystemInit+0x20>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d46:	4a05      	ldr	r2, [pc, #20]	@ (8002d5c <SystemInit+0x20>)
 8002d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d66:	f107 0310 	add.w	r3, r7, #16
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002df4 <MX_TIM2_Init+0x94>)
 8002d80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108 - 1;
 8002d86:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <MX_TIM2_Init+0x94>)
 8002d88:	226b      	movs	r2, #107	@ 0x6b
 8002d8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d8c:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <MX_TIM2_Init+0x94>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8002d92:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <MX_TIM2_Init+0x94>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d98:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <MX_TIM2_Init+0x94>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <MX_TIM2_Init+0x94>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002da4:	4813      	ldr	r0, [pc, #76]	@ (8002df4 <MX_TIM2_Init+0x94>)
 8002da6:	f001 fd8b 	bl	80048c0 <HAL_TIM_Base_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002db0:	f7ff ff56 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002db4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002db8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dba:	f107 0310 	add.w	r3, r7, #16
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480c      	ldr	r0, [pc, #48]	@ (8002df4 <MX_TIM2_Init+0x94>)
 8002dc2:	f001 ff83 	bl	8004ccc <HAL_TIM_ConfigClockSource>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002dcc:	f7ff ff48 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002dd0:	2320      	movs	r3, #32
 8002dd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4805      	ldr	r0, [pc, #20]	@ (8002df4 <MX_TIM2_Init+0x94>)
 8002dde:	f002 f9b7 	bl	8005150 <HAL_TIMEx_MasterConfigSynchronization>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002de8:	f7ff ff3a 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dec:	bf00      	nop
 8002dee:	3720      	adds	r7, #32
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000088 	.word	0x20000088

08002df8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e08:	d113      	bne.n	8002e32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e3c <HAL_TIM_Base_MspInit+0x44>)
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e3c <HAL_TIM_Base_MspInit+0x44>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_TIM_Base_MspInit+0x44>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2100      	movs	r1, #0
 8002e26:	201c      	movs	r0, #28
 8002e28:	f000 fa01 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e2c:	201c      	movs	r0, #28
 8002e2e:	f000 fa1a 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800

08002e40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e44:	4b14      	ldr	r3, [pc, #80]	@ (8002e98 <MX_USART2_UART_Init+0x58>)
 8002e46:	4a15      	ldr	r2, [pc, #84]	@ (8002e9c <MX_USART2_UART_Init+0x5c>)
 8002e48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e4a:	4b13      	ldr	r3, [pc, #76]	@ (8002e98 <MX_USART2_UART_Init+0x58>)
 8002e4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e52:	4b11      	ldr	r3, [pc, #68]	@ (8002e98 <MX_USART2_UART_Init+0x58>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8002e58:	4b0f      	ldr	r3, [pc, #60]	@ (8002e98 <MX_USART2_UART_Init+0x58>)
 8002e5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e5e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e60:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <MX_USART2_UART_Init+0x58>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e66:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <MX_USART2_UART_Init+0x58>)
 8002e68:	220c      	movs	r2, #12
 8002e6a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002e98 <MX_USART2_UART_Init+0x58>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e72:	4b09      	ldr	r3, [pc, #36]	@ (8002e98 <MX_USART2_UART_Init+0x58>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e78:	4b07      	ldr	r3, [pc, #28]	@ (8002e98 <MX_USART2_UART_Init+0x58>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <MX_USART2_UART_Init+0x58>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e84:	4804      	ldr	r0, [pc, #16]	@ (8002e98 <MX_USART2_UART_Init+0x58>)
 8002e86:	f002 fa0f 	bl	80052a8 <HAL_UART_Init>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8002e90:	f7ff fee6 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	200000d4 	.word	0x200000d4
 8002e9c:	40004400 	.word	0x40004400

08002ea0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b0aa      	sub	sp, #168	@ 0xa8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	2284      	movs	r2, #132	@ 0x84
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f003 fda3 	bl	8006a0c <memset>
  if(uartHandle->Instance==USART2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a25      	ldr	r2, [pc, #148]	@ (8002f60 <HAL_UART_MspInit+0xc0>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d142      	bne.n	8002f56 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 f8ff 	bl	80040e0 <HAL_RCCEx_PeriphCLKConfig>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ee8:	f7ff feba 	bl	8002c60 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eec:	4b1d      	ldr	r3, [pc, #116]	@ (8002f64 <HAL_UART_MspInit+0xc4>)
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f64 <HAL_UART_MspInit+0xc4>)
 8002ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f64 <HAL_UART_MspInit+0xc4>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f04:	4b17      	ldr	r3, [pc, #92]	@ (8002f64 <HAL_UART_MspInit+0xc4>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	4a16      	ldr	r2, [pc, #88]	@ (8002f64 <HAL_UART_MspInit+0xc4>)
 8002f0a:	f043 0308 	orr.w	r3, r3, #8
 8002f0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f10:	4b14      	ldr	r3, [pc, #80]	@ (8002f64 <HAL_UART_MspInit+0xc4>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f1c:	2360      	movs	r3, #96	@ 0x60
 8002f1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f34:	2307      	movs	r3, #7
 8002f36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f3a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4809      	ldr	r0, [pc, #36]	@ (8002f68 <HAL_UART_MspInit+0xc8>)
 8002f42:	f000 fa3d 	bl	80033c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2026      	movs	r0, #38	@ 0x26
 8002f4c:	f000 f96f 	bl	800322e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f50:	2026      	movs	r0, #38	@ 0x26
 8002f52:	f000 f988 	bl	8003266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f56:	bf00      	nop
 8002f58:	37a8      	adds	r7, #168	@ 0xa8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40004400 	.word	0x40004400
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40020c00 	.word	0x40020c00

08002f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fa4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f70:	f7ff fee4 	bl	8002d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f74:	480c      	ldr	r0, [pc, #48]	@ (8002fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f76:	490d      	ldr	r1, [pc, #52]	@ (8002fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f78:	4a0d      	ldr	r2, [pc, #52]	@ (8002fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f7c:	e002      	b.n	8002f84 <LoopCopyDataInit>

08002f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f82:	3304      	adds	r3, #4

08002f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f88:	d3f9      	bcc.n	8002f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f90:	e001      	b.n	8002f96 <LoopFillZerobss>

08002f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f94:	3204      	adds	r2, #4

08002f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f98:	d3fb      	bcc.n	8002f92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f9a:	f003 fd45 	bl	8006a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f9e:	f7ff fc53 	bl	8002848 <main>
  bx  lr    
 8002fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fa4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002fb0:	08006cc8 	.word	0x08006cc8
  ldr r2, =_sbss
 8002fb4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002fb8:	20000298 	.word	0x20000298

08002fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fbc:	e7fe      	b.n	8002fbc <ADC_IRQHandler>

08002fbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc2:	2003      	movs	r0, #3
 8002fc4:	f000 f928 	bl	8003218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f000 f805 	bl	8002fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fce:	f7ff fe4d 	bl	8002c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fe0:	4b12      	ldr	r3, [pc, #72]	@ (800302c <HAL_InitTick+0x54>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b12      	ldr	r3, [pc, #72]	@ (8003030 <HAL_InitTick+0x58>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f943 	bl	8003282 <HAL_SYSTICK_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e00e      	b.n	8003024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b0f      	cmp	r3, #15
 800300a:	d80a      	bhi.n	8003022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800300c:	2200      	movs	r2, #0
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	f000 f90b 	bl	800322e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003018:	4a06      	ldr	r2, [pc, #24]	@ (8003034 <HAL_InitTick+0x5c>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000000 	.word	0x20000000
 8003030:	20000008 	.word	0x20000008
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800303c:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_IncTick+0x20>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	4b06      	ldr	r3, [pc, #24]	@ (800305c <HAL_IncTick+0x24>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4413      	add	r3, r2
 8003048:	4a04      	ldr	r2, [pc, #16]	@ (800305c <HAL_IncTick+0x24>)
 800304a:	6013      	str	r3, [r2, #0]
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000008 	.word	0x20000008
 800305c:	2000015c 	.word	0x2000015c

08003060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return uwTick;
 8003064:	4b03      	ldr	r3, [pc, #12]	@ (8003074 <HAL_GetTick+0x14>)
 8003066:	681b      	ldr	r3, [r3, #0]
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	2000015c 	.word	0x2000015c

08003078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <__NVIC_SetPriorityGrouping+0x40>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003094:	4013      	ands	r3, r2
 8003096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030a0:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <__NVIC_SetPriorityGrouping+0x44>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a6:	4a04      	ldr	r2, [pc, #16]	@ (80030b8 <__NVIC_SetPriorityGrouping+0x40>)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	60d3      	str	r3, [r2, #12]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	e000ed00 	.word	0xe000ed00
 80030bc:	05fa0000 	.word	0x05fa0000

080030c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c4:	4b04      	ldr	r3, [pc, #16]	@ (80030d8 <__NVIC_GetPriorityGrouping+0x18>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	0a1b      	lsrs	r3, r3, #8
 80030ca:	f003 0307 	and.w	r3, r3, #7
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	db0b      	blt.n	8003106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	4907      	ldr	r1, [pc, #28]	@ (8003114 <__NVIC_EnableIRQ+0x38>)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	2001      	movs	r0, #1
 80030fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000e100 	.word	0xe000e100

08003118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	6039      	str	r1, [r7, #0]
 8003122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003128:	2b00      	cmp	r3, #0
 800312a:	db0a      	blt.n	8003142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	b2da      	uxtb	r2, r3
 8003130:	490c      	ldr	r1, [pc, #48]	@ (8003164 <__NVIC_SetPriority+0x4c>)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	0112      	lsls	r2, r2, #4
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	440b      	add	r3, r1
 800313c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003140:	e00a      	b.n	8003158 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	4908      	ldr	r1, [pc, #32]	@ (8003168 <__NVIC_SetPriority+0x50>)
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	3b04      	subs	r3, #4
 8003150:	0112      	lsls	r2, r2, #4
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	440b      	add	r3, r1
 8003156:	761a      	strb	r2, [r3, #24]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	e000e100 	.word	0xe000e100
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	@ 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f1c3 0307 	rsb	r3, r3, #7
 8003186:	2b04      	cmp	r3, #4
 8003188:	bf28      	it	cs
 800318a:	2304      	movcs	r3, #4
 800318c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3304      	adds	r3, #4
 8003192:	2b06      	cmp	r3, #6
 8003194:	d902      	bls.n	800319c <NVIC_EncodePriority+0x30>
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	3b03      	subs	r3, #3
 800319a:	e000      	b.n	800319e <NVIC_EncodePriority+0x32>
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	401a      	ands	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031b4:	f04f 31ff 	mov.w	r1, #4294967295
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	43d9      	mvns	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c4:	4313      	orrs	r3, r2
         );
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3724      	adds	r7, #36	@ 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031e4:	d301      	bcc.n	80031ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031e6:	2301      	movs	r3, #1
 80031e8:	e00f      	b.n	800320a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003214 <SysTick_Config+0x40>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031f2:	210f      	movs	r1, #15
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	f7ff ff8e 	bl	8003118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031fc:	4b05      	ldr	r3, [pc, #20]	@ (8003214 <SysTick_Config+0x40>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003202:	4b04      	ldr	r3, [pc, #16]	@ (8003214 <SysTick_Config+0x40>)
 8003204:	2207      	movs	r2, #7
 8003206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	e000e010 	.word	0xe000e010

08003218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7ff ff29 	bl	8003078 <__NVIC_SetPriorityGrouping>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800322e:	b580      	push	{r7, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af00      	add	r7, sp, #0
 8003234:	4603      	mov	r3, r0
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003240:	f7ff ff3e 	bl	80030c0 <__NVIC_GetPriorityGrouping>
 8003244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68b9      	ldr	r1, [r7, #8]
 800324a:	6978      	ldr	r0, [r7, #20]
 800324c:	f7ff ff8e 	bl	800316c <NVIC_EncodePriority>
 8003250:	4602      	mov	r2, r0
 8003252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ff5d 	bl	8003118 <__NVIC_SetPriority>
}
 800325e:	bf00      	nop
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b082      	sub	sp, #8
 800326a:	af00      	add	r7, sp, #0
 800326c:	4603      	mov	r3, r0
 800326e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff ff31 	bl	80030dc <__NVIC_EnableIRQ>
}
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ffa2 	bl	80031d4 <SysTick_Config>
 8003290:	4603      	mov	r3, r0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032a8:	f7ff feda 	bl	8003060 <HAL_GetTick>
 80032ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d008      	beq.n	80032cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2280      	movs	r2, #128	@ 0x80
 80032be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e052      	b.n	8003372 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0216 	bic.w	r2, r2, #22
 80032da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d103      	bne.n	80032fc <HAL_DMA_Abort+0x62>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0208 	bic.w	r2, r2, #8
 800330a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800331c:	e013      	b.n	8003346 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800331e:	f7ff fe9f 	bl	8003060 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b05      	cmp	r3, #5
 800332a:	d90c      	bls.n	8003346 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2203      	movs	r2, #3
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e015      	b.n	8003372 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e4      	bne.n	800331e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003358:	223f      	movs	r2, #63	@ 0x3f
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d004      	beq.n	8003398 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2280      	movs	r2, #128	@ 0x80
 8003392:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e00c      	b.n	80033b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2205      	movs	r2, #5
 800339c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	@ 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	e175      	b.n	80036cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033e0:	2201      	movs	r2, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	f040 8164 	bne.w	80036c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d005      	beq.n	8003416 <HAL_GPIO_Init+0x56>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d130      	bne.n	8003478 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	2203      	movs	r2, #3
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800344c:	2201      	movs	r2, #1
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 0201 	and.w	r2, r3, #1
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b03      	cmp	r3, #3
 8003482:	d017      	beq.n	80034b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	2203      	movs	r2, #3
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d123      	bne.n	8003508 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	08da      	lsrs	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3208      	adds	r2, #8
 80034c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	220f      	movs	r2, #15
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	08da      	lsrs	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3208      	adds	r2, #8
 8003502:	69b9      	ldr	r1, [r7, #24]
 8003504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	2203      	movs	r2, #3
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0203 	and.w	r2, r3, #3
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80be 	beq.w	80036c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354a:	4b66      	ldr	r3, [pc, #408]	@ (80036e4 <HAL_GPIO_Init+0x324>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	4a65      	ldr	r2, [pc, #404]	@ (80036e4 <HAL_GPIO_Init+0x324>)
 8003550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003554:	6453      	str	r3, [r2, #68]	@ 0x44
 8003556:	4b63      	ldr	r3, [pc, #396]	@ (80036e4 <HAL_GPIO_Init+0x324>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003562:	4a61      	ldr	r2, [pc, #388]	@ (80036e8 <HAL_GPIO_Init+0x328>)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	3302      	adds	r3, #2
 800356a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	220f      	movs	r2, #15
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a58      	ldr	r2, [pc, #352]	@ (80036ec <HAL_GPIO_Init+0x32c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d037      	beq.n	80035fe <HAL_GPIO_Init+0x23e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a57      	ldr	r2, [pc, #348]	@ (80036f0 <HAL_GPIO_Init+0x330>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d031      	beq.n	80035fa <HAL_GPIO_Init+0x23a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a56      	ldr	r2, [pc, #344]	@ (80036f4 <HAL_GPIO_Init+0x334>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d02b      	beq.n	80035f6 <HAL_GPIO_Init+0x236>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a55      	ldr	r2, [pc, #340]	@ (80036f8 <HAL_GPIO_Init+0x338>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d025      	beq.n	80035f2 <HAL_GPIO_Init+0x232>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a54      	ldr	r2, [pc, #336]	@ (80036fc <HAL_GPIO_Init+0x33c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d01f      	beq.n	80035ee <HAL_GPIO_Init+0x22e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a53      	ldr	r2, [pc, #332]	@ (8003700 <HAL_GPIO_Init+0x340>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d019      	beq.n	80035ea <HAL_GPIO_Init+0x22a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a52      	ldr	r2, [pc, #328]	@ (8003704 <HAL_GPIO_Init+0x344>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_GPIO_Init+0x226>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a51      	ldr	r2, [pc, #324]	@ (8003708 <HAL_GPIO_Init+0x348>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00d      	beq.n	80035e2 <HAL_GPIO_Init+0x222>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a50      	ldr	r2, [pc, #320]	@ (800370c <HAL_GPIO_Init+0x34c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <HAL_GPIO_Init+0x21e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a4f      	ldr	r2, [pc, #316]	@ (8003710 <HAL_GPIO_Init+0x350>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_GPIO_Init+0x21a>
 80035d6:	2309      	movs	r3, #9
 80035d8:	e012      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035da:	230a      	movs	r3, #10
 80035dc:	e010      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035de:	2308      	movs	r3, #8
 80035e0:	e00e      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035e2:	2307      	movs	r3, #7
 80035e4:	e00c      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035e6:	2306      	movs	r3, #6
 80035e8:	e00a      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035ea:	2305      	movs	r3, #5
 80035ec:	e008      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035ee:	2304      	movs	r3, #4
 80035f0:	e006      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035f2:	2303      	movs	r3, #3
 80035f4:	e004      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e002      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <HAL_GPIO_Init+0x240>
 80035fe:	2300      	movs	r3, #0
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	f002 0203 	and.w	r2, r2, #3
 8003606:	0092      	lsls	r2, r2, #2
 8003608:	4093      	lsls	r3, r2
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003610:	4935      	ldr	r1, [pc, #212]	@ (80036e8 <HAL_GPIO_Init+0x328>)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	089b      	lsrs	r3, r3, #2
 8003616:	3302      	adds	r3, #2
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361e:	4b3d      	ldr	r3, [pc, #244]	@ (8003714 <HAL_GPIO_Init+0x354>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003642:	4a34      	ldr	r2, [pc, #208]	@ (8003714 <HAL_GPIO_Init+0x354>)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003648:	4b32      	ldr	r3, [pc, #200]	@ (8003714 <HAL_GPIO_Init+0x354>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800366c:	4a29      	ldr	r2, [pc, #164]	@ (8003714 <HAL_GPIO_Init+0x354>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003672:	4b28      	ldr	r3, [pc, #160]	@ (8003714 <HAL_GPIO_Init+0x354>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003696:	4a1f      	ldr	r2, [pc, #124]	@ (8003714 <HAL_GPIO_Init+0x354>)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800369c:	4b1d      	ldr	r3, [pc, #116]	@ (8003714 <HAL_GPIO_Init+0x354>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036c0:	4a14      	ldr	r2, [pc, #80]	@ (8003714 <HAL_GPIO_Init+0x354>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3301      	adds	r3, #1
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	2b0f      	cmp	r3, #15
 80036d0:	f67f ae86 	bls.w	80033e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
 80036d8:	3724      	adds	r7, #36	@ 0x24
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40013800 	.word	0x40013800
 80036ec:	40020000 	.word	0x40020000
 80036f0:	40020400 	.word	0x40020400
 80036f4:	40020800 	.word	0x40020800
 80036f8:	40020c00 	.word	0x40020c00
 80036fc:	40021000 	.word	0x40021000
 8003700:	40021400 	.word	0x40021400
 8003704:	40021800 	.word	0x40021800
 8003708:	40021c00 	.word	0x40021c00
 800370c:	40022000 	.word	0x40022000
 8003710:	40022400 	.word	0x40022400
 8003714:	40013c00 	.word	0x40013c00

08003718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	807b      	strh	r3, [r7, #2]
 8003724:	4613      	mov	r3, r2
 8003726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003728:	787b      	ldrb	r3, [r7, #1]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003734:	e003      	b.n	800373e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	041a      	lsls	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	619a      	str	r2, [r3, #24]
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003754:	2300      	movs	r3, #0
 8003756:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e291      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 8087 	beq.w	800387e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003770:	4b96      	ldr	r3, [pc, #600]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b04      	cmp	r3, #4
 800377a:	d00c      	beq.n	8003796 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800377c:	4b93      	ldr	r3, [pc, #588]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b08      	cmp	r3, #8
 8003786:	d112      	bne.n	80037ae <HAL_RCC_OscConfig+0x62>
 8003788:	4b90      	ldr	r3, [pc, #576]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003790:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003794:	d10b      	bne.n	80037ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003796:	4b8d      	ldr	r3, [pc, #564]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d06c      	beq.n	800387c <HAL_RCC_OscConfig+0x130>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d168      	bne.n	800387c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e26b      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x7a>
 80037b8:	4b84      	ldr	r3, [pc, #528]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a83      	ldr	r2, [pc, #524]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80037be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	e02e      	b.n	8003824 <HAL_RCC_OscConfig+0xd8>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x9c>
 80037ce:	4b7f      	ldr	r3, [pc, #508]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7e      	ldr	r2, [pc, #504]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b7c      	ldr	r3, [pc, #496]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a7b      	ldr	r2, [pc, #492]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80037e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	e01d      	b.n	8003824 <HAL_RCC_OscConfig+0xd8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037f0:	d10c      	bne.n	800380c <HAL_RCC_OscConfig+0xc0>
 80037f2:	4b76      	ldr	r3, [pc, #472]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a75      	ldr	r2, [pc, #468]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80037f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037fc:	6013      	str	r3, [r2, #0]
 80037fe:	4b73      	ldr	r3, [pc, #460]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a72      	ldr	r2, [pc, #456]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e00b      	b.n	8003824 <HAL_RCC_OscConfig+0xd8>
 800380c:	4b6f      	ldr	r3, [pc, #444]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a6e      	ldr	r2, [pc, #440]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4b6c      	ldr	r3, [pc, #432]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a6b      	ldr	r2, [pc, #428]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 800381e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d013      	beq.n	8003854 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7ff fc18 	bl	8003060 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7ff fc14 	bl	8003060 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	@ 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e21f      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b61      	ldr	r3, [pc, #388]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0xe8>
 8003852:	e014      	b.n	800387e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7ff fc04 	bl	8003060 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800385c:	f7ff fc00 	bl	8003060 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	@ 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e20b      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	4b57      	ldr	r3, [pc, #348]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x110>
 800387a:	e000      	b.n	800387e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d069      	beq.n	800395e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800388a:	4b50      	ldr	r3, [pc, #320]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003896:	4b4d      	ldr	r3, [pc, #308]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d11c      	bne.n	80038dc <HAL_RCC_OscConfig+0x190>
 80038a2:	4b4a      	ldr	r3, [pc, #296]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d116      	bne.n	80038dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ae:	4b47      	ldr	r3, [pc, #284]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_RCC_OscConfig+0x17a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d001      	beq.n	80038c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e1df      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c6:	4b41      	ldr	r3, [pc, #260]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	493d      	ldr	r1, [pc, #244]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038da:	e040      	b.n	800395e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d023      	beq.n	800392c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038e4:	4b39      	ldr	r3, [pc, #228]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a38      	ldr	r2, [pc, #224]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7ff fbb6 	bl	8003060 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f8:	f7ff fbb2 	bl	8003060 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e1bd      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390a:	4b30      	ldr	r3, [pc, #192]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003916:	4b2d      	ldr	r3, [pc, #180]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4929      	ldr	r1, [pc, #164]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
 800392a:	e018      	b.n	800395e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392c:	4b27      	ldr	r3, [pc, #156]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a26      	ldr	r2, [pc, #152]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003932:	f023 0301 	bic.w	r3, r3, #1
 8003936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7ff fb92 	bl	8003060 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003940:	f7ff fb8e 	bl	8003060 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e199      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	4b1e      	ldr	r3, [pc, #120]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d038      	beq.n	80039dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d019      	beq.n	80039a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003972:	4b16      	ldr	r3, [pc, #88]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003976:	4a15      	ldr	r2, [pc, #84]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397e:	f7ff fb6f 	bl	8003060 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003986:	f7ff fb6b 	bl	8003060 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e176      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003998:	4b0c      	ldr	r3, [pc, #48]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 800399a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x23a>
 80039a4:	e01a      	b.n	80039dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a6:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80039a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039aa:	4a08      	ldr	r2, [pc, #32]	@ (80039cc <HAL_RCC_OscConfig+0x280>)
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b2:	f7ff fb55 	bl	8003060 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ba:	f7ff fb51 	bl	8003060 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d903      	bls.n	80039d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e15c      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
 80039cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d0:	4b91      	ldr	r3, [pc, #580]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 80039d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1ee      	bne.n	80039ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80a4 	beq.w	8003b32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f6:	4b88      	ldr	r3, [pc, #544]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	4a87      	ldr	r2, [pc, #540]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a02:	4b85      	ldr	r3, [pc, #532]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a12:	4b82      	ldr	r3, [pc, #520]	@ (8003c1c <HAL_RCC_OscConfig+0x4d0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d118      	bne.n	8003a50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c1c <HAL_RCC_OscConfig+0x4d0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a7e      	ldr	r2, [pc, #504]	@ (8003c1c <HAL_RCC_OscConfig+0x4d0>)
 8003a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2a:	f7ff fb19 	bl	8003060 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a32:	f7ff fb15 	bl	8003060 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b64      	cmp	r3, #100	@ 0x64
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e120      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a44:	4b75      	ldr	r3, [pc, #468]	@ (8003c1c <HAL_RCC_OscConfig+0x4d0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d106      	bne.n	8003a66 <HAL_RCC_OscConfig+0x31a>
 8003a58:	4b6f      	ldr	r3, [pc, #444]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5c:	4a6e      	ldr	r2, [pc, #440]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a64:	e02d      	b.n	8003ac2 <HAL_RCC_OscConfig+0x376>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x33c>
 8003a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a72:	4a69      	ldr	r2, [pc, #420]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7a:	4b67      	ldr	r3, [pc, #412]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	4a66      	ldr	r2, [pc, #408]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003a80:	f023 0304 	bic.w	r3, r3, #4
 8003a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a86:	e01c      	b.n	8003ac2 <HAL_RCC_OscConfig+0x376>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b05      	cmp	r3, #5
 8003a8e:	d10c      	bne.n	8003aaa <HAL_RCC_OscConfig+0x35e>
 8003a90:	4b61      	ldr	r3, [pc, #388]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a94:	4a60      	ldr	r2, [pc, #384]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003a96:	f043 0304 	orr.w	r3, r3, #4
 8003a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a9c:	4b5e      	ldr	r3, [pc, #376]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aa8:	e00b      	b.n	8003ac2 <HAL_RCC_OscConfig+0x376>
 8003aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aae:	4a5a      	ldr	r2, [pc, #360]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ab6:	4b58      	ldr	r3, [pc, #352]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	4a57      	ldr	r2, [pc, #348]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d015      	beq.n	8003af6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7ff fac9 	bl	8003060 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7ff fac5 	bl	8003060 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e0ce      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ee      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x386>
 8003af4:	e014      	b.n	8003b20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7ff fab3 	bl	8003060 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7ff faaf 	bl	8003060 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e0b8      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b14:	4b40      	ldr	r3, [pc, #256]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ee      	bne.n	8003afe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d105      	bne.n	8003b32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b26:	4b3c      	ldr	r3, [pc, #240]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003b2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80a4 	beq.w	8003c84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b3c:	4b36      	ldr	r3, [pc, #216]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 030c 	and.w	r3, r3, #12
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d06b      	beq.n	8003c20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d149      	bne.n	8003be4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b50:	4b31      	ldr	r3, [pc, #196]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a30      	ldr	r2, [pc, #192]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003b56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7ff fa80 	bl	8003060 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b64:	f7ff fa7c 	bl	8003060 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e087      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	4b28      	ldr	r3, [pc, #160]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69da      	ldr	r2, [r3, #28]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	019b      	lsls	r3, r3, #6
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba4:	061b      	lsls	r3, r3, #24
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003baa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003bae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb0:	4b19      	ldr	r3, [pc, #100]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a18      	ldr	r2, [pc, #96]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7ff fa50 	bl	8003060 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc4:	f7ff fa4c 	bl	8003060 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e057      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	4b10      	ldr	r3, [pc, #64]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0f0      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x478>
 8003be2:	e04f      	b.n	8003c84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0b      	ldr	r2, [pc, #44]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003bea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7ff fa36 	bl	8003060 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7ff fa32 	bl	8003060 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e03d      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	4b03      	ldr	r3, [pc, #12]	@ (8003c18 <HAL_RCC_OscConfig+0x4cc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4ac>
 8003c16:	e035      	b.n	8003c84 <HAL_RCC_OscConfig+0x538>
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c20:	4b1b      	ldr	r3, [pc, #108]	@ (8003c90 <HAL_RCC_OscConfig+0x544>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d028      	beq.n	8003c80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d121      	bne.n	8003c80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d11a      	bne.n	8003c80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c50:	4013      	ands	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d111      	bne.n	8003c80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d107      	bne.n	8003c80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40023800 	.word	0x40023800

08003c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0d0      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b6a      	ldr	r3, [pc, #424]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d910      	bls.n	8003cdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b67      	ldr	r3, [pc, #412]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 020f 	bic.w	r2, r3, #15
 8003cc2:	4965      	ldr	r1, [pc, #404]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b63      	ldr	r3, [pc, #396]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b8      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf4:	4b59      	ldr	r3, [pc, #356]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a58      	ldr	r2, [pc, #352]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003cfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d0c:	4b53      	ldr	r3, [pc, #332]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a52      	ldr	r2, [pc, #328]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b50      	ldr	r3, [pc, #320]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	494d      	ldr	r1, [pc, #308]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d040      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3e:	4b47      	ldr	r3, [pc, #284]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d115      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	4b41      	ldr	r3, [pc, #260]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e073      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	4b3d      	ldr	r3, [pc, #244]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e06b      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b39      	ldr	r3, [pc, #228]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4936      	ldr	r1, [pc, #216]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d88:	f7ff f96a 	bl	8003060 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7ff f966 	bl	8003060 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e053      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b2d      	ldr	r3, [pc, #180]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003db8:	4b27      	ldr	r3, [pc, #156]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d210      	bcs.n	8003de8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b24      	ldr	r3, [pc, #144]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 020f 	bic.w	r2, r3, #15
 8003dce:	4922      	ldr	r1, [pc, #136]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b20      	ldr	r3, [pc, #128]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 030f 	and.w	r3, r3, #15
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e032      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df4:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4916      	ldr	r1, [pc, #88]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e12:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	490e      	ldr	r1, [pc, #56]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e26:	f000 f821 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCC_ClockConfig+0x1c8>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	490a      	ldr	r1, [pc, #40]	@ (8003e60 <HAL_RCC_ClockConfig+0x1cc>)
 8003e38:	5ccb      	ldrb	r3, [r1, r3]
 8003e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3e:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <HAL_RCC_ClockConfig+0x1d0>)
 8003e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_RCC_ClockConfig+0x1d4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff f8c6 	bl	8002fd8 <HAL_InitTick>

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023c00 	.word	0x40023c00
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	08006c80 	.word	0x08006c80
 8003e64:	20000000 	.word	0x20000000
 8003e68:	20000004 	.word	0x20000004

08003e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e70:	b094      	sub	sp, #80	@ 0x50
 8003e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e78:	2300      	movs	r3, #0
 8003e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e84:	4b79      	ldr	r3, [pc, #484]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d00d      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x40>
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	f200 80e1 	bhi.w	8004058 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e9e:	e0db      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea0:	4b73      	ldr	r3, [pc, #460]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ea4:	e0db      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ea6:	4b73      	ldr	r3, [pc, #460]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eaa:	e0d8      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eac:	4b6f      	ldr	r3, [pc, #444]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d063      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	2200      	movs	r2, #0
 8003eca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ecc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ede:	4622      	mov	r2, r4
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f04f 0100 	mov.w	r1, #0
 8003eea:	0159      	lsls	r1, r3, #5
 8003eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef0:	0150      	lsls	r0, r2, #5
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	1a51      	subs	r1, r2, r1
 8003efa:	6139      	str	r1, [r7, #16]
 8003efc:	4629      	mov	r1, r5
 8003efe:	eb63 0301 	sbc.w	r3, r3, r1
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f10:	4659      	mov	r1, fp
 8003f12:	018b      	lsls	r3, r1, #6
 8003f14:	4651      	mov	r1, sl
 8003f16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f1a:	4651      	mov	r1, sl
 8003f1c:	018a      	lsls	r2, r1, #6
 8003f1e:	4651      	mov	r1, sl
 8003f20:	ebb2 0801 	subs.w	r8, r2, r1
 8003f24:	4659      	mov	r1, fp
 8003f26:	eb63 0901 	sbc.w	r9, r3, r1
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f3e:	4690      	mov	r8, r2
 8003f40:	4699      	mov	r9, r3
 8003f42:	4623      	mov	r3, r4
 8003f44:	eb18 0303 	adds.w	r3, r8, r3
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	eb49 0303 	adc.w	r3, r9, r3
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f5e:	4629      	mov	r1, r5
 8003f60:	024b      	lsls	r3, r1, #9
 8003f62:	4621      	mov	r1, r4
 8003f64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f68:	4621      	mov	r1, r4
 8003f6a:	024a      	lsls	r2, r1, #9
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f72:	2200      	movs	r2, #0
 8003f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f7c:	f7fc f944 	bl	8000208 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4613      	mov	r3, r2
 8003f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f88:	e058      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8a:	4b38      	ldr	r3, [pc, #224]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	099b      	lsrs	r3, r3, #6
 8003f90:	2200      	movs	r2, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	4611      	mov	r1, r2
 8003f96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f9a:	623b      	str	r3, [r7, #32]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fa4:	4642      	mov	r2, r8
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	f04f 0000 	mov.w	r0, #0
 8003fac:	f04f 0100 	mov.w	r1, #0
 8003fb0:	0159      	lsls	r1, r3, #5
 8003fb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb6:	0150      	lsls	r0, r2, #5
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fdc:	ebb2 040a 	subs.w	r4, r2, sl
 8003fe0:	eb63 050b 	sbc.w	r5, r3, fp
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	00eb      	lsls	r3, r5, #3
 8003fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ff2:	00e2      	lsls	r2, r4, #3
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	4643      	mov	r3, r8
 8003ffa:	18e3      	adds	r3, r4, r3
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	464b      	mov	r3, r9
 8004000:	eb45 0303 	adc.w	r3, r5, r3
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004012:	4629      	mov	r1, r5
 8004014:	028b      	lsls	r3, r1, #10
 8004016:	4621      	mov	r1, r4
 8004018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800401c:	4621      	mov	r1, r4
 800401e:	028a      	lsls	r2, r1, #10
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004026:	2200      	movs	r2, #0
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	61fa      	str	r2, [r7, #28]
 800402c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004030:	f7fc f8ea 	bl	8000208 <__aeabi_uldivmod>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4613      	mov	r3, r2
 800403a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	0c1b      	lsrs	r3, r3, #16
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	3301      	adds	r3, #1
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800404c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800404e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004056:	e002      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004058:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x204>)
 800405a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800405c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004060:	4618      	mov	r0, r3
 8004062:	3750      	adds	r7, #80	@ 0x50
 8004064:	46bd      	mov	sp, r7
 8004066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800
 8004070:	00f42400 	.word	0x00f42400
 8004074:	007a1200 	.word	0x007a1200

08004078 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800407c:	4b03      	ldr	r3, [pc, #12]	@ (800408c <HAL_RCC_GetHCLKFreq+0x14>)
 800407e:	681b      	ldr	r3, [r3, #0]
}
 8004080:	4618      	mov	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000000 	.word	0x20000000

08004090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004094:	f7ff fff0 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0a9b      	lsrs	r3, r3, #10
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4903      	ldr	r1, [pc, #12]	@ (80040b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40023800 	.word	0x40023800
 80040b4:	08006c90 	.word	0x08006c90

080040b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040bc:	f7ff ffdc 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	0b5b      	lsrs	r3, r3, #13
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4903      	ldr	r1, [pc, #12]	@ (80040dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40023800 	.word	0x40023800
 80040dc:	08006c90 	.word	0x08006c90

080040e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d012      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004108:	4b69      	ldr	r3, [pc, #420]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a68      	ldr	r2, [pc, #416]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004112:	6093      	str	r3, [r2, #8]
 8004114:	4b66      	ldr	r3, [pc, #408]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411c:	4964      	ldr	r1, [pc, #400]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411e:	4313      	orrs	r3, r2
 8004120:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d017      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800413a:	4b5d      	ldr	r3, [pc, #372]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800413c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004140:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004148:	4959      	ldr	r1, [pc, #356]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004154:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004158:	d101      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800415a:	2301      	movs	r3, #1
 800415c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004166:	2301      	movs	r3, #1
 8004168:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d017      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004176:	4b4e      	ldr	r3, [pc, #312]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004178:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800417c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	494a      	ldr	r1, [pc, #296]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004194:	d101      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80041a2:	2301      	movs	r3, #1
 80041a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80041b2:	2301      	movs	r3, #1
 80041b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 808b 	beq.w	80042da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041c4:	4b3a      	ldr	r3, [pc, #232]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	4a39      	ldr	r2, [pc, #228]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80041d0:	4b37      	ldr	r3, [pc, #220]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041dc:	4b35      	ldr	r3, [pc, #212]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a34      	ldr	r2, [pc, #208]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e8:	f7fe ff3a 	bl	8003060 <HAL_GetTick>
 80041ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f0:	f7fe ff36 	bl	8003060 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	@ 0x64
 80041fc:	d901      	bls.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e357      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004202:	4b2c      	ldr	r3, [pc, #176]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800420e:	4b28      	ldr	r3, [pc, #160]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004212:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004216:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d035      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	429a      	cmp	r2, r3
 800422a:	d02e      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800422c:	4b20      	ldr	r3, [pc, #128]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004234:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004236:	4b1e      	ldr	r3, [pc, #120]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800423a:	4a1d      	ldr	r2, [pc, #116]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004240:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004242:	4b1b      	ldr	r3, [pc, #108]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004246:	4a1a      	ldr	r2, [pc, #104]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004248:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800424c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800424e:	4a18      	ldr	r2, [pc, #96]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004254:	4b16      	ldr	r3, [pc, #88]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b01      	cmp	r3, #1
 800425e:	d114      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fe fefe 	bl	8003060 <HAL_GetTick>
 8004264:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004266:	e00a      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fe fefa 	bl	8003060 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e319      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0ee      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004292:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004296:	d111      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004298:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80042a4:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80042a6:	400b      	ands	r3, r1
 80042a8:	4901      	ldr	r1, [pc, #4]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
 80042ae:	e00b      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80042b0:	40023800 	.word	0x40023800
 80042b4:	40007000 	.word	0x40007000
 80042b8:	0ffffcff 	.word	0x0ffffcff
 80042bc:	4baa      	ldr	r3, [pc, #680]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	4aa9      	ldr	r2, [pc, #676]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80042c6:	6093      	str	r3, [r2, #8]
 80042c8:	4ba7      	ldr	r3, [pc, #668]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d4:	49a4      	ldr	r1, [pc, #656]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d010      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042e6:	4ba0      	ldr	r3, [pc, #640]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042ec:	4a9e      	ldr	r2, [pc, #632]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80042f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004300:	4999      	ldr	r1, [pc, #612]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004314:	4b94      	ldr	r3, [pc, #592]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800431a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004322:	4991      	ldr	r1, [pc, #580]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004336:	4b8c      	ldr	r3, [pc, #560]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004338:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004344:	4988      	ldr	r1, [pc, #544]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004358:	4b83      	ldr	r3, [pc, #524]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800435e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004366:	4980      	ldr	r1, [pc, #512]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800437a:	4b7b      	ldr	r3, [pc, #492]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004380:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004388:	4977      	ldr	r1, [pc, #476]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800439c:	4b72      	ldr	r3, [pc, #456]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a2:	f023 0203 	bic.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043aa:	496f      	ldr	r1, [pc, #444]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043be:	4b6a      	ldr	r3, [pc, #424]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c4:	f023 020c 	bic.w	r2, r3, #12
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043cc:	4966      	ldr	r1, [pc, #408]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043e0:	4b61      	ldr	r3, [pc, #388]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ee:	495e      	ldr	r1, [pc, #376]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004402:	4b59      	ldr	r3, [pc, #356]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004408:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004410:	4955      	ldr	r1, [pc, #340]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004412:	4313      	orrs	r3, r2
 8004414:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004424:	4b50      	ldr	r3, [pc, #320]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004432:	494d      	ldr	r1, [pc, #308]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004446:	4b48      	ldr	r3, [pc, #288]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800444c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004454:	4944      	ldr	r1, [pc, #272]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004468:	4b3f      	ldr	r3, [pc, #252]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004476:	493c      	ldr	r1, [pc, #240]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800448a:	4b37      	ldr	r3, [pc, #220]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800448c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004490:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004498:	4933      	ldr	r1, [pc, #204]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044ba:	492b      	ldr	r1, [pc, #172]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d011      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044ce:	4b26      	ldr	r3, [pc, #152]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044dc:	4922      	ldr	r1, [pc, #136]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ec:	d101      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044ee:	2301      	movs	r3, #1
 80044f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044fe:	2301      	movs	r3, #1
 8004500:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800450e:	4b16      	ldr	r3, [pc, #88]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004514:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800451c:	4912      	ldr	r1, [pc, #72]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004530:	4b0d      	ldr	r3, [pc, #52]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004536:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004540:	4909      	ldr	r1, [pc, #36]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d006      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80d9 	beq.w	800470e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800455c:	4b02      	ldr	r3, [pc, #8]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a01      	ldr	r2, [pc, #4]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004562:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004566:	e001      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004568:	40023800 	.word	0x40023800
 800456c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456e:	f7fe fd77 	bl	8003060 <HAL_GetTick>
 8004572:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004576:	f7fe fd73 	bl	8003060 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b64      	cmp	r3, #100	@ 0x64
 8004582:	d901      	bls.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e194      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004588:	4b6c      	ldr	r3, [pc, #432]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f0      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d021      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d11d      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045a8:	4b64      	ldr	r3, [pc, #400]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ae:	0c1b      	lsrs	r3, r3, #16
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045b6:	4b61      	ldr	r3, [pc, #388]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045bc:	0e1b      	lsrs	r3, r3, #24
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	019a      	lsls	r2, r3, #6
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	431a      	orrs	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	061b      	lsls	r3, r3, #24
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	071b      	lsls	r3, r3, #28
 80045dc:	4957      	ldr	r1, [pc, #348]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004602:	2b00      	cmp	r3, #0
 8004604:	d02e      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800460e:	d129      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004610:	4b4a      	ldr	r3, [pc, #296]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004616:	0c1b      	lsrs	r3, r3, #16
 8004618:	f003 0303 	and.w	r3, r3, #3
 800461c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800461e:	4b47      	ldr	r3, [pc, #284]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004620:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004624:	0f1b      	lsrs	r3, r3, #28
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	019a      	lsls	r2, r3, #6
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	041b      	lsls	r3, r3, #16
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	061b      	lsls	r3, r3, #24
 800463e:	431a      	orrs	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	071b      	lsls	r3, r3, #28
 8004644:	493d      	ldr	r1, [pc, #244]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800464c:	4b3b      	ldr	r3, [pc, #236]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800464e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004652:	f023 021f 	bic.w	r2, r3, #31
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	3b01      	subs	r3, #1
 800465c:	4937      	ldr	r1, [pc, #220]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01d      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004670:	4b32      	ldr	r3, [pc, #200]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004676:	0e1b      	lsrs	r3, r3, #24
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800467e:	4b2f      	ldr	r3, [pc, #188]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004684:	0f1b      	lsrs	r3, r3, #28
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	019a      	lsls	r2, r3, #6
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	431a      	orrs	r2, r3
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	061b      	lsls	r3, r3, #24
 800469e:	431a      	orrs	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	071b      	lsls	r3, r3, #28
 80046a4:	4925      	ldr	r1, [pc, #148]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d011      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	019a      	lsls	r2, r3, #6
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	041b      	lsls	r3, r3, #16
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	061b      	lsls	r3, r3, #24
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	071b      	lsls	r3, r3, #28
 80046d4:	4919      	ldr	r1, [pc, #100]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046dc:	4b17      	ldr	r3, [pc, #92]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a16      	ldr	r2, [pc, #88]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e8:	f7fe fcba 	bl	8003060 <HAL_GetTick>
 80046ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046f0:	f7fe fcb6 	bl	8003060 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b64      	cmp	r3, #100	@ 0x64
 80046fc:	d901      	bls.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e0d7      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004702:	4b0e      	ldr	r3, [pc, #56]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b01      	cmp	r3, #1
 8004712:	f040 80cd 	bne.w	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004716:	4b09      	ldr	r3, [pc, #36]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a08      	ldr	r2, [pc, #32]	@ (800473c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800471c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004722:	f7fe fc9d 	bl	8003060 <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004728:	e00a      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800472a:	f7fe fc99 	bl	8003060 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b64      	cmp	r3, #100	@ 0x64
 8004736:	d903      	bls.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e0ba      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800473c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004740:	4b5e      	ldr	r3, [pc, #376]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800474c:	d0ed      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800476a:	2b00      	cmp	r3, #0
 800476c:	d02e      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d12a      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004776:	4b51      	ldr	r3, [pc, #324]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004784:	4b4d      	ldr	r3, [pc, #308]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478a:	0f1b      	lsrs	r3, r3, #28
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	019a      	lsls	r2, r3, #6
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	061b      	lsls	r3, r3, #24
 80047a4:	431a      	orrs	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	071b      	lsls	r3, r3, #28
 80047aa:	4944      	ldr	r1, [pc, #272]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047b2:	4b42      	ldr	r3, [pc, #264]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c0:	3b01      	subs	r3, #1
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	493d      	ldr	r1, [pc, #244]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d022      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047e0:	d11d      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047e2:	4b36      	ldr	r3, [pc, #216]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e8:	0e1b      	lsrs	r3, r3, #24
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047f0:	4b32      	ldr	r3, [pc, #200]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f6:	0f1b      	lsrs	r3, r3, #28
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	019a      	lsls	r2, r3, #6
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	431a      	orrs	r2, r3
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	061b      	lsls	r3, r3, #24
 8004810:	431a      	orrs	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	071b      	lsls	r3, r3, #28
 8004816:	4929      	ldr	r1, [pc, #164]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d028      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800482a:	4b24      	ldr	r3, [pc, #144]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004830:	0e1b      	lsrs	r3, r3, #24
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004838:	4b20      	ldr	r3, [pc, #128]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483e:	0c1b      	lsrs	r3, r3, #16
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	019a      	lsls	r2, r3, #6
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	431a      	orrs	r2, r3
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	061b      	lsls	r3, r3, #24
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	071b      	lsls	r3, r3, #28
 800485e:	4917      	ldr	r1, [pc, #92]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004866:	4b15      	ldr	r3, [pc, #84]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800486c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004874:	4911      	ldr	r1, [pc, #68]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800487c:	4b0f      	ldr	r3, [pc, #60]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a0e      	ldr	r2, [pc, #56]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004886:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004888:	f7fe fbea 	bl	8003060 <HAL_GetTick>
 800488c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004890:	f7fe fbe6 	bl	8003060 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	@ 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e007      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80048a2:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048ae:	d1ef      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800

080048c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e049      	b.n	8004966 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fe fa86 	bl	8002df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f000 fae0 	bl	8004ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b01      	cmp	r3, #1
 8004982:	d001      	beq.n	8004988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e054      	b.n	8004a32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a26      	ldr	r2, [pc, #152]	@ (8004a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d022      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049b2:	d01d      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a22      	ldr	r2, [pc, #136]	@ (8004a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a21      	ldr	r2, [pc, #132]	@ (8004a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1f      	ldr	r2, [pc, #124]	@ (8004a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004a50 <HAL_TIM_Base_Start_IT+0xe0>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004a54 <HAL_TIM_Base_Start_IT+0xe4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIM_Base_Start_IT+0x80>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004a58 <HAL_TIM_Base_Start_IT+0xe8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d115      	bne.n	8004a1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	4b19      	ldr	r3, [pc, #100]	@ (8004a5c <HAL_TIM_Base_Start_IT+0xec>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d015      	beq.n	8004a2e <HAL_TIM_Base_Start_IT+0xbe>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a08:	d011      	beq.n	8004a2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1a:	e008      	b.n	8004a2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e000      	b.n	8004a30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40010000 	.word	0x40010000
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800
 8004a4c:	40000c00 	.word	0x40000c00
 8004a50:	40010400 	.word	0x40010400
 8004a54:	40014000 	.word	0x40014000
 8004a58:	40001800 	.word	0x40001800
 8004a5c:	00010007 	.word	0x00010007

08004a60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6a1a      	ldr	r2, [r3, #32]
 8004a7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10f      	bne.n	8004aa8 <HAL_TIM_Base_Stop_IT+0x48>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6a1a      	ldr	r2, [r3, #32]
 8004a8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d107      	bne.n	8004aa8 <HAL_TIM_Base_Stop_IT+0x48>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d020      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01b      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f06f 0202 	mvn.w	r2, #2
 8004af2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f9bd 	bl	8004e88 <HAL_TIM_IC_CaptureCallback>
 8004b0e:	e005      	b.n	8004b1c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f9af 	bl	8004e74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f9c0 	bl	8004e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d020      	beq.n	8004b6e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d01b      	beq.n	8004b6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f06f 0204 	mvn.w	r2, #4
 8004b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f997 	bl	8004e88 <HAL_TIM_IC_CaptureCallback>
 8004b5a:	e005      	b.n	8004b68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f989 	bl	8004e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f99a 	bl	8004e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d020      	beq.n	8004bba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01b      	beq.n	8004bba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f06f 0208 	mvn.w	r2, #8
 8004b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2204      	movs	r2, #4
 8004b90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f003 0303 	and.w	r3, r3, #3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f971 	bl	8004e88 <HAL_TIM_IC_CaptureCallback>
 8004ba6:	e005      	b.n	8004bb4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f963 	bl	8004e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f974 	bl	8004e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d020      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01b      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f06f 0210 	mvn.w	r2, #16
 8004bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2208      	movs	r2, #8
 8004bdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f94b 	bl	8004e88 <HAL_TIM_IC_CaptureCallback>
 8004bf2:	e005      	b.n	8004c00 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f93d 	bl	8004e74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f94e 	bl	8004e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00c      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f06f 0201 	mvn.w	r2, #1
 8004c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f91b 	bl	8004e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00c      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fb14 	bl	8005280 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00c      	beq.n	8004c7c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d007      	beq.n	8004c7c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fb0c 	bl	8005294 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00c      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f908 	bl	8004eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00c      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0220 	mvn.w	r2, #32
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fad4 	bl	800526c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	e0b4      	b.n	8004e52 <HAL_TIM_ConfigClockSource+0x186>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	4b56      	ldr	r3, [pc, #344]	@ (8004e5c <HAL_TIM_ConfigClockSource+0x190>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d20:	d03e      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0xd4>
 8004d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d26:	f200 8087 	bhi.w	8004e38 <HAL_TIM_ConfigClockSource+0x16c>
 8004d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d2e:	f000 8086 	beq.w	8004e3e <HAL_TIM_ConfigClockSource+0x172>
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d36:	d87f      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b70      	cmp	r3, #112	@ 0x70
 8004d3a:	d01a      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0xa6>
 8004d3c:	2b70      	cmp	r3, #112	@ 0x70
 8004d3e:	d87b      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x16c>
 8004d40:	2b60      	cmp	r3, #96	@ 0x60
 8004d42:	d050      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x11a>
 8004d44:	2b60      	cmp	r3, #96	@ 0x60
 8004d46:	d877      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x16c>
 8004d48:	2b50      	cmp	r3, #80	@ 0x50
 8004d4a:	d03c      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0xfa>
 8004d4c:	2b50      	cmp	r3, #80	@ 0x50
 8004d4e:	d873      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x16c>
 8004d50:	2b40      	cmp	r3, #64	@ 0x40
 8004d52:	d058      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x13a>
 8004d54:	2b40      	cmp	r3, #64	@ 0x40
 8004d56:	d86f      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x16c>
 8004d58:	2b30      	cmp	r3, #48	@ 0x30
 8004d5a:	d064      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0x15a>
 8004d5c:	2b30      	cmp	r3, #48	@ 0x30
 8004d5e:	d86b      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x16c>
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d060      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0x15a>
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d867      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x16c>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d05c      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0x15a>
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d05a      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0x15a>
 8004d70:	e062      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d82:	f000 f9c5 	bl	8005110 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	609a      	str	r2, [r3, #8]
      break;
 8004d9e:	e04f      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004db0:	f000 f9ae 	bl	8005110 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dc2:	609a      	str	r2, [r3, #8]
      break;
 8004dc4:	e03c      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f000 f922 	bl	800501c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2150      	movs	r1, #80	@ 0x50
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f97b 	bl	80050da <TIM_ITRx_SetConfig>
      break;
 8004de4:	e02c      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004df2:	461a      	mov	r2, r3
 8004df4:	f000 f941 	bl	800507a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2160      	movs	r1, #96	@ 0x60
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f96b 	bl	80050da <TIM_ITRx_SetConfig>
      break;
 8004e04:	e01c      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e12:	461a      	mov	r2, r3
 8004e14:	f000 f902 	bl	800501c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2140      	movs	r1, #64	@ 0x40
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f95b 	bl	80050da <TIM_ITRx_SetConfig>
      break;
 8004e24:	e00c      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f000 f952 	bl	80050da <TIM_ITRx_SetConfig>
      break;
 8004e36:	e003      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3c:	e000      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	fffeff88 	.word	0xfffeff88

08004e60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a46      	ldr	r2, [pc, #280]	@ (8004ff0 <TIM_Base_SetConfig+0x12c>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d013      	beq.n	8004f04 <TIM_Base_SetConfig+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee2:	d00f      	beq.n	8004f04 <TIM_Base_SetConfig+0x40>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a43      	ldr	r2, [pc, #268]	@ (8004ff4 <TIM_Base_SetConfig+0x130>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00b      	beq.n	8004f04 <TIM_Base_SetConfig+0x40>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a42      	ldr	r2, [pc, #264]	@ (8004ff8 <TIM_Base_SetConfig+0x134>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d007      	beq.n	8004f04 <TIM_Base_SetConfig+0x40>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a41      	ldr	r2, [pc, #260]	@ (8004ffc <TIM_Base_SetConfig+0x138>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_Base_SetConfig+0x40>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a40      	ldr	r2, [pc, #256]	@ (8005000 <TIM_Base_SetConfig+0x13c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d108      	bne.n	8004f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a35      	ldr	r2, [pc, #212]	@ (8004ff0 <TIM_Base_SetConfig+0x12c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d02b      	beq.n	8004f76 <TIM_Base_SetConfig+0xb2>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f24:	d027      	beq.n	8004f76 <TIM_Base_SetConfig+0xb2>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a32      	ldr	r2, [pc, #200]	@ (8004ff4 <TIM_Base_SetConfig+0x130>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d023      	beq.n	8004f76 <TIM_Base_SetConfig+0xb2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a31      	ldr	r2, [pc, #196]	@ (8004ff8 <TIM_Base_SetConfig+0x134>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d01f      	beq.n	8004f76 <TIM_Base_SetConfig+0xb2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a30      	ldr	r2, [pc, #192]	@ (8004ffc <TIM_Base_SetConfig+0x138>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d01b      	beq.n	8004f76 <TIM_Base_SetConfig+0xb2>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a2f      	ldr	r2, [pc, #188]	@ (8005000 <TIM_Base_SetConfig+0x13c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d017      	beq.n	8004f76 <TIM_Base_SetConfig+0xb2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a2e      	ldr	r2, [pc, #184]	@ (8005004 <TIM_Base_SetConfig+0x140>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <TIM_Base_SetConfig+0xb2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a2d      	ldr	r2, [pc, #180]	@ (8005008 <TIM_Base_SetConfig+0x144>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00f      	beq.n	8004f76 <TIM_Base_SetConfig+0xb2>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a2c      	ldr	r2, [pc, #176]	@ (800500c <TIM_Base_SetConfig+0x148>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00b      	beq.n	8004f76 <TIM_Base_SetConfig+0xb2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a2b      	ldr	r2, [pc, #172]	@ (8005010 <TIM_Base_SetConfig+0x14c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d007      	beq.n	8004f76 <TIM_Base_SetConfig+0xb2>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a2a      	ldr	r2, [pc, #168]	@ (8005014 <TIM_Base_SetConfig+0x150>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_Base_SetConfig+0xb2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a29      	ldr	r2, [pc, #164]	@ (8005018 <TIM_Base_SetConfig+0x154>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d108      	bne.n	8004f88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a10      	ldr	r2, [pc, #64]	@ (8004ff0 <TIM_Base_SetConfig+0x12c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_Base_SetConfig+0xf8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a12      	ldr	r2, [pc, #72]	@ (8005000 <TIM_Base_SetConfig+0x13c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d103      	bne.n	8004fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d105      	bne.n	8004fe2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f023 0201 	bic.w	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	611a      	str	r2, [r3, #16]
  }
}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40000800 	.word	0x40000800
 8004ffc:	40000c00 	.word	0x40000c00
 8005000:	40010400 	.word	0x40010400
 8005004:	40014000 	.word	0x40014000
 8005008:	40014400 	.word	0x40014400
 800500c:	40014800 	.word	0x40014800
 8005010:	40001800 	.word	0x40001800
 8005014:	40001c00 	.word	0x40001c00
 8005018:	40002000 	.word	0x40002000

0800501c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f023 0201 	bic.w	r2, r3, #1
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f023 030a 	bic.w	r3, r3, #10
 8005058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4313      	orrs	r3, r2
 8005060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800507a:	b480      	push	{r7}
 800507c:	b087      	sub	sp, #28
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	f023 0210 	bic.w	r2, r3, #16
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	031b      	lsls	r3, r3, #12
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	621a      	str	r2, [r3, #32]
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050da:	b480      	push	{r7}
 80050dc:	b085      	sub	sp, #20
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f043 0307 	orr.w	r3, r3, #7
 80050fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	609a      	str	r2, [r3, #8]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800512a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	021a      	lsls	r2, r3, #8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	431a      	orrs	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4313      	orrs	r3, r2
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	609a      	str	r2, [r3, #8]
}
 8005144:	bf00      	nop
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005164:	2302      	movs	r3, #2
 8005166:	e06d      	b.n	8005244 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a30      	ldr	r2, [pc, #192]	@ (8005250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a2f      	ldr	r2, [pc, #188]	@ (8005254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d108      	bne.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80051a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a20      	ldr	r2, [pc, #128]	@ (8005250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d022      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051da:	d01d      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005258 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d018      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1c      	ldr	r2, [pc, #112]	@ (800525c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005260 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00e      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a15      	ldr	r2, [pc, #84]	@ (8005254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d009      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a16      	ldr	r2, [pc, #88]	@ (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a15      	ldr	r2, [pc, #84]	@ (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d10c      	bne.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800521e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	4313      	orrs	r3, r2
 8005228:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40010000 	.word	0x40010000
 8005254:	40010400 	.word	0x40010400
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40014000 	.word	0x40014000
 8005268:	40001800 	.word	0x40001800

0800526c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e040      	b.n	800533c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fd fde8 	bl	8002ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2224      	movs	r2, #36	@ 0x24
 80052d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 ff14 	bl	800611c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fcad 	bl	8005c54 <UART_SetConfig>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e01b      	b.n	800533c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 ff93 	bl	8006260 <UART_CheckIdleState>
 800533a:	4603      	mov	r3, r0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	@ 0x28
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005358:	2b20      	cmp	r3, #32
 800535a:	d177      	bne.n	800544c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_UART_Transmit+0x24>
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e070      	b.n	800544e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2221      	movs	r2, #33	@ 0x21
 8005378:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800537a:	f7fd fe71 	bl	8003060 <HAL_GetTick>
 800537e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	88fa      	ldrh	r2, [r7, #6]
 8005384:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	88fa      	ldrh	r2, [r7, #6]
 800538c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005398:	d108      	bne.n	80053ac <HAL_UART_Transmit+0x68>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d104      	bne.n	80053ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	e003      	b.n	80053b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053b4:	e02f      	b.n	8005416 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2200      	movs	r2, #0
 80053be:	2180      	movs	r1, #128	@ 0x80
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 ffa4 	bl	800630e <UART_WaitOnFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2220      	movs	r2, #32
 80053d0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e03b      	b.n	800544e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	461a      	mov	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	3302      	adds	r3, #2
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e007      	b.n	8005404 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	781a      	ldrb	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	3301      	adds	r3, #1
 8005402:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1c9      	bne.n	80053b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2200      	movs	r2, #0
 800542a:	2140      	movs	r1, #64	@ 0x40
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 ff6e 	bl	800630e <UART_WaitOnFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d004      	beq.n	8005442 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e005      	b.n	800544e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	e000      	b.n	800544e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800544c:	2302      	movs	r3, #2
  }
}
 800544e:	4618      	mov	r0, r3
 8005450:	3720      	adds	r7, #32
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b08a      	sub	sp, #40	@ 0x28
 800545a:	af02      	add	r7, sp, #8
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800546c:	2b20      	cmp	r3, #32
 800546e:	f040 80b5 	bne.w	80055dc <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_UART_Receive+0x28>
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e0ad      	b.n	80055de <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2222      	movs	r2, #34	@ 0x22
 800548e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005498:	f7fd fde2 	bl	8003060 <HAL_GetTick>
 800549c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	88fa      	ldrh	r2, [r7, #6]
 80054a2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b6:	d10e      	bne.n	80054d6 <HAL_UART_Receive+0x80>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d105      	bne.n	80054cc <HAL_UART_Receive+0x76>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80054c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054ca:	e02d      	b.n	8005528 <HAL_UART_Receive+0xd2>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	22ff      	movs	r2, #255	@ 0xff
 80054d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054d4:	e028      	b.n	8005528 <HAL_UART_Receive+0xd2>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10d      	bne.n	80054fa <HAL_UART_Receive+0xa4>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <HAL_UART_Receive+0x9a>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	22ff      	movs	r2, #255	@ 0xff
 80054ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054ee:	e01b      	b.n	8005528 <HAL_UART_Receive+0xd2>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	227f      	movs	r2, #127	@ 0x7f
 80054f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80054f8:	e016      	b.n	8005528 <HAL_UART_Receive+0xd2>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005502:	d10d      	bne.n	8005520 <HAL_UART_Receive+0xca>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d104      	bne.n	8005516 <HAL_UART_Receive+0xc0>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	227f      	movs	r2, #127	@ 0x7f
 8005510:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005514:	e008      	b.n	8005528 <HAL_UART_Receive+0xd2>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	223f      	movs	r2, #63	@ 0x3f
 800551a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800551e:	e003      	b.n	8005528 <HAL_UART_Receive+0xd2>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800552e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005538:	d108      	bne.n	800554c <HAL_UART_Receive+0xf6>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e003      	b.n	8005554 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005554:	e036      	b.n	80055c4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2200      	movs	r2, #0
 800555e:	2120      	movs	r1, #32
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 fed4 	bl	800630e <UART_WaitOnFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e032      	b.n	80055de <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10c      	bne.n	8005598 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005584:	b29a      	uxth	r2, r3
 8005586:	8a7b      	ldrh	r3, [r7, #18]
 8005588:	4013      	ands	r3, r2
 800558a:	b29a      	uxth	r2, r3
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	3302      	adds	r3, #2
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	e00c      	b.n	80055b2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	8a7b      	ldrh	r3, [r7, #18]
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	4013      	ands	r3, r2
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	3301      	adds	r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1c2      	bne.n	8005556 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	e000      	b.n	80055de <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
  }
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b08a      	sub	sp, #40	@ 0x28
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	4613      	mov	r3, r2
 80055f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d132      	bne.n	8005664 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <HAL_UART_Receive_IT+0x24>
 8005604:	88fb      	ldrh	r3, [r7, #6]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e02b      	b.n	8005666 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d018      	beq.n	8005654 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	613b      	str	r3, [r7, #16]
   return(result);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005636:	627b      	str	r3, [r7, #36]	@ 0x24
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	623b      	str	r3, [r7, #32]
 8005642:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	69f9      	ldr	r1, [r7, #28]
 8005646:	6a3a      	ldr	r2, [r7, #32]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	61bb      	str	r3, [r7, #24]
   return(result);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e6      	bne.n	8005622 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005654:	88fb      	ldrh	r3, [r7, #6]
 8005656:	461a      	mov	r2, r3
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 fec4 	bl	80063e8 <UART_Start_Receive_IT>
 8005660:	4603      	mov	r3, r0
 8005662:	e000      	b.n	8005666 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3728      	adds	r7, #40	@ 0x28
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b0ba      	sub	sp, #232	@ 0xe8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005696:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800569a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800569e:	4013      	ands	r3, r2
 80056a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80056a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d115      	bne.n	80056d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80056ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00f      	beq.n	80056d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056bc:	f003 0320 	and.w	r3, r3, #32
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d009      	beq.n	80056d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8297 	beq.w	8005bfc <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
      }
      return;
 80056d6:	e291      	b.n	8005bfc <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 8117 	beq.w	8005910 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80056e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d106      	bne.n	80056fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80056f2:	4b85      	ldr	r3, [pc, #532]	@ (8005908 <HAL_UART_IRQHandler+0x298>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 810a 	beq.w	8005910 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d011      	beq.n	800572c <HAL_UART_IRQHandler+0xbc>
 8005708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800570c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2201      	movs	r2, #1
 800571a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005722:	f043 0201 	orr.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800572c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d011      	beq.n	800575c <HAL_UART_IRQHandler+0xec>
 8005738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00b      	beq.n	800575c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2202      	movs	r2, #2
 800574a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005752:	f043 0204 	orr.w	r2, r3, #4
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800575c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d011      	beq.n	800578c <HAL_UART_IRQHandler+0x11c>
 8005768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00b      	beq.n	800578c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2204      	movs	r2, #4
 800577a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005782:	f043 0202 	orr.w	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800578c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	d017      	beq.n	80057c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d105      	bne.n	80057b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80057a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2208      	movs	r2, #8
 80057b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057be:	f043 0208 	orr.w	r2, r3, #8
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d012      	beq.n	80057fa <HAL_UART_IRQHandler+0x18a>
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00c      	beq.n	80057fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057f0:	f043 0220 	orr.w	r2, r3, #32
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 81fd 	beq.w	8005c00 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00d      	beq.n	800582e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005834:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005842:	2b40      	cmp	r3, #64	@ 0x40
 8005844:	d005      	beq.n	8005852 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800584a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800584e:	2b00      	cmp	r3, #0
 8005850:	d04f      	beq.n	80058f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fe8e 	bl	8006574 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005862:	2b40      	cmp	r3, #64	@ 0x40
 8005864:	d141      	bne.n	80058ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3308      	adds	r3, #8
 800586c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800587c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3308      	adds	r3, #8
 800588e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005892:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800589e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1d9      	bne.n	8005866 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d013      	beq.n	80058e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058be:	4a13      	ldr	r2, [pc, #76]	@ (800590c <HAL_UART_IRQHandler+0x29c>)
 80058c0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fd fd57 	bl	800337a <HAL_DMA_Abort_IT>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d017      	beq.n	8005902 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80058dc:	4610      	mov	r0, r2
 80058de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e0:	e00f      	b.n	8005902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f9a0 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e8:	e00b      	b.n	8005902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f99c 	bl	8005c28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	e007      	b.n	8005902 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f998 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005900:	e17e      	b.n	8005c00 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005902:	bf00      	nop
    return;
 8005904:	e17c      	b.n	8005c00 <HAL_UART_IRQHandler+0x590>
 8005906:	bf00      	nop
 8005908:	04000120 	.word	0x04000120
 800590c:	0800663d 	.word	0x0800663d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005914:	2b01      	cmp	r3, #1
 8005916:	f040 814c 	bne.w	8005bb2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8145 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 813e 	beq.w	8005bb2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2210      	movs	r2, #16
 800593c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005948:	2b40      	cmp	r3, #64	@ 0x40
 800594a:	f040 80b6 	bne.w	8005aba <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800595a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 8150 	beq.w	8005c04 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800596a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800596e:	429a      	cmp	r2, r3
 8005970:	f080 8148 	bcs.w	8005c04 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800597a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005988:	f000 8086 	beq.w	8005a98 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80059b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1da      	bne.n	800598c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3308      	adds	r3, #8
 80059dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3308      	adds	r3, #8
 80059f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e1      	bne.n	80059d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3308      	adds	r3, #8
 8005a18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3308      	adds	r3, #8
 8005a32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e3      	bne.n	8005a12 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a68:	f023 0310 	bic.w	r3, r3, #16
 8005a6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a7c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e4      	bne.n	8005a58 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fd fc01 	bl	800329a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f8c2 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ab8:	e0a4      	b.n	8005c04 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 8096 	beq.w	8005c08 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8091 	beq.w	8005c08 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005afa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e4      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3308      	adds	r3, #8
 8005b22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	f023 0301 	bic.w	r3, r3, #1
 8005b32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b40:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b48:	e841 2300 	strex	r3, r2, [r1]
 8005b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e3      	bne.n	8005b1c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f023 0310 	bic.w	r3, r3, #16
 8005b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	69b9      	ldr	r1, [r7, #24]
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	617b      	str	r3, [r7, #20]
   return(result);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e4      	bne.n	8005b68 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ba8:	4619      	mov	r1, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f846 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bb0:	e02a      	b.n	8005c08 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00e      	beq.n	8005bdc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d008      	beq.n	8005bdc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01c      	beq.n	8005c0c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
    }
    return;
 8005bda:	e017      	b.n	8005c0c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d012      	beq.n	8005c0e <HAL_UART_IRQHandler+0x59e>
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00c      	beq.n	8005c0e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fd37 	bl	8006668 <UART_EndTransmit_IT>
    return;
 8005bfa:	e008      	b.n	8005c0e <HAL_UART_IRQHandler+0x59e>
      return;
 8005bfc:	bf00      	nop
 8005bfe:	e006      	b.n	8005c0e <HAL_UART_IRQHandler+0x59e>
    return;
 8005c00:	bf00      	nop
 8005c02:	e004      	b.n	8005c0e <HAL_UART_IRQHandler+0x59e>
      return;
 8005c04:	bf00      	nop
 8005c06:	e002      	b.n	8005c0e <HAL_UART_IRQHandler+0x59e>
      return;
 8005c08:	bf00      	nop
 8005c0a:	e000      	b.n	8005c0e <HAL_UART_IRQHandler+0x59e>
    return;
 8005c0c:	bf00      	nop
  }

}
 8005c0e:	37e8      	adds	r7, #232	@ 0xe8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b088      	sub	sp, #32
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4ba6      	ldr	r3, [pc, #664]	@ (8005f18 <UART_SetConfig+0x2c4>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	6812      	ldr	r2, [r2, #0]
 8005c86:	6979      	ldr	r1, [r7, #20]
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a94      	ldr	r2, [pc, #592]	@ (8005f1c <UART_SetConfig+0x2c8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d120      	bne.n	8005d12 <UART_SetConfig+0xbe>
 8005cd0:	4b93      	ldr	r3, [pc, #588]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d816      	bhi.n	8005d0c <UART_SetConfig+0xb8>
 8005cde:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce4 <UART_SetConfig+0x90>)
 8005ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce4:	08005cf5 	.word	0x08005cf5
 8005ce8:	08005d01 	.word	0x08005d01
 8005cec:	08005cfb 	.word	0x08005cfb
 8005cf0:	08005d07 	.word	0x08005d07
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	77fb      	strb	r3, [r7, #31]
 8005cf8:	e150      	b.n	8005f9c <UART_SetConfig+0x348>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	77fb      	strb	r3, [r7, #31]
 8005cfe:	e14d      	b.n	8005f9c <UART_SetConfig+0x348>
 8005d00:	2304      	movs	r3, #4
 8005d02:	77fb      	strb	r3, [r7, #31]
 8005d04:	e14a      	b.n	8005f9c <UART_SetConfig+0x348>
 8005d06:	2308      	movs	r3, #8
 8005d08:	77fb      	strb	r3, [r7, #31]
 8005d0a:	e147      	b.n	8005f9c <UART_SetConfig+0x348>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	77fb      	strb	r3, [r7, #31]
 8005d10:	e144      	b.n	8005f9c <UART_SetConfig+0x348>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a83      	ldr	r2, [pc, #524]	@ (8005f24 <UART_SetConfig+0x2d0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d132      	bne.n	8005d82 <UART_SetConfig+0x12e>
 8005d1c:	4b80      	ldr	r3, [pc, #512]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d22:	f003 030c 	and.w	r3, r3, #12
 8005d26:	2b0c      	cmp	r3, #12
 8005d28:	d828      	bhi.n	8005d7c <UART_SetConfig+0x128>
 8005d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d30 <UART_SetConfig+0xdc>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d65 	.word	0x08005d65
 8005d34:	08005d7d 	.word	0x08005d7d
 8005d38:	08005d7d 	.word	0x08005d7d
 8005d3c:	08005d7d 	.word	0x08005d7d
 8005d40:	08005d71 	.word	0x08005d71
 8005d44:	08005d7d 	.word	0x08005d7d
 8005d48:	08005d7d 	.word	0x08005d7d
 8005d4c:	08005d7d 	.word	0x08005d7d
 8005d50:	08005d6b 	.word	0x08005d6b
 8005d54:	08005d7d 	.word	0x08005d7d
 8005d58:	08005d7d 	.word	0x08005d7d
 8005d5c:	08005d7d 	.word	0x08005d7d
 8005d60:	08005d77 	.word	0x08005d77
 8005d64:	2300      	movs	r3, #0
 8005d66:	77fb      	strb	r3, [r7, #31]
 8005d68:	e118      	b.n	8005f9c <UART_SetConfig+0x348>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	77fb      	strb	r3, [r7, #31]
 8005d6e:	e115      	b.n	8005f9c <UART_SetConfig+0x348>
 8005d70:	2304      	movs	r3, #4
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e112      	b.n	8005f9c <UART_SetConfig+0x348>
 8005d76:	2308      	movs	r3, #8
 8005d78:	77fb      	strb	r3, [r7, #31]
 8005d7a:	e10f      	b.n	8005f9c <UART_SetConfig+0x348>
 8005d7c:	2310      	movs	r3, #16
 8005d7e:	77fb      	strb	r3, [r7, #31]
 8005d80:	e10c      	b.n	8005f9c <UART_SetConfig+0x348>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a68      	ldr	r2, [pc, #416]	@ (8005f28 <UART_SetConfig+0x2d4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d120      	bne.n	8005dce <UART_SetConfig+0x17a>
 8005d8c:	4b64      	ldr	r3, [pc, #400]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d92:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d96:	2b30      	cmp	r3, #48	@ 0x30
 8005d98:	d013      	beq.n	8005dc2 <UART_SetConfig+0x16e>
 8005d9a:	2b30      	cmp	r3, #48	@ 0x30
 8005d9c:	d814      	bhi.n	8005dc8 <UART_SetConfig+0x174>
 8005d9e:	2b20      	cmp	r3, #32
 8005da0:	d009      	beq.n	8005db6 <UART_SetConfig+0x162>
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d810      	bhi.n	8005dc8 <UART_SetConfig+0x174>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <UART_SetConfig+0x15c>
 8005daa:	2b10      	cmp	r3, #16
 8005dac:	d006      	beq.n	8005dbc <UART_SetConfig+0x168>
 8005dae:	e00b      	b.n	8005dc8 <UART_SetConfig+0x174>
 8005db0:	2300      	movs	r3, #0
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e0f2      	b.n	8005f9c <UART_SetConfig+0x348>
 8005db6:	2302      	movs	r3, #2
 8005db8:	77fb      	strb	r3, [r7, #31]
 8005dba:	e0ef      	b.n	8005f9c <UART_SetConfig+0x348>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e0ec      	b.n	8005f9c <UART_SetConfig+0x348>
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	77fb      	strb	r3, [r7, #31]
 8005dc6:	e0e9      	b.n	8005f9c <UART_SetConfig+0x348>
 8005dc8:	2310      	movs	r3, #16
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e0e6      	b.n	8005f9c <UART_SetConfig+0x348>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a56      	ldr	r2, [pc, #344]	@ (8005f2c <UART_SetConfig+0x2d8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d120      	bne.n	8005e1a <UART_SetConfig+0x1c6>
 8005dd8:	4b51      	ldr	r3, [pc, #324]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005de2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005de4:	d013      	beq.n	8005e0e <UART_SetConfig+0x1ba>
 8005de6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005de8:	d814      	bhi.n	8005e14 <UART_SetConfig+0x1c0>
 8005dea:	2b80      	cmp	r3, #128	@ 0x80
 8005dec:	d009      	beq.n	8005e02 <UART_SetConfig+0x1ae>
 8005dee:	2b80      	cmp	r3, #128	@ 0x80
 8005df0:	d810      	bhi.n	8005e14 <UART_SetConfig+0x1c0>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <UART_SetConfig+0x1a8>
 8005df6:	2b40      	cmp	r3, #64	@ 0x40
 8005df8:	d006      	beq.n	8005e08 <UART_SetConfig+0x1b4>
 8005dfa:	e00b      	b.n	8005e14 <UART_SetConfig+0x1c0>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e0cc      	b.n	8005f9c <UART_SetConfig+0x348>
 8005e02:	2302      	movs	r3, #2
 8005e04:	77fb      	strb	r3, [r7, #31]
 8005e06:	e0c9      	b.n	8005f9c <UART_SetConfig+0x348>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	77fb      	strb	r3, [r7, #31]
 8005e0c:	e0c6      	b.n	8005f9c <UART_SetConfig+0x348>
 8005e0e:	2308      	movs	r3, #8
 8005e10:	77fb      	strb	r3, [r7, #31]
 8005e12:	e0c3      	b.n	8005f9c <UART_SetConfig+0x348>
 8005e14:	2310      	movs	r3, #16
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e0c0      	b.n	8005f9c <UART_SetConfig+0x348>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a44      	ldr	r2, [pc, #272]	@ (8005f30 <UART_SetConfig+0x2dc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d125      	bne.n	8005e70 <UART_SetConfig+0x21c>
 8005e24:	4b3e      	ldr	r3, [pc, #248]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e32:	d017      	beq.n	8005e64 <UART_SetConfig+0x210>
 8005e34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e38:	d817      	bhi.n	8005e6a <UART_SetConfig+0x216>
 8005e3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e3e:	d00b      	beq.n	8005e58 <UART_SetConfig+0x204>
 8005e40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e44:	d811      	bhi.n	8005e6a <UART_SetConfig+0x216>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <UART_SetConfig+0x1fe>
 8005e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e4e:	d006      	beq.n	8005e5e <UART_SetConfig+0x20a>
 8005e50:	e00b      	b.n	8005e6a <UART_SetConfig+0x216>
 8005e52:	2300      	movs	r3, #0
 8005e54:	77fb      	strb	r3, [r7, #31]
 8005e56:	e0a1      	b.n	8005f9c <UART_SetConfig+0x348>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e09e      	b.n	8005f9c <UART_SetConfig+0x348>
 8005e5e:	2304      	movs	r3, #4
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e09b      	b.n	8005f9c <UART_SetConfig+0x348>
 8005e64:	2308      	movs	r3, #8
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e098      	b.n	8005f9c <UART_SetConfig+0x348>
 8005e6a:	2310      	movs	r3, #16
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e095      	b.n	8005f9c <UART_SetConfig+0x348>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a2f      	ldr	r2, [pc, #188]	@ (8005f34 <UART_SetConfig+0x2e0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d125      	bne.n	8005ec6 <UART_SetConfig+0x272>
 8005e7a:	4b29      	ldr	r3, [pc, #164]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e88:	d017      	beq.n	8005eba <UART_SetConfig+0x266>
 8005e8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e8e:	d817      	bhi.n	8005ec0 <UART_SetConfig+0x26c>
 8005e90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e94:	d00b      	beq.n	8005eae <UART_SetConfig+0x25a>
 8005e96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e9a:	d811      	bhi.n	8005ec0 <UART_SetConfig+0x26c>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <UART_SetConfig+0x254>
 8005ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ea4:	d006      	beq.n	8005eb4 <UART_SetConfig+0x260>
 8005ea6:	e00b      	b.n	8005ec0 <UART_SetConfig+0x26c>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e076      	b.n	8005f9c <UART_SetConfig+0x348>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	77fb      	strb	r3, [r7, #31]
 8005eb2:	e073      	b.n	8005f9c <UART_SetConfig+0x348>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	77fb      	strb	r3, [r7, #31]
 8005eb8:	e070      	b.n	8005f9c <UART_SetConfig+0x348>
 8005eba:	2308      	movs	r3, #8
 8005ebc:	77fb      	strb	r3, [r7, #31]
 8005ebe:	e06d      	b.n	8005f9c <UART_SetConfig+0x348>
 8005ec0:	2310      	movs	r3, #16
 8005ec2:	77fb      	strb	r3, [r7, #31]
 8005ec4:	e06a      	b.n	8005f9c <UART_SetConfig+0x348>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1b      	ldr	r2, [pc, #108]	@ (8005f38 <UART_SetConfig+0x2e4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d138      	bne.n	8005f42 <UART_SetConfig+0x2ee>
 8005ed0:	4b13      	ldr	r3, [pc, #76]	@ (8005f20 <UART_SetConfig+0x2cc>)
 8005ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005eda:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ede:	d017      	beq.n	8005f10 <UART_SetConfig+0x2bc>
 8005ee0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ee4:	d82a      	bhi.n	8005f3c <UART_SetConfig+0x2e8>
 8005ee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eea:	d00b      	beq.n	8005f04 <UART_SetConfig+0x2b0>
 8005eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ef0:	d824      	bhi.n	8005f3c <UART_SetConfig+0x2e8>
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <UART_SetConfig+0x2aa>
 8005ef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005efa:	d006      	beq.n	8005f0a <UART_SetConfig+0x2b6>
 8005efc:	e01e      	b.n	8005f3c <UART_SetConfig+0x2e8>
 8005efe:	2300      	movs	r3, #0
 8005f00:	77fb      	strb	r3, [r7, #31]
 8005f02:	e04b      	b.n	8005f9c <UART_SetConfig+0x348>
 8005f04:	2302      	movs	r3, #2
 8005f06:	77fb      	strb	r3, [r7, #31]
 8005f08:	e048      	b.n	8005f9c <UART_SetConfig+0x348>
 8005f0a:	2304      	movs	r3, #4
 8005f0c:	77fb      	strb	r3, [r7, #31]
 8005f0e:	e045      	b.n	8005f9c <UART_SetConfig+0x348>
 8005f10:	2308      	movs	r3, #8
 8005f12:	77fb      	strb	r3, [r7, #31]
 8005f14:	e042      	b.n	8005f9c <UART_SetConfig+0x348>
 8005f16:	bf00      	nop
 8005f18:	efff69f3 	.word	0xefff69f3
 8005f1c:	40011000 	.word	0x40011000
 8005f20:	40023800 	.word	0x40023800
 8005f24:	40004400 	.word	0x40004400
 8005f28:	40004800 	.word	0x40004800
 8005f2c:	40004c00 	.word	0x40004c00
 8005f30:	40005000 	.word	0x40005000
 8005f34:	40011400 	.word	0x40011400
 8005f38:	40007800 	.word	0x40007800
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	77fb      	strb	r3, [r7, #31]
 8005f40:	e02c      	b.n	8005f9c <UART_SetConfig+0x348>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a72      	ldr	r2, [pc, #456]	@ (8006110 <UART_SetConfig+0x4bc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d125      	bne.n	8005f98 <UART_SetConfig+0x344>
 8005f4c:	4b71      	ldr	r3, [pc, #452]	@ (8006114 <UART_SetConfig+0x4c0>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f52:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f56:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f5a:	d017      	beq.n	8005f8c <UART_SetConfig+0x338>
 8005f5c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f60:	d817      	bhi.n	8005f92 <UART_SetConfig+0x33e>
 8005f62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f66:	d00b      	beq.n	8005f80 <UART_SetConfig+0x32c>
 8005f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f6c:	d811      	bhi.n	8005f92 <UART_SetConfig+0x33e>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <UART_SetConfig+0x326>
 8005f72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f76:	d006      	beq.n	8005f86 <UART_SetConfig+0x332>
 8005f78:	e00b      	b.n	8005f92 <UART_SetConfig+0x33e>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	77fb      	strb	r3, [r7, #31]
 8005f7e:	e00d      	b.n	8005f9c <UART_SetConfig+0x348>
 8005f80:	2302      	movs	r3, #2
 8005f82:	77fb      	strb	r3, [r7, #31]
 8005f84:	e00a      	b.n	8005f9c <UART_SetConfig+0x348>
 8005f86:	2304      	movs	r3, #4
 8005f88:	77fb      	strb	r3, [r7, #31]
 8005f8a:	e007      	b.n	8005f9c <UART_SetConfig+0x348>
 8005f8c:	2308      	movs	r3, #8
 8005f8e:	77fb      	strb	r3, [r7, #31]
 8005f90:	e004      	b.n	8005f9c <UART_SetConfig+0x348>
 8005f92:	2310      	movs	r3, #16
 8005f94:	77fb      	strb	r3, [r7, #31]
 8005f96:	e001      	b.n	8005f9c <UART_SetConfig+0x348>
 8005f98:	2310      	movs	r3, #16
 8005f9a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fa4:	d15b      	bne.n	800605e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005fa6:	7ffb      	ldrb	r3, [r7, #31]
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d828      	bhi.n	8005ffe <UART_SetConfig+0x3aa>
 8005fac:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb4 <UART_SetConfig+0x360>)
 8005fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb2:	bf00      	nop
 8005fb4:	08005fd9 	.word	0x08005fd9
 8005fb8:	08005fe1 	.word	0x08005fe1
 8005fbc:	08005fe9 	.word	0x08005fe9
 8005fc0:	08005fff 	.word	0x08005fff
 8005fc4:	08005fef 	.word	0x08005fef
 8005fc8:	08005fff 	.word	0x08005fff
 8005fcc:	08005fff 	.word	0x08005fff
 8005fd0:	08005fff 	.word	0x08005fff
 8005fd4:	08005ff7 	.word	0x08005ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd8:	f7fe f85a 	bl	8004090 <HAL_RCC_GetPCLK1Freq>
 8005fdc:	61b8      	str	r0, [r7, #24]
        break;
 8005fde:	e013      	b.n	8006008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fe0:	f7fe f86a 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 8005fe4:	61b8      	str	r0, [r7, #24]
        break;
 8005fe6:	e00f      	b.n	8006008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8006118 <UART_SetConfig+0x4c4>)
 8005fea:	61bb      	str	r3, [r7, #24]
        break;
 8005fec:	e00c      	b.n	8006008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fee:	f7fd ff3d 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8005ff2:	61b8      	str	r0, [r7, #24]
        break;
 8005ff4:	e008      	b.n	8006008 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ffa:	61bb      	str	r3, [r7, #24]
        break;
 8005ffc:	e004      	b.n	8006008 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	77bb      	strb	r3, [r7, #30]
        break;
 8006006:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d074      	beq.n	80060f8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	005a      	lsls	r2, r3, #1
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	441a      	add	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006022:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b0f      	cmp	r3, #15
 8006028:	d916      	bls.n	8006058 <UART_SetConfig+0x404>
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006030:	d212      	bcs.n	8006058 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f023 030f 	bic.w	r3, r3, #15
 800603a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	b29b      	uxth	r3, r3
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	b29a      	uxth	r2, r3
 8006048:	89fb      	ldrh	r3, [r7, #14]
 800604a:	4313      	orrs	r3, r2
 800604c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	89fa      	ldrh	r2, [r7, #14]
 8006054:	60da      	str	r2, [r3, #12]
 8006056:	e04f      	b.n	80060f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	77bb      	strb	r3, [r7, #30]
 800605c:	e04c      	b.n	80060f8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800605e:	7ffb      	ldrb	r3, [r7, #31]
 8006060:	2b08      	cmp	r3, #8
 8006062:	d828      	bhi.n	80060b6 <UART_SetConfig+0x462>
 8006064:	a201      	add	r2, pc, #4	@ (adr r2, 800606c <UART_SetConfig+0x418>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	08006091 	.word	0x08006091
 8006070:	08006099 	.word	0x08006099
 8006074:	080060a1 	.word	0x080060a1
 8006078:	080060b7 	.word	0x080060b7
 800607c:	080060a7 	.word	0x080060a7
 8006080:	080060b7 	.word	0x080060b7
 8006084:	080060b7 	.word	0x080060b7
 8006088:	080060b7 	.word	0x080060b7
 800608c:	080060af 	.word	0x080060af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006090:	f7fd fffe 	bl	8004090 <HAL_RCC_GetPCLK1Freq>
 8006094:	61b8      	str	r0, [r7, #24]
        break;
 8006096:	e013      	b.n	80060c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006098:	f7fe f80e 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 800609c:	61b8      	str	r0, [r7, #24]
        break;
 800609e:	e00f      	b.n	80060c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006118 <UART_SetConfig+0x4c4>)
 80060a2:	61bb      	str	r3, [r7, #24]
        break;
 80060a4:	e00c      	b.n	80060c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060a6:	f7fd fee1 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 80060aa:	61b8      	str	r0, [r7, #24]
        break;
 80060ac:	e008      	b.n	80060c0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060b2:	61bb      	str	r3, [r7, #24]
        break;
 80060b4:	e004      	b.n	80060c0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	77bb      	strb	r3, [r7, #30]
        break;
 80060be:	bf00      	nop
    }

    if (pclk != 0U)
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d018      	beq.n	80060f8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	085a      	lsrs	r2, r3, #1
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	441a      	add	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b0f      	cmp	r3, #15
 80060de:	d909      	bls.n	80060f4 <UART_SetConfig+0x4a0>
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060e6:	d205      	bcs.n	80060f4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60da      	str	r2, [r3, #12]
 80060f2:	e001      	b.n	80060f8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006104:	7fbb      	ldrb	r3, [r7, #30]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40007c00 	.word	0x40007c00
 8006114:	40023800 	.word	0x40023800
 8006118:	00f42400 	.word	0x00f42400

0800611c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00a      	beq.n	80061f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01a      	beq.n	8006232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800621a:	d10a      	bne.n	8006232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	605a      	str	r2, [r3, #4]
  }
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08c      	sub	sp, #48	@ 0x30
 8006264:	af02      	add	r7, sp, #8
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006270:	f7fc fef6 	bl	8003060 <HAL_GetTick>
 8006274:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b08      	cmp	r3, #8
 8006282:	d12e      	bne.n	80062e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006284:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	2200      	movs	r2, #0
 800628e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f83b 	bl	800630e <UART_WaitOnFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d021      	beq.n	80062e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	61fb      	str	r3, [r7, #28]
 80062be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	69b9      	ldr	r1, [r7, #24]
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	617b      	str	r3, [r7, #20]
   return(result);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e6      	bne.n	800629e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e011      	b.n	8006306 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3728      	adds	r7, #40	@ 0x28
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	60f8      	str	r0, [r7, #12]
 8006316:	60b9      	str	r1, [r7, #8]
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	4613      	mov	r3, r2
 800631c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631e:	e04f      	b.n	80063c0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006326:	d04b      	beq.n	80063c0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006328:	f7fc fe9a 	bl	8003060 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	429a      	cmp	r2, r3
 8006336:	d302      	bcc.n	800633e <UART_WaitOnFlagUntilTimeout+0x30>
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e04e      	b.n	80063e0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0304 	and.w	r3, r3, #4
 800634c:	2b00      	cmp	r3, #0
 800634e:	d037      	beq.n	80063c0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b80      	cmp	r3, #128	@ 0x80
 8006354:	d034      	beq.n	80063c0 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b40      	cmp	r3, #64	@ 0x40
 800635a:	d031      	beq.n	80063c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b08      	cmp	r3, #8
 8006368:	d110      	bne.n	800638c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2208      	movs	r2, #8
 8006370:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f8fe 	bl	8006574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2208      	movs	r2, #8
 800637c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e029      	b.n	80063e0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006396:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800639a:	d111      	bne.n	80063c0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f8e4 	bl	8006574 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e00f      	b.n	80063e0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69da      	ldr	r2, [r3, #28]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	bf0c      	ite	eq
 80063d0:	2301      	moveq	r3, #1
 80063d2:	2300      	movne	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d0a0      	beq.n	8006320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b097      	sub	sp, #92	@ 0x5c
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	4613      	mov	r3, r2
 80063f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	88fa      	ldrh	r2, [r7, #6]
 8006408:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800641a:	d10e      	bne.n	800643a <UART_Start_Receive_IT+0x52>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d105      	bne.n	8006430 <UART_Start_Receive_IT+0x48>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800642a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800642e:	e02d      	b.n	800648c <UART_Start_Receive_IT+0xa4>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	22ff      	movs	r2, #255	@ 0xff
 8006434:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006438:	e028      	b.n	800648c <UART_Start_Receive_IT+0xa4>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10d      	bne.n	800645e <UART_Start_Receive_IT+0x76>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d104      	bne.n	8006454 <UART_Start_Receive_IT+0x6c>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	22ff      	movs	r2, #255	@ 0xff
 800644e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006452:	e01b      	b.n	800648c <UART_Start_Receive_IT+0xa4>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	227f      	movs	r2, #127	@ 0x7f
 8006458:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800645c:	e016      	b.n	800648c <UART_Start_Receive_IT+0xa4>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006466:	d10d      	bne.n	8006484 <UART_Start_Receive_IT+0x9c>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d104      	bne.n	800647a <UART_Start_Receive_IT+0x92>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	227f      	movs	r2, #127	@ 0x7f
 8006474:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006478:	e008      	b.n	800648c <UART_Start_Receive_IT+0xa4>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	223f      	movs	r2, #63	@ 0x3f
 800647e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006482:	e003      	b.n	800648c <UART_Start_Receive_IT+0xa4>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2222      	movs	r2, #34	@ 0x22
 8006498:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3308      	adds	r3, #8
 80064a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064a6:	e853 3f00 	ldrex	r3, [r3]
 80064aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80064bc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80064be:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80064c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064c4:	e841 2300 	strex	r3, r2, [r1]
 80064c8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80064ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1e5      	bne.n	800649c <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d8:	d107      	bne.n	80064ea <UART_Start_Receive_IT+0x102>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4a21      	ldr	r2, [pc, #132]	@ (800656c <UART_Start_Receive_IT+0x184>)
 80064e6:	669a      	str	r2, [r3, #104]	@ 0x68
 80064e8:	e002      	b.n	80064f0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4a20      	ldr	r2, [pc, #128]	@ (8006570 <UART_Start_Receive_IT+0x188>)
 80064ee:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d019      	beq.n	800652c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800650c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006516:	637b      	str	r3, [r7, #52]	@ 0x34
 8006518:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800651c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1e6      	bne.n	80064f8 <UART_Start_Receive_IT+0x110>
 800652a:	e018      	b.n	800655e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	613b      	str	r3, [r7, #16]
   return(result);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f043 0320 	orr.w	r3, r3, #32
 8006540:	653b      	str	r3, [r7, #80]	@ 0x50
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800654a:	623b      	str	r3, [r7, #32]
 800654c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	69f9      	ldr	r1, [r7, #28]
 8006550:	6a3a      	ldr	r2, [r7, #32]
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	61bb      	str	r3, [r7, #24]
   return(result);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e6      	bne.n	800652c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	375c      	adds	r7, #92	@ 0x5c
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	08006865 	.word	0x08006865
 8006570:	080066bd 	.word	0x080066bd

08006574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b095      	sub	sp, #84	@ 0x54
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800658a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006590:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800659a:	643b      	str	r3, [r7, #64]	@ 0x40
 800659c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d1e6      	bne.n	800657c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3308      	adds	r3, #8
 80065b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	e853 3f00 	ldrex	r3, [r3]
 80065bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	f023 0301 	bic.w	r3, r3, #1
 80065c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3308      	adds	r3, #8
 80065cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065d6:	e841 2300 	strex	r3, r2, [r1]
 80065da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1e5      	bne.n	80065ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d118      	bne.n	800661c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f023 0310 	bic.w	r3, r3, #16
 80065fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006608:	61bb      	str	r3, [r7, #24]
 800660a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6979      	ldr	r1, [r7, #20]
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	613b      	str	r3, [r7, #16]
   return(result);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e6      	bne.n	80065ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006630:	bf00      	nop
 8006632:	3754      	adds	r7, #84	@ 0x54
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006648:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7ff fae4 	bl	8005c28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	60bb      	str	r3, [r7, #8]
   return(result);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006684:	61fb      	str	r3, [r7, #28]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6979      	ldr	r1, [r7, #20]
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	613b      	str	r3, [r7, #16]
   return(result);
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e6      	bne.n	8006670 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fab0 	bl	8005c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b4:	bf00      	nop
 80066b6:	3720      	adds	r7, #32
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b09c      	sub	sp, #112	@ 0x70
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d4:	2b22      	cmp	r3, #34	@ 0x22
 80066d6:	f040 80b9 	bne.w	800684c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80066e8:	b2d9      	uxtb	r1, r3
 80066ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f4:	400a      	ands	r2, r1
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800670a:	b29b      	uxth	r3, r3
 800670c:	3b01      	subs	r3, #1
 800670e:	b29a      	uxth	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800671c:	b29b      	uxth	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	f040 809c 	bne.w	800685c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006738:	66bb      	str	r3, [r7, #104]	@ 0x68
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006742:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006744:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006746:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006748:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1e6      	bne.n	8006724 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3308      	adds	r3, #8
 800675c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006768:	f023 0301 	bic.w	r3, r3, #1
 800676c:	667b      	str	r3, [r7, #100]	@ 0x64
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3308      	adds	r3, #8
 8006774:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006776:	647a      	str	r2, [r7, #68]	@ 0x44
 8006778:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800677c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e5      	bne.n	8006756 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d018      	beq.n	80067de <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	623b      	str	r3, [r7, #32]
   return(result);
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80067cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e6      	bne.n	80067ac <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d12e      	bne.n	8006844 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f023 0310 	bic.w	r3, r3, #16
 8006800:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	69b9      	ldr	r1, [r7, #24]
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	617b      	str	r3, [r7, #20]
   return(result);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e6      	bne.n	80067ec <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	f003 0310 	and.w	r3, r3, #16
 8006828:	2b10      	cmp	r3, #16
 800682a:	d103      	bne.n	8006834 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2210      	movs	r2, #16
 8006832:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff f9fd 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006842:	e00b      	b.n	800685c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fc f9df 	bl	8002c08 <HAL_UART_RxCpltCallback>
}
 800684a:	e007      	b.n	800685c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0208 	orr.w	r2, r2, #8
 800685a:	619a      	str	r2, [r3, #24]
}
 800685c:	bf00      	nop
 800685e:	3770      	adds	r7, #112	@ 0x70
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b09c      	sub	sp, #112	@ 0x70
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006872:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800687c:	2b22      	cmp	r3, #34	@ 0x22
 800687e:	f040 80b9 	bne.w	80069f4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006888:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006890:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006892:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006896:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800689a:	4013      	ands	r3, r2
 800689c:	b29a      	uxth	r2, r3
 800689e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80068a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a6:	1c9a      	adds	r2, r3, #2
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f040 809c 	bne.w	8006a04 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80068da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80068ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80068f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80068f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e6      	bne.n	80068cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3308      	adds	r3, #8
 8006904:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	663b      	str	r3, [r7, #96]	@ 0x60
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800691e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006920:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006924:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e5      	bne.n	80068fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d018      	beq.n	8006986 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	61fb      	str	r3, [r7, #28]
   return(result);
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006974:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e6      	bne.n	8006954 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800698a:	2b01      	cmp	r3, #1
 800698c:	d12e      	bne.n	80069ec <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f023 0310 	bic.w	r3, r3, #16
 80069a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069b2:	61bb      	str	r3, [r7, #24]
 80069b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	6979      	ldr	r1, [r7, #20]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	613b      	str	r3, [r7, #16]
   return(result);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e6      	bne.n	8006994 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69db      	ldr	r3, [r3, #28]
 80069cc:	f003 0310 	and.w	r3, r3, #16
 80069d0:	2b10      	cmp	r3, #16
 80069d2:	d103      	bne.n	80069dc <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2210      	movs	r2, #16
 80069da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff f929 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069ea:	e00b      	b.n	8006a04 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7fc f90b 	bl	8002c08 <HAL_UART_RxCpltCallback>
}
 80069f2:	e007      	b.n	8006a04 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0208 	orr.w	r2, r2, #8
 8006a02:	619a      	str	r2, [r3, #24]
}
 8006a04:	bf00      	nop
 8006a06:	3770      	adds	r7, #112	@ 0x70
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <memset>:
 8006a0c:	4402      	add	r2, r0
 8006a0e:	4603      	mov	r3, r0
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d100      	bne.n	8006a16 <memset+0xa>
 8006a14:	4770      	bx	lr
 8006a16:	f803 1b01 	strb.w	r1, [r3], #1
 8006a1a:	e7f9      	b.n	8006a10 <memset+0x4>

08006a1c <__errno>:
 8006a1c:	4b01      	ldr	r3, [pc, #4]	@ (8006a24 <__errno+0x8>)
 8006a1e:	6818      	ldr	r0, [r3, #0]
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	2000000c 	.word	0x2000000c

08006a28 <__libc_init_array>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	4d0d      	ldr	r5, [pc, #52]	@ (8006a60 <__libc_init_array+0x38>)
 8006a2c:	4c0d      	ldr	r4, [pc, #52]	@ (8006a64 <__libc_init_array+0x3c>)
 8006a2e:	1b64      	subs	r4, r4, r5
 8006a30:	10a4      	asrs	r4, r4, #2
 8006a32:	2600      	movs	r6, #0
 8006a34:	42a6      	cmp	r6, r4
 8006a36:	d109      	bne.n	8006a4c <__libc_init_array+0x24>
 8006a38:	4d0b      	ldr	r5, [pc, #44]	@ (8006a68 <__libc_init_array+0x40>)
 8006a3a:	4c0c      	ldr	r4, [pc, #48]	@ (8006a6c <__libc_init_array+0x44>)
 8006a3c:	f000 f914 	bl	8006c68 <_init>
 8006a40:	1b64      	subs	r4, r4, r5
 8006a42:	10a4      	asrs	r4, r4, #2
 8006a44:	2600      	movs	r6, #0
 8006a46:	42a6      	cmp	r6, r4
 8006a48:	d105      	bne.n	8006a56 <__libc_init_array+0x2e>
 8006a4a:	bd70      	pop	{r4, r5, r6, pc}
 8006a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a50:	4798      	blx	r3
 8006a52:	3601      	adds	r6, #1
 8006a54:	e7ee      	b.n	8006a34 <__libc_init_array+0xc>
 8006a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a5a:	4798      	blx	r3
 8006a5c:	3601      	adds	r6, #1
 8006a5e:	e7f2      	b.n	8006a46 <__libc_init_array+0x1e>
 8006a60:	08006cc0 	.word	0x08006cc0
 8006a64:	08006cc0 	.word	0x08006cc0
 8006a68:	08006cc0 	.word	0x08006cc0
 8006a6c:	08006cc4 	.word	0x08006cc4

08006a70 <sqrtf>:
 8006a70:	b508      	push	{r3, lr}
 8006a72:	ed2d 8b02 	vpush	{d8}
 8006a76:	eeb0 8a40 	vmov.f32	s16, s0
 8006a7a:	f000 f8f2 	bl	8006c62 <__ieee754_sqrtf>
 8006a7e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a86:	d60c      	bvs.n	8006aa2 <sqrtf+0x32>
 8006a88:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006aa8 <sqrtf+0x38>
 8006a8c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a94:	d505      	bpl.n	8006aa2 <sqrtf+0x32>
 8006a96:	f7ff ffc1 	bl	8006a1c <__errno>
 8006a9a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006a9e:	2321      	movs	r3, #33	@ 0x21
 8006aa0:	6003      	str	r3, [r0, #0]
 8006aa2:	ecbd 8b02 	vpop	{d8}
 8006aa6:	bd08      	pop	{r3, pc}
 8006aa8:	00000000 	.word	0x00000000

08006aac <atanf>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	ee10 5a10 	vmov	r5, s0
 8006ab2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8006ab6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8006aba:	eef0 7a40 	vmov.f32	s15, s0
 8006abe:	d310      	bcc.n	8006ae2 <atanf+0x36>
 8006ac0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8006ac4:	d904      	bls.n	8006ad0 <atanf+0x24>
 8006ac6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8006aca:	eeb0 0a67 	vmov.f32	s0, s15
 8006ace:	bd38      	pop	{r3, r4, r5, pc}
 8006ad0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8006c08 <atanf+0x15c>
 8006ad4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8006c0c <atanf+0x160>
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	bfc8      	it	gt
 8006adc:	eef0 7a47 	vmovgt.f32	s15, s14
 8006ae0:	e7f3      	b.n	8006aca <atanf+0x1e>
 8006ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8006c10 <atanf+0x164>)
 8006ae4:	429c      	cmp	r4, r3
 8006ae6:	d810      	bhi.n	8006b0a <atanf+0x5e>
 8006ae8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8006aec:	d20a      	bcs.n	8006b04 <atanf+0x58>
 8006aee:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8006c14 <atanf+0x168>
 8006af2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8006af6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006afa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b02:	dce2      	bgt.n	8006aca <atanf+0x1e>
 8006b04:	f04f 33ff 	mov.w	r3, #4294967295
 8006b08:	e013      	b.n	8006b32 <atanf+0x86>
 8006b0a:	f000 f8a3 	bl	8006c54 <fabsf>
 8006b0e:	4b42      	ldr	r3, [pc, #264]	@ (8006c18 <atanf+0x16c>)
 8006b10:	429c      	cmp	r4, r3
 8006b12:	d84f      	bhi.n	8006bb4 <atanf+0x108>
 8006b14:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8006b18:	429c      	cmp	r4, r3
 8006b1a:	d841      	bhi.n	8006ba0 <atanf+0xf4>
 8006b1c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8006b20:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006b24:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006b28:	2300      	movs	r3, #0
 8006b2a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8006b38:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006c1c <atanf+0x170>
 8006b3c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8006c20 <atanf+0x174>
 8006b40:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8006c24 <atanf+0x178>
 8006b44:	ee66 6a06 	vmul.f32	s13, s12, s12
 8006b48:	eee6 5a87 	vfma.f32	s11, s13, s14
 8006b4c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006c28 <atanf+0x17c>
 8006b50:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006b54:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8006c2c <atanf+0x180>
 8006b58:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006b5c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8006c30 <atanf+0x184>
 8006b60:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8006b64:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006c34 <atanf+0x188>
 8006b68:	eee7 5a26 	vfma.f32	s11, s14, s13
 8006b6c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8006c38 <atanf+0x18c>
 8006b70:	eea6 5a87 	vfma.f32	s10, s13, s14
 8006b74:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006c3c <atanf+0x190>
 8006b78:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006b7c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8006c40 <atanf+0x194>
 8006b80:	eea7 5a26 	vfma.f32	s10, s14, s13
 8006b84:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006c44 <atanf+0x198>
 8006b88:	eea5 7a26 	vfma.f32	s14, s10, s13
 8006b8c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006b90:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006b94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b98:	d121      	bne.n	8006bde <atanf+0x132>
 8006b9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b9e:	e794      	b.n	8006aca <atanf+0x1e>
 8006ba0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006ba4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006ba8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006bac:	2301      	movs	r3, #1
 8006bae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006bb2:	e7be      	b.n	8006b32 <atanf+0x86>
 8006bb4:	4b24      	ldr	r3, [pc, #144]	@ (8006c48 <atanf+0x19c>)
 8006bb6:	429c      	cmp	r4, r3
 8006bb8:	d80b      	bhi.n	8006bd2 <atanf+0x126>
 8006bba:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8006bbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bc2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bd0:	e7af      	b.n	8006b32 <atanf+0x86>
 8006bd2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8006bd6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e7a9      	b.n	8006b32 <atanf+0x86>
 8006bde:	4a1b      	ldr	r2, [pc, #108]	@ (8006c4c <atanf+0x1a0>)
 8006be0:	491b      	ldr	r1, [pc, #108]	@ (8006c50 <atanf+0x1a4>)
 8006be2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006be6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006bea:	edd3 6a00 	vldr	s13, [r3]
 8006bee:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006bf2:	2d00      	cmp	r5, #0
 8006bf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006bf8:	edd2 7a00 	vldr	s15, [r2]
 8006bfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c00:	bfb8      	it	lt
 8006c02:	eef1 7a67 	vneglt.f32	s15, s15
 8006c06:	e760      	b.n	8006aca <atanf+0x1e>
 8006c08:	bfc90fdb 	.word	0xbfc90fdb
 8006c0c:	3fc90fdb 	.word	0x3fc90fdb
 8006c10:	3edfffff 	.word	0x3edfffff
 8006c14:	7149f2ca 	.word	0x7149f2ca
 8006c18:	3f97ffff 	.word	0x3f97ffff
 8006c1c:	3c8569d7 	.word	0x3c8569d7
 8006c20:	3d4bda59 	.word	0x3d4bda59
 8006c24:	bd6ef16b 	.word	0xbd6ef16b
 8006c28:	3d886b35 	.word	0x3d886b35
 8006c2c:	3dba2e6e 	.word	0x3dba2e6e
 8006c30:	3e124925 	.word	0x3e124925
 8006c34:	3eaaaaab 	.word	0x3eaaaaab
 8006c38:	bd15a221 	.word	0xbd15a221
 8006c3c:	bd9d8795 	.word	0xbd9d8795
 8006c40:	bde38e38 	.word	0xbde38e38
 8006c44:	be4ccccd 	.word	0xbe4ccccd
 8006c48:	401bffff 	.word	0x401bffff
 8006c4c:	08006ca8 	.word	0x08006ca8
 8006c50:	08006c98 	.word	0x08006c98

08006c54 <fabsf>:
 8006c54:	ee10 3a10 	vmov	r3, s0
 8006c58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c5c:	ee00 3a10 	vmov	s0, r3
 8006c60:	4770      	bx	lr

08006c62 <__ieee754_sqrtf>:
 8006c62:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006c66:	4770      	bx	lr

08006c68 <_init>:
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	bf00      	nop
 8006c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6e:	bc08      	pop	{r3}
 8006c70:	469e      	mov	lr, r3
 8006c72:	4770      	bx	lr

08006c74 <_fini>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	bf00      	nop
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr
