
MTS_f7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008324  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080084ec  080084ec  000094ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008544  08008544  0000a15c  2**0
                  CONTENTS
  4 .ARM          00000008  08008544  08008544  00009544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800854c  0800854c  0000a15c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800854c  0800854c  0000954c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008550  08008550  00009550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000015c  20000000  08008554  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b7c  2000015c  080086b0  0000a15c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cd8  080086b0  0000acd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a15c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014052  00000000  00000000  0000a18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003478  00000000  00000000  0001e1de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  00021658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d4a  00000000  00000000  000227e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c40  00000000  00000000  0002352a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178ec  00000000  00000000  0002816a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef475  00000000  00000000  0003fa56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012eecb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b5c  00000000  00000000  0012ef10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00133a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000015c 	.word	0x2000015c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080084d4 	.word	0x080084d4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000160 	.word	0x20000160
 8000204:	080084d4 	.word	0x080084d4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_GPIO_Init>:
     PD6   ------> USART2_RX
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08c      	sub	sp, #48	@ 0x30
 80004fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	4b6e      	ldr	r3, [pc, #440]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a6d      	ldr	r2, [pc, #436]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b6b      	ldr	r3, [pc, #428]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	61bb      	str	r3, [r7, #24]
 8000524:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	4b68      	ldr	r3, [pc, #416]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a67      	ldr	r2, [pc, #412]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b65      	ldr	r3, [pc, #404]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b62      	ldr	r3, [pc, #392]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a61      	ldr	r2, [pc, #388]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b5f      	ldr	r3, [pc, #380]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b5c      	ldr	r3, [pc, #368]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a5b      	ldr	r2, [pc, #364]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b59      	ldr	r3, [pc, #356]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	4b56      	ldr	r3, [pc, #344]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a55      	ldr	r2, [pc, #340]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b53      	ldr	r3, [pc, #332]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0308 	and.w	r3, r3, #8
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000586:	4b50      	ldr	r3, [pc, #320]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a4f      	ldr	r2, [pc, #316]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 800058c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b4d      	ldr	r3, [pc, #308]	@ (80006c8 <MX_GPIO_Init+0x1d0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2140      	movs	r1, #64	@ 0x40
 80005a2:	484a      	ldr	r0, [pc, #296]	@ (80006cc <MX_GPIO_Init+0x1d4>)
 80005a4:	f000 fe0c 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005b8:	f107 031c 	add.w	r3, r7, #28
 80005bc:	4619      	mov	r1, r3
 80005be:	4844      	ldr	r0, [pc, #272]	@ (80006d0 <MX_GPIO_Init+0x1d8>)
 80005c0:	f000 fc52 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80005c4:	2332      	movs	r3, #50	@ 0x32
 80005c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005cc:	2300      	movs	r3, #0
 80005ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d0:	2303      	movs	r3, #3
 80005d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005d4:	230b      	movs	r3, #11
 80005d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4619      	mov	r1, r3
 80005de:	483c      	ldr	r0, [pc, #240]	@ (80006d0 <MX_GPIO_Init+0x1d8>)
 80005e0:	f000 fc42 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80005e4:	2386      	movs	r3, #134	@ 0x86
 80005e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f0:	2303      	movs	r3, #3
 80005f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005f4:	230b      	movs	r3, #11
 80005f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	4835      	ldr	r0, [pc, #212]	@ (80006d4 <MX_GPIO_Init+0x1dc>)
 8000600:	f000 fc32 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000604:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060a:	2302      	movs	r3, #2
 800060c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000612:	2303      	movs	r3, #3
 8000614:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000616:	230b      	movs	r3, #11
 8000618:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	482d      	ldr	r0, [pc, #180]	@ (80006d8 <MX_GPIO_Init+0x1e0>)
 8000622:	f000 fc21 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000626:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000638:	2307      	movs	r3, #7
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4619      	mov	r1, r3
 8000642:	4826      	ldr	r0, [pc, #152]	@ (80006dc <MX_GPIO_Init+0x1e4>)
 8000644:	f000 fc10 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000648:	2340      	movs	r3, #64	@ 0x40
 800064a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4619      	mov	r1, r3
 800065e:	481b      	ldr	r0, [pc, #108]	@ (80006cc <MX_GPIO_Init+0x1d4>)
 8000660:	f000 fc02 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000664:	2380      	movs	r3, #128	@ 0x80
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4619      	mov	r1, r3
 8000676:	4815      	ldr	r0, [pc, #84]	@ (80006cc <MX_GPIO_Init+0x1d4>)
 8000678:	f000 fbf6 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800067c:	2340      	movs	r3, #64	@ 0x40
 800067e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800068c:	2307      	movs	r3, #7
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4811      	ldr	r0, [pc, #68]	@ (80006dc <MX_GPIO_Init+0x1e4>)
 8000698:	f000 fbe6 	bl	8000e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800069c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ae:	230b      	movs	r3, #11
 80006b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4804      	ldr	r0, [pc, #16]	@ (80006cc <MX_GPIO_Init+0x1d4>)
 80006ba:	f000 fbd5 	bl	8000e68 <HAL_GPIO_Init>

}
 80006be:	bf00      	nop
 80006c0:	3730      	adds	r7, #48	@ 0x30
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40021800 	.word	0x40021800
 80006d0:	40020800 	.word	0x40020800
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020c00 	.word	0x40020c00

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	f5ad 5d51 	sub.w	sp, sp, #13376	@ 0x3440
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f000 fa2a 	bl	8000b42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f873 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f7ff ff01 	bl	80004f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006f6:	f000 f98b 	bl	8000a10 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80006fa:	f007 f819 	bl	8007730 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint32_t ETS_counter = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	f243 425c 	movw	r2, #13404	@ 0x345c
 8000704:	443a      	add	r2, r7
 8000706:	6013      	str	r3, [r2, #0]
  uint32_t NLLS_counter = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	f243 4258 	movw	r2, #13400	@ 0x3458
 800070e:	443a      	add	r2, r7
 8000710:	6013      	str	r3, [r2, #0]

  uint8_t mx_int[4*1112] = {0}, my_int[4*1112] = {0}, mz_int[4*1112] = {0};
 8000712:	f242 4360 	movw	r3, #9312	@ 0x2460
 8000716:	443b      	add	r3, r7
 8000718:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	3304      	adds	r3, #4
 8000722:	f241 125c 	movw	r2, #4444	@ 0x115c
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f007 fe45 	bl	80083b8 <memset>
 800072e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 8000732:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	3304      	adds	r3, #4
 800073c:	f241 125c 	movw	r2, #4444	@ 0x115c
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f007 fe38 	bl	80083b8 <memset>
 8000748:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800074c:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	3304      	adds	r3, #4
 8000756:	f241 125c 	movw	r2, #4444	@ 0x115c
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f007 fe2b 	bl	80083b8 <memset>

  float p[9] = {0}, p0 = {0};
 8000762:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8000766:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800076a:	4618      	mov	r0, r3
 800076c:	2324      	movs	r3, #36	@ 0x24
 800076e:	461a      	mov	r2, r3
 8000770:	2100      	movs	r1, #0
 8000772:	f007 fe21 	bl	80083b8 <memset>
 8000776:	f04f 0300 	mov.w	r3, #0
 800077a:	f243 4254 	movw	r2, #13396	@ 0x3454
 800077e:	443a      	add	r2, r7
 8000780:	6013      	str	r3, [r2, #0]
  uint8_t passos_NLLS = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	f243 4253 	movw	r2, #13395	@ 0x3453
 8000788:	443a      	add	r2, r7
 800078a:	7013      	strb	r3, [r2, #0]
  uint8_t tempo_exe_ETS[4] = {0}, tempo_exe_NLLS[4] = {0};
 800078c:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8000790:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800079c:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	mx_int[0] = 5;
 80007a4:	f242 4360 	movw	r3, #9312	@ 0x2460
 80007a8:	443b      	add	r3, r7
 80007aa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80007ae:	2205      	movs	r2, #5
 80007b0:	701a      	strb	r2, [r3, #0]
	CDC_Transmit_FS(mx_int, 1);
 80007b2:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <main+0xf0>)
 80007b4:	f503 5351 	add.w	r3, r3, #13376	@ 0x3440
 80007b8:	f103 0320 	add.w	r3, r3, #32
 80007bc:	443b      	add	r3, r7
 80007be:	2101      	movs	r1, #1
 80007c0:	4618      	mov	r0, r3
 80007c2:	f007 f873 	bl	80078ac <CDC_Transmit_FS>
	//HAL_UART_Receive_IT(&huart2, mx_int, 1);
	/*HAL_UART_Receive(&huart2, my, 1112*4, 5000);
	HAL_UART_Receive(&huart2, mz, 1112*4, 5000);*/

	global_counter = 0;
 80007c6:	4b03      	ldr	r3, [pc, #12]	@ (80007d4 <main+0xf4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	801a      	strh	r2, [r3, #0]
	mx_int[0] = 5;
 80007cc:	bf00      	nop
 80007ce:	e7e9      	b.n	80007a4 <main+0xc4>
 80007d0:	ffffee90 	.word	0xffffee90
 80007d4:	20000178 	.word	0x20000178

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	@ 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2230      	movs	r2, #48	@ 0x30
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f007 fde6 	bl	80083b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fc:	4b27      	ldr	r3, [pc, #156]	@ (800089c <SystemClock_Config+0xc4>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	4a26      	ldr	r2, [pc, #152]	@ (800089c <SystemClock_Config+0xc4>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	@ 0x40
 8000808:	4b24      	ldr	r3, [pc, #144]	@ (800089c <SystemClock_Config+0xc4>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <SystemClock_Config+0xc8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800081c:	4a20      	ldr	r2, [pc, #128]	@ (80008a0 <SystemClock_Config+0xc8>)
 800081e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <SystemClock_Config+0xc8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000834:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000848:	2348      	movs	r3, #72	@ 0x48
 800084a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000850:	2303      	movs	r3, #3
 8000852:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f001 ff53 	bl	8002704 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000864:	f000 f81e 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086c:	2302      	movs	r3, #2
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2102      	movs	r1, #2
 8000884:	4618      	mov	r0, r3
 8000886:	f002 f9e1 	bl	8002c4c <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000890:	f000 f808 	bl	80008a4 <Error_Handler>
  }
}
 8000894:	bf00      	nop
 8000896:	3750      	adds	r7, #80	@ 0x50
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <Error_Handler+0x8>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <HAL_MspInit+0x44>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_MspInit+0x44>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <HAL_MspInit+0x44>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d2:	4a08      	ldr	r2, [pc, #32]	@ (80008f4 <HAL_MspInit+0x44>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_MspInit+0x44>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <NMI_Handler+0x4>

08000900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <UsageFault_Handler+0x4>

08000920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094e:	f000 f935 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800095c:	4802      	ldr	r0, [pc, #8]	@ (8000968 <TIM2_IRQHandler+0x10>)
 800095e:	f002 ffba 	bl	80038d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000180 	.word	0x20000180

0800096c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000970:	4802      	ldr	r0, [pc, #8]	@ (800097c <OTG_FS_IRQHandler+0x10>)
 8000972:	f000 fd76 	bl	8001462 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200016b0 	.word	0x200016b0

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	@ (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f007 fd1a 	bl	80083e8 <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20050000 	.word	0x20050000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	2000017c 	.word	0x2000017c
 80009e8:	20001cd8 	.word	0x20001cd8

080009ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <SystemInit+0x20>)
 80009f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009f6:	4a05      	ldr	r2, [pc, #20]	@ (8000a0c <SystemInit+0x20>)
 80009f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <MX_TIM2_Init+0x94>)
 8000a30:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108 - 1;
 8000a36:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <MX_TIM2_Init+0x94>)
 8000a38:	226b      	movs	r2, #107	@ 0x6b
 8000a3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <MX_TIM2_Init+0x94>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000a42:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <MX_TIM2_Init+0x94>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a48:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <MX_TIM2_Init+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <MX_TIM2_Init+0x94>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a54:	4813      	ldr	r0, [pc, #76]	@ (8000aa4 <MX_TIM2_Init+0x94>)
 8000a56:	f002 fee7 	bl	8003828 <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a60:	f7ff ff20 	bl	80008a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_TIM2_Init+0x94>)
 8000a72:	f003 f837 	bl	8003ae4 <HAL_TIM_ConfigClockSource>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a7c:	f7ff ff12 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a80:	2320      	movs	r3, #32
 8000a82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_TIM2_Init+0x94>)
 8000a8e:	f003 fa6b 	bl	8003f68 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a98:	f7ff ff04 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000180 	.word	0x20000180

08000aa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ab8:	d113      	bne.n	8000ae2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <HAL_TIM_Base_MspInit+0x44>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a0b      	ldr	r2, [pc, #44]	@ (8000aec <HAL_TIM_Base_MspInit+0x44>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_TIM_Base_MspInit+0x44>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	201c      	movs	r0, #28
 8000ad8:	f000 f98f 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000adc:	201c      	movs	r0, #28
 8000ade:	f000 f9a8 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000af0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000af4:	f7ff ff7a 	bl	80009ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000afa:	490d      	ldr	r1, [pc, #52]	@ (8000b30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b00:	e002      	b.n	8000b08 <LoopCopyDataInit>

08000b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b06:	3304      	adds	r3, #4

08000b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b0c:	d3f9      	bcc.n	8000b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b10:	4c0a      	ldr	r4, [pc, #40]	@ (8000b3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b14:	e001      	b.n	8000b1a <LoopFillZerobss>

08000b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b18:	3204      	adds	r2, #4

08000b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b1c:	d3fb      	bcc.n	8000b16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b1e:	f007 fc69 	bl	80083f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b22:	f7ff fddd 	bl	80006e0 <main>
  bx  lr    
 8000b26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b28:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b30:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000b34:	08008554 	.word	0x08008554
  ldr r2, =_sbss
 8000b38:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000b3c:	20001cd8 	.word	0x20001cd8

08000b40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b40:	e7fe      	b.n	8000b40 <ADC_IRQHandler>

08000b42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b46:	2003      	movs	r0, #3
 8000b48:	f000 f94c 	bl	8000de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f000 f805 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b52:	f7ff fead 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <HAL_InitTick+0x54>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_InitTick+0x58>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f967 	bl	8000e4e <HAL_SYSTICK_Config>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00e      	b.n	8000ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d80a      	bhi.n	8000ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f000 f92f 	bl	8000dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	@ (8000bb8 <HAL_InitTick+0x5c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000004 	.word	0x20000004

08000bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	@ (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	200001cc 	.word	0x200001cc

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200001cc 	.word	0x200001cc

08000bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c04:	f7ff ffee 	bl	8000be4 <HAL_GetTick>
 8000c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c14:	d005      	beq.n	8000c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c16:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <HAL_Delay+0x44>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c22:	bf00      	nop
 8000c24:	f7ff ffde 	bl	8000be4 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d8f7      	bhi.n	8000c24 <HAL_Delay+0x28>
  {
  }
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x40>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x40>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00
 8000c88:	05fa0000 	.word	0x05fa0000

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4907      	ldr	r1, [pc, #28]	@ (8000ce0 <__NVIC_EnableIRQ+0x38>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000e100 	.word	0xe000e100

08000ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	6039      	str	r1, [r7, #0]
 8000cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	db0a      	blt.n	8000d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	490c      	ldr	r1, [pc, #48]	@ (8000d30 <__NVIC_SetPriority+0x4c>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	0112      	lsls	r2, r2, #4
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	440b      	add	r3, r1
 8000d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d0c:	e00a      	b.n	8000d24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4908      	ldr	r1, [pc, #32]	@ (8000d34 <__NVIC_SetPriority+0x50>)
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	3b04      	subs	r3, #4
 8000d1c:	0112      	lsls	r2, r2, #4
 8000d1e:	b2d2      	uxtb	r2, r2
 8000d20:	440b      	add	r3, r1
 8000d22:	761a      	strb	r2, [r3, #24]
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b089      	sub	sp, #36	@ 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f1c3 0307 	rsb	r3, r3, #7
 8000d52:	2b04      	cmp	r3, #4
 8000d54:	bf28      	it	cs
 8000d56:	2304      	movcs	r3, #4
 8000d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d902      	bls.n	8000d68 <NVIC_EncodePriority+0x30>
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3b03      	subs	r3, #3
 8000d66:	e000      	b.n	8000d6a <NVIC_EncodePriority+0x32>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43da      	mvns	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8a:	43d9      	mvns	r1, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	4313      	orrs	r3, r2
         );
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3724      	adds	r7, #36	@ 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000db0:	d301      	bcc.n	8000db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00f      	b.n	8000dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db6:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <SysTick_Config+0x40>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dbe:	210f      	movs	r1, #15
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f7ff ff8e 	bl	8000ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc8:	4b05      	ldr	r3, [pc, #20]	@ (8000de0 <SysTick_Config+0x40>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dce:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <SysTick_Config+0x40>)
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff ff29 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b086      	sub	sp, #24
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e0c:	f7ff ff3e 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	6978      	ldr	r0, [r7, #20]
 8000e18:	f7ff ff8e 	bl	8000d38 <NVIC_EncodePriority>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff5d 	bl	8000ce4 <__NVIC_SetPriority>
}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff31 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f7ff ffa2 	bl	8000da0 <SysTick_Config>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	e175      	b.n	8001174 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e88:	2201      	movs	r2, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	f040 8164 	bne.w	800116e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d005      	beq.n	8000ebe <HAL_GPIO_Init+0x56>
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d130      	bne.n	8000f20 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	2203      	movs	r2, #3
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 0201 	and.w	r2, r3, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d017      	beq.n	8000f5c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d123      	bne.n	8000fb0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	08da      	lsrs	r2, r3, #3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3208      	adds	r2, #8
 8000f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	220f      	movs	r2, #15
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	691a      	ldr	r2, [r3, #16]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	69b9      	ldr	r1, [r7, #24]
 8000fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0203 	and.w	r2, r3, #3
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 80be 	beq.w	800116e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b66      	ldr	r3, [pc, #408]	@ (800118c <HAL_GPIO_Init+0x324>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	4a65      	ldr	r2, [pc, #404]	@ (800118c <HAL_GPIO_Init+0x324>)
 8000ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ffe:	4b63      	ldr	r3, [pc, #396]	@ (800118c <HAL_GPIO_Init+0x324>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800100a:	4a61      	ldr	r2, [pc, #388]	@ (8001190 <HAL_GPIO_Init+0x328>)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	089b      	lsrs	r3, r3, #2
 8001010:	3302      	adds	r3, #2
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a58      	ldr	r2, [pc, #352]	@ (8001194 <HAL_GPIO_Init+0x32c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d037      	beq.n	80010a6 <HAL_GPIO_Init+0x23e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a57      	ldr	r2, [pc, #348]	@ (8001198 <HAL_GPIO_Init+0x330>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d031      	beq.n	80010a2 <HAL_GPIO_Init+0x23a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a56      	ldr	r2, [pc, #344]	@ (800119c <HAL_GPIO_Init+0x334>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d02b      	beq.n	800109e <HAL_GPIO_Init+0x236>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a55      	ldr	r2, [pc, #340]	@ (80011a0 <HAL_GPIO_Init+0x338>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d025      	beq.n	800109a <HAL_GPIO_Init+0x232>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a54      	ldr	r2, [pc, #336]	@ (80011a4 <HAL_GPIO_Init+0x33c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d01f      	beq.n	8001096 <HAL_GPIO_Init+0x22e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a53      	ldr	r2, [pc, #332]	@ (80011a8 <HAL_GPIO_Init+0x340>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d019      	beq.n	8001092 <HAL_GPIO_Init+0x22a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a52      	ldr	r2, [pc, #328]	@ (80011ac <HAL_GPIO_Init+0x344>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0x226>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a51      	ldr	r2, [pc, #324]	@ (80011b0 <HAL_GPIO_Init+0x348>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d00d      	beq.n	800108a <HAL_GPIO_Init+0x222>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a50      	ldr	r2, [pc, #320]	@ (80011b4 <HAL_GPIO_Init+0x34c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d007      	beq.n	8001086 <HAL_GPIO_Init+0x21e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a4f      	ldr	r2, [pc, #316]	@ (80011b8 <HAL_GPIO_Init+0x350>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_GPIO_Init+0x21a>
 800107e:	2309      	movs	r3, #9
 8001080:	e012      	b.n	80010a8 <HAL_GPIO_Init+0x240>
 8001082:	230a      	movs	r3, #10
 8001084:	e010      	b.n	80010a8 <HAL_GPIO_Init+0x240>
 8001086:	2308      	movs	r3, #8
 8001088:	e00e      	b.n	80010a8 <HAL_GPIO_Init+0x240>
 800108a:	2307      	movs	r3, #7
 800108c:	e00c      	b.n	80010a8 <HAL_GPIO_Init+0x240>
 800108e:	2306      	movs	r3, #6
 8001090:	e00a      	b.n	80010a8 <HAL_GPIO_Init+0x240>
 8001092:	2305      	movs	r3, #5
 8001094:	e008      	b.n	80010a8 <HAL_GPIO_Init+0x240>
 8001096:	2304      	movs	r3, #4
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x240>
 800109a:	2303      	movs	r3, #3
 800109c:	e004      	b.n	80010a8 <HAL_GPIO_Init+0x240>
 800109e:	2302      	movs	r3, #2
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_Init+0x240>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x240>
 80010a6:	2300      	movs	r3, #0
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	f002 0203 	and.w	r2, r2, #3
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	4093      	lsls	r3, r2
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010b8:	4935      	ldr	r1, [pc, #212]	@ (8001190 <HAL_GPIO_Init+0x328>)
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c6:	4b3d      	ldr	r3, [pc, #244]	@ (80011bc <HAL_GPIO_Init+0x354>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ea:	4a34      	ldr	r2, [pc, #208]	@ (80011bc <HAL_GPIO_Init+0x354>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f0:	4b32      	ldr	r3, [pc, #200]	@ (80011bc <HAL_GPIO_Init+0x354>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001114:	4a29      	ldr	r2, [pc, #164]	@ (80011bc <HAL_GPIO_Init+0x354>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800111a:	4b28      	ldr	r3, [pc, #160]	@ (80011bc <HAL_GPIO_Init+0x354>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113e:	4a1f      	ldr	r2, [pc, #124]	@ (80011bc <HAL_GPIO_Init+0x354>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001144:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <HAL_GPIO_Init+0x354>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <HAL_GPIO_Init+0x354>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3301      	adds	r3, #1
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	2b0f      	cmp	r3, #15
 8001178:	f67f ae86 	bls.w	8000e88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3724      	adds	r7, #36	@ 0x24
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40013800 	.word	0x40013800
 8001194:	40020000 	.word	0x40020000
 8001198:	40020400 	.word	0x40020400
 800119c:	40020800 	.word	0x40020800
 80011a0:	40020c00 	.word	0x40020c00
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40021400 	.word	0x40021400
 80011ac:	40021800 	.word	0x40021800
 80011b0:	40021c00 	.word	0x40021c00
 80011b4:	40022000 	.word	0x40022000
 80011b8:	40022400 	.word	0x40022400
 80011bc:	40013c00 	.word	0x40013c00

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d6:	887a      	ldrh	r2, [r7, #2]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011dc:	e003      	b.n	80011e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011de:	887b      	ldrh	r3, [r7, #2]
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	619a      	str	r2, [r3, #24]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af02      	add	r7, sp, #8
 80011f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d101      	bne.n	8001204 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e108      	b.n	8001416 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d106      	bne.n	8001224 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f006 fc8e 	bl	8007b40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2203      	movs	r2, #3
 8001228:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001232:	d102      	bne.n	800123a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f003 f84b 	bl	80042da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7c1a      	ldrb	r2, [r3, #16]
 800124c:	f88d 2000 	strb.w	r2, [sp]
 8001250:	3304      	adds	r3, #4
 8001252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001254:	f002 ff34 	bl	80040c0 <USB_CoreInit>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d005      	beq.n	800126a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2202      	movs	r2, #2
 8001262:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0d5      	b.n	8001416 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f003 f843 	bl	80042fc <USB_SetCurrentMode>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2202      	movs	r2, #2
 8001280:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e0c6      	b.n	8001416 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e04a      	b.n	8001324 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4413      	add	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	3315      	adds	r3, #21
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4413      	add	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	3314      	adds	r3, #20
 80012b2:	7bfa      	ldrb	r2, [r7, #15]
 80012b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	b298      	uxth	r0, r3
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	440b      	add	r3, r1
 80012c8:	332e      	adds	r3, #46	@ 0x2e
 80012ca:	4602      	mov	r2, r0
 80012cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	3318      	adds	r3, #24
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	440b      	add	r3, r1
 80012f0:	331c      	adds	r3, #28
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	3320      	adds	r3, #32
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800130a:	7bfa      	ldrb	r2, [r7, #15]
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	3324      	adds	r3, #36	@ 0x24
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	3301      	adds	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	791b      	ldrb	r3, [r3, #4]
 8001328:	7bfa      	ldrb	r2, [r7, #15]
 800132a:	429a      	cmp	r2, r3
 800132c:	d3af      	bcc.n	800128e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e044      	b.n	80013be <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4413      	add	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	440b      	add	r3, r1
 8001358:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800135c:	7bfa      	ldrb	r2, [r7, #15]
 800135e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4413      	add	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001376:	7bfa      	ldrb	r2, [r7, #15]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4413      	add	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3301      	adds	r3, #1
 80013bc:	73fb      	strb	r3, [r7, #15]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	791b      	ldrb	r3, [r3, #4]
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d3b5      	bcc.n	8001334 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7c1a      	ldrb	r2, [r3, #16]
 80013d0:	f88d 2000 	strb.w	r2, [sp]
 80013d4:	3304      	adds	r3, #4
 80013d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d8:	f002 ffdc 	bl	8004394 <USB_DevInit>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2202      	movs	r2, #2
 80013e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e013      	b.n	8001416 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7b1b      	ldrb	r3, [r3, #12]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d102      	bne.n	800140a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f001 f959 	bl	80026bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f004 f81b 	bl	800544a <USB_DevDisconnect>

  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_PCD_Start+0x16>
 8001430:	2302      	movs	r3, #2
 8001432:	e012      	b.n	800145a <HAL_PCD_Start+0x3c>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f002 ff39 	bl	80042b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f003 ffdc 	bl	8005408 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001462:	b590      	push	{r4, r7, lr}
 8001464:	b08d      	sub	sp, #52	@ 0x34
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f004 f89a 	bl	80055b2 <USB_GetMode>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	f040 84b9 	bne.w	8001df8 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f003 fffe 	bl	800548c <USB_ReadInterrupts>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 84af 	beq.w	8001df6 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	0a1b      	lsrs	r3, r3, #8
 80014a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 ffeb 	bl	800548c <USB_ReadInterrupts>
 80014b6:	4603      	mov	r3, r0
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d107      	bne.n	80014d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f002 0202 	and.w	r2, r2, #2
 80014ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 ffd9 	bl	800548c <USB_ReadInterrupts>
 80014da:	4603      	mov	r3, r0
 80014dc:	f003 0310 	and.w	r3, r3, #16
 80014e0:	2b10      	cmp	r3, #16
 80014e2:	d161      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0210 	bic.w	r2, r2, #16
 80014f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	f003 020f 	and.w	r2, r3, #15
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	3304      	adds	r3, #4
 8001512:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	0c5b      	lsrs	r3, r3, #17
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	2b02      	cmp	r3, #2
 800151e:	d124      	bne.n	800156a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d035      	beq.n	8001598 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800153a:	b29b      	uxth	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	6a38      	ldr	r0, [r7, #32]
 8001540:	f003 fe10 	bl	8005164 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001550:	441a      	add	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	695a      	ldr	r2, [r3, #20]
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001562:	441a      	add	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	e016      	b.n	8001598 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	0c5b      	lsrs	r3, r3, #17
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	2b06      	cmp	r3, #6
 8001574:	d110      	bne.n	8001598 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800157c:	2208      	movs	r2, #8
 800157e:	4619      	mov	r1, r3
 8001580:	6a38      	ldr	r0, [r7, #32]
 8001582:	f003 fdef 	bl	8005164 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001592:	441a      	add	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699a      	ldr	r2, [r3, #24]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0210 	orr.w	r2, r2, #16
 80015a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 ff6d 	bl	800548c <USB_ReadInterrupts>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80015bc:	f040 80a7 	bne.w	800170e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 ff72 	bl	80054b2 <USB_ReadDevAllOutEpInterrupt>
 80015ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80015d0:	e099      	b.n	8001706 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80015d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 808e 	beq.w	80016fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 ff96 	bl	800551a <USB_ReadDevOutEPInterrupt>
 80015ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00c      	beq.n	8001614 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	015a      	lsls	r2, r3, #5
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	4413      	add	r3, r2
 8001602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001606:	461a      	mov	r2, r3
 8001608:	2301      	movs	r3, #1
 800160a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800160c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fece 	bl	80023b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00c      	beq.n	8001638 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	015a      	lsls	r2, r3, #5
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	4413      	add	r3, r2
 8001626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800162a:	461a      	mov	r2, r3
 800162c:	2308      	movs	r3, #8
 800162e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001630:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 ffa4 	bl	8002580 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d008      	beq.n	8001654 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	015a      	lsls	r2, r3, #5
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	4413      	add	r3, r2
 800164a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800164e:	461a      	mov	r2, r3
 8001650:	2310      	movs	r3, #16
 8001652:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d030      	beq.n	80016c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001666:	2b80      	cmp	r3, #128	@ 0x80
 8001668:	d109      	bne.n	800167e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001678:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800167c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800167e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001680:	4613      	mov	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4413      	add	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	3304      	adds	r3, #4
 8001692:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	78db      	ldrb	r3, [r3, #3]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d108      	bne.n	80016ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2200      	movs	r2, #0
 80016a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4619      	mov	r1, r3
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f006 fb7d 	bl	8007da8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016ba:	461a      	mov	r2, r3
 80016bc:	2302      	movs	r3, #2
 80016be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d008      	beq.n	80016dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	015a      	lsls	r2, r3, #5
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016d6:	461a      	mov	r2, r3
 80016d8:	2320      	movs	r3, #32
 80016da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	015a      	lsls	r2, r3, #5
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016f2:	461a      	mov	r2, r3
 80016f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001702:	085b      	lsrs	r3, r3, #1
 8001704:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001708:	2b00      	cmp	r3, #0
 800170a:	f47f af62 	bne.w	80015d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f003 feba 	bl	800548c <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800171e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001722:	f040 80db 	bne.w	80018dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f003 fedb 	bl	80054e6 <USB_ReadDevAllInEpInterrupt>
 8001730:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001736:	e0cd      	b.n	80018d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80c2 	beq.w	80018c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	4611      	mov	r1, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f003 ff01 	bl	8005556 <USB_ReadDevInEPInterrupt>
 8001754:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d057      	beq.n	8001810 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	2201      	movs	r2, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	43db      	mvns	r3, r3
 800177a:	69f9      	ldr	r1, [r7, #28]
 800177c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001780:	4013      	ands	r3, r2
 8001782:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001790:	461a      	mov	r2, r3
 8001792:	2301      	movs	r3, #1
 8001794:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	799b      	ldrb	r3, [r3, #6]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d132      	bne.n	8001804 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a2:	4613      	mov	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	4413      	add	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	3320      	adds	r3, #32
 80017ae:	6819      	ldr	r1, [r3, #0]
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b4:	4613      	mov	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4413      	add	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4403      	add	r3, r0
 80017be:	331c      	adds	r3, #28
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4419      	add	r1, r3
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017c8:	4613      	mov	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4403      	add	r3, r0
 80017d2:	3320      	adds	r3, #32
 80017d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d113      	bne.n	8001804 <HAL_PCD_IRQHandler+0x3a2>
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e0:	4613      	mov	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	3324      	adds	r3, #36	@ 0x24
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80017fc:	461a      	mov	r2, r3
 80017fe:	2101      	movs	r1, #1
 8001800:	f003 ff0a 	bl	8005618 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4619      	mov	r1, r3
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f006 fa47 	bl	8007c9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	015a      	lsls	r2, r3, #5
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4413      	add	r3, r2
 8001822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001826:	461a      	mov	r2, r3
 8001828:	2308      	movs	r3, #8
 800182a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b00      	cmp	r3, #0
 8001834:	d008      	beq.n	8001848 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	015a      	lsls	r2, r3, #5
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001842:	461a      	mov	r2, r3
 8001844:	2310      	movs	r3, #16
 8001846:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	d008      	beq.n	8001864 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	4413      	add	r3, r2
 800185a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800185e:	461a      	mov	r2, r3
 8001860:	2340      	movs	r3, #64	@ 0x40
 8001862:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d023      	beq.n	80018b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800186e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001870:	6a38      	ldr	r0, [r7, #32]
 8001872:	f002 feed 	bl	8004650 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	3310      	adds	r3, #16
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	3304      	adds	r3, #4
 8001888:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	78db      	ldrb	r3, [r3, #3]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d108      	bne.n	80018a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2200      	movs	r2, #0
 8001896:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4619      	mov	r1, r3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f006 fa94 	bl	8007dcc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018b0:	461a      	mov	r2, r3
 80018b2:	2302      	movs	r3, #2
 80018b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fce8 	bl	8002298 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	3301      	adds	r3, #1
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80018ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80018d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f47f af2e 	bne.w	8001738 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 fdd3 	bl	800548c <USB_ReadInterrupts>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80018f0:	d122      	bne.n	8001938 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001918:	2100      	movs	r1, #0
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f006 fc0e 	bl	800813c <HAL_PCDEx_LPM_Callback>
 8001920:	e002      	b.n	8001928 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f006 fa32 	bl	8007d8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f003 fda5 	bl	800548c <USB_ReadInterrupts>
 8001942:	4603      	mov	r3, r0
 8001944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800194c:	d112      	bne.n	8001974 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b01      	cmp	r3, #1
 800195c:	d102      	bne.n	8001964 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f006 f9ee 	bl	8007d40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	695a      	ldr	r2, [r3, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001972:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f003 fd87 	bl	800548c <USB_ReadInterrupts>
 800197e:	4603      	mov	r3, r0
 8001980:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001984:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001988:	d121      	bne.n	80019ce <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8001998:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d111      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019b2:	089b      	lsrs	r3, r3, #2
 80019b4:	f003 020f 	and.w	r2, r3, #15
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80019be:	2101      	movs	r1, #1
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f006 fbbb 	bl	800813c <HAL_PCDEx_LPM_Callback>
 80019c6:	e002      	b.n	80019ce <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f006 f9b9 	bl	8007d40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f003 fd5a 	bl	800548c <USB_ReadInterrupts>
 80019d8:	4603      	mov	r3, r0
 80019da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019e2:	f040 80b7 	bne.w	8001b54 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2110      	movs	r1, #16
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 fe25 	bl	8004650 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a0a:	e046      	b.n	8001a9a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a0e:	015a      	lsls	r2, r3, #5
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001a1e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a22:	015a      	lsls	r2, r3, #5
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	4413      	add	r3, r2
 8001a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a30:	0151      	lsls	r1, r2, #5
 8001a32:	69fa      	ldr	r2, [r7, #28]
 8001a34:	440a      	add	r2, r1
 8001a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001a3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a42:	015a      	lsls	r2, r3, #5
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	4413      	add	r3, r2
 8001a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001a52:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a56:	015a      	lsls	r2, r3, #5
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a64:	0151      	lsls	r1, r2, #5
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	440a      	add	r2, r1
 8001a6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001a6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a76:	015a      	lsls	r2, r3, #5
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a84:	0151      	lsls	r1, r2, #5
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	440a      	add	r2, r1
 8001a8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001a8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001a92:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a96:	3301      	adds	r3, #1
 8001a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	791b      	ldrb	r3, [r3, #4]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d3b2      	bcc.n	8001a0c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ab4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001ab8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7bdb      	ldrb	r3, [r3, #15]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d016      	beq.n	8001af0 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ad2:	f043 030b 	orr.w	r3, r3, #11
 8001ad6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ae8:	f043 030b 	orr.w	r3, r3, #11
 8001aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aee:	e015      	b.n	8001b1c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001afe:	4619      	mov	r1, r3
 8001b00:	f242 032b 	movw	r3, #8235	@ 0x202b
 8001b04:	4313      	orrs	r3, r2
 8001b06:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b16:	f043 030b 	orr.w	r3, r3, #11
 8001b1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001b2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f003 fd6a 	bl	8005618 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fc97 	bl	800548c <USB_ReadInterrupts>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b68:	d123      	bne.n	8001bb2 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fd2e 	bl	80055d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f002 fde2 	bl	8004742 <USB_GetDevSpeed>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681c      	ldr	r4, [r3, #0]
 8001b8a:	f001 fa51 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8001b8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b94:	461a      	mov	r2, r3
 8001b96:	4620      	mov	r0, r4
 8001b98:	f002 faec 	bl	8004174 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f006 f8a6 	bl	8007cee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	695a      	ldr	r2, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001bb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f003 fc68 	bl	800548c <USB_ReadInterrupts>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d10a      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f006 f883 	bl	8007cd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695a      	ldr	r2, [r3, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f002 0208 	and.w	r2, r2, #8
 8001bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 fc53 	bl	800548c <USB_ReadInterrupts>
 8001be6:	4603      	mov	r3, r0
 8001be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bec:	2b80      	cmp	r3, #128	@ 0x80
 8001bee:	d123      	bne.n	8001c38 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c00:	e014      	b.n	8001c2c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d105      	bne.n	8001c26 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4619      	mov	r1, r3
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fb08 	bl	8002236 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	3301      	adds	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	791b      	ldrb	r3, [r3, #4]
 8001c30:	461a      	mov	r2, r3
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d3e4      	bcc.n	8001c02 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 fc25 	bl	800548c <USB_ReadInterrupts>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c4c:	d13c      	bne.n	8001cc8 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c4e:	2301      	movs	r3, #1
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c52:	e02b      	b.n	8001cac <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	3318      	adds	r3, #24
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d115      	bne.n	8001ca6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001c7a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	da12      	bge.n	8001ca6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3317      	adds	r3, #23
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 fac8 	bl	8002236 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	3301      	adds	r3, #1
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	791b      	ldrb	r3, [r3, #4]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d3cd      	bcc.n	8001c54 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001cc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fbdd 	bl	800548c <USB_ReadInterrupts>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cd8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001cdc:	d156      	bne.n	8001d8c <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cde:	2301      	movs	r3, #1
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce2:	e045      	b.n	8001d70 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	015a      	lsls	r2, r3, #5
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d12e      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da2b      	bge.n	8001d6a <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001d1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d121      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10a      	bne.n	8001d6a <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d66:	6053      	str	r3, [r2, #4]
            break;
 8001d68:	e008      	b.n	8001d7c <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	791b      	ldrb	r3, [r3, #4]
 8001d74:	461a      	mov	r2, r3
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d3b3      	bcc.n	8001ce4 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fb7b 	bl	800548c <USB_ReadInterrupts>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da0:	d10a      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f006 f824 	bl	8007df0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fb65 	bl	800548c <USB_ReadInterrupts>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d115      	bne.n	8001df8 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f006 f814 	bl	8007e0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	e000      	b.n	8001df8 <HAL_PCD_IRQHandler+0x996>
      return;
 8001df6:	bf00      	nop
    }
  }
}
 8001df8:	3734      	adds	r7, #52	@ 0x34
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}

08001dfe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_PCD_SetAddress+0x1a>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e012      	b.n	8001e3e <HAL_PCD_SetAddress+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fac4 	bl	80053bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b084      	sub	sp, #16
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	4608      	mov	r0, r1
 8001e50:	4611      	mov	r1, r2
 8001e52:	461a      	mov	r2, r3
 8001e54:	4603      	mov	r3, r0
 8001e56:	70fb      	strb	r3, [r7, #3]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	803b      	strh	r3, [r7, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	da0f      	bge.n	8001e8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	3310      	adds	r3, #16
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	705a      	strb	r2, [r3, #1]
 8001e8a:	e00f      	b.n	8001eac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	f003 020f 	and.w	r2, r3, #15
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001eb8:	883a      	ldrh	r2, [r7, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	78ba      	ldrb	r2, [r7, #2]
 8001ec2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	785b      	ldrb	r3, [r3, #1]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d004      	beq.n	8001ed6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ed6:	78bb      	ldrb	r3, [r7, #2]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d102      	bne.n	8001ee2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_PCD_EP_Open+0xaa>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e00e      	b.n	8001f0e <HAL_PCD_EP_Open+0xc8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68f9      	ldr	r1, [r7, #12]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f002 fc44 	bl	800478c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001f0c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b084      	sub	sp, #16
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	da0f      	bge.n	8001f4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f2a:	78fb      	ldrb	r3, [r7, #3]
 8001f2c:	f003 020f 	and.w	r2, r3, #15
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	3310      	adds	r3, #16
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3304      	adds	r3, #4
 8001f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	705a      	strb	r2, [r3, #1]
 8001f48:	e00f      	b.n	8001f6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	f003 020f 	and.w	r2, r3, #15
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	3304      	adds	r3, #4
 8001f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_PCD_EP_Close+0x6e>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e00e      	b.n	8001fa2 <HAL_PCD_EP_Close+0x8c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68f9      	ldr	r1, [r7, #12]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 fc82 	bl	800489c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fba:	7afb      	ldrb	r3, [r7, #11]
 8001fbc:	f003 020f 	and.w	r2, r3, #15
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4413      	add	r3, r2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fec:	7afb      	ldrb	r3, [r7, #11]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	799b      	ldrb	r3, [r3, #6]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d102      	bne.n	8002006 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	799b      	ldrb	r3, [r3, #6]
 800200e:	461a      	mov	r2, r3
 8002010:	6979      	ldr	r1, [r7, #20]
 8002012:	f002 fd1f 	bl	8004a54 <USB_EPStartXfer>

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	f003 020f 	and.w	r2, r3, #15
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	607a      	str	r2, [r7, #4]
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	460b      	mov	r3, r1
 800205e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002060:	7afb      	ldrb	r3, [r7, #11]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3310      	adds	r3, #16
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	3304      	adds	r3, #4
 8002076:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2200      	movs	r2, #0
 8002088:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2201      	movs	r2, #1
 800208e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002090:	7afb      	ldrb	r3, [r7, #11]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	b2da      	uxtb	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	799b      	ldrb	r3, [r3, #6]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d102      	bne.n	80020aa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	799b      	ldrb	r3, [r3, #6]
 80020b2:	461a      	mov	r2, r3
 80020b4:	6979      	ldr	r1, [r7, #20]
 80020b6:	f002 fccd 	bl	8004a54 <USB_EPStartXfer>

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	7912      	ldrb	r2, [r2, #4]
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e04f      	b.n	8002182 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	da0f      	bge.n	800210a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 020f 	and.w	r2, r3, #15
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	3310      	adds	r3, #16
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	3304      	adds	r3, #4
 8002100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	705a      	strb	r2, [r3, #1]
 8002108:	e00d      	b.n	8002126 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800210a:	78fa      	ldrb	r2, [r7, #3]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	3304      	adds	r3, #4
 800211e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_PCD_EP_SetStall+0x82>
 8002142:	2302      	movs	r3, #2
 8002144:	e01d      	b.n	8002182 <HAL_PCD_EP_SetStall+0xbe>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	4618      	mov	r0, r3
 8002156:	f003 f85d 	bl	8005214 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7999      	ldrb	r1, [r3, #6]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002172:	461a      	mov	r2, r3
 8002174:	f003 fa50 	bl	8005618 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	460b      	mov	r3, r1
 8002194:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	7912      	ldrb	r2, [r2, #4]
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d901      	bls.n	80021a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e042      	b.n	800222e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	da0f      	bge.n	80021d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	f003 020f 	and.w	r2, r3, #15
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	3310      	adds	r3, #16
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	705a      	strb	r2, [r3, #1]
 80021ce:	e00f      	b.n	80021f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	f003 020f 	and.w	r2, r3, #15
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	3304      	adds	r3, #4
 80021e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002208:	2b01      	cmp	r3, #1
 800220a:	d101      	bne.n	8002210 <HAL_PCD_EP_ClrStall+0x86>
 800220c:	2302      	movs	r3, #2
 800220e:	e00e      	b.n	800222e <HAL_PCD_EP_ClrStall+0xa4>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68f9      	ldr	r1, [r7, #12]
 800221e:	4618      	mov	r0, r3
 8002220:	f003 f866 	bl	80052f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	460b      	mov	r3, r1
 8002240:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002246:	2b00      	cmp	r3, #0
 8002248:	da0c      	bge.n	8002264 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	f003 020f 	and.w	r2, r3, #15
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	3310      	adds	r3, #16
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	3304      	adds	r3, #4
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e00c      	b.n	800227e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	f003 020f 	and.w	r2, r3, #15
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	3304      	adds	r3, #4
 800227c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68f9      	ldr	r1, [r7, #12]
 8002284:	4618      	mov	r0, r3
 8002286:	f002 fe85 	bl	8004f94 <USB_EPStopXfer>
 800228a:	4603      	mov	r3, r0
 800228c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800228e:	7afb      	ldrb	r3, [r7, #11]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	@ 0x28
 800229c:	af02      	add	r7, sp, #8
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	3310      	adds	r3, #16
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d901      	bls.n	80022d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e06b      	b.n	80023a8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d902      	bls.n	80022ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	3303      	adds	r3, #3
 80022f0:	089b      	lsrs	r3, r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022f4:	e02a      	b.n	800234c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	429a      	cmp	r2, r3
 800230a:	d902      	bls.n	8002312 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3303      	adds	r3, #3
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	68d9      	ldr	r1, [r3, #12]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	4603      	mov	r3, r0
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f002 feda 	bl	80050e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	441a      	add	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	441a      	add	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	429a      	cmp	r2, r3
 8002360:	d809      	bhi.n	8002376 <PCD_WriteEmptyTxFifo+0xde>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800236a:	429a      	cmp	r2, r3
 800236c:	d203      	bcs.n	8002376 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1bf      	bne.n	80022f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	429a      	cmp	r2, r3
 8002380:	d811      	bhi.n	80023a6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	2201      	movs	r2, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002396:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	43db      	mvns	r3, r3
 800239c:	6939      	ldr	r1, [r7, #16]
 800239e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80023a2:	4013      	ands	r3, r2
 80023a4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	333c      	adds	r3, #60	@ 0x3c
 80023c8:	3304      	adds	r3, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	799b      	ldrb	r3, [r3, #6]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d17b      	bne.n	80024de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	4a61      	ldr	r2, [pc, #388]	@ (8002578 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	f240 80b9 	bls.w	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80b3 	beq.w	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	4413      	add	r3, r2
 800240e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002412:	461a      	mov	r2, r3
 8002414:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002418:	6093      	str	r3, [r2, #8]
 800241a:	e0a7      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4413      	add	r3, r2
 800242e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002432:	461a      	mov	r2, r3
 8002434:	2320      	movs	r3, #32
 8002436:	6093      	str	r3, [r2, #8]
 8002438:	e098      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002440:	2b00      	cmp	r3, #0
 8002442:	f040 8093 	bne.w	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4a4b      	ldr	r2, [pc, #300]	@ (8002578 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d90f      	bls.n	800246e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	4413      	add	r3, r2
 8002460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002464:	461a      	mov	r2, r3
 8002466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800246a:	6093      	str	r3, [r2, #8]
 800246c:	e07e      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a1a      	ldr	r2, [r3, #32]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	0159      	lsls	r1, r3, #5
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	440b      	add	r3, r1
 8002490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249a:	1ad2      	subs	r2, r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d114      	bne.n	80024d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024b8:	461a      	mov	r2, r3
 80024ba:	2101      	movs	r1, #1
 80024bc:	f003 f8ac 	bl	8005618 <USB_EP0_OutStart>
 80024c0:	e006      	b.n	80024d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	441a      	add	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	4619      	mov	r1, r3
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f005 fbc6 	bl	8007c68 <HAL_PCD_DataOutStageCallback>
 80024dc:	e046      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	4a26      	ldr	r2, [pc, #152]	@ (800257c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d124      	bne.n	8002530 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024fc:	461a      	mov	r2, r3
 80024fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002502:	6093      	str	r3, [r2, #8]
 8002504:	e032      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800251c:	461a      	mov	r2, r3
 800251e:	2320      	movs	r3, #32
 8002520:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f005 fb9d 	bl	8007c68 <HAL_PCD_DataOutStageCallback>
 800252e:	e01d      	b.n	800256c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d114      	bne.n	8002560 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d108      	bne.n	8002560 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002558:	461a      	mov	r2, r3
 800255a:	2100      	movs	r1, #0
 800255c:	f003 f85c 	bl	8005618 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f005 fb7e 	bl	8007c68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3720      	adds	r7, #32
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	4f54300a 	.word	0x4f54300a
 800257c:	4f54310a 	.word	0x4f54310a

08002580 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	333c      	adds	r3, #60	@ 0x3c
 8002598:	3304      	adds	r3, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4a15      	ldr	r2, [pc, #84]	@ (8002608 <PCD_EP_OutSetupPacket_int+0x88>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d90e      	bls.n	80025d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d009      	beq.n	80025d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025cc:	461a      	mov	r2, r3
 80025ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f005 fb35 	bl	8007c44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <PCD_EP_OutSetupPacket_int+0x88>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d90c      	bls.n	80025fc <PCD_EP_OutSetupPacket_int+0x7c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	799b      	ldrb	r3, [r3, #6]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d108      	bne.n	80025fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80025f4:	461a      	mov	r2, r3
 80025f6:	2101      	movs	r1, #1
 80025f8:	f003 f80e 	bl	8005618 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	4f54300a 	.word	0x4f54300a

0800260c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	70fb      	strb	r3, [r7, #3]
 8002618:	4613      	mov	r3, r2
 800261a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d107      	bne.n	800263a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800262a:	883b      	ldrh	r3, [r7, #0]
 800262c:	0419      	lsls	r1, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	430a      	orrs	r2, r1
 8002636:	629a      	str	r2, [r3, #40]	@ 0x28
 8002638:	e028      	b.n	800268c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002640:	0c1b      	lsrs	r3, r3, #16
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	4413      	add	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e00d      	b.n	800266a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	3340      	adds	r3, #64	@ 0x40
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4413      	add	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	3301      	adds	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	78fb      	ldrb	r3, [r7, #3]
 800266e:	3b01      	subs	r3, #1
 8002670:	429a      	cmp	r2, r3
 8002672:	d3ec      	bcc.n	800264e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002674:	883b      	ldrh	r3, [r7, #0]
 8002676:	0418      	lsls	r0, r3, #16
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	3b01      	subs	r3, #1
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	4302      	orrs	r2, r0
 8002684:	3340      	adds	r3, #64	@ 0x40
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026ea:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <HAL_PCDEx_ActivateLPM+0x44>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	10000003 	.word	0x10000003

08002704 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800270c:	2300      	movs	r3, #0
 800270e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e291      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8087 	beq.w	8002836 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002728:	4b96      	ldr	r3, [pc, #600]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b04      	cmp	r3, #4
 8002732:	d00c      	beq.n	800274e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002734:	4b93      	ldr	r3, [pc, #588]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d112      	bne.n	8002766 <HAL_RCC_OscConfig+0x62>
 8002740:	4b90      	ldr	r3, [pc, #576]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002748:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800274c:	d10b      	bne.n	8002766 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274e:	4b8d      	ldr	r3, [pc, #564]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d06c      	beq.n	8002834 <HAL_RCC_OscConfig+0x130>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d168      	bne.n	8002834 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e26b      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x7a>
 8002770:	4b84      	ldr	r3, [pc, #528]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a83      	ldr	r2, [pc, #524]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	e02e      	b.n	80027dc <HAL_RCC_OscConfig+0xd8>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x9c>
 8002786:	4b7f      	ldr	r3, [pc, #508]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7e      	ldr	r2, [pc, #504]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 800278c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b7c      	ldr	r3, [pc, #496]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7b      	ldr	r2, [pc, #492]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002798:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e01d      	b.n	80027dc <HAL_RCC_OscConfig+0xd8>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0xc0>
 80027aa:	4b76      	ldr	r3, [pc, #472]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a75      	ldr	r2, [pc, #468]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b73      	ldr	r3, [pc, #460]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a72      	ldr	r2, [pc, #456]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0xd8>
 80027c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a6e      	ldr	r2, [pc, #440]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a6b      	ldr	r2, [pc, #428]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe f9fe 	bl	8000be4 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe f9fa 	bl	8000be4 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	@ 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e21f      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b61      	ldr	r3, [pc, #388]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0xe8>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe f9ea 	bl	8000be4 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002814:	f7fe f9e6 	bl	8000be4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	@ 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e20b      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	4b57      	ldr	r3, [pc, #348]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x110>
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d069      	beq.n	8002916 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002842:	4b50      	ldr	r3, [pc, #320]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00b      	beq.n	8002866 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284e:	4b4d      	ldr	r3, [pc, #308]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b08      	cmp	r3, #8
 8002858:	d11c      	bne.n	8002894 <HAL_RCC_OscConfig+0x190>
 800285a:	4b4a      	ldr	r3, [pc, #296]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d116      	bne.n	8002894 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002866:	4b47      	ldr	r3, [pc, #284]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_RCC_OscConfig+0x17a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e1df      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	4b41      	ldr	r3, [pc, #260]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	493d      	ldr	r1, [pc, #244]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002892:	e040      	b.n	8002916 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d023      	beq.n	80028e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289c:	4b39      	ldr	r3, [pc, #228]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a38      	ldr	r2, [pc, #224]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7fe f99c 	bl	8000be4 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b0:	f7fe f998 	bl	8000be4 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e1bd      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c2:	4b30      	ldr	r3, [pc, #192]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4929      	ldr	r1, [pc, #164]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]
 80028e2:	e018      	b.n	8002916 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e4:	4b27      	ldr	r3, [pc, #156]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a26      	ldr	r2, [pc, #152]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 80028ea:	f023 0301 	bic.w	r3, r3, #1
 80028ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe f978 	bl	8000be4 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f8:	f7fe f974 	bl	8000be4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e199      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800290a:	4b1e      	ldr	r3, [pc, #120]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d038      	beq.n	8002994 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d019      	beq.n	800295e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292a:	4b16      	ldr	r3, [pc, #88]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 800292c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292e:	4a15      	ldr	r2, [pc, #84]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002936:	f7fe f955 	bl	8000be4 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293e:	f7fe f951 	bl	8000be4 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e176      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002950:	4b0c      	ldr	r3, [pc, #48]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x23a>
 800295c:	e01a      	b.n	8002994 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002962:	4a08      	ldr	r2, [pc, #32]	@ (8002984 <HAL_RCC_OscConfig+0x280>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296a:	f7fe f93b 	bl	8000be4 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	e00a      	b.n	8002988 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002972:	f7fe f937 	bl	8000be4 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d903      	bls.n	8002988 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e15c      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
 8002984:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002988:	4b91      	ldr	r3, [pc, #580]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 800298a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ee      	bne.n	8002972 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80a4 	beq.w	8002aea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a2:	4b8b      	ldr	r3, [pc, #556]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	4b88      	ldr	r3, [pc, #544]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	4a87      	ldr	r2, [pc, #540]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ba:	4b85      	ldr	r3, [pc, #532]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ca:	4b82      	ldr	r3, [pc, #520]	@ (8002bd4 <HAL_RCC_OscConfig+0x4d0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d118      	bne.n	8002a08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029d6:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd4 <HAL_RCC_OscConfig+0x4d0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7e      	ldr	r2, [pc, #504]	@ (8002bd4 <HAL_RCC_OscConfig+0x4d0>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7fe f8ff 	bl	8000be4 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ea:	f7fe f8fb 	bl	8000be4 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b64      	cmp	r3, #100	@ 0x64
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e120      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029fc:	4b75      	ldr	r3, [pc, #468]	@ (8002bd4 <HAL_RCC_OscConfig+0x4d0>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x31a>
 8002a10:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a14:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1c:	e02d      	b.n	8002a7a <HAL_RCC_OscConfig+0x376>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x33c>
 8002a26:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2a:	4a69      	ldr	r2, [pc, #420]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a32:	4b67      	ldr	r3, [pc, #412]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	4a66      	ldr	r2, [pc, #408]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a38:	f023 0304 	bic.w	r3, r3, #4
 8002a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3e:	e01c      	b.n	8002a7a <HAL_RCC_OscConfig+0x376>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCC_OscConfig+0x35e>
 8002a48:	4b61      	ldr	r3, [pc, #388]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4c:	4a60      	ldr	r2, [pc, #384]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a4e:	f043 0304 	orr.w	r3, r3, #4
 8002a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a54:	4b5e      	ldr	r3, [pc, #376]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a58:	4a5d      	ldr	r2, [pc, #372]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a60:	e00b      	b.n	8002a7a <HAL_RCC_OscConfig+0x376>
 8002a62:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	4a5a      	ldr	r2, [pc, #360]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6e:	4b58      	ldr	r3, [pc, #352]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	4a57      	ldr	r2, [pc, #348]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002a74:	f023 0304 	bic.w	r3, r3, #4
 8002a78:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d015      	beq.n	8002aae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a82:	f7fe f8af 	bl	8000be4 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe f8ab 	bl	8000be4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0ce      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ee      	beq.n	8002a8a <HAL_RCC_OscConfig+0x386>
 8002aac:	e014      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aae:	f7fe f899 	bl	8000be4 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fe f895 	bl	8000be4 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e0b8      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002acc:	4b40      	ldr	r3, [pc, #256]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ee      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d105      	bne.n	8002aea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ade:	4b3c      	ldr	r3, [pc, #240]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 80a4 	beq.w	8002c3c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af4:	4b36      	ldr	r3, [pc, #216]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d06b      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d149      	bne.n	8002b9c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b08:	4b31      	ldr	r3, [pc, #196]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a30      	ldr	r2, [pc, #192]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe f866 	bl	8000be4 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe f862 	bl	8000be4 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e087      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	4b28      	ldr	r3, [pc, #160]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69da      	ldr	r2, [r3, #28]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	019b      	lsls	r3, r3, #6
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	3b01      	subs	r3, #1
 8002b54:	041b      	lsls	r3, r3, #16
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	4a1b      	ldr	r2, [pc, #108]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b62:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b66:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b68:	4b19      	ldr	r3, [pc, #100]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a18      	ldr	r2, [pc, #96]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe f836 	bl	8000be4 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe f832 	bl	8000be4 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e057      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x478>
 8002b9a:	e04f      	b.n	8002c3c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002ba2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe f81c 	bl	8000be4 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe f818 	bl	8000be4 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e03d      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc2:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <HAL_RCC_OscConfig+0x4cc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4ac>
 8002bce:	e035      	b.n	8002c3c <HAL_RCC_OscConfig+0x538>
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <HAL_RCC_OscConfig+0x544>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d028      	beq.n	8002c38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d121      	bne.n	8002c38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d11a      	bne.n	8002c38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c08:	4013      	ands	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d111      	bne.n	8002c38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	3b01      	subs	r3, #1
 8002c22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800

08002c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0d0      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c64:	4b6a      	ldr	r3, [pc, #424]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d910      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b67      	ldr	r3, [pc, #412]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 020f 	bic.w	r2, r3, #15
 8002c7a:	4965      	ldr	r1, [pc, #404]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c82:	4b63      	ldr	r3, [pc, #396]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0b8      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cac:	4b59      	ldr	r3, [pc, #356]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a58      	ldr	r2, [pc, #352]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc4:	4b53      	ldr	r3, [pc, #332]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4a52      	ldr	r2, [pc, #328]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4b50      	ldr	r3, [pc, #320]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	494d      	ldr	r1, [pc, #308]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d040      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	4b47      	ldr	r3, [pc, #284]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d115      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e07f      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d0e:	4b41      	ldr	r3, [pc, #260]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e073      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e06b      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d2e:	4b39      	ldr	r3, [pc, #228]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f023 0203 	bic.w	r2, r3, #3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4936      	ldr	r1, [pc, #216]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d40:	f7fd ff50 	bl	8000be4 <HAL_GetTick>
 8002d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d48:	f7fd ff4c 	bl	8000be4 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e053      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 020c 	and.w	r2, r3, #12
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1eb      	bne.n	8002d48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d70:	4b27      	ldr	r3, [pc, #156]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d210      	bcs.n	8002da0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b24      	ldr	r3, [pc, #144]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 020f 	bic.w	r2, r3, #15
 8002d86:	4922      	ldr	r1, [pc, #136]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b20      	ldr	r3, [pc, #128]	@ (8002e10 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e032      	b.n	8002e06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dac:	4b19      	ldr	r3, [pc, #100]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4916      	ldr	r1, [pc, #88]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d009      	beq.n	8002dde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dca:	4b12      	ldr	r3, [pc, #72]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	490e      	ldr	r1, [pc, #56]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dde:	f000 f821 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_RCC_ClockConfig+0x1c8>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	490a      	ldr	r1, [pc, #40]	@ (8002e18 <HAL_RCC_ClockConfig+0x1cc>)
 8002df0:	5ccb      	ldrb	r3, [r1, r3]
 8002df2:	fa22 f303 	lsr.w	r3, r2, r3
 8002df6:	4a09      	ldr	r2, [pc, #36]	@ (8002e1c <HAL_RCC_ClockConfig+0x1d0>)
 8002df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dfa:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <HAL_RCC_ClockConfig+0x1d4>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd feac 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023c00 	.word	0x40023c00
 8002e14:	40023800 	.word	0x40023800
 8002e18:	08008534 	.word	0x08008534
 8002e1c:	20000000 	.word	0x20000000
 8002e20:	20000004 	.word	0x20000004

08002e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e28:	b094      	sub	sp, #80	@ 0x50
 8002e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e30:	2300      	movs	r3, #0
 8002e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e34:	2300      	movs	r3, #0
 8002e36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e3c:	4b79      	ldr	r3, [pc, #484]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d00d      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x40>
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	f200 80e1 	bhi.w	8003010 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_RCC_GetSysClockFreq+0x34>
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e56:	e0db      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e58:	4b73      	ldr	r3, [pc, #460]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e5c:	e0db      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e5e:	4b73      	ldr	r3, [pc, #460]	@ (800302c <HAL_RCC_GetSysClockFreq+0x208>)
 8002e60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e62:	e0d8      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e64:	4b6f      	ldr	r3, [pc, #444]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d063      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	2200      	movs	r2, #0
 8002e82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e8e:	2300      	movs	r3, #0
 8002e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e96:	4622      	mov	r2, r4
 8002e98:	462b      	mov	r3, r5
 8002e9a:	f04f 0000 	mov.w	r0, #0
 8002e9e:	f04f 0100 	mov.w	r1, #0
 8002ea2:	0159      	lsls	r1, r3, #5
 8002ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea8:	0150      	lsls	r0, r2, #5
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4621      	mov	r1, r4
 8002eb0:	1a51      	subs	r1, r2, r1
 8002eb2:	6139      	str	r1, [r7, #16]
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002eba:	617b      	str	r3, [r7, #20]
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	f04f 0300 	mov.w	r3, #0
 8002ec4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec8:	4659      	mov	r1, fp
 8002eca:	018b      	lsls	r3, r1, #6
 8002ecc:	4651      	mov	r1, sl
 8002ece:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	018a      	lsls	r2, r1, #6
 8002ed6:	4651      	mov	r1, sl
 8002ed8:	ebb2 0801 	subs.w	r8, r2, r1
 8002edc:	4659      	mov	r1, fp
 8002ede:	eb63 0901 	sbc.w	r9, r3, r1
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef6:	4690      	mov	r8, r2
 8002ef8:	4699      	mov	r9, r3
 8002efa:	4623      	mov	r3, r4
 8002efc:	eb18 0303 	adds.w	r3, r8, r3
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	462b      	mov	r3, r5
 8002f04:	eb49 0303 	adc.w	r3, r9, r3
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f16:	4629      	mov	r1, r5
 8002f18:	024b      	lsls	r3, r1, #9
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f20:	4621      	mov	r1, r4
 8002f22:	024a      	lsls	r2, r1, #9
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f34:	f7fd f968 	bl	8000208 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f40:	e058      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f42:	4b38      	ldr	r3, [pc, #224]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	099b      	lsrs	r3, r3, #6
 8002f48:	2200      	movs	r2, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f52:	623b      	str	r3, [r7, #32]
 8002f54:	2300      	movs	r3, #0
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	464b      	mov	r3, r9
 8002f60:	f04f 0000 	mov.w	r0, #0
 8002f64:	f04f 0100 	mov.w	r1, #0
 8002f68:	0159      	lsls	r1, r3, #5
 8002f6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6e:	0150      	lsls	r0, r2, #5
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4641      	mov	r1, r8
 8002f76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f94:	ebb2 040a 	subs.w	r4, r2, sl
 8002f98:	eb63 050b 	sbc.w	r5, r3, fp
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	00eb      	lsls	r3, r5, #3
 8002fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002faa:	00e2      	lsls	r2, r4, #3
 8002fac:	4614      	mov	r4, r2
 8002fae:	461d      	mov	r5, r3
 8002fb0:	4643      	mov	r3, r8
 8002fb2:	18e3      	adds	r3, r4, r3
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	eb45 0303 	adc.w	r3, r5, r3
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fca:	4629      	mov	r1, r5
 8002fcc:	028b      	lsls	r3, r1, #10
 8002fce:	4621      	mov	r1, r4
 8002fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	028a      	lsls	r2, r1, #10
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	61fa      	str	r2, [r7, #28]
 8002fe4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe8:	f7fd f90e 	bl	8000208 <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	3301      	adds	r3, #1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003004:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800300e:	e002      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003010:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x204>)
 8003012:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003018:	4618      	mov	r0, r3
 800301a:	3750      	adds	r7, #80	@ 0x50
 800301c:	46bd      	mov	sp, r7
 800301e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	00f42400 	.word	0x00f42400
 800302c:	007a1200 	.word	0x007a1200

08003030 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b03      	ldr	r3, [pc, #12]	@ (8003044 <HAL_RCC_GetHCLKFreq+0x14>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000000 	.word	0x20000000

08003048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d012      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003070:	4b69      	ldr	r3, [pc, #420]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a68      	ldr	r2, [pc, #416]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003076:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800307a:	6093      	str	r3, [r2, #8]
 800307c:	4b66      	ldr	r3, [pc, #408]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003084:	4964      	ldr	r1, [pc, #400]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003092:	2301      	movs	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d017      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030a2:	4b5d      	ldr	r3, [pc, #372]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b0:	4959      	ldr	r1, [pc, #356]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030c0:	d101      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80030c2:	2301      	movs	r3, #1
 80030c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80030ce:	2301      	movs	r3, #1
 80030d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d017      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030de:	4b4e      	ldr	r3, [pc, #312]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	494a      	ldr	r1, [pc, #296]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030fc:	d101      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030fe:	2301      	movs	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800310a:	2301      	movs	r3, #1
 800310c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800311a:	2301      	movs	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 808b 	beq.w	8003242 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	4b3a      	ldr	r3, [pc, #232]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	4a39      	ldr	r2, [pc, #228]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003136:	6413      	str	r3, [r2, #64]	@ 0x40
 8003138:	4b37      	ldr	r3, [pc, #220]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003140:	60bb      	str	r3, [r7, #8]
 8003142:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003144:	4b35      	ldr	r3, [pc, #212]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a34      	ldr	r2, [pc, #208]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800314a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800314e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003150:	f7fd fd48 	bl	8000be4 <HAL_GetTick>
 8003154:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003158:	f7fd fd44 	bl	8000be4 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	@ 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e357      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800316a:	4b2c      	ldr	r3, [pc, #176]	@ (800321c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003176:	4b28      	ldr	r3, [pc, #160]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d035      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	429a      	cmp	r2, r3
 8003192:	d02e      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003194:	4b20      	ldr	r3, [pc, #128]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800319c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800319e:	4b1e      	ldr	r3, [pc, #120]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031b4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80031b6:	4a18      	ldr	r2, [pc, #96]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031bc:	4b16      	ldr	r3, [pc, #88]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d114      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fd fd0c 	bl	8000be4 <HAL_GetTick>
 80031cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fd fd08 	bl	8000be4 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e319      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ee      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031fe:	d111      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800320c:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800320e:	400b      	ands	r3, r1
 8003210:	4901      	ldr	r1, [pc, #4]	@ (8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
 8003216:	e00b      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003218:	40023800 	.word	0x40023800
 800321c:	40007000 	.word	0x40007000
 8003220:	0ffffcff 	.word	0x0ffffcff
 8003224:	4baa      	ldr	r3, [pc, #680]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4aa9      	ldr	r2, [pc, #676]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800322a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800322e:	6093      	str	r3, [r2, #8]
 8003230:	4ba7      	ldr	r3, [pc, #668]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003232:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	49a4      	ldr	r1, [pc, #656]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800323e:	4313      	orrs	r3, r2
 8003240:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b00      	cmp	r3, #0
 800324c:	d010      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800324e:	4ba0      	ldr	r3, [pc, #640]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003254:	4a9e      	ldr	r2, [pc, #632]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800325a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800325e:	4b9c      	ldr	r3, [pc, #624]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003260:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003268:	4999      	ldr	r1, [pc, #612]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800327c:	4b94      	ldr	r3, [pc, #592]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003282:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800328a:	4991      	ldr	r1, [pc, #580]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800329e:	4b8c      	ldr	r3, [pc, #560]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ac:	4988      	ldr	r1, [pc, #544]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032c0:	4b83      	ldr	r3, [pc, #524]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ce:	4980      	ldr	r1, [pc, #512]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032e2:	4b7b      	ldr	r3, [pc, #492]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	4977      	ldr	r1, [pc, #476]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003304:	4b72      	ldr	r3, [pc, #456]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330a:	f023 0203 	bic.w	r2, r3, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	496f      	ldr	r1, [pc, #444]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003326:	4b6a      	ldr	r3, [pc, #424]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332c:	f023 020c 	bic.w	r2, r3, #12
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003334:	4966      	ldr	r1, [pc, #408]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003348:	4b61      	ldr	r3, [pc, #388]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003356:	495e      	ldr	r1, [pc, #376]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800336a:	4b59      	ldr	r3, [pc, #356]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003370:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003378:	4955      	ldr	r1, [pc, #340]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800338c:	4b50      	ldr	r3, [pc, #320]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339a:	494d      	ldr	r1, [pc, #308]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80033ae:	4b48      	ldr	r3, [pc, #288]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033bc:	4944      	ldr	r1, [pc, #272]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80033d0:	4b3f      	ldr	r3, [pc, #252]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033de:	493c      	ldr	r1, [pc, #240]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033f2:	4b37      	ldr	r3, [pc, #220]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003400:	4933      	ldr	r1, [pc, #204]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003414:	4b2e      	ldr	r3, [pc, #184]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003422:	492b      	ldr	r1, [pc, #172]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d011      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003436:	4b26      	ldr	r3, [pc, #152]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003444:	4922      	ldr	r1, [pc, #136]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003454:	d101      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003456:	2301      	movs	r3, #1
 8003458:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003466:	2301      	movs	r3, #1
 8003468:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003476:	4b16      	ldr	r3, [pc, #88]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003484:	4912      	ldr	r1, [pc, #72]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003498:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034a8:	4909      	ldr	r1, [pc, #36]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d006      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80d9 	beq.w	8003676 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034c4:	4b02      	ldr	r3, [pc, #8]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a01      	ldr	r2, [pc, #4]	@ (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80034ce:	e001      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80034d0:	40023800 	.word	0x40023800
 80034d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034d6:	f7fd fb85 	bl	8000be4 <HAL_GetTick>
 80034da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034dc:	e008      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034de:	f7fd fb81 	bl	8000be4 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b64      	cmp	r3, #100	@ 0x64
 80034ea:	d901      	bls.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e194      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034f0:	4b6c      	ldr	r3, [pc, #432]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f0      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d021      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350c:	2b00      	cmp	r3, #0
 800350e:	d11d      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003510:	4b64      	ldr	r3, [pc, #400]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003516:	0c1b      	lsrs	r3, r3, #16
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800351e:	4b61      	ldr	r3, [pc, #388]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003524:	0e1b      	lsrs	r3, r3, #24
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	019a      	lsls	r2, r3, #6
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	431a      	orrs	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	061b      	lsls	r3, r3, #24
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	071b      	lsls	r3, r3, #28
 8003544:	4957      	ldr	r1, [pc, #348]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003560:	d00a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02e      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003576:	d129      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003578:	4b4a      	ldr	r3, [pc, #296]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800357e:	0c1b      	lsrs	r3, r3, #16
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003586:	4b47      	ldr	r3, [pc, #284]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003588:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800358c:	0f1b      	lsrs	r3, r3, #28
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	019a      	lsls	r2, r3, #6
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	061b      	lsls	r3, r3, #24
 80035a6:	431a      	orrs	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	071b      	lsls	r3, r3, #28
 80035ac:	493d      	ldr	r1, [pc, #244]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035b4:	4b3b      	ldr	r3, [pc, #236]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035ba:	f023 021f 	bic.w	r2, r3, #31
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	3b01      	subs	r3, #1
 80035c4:	4937      	ldr	r1, [pc, #220]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01d      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035d8:	4b32      	ldr	r3, [pc, #200]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035de:	0e1b      	lsrs	r3, r3, #24
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035e6:	4b2f      	ldr	r3, [pc, #188]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ec:	0f1b      	lsrs	r3, r3, #28
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	019a      	lsls	r2, r3, #6
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	041b      	lsls	r3, r3, #16
 8003600:	431a      	orrs	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	061b      	lsls	r3, r3, #24
 8003606:	431a      	orrs	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	071b      	lsls	r3, r3, #28
 800360c:	4925      	ldr	r1, [pc, #148]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d011      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	019a      	lsls	r2, r3, #6
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	041b      	lsls	r3, r3, #16
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	061b      	lsls	r3, r3, #24
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	071b      	lsls	r3, r3, #28
 800363c:	4919      	ldr	r1, [pc, #100]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003644:	4b17      	ldr	r3, [pc, #92]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a16      	ldr	r2, [pc, #88]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800364a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800364e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003650:	f7fd fac8 	bl	8000be4 <HAL_GetTick>
 8003654:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003656:	e008      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003658:	f7fd fac4 	bl	8000be4 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	@ 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e0d7      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800366a:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b01      	cmp	r3, #1
 800367a:	f040 80cd 	bne.w	8003818 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800367e:	4b09      	ldr	r3, [pc, #36]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a08      	ldr	r2, [pc, #32]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368a:	f7fd faab 	bl	8000be4 <HAL_GetTick>
 800368e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003690:	e00a      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003692:	f7fd faa7 	bl	8000be4 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b64      	cmp	r3, #100	@ 0x64
 800369e:	d903      	bls.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0ba      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80036a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036b4:	d0ed      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x682>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d02e      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d12a      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036de:	4b51      	ldr	r3, [pc, #324]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f2:	0f1b      	lsrs	r3, r3, #28
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	019a      	lsls	r2, r3, #6
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	041b      	lsls	r3, r3, #16
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	061b      	lsls	r3, r3, #24
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	071b      	lsls	r3, r3, #28
 8003712:	4944      	ldr	r1, [pc, #272]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800371a:	4b42      	ldr	r3, [pc, #264]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800371c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003720:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003728:	3b01      	subs	r3, #1
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	493d      	ldr	r1, [pc, #244]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d022      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003744:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003748:	d11d      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800374a:	4b36      	ldr	r3, [pc, #216]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003750:	0e1b      	lsrs	r3, r3, #24
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003758:	4b32      	ldr	r3, [pc, #200]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375e:	0f1b      	lsrs	r3, r3, #28
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	019a      	lsls	r2, r3, #6
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	431a      	orrs	r2, r3
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	061b      	lsls	r3, r3, #24
 8003778:	431a      	orrs	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	071b      	lsls	r3, r3, #28
 800377e:	4929      	ldr	r1, [pc, #164]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0308 	and.w	r3, r3, #8
 800378e:	2b00      	cmp	r3, #0
 8003790:	d028      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003792:	4b24      	ldr	r3, [pc, #144]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003798:	0e1b      	lsrs	r3, r3, #24
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037a0:	4b20      	ldr	r3, [pc, #128]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a6:	0c1b      	lsrs	r3, r3, #16
 80037a8:	f003 0303 	and.w	r3, r3, #3
 80037ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	019a      	lsls	r2, r3, #6
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	041b      	lsls	r3, r3, #16
 80037b8:	431a      	orrs	r2, r3
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	061b      	lsls	r3, r3, #24
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	071b      	lsls	r3, r3, #28
 80037c6:	4917      	ldr	r1, [pc, #92]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037ce:	4b15      	ldr	r3, [pc, #84]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037dc:	4911      	ldr	r1, [pc, #68]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0e      	ldr	r2, [pc, #56]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f0:	f7fd f9f8 	bl	8000be4 <HAL_GetTick>
 80037f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037f8:	f7fd f9f4 	bl	8000be4 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	@ 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e007      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800380a:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003812:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003816:	d1ef      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3720      	adds	r7, #32
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800

08003828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e049      	b.n	80038ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd f92a 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f000 fa38 	bl	8003cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d020      	beq.n	800393a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d01b      	beq.n	800393a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f06f 0202 	mvn.w	r2, #2
 800390a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f9bd 	bl	8003ca0 <HAL_TIM_IC_CaptureCallback>
 8003926:	e005      	b.n	8003934 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f9af 	bl	8003c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f9c0 	bl	8003cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d020      	beq.n	8003986 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d01b      	beq.n	8003986 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f06f 0204 	mvn.w	r2, #4
 8003956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f997 	bl	8003ca0 <HAL_TIM_IC_CaptureCallback>
 8003972:	e005      	b.n	8003980 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f989 	bl	8003c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f99a 	bl	8003cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d020      	beq.n	80039d2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01b      	beq.n	80039d2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f06f 0208 	mvn.w	r2, #8
 80039a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2204      	movs	r2, #4
 80039a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f971 	bl	8003ca0 <HAL_TIM_IC_CaptureCallback>
 80039be:	e005      	b.n	80039cc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f963 	bl	8003c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f974 	bl	8003cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d020      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 0310 	and.w	r3, r3, #16
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01b      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f06f 0210 	mvn.w	r2, #16
 80039ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2208      	movs	r2, #8
 80039f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f94b 	bl	8003ca0 <HAL_TIM_IC_CaptureCallback>
 8003a0a:	e005      	b.n	8003a18 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f93d 	bl	8003c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f94e 	bl	8003cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00c      	beq.n	8003a42 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0201 	mvn.w	r2, #1
 8003a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f91b 	bl	8003c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00c      	beq.n	8003a70 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fb14 	bl	8004098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fb0c 	bl	80040ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00c      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f908 	bl	8003cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00c      	beq.n	8003adc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0220 	mvn.w	r2, #32
 8003ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fad4 	bl	8004084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIM_ConfigClockSource+0x1c>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e0b4      	b.n	8003c6a <HAL_TIM_ConfigClockSource+0x186>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	4b56      	ldr	r3, [pc, #344]	@ (8003c74 <HAL_TIM_ConfigClockSource+0x190>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b38:	d03e      	beq.n	8003bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3e:	f200 8087 	bhi.w	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b46:	f000 8086 	beq.w	8003c56 <HAL_TIM_ConfigClockSource+0x172>
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4e:	d87f      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b50:	2b70      	cmp	r3, #112	@ 0x70
 8003b52:	d01a      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0xa6>
 8003b54:	2b70      	cmp	r3, #112	@ 0x70
 8003b56:	d87b      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b60      	cmp	r3, #96	@ 0x60
 8003b5a:	d050      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x11a>
 8003b5c:	2b60      	cmp	r3, #96	@ 0x60
 8003b5e:	d877      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b50      	cmp	r3, #80	@ 0x50
 8003b62:	d03c      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0xfa>
 8003b64:	2b50      	cmp	r3, #80	@ 0x50
 8003b66:	d873      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b40      	cmp	r3, #64	@ 0x40
 8003b6a:	d058      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x13a>
 8003b6c:	2b40      	cmp	r3, #64	@ 0x40
 8003b6e:	d86f      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b30      	cmp	r3, #48	@ 0x30
 8003b72:	d064      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b74:	2b30      	cmp	r3, #48	@ 0x30
 8003b76:	d86b      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d060      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d867      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d05c      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d05a      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b88:	e062      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b9a:	f000 f9c5 	bl	8003f28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	609a      	str	r2, [r3, #8]
      break;
 8003bb6:	e04f      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bc8:	f000 f9ae 	bl	8003f28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bda:	609a      	str	r2, [r3, #8]
      break;
 8003bdc:	e03c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bea:	461a      	mov	r2, r3
 8003bec:	f000 f922 	bl	8003e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2150      	movs	r1, #80	@ 0x50
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 f97b 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003bfc:	e02c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f000 f941 	bl	8003e92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2160      	movs	r1, #96	@ 0x60
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 f96b 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003c1c:	e01c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f000 f902 	bl	8003e34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2140      	movs	r1, #64	@ 0x40
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 f95b 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003c3c:	e00c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f000 f952 	bl	8003ef2 <TIM_ITRx_SetConfig>
      break;
 8003c4e:	e003      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
      break;
 8003c54:	e000      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	fffeff88 	.word	0xfffeff88

08003c78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a46      	ldr	r2, [pc, #280]	@ (8003e08 <TIM_Base_SetConfig+0x12c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfa:	d00f      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a43      	ldr	r2, [pc, #268]	@ (8003e0c <TIM_Base_SetConfig+0x130>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a42      	ldr	r2, [pc, #264]	@ (8003e10 <TIM_Base_SetConfig+0x134>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a41      	ldr	r2, [pc, #260]	@ (8003e14 <TIM_Base_SetConfig+0x138>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a40      	ldr	r2, [pc, #256]	@ (8003e18 <TIM_Base_SetConfig+0x13c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d108      	bne.n	8003d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a35      	ldr	r2, [pc, #212]	@ (8003e08 <TIM_Base_SetConfig+0x12c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d02b      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3c:	d027      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a32      	ldr	r2, [pc, #200]	@ (8003e0c <TIM_Base_SetConfig+0x130>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d023      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a31      	ldr	r2, [pc, #196]	@ (8003e10 <TIM_Base_SetConfig+0x134>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01f      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a30      	ldr	r2, [pc, #192]	@ (8003e14 <TIM_Base_SetConfig+0x138>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01b      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2f      	ldr	r2, [pc, #188]	@ (8003e18 <TIM_Base_SetConfig+0x13c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d017      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2e      	ldr	r2, [pc, #184]	@ (8003e1c <TIM_Base_SetConfig+0x140>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2d      	ldr	r2, [pc, #180]	@ (8003e20 <TIM_Base_SetConfig+0x144>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00f      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2c      	ldr	r2, [pc, #176]	@ (8003e24 <TIM_Base_SetConfig+0x148>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2b      	ldr	r2, [pc, #172]	@ (8003e28 <TIM_Base_SetConfig+0x14c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2a      	ldr	r2, [pc, #168]	@ (8003e2c <TIM_Base_SetConfig+0x150>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a29      	ldr	r2, [pc, #164]	@ (8003e30 <TIM_Base_SetConfig+0x154>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a10      	ldr	r2, [pc, #64]	@ (8003e08 <TIM_Base_SetConfig+0x12c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_Base_SetConfig+0xf8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a12      	ldr	r2, [pc, #72]	@ (8003e18 <TIM_Base_SetConfig+0x13c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d103      	bne.n	8003ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f023 0201 	bic.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40010400 	.word	0x40010400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800
 8003e28:	40001800 	.word	0x40001800
 8003e2c:	40001c00 	.word	0x40001c00
 8003e30:	40002000 	.word	0x40002000

08003e34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	f023 0201 	bic.w	r2, r3, #1
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f023 030a 	bic.w	r3, r3, #10
 8003e70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f023 0210 	bic.w	r2, r3, #16
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	031b      	lsls	r3, r3, #12
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ece:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	621a      	str	r2, [r3, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f043 0307 	orr.w	r3, r3, #7
 8003f14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	609a      	str	r2, [r3, #8]
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	021a      	lsls	r2, r3, #8
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	609a      	str	r2, [r3, #8]
}
 8003f5c:	bf00      	nop
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e06d      	b.n	800405c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a30      	ldr	r2, [pc, #192]	@ (8004068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2f      	ldr	r2, [pc, #188]	@ (800406c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d108      	bne.n	8003fc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003fba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a20      	ldr	r2, [pc, #128]	@ (8004068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d022      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff2:	d01d      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8004070 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d018      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1c      	ldr	r2, [pc, #112]	@ (8004074 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1a      	ldr	r2, [pc, #104]	@ (8004078 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00e      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a15      	ldr	r2, [pc, #84]	@ (800406c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d009      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a16      	ldr	r2, [pc, #88]	@ (800407c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d004      	beq.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a15      	ldr	r2, [pc, #84]	@ (8004080 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d10c      	bne.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	4313      	orrs	r3, r2
 8004040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40010000 	.word	0x40010000
 800406c:	40010400 	.word	0x40010400
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800
 8004078:	40000c00 	.word	0x40000c00
 800407c:	40014000 	.word	0x40014000
 8004080:	40001800 	.word	0x40001800

08004084 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040c0:	b084      	sub	sp, #16
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	f107 001c 	add.w	r0, r7, #28
 80040ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040d2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d121      	bne.n	800411e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	4b21      	ldr	r3, [pc, #132]	@ (8004170 <USB_CoreInit+0xb0>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004102:	2b01      	cmp	r3, #1
 8004104:	d105      	bne.n	8004112 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f001 fade 	bl	80056d4 <USB_CoreReset>
 8004118:	4603      	mov	r3, r0
 800411a:	73fb      	strb	r3, [r7, #15]
 800411c:	e010      	b.n	8004140 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f001 fad2 	bl	80056d4 <USB_CoreReset>
 8004130:	4603      	mov	r3, r0
 8004132:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004138:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004140:	7fbb      	ldrb	r3, [r7, #30]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d10b      	bne.n	800415e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f043 0206 	orr.w	r2, r3, #6
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f043 0220 	orr.w	r2, r3, #32
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800415e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800416a:	b004      	add	sp, #16
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	ffbdffbf 	.word	0xffbdffbf

08004174 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d165      	bne.n	8004254 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4a41      	ldr	r2, [pc, #260]	@ (8004290 <USB_SetTurnaroundTime+0x11c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d906      	bls.n	800419e <USB_SetTurnaroundTime+0x2a>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4a40      	ldr	r2, [pc, #256]	@ (8004294 <USB_SetTurnaroundTime+0x120>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d202      	bcs.n	800419e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004198:	230f      	movs	r3, #15
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e062      	b.n	8004264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004294 <USB_SetTurnaroundTime+0x120>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d306      	bcc.n	80041b4 <USB_SetTurnaroundTime+0x40>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004298 <USB_SetTurnaroundTime+0x124>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d202      	bcs.n	80041b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80041ae:	230e      	movs	r3, #14
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	e057      	b.n	8004264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	4a38      	ldr	r2, [pc, #224]	@ (8004298 <USB_SetTurnaroundTime+0x124>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d306      	bcc.n	80041ca <USB_SetTurnaroundTime+0x56>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4a37      	ldr	r2, [pc, #220]	@ (800429c <USB_SetTurnaroundTime+0x128>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d202      	bcs.n	80041ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80041c4:	230d      	movs	r3, #13
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	e04c      	b.n	8004264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4a33      	ldr	r2, [pc, #204]	@ (800429c <USB_SetTurnaroundTime+0x128>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d306      	bcc.n	80041e0 <USB_SetTurnaroundTime+0x6c>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4a32      	ldr	r2, [pc, #200]	@ (80042a0 <USB_SetTurnaroundTime+0x12c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d802      	bhi.n	80041e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80041da:	230c      	movs	r3, #12
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e041      	b.n	8004264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4a2f      	ldr	r2, [pc, #188]	@ (80042a0 <USB_SetTurnaroundTime+0x12c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d906      	bls.n	80041f6 <USB_SetTurnaroundTime+0x82>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4a2e      	ldr	r2, [pc, #184]	@ (80042a4 <USB_SetTurnaroundTime+0x130>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d802      	bhi.n	80041f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80041f0:	230b      	movs	r3, #11
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	e036      	b.n	8004264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	4a2a      	ldr	r2, [pc, #168]	@ (80042a4 <USB_SetTurnaroundTime+0x130>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d906      	bls.n	800420c <USB_SetTurnaroundTime+0x98>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4a29      	ldr	r2, [pc, #164]	@ (80042a8 <USB_SetTurnaroundTime+0x134>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d802      	bhi.n	800420c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004206:	230a      	movs	r3, #10
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	e02b      	b.n	8004264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4a26      	ldr	r2, [pc, #152]	@ (80042a8 <USB_SetTurnaroundTime+0x134>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d906      	bls.n	8004222 <USB_SetTurnaroundTime+0xae>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4a25      	ldr	r2, [pc, #148]	@ (80042ac <USB_SetTurnaroundTime+0x138>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d202      	bcs.n	8004222 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800421c:	2309      	movs	r3, #9
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e020      	b.n	8004264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4a21      	ldr	r2, [pc, #132]	@ (80042ac <USB_SetTurnaroundTime+0x138>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d306      	bcc.n	8004238 <USB_SetTurnaroundTime+0xc4>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4a20      	ldr	r2, [pc, #128]	@ (80042b0 <USB_SetTurnaroundTime+0x13c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d802      	bhi.n	8004238 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004232:	2308      	movs	r3, #8
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	e015      	b.n	8004264 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4a1d      	ldr	r2, [pc, #116]	@ (80042b0 <USB_SetTurnaroundTime+0x13c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d906      	bls.n	800424e <USB_SetTurnaroundTime+0xda>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4a1c      	ldr	r2, [pc, #112]	@ (80042b4 <USB_SetTurnaroundTime+0x140>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d202      	bcs.n	800424e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004248:	2307      	movs	r3, #7
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e00a      	b.n	8004264 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800424e:	2306      	movs	r3, #6
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	e007      	b.n	8004264 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800425a:	2309      	movs	r3, #9
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	e001      	b.n	8004264 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004260:	2309      	movs	r3, #9
 8004262:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	029b      	lsls	r3, r3, #10
 8004278:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	371c      	adds	r7, #28
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	00d8acbf 	.word	0x00d8acbf
 8004294:	00e4e1c0 	.word	0x00e4e1c0
 8004298:	00f42400 	.word	0x00f42400
 800429c:	01067380 	.word	0x01067380
 80042a0:	011a499f 	.word	0x011a499f
 80042a4:	01312cff 	.word	0x01312cff
 80042a8:	014ca43f 	.word	0x014ca43f
 80042ac:	016e3600 	.word	0x016e3600
 80042b0:	01a6ab1f 	.word	0x01a6ab1f
 80042b4:	01e84800 	.word	0x01e84800

080042b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f043 0201 	orr.w	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f023 0201 	bic.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d115      	bne.n	800434a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800432a:	200a      	movs	r0, #10
 800432c:	f7fc fc66 	bl	8000bfc <HAL_Delay>
      ms += 10U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	330a      	adds	r3, #10
 8004334:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f001 f93b 	bl	80055b2 <USB_GetMode>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	d01e      	beq.n	8004380 <USB_SetCurrentMode+0x84>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2bc7      	cmp	r3, #199	@ 0xc7
 8004346:	d9f0      	bls.n	800432a <USB_SetCurrentMode+0x2e>
 8004348:	e01a      	b.n	8004380 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d115      	bne.n	800437c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800435c:	200a      	movs	r0, #10
 800435e:	f7fc fc4d 	bl	8000bfc <HAL_Delay>
      ms += 10U;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	330a      	adds	r3, #10
 8004366:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f001 f922 	bl	80055b2 <USB_GetMode>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <USB_SetCurrentMode+0x84>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2bc7      	cmp	r3, #199	@ 0xc7
 8004378:	d9f0      	bls.n	800435c <USB_SetCurrentMode+0x60>
 800437a:	e001      	b.n	8004380 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e005      	b.n	800438c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2bc8      	cmp	r3, #200	@ 0xc8
 8004384:	d101      	bne.n	800438a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004394:	b084      	sub	sp, #16
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80043a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	e009      	b.n	80043c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	3340      	adds	r3, #64	@ 0x40
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	2200      	movs	r2, #0
 80043c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3301      	adds	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b0e      	cmp	r3, #14
 80043cc:	d9f2      	bls.n	80043b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043ce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11c      	bne.n	8004410 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043e4:	f043 0302 	orr.w	r3, r3, #2
 80043e8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ee:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e005      	b.n	800441c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004414:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004422:	461a      	mov	r2, r3
 8004424:	2300      	movs	r3, #0
 8004426:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004428:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800442c:	2b01      	cmp	r3, #1
 800442e:	d10d      	bne.n	800444c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004438:	2100      	movs	r1, #0
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f968 	bl	8004710 <USB_SetDevSpeed>
 8004440:	e008      	b.n	8004454 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004442:	2101      	movs	r1, #1
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f963 	bl	8004710 <USB_SetDevSpeed>
 800444a:	e003      	b.n	8004454 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800444c:	2103      	movs	r1, #3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f95e 	bl	8004710 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004454:	2110      	movs	r1, #16
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f8fa 	bl	8004650 <USB_FlushTxFifo>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f924 	bl	80046b4 <USB_FlushRxFifo>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800447c:	461a      	mov	r2, r3
 800447e:	2300      	movs	r3, #0
 8004480:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004488:	461a      	mov	r2, r3
 800448a:	2300      	movs	r3, #0
 800448c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004494:	461a      	mov	r2, r3
 8004496:	2300      	movs	r3, #0
 8004498:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	e043      	b.n	8004528 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044b6:	d118      	bne.n	80044ea <USB_DevInit+0x156>
    {
      if (i == 0U)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10a      	bne.n	80044d4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ca:	461a      	mov	r2, r3
 80044cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e013      	b.n	80044fc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e0:	461a      	mov	r2, r3
 80044e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	e008      	b.n	80044fc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f6:	461a      	mov	r2, r3
 80044f8:	2300      	movs	r3, #0
 80044fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	015a      	lsls	r2, r3, #5
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4413      	add	r3, r2
 8004504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004508:	461a      	mov	r2, r3
 800450a:	2300      	movs	r3, #0
 800450c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800451a:	461a      	mov	r2, r3
 800451c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004520:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	3301      	adds	r3, #1
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800452c:	461a      	mov	r2, r3
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4293      	cmp	r3, r2
 8004532:	d3b5      	bcc.n	80044a0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	e043      	b.n	80045c2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800454c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004550:	d118      	bne.n	8004584 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004564:	461a      	mov	r2, r3
 8004566:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	e013      	b.n	8004596 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800457a:	461a      	mov	r2, r3
 800457c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e008      	b.n	8004596 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004590:	461a      	mov	r2, r3
 8004592:	2300      	movs	r3, #0
 8004594:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a2:	461a      	mov	r2, r3
 80045a4:	2300      	movs	r3, #0
 80045a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b4:	461a      	mov	r2, r3
 80045b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	3301      	adds	r3, #1
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045c6:	461a      	mov	r2, r3
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d3b5      	bcc.n	800453a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045e0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80045ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d105      	bne.n	8004604 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	f043 0210 	orr.w	r2, r3, #16
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699a      	ldr	r2, [r3, #24]
 8004608:	4b0f      	ldr	r3, [pc, #60]	@ (8004648 <USB_DevInit+0x2b4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004610:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f043 0208 	orr.w	r2, r3, #8
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004624:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004628:	2b01      	cmp	r3, #1
 800462a:	d105      	bne.n	8004638 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	4b06      	ldr	r3, [pc, #24]	@ (800464c <USB_DevInit+0x2b8>)
 8004632:	4313      	orrs	r3, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004638:	7dfb      	ldrb	r3, [r7, #23]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004644:	b004      	add	sp, #16
 8004646:	4770      	bx	lr
 8004648:	803c3800 	.word	0x803c3800
 800464c:	40000004 	.word	0x40000004

08004650 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3301      	adds	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800466a:	d901      	bls.n	8004670 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e01b      	b.n	80046a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	daf2      	bge.n	800465e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	019b      	lsls	r3, r3, #6
 8004680:	f043 0220 	orr.w	r2, r3, #32
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004694:	d901      	bls.n	800469a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e006      	b.n	80046a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	d0f0      	beq.n	8004688 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3301      	adds	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046cc:	d901      	bls.n	80046d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e018      	b.n	8004704 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	daf2      	bge.n	80046c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2210      	movs	r2, #16
 80046e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3301      	adds	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046f0:	d901      	bls.n	80046f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e006      	b.n	8004704 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d0f0      	beq.n	80046e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004730:	4313      	orrs	r3, r2
 8004732:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004742:	b480      	push	{r7}
 8004744:	b087      	sub	sp, #28
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0306 	and.w	r3, r3, #6
 800475a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d102      	bne.n	8004768 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004762:	2300      	movs	r3, #0
 8004764:	75fb      	strb	r3, [r7, #23]
 8004766:	e00a      	b.n	800477e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d002      	beq.n	8004774 <USB_GetDevSpeed+0x32>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b06      	cmp	r3, #6
 8004772:	d102      	bne.n	800477a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004774:	2302      	movs	r3, #2
 8004776:	75fb      	strb	r3, [r7, #23]
 8004778:	e001      	b.n	800477e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800477a:	230f      	movs	r3, #15
 800477c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800477e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004780:	4618      	mov	r0, r3
 8004782:	371c      	adds	r7, #28
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d139      	bne.n	800481c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	2101      	movs	r1, #1
 80047ba:	fa01 f303 	lsl.w	r3, r1, r3
 80047be:	b29b      	uxth	r3, r3
 80047c0:	68f9      	ldr	r1, [r7, #12]
 80047c2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d153      	bne.n	8004888 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	015a      	lsls	r2, r3, #5
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4413      	add	r3, r2
 80047e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	791b      	ldrb	r3, [r3, #4]
 80047fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	059b      	lsls	r3, r3, #22
 8004802:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004804:	431a      	orrs	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	0159      	lsls	r1, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	440b      	add	r3, r1
 800480e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004812:	4619      	mov	r1, r3
 8004814:	4b20      	ldr	r3, [pc, #128]	@ (8004898 <USB_ActivateEndpoint+0x10c>)
 8004816:	4313      	orrs	r3, r2
 8004818:	600b      	str	r3, [r1, #0]
 800481a:	e035      	b.n	8004888 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	2101      	movs	r1, #1
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	68f9      	ldr	r1, [r7, #12]
 8004836:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800483a:	4313      	orrs	r3, r2
 800483c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d119      	bne.n	8004888 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4413      	add	r3, r2
 800485c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	791b      	ldrb	r3, [r3, #4]
 800486e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004870:	430b      	orrs	r3, r1
 8004872:	431a      	orrs	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	0159      	lsls	r1, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	440b      	add	r3, r1
 800487c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004880:	4619      	mov	r1, r3
 8004882:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <USB_ActivateEndpoint+0x10c>)
 8004884:	4313      	orrs	r3, r2
 8004886:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	10008000 	.word	0x10008000

0800489c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d161      	bne.n	800497c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048ce:	d11f      	bne.n	8004910 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80048ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	0151      	lsls	r1, r2, #5
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	440a      	add	r2, r1
 8004906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800490a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800490e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	2101      	movs	r1, #1
 8004922:	fa01 f303 	lsl.w	r3, r1, r3
 8004926:	b29b      	uxth	r3, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	68f9      	ldr	r1, [r7, #12]
 800492c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004930:	4013      	ands	r3, r2
 8004932:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800493a:	69da      	ldr	r2, [r3, #28]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	f003 030f 	and.w	r3, r3, #15
 8004944:	2101      	movs	r1, #1
 8004946:	fa01 f303 	lsl.w	r3, r1, r3
 800494a:	b29b      	uxth	r3, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004954:	4013      	ands	r3, r2
 8004956:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	0159      	lsls	r1, r3, #5
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	440b      	add	r3, r1
 800496e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004972:	4619      	mov	r1, r3
 8004974:	4b35      	ldr	r3, [pc, #212]	@ (8004a4c <USB_DeactivateEndpoint+0x1b0>)
 8004976:	4013      	ands	r3, r2
 8004978:	600b      	str	r3, [r1, #0]
 800497a:	e060      	b.n	8004a3e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800498e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004992:	d11f      	bne.n	80049d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80049b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	0151      	lsls	r1, r2, #5
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	440a      	add	r2, r1
 80049ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	2101      	movs	r1, #1
 80049e6:	fa01 f303 	lsl.w	r3, r1, r3
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	43db      	mvns	r3, r3
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049f4:	4013      	ands	r3, r2
 80049f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049fe:	69da      	ldr	r2, [r3, #28]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	2101      	movs	r1, #1
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	041b      	lsls	r3, r3, #16
 8004a10:	43db      	mvns	r3, r3
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	0159      	lsls	r1, r3, #5
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	440b      	add	r3, r1
 8004a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a36:	4619      	mov	r1, r3
 8004a38:	4b05      	ldr	r3, [pc, #20]	@ (8004a50 <USB_DeactivateEndpoint+0x1b4>)
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	ec337800 	.word	0xec337800
 8004a50:	eff37800 	.word	0xeff37800

08004a54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	@ 0x28
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	785b      	ldrb	r3, [r3, #1]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	f040 8181 	bne.w	8004d78 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d132      	bne.n	8004ae4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	0159      	lsls	r1, r3, #5
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	440b      	add	r3, r1
 8004a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4ba5      	ldr	r3, [pc, #660]	@ (8004d30 <USB_EPStartXfer+0x2dc>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004abe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	0159      	lsls	r1, r3, #5
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	440b      	add	r3, r1
 8004ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ada:	4619      	mov	r1, r3
 8004adc:	4b95      	ldr	r3, [pc, #596]	@ (8004d34 <USB_EPStartXfer+0x2e0>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	610b      	str	r3, [r1, #16]
 8004ae2:	e092      	b.n	8004c0a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	0159      	lsls	r1, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	440b      	add	r3, r1
 8004afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afe:	4619      	mov	r1, r3
 8004b00:	4b8c      	ldr	r3, [pc, #560]	@ (8004d34 <USB_EPStartXfer+0x2e0>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	0159      	lsls	r1, r3, #5
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	440b      	add	r3, r1
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b20:	4619      	mov	r1, r3
 8004b22:	4b83      	ldr	r3, [pc, #524]	@ (8004d30 <USB_EPStartXfer+0x2dc>)
 8004b24:	4013      	ands	r3, r2
 8004b26:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d11a      	bne.n	8004b64 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d903      	bls.n	8004b42 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	0151      	lsls	r1, r2, #5
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	440a      	add	r2, r1
 8004b58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b60:	6113      	str	r3, [r2, #16]
 8004b62:	e01b      	b.n	8004b9c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b70:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6919      	ldr	r1, [r3, #16]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	440b      	add	r3, r1
 8004b7c:	1e59      	subs	r1, r3, #1
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b86:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b88:	4b6b      	ldr	r3, [pc, #428]	@ (8004d38 <USB_EPStartXfer+0x2e4>)
 8004b8a:	400b      	ands	r3, r1
 8004b8c:	69b9      	ldr	r1, [r7, #24]
 8004b8e:	0148      	lsls	r0, r1, #5
 8004b90:	69f9      	ldr	r1, [r7, #28]
 8004b92:	4401      	add	r1, r0
 8004b94:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb2:	69b9      	ldr	r1, [r7, #24]
 8004bb4:	0148      	lsls	r0, r1, #5
 8004bb6:	69f9      	ldr	r1, [r7, #28]
 8004bb8:	4401      	add	r1, r0
 8004bba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	791b      	ldrb	r3, [r3, #4]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d11f      	bne.n	8004c0a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004be4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004be8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d14b      	bne.n	8004ca8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d009      	beq.n	8004c2c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c24:	461a      	mov	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	791b      	ldrb	r3, [r3, #4]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d128      	bne.n	8004c86 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d110      	bne.n	8004c66 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	0151      	lsls	r1, r2, #5
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	440a      	add	r2, r1
 8004c5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c5e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	e00f      	b.n	8004c86 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	e16a      	b.n	8004f7e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004cc6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	791b      	ldrb	r3, [r3, #4]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d015      	beq.n	8004cfc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8152 	beq.w	8004f7e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	2101      	movs	r1, #1
 8004cec:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf0:	69f9      	ldr	r1, [r7, #28]
 8004cf2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	634b      	str	r3, [r1, #52]	@ 0x34
 8004cfa:	e140      	b.n	8004f7e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d117      	bne.n	8004d3c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d26:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	e016      	b.n	8004d5c <USB_EPStartXfer+0x308>
 8004d2e:	bf00      	nop
 8004d30:	e007ffff 	.word	0xe007ffff
 8004d34:	fff80000 	.word	0xfff80000
 8004d38:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	68d9      	ldr	r1, [r3, #12]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	781a      	ldrb	r2, [r3, #0]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	b298      	uxth	r0, r3
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	4603      	mov	r3, r0
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f9b9 	bl	80050e8 <USB_WritePacket>
 8004d76:	e102      	b.n	8004f7e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	0159      	lsls	r1, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	440b      	add	r3, r1
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d92:	4619      	mov	r1, r3
 8004d94:	4b7c      	ldr	r3, [pc, #496]	@ (8004f88 <USB_EPStartXfer+0x534>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	0159      	lsls	r1, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	440b      	add	r3, r1
 8004db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db4:	4619      	mov	r1, r3
 8004db6:	4b75      	ldr	r3, [pc, #468]	@ (8004f8c <USB_EPStartXfer+0x538>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d12f      	bne.n	8004e22 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df0:	69b9      	ldr	r1, [r7, #24]
 8004df2:	0148      	lsls	r0, r1, #5
 8004df4:	69f9      	ldr	r1, [r7, #28]
 8004df6:	4401      	add	r1, r0
 8004df8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e1e:	6113      	str	r3, [r2, #16]
 8004e20:	e05f      	b.n	8004ee2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d123      	bne.n	8004e72 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e40:	69b9      	ldr	r1, [r7, #24]
 8004e42:	0148      	lsls	r0, r1, #5
 8004e44:	69f9      	ldr	r1, [r7, #28]
 8004e46:	4401      	add	r1, r0
 8004e48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e6e:	6113      	str	r3, [r2, #16]
 8004e70:	e037      	b.n	8004ee2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	1e5a      	subs	r2, r3, #1
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e86:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	8afa      	ldrh	r2, [r7, #22]
 8004e8e:	fb03 f202 	mul.w	r2, r3, r2
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	8afb      	ldrh	r3, [r7, #22]
 8004ea6:	04d9      	lsls	r1, r3, #19
 8004ea8:	4b39      	ldr	r3, [pc, #228]	@ (8004f90 <USB_EPStartXfer+0x53c>)
 8004eaa:	400b      	ands	r3, r1
 8004eac:	69b9      	ldr	r1, [r7, #24]
 8004eae:	0148      	lsls	r0, r1, #5
 8004eb0:	69f9      	ldr	r1, [r7, #28]
 8004eb2:	4401      	add	r1, r0
 8004eb4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed2:	69b9      	ldr	r1, [r7, #24]
 8004ed4:	0148      	lsls	r0, r1, #5
 8004ed6:	69f9      	ldr	r1, [r7, #28]
 8004ed8:	4401      	add	r1, r0
 8004eda:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d10d      	bne.n	8004f04 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d009      	beq.n	8004f04 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	68d9      	ldr	r1, [r3, #12]
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f00:	460a      	mov	r2, r1
 8004f02:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	791b      	ldrb	r3, [r3, #4]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d128      	bne.n	8004f5e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d110      	bne.n	8004f3e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	e00f      	b.n	8004f5e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f5c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	fff80000 	.word	0xfff80000
 8004f8c:	e007ffff 	.word	0xe007ffff
 8004f90:	1ff80000 	.word	0x1ff80000

08004f94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d14a      	bne.n	8005048 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fca:	f040 8086 	bne.w	80050da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	7812      	ldrb	r2, [r2, #0]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ff0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	7812      	ldrb	r2, [r2, #0]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005010:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005014:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3301      	adds	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005022:	4293      	cmp	r3, r2
 8005024:	d902      	bls.n	800502c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
          break;
 800502a:	e056      	b.n	80050da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005040:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005044:	d0e7      	beq.n	8005016 <USB_EPStopXfer+0x82>
 8005046:	e048      	b.n	80050da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800505c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005060:	d13b      	bne.n	80050da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	7812      	ldrb	r2, [r2, #0]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	440a      	add	r2, r1
 800507c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005080:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005084:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	7812      	ldrb	r2, [r2, #0]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3301      	adds	r3, #1
 80050ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d902      	bls.n	80050c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	75fb      	strb	r3, [r7, #23]
          break;
 80050be:	e00c      	b.n	80050da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050d8:	d0e7      	beq.n	80050aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80050da:	7dfb      	ldrb	r3, [r7, #23]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b089      	sub	sp, #36	@ 0x24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	4611      	mov	r1, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	460b      	mov	r3, r1
 80050f8:	71fb      	strb	r3, [r7, #7]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005106:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800510a:	2b00      	cmp	r3, #0
 800510c:	d123      	bne.n	8005156 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800510e:	88bb      	ldrh	r3, [r7, #4]
 8005110:	3303      	adds	r3, #3
 8005112:	089b      	lsrs	r3, r3, #2
 8005114:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	e018      	b.n	800514e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	031a      	lsls	r2, r3, #12
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	4413      	add	r3, r2
 8005124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005128:	461a      	mov	r2, r3
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	3301      	adds	r3, #1
 8005134:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3301      	adds	r3, #1
 800513a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	3301      	adds	r3, #1
 8005140:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3301      	adds	r3, #1
 8005146:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	3301      	adds	r3, #1
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	429a      	cmp	r2, r3
 8005154:	d3e2      	bcc.n	800511c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3724      	adds	r7, #36	@ 0x24
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005164:	b480      	push	{r7}
 8005166:	b08b      	sub	sp, #44	@ 0x2c
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	4613      	mov	r3, r2
 8005170:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	089b      	lsrs	r3, r3, #2
 800517e:	b29b      	uxth	r3, r3
 8005180:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800518a:	2300      	movs	r3, #0
 800518c:	623b      	str	r3, [r7, #32]
 800518e:	e014      	b.n	80051ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	601a      	str	r2, [r3, #0]
    pDest++;
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	3301      	adds	r3, #1
 80051a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	3301      	adds	r3, #1
 80051a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	3301      	adds	r3, #1
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	3301      	adds	r3, #1
 80051b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	3301      	adds	r3, #1
 80051b8:	623b      	str	r3, [r7, #32]
 80051ba:	6a3a      	ldr	r2, [r7, #32]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d3e6      	bcc.n	8005190 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80051c2:	8bfb      	ldrh	r3, [r7, #30]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01e      	beq.n	8005206 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051d2:	461a      	mov	r2, r3
 80051d4:	f107 0310 	add.w	r3, r7, #16
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ec:	701a      	strb	r2, [r3, #0]
      i++;
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	3301      	adds	r3, #1
 80051f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80051f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f6:	3301      	adds	r3, #1
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80051fa:	8bfb      	ldrh	r3, [r7, #30]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005200:	8bfb      	ldrh	r3, [r7, #30]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1ea      	bne.n	80051dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005208:	4618      	mov	r0, r3
 800520a:	372c      	adds	r7, #44	@ 0x2c
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	785b      	ldrb	r3, [r3, #1]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d12c      	bne.n	800528a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	db12      	blt.n	8005268 <USB_EPSetStall+0x54>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00f      	beq.n	8005268 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005262:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005266:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	0151      	lsls	r1, r2, #5
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	440a      	add	r2, r1
 800527e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005282:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	e02b      	b.n	80052e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	db12      	blt.n	80052c2 <USB_EPSetStall+0xae>
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00f      	beq.n	80052c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80052e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d128      	bne.n	800535e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005326:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800532a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	791b      	ldrb	r3, [r3, #4]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d003      	beq.n	800533c <USB_EPClearStall+0x4c>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	791b      	ldrb	r3, [r3, #4]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d138      	bne.n	80053ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	440a      	add	r2, r1
 8005352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	e027      	b.n	80053ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	440a      	add	r2, r1
 8005374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005378:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800537c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	791b      	ldrb	r3, [r3, #4]
 8005382:	2b03      	cmp	r3, #3
 8005384:	d003      	beq.n	800538e <USB_EPClearStall+0x9e>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	791b      	ldrb	r3, [r3, #4]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d10f      	bne.n	80053ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80053de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80053f0:	68f9      	ldr	r1, [r7, #12]
 80053f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053f6:	4313      	orrs	r3, r2
 80053f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005422:	f023 0303 	bic.w	r3, r3, #3
 8005426:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005436:	f023 0302 	bic.w	r3, r3, #2
 800543a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005464:	f023 0303 	bic.w	r3, r3, #3
 8005468:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005478:	f043 0302 	orr.w	r3, r3, #2
 800547c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4013      	ands	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054a4:	68fb      	ldr	r3, [r7, #12]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	4013      	ands	r3, r2
 80054d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	0c1b      	lsrs	r3, r3, #16
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	4013      	ands	r3, r2
 8005508:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	b29b      	uxth	r3, r3
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800551a:	b480      	push	{r7}
 800551c:	b085      	sub	sp, #20
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	460b      	mov	r3, r1
 8005524:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	4013      	ands	r3, r2
 8005546:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005548:	68bb      	ldr	r3, [r7, #8]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005556:	b480      	push	{r7}
 8005558:	b087      	sub	sp, #28
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	460b      	mov	r3, r1
 8005560:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005578:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	fa22 f303 	lsr.w	r3, r2, r3
 8005586:	01db      	lsls	r3, r3, #7
 8005588:	b2db      	uxtb	r3, r3
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4013      	ands	r3, r2
 80055a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055a4:	68bb      	ldr	r3, [r7, #8]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0301 	and.w	r3, r3, #1
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ea:	4619      	mov	r1, r3
 80055ec:	4b09      	ldr	r3, [pc, #36]	@ (8005614 <USB_ActivateSetup+0x44>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005604:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	fffff800 	.word	0xfffff800

08005618 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	460b      	mov	r3, r1
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	333c      	adds	r3, #60	@ 0x3c
 800562e:	3304      	adds	r3, #4
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	4a26      	ldr	r2, [pc, #152]	@ (80056d0 <USB_EP0_OutStart+0xb8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d90a      	bls.n	8005652 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800564c:	d101      	bne.n	8005652 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	e037      	b.n	80056c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005658:	461a      	mov	r2, r3
 800565a:	2300      	movs	r3, #0
 800565c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800566c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005670:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005680:	f043 0318 	orr.w	r3, r3, #24
 8005684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005694:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005698:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800569a:	7afb      	ldrb	r3, [r7, #11]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d10f      	bne.n	80056c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a6:	461a      	mov	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056ba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80056be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	4f54300a 	.word	0x4f54300a

080056d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056ec:	d901      	bls.n	80056f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e01b      	b.n	800572a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	daf2      	bge.n	80056e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f043 0201 	orr.w	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3301      	adds	r3, #1
 800570e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005716:	d901      	bls.n	800571c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e006      	b.n	800572a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b01      	cmp	r3, #1
 8005726:	d0f0      	beq.n	800570a <USB_CoreReset+0x36>

  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
	...

08005738 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005744:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005748:	f002 fd78 	bl	800823c <malloc>
 800574c:	4603      	mov	r3, r0
 800574e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	32b0      	adds	r2, #176	@ 0xb0
 8005760:	2100      	movs	r1, #0
 8005762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005766:	2302      	movs	r3, #2
 8005768:	e0d4      	b.n	8005914 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800576a:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800576e:	2100      	movs	r1, #0
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f002 fe21 	bl	80083b8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	32b0      	adds	r2, #176	@ 0xb0
 8005780:	68f9      	ldr	r1, [r7, #12]
 8005782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	32b0      	adds	r2, #176	@ 0xb0
 8005790:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	7c1b      	ldrb	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d138      	bne.n	8005814 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80057a2:	4b5e      	ldr	r3, [pc, #376]	@ (800591c <USBD_CDC_Init+0x1e4>)
 80057a4:	7819      	ldrb	r1, [r3, #0]
 80057a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057aa:	2202      	movs	r2, #2
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f002 fba2 	bl	8007ef6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80057b2:	4b5a      	ldr	r3, [pc, #360]	@ (800591c <USBD_CDC_Init+0x1e4>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	f003 020f 	and.w	r2, r3, #15
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4413      	add	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	3324      	adds	r3, #36	@ 0x24
 80057c8:	2201      	movs	r2, #1
 80057ca:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80057cc:	4b54      	ldr	r3, [pc, #336]	@ (8005920 <USBD_CDC_Init+0x1e8>)
 80057ce:	7819      	ldrb	r1, [r3, #0]
 80057d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057d4:	2202      	movs	r2, #2
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f002 fb8d 	bl	8007ef6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80057dc:	4b50      	ldr	r3, [pc, #320]	@ (8005920 <USBD_CDC_Init+0x1e8>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	f003 020f 	and.w	r2, r3, #15
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80057f4:	2201      	movs	r2, #1
 80057f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80057f8:	4b4a      	ldr	r3, [pc, #296]	@ (8005924 <USBD_CDC_Init+0x1ec>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 020f 	and.w	r2, r3, #15
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3326      	adds	r3, #38	@ 0x26
 800580e:	2210      	movs	r2, #16
 8005810:	801a      	strh	r2, [r3, #0]
 8005812:	e035      	b.n	8005880 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005814:	4b41      	ldr	r3, [pc, #260]	@ (800591c <USBD_CDC_Init+0x1e4>)
 8005816:	7819      	ldrb	r1, [r3, #0]
 8005818:	2340      	movs	r3, #64	@ 0x40
 800581a:	2202      	movs	r2, #2
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f002 fb6a 	bl	8007ef6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005822:	4b3e      	ldr	r3, [pc, #248]	@ (800591c <USBD_CDC_Init+0x1e4>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	f003 020f 	and.w	r2, r3, #15
 800582a:	6879      	ldr	r1, [r7, #4]
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	440b      	add	r3, r1
 8005836:	3324      	adds	r3, #36	@ 0x24
 8005838:	2201      	movs	r2, #1
 800583a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800583c:	4b38      	ldr	r3, [pc, #224]	@ (8005920 <USBD_CDC_Init+0x1e8>)
 800583e:	7819      	ldrb	r1, [r3, #0]
 8005840:	2340      	movs	r3, #64	@ 0x40
 8005842:	2202      	movs	r2, #2
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f002 fb56 	bl	8007ef6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800584a:	4b35      	ldr	r3, [pc, #212]	@ (8005920 <USBD_CDC_Init+0x1e8>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f003 020f 	and.w	r2, r3, #15
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005862:	2201      	movs	r2, #1
 8005864:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005866:	4b2f      	ldr	r3, [pc, #188]	@ (8005924 <USBD_CDC_Init+0x1ec>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	f003 020f 	and.w	r2, r3, #15
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	3326      	adds	r3, #38	@ 0x26
 800587c:	2210      	movs	r2, #16
 800587e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005880:	4b28      	ldr	r3, [pc, #160]	@ (8005924 <USBD_CDC_Init+0x1ec>)
 8005882:	7819      	ldrb	r1, [r3, #0]
 8005884:	2308      	movs	r3, #8
 8005886:	2203      	movs	r2, #3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f002 fb34 	bl	8007ef6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800588e:	4b25      	ldr	r3, [pc, #148]	@ (8005924 <USBD_CDC_Init+0x1ec>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	f003 020f 	and.w	r2, r3, #15
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	3324      	adds	r3, #36	@ 0x24
 80058a4:	2201      	movs	r2, #1
 80058a6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	33b0      	adds	r3, #176	@ 0xb0
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80058de:	2302      	movs	r3, #2
 80058e0:	e018      	b.n	8005914 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	7c1b      	ldrb	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005920 <USBD_CDC_Init+0x1e8>)
 80058ec:	7819      	ldrb	r1, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80058f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f002 fbeb 	bl	80080d4 <USBD_LL_PrepareReceive>
 80058fe:	e008      	b.n	8005912 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005900:	4b07      	ldr	r3, [pc, #28]	@ (8005920 <USBD_CDC_Init+0x1e8>)
 8005902:	7819      	ldrb	r1, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800590a:	2340      	movs	r3, #64	@ 0x40
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f002 fbe1 	bl	80080d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20000093 	.word	0x20000093
 8005920:	20000094 	.word	0x20000094
 8005924:	20000095 	.word	0x20000095

08005928 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005934:	4b3a      	ldr	r3, [pc, #232]	@ (8005a20 <USBD_CDC_DeInit+0xf8>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f002 fb01 	bl	8007f42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005940:	4b37      	ldr	r3, [pc, #220]	@ (8005a20 <USBD_CDC_DeInit+0xf8>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	f003 020f 	and.w	r2, r3, #15
 8005948:	6879      	ldr	r1, [r7, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	3324      	adds	r3, #36	@ 0x24
 8005956:	2200      	movs	r2, #0
 8005958:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800595a:	4b32      	ldr	r3, [pc, #200]	@ (8005a24 <USBD_CDC_DeInit+0xfc>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f002 faee 	bl	8007f42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005966:	4b2f      	ldr	r3, [pc, #188]	@ (8005a24 <USBD_CDC_DeInit+0xfc>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f003 020f 	and.w	r2, r3, #15
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800597e:	2200      	movs	r2, #0
 8005980:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005982:	4b29      	ldr	r3, [pc, #164]	@ (8005a28 <USBD_CDC_DeInit+0x100>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f002 fada 	bl	8007f42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800598e:	4b26      	ldr	r3, [pc, #152]	@ (8005a28 <USBD_CDC_DeInit+0x100>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f003 020f 	and.w	r2, r3, #15
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	440b      	add	r3, r1
 80059a2:	3324      	adds	r3, #36	@ 0x24
 80059a4:	2200      	movs	r2, #0
 80059a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80059a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005a28 <USBD_CDC_DeInit+0x100>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	f003 020f 	and.w	r2, r3, #15
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	3326      	adds	r3, #38	@ 0x26
 80059be:	2200      	movs	r2, #0
 80059c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	32b0      	adds	r2, #176	@ 0xb0
 80059cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01f      	beq.n	8005a14 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	33b0      	adds	r3, #176	@ 0xb0
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	32b0      	adds	r2, #176	@ 0xb0
 80059f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f002 fc28 	bl	800824c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	32b0      	adds	r2, #176	@ 0xb0
 8005a06:	2100      	movs	r1, #0
 8005a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000093 	.word	0x20000093
 8005a24:	20000094 	.word	0x20000094
 8005a28:	20000095 	.word	0x20000095

08005a2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	32b0      	adds	r2, #176	@ 0xb0
 8005a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e0bf      	b.n	8005bdc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d050      	beq.n	8005b0a <USBD_CDC_Setup+0xde>
 8005a68:	2b20      	cmp	r3, #32
 8005a6a:	f040 80af 	bne.w	8005bcc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	88db      	ldrh	r3, [r3, #6]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d03a      	beq.n	8005aec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b25b      	sxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	da1b      	bge.n	8005ab8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	33b0      	adds	r3, #176	@ 0xb0
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005a96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	88d2      	ldrh	r2, [r2, #6]
 8005a9c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	88db      	ldrh	r3, [r3, #6]
 8005aa2:	2b07      	cmp	r3, #7
 8005aa4:	bf28      	it	cs
 8005aa6:	2307      	movcs	r3, #7
 8005aa8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	89fa      	ldrh	r2, [r7, #14]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f001 fdbd 	bl	8007630 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005ab6:	e090      	b.n	8005bda <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	785a      	ldrb	r2, [r3, #1]
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	88db      	ldrh	r3, [r3, #6]
 8005ac6:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ac8:	d803      	bhi.n	8005ad2 <USBD_CDC_Setup+0xa6>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	88db      	ldrh	r3, [r3, #6]
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	e000      	b.n	8005ad4 <USBD_CDC_Setup+0xa8>
 8005ad2:	2240      	movs	r2, #64	@ 0x40
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005ada:	6939      	ldr	r1, [r7, #16]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f001 fdcf 	bl	8007688 <USBD_CtlPrepareRx>
      break;
 8005aea:	e076      	b.n	8005bda <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	33b0      	adds	r3, #176	@ 0xb0
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	7850      	ldrb	r0, [r2, #1]
 8005b02:	2200      	movs	r2, #0
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	4798      	blx	r3
      break;
 8005b08:	e067      	b.n	8005bda <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	2b0b      	cmp	r3, #11
 8005b10:	d851      	bhi.n	8005bb6 <USBD_CDC_Setup+0x18a>
 8005b12:	a201      	add	r2, pc, #4	@ (adr r2, 8005b18 <USBD_CDC_Setup+0xec>)
 8005b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b18:	08005b49 	.word	0x08005b49
 8005b1c:	08005bc5 	.word	0x08005bc5
 8005b20:	08005bb7 	.word	0x08005bb7
 8005b24:	08005bb7 	.word	0x08005bb7
 8005b28:	08005bb7 	.word	0x08005bb7
 8005b2c:	08005bb7 	.word	0x08005bb7
 8005b30:	08005bb7 	.word	0x08005bb7
 8005b34:	08005bb7 	.word	0x08005bb7
 8005b38:	08005bb7 	.word	0x08005bb7
 8005b3c:	08005bb7 	.word	0x08005bb7
 8005b40:	08005b73 	.word	0x08005b73
 8005b44:	08005b9d 	.word	0x08005b9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d107      	bne.n	8005b64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b54:	f107 030a 	add.w	r3, r7, #10
 8005b58:	2202      	movs	r2, #2
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f001 fd67 	bl	8007630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b62:	e032      	b.n	8005bca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 fce5 	bl	8007536 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	75fb      	strb	r3, [r7, #23]
          break;
 8005b70:	e02b      	b.n	8005bca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d107      	bne.n	8005b8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b7e:	f107 030d 	add.w	r3, r7, #13
 8005b82:	2201      	movs	r2, #1
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 fd52 	bl	8007630 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b8c:	e01d      	b.n	8005bca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 fcd0 	bl	8007536 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b96:	2303      	movs	r3, #3
 8005b98:	75fb      	strb	r3, [r7, #23]
          break;
 8005b9a:	e016      	b.n	8005bca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d00f      	beq.n	8005bc8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 fcc3 	bl	8007536 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005bb4:	e008      	b.n	8005bc8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 fcbc 	bl	8007536 <USBD_CtlError>
          ret = USBD_FAIL;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	75fb      	strb	r3, [r7, #23]
          break;
 8005bc2:	e002      	b.n	8005bca <USBD_CDC_Setup+0x19e>
          break;
 8005bc4:	bf00      	nop
 8005bc6:	e008      	b.n	8005bda <USBD_CDC_Setup+0x1ae>
          break;
 8005bc8:	bf00      	nop
      }
      break;
 8005bca:	e006      	b.n	8005bda <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 fcb1 	bl	8007536 <USBD_CtlError>
      ret = USBD_FAIL;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bd8:	bf00      	nop
  }

  return (uint8_t)ret;
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005bf6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	32b0      	adds	r2, #176	@ 0xb0
 8005c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e065      	b.n	8005cda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	32b0      	adds	r2, #176	@ 0xb0
 8005c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c1e:	78fb      	ldrb	r3, [r7, #3]
 8005c20:	f003 020f 	and.w	r2, r3, #15
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	3318      	adds	r3, #24
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d02f      	beq.n	8005c98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	f003 020f 	and.w	r2, r3, #15
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	4613      	mov	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	3318      	adds	r3, #24
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	f003 010f 	and.w	r1, r3, #15
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	460b      	mov	r3, r1
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	440b      	add	r3, r1
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4403      	add	r3, r0
 8005c60:	331c      	adds	r3, #28
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d112      	bne.n	8005c98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	f003 020f 	and.w	r2, r3, #15
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	3318      	adds	r3, #24
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c8a:	78f9      	ldrb	r1, [r7, #3]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	2200      	movs	r2, #0
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f002 f9fe 	bl	8008092 <USBD_LL_Transmit>
 8005c96:	e01f      	b.n	8005cd8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	33b0      	adds	r3, #176	@ 0xb0
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d010      	beq.n	8005cd8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	33b0      	adds	r3, #176	@ 0xb0
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b084      	sub	sp, #16
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	460b      	mov	r3, r1
 8005cec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	32b0      	adds	r2, #176	@ 0xb0
 8005cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	32b0      	adds	r2, #176	@ 0xb0
 8005d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e01a      	b.n	8005d4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f002 f9fc 	bl	8008116 <USBD_LL_GetRxDataSize>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	33b0      	adds	r3, #176	@ 0xb0
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005d44:	4611      	mov	r1, r2
 8005d46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b084      	sub	sp, #16
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	32b0      	adds	r2, #176	@ 0xb0
 8005d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e024      	b.n	8005dbe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	33b0      	adds	r3, #176	@ 0xb0
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d019      	beq.n	8005dbc <USBD_CDC_EP0_RxReady+0x6a>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005d8e:	2bff      	cmp	r3, #255	@ 0xff
 8005d90:	d014      	beq.n	8005dbc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	33b0      	adds	r3, #176	@ 0xb0
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005daa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005db2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	22ff      	movs	r2, #255	@ 0xff
 8005db8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b086      	sub	sp, #24
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005dd0:	2182      	movs	r1, #130	@ 0x82
 8005dd2:	4818      	ldr	r0, [pc, #96]	@ (8005e34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005dd4:	f000 fd4f 	bl	8006876 <USBD_GetEpDesc>
 8005dd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005dda:	2101      	movs	r1, #1
 8005ddc:	4815      	ldr	r0, [pc, #84]	@ (8005e34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005dde:	f000 fd4a 	bl	8006876 <USBD_GetEpDesc>
 8005de2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005de4:	2181      	movs	r1, #129	@ 0x81
 8005de6:	4813      	ldr	r0, [pc, #76]	@ (8005e34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005de8:	f000 fd45 	bl	8006876 <USBD_GetEpDesc>
 8005dec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d002      	beq.n	8005dfa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2210      	movs	r2, #16
 8005df8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d006      	beq.n	8005e0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e08:	711a      	strb	r2, [r3, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d006      	beq.n	8005e22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e1c:	711a      	strb	r2, [r3, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2243      	movs	r2, #67	@ 0x43
 8005e26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e28:	4b02      	ldr	r3, [pc, #8]	@ (8005e34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000050 	.word	0x20000050

08005e38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e40:	2182      	movs	r1, #130	@ 0x82
 8005e42:	4818      	ldr	r0, [pc, #96]	@ (8005ea4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e44:	f000 fd17 	bl	8006876 <USBD_GetEpDesc>
 8005e48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	4815      	ldr	r0, [pc, #84]	@ (8005ea4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e4e:	f000 fd12 	bl	8006876 <USBD_GetEpDesc>
 8005e52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e54:	2181      	movs	r1, #129	@ 0x81
 8005e56:	4813      	ldr	r0, [pc, #76]	@ (8005ea4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e58:	f000 fd0d 	bl	8006876 <USBD_GetEpDesc>
 8005e5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2210      	movs	r2, #16
 8005e68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d006      	beq.n	8005e7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2200      	movs	r2, #0
 8005e74:	711a      	strb	r2, [r3, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f042 0202 	orr.w	r2, r2, #2
 8005e7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d006      	beq.n	8005e92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	711a      	strb	r2, [r3, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f042 0202 	orr.w	r2, r2, #2
 8005e90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2243      	movs	r2, #67	@ 0x43
 8005e96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e98:	4b02      	ldr	r3, [pc, #8]	@ (8005ea4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20000050 	.word	0x20000050

08005ea8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005eb0:	2182      	movs	r1, #130	@ 0x82
 8005eb2:	4818      	ldr	r0, [pc, #96]	@ (8005f14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005eb4:	f000 fcdf 	bl	8006876 <USBD_GetEpDesc>
 8005eb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005eba:	2101      	movs	r1, #1
 8005ebc:	4815      	ldr	r0, [pc, #84]	@ (8005f14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ebe:	f000 fcda 	bl	8006876 <USBD_GetEpDesc>
 8005ec2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ec4:	2181      	movs	r1, #129	@ 0x81
 8005ec6:	4813      	ldr	r0, [pc, #76]	@ (8005f14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ec8:	f000 fcd5 	bl	8006876 <USBD_GetEpDesc>
 8005ecc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2210      	movs	r2, #16
 8005ed8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d006      	beq.n	8005eee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ee8:	711a      	strb	r2, [r3, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d006      	beq.n	8005f02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005efc:	711a      	strb	r2, [r3, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2243      	movs	r2, #67	@ 0x43
 8005f06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f08:	4b02      	ldr	r3, [pc, #8]	@ (8005f14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000050 	.word	0x20000050

08005f18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	220a      	movs	r2, #10
 8005f24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f26:	4b03      	ldr	r3, [pc, #12]	@ (8005f34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	2000000c 	.word	0x2000000c

08005f38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e009      	b.n	8005f60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	33b0      	adds	r3, #176	@ 0xb0
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b087      	sub	sp, #28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	32b0      	adds	r2, #176	@ 0xb0
 8005f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f86:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e008      	b.n	8005fa4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	32b0      	adds	r2, #176	@ 0xb0
 8005fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e004      	b.n	8005fde <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	32b0      	adds	r2, #176	@ 0xb0
 8005ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006002:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006004:	2301      	movs	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800600e:	2303      	movs	r3, #3
 8006010:	e025      	b.n	800605e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006018:	2b00      	cmp	r3, #0
 800601a:	d11f      	bne.n	800605c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2201      	movs	r2, #1
 8006020:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006024:	4b10      	ldr	r3, [pc, #64]	@ (8006068 <USBD_CDC_TransmitPacket+0x7c>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	f003 020f 	and.w	r2, r3, #15
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	009b      	lsls	r3, r3, #2
 800603c:	4403      	add	r3, r0
 800603e:	3318      	adds	r3, #24
 8006040:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006042:	4b09      	ldr	r3, [pc, #36]	@ (8006068 <USBD_CDC_TransmitPacket+0x7c>)
 8006044:	7819      	ldrb	r1, [r3, #0]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f002 f81d 	bl	8008092 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000093 	.word	0x20000093

0800606c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	32b0      	adds	r2, #176	@ 0xb0
 800607e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006082:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	32b0      	adds	r2, #176	@ 0xb0
 800608e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006096:	2303      	movs	r3, #3
 8006098:	e018      	b.n	80060cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	7c1b      	ldrb	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060a2:	4b0c      	ldr	r3, [pc, #48]	@ (80060d4 <USBD_CDC_ReceivePacket+0x68>)
 80060a4:	7819      	ldrb	r1, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80060ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f002 f80f 	bl	80080d4 <USBD_LL_PrepareReceive>
 80060b6:	e008      	b.n	80060ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060b8:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <USBD_CDC_ReceivePacket+0x68>)
 80060ba:	7819      	ldrb	r1, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80060c2:	2340      	movs	r3, #64	@ 0x40
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f002 f805 	bl	80080d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000094 	.word	0x20000094

080060d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	4613      	mov	r3, r2
 80060e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e01f      	b.n	8006130 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	79fa      	ldrb	r2, [r7, #7]
 8006122:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f001 fe7f 	bl	8007e28 <USBD_LL_Init>
 800612a:	4603      	mov	r3, r0
 800612c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006142:	2300      	movs	r3, #0
 8006144:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800614c:	2303      	movs	r3, #3
 800614e:	e025      	b.n	800619c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	32ae      	adds	r2, #174	@ 0xae
 8006162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00f      	beq.n	800618c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	32ae      	adds	r2, #174	@ 0xae
 8006176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800617a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617c:	f107 020e 	add.w	r2, r7, #14
 8006180:	4610      	mov	r0, r2
 8006182:	4798      	blx	r3
 8006184:	4602      	mov	r2, r0
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 fe87 	bl	8007ec0 <USBD_LL_Start>
 80061b2:	4603      	mov	r3, r0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	460b      	mov	r3, r1
 80061dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d009      	beq.n	8006200 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	78fa      	ldrb	r2, [r7, #3]
 80061f6:	4611      	mov	r1, r2
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4798      	blx	r3
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006200:	7bfb      	ldrb	r3, [r7, #15]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	460b      	mov	r3, r1
 8006214:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	4611      	mov	r1, r2
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006230:	2303      	movs	r3, #3
 8006232:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	f001 f936 	bl	80074c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006264:	461a      	mov	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	2b02      	cmp	r3, #2
 8006278:	d01a      	beq.n	80062b0 <USBD_LL_SetupStage+0x72>
 800627a:	2b02      	cmp	r3, #2
 800627c:	d822      	bhi.n	80062c4 <USBD_LL_SetupStage+0x86>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <USBD_LL_SetupStage+0x4a>
 8006282:	2b01      	cmp	r3, #1
 8006284:	d00a      	beq.n	800629c <USBD_LL_SetupStage+0x5e>
 8006286:	e01d      	b.n	80062c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fb63 	bl	800695c <USBD_StdDevReq>
 8006296:	4603      	mov	r3, r0
 8006298:	73fb      	strb	r3, [r7, #15]
      break;
 800629a:	e020      	b.n	80062de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fbcb 	bl	8006a40 <USBD_StdItfReq>
 80062aa:	4603      	mov	r3, r0
 80062ac:	73fb      	strb	r3, [r7, #15]
      break;
 80062ae:	e016      	b.n	80062de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fc2d 	bl	8006b18 <USBD_StdEPReq>
 80062be:	4603      	mov	r3, r0
 80062c0:	73fb      	strb	r3, [r7, #15]
      break;
 80062c2:	e00c      	b.n	80062de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80062ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 fe54 	bl	8007f80 <USBD_LL_StallEP>
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]
      break;
 80062dc:	bf00      	nop
  }

  return ret;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	460b      	mov	r3, r1
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80062fa:	7afb      	ldrb	r3, [r7, #11]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d16e      	bne.n	80063de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006306:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800630e:	2b03      	cmp	r3, #3
 8006310:	f040 8098 	bne.w	8006444 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	429a      	cmp	r2, r3
 800631e:	d913      	bls.n	8006348 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	1ad2      	subs	r2, r2, r3
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	4293      	cmp	r3, r2
 8006338:	bf28      	it	cs
 800633a:	4613      	movcs	r3, r2
 800633c:	461a      	mov	r2, r3
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f001 f9be 	bl	80076c2 <USBD_CtlContinueRx>
 8006346:	e07d      	b.n	8006444 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	2b02      	cmp	r3, #2
 8006354:	d014      	beq.n	8006380 <USBD_LL_DataOutStage+0x98>
 8006356:	2b02      	cmp	r3, #2
 8006358:	d81d      	bhi.n	8006396 <USBD_LL_DataOutStage+0xae>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <USBD_LL_DataOutStage+0x7c>
 800635e:	2b01      	cmp	r3, #1
 8006360:	d003      	beq.n	800636a <USBD_LL_DataOutStage+0x82>
 8006362:	e018      	b.n	8006396 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	75bb      	strb	r3, [r7, #22]
            break;
 8006368:	e018      	b.n	800639c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006370:	b2db      	uxtb	r3, r3
 8006372:	4619      	mov	r1, r3
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 fa64 	bl	8006842 <USBD_CoreFindIF>
 800637a:	4603      	mov	r3, r0
 800637c:	75bb      	strb	r3, [r7, #22]
            break;
 800637e:	e00d      	b.n	800639c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006386:	b2db      	uxtb	r3, r3
 8006388:	4619      	mov	r1, r3
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fa66 	bl	800685c <USBD_CoreFindEP>
 8006390:	4603      	mov	r3, r0
 8006392:	75bb      	strb	r3, [r7, #22]
            break;
 8006394:	e002      	b.n	800639c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	75bb      	strb	r3, [r7, #22]
            break;
 800639a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800639c:	7dbb      	ldrb	r3, [r7, #22]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d119      	bne.n	80063d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d113      	bne.n	80063d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80063ae:	7dba      	ldrb	r2, [r7, #22]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	32ae      	adds	r2, #174	@ 0xae
 80063b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80063be:	7dba      	ldrb	r2, [r7, #22]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80063c6:	7dba      	ldrb	r2, [r7, #22]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	32ae      	adds	r2, #174	@ 0xae
 80063cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f001 f984 	bl	80076e4 <USBD_CtlSendStatus>
 80063dc:	e032      	b.n	8006444 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80063de:	7afb      	ldrb	r3, [r7, #11]
 80063e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	4619      	mov	r1, r3
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 fa37 	bl	800685c <USBD_CoreFindEP>
 80063ee:	4603      	mov	r3, r0
 80063f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063f2:	7dbb      	ldrb	r3, [r7, #22]
 80063f4:	2bff      	cmp	r3, #255	@ 0xff
 80063f6:	d025      	beq.n	8006444 <USBD_LL_DataOutStage+0x15c>
 80063f8:	7dbb      	ldrb	r3, [r7, #22]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d122      	bne.n	8006444 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b03      	cmp	r3, #3
 8006408:	d117      	bne.n	800643a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800640a:	7dba      	ldrb	r2, [r7, #22]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	32ae      	adds	r2, #174	@ 0xae
 8006410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00f      	beq.n	800643a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800641a:	7dba      	ldrb	r2, [r7, #22]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006422:	7dba      	ldrb	r2, [r7, #22]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	32ae      	adds	r2, #174	@ 0xae
 8006428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	7afa      	ldrb	r2, [r7, #11]
 8006430:	4611      	mov	r1, r2
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	4798      	blx	r3
 8006436:	4603      	mov	r3, r0
 8006438:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006440:	7dfb      	ldrb	r3, [r7, #23]
 8006442:	e000      	b.n	8006446 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b086      	sub	sp, #24
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	460b      	mov	r3, r1
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800645c:	7afb      	ldrb	r3, [r7, #11]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d16f      	bne.n	8006542 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3314      	adds	r3, #20
 8006466:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800646e:	2b02      	cmp	r3, #2
 8006470:	d15a      	bne.n	8006528 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	429a      	cmp	r2, r3
 800647c:	d914      	bls.n	80064a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	1ad2      	subs	r2, r2, r3
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	461a      	mov	r2, r3
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f001 f8e6 	bl	8007666 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800649a:	2300      	movs	r3, #0
 800649c:	2200      	movs	r2, #0
 800649e:	2100      	movs	r1, #0
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f001 fe17 	bl	80080d4 <USBD_LL_PrepareReceive>
 80064a6:	e03f      	b.n	8006528 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d11c      	bne.n	80064ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80064bc:	429a      	cmp	r2, r3
 80064be:	d316      	bcc.n	80064ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d20f      	bcs.n	80064ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80064ce:	2200      	movs	r2, #0
 80064d0:	2100      	movs	r1, #0
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f001 f8c7 	bl	8007666 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064e0:	2300      	movs	r3, #0
 80064e2:	2200      	movs	r2, #0
 80064e4:	2100      	movs	r1, #0
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f001 fdf4 	bl	80080d4 <USBD_LL_PrepareReceive>
 80064ec:	e01c      	b.n	8006528 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d10f      	bne.n	800651a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d009      	beq.n	800651a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	68f8      	ldr	r0, [r7, #12]
 8006518:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800651a:	2180      	movs	r1, #128	@ 0x80
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f001 fd2f 	bl	8007f80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f001 f8f1 	bl	800770a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d03a      	beq.n	80065a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7ff fe42 	bl	80061bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006540:	e032      	b.n	80065a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006548:	b2db      	uxtb	r3, r3
 800654a:	4619      	mov	r1, r3
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f985 	bl	800685c <USBD_CoreFindEP>
 8006552:	4603      	mov	r3, r0
 8006554:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006556:	7dfb      	ldrb	r3, [r7, #23]
 8006558:	2bff      	cmp	r3, #255	@ 0xff
 800655a:	d025      	beq.n	80065a8 <USBD_LL_DataInStage+0x15a>
 800655c:	7dfb      	ldrb	r3, [r7, #23]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d122      	bne.n	80065a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b03      	cmp	r3, #3
 800656c:	d11c      	bne.n	80065a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800656e:	7dfa      	ldrb	r2, [r7, #23]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	32ae      	adds	r2, #174	@ 0xae
 8006574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d014      	beq.n	80065a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800657e:	7dfa      	ldrb	r2, [r7, #23]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006586:	7dfa      	ldrb	r2, [r7, #23]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	32ae      	adds	r2, #174	@ 0xae
 800658c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	7afa      	ldrb	r2, [r7, #11]
 8006594:	4611      	mov	r1, r2
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	4798      	blx	r3
 800659a:	4603      	mov	r3, r0
 800659c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800659e:	7dbb      	ldrb	r3, [r7, #22]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d001      	beq.n	80065a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80065a4:	7dbb      	ldrb	r3, [r7, #22]
 80065a6:	e000      	b.n	80065aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d014      	beq.n	8006618 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00e      	beq.n	8006618 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6852      	ldr	r2, [r2, #4]
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	4611      	mov	r1, r2
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	4798      	blx	r3
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006614:	2303      	movs	r3, #3
 8006616:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006618:	2340      	movs	r3, #64	@ 0x40
 800661a:	2200      	movs	r2, #0
 800661c:	2100      	movs	r1, #0
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 fc69 	bl	8007ef6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2240      	movs	r2, #64	@ 0x40
 8006630:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006634:	2340      	movs	r3, #64	@ 0x40
 8006636:	2200      	movs	r2, #0
 8006638:	2180      	movs	r1, #128	@ 0x80
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fc5b 	bl	8007ef6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2240      	movs	r2, #64	@ 0x40
 800664a:	621a      	str	r2, [r3, #32]

  return ret;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	78fa      	ldrb	r2, [r7, #3]
 8006666:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b04      	cmp	r3, #4
 8006688:	d006      	beq.n	8006698 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006690:	b2da      	uxtb	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2204      	movs	r2, #4
 800669c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d106      	bne.n	80066d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d110      	bne.n	8006714 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00b      	beq.n	8006714 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3708      	adds	r7, #8
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b082      	sub	sp, #8
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	460b      	mov	r3, r1
 8006728:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	32ae      	adds	r2, #174	@ 0xae
 8006734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800673c:	2303      	movs	r3, #3
 800673e:	e01c      	b.n	800677a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b03      	cmp	r3, #3
 800674a:	d115      	bne.n	8006778 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	32ae      	adds	r2, #174	@ 0xae
 8006756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00b      	beq.n	8006778 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	32ae      	adds	r2, #174	@ 0xae
 800676a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	78fa      	ldrb	r2, [r7, #3]
 8006772:	4611      	mov	r1, r2
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	460b      	mov	r3, r1
 800678c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	32ae      	adds	r2, #174	@ 0xae
 8006798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e01c      	b.n	80067de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d115      	bne.n	80067dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	32ae      	adds	r2, #174	@ 0xae
 80067ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	32ae      	adds	r2, #174	@ 0xae
 80067ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	4611      	mov	r1, r2
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006804:	2300      	movs	r3, #0
 8006806:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6852      	ldr	r2, [r2, #4]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	4611      	mov	r1, r2
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006834:	2303      	movs	r3, #3
 8006836:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006838:	7bfb      	ldrb	r3, [r7, #15]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	460b      	mov	r3, r1
 800684c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800684e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006868:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800686a:	4618      	mov	r0, r3
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b086      	sub	sp, #24
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	460b      	mov	r3, r1
 8006880:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	885b      	ldrh	r3, [r3, #2]
 8006892:	b29b      	uxth	r3, r3
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	7812      	ldrb	r2, [r2, #0]
 8006898:	4293      	cmp	r3, r2
 800689a:	d91f      	bls.n	80068dc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80068a2:	e013      	b.n	80068cc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80068a4:	f107 030a 	add.w	r3, r7, #10
 80068a8:	4619      	mov	r1, r3
 80068aa:	6978      	ldr	r0, [r7, #20]
 80068ac:	f000 f81b 	bl	80068e6 <USBD_GetNextDesc>
 80068b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	785b      	ldrb	r3, [r3, #1]
 80068b6:	2b05      	cmp	r3, #5
 80068b8:	d108      	bne.n	80068cc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	789b      	ldrb	r3, [r3, #2]
 80068c2:	78fa      	ldrb	r2, [r7, #3]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d008      	beq.n	80068da <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80068c8:	2300      	movs	r3, #0
 80068ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	885b      	ldrh	r3, [r3, #2]
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	897b      	ldrh	r3, [r7, #10]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d8e5      	bhi.n	80068a4 <USBD_GetEpDesc+0x2e>
 80068d8:	e000      	b.n	80068dc <USBD_GetEpDesc+0x66>
          break;
 80068da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80068dc:	693b      	ldr	r3, [r7, #16]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b085      	sub	sp, #20
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	7812      	ldrb	r2, [r2, #0]
 80068fc:	4413      	add	r3, r2
 80068fe:	b29a      	uxth	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006910:	68fb      	ldr	r3, [r7, #12]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800691e:	b480      	push	{r7}
 8006920:	b087      	sub	sp, #28
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	3301      	adds	r3, #1
 8006934:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800693c:	8a3b      	ldrh	r3, [r7, #16]
 800693e:	021b      	lsls	r3, r3, #8
 8006940:	b21a      	sxth	r2, r3
 8006942:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006946:	4313      	orrs	r3, r2
 8006948:	b21b      	sxth	r3, r3
 800694a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800694c:	89fb      	ldrh	r3, [r7, #14]
}
 800694e:	4618      	mov	r0, r3
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
	...

0800695c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006972:	2b40      	cmp	r3, #64	@ 0x40
 8006974:	d005      	beq.n	8006982 <USBD_StdDevReq+0x26>
 8006976:	2b40      	cmp	r3, #64	@ 0x40
 8006978:	d857      	bhi.n	8006a2a <USBD_StdDevReq+0xce>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00f      	beq.n	800699e <USBD_StdDevReq+0x42>
 800697e:	2b20      	cmp	r3, #32
 8006980:	d153      	bne.n	8006a2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	32ae      	adds	r2, #174	@ 0xae
 800698c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4798      	blx	r3
 8006998:	4603      	mov	r3, r0
 800699a:	73fb      	strb	r3, [r7, #15]
      break;
 800699c:	e04a      	b.n	8006a34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	785b      	ldrb	r3, [r3, #1]
 80069a2:	2b09      	cmp	r3, #9
 80069a4:	d83b      	bhi.n	8006a1e <USBD_StdDevReq+0xc2>
 80069a6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ac <USBD_StdDevReq+0x50>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	08006a01 	.word	0x08006a01
 80069b0:	08006a15 	.word	0x08006a15
 80069b4:	08006a1f 	.word	0x08006a1f
 80069b8:	08006a0b 	.word	0x08006a0b
 80069bc:	08006a1f 	.word	0x08006a1f
 80069c0:	080069df 	.word	0x080069df
 80069c4:	080069d5 	.word	0x080069d5
 80069c8:	08006a1f 	.word	0x08006a1f
 80069cc:	080069f7 	.word	0x080069f7
 80069d0:	080069e9 	.word	0x080069e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa3c 	bl	8006e54 <USBD_GetDescriptor>
          break;
 80069dc:	e024      	b.n	8006a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fbcb 	bl	800717c <USBD_SetAddress>
          break;
 80069e6:	e01f      	b.n	8006a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fc0a 	bl	8007204 <USBD_SetConfig>
 80069f0:	4603      	mov	r3, r0
 80069f2:	73fb      	strb	r3, [r7, #15]
          break;
 80069f4:	e018      	b.n	8006a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fcad 	bl	8007358 <USBD_GetConfig>
          break;
 80069fe:	e013      	b.n	8006a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fcde 	bl	80073c4 <USBD_GetStatus>
          break;
 8006a08:	e00e      	b.n	8006a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fd0d 	bl	800742c <USBD_SetFeature>
          break;
 8006a12:	e009      	b.n	8006a28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fd31 	bl	800747e <USBD_ClrFeature>
          break;
 8006a1c:	e004      	b.n	8006a28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fd88 	bl	8007536 <USBD_CtlError>
          break;
 8006a26:	bf00      	nop
      }
      break;
 8006a28:	e004      	b.n	8006a34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fd82 	bl	8007536 <USBD_CtlError>
      break;
 8006a32:	bf00      	nop
  }

  return ret;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop

08006a40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006a56:	2b40      	cmp	r3, #64	@ 0x40
 8006a58:	d005      	beq.n	8006a66 <USBD_StdItfReq+0x26>
 8006a5a:	2b40      	cmp	r3, #64	@ 0x40
 8006a5c:	d852      	bhi.n	8006b04 <USBD_StdItfReq+0xc4>
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d001      	beq.n	8006a66 <USBD_StdItfReq+0x26>
 8006a62:	2b20      	cmp	r3, #32
 8006a64:	d14e      	bne.n	8006b04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d840      	bhi.n	8006af6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	889b      	ldrh	r3, [r3, #4]
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d836      	bhi.n	8006aec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	889b      	ldrh	r3, [r3, #4]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff fedb 	bl	8006842 <USBD_CoreFindIF>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	2bff      	cmp	r3, #255	@ 0xff
 8006a94:	d01d      	beq.n	8006ad2 <USBD_StdItfReq+0x92>
 8006a96:	7bbb      	ldrb	r3, [r7, #14]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d11a      	bne.n	8006ad2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006a9c:	7bba      	ldrb	r2, [r7, #14]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	32ae      	adds	r2, #174	@ 0xae
 8006aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00f      	beq.n	8006acc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006aac:	7bba      	ldrb	r2, [r7, #14]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ab4:	7bba      	ldrb	r2, [r7, #14]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	32ae      	adds	r2, #174	@ 0xae
 8006aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	4798      	blx	r3
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006aca:	e004      	b.n	8006ad6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006acc:	2303      	movs	r3, #3
 8006ace:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006ad0:	e001      	b.n	8006ad6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	88db      	ldrh	r3, [r3, #6]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d110      	bne.n	8006b00 <USBD_StdItfReq+0xc0>
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10d      	bne.n	8006b00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fdfd 	bl	80076e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006aea:	e009      	b.n	8006b00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006aec:	6839      	ldr	r1, [r7, #0]
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fd21 	bl	8007536 <USBD_CtlError>
          break;
 8006af4:	e004      	b.n	8006b00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fd1c 	bl	8007536 <USBD_CtlError>
          break;
 8006afe:	e000      	b.n	8006b02 <USBD_StdItfReq+0xc2>
          break;
 8006b00:	bf00      	nop
      }
      break;
 8006b02:	e004      	b.n	8006b0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fd15 	bl	8007536 <USBD_CtlError>
      break;
 8006b0c:	bf00      	nop
  }

  return ret;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	889b      	ldrh	r3, [r3, #4]
 8006b2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b34:	2b40      	cmp	r3, #64	@ 0x40
 8006b36:	d007      	beq.n	8006b48 <USBD_StdEPReq+0x30>
 8006b38:	2b40      	cmp	r3, #64	@ 0x40
 8006b3a:	f200 817f 	bhi.w	8006e3c <USBD_StdEPReq+0x324>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d02a      	beq.n	8006b98 <USBD_StdEPReq+0x80>
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	f040 817a 	bne.w	8006e3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff fe85 	bl	800685c <USBD_CoreFindEP>
 8006b52:	4603      	mov	r3, r0
 8006b54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b56:	7b7b      	ldrb	r3, [r7, #13]
 8006b58:	2bff      	cmp	r3, #255	@ 0xff
 8006b5a:	f000 8174 	beq.w	8006e46 <USBD_StdEPReq+0x32e>
 8006b5e:	7b7b      	ldrb	r3, [r7, #13]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f040 8170 	bne.w	8006e46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006b66:	7b7a      	ldrb	r2, [r7, #13]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006b6e:	7b7a      	ldrb	r2, [r7, #13]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	32ae      	adds	r2, #174	@ 0xae
 8006b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 8163 	beq.w	8006e46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006b80:	7b7a      	ldrb	r2, [r7, #13]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	32ae      	adds	r2, #174	@ 0xae
 8006b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
 8006b92:	4603      	mov	r3, r0
 8006b94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b96:	e156      	b.n	8006e46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	785b      	ldrb	r3, [r3, #1]
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d008      	beq.n	8006bb2 <USBD_StdEPReq+0x9a>
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	f300 8145 	bgt.w	8006e30 <USBD_StdEPReq+0x318>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 809b 	beq.w	8006ce2 <USBD_StdEPReq+0x1ca>
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d03c      	beq.n	8006c2a <USBD_StdEPReq+0x112>
 8006bb0:	e13e      	b.n	8006e30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d002      	beq.n	8006bc4 <USBD_StdEPReq+0xac>
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d016      	beq.n	8006bf0 <USBD_StdEPReq+0xd8>
 8006bc2:	e02c      	b.n	8006c1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00d      	beq.n	8006be6 <USBD_StdEPReq+0xce>
 8006bca:	7bbb      	ldrb	r3, [r7, #14]
 8006bcc:	2b80      	cmp	r3, #128	@ 0x80
 8006bce:	d00a      	beq.n	8006be6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 f9d3 	bl	8007f80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bda:	2180      	movs	r1, #128	@ 0x80
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 f9cf 	bl	8007f80 <USBD_LL_StallEP>
 8006be2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006be4:	e020      	b.n	8006c28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fca4 	bl	8007536 <USBD_CtlError>
              break;
 8006bee:	e01b      	b.n	8006c28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	885b      	ldrh	r3, [r3, #2]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10e      	bne.n	8006c16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00b      	beq.n	8006c16 <USBD_StdEPReq+0xfe>
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	2b80      	cmp	r3, #128	@ 0x80
 8006c02:	d008      	beq.n	8006c16 <USBD_StdEPReq+0xfe>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	88db      	ldrh	r3, [r3, #6]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d104      	bne.n	8006c16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 f9b5 	bl	8007f80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fd64 	bl	80076e4 <USBD_CtlSendStatus>

              break;
 8006c1c:	e004      	b.n	8006c28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fc88 	bl	8007536 <USBD_CtlError>
              break;
 8006c26:	bf00      	nop
          }
          break;
 8006c28:	e107      	b.n	8006e3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d002      	beq.n	8006c3c <USBD_StdEPReq+0x124>
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d016      	beq.n	8006c68 <USBD_StdEPReq+0x150>
 8006c3a:	e04b      	b.n	8006cd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00d      	beq.n	8006c5e <USBD_StdEPReq+0x146>
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b80      	cmp	r3, #128	@ 0x80
 8006c46:	d00a      	beq.n	8006c5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 f997 	bl	8007f80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c52:	2180      	movs	r1, #128	@ 0x80
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 f993 	bl	8007f80 <USBD_LL_StallEP>
 8006c5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c5c:	e040      	b.n	8006ce0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006c5e:	6839      	ldr	r1, [r7, #0]
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fc68 	bl	8007536 <USBD_CtlError>
              break;
 8006c66:	e03b      	b.n	8006ce0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	885b      	ldrh	r3, [r3, #2]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d136      	bne.n	8006cde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d004      	beq.n	8006c84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 f99d 	bl	8007fbe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fd2d 	bl	80076e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff fde4 	bl	800685c <USBD_CoreFindEP>
 8006c94:	4603      	mov	r3, r0
 8006c96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c98:	7b7b      	ldrb	r3, [r7, #13]
 8006c9a:	2bff      	cmp	r3, #255	@ 0xff
 8006c9c:	d01f      	beq.n	8006cde <USBD_StdEPReq+0x1c6>
 8006c9e:	7b7b      	ldrb	r3, [r7, #13]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d11c      	bne.n	8006cde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006ca4:	7b7a      	ldrb	r2, [r7, #13]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006cac:	7b7a      	ldrb	r2, [r7, #13]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	32ae      	adds	r2, #174	@ 0xae
 8006cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d010      	beq.n	8006cde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006cbc:	7b7a      	ldrb	r2, [r7, #13]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	32ae      	adds	r2, #174	@ 0xae
 8006cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
 8006cce:	4603      	mov	r3, r0
 8006cd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006cd2:	e004      	b.n	8006cde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fc2d 	bl	8007536 <USBD_CtlError>
              break;
 8006cdc:	e000      	b.n	8006ce0 <USBD_StdEPReq+0x1c8>
              break;
 8006cde:	bf00      	nop
          }
          break;
 8006ce0:	e0ab      	b.n	8006e3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d002      	beq.n	8006cf4 <USBD_StdEPReq+0x1dc>
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d032      	beq.n	8006d58 <USBD_StdEPReq+0x240>
 8006cf2:	e097      	b.n	8006e24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cf4:	7bbb      	ldrb	r3, [r7, #14]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d007      	beq.n	8006d0a <USBD_StdEPReq+0x1f2>
 8006cfa:	7bbb      	ldrb	r3, [r7, #14]
 8006cfc:	2b80      	cmp	r3, #128	@ 0x80
 8006cfe:	d004      	beq.n	8006d0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fc17 	bl	8007536 <USBD_CtlError>
                break;
 8006d08:	e091      	b.n	8006e2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	da0b      	bge.n	8006d2a <USBD_StdEPReq+0x212>
 8006d12:	7bbb      	ldrb	r3, [r7, #14]
 8006d14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	3310      	adds	r3, #16
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	4413      	add	r3, r2
 8006d26:	3304      	adds	r3, #4
 8006d28:	e00b      	b.n	8006d42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	4413      	add	r3, r2
 8006d40:	3304      	adds	r3, #4
 8006d42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fc6d 	bl	8007630 <USBD_CtlSendData>
              break;
 8006d56:	e06a      	b.n	8006e2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	da11      	bge.n	8006d84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
 8006d62:	f003 020f 	and.w	r2, r3, #15
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	440b      	add	r3, r1
 8006d72:	3324      	adds	r3, #36	@ 0x24
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d117      	bne.n	8006daa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fbda 	bl	8007536 <USBD_CtlError>
                  break;
 8006d82:	e054      	b.n	8006e2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	f003 020f 	and.w	r2, r3, #15
 8006d8a:	6879      	ldr	r1, [r7, #4]
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fbc7 	bl	8007536 <USBD_CtlError>
                  break;
 8006da8:	e041      	b.n	8006e2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006daa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	da0b      	bge.n	8006dca <USBD_StdEPReq+0x2b2>
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006db8:	4613      	mov	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	3310      	adds	r3, #16
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	3304      	adds	r3, #4
 8006dc8:	e00b      	b.n	8006de2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	4413      	add	r3, r2
 8006de0:	3304      	adds	r3, #4
 8006de2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <USBD_StdEPReq+0x2d8>
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b80      	cmp	r3, #128	@ 0x80
 8006dee:	d103      	bne.n	8006df8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e00e      	b.n	8006e16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f8fd 	bl	8007ffc <USBD_LL_IsStallEP>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e002      	b.n	8006e16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2202      	movs	r2, #2
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fc07 	bl	8007630 <USBD_CtlSendData>
              break;
 8006e22:	e004      	b.n	8006e2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fb85 	bl	8007536 <USBD_CtlError>
              break;
 8006e2c:	bf00      	nop
          }
          break;
 8006e2e:	e004      	b.n	8006e3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fb7f 	bl	8007536 <USBD_CtlError>
          break;
 8006e38:	bf00      	nop
      }
      break;
 8006e3a:	e005      	b.n	8006e48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fb79 	bl	8007536 <USBD_CtlError>
      break;
 8006e44:	e000      	b.n	8006e48 <USBD_StdEPReq+0x330>
      break;
 8006e46:	bf00      	nop
  }

  return ret;
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	885b      	ldrh	r3, [r3, #2]
 8006e6e:	0a1b      	lsrs	r3, r3, #8
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	2b0e      	cmp	r3, #14
 8006e76:	f200 8152 	bhi.w	800711e <USBD_GetDescriptor+0x2ca>
 8006e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e80 <USBD_GetDescriptor+0x2c>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006ef1 	.word	0x08006ef1
 8006e84:	08006f09 	.word	0x08006f09
 8006e88:	08006f49 	.word	0x08006f49
 8006e8c:	0800711f 	.word	0x0800711f
 8006e90:	0800711f 	.word	0x0800711f
 8006e94:	080070bf 	.word	0x080070bf
 8006e98:	080070eb 	.word	0x080070eb
 8006e9c:	0800711f 	.word	0x0800711f
 8006ea0:	0800711f 	.word	0x0800711f
 8006ea4:	0800711f 	.word	0x0800711f
 8006ea8:	0800711f 	.word	0x0800711f
 8006eac:	0800711f 	.word	0x0800711f
 8006eb0:	0800711f 	.word	0x0800711f
 8006eb4:	0800711f 	.word	0x0800711f
 8006eb8:	08006ebd 	.word	0x08006ebd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	7c12      	ldrb	r2, [r2, #16]
 8006ed4:	f107 0108 	add.w	r1, r7, #8
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3
 8006edc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ede:	e126      	b.n	800712e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fb27 	bl	8007536 <USBD_CtlError>
        err++;
 8006ee8:	7afb      	ldrb	r3, [r7, #11]
 8006eea:	3301      	adds	r3, #1
 8006eec:	72fb      	strb	r3, [r7, #11]
      break;
 8006eee:	e11e      	b.n	800712e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	7c12      	ldrb	r2, [r2, #16]
 8006efc:	f107 0108 	add.w	r1, r7, #8
 8006f00:	4610      	mov	r0, r2
 8006f02:	4798      	blx	r3
 8006f04:	60f8      	str	r0, [r7, #12]
      break;
 8006f06:	e112      	b.n	800712e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	7c1b      	ldrb	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10d      	bne.n	8006f2c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f18:	f107 0208 	add.w	r2, r7, #8
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3
 8006f20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3301      	adds	r3, #1
 8006f26:	2202      	movs	r2, #2
 8006f28:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f2a:	e100      	b.n	800712e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f34:	f107 0208 	add.w	r2, r7, #8
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3301      	adds	r3, #1
 8006f42:	2202      	movs	r2, #2
 8006f44:	701a      	strb	r2, [r3, #0]
      break;
 8006f46:	e0f2      	b.n	800712e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	885b      	ldrh	r3, [r3, #2]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b05      	cmp	r3, #5
 8006f50:	f200 80ac 	bhi.w	80070ac <USBD_GetDescriptor+0x258>
 8006f54:	a201      	add	r2, pc, #4	@ (adr r2, 8006f5c <USBD_GetDescriptor+0x108>)
 8006f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5a:	bf00      	nop
 8006f5c:	08006f75 	.word	0x08006f75
 8006f60:	08006fa9 	.word	0x08006fa9
 8006f64:	08006fdd 	.word	0x08006fdd
 8006f68:	08007011 	.word	0x08007011
 8006f6c:	08007045 	.word	0x08007045
 8006f70:	08007079 	.word	0x08007079
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	7c12      	ldrb	r2, [r2, #16]
 8006f8c:	f107 0108 	add.w	r1, r7, #8
 8006f90:	4610      	mov	r0, r2
 8006f92:	4798      	blx	r3
 8006f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f96:	e091      	b.n	80070bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 facb 	bl	8007536 <USBD_CtlError>
            err++;
 8006fa0:	7afb      	ldrb	r3, [r7, #11]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fa6:	e089      	b.n	80070bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	7c12      	ldrb	r2, [r2, #16]
 8006fc0:	f107 0108 	add.w	r1, r7, #8
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4798      	blx	r3
 8006fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fca:	e077      	b.n	80070bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fab1 	bl	8007536 <USBD_CtlError>
            err++;
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fda:	e06f      	b.n	80070bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	f107 0108 	add.w	r1, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ffe:	e05d      	b.n	80070bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa97 	bl	8007536 <USBD_CtlError>
            err++;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	3301      	adds	r3, #1
 800700c:	72fb      	strb	r3, [r7, #11]
          break;
 800700e:	e055      	b.n	80070bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00b      	beq.n	8007034 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7c12      	ldrb	r2, [r2, #16]
 8007028:	f107 0108 	add.w	r1, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007032:	e043      	b.n	80070bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa7d 	bl	8007536 <USBD_CtlError>
            err++;
 800703c:	7afb      	ldrb	r3, [r7, #11]
 800703e:	3301      	adds	r3, #1
 8007040:	72fb      	strb	r3, [r7, #11]
          break;
 8007042:	e03b      	b.n	80070bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00b      	beq.n	8007068 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	7c12      	ldrb	r2, [r2, #16]
 800705c:	f107 0108 	add.w	r1, r7, #8
 8007060:	4610      	mov	r0, r2
 8007062:	4798      	blx	r3
 8007064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007066:	e029      	b.n	80070bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa63 	bl	8007536 <USBD_CtlError>
            err++;
 8007070:	7afb      	ldrb	r3, [r7, #11]
 8007072:	3301      	adds	r3, #1
 8007074:	72fb      	strb	r3, [r7, #11]
          break;
 8007076:	e021      	b.n	80070bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	7c12      	ldrb	r2, [r2, #16]
 8007090:	f107 0108 	add.w	r1, r7, #8
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
 8007098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800709a:	e00f      	b.n	80070bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa49 	bl	8007536 <USBD_CtlError>
            err++;
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	3301      	adds	r3, #1
 80070a8:	72fb      	strb	r3, [r7, #11]
          break;
 80070aa:	e007      	b.n	80070bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa41 	bl	8007536 <USBD_CtlError>
          err++;
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	3301      	adds	r3, #1
 80070b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80070ba:	bf00      	nop
      }
      break;
 80070bc:	e037      	b.n	800712e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	7c1b      	ldrb	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ce:	f107 0208 	add.w	r2, r7, #8
 80070d2:	4610      	mov	r0, r2
 80070d4:	4798      	blx	r3
 80070d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070d8:	e029      	b.n	800712e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fa2a 	bl	8007536 <USBD_CtlError>
        err++;
 80070e2:	7afb      	ldrb	r3, [r7, #11]
 80070e4:	3301      	adds	r3, #1
 80070e6:	72fb      	strb	r3, [r7, #11]
      break;
 80070e8:	e021      	b.n	800712e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	7c1b      	ldrb	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10d      	bne.n	800710e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fa:	f107 0208 	add.w	r2, r7, #8
 80070fe:	4610      	mov	r0, r2
 8007100:	4798      	blx	r3
 8007102:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	2207      	movs	r2, #7
 800710a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800710c:	e00f      	b.n	800712e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa10 	bl	8007536 <USBD_CtlError>
        err++;
 8007116:	7afb      	ldrb	r3, [r7, #11]
 8007118:	3301      	adds	r3, #1
 800711a:	72fb      	strb	r3, [r7, #11]
      break;
 800711c:	e007      	b.n	800712e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fa08 	bl	8007536 <USBD_CtlError>
      err++;
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	3301      	adds	r3, #1
 800712a:	72fb      	strb	r3, [r7, #11]
      break;
 800712c:	bf00      	nop
  }

  if (err != 0U)
 800712e:	7afb      	ldrb	r3, [r7, #11]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d11e      	bne.n	8007172 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	88db      	ldrh	r3, [r3, #6]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d016      	beq.n	800716a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800713c:	893b      	ldrh	r3, [r7, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00e      	beq.n	8007160 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	88da      	ldrh	r2, [r3, #6]
 8007146:	893b      	ldrh	r3, [r7, #8]
 8007148:	4293      	cmp	r3, r2
 800714a:	bf28      	it	cs
 800714c:	4613      	movcs	r3, r2
 800714e:	b29b      	uxth	r3, r3
 8007150:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007152:	893b      	ldrh	r3, [r7, #8]
 8007154:	461a      	mov	r2, r3
 8007156:	68f9      	ldr	r1, [r7, #12]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fa69 	bl	8007630 <USBD_CtlSendData>
 800715e:	e009      	b.n	8007174 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f9e7 	bl	8007536 <USBD_CtlError>
 8007168:	e004      	b.n	8007174 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 faba 	bl	80076e4 <USBD_CtlSendStatus>
 8007170:	e000      	b.n	8007174 <USBD_GetDescriptor+0x320>
    return;
 8007172:	bf00      	nop
  }
}
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop

0800717c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	889b      	ldrh	r3, [r3, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d131      	bne.n	80071f2 <USBD_SetAddress+0x76>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	88db      	ldrh	r3, [r3, #6]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d12d      	bne.n	80071f2 <USBD_SetAddress+0x76>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	885b      	ldrh	r3, [r3, #2]
 800719a:	2b7f      	cmp	r3, #127	@ 0x7f
 800719c:	d829      	bhi.n	80071f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	885b      	ldrh	r3, [r3, #2]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d104      	bne.n	80071c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f9bc 	bl	8007536 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071be:	e01d      	b.n	80071fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	7bfa      	ldrb	r2, [r7, #15]
 80071c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 ff41 	bl	8008054 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa86 	bl	80076e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d004      	beq.n	80071e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e6:	e009      	b.n	80071fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f0:	e004      	b.n	80071fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f99e 	bl	8007536 <USBD_CtlError>
  }
}
 80071fa:	bf00      	nop
 80071fc:	bf00      	nop
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	885b      	ldrh	r3, [r3, #2]
 8007216:	b2da      	uxtb	r2, r3
 8007218:	4b4e      	ldr	r3, [pc, #312]	@ (8007354 <USBD_SetConfig+0x150>)
 800721a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800721c:	4b4d      	ldr	r3, [pc, #308]	@ (8007354 <USBD_SetConfig+0x150>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d905      	bls.n	8007230 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f985 	bl	8007536 <USBD_CtlError>
    return USBD_FAIL;
 800722c:	2303      	movs	r3, #3
 800722e:	e08c      	b.n	800734a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d002      	beq.n	8007242 <USBD_SetConfig+0x3e>
 800723c:	2b03      	cmp	r3, #3
 800723e:	d029      	beq.n	8007294 <USBD_SetConfig+0x90>
 8007240:	e075      	b.n	800732e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007242:	4b44      	ldr	r3, [pc, #272]	@ (8007354 <USBD_SetConfig+0x150>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d020      	beq.n	800728c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800724a:	4b42      	ldr	r3, [pc, #264]	@ (8007354 <USBD_SetConfig+0x150>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007254:	4b3f      	ldr	r3, [pc, #252]	@ (8007354 <USBD_SetConfig+0x150>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fe ffb9 	bl	80061d2 <USBD_SetClassConfig>
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d008      	beq.n	800727c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f962 	bl	8007536 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2202      	movs	r2, #2
 8007276:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800727a:	e065      	b.n	8007348 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fa31 	bl	80076e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2203      	movs	r2, #3
 8007286:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800728a:	e05d      	b.n	8007348 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fa29 	bl	80076e4 <USBD_CtlSendStatus>
      break;
 8007292:	e059      	b.n	8007348 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007294:	4b2f      	ldr	r3, [pc, #188]	@ (8007354 <USBD_SetConfig+0x150>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d112      	bne.n	80072c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2202      	movs	r2, #2
 80072a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80072a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007354 <USBD_SetConfig+0x150>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072ae:	4b29      	ldr	r3, [pc, #164]	@ (8007354 <USBD_SetConfig+0x150>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	4619      	mov	r1, r3
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7fe ffa8 	bl	800620a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa12 	bl	80076e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072c0:	e042      	b.n	8007348 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80072c2:	4b24      	ldr	r3, [pc, #144]	@ (8007354 <USBD_SetConfig+0x150>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d02a      	beq.n	8007326 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7fe ff96 	bl	800620a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80072de:	4b1d      	ldr	r3, [pc, #116]	@ (8007354 <USBD_SetConfig+0x150>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007354 <USBD_SetConfig+0x150>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fe ff6f 	bl	80061d2 <USBD_SetClassConfig>
 80072f4:	4603      	mov	r3, r0
 80072f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00f      	beq.n	800731e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f918 	bl	8007536 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fe ff7b 	bl	800620a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800731c:	e014      	b.n	8007348 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f9e0 	bl	80076e4 <USBD_CtlSendStatus>
      break;
 8007324:	e010      	b.n	8007348 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f9dc 	bl	80076e4 <USBD_CtlSendStatus>
      break;
 800732c:	e00c      	b.n	8007348 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f900 	bl	8007536 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007336:	4b07      	ldr	r3, [pc, #28]	@ (8007354 <USBD_SetConfig+0x150>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7fe ff64 	bl	800620a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007342:	2303      	movs	r3, #3
 8007344:	73fb      	strb	r3, [r7, #15]
      break;
 8007346:	bf00      	nop
  }

  return ret;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	200001d0 	.word	0x200001d0

08007358 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	88db      	ldrh	r3, [r3, #6]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d004      	beq.n	8007374 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f8e2 	bl	8007536 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007372:	e023      	b.n	80073bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	dc02      	bgt.n	8007386 <USBD_GetConfig+0x2e>
 8007380:	2b00      	cmp	r3, #0
 8007382:	dc03      	bgt.n	800738c <USBD_GetConfig+0x34>
 8007384:	e015      	b.n	80073b2 <USBD_GetConfig+0x5a>
 8007386:	2b03      	cmp	r3, #3
 8007388:	d00b      	beq.n	80073a2 <USBD_GetConfig+0x4a>
 800738a:	e012      	b.n	80073b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3308      	adds	r3, #8
 8007396:	2201      	movs	r2, #1
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f948 	bl	8007630 <USBD_CtlSendData>
        break;
 80073a0:	e00c      	b.n	80073bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3304      	adds	r3, #4
 80073a6:	2201      	movs	r2, #1
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f940 	bl	8007630 <USBD_CtlSendData>
        break;
 80073b0:	e004      	b.n	80073bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073b2:	6839      	ldr	r1, [r7, #0]
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f8be 	bl	8007536 <USBD_CtlError>
        break;
 80073ba:	bf00      	nop
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	3b01      	subs	r3, #1
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d81e      	bhi.n	800741a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	88db      	ldrh	r3, [r3, #6]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d004      	beq.n	80073ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f8a5 	bl	8007536 <USBD_CtlError>
        break;
 80073ec:	e01a      	b.n	8007424 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2201      	movs	r2, #1
 80073f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d005      	beq.n	800740a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f043 0202 	orr.w	r2, r3, #2
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	330c      	adds	r3, #12
 800740e:	2202      	movs	r2, #2
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f90c 	bl	8007630 <USBD_CtlSendData>
      break;
 8007418:	e004      	b.n	8007424 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f88a 	bl	8007536 <USBD_CtlError>
      break;
 8007422:	bf00      	nop
  }
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	885b      	ldrh	r3, [r3, #2]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d107      	bne.n	800744e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f94c 	bl	80076e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800744c:	e013      	b.n	8007476 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	885b      	ldrh	r3, [r3, #2]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d10b      	bne.n	800746e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	889b      	ldrh	r3, [r3, #4]
 800745a:	0a1b      	lsrs	r3, r3, #8
 800745c:	b29b      	uxth	r3, r3
 800745e:	b2da      	uxtb	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f93c 	bl	80076e4 <USBD_CtlSendStatus>
}
 800746c:	e003      	b.n	8007476 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f860 	bl	8007536 <USBD_CtlError>
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800748e:	b2db      	uxtb	r3, r3
 8007490:	3b01      	subs	r3, #1
 8007492:	2b02      	cmp	r3, #2
 8007494:	d80b      	bhi.n	80074ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	885b      	ldrh	r3, [r3, #2]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d10c      	bne.n	80074b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f91c 	bl	80076e4 <USBD_CtlSendStatus>
      }
      break;
 80074ac:	e004      	b.n	80074b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f840 	bl	8007536 <USBD_CtlError>
      break;
 80074b6:	e000      	b.n	80074ba <USBD_ClrFeature+0x3c>
      break;
 80074b8:	bf00      	nop
  }
}
 80074ba:	bf00      	nop
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	781a      	ldrb	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	781a      	ldrb	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3301      	adds	r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f7ff fa16 	bl	800691e <SWAPBYTE>
 80074f2:	4603      	mov	r3, r0
 80074f4:	461a      	mov	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3301      	adds	r3, #1
 80074fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3301      	adds	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fa09 	bl	800691e <SWAPBYTE>
 800750c:	4603      	mov	r3, r0
 800750e:	461a      	mov	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3301      	adds	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3301      	adds	r3, #1
 800751e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f7ff f9fc 	bl	800691e <SWAPBYTE>
 8007526:	4603      	mov	r3, r0
 8007528:	461a      	mov	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	80da      	strh	r2, [r3, #6]
}
 800752e:	bf00      	nop
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007540:	2180      	movs	r1, #128	@ 0x80
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fd1c 	bl	8007f80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007548:	2100      	movs	r1, #0
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fd18 	bl	8007f80 <USBD_LL_StallEP>
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d042      	beq.n	80075f4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007572:	6938      	ldr	r0, [r7, #16]
 8007574:	f000 f842 	bl	80075fc <USBD_GetLen>
 8007578:	4603      	mov	r3, r0
 800757a:	3301      	adds	r3, #1
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007582:	d808      	bhi.n	8007596 <USBD_GetString+0x3e>
 8007584:	6938      	ldr	r0, [r7, #16]
 8007586:	f000 f839 	bl	80075fc <USBD_GetLen>
 800758a:	4603      	mov	r3, r0
 800758c:	3301      	adds	r3, #1
 800758e:	b29b      	uxth	r3, r3
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	e001      	b.n	800759a <USBD_GetString+0x42>
 8007596:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	4413      	add	r3, r2
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	7812      	ldrb	r2, [r2, #0]
 80075a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	3301      	adds	r3, #1
 80075ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	4413      	add	r3, r2
 80075b6:	2203      	movs	r2, #3
 80075b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	3301      	adds	r3, #1
 80075be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075c0:	e013      	b.n	80075ea <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	4413      	add	r3, r2
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	7812      	ldrb	r2, [r2, #0]
 80075cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	3301      	adds	r3, #1
 80075d2:	613b      	str	r3, [r7, #16]
    idx++;
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	3301      	adds	r3, #1
 80075d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	4413      	add	r3, r2
 80075e0:	2200      	movs	r2, #0
 80075e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	3301      	adds	r3, #1
 80075e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e7      	bne.n	80075c2 <USBD_GetString+0x6a>
 80075f2:	e000      	b.n	80075f6 <USBD_GetString+0x9e>
    return;
 80075f4:	bf00      	nop
  }
}
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800760c:	e005      	b.n	800761a <USBD_GetLen+0x1e>
  {
    len++;
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	3301      	adds	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	3301      	adds	r3, #1
 8007618:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1f5      	bne.n	800760e <USBD_GetLen+0x12>
  }

  return len;
 8007622:	7bfb      	ldrb	r3, [r7, #15]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2202      	movs	r2, #2
 8007640:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	2100      	movs	r1, #0
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 fd1b 	bl	8008092 <USBD_LL_Transmit>

  return USBD_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	2100      	movs	r1, #0
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fd0a 	bl	8008092 <USBD_LL_Transmit>

  return USBD_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2203      	movs	r2, #3
 8007698:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	2100      	movs	r1, #0
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 fd0e 	bl	80080d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	2100      	movs	r1, #0
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 fcfd 	bl	80080d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2204      	movs	r2, #4
 80076f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076f4:	2300      	movs	r3, #0
 80076f6:	2200      	movs	r2, #0
 80076f8:	2100      	movs	r1, #0
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fcc9 	bl	8008092 <USBD_LL_Transmit>

  return USBD_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2205      	movs	r2, #5
 8007716:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800771a:	2300      	movs	r3, #0
 800771c:	2200      	movs	r2, #0
 800771e:	2100      	movs	r1, #0
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fcd7 	bl	80080d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007734:	2200      	movs	r2, #0
 8007736:	4912      	ldr	r1, [pc, #72]	@ (8007780 <MX_USB_DEVICE_Init+0x50>)
 8007738:	4812      	ldr	r0, [pc, #72]	@ (8007784 <MX_USB_DEVICE_Init+0x54>)
 800773a:	f7fe fccd 	bl	80060d8 <USBD_Init>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007744:	f7f9 f8ae 	bl	80008a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007748:	490f      	ldr	r1, [pc, #60]	@ (8007788 <MX_USB_DEVICE_Init+0x58>)
 800774a:	480e      	ldr	r0, [pc, #56]	@ (8007784 <MX_USB_DEVICE_Init+0x54>)
 800774c:	f7fe fcf4 	bl	8006138 <USBD_RegisterClass>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007756:	f7f9 f8a5 	bl	80008a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800775a:	490c      	ldr	r1, [pc, #48]	@ (800778c <MX_USB_DEVICE_Init+0x5c>)
 800775c:	4809      	ldr	r0, [pc, #36]	@ (8007784 <MX_USB_DEVICE_Init+0x54>)
 800775e:	f7fe fbeb 	bl	8005f38 <USBD_CDC_RegisterInterface>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007768:	f7f9 f89c 	bl	80008a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800776c:	4805      	ldr	r0, [pc, #20]	@ (8007784 <MX_USB_DEVICE_Init+0x54>)
 800776e:	f7fe fd19 	bl	80061a4 <USBD_Start>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007778:	f7f9 f894 	bl	80008a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800777c:	bf00      	nop
 800777e:	bd80      	pop	{r7, pc}
 8007780:	200000ac 	.word	0x200000ac
 8007784:	200001d4 	.word	0x200001d4
 8007788:	20000018 	.word	0x20000018
 800778c:	20000098 	.word	0x20000098

08007790 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007794:	2200      	movs	r2, #0
 8007796:	4905      	ldr	r1, [pc, #20]	@ (80077ac <CDC_Init_FS+0x1c>)
 8007798:	4805      	ldr	r0, [pc, #20]	@ (80077b0 <CDC_Init_FS+0x20>)
 800779a:	f7fe fbe7 	bl	8005f6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800779e:	4905      	ldr	r1, [pc, #20]	@ (80077b4 <CDC_Init_FS+0x24>)
 80077a0:	4803      	ldr	r0, [pc, #12]	@ (80077b0 <CDC_Init_FS+0x20>)
 80077a2:	f7fe fc05 	bl	8005fb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80077a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20000cb0 	.word	0x20000cb0
 80077b0:	200001d4 	.word	0x200001d4
 80077b4:	200004b0 	.word	0x200004b0

080077b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077be:	4618      	mov	r0, r3
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	71fb      	strb	r3, [r7, #7]
 80077d4:	4613      	mov	r3, r2
 80077d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80077d8:	79fb      	ldrb	r3, [r7, #7]
 80077da:	2b23      	cmp	r3, #35	@ 0x23
 80077dc:	d84a      	bhi.n	8007874 <CDC_Control_FS+0xac>
 80077de:	a201      	add	r2, pc, #4	@ (adr r2, 80077e4 <CDC_Control_FS+0x1c>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	08007875 	.word	0x08007875
 80077e8:	08007875 	.word	0x08007875
 80077ec:	08007875 	.word	0x08007875
 80077f0:	08007875 	.word	0x08007875
 80077f4:	08007875 	.word	0x08007875
 80077f8:	08007875 	.word	0x08007875
 80077fc:	08007875 	.word	0x08007875
 8007800:	08007875 	.word	0x08007875
 8007804:	08007875 	.word	0x08007875
 8007808:	08007875 	.word	0x08007875
 800780c:	08007875 	.word	0x08007875
 8007810:	08007875 	.word	0x08007875
 8007814:	08007875 	.word	0x08007875
 8007818:	08007875 	.word	0x08007875
 800781c:	08007875 	.word	0x08007875
 8007820:	08007875 	.word	0x08007875
 8007824:	08007875 	.word	0x08007875
 8007828:	08007875 	.word	0x08007875
 800782c:	08007875 	.word	0x08007875
 8007830:	08007875 	.word	0x08007875
 8007834:	08007875 	.word	0x08007875
 8007838:	08007875 	.word	0x08007875
 800783c:	08007875 	.word	0x08007875
 8007840:	08007875 	.word	0x08007875
 8007844:	08007875 	.word	0x08007875
 8007848:	08007875 	.word	0x08007875
 800784c:	08007875 	.word	0x08007875
 8007850:	08007875 	.word	0x08007875
 8007854:	08007875 	.word	0x08007875
 8007858:	08007875 	.word	0x08007875
 800785c:	08007875 	.word	0x08007875
 8007860:	08007875 	.word	0x08007875
 8007864:	08007875 	.word	0x08007875
 8007868:	08007875 	.word	0x08007875
 800786c:	08007875 	.word	0x08007875
 8007870:	08007875 	.word	0x08007875
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007874:	bf00      	nop
  }

  return (USBD_OK);
 8007876:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	4805      	ldr	r0, [pc, #20]	@ (80078a8 <CDC_Receive_FS+0x24>)
 8007892:	f7fe fb8d 	bl	8005fb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007896:	4804      	ldr	r0, [pc, #16]	@ (80078a8 <CDC_Receive_FS+0x24>)
 8007898:	f7fe fbe8 	bl	800606c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800789c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	200001d4 	.word	0x200001d4

080078ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	460b      	mov	r3, r1
 80078b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80078bc:	4b0d      	ldr	r3, [pc, #52]	@ (80078f4 <CDC_Transmit_FS+0x48>)
 80078be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80078c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e00b      	b.n	80078ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80078d2:	887b      	ldrh	r3, [r7, #2]
 80078d4:	461a      	mov	r2, r3
 80078d6:	6879      	ldr	r1, [r7, #4]
 80078d8:	4806      	ldr	r0, [pc, #24]	@ (80078f4 <CDC_Transmit_FS+0x48>)
 80078da:	f7fe fb47 	bl	8005f6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80078de:	4805      	ldr	r0, [pc, #20]	@ (80078f4 <CDC_Transmit_FS+0x48>)
 80078e0:	f7fe fb84 	bl	8005fec <USBD_CDC_TransmitPacket>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	200001d4 	.word	0x200001d4

080078f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	4613      	mov	r3, r2
 8007904:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800790a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800790e:	4618      	mov	r0, r3
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
	...

0800791c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2212      	movs	r2, #18
 800792c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800792e:	4b03      	ldr	r3, [pc, #12]	@ (800793c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	200000cc 	.word	0x200000cc

08007940 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2204      	movs	r2, #4
 8007950:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007952:	4b03      	ldr	r3, [pc, #12]	@ (8007960 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr
 8007960:	200000ec 	.word	0x200000ec

08007964 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	4603      	mov	r3, r0
 800796c:	6039      	str	r1, [r7, #0]
 800796e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007970:	79fb      	ldrb	r3, [r7, #7]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d105      	bne.n	8007982 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	4907      	ldr	r1, [pc, #28]	@ (8007998 <USBD_FS_ProductStrDescriptor+0x34>)
 800797a:	4808      	ldr	r0, [pc, #32]	@ (800799c <USBD_FS_ProductStrDescriptor+0x38>)
 800797c:	f7ff fdec 	bl	8007558 <USBD_GetString>
 8007980:	e004      	b.n	800798c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	4904      	ldr	r1, [pc, #16]	@ (8007998 <USBD_FS_ProductStrDescriptor+0x34>)
 8007986:	4805      	ldr	r0, [pc, #20]	@ (800799c <USBD_FS_ProductStrDescriptor+0x38>)
 8007988:	f7ff fde6 	bl	8007558 <USBD_GetString>
  }
  return USBD_StrDesc;
 800798c:	4b02      	ldr	r3, [pc, #8]	@ (8007998 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800798e:	4618      	mov	r0, r3
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	200014b0 	.word	0x200014b0
 800799c:	080084ec 	.word	0x080084ec

080079a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4603      	mov	r3, r0
 80079a8:	6039      	str	r1, [r7, #0]
 80079aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	4904      	ldr	r1, [pc, #16]	@ (80079c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079b0:	4804      	ldr	r0, [pc, #16]	@ (80079c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079b2:	f7ff fdd1 	bl	8007558 <USBD_GetString>
  return USBD_StrDesc;
 80079b6:	4b02      	ldr	r3, [pc, #8]	@ (80079c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	200014b0 	.word	0x200014b0
 80079c4:	08008504 	.word	0x08008504

080079c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	221a      	movs	r2, #26
 80079d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079da:	f000 f855 	bl	8007a88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079de:	4b02      	ldr	r3, [pc, #8]	@ (80079e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	200000f0 	.word	0x200000f0

080079ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	6039      	str	r1, [r7, #0]
 80079f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079f8:	79fb      	ldrb	r3, [r7, #7]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d105      	bne.n	8007a0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	4907      	ldr	r1, [pc, #28]	@ (8007a20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a02:	4808      	ldr	r0, [pc, #32]	@ (8007a24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a04:	f7ff fda8 	bl	8007558 <USBD_GetString>
 8007a08:	e004      	b.n	8007a14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	4904      	ldr	r1, [pc, #16]	@ (8007a20 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a0e:	4805      	ldr	r0, [pc, #20]	@ (8007a24 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a10:	f7ff fda2 	bl	8007558 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a14:	4b02      	ldr	r3, [pc, #8]	@ (8007a20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	200014b0 	.word	0x200014b0
 8007a24:	08008518 	.word	0x08008518

08007a28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	4603      	mov	r3, r0
 8007a30:	6039      	str	r1, [r7, #0]
 8007a32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d105      	bne.n	8007a46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	4907      	ldr	r1, [pc, #28]	@ (8007a5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a3e:	4808      	ldr	r0, [pc, #32]	@ (8007a60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a40:	f7ff fd8a 	bl	8007558 <USBD_GetString>
 8007a44:	e004      	b.n	8007a50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	4904      	ldr	r1, [pc, #16]	@ (8007a5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a4a:	4805      	ldr	r0, [pc, #20]	@ (8007a60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a4c:	f7ff fd84 	bl	8007558 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a50:	4b02      	ldr	r3, [pc, #8]	@ (8007a5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	200014b0 	.word	0x200014b0
 8007a60:	08008524 	.word	0x08008524

08007a64 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	220c      	movs	r2, #12
 8007a74:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007a76:	4b03      	ldr	r3, [pc, #12]	@ (8007a84 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	200000e0 	.word	0x200000e0

08007a88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	4413      	add	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d009      	beq.n	8007ab0 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a9c:	2208      	movs	r2, #8
 8007a9e:	4906      	ldr	r1, [pc, #24]	@ (8007ab8 <Get_SerialNum+0x30>)
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f80d 	bl	8007ac0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	4904      	ldr	r1, [pc, #16]	@ (8007abc <Get_SerialNum+0x34>)
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f808 	bl	8007ac0 <IntToUnicode>
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	200000f2 	.word	0x200000f2
 8007abc:	20000102 	.word	0x20000102

08007ac0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	4613      	mov	r3, r2
 8007acc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	75fb      	strb	r3, [r7, #23]
 8007ad6:	e027      	b.n	8007b28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	0f1b      	lsrs	r3, r3, #28
 8007adc:	2b09      	cmp	r3, #9
 8007ade:	d80b      	bhi.n	8007af8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	0f1b      	lsrs	r3, r3, #28
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	4619      	mov	r1, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	440b      	add	r3, r1
 8007af0:	3230      	adds	r2, #48	@ 0x30
 8007af2:	b2d2      	uxtb	r2, r2
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	e00a      	b.n	8007b0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	0f1b      	lsrs	r3, r3, #28
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	4619      	mov	r1, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	440b      	add	r3, r1
 8007b08:	3237      	adds	r2, #55	@ 0x37
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	3301      	adds	r3, #1
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	2200      	movs	r2, #0
 8007b20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	3301      	adds	r3, #1
 8007b26:	75fb      	strb	r3, [r7, #23]
 8007b28:	7dfa      	ldrb	r2, [r7, #23]
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d3d3      	bcc.n	8007ad8 <IntToUnicode+0x18>
  }
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
	...

08007b40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b0ac      	sub	sp, #176	@ 0xb0
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	609a      	str	r2, [r3, #8]
 8007b54:	60da      	str	r2, [r3, #12]
 8007b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007b58:	f107 0318 	add.w	r3, r7, #24
 8007b5c:	2284      	movs	r2, #132	@ 0x84
 8007b5e:	2100      	movs	r1, #0
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fc29 	bl	80083b8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b6e:	d161      	bne.n	8007c34 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8007b70:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007b74:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b7c:	f107 0318 	add.w	r3, r7, #24
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fb fa61 	bl	8003048 <HAL_RCCEx_PeriphCLKConfig>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8007b8c:	f7f8 fe8a 	bl	80008a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b90:	4b2a      	ldr	r3, [pc, #168]	@ (8007c3c <HAL_PCD_MspInit+0xfc>)
 8007b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b94:	4a29      	ldr	r2, [pc, #164]	@ (8007c3c <HAL_PCD_MspInit+0xfc>)
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b9c:	4b27      	ldr	r3, [pc, #156]	@ (8007c3c <HAL_PCD_MspInit+0xfc>)
 8007b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8007ba8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8007bac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007bc2:	230a      	movs	r3, #10
 8007bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bc8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007bcc:	4619      	mov	r1, r3
 8007bce:	481c      	ldr	r0, [pc, #112]	@ (8007c40 <HAL_PCD_MspInit+0x100>)
 8007bd0:	f7f9 f94a 	bl	8000e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007bd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007be8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8007bec:	4619      	mov	r1, r3
 8007bee:	4814      	ldr	r0, [pc, #80]	@ (8007c40 <HAL_PCD_MspInit+0x100>)
 8007bf0:	f7f9 f93a 	bl	8000e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bf4:	4b11      	ldr	r3, [pc, #68]	@ (8007c3c <HAL_PCD_MspInit+0xfc>)
 8007bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bf8:	4a10      	ldr	r2, [pc, #64]	@ (8007c3c <HAL_PCD_MspInit+0xfc>)
 8007bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bfe:	6353      	str	r3, [r2, #52]	@ 0x34
 8007c00:	4b0e      	ldr	r3, [pc, #56]	@ (8007c3c <HAL_PCD_MspInit+0xfc>)
 8007c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c08:	613b      	str	r3, [r7, #16]
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c3c <HAL_PCD_MspInit+0xfc>)
 8007c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c10:	4a0a      	ldr	r2, [pc, #40]	@ (8007c3c <HAL_PCD_MspInit+0xfc>)
 8007c12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c16:	6453      	str	r3, [r2, #68]	@ 0x44
 8007c18:	4b08      	ldr	r3, [pc, #32]	@ (8007c3c <HAL_PCD_MspInit+0xfc>)
 8007c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c24:	2200      	movs	r2, #0
 8007c26:	2100      	movs	r1, #0
 8007c28:	2043      	movs	r0, #67	@ 0x43
 8007c2a:	f7f9 f8e6 	bl	8000dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c2e:	2043      	movs	r0, #67	@ 0x43
 8007c30:	f7f9 f8ff 	bl	8000e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c34:	bf00      	nop
 8007c36:	37b0      	adds	r7, #176	@ 0xb0
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	40023800 	.word	0x40023800
 8007c40:	40020000 	.word	0x40020000

08007c44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f7fe faef 	bl	800623e <USBD_LL_SetupStage>
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	4413      	add	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	440b      	add	r3, r1
 8007c88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	78fb      	ldrb	r3, [r7, #3]
 8007c90:	4619      	mov	r1, r3
 8007c92:	f7fe fb29 	bl	80062e8 <USBD_LL_DataOutStage>
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 8007cb0:	78fa      	ldrb	r2, [r7, #3]
 8007cb2:	6879      	ldr	r1, [r7, #4]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	440b      	add	r3, r1
 8007cbe:	3320      	adds	r3, #32
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f7fe fbc2 	bl	800644e <USBD_LL_DataInStage>
}
 8007cca:	bf00      	nop
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fe fcfc 	bl	80066de <USBD_LL_SOF>
}
 8007ce6:	bf00      	nop
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	79db      	ldrb	r3, [r3, #7]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d102      	bne.n	8007d08 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]
 8007d06:	e008      	b.n	8007d1a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	79db      	ldrb	r3, [r3, #7]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d102      	bne.n	8007d16 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007d10:	2301      	movs	r3, #1
 8007d12:	73fb      	strb	r3, [r7, #15]
 8007d14:	e001      	b.n	8007d1a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007d16:	f7f8 fdc5 	bl	80008a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007d20:	7bfa      	ldrb	r2, [r7, #15]
 8007d22:	4611      	mov	r1, r2
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe fc96 	bl	8006656 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe fc3e 	bl	80065b2 <USBD_LL_Reset>
}
 8007d36:	bf00      	nop
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fc91 	bl	8006676 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6812      	ldr	r2, [r2, #0]
 8007d62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007d66:	f043 0301 	orr.w	r3, r3, #1
 8007d6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	7adb      	ldrb	r3, [r3, #11]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d74:	4b04      	ldr	r3, [pc, #16]	@ (8007d88 <HAL_PCD_SuspendCallback+0x48>)
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	4a03      	ldr	r2, [pc, #12]	@ (8007d88 <HAL_PCD_SuspendCallback+0x48>)
 8007d7a:	f043 0306 	orr.w	r3, r3, #6
 8007d7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	e000ed00 	.word	0xe000ed00

08007d8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fe fc87 	bl	80066ae <USBD_LL_Resume>
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007dba:	78fa      	ldrb	r2, [r7, #3]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe fcdf 	bl	8006782 <USBD_LL_IsoOUTIncomplete>
}
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007dde:	78fa      	ldrb	r2, [r7, #3]
 8007de0:	4611      	mov	r1, r2
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fe fc9b 	bl	800671e <USBD_LL_IsoINIncomplete>
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fe fcf1 	bl	80067e6 <USBD_LL_DevConnected>
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe fcee 	bl	80067fc <USBD_LL_DevDisconnected>
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d13c      	bne.n	8007eb2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007e38:	4a20      	ldr	r2, [pc, #128]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a1e      	ldr	r2, [pc, #120]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e44:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e48:	4b1c      	ldr	r3, [pc, #112]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007e4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007e50:	4b1a      	ldr	r3, [pc, #104]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e52:	2206      	movs	r2, #6
 8007e54:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e56:	4b19      	ldr	r3, [pc, #100]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e58:	2202      	movs	r2, #2
 8007e5a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e5c:	4b17      	ldr	r3, [pc, #92]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e62:	4b16      	ldr	r3, [pc, #88]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e64:	2202      	movs	r2, #2
 8007e66:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e68:	4b14      	ldr	r3, [pc, #80]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007e6e:	4b13      	ldr	r3, [pc, #76]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e74:	4b11      	ldr	r3, [pc, #68]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e7a:	4b10      	ldr	r3, [pc, #64]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e80:	4b0e      	ldr	r3, [pc, #56]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e86:	480d      	ldr	r0, [pc, #52]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e88:	f7f9 f9b3 	bl	80011f2 <HAL_PCD_Init>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e92:	f7f8 fd07 	bl	80008a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e96:	2180      	movs	r1, #128	@ 0x80
 8007e98:	4808      	ldr	r0, [pc, #32]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007e9a:	f7fa fbfe 	bl	800269a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e9e:	2240      	movs	r2, #64	@ 0x40
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4806      	ldr	r0, [pc, #24]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007ea4:	f7fa fbb2 	bl	800260c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ea8:	2280      	movs	r2, #128	@ 0x80
 8007eaa:	2101      	movs	r1, #1
 8007eac:	4803      	ldr	r0, [pc, #12]	@ (8007ebc <USBD_LL_Init+0x94>)
 8007eae:	f7fa fbad 	bl	800260c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	200016b0 	.word	0x200016b0

08007ec0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7f9 faa1 	bl	800141e <HAL_PCD_Start>
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 f97e 	bl	80081e4 <USBD_Get_USB_Status>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	4608      	mov	r0, r1
 8007f00:	4611      	mov	r1, r2
 8007f02:	461a      	mov	r2, r3
 8007f04:	4603      	mov	r3, r0
 8007f06:	70fb      	strb	r3, [r7, #3]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70bb      	strb	r3, [r7, #2]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007f1e:	78bb      	ldrb	r3, [r7, #2]
 8007f20:	883a      	ldrh	r2, [r7, #0]
 8007f22:	78f9      	ldrb	r1, [r7, #3]
 8007f24:	f7f9 ff8f 	bl	8001e46 <HAL_PCD_EP_Open>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 f958 	bl	80081e4 <USBD_Get_USB_Status>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f5c:	78fa      	ldrb	r2, [r7, #3]
 8007f5e:	4611      	mov	r1, r2
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7f9 ffd8 	bl	8001f16 <HAL_PCD_EP_Close>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 f939 	bl	80081e4 <USBD_Get_USB_Status>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fa f890 	bl	80020c4 <HAL_PCD_EP_SetStall>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 f91a 	bl	80081e4 <USBD_Get_USB_Status>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fd8:	78fa      	ldrb	r2, [r7, #3]
 8007fda:	4611      	mov	r1, r2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fa f8d4 	bl	800218a <HAL_PCD_EP_ClrStall>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 f8fb 	bl	80081e4 <USBD_Get_USB_Status>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800800e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008014:	2b00      	cmp	r3, #0
 8008016:	da0b      	bge.n	8008030 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008018:	78fb      	ldrb	r3, [r7, #3]
 800801a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800801e:	68f9      	ldr	r1, [r7, #12]
 8008020:	4613      	mov	r3, r2
 8008022:	00db      	lsls	r3, r3, #3
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	440b      	add	r3, r1
 800802a:	3316      	adds	r3, #22
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	e00b      	b.n	8008048 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008036:	68f9      	ldr	r1, [r7, #12]
 8008038:	4613      	mov	r3, r2
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	440b      	add	r3, r1
 8008042:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008046:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800806e:	78fa      	ldrb	r2, [r7, #3]
 8008070:	4611      	mov	r1, r2
 8008072:	4618      	mov	r0, r3
 8008074:	f7f9 fec3 	bl	8001dfe <HAL_PCD_SetAddress>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 f8b0 	bl	80081e4 <USBD_Get_USB_Status>
 8008084:	4603      	mov	r3, r0
 8008086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008088:	7bbb      	ldrb	r3, [r7, #14]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b086      	sub	sp, #24
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	603b      	str	r3, [r7, #0]
 800809e:	460b      	mov	r3, r1
 80080a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80080b0:	7af9      	ldrb	r1, [r7, #11]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	f7f9 ffcb 	bl	8002050 <HAL_PCD_EP_Transmit>
 80080ba:	4603      	mov	r3, r0
 80080bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 f88f 	bl	80081e4 <USBD_Get_USB_Status>
 80080c6:	4603      	mov	r3, r0
 80080c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	607a      	str	r2, [r7, #4]
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	460b      	mov	r3, r1
 80080e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80080f2:	7af9      	ldrb	r1, [r7, #11]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	f7f9 ff57 	bl	8001faa <HAL_PCD_EP_Receive>
 80080fc:	4603      	mov	r3, r0
 80080fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	4618      	mov	r0, r3
 8008104:	f000 f86e 	bl	80081e4 <USBD_Get_USB_Status>
 8008108:	4603      	mov	r3, r0
 800810a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800810c:	7dbb      	ldrb	r3, [r7, #22]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	460b      	mov	r3, r1
 8008120:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	4611      	mov	r1, r2
 800812c:	4618      	mov	r0, r3
 800812e:	f7f9 ff77 	bl	8002020 <HAL_PCD_EP_GetRxCount>
 8008132:	4603      	mov	r3, r0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d002      	beq.n	8008154 <HAL_PCDEx_LPM_Callback+0x18>
 800814e:	2b01      	cmp	r3, #1
 8008150:	d01f      	beq.n	8008192 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008152:	e03b      	b.n	80081cc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7adb      	ldrb	r3, [r3, #11]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800815c:	f000 f83c 	bl	80081d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008160:	4b1c      	ldr	r3, [pc, #112]	@ (80081d4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	4a1b      	ldr	r2, [pc, #108]	@ (80081d4 <HAL_PCDEx_LPM_Callback+0x98>)
 8008166:	f023 0306 	bic.w	r3, r3, #6
 800816a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6812      	ldr	r2, [r2, #0]
 800817a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800817e:	f023 0301 	bic.w	r3, r3, #1
 8008182:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe fa8f 	bl	80066ae <USBD_LL_Resume>
    break;
 8008190:	e01c      	b.n	80081cc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	6812      	ldr	r2, [r2, #0]
 80081a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081a4:	f043 0301 	orr.w	r3, r3, #1
 80081a8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe fa60 	bl	8006676 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	7adb      	ldrb	r3, [r3, #11]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d005      	beq.n	80081ca <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081be:	4b05      	ldr	r3, [pc, #20]	@ (80081d4 <HAL_PCDEx_LPM_Callback+0x98>)
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	4a04      	ldr	r2, [pc, #16]	@ (80081d4 <HAL_PCDEx_LPM_Callback+0x98>)
 80081c4:	f043 0306 	orr.w	r3, r3, #6
 80081c8:	6113      	str	r3, [r2, #16]
    break;
 80081ca:	bf00      	nop
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	e000ed00 	.word	0xe000ed00

080081d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80081dc:	f7f8 fafc 	bl	80007d8 <SystemClock_Config>
}
 80081e0:	bf00      	nop
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081f2:	79fb      	ldrb	r3, [r7, #7]
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d817      	bhi.n	8008228 <USBD_Get_USB_Status+0x44>
 80081f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008200 <USBD_Get_USB_Status+0x1c>)
 80081fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fe:	bf00      	nop
 8008200:	08008211 	.word	0x08008211
 8008204:	08008217 	.word	0x08008217
 8008208:	0800821d 	.word	0x0800821d
 800820c:	08008223 	.word	0x08008223
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]
    break;
 8008214:	e00b      	b.n	800822e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008216:	2303      	movs	r3, #3
 8008218:	73fb      	strb	r3, [r7, #15]
    break;
 800821a:	e008      	b.n	800822e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
    break;
 8008220:	e005      	b.n	800822e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008222:	2303      	movs	r3, #3
 8008224:	73fb      	strb	r3, [r7, #15]
    break;
 8008226:	e002      	b.n	800822e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008228:	2303      	movs	r3, #3
 800822a:	73fb      	strb	r3, [r7, #15]
    break;
 800822c:	bf00      	nop
  }
  return usb_status;
 800822e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <malloc>:
 800823c:	4b02      	ldr	r3, [pc, #8]	@ (8008248 <malloc+0xc>)
 800823e:	4601      	mov	r1, r0
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	f000 b82d 	b.w	80082a0 <_malloc_r>
 8008246:	bf00      	nop
 8008248:	2000010c 	.word	0x2000010c

0800824c <free>:
 800824c:	4b02      	ldr	r3, [pc, #8]	@ (8008258 <free+0xc>)
 800824e:	4601      	mov	r1, r0
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	f000 b8f5 	b.w	8008440 <_free_r>
 8008256:	bf00      	nop
 8008258:	2000010c 	.word	0x2000010c

0800825c <sbrk_aligned>:
 800825c:	b570      	push	{r4, r5, r6, lr}
 800825e:	4e0f      	ldr	r6, [pc, #60]	@ (800829c <sbrk_aligned+0x40>)
 8008260:	460c      	mov	r4, r1
 8008262:	6831      	ldr	r1, [r6, #0]
 8008264:	4605      	mov	r5, r0
 8008266:	b911      	cbnz	r1, 800826e <sbrk_aligned+0x12>
 8008268:	f000 f8ae 	bl	80083c8 <_sbrk_r>
 800826c:	6030      	str	r0, [r6, #0]
 800826e:	4621      	mov	r1, r4
 8008270:	4628      	mov	r0, r5
 8008272:	f000 f8a9 	bl	80083c8 <_sbrk_r>
 8008276:	1c43      	adds	r3, r0, #1
 8008278:	d103      	bne.n	8008282 <sbrk_aligned+0x26>
 800827a:	f04f 34ff 	mov.w	r4, #4294967295
 800827e:	4620      	mov	r0, r4
 8008280:	bd70      	pop	{r4, r5, r6, pc}
 8008282:	1cc4      	adds	r4, r0, #3
 8008284:	f024 0403 	bic.w	r4, r4, #3
 8008288:	42a0      	cmp	r0, r4
 800828a:	d0f8      	beq.n	800827e <sbrk_aligned+0x22>
 800828c:	1a21      	subs	r1, r4, r0
 800828e:	4628      	mov	r0, r5
 8008290:	f000 f89a 	bl	80083c8 <_sbrk_r>
 8008294:	3001      	adds	r0, #1
 8008296:	d1f2      	bne.n	800827e <sbrk_aligned+0x22>
 8008298:	e7ef      	b.n	800827a <sbrk_aligned+0x1e>
 800829a:	bf00      	nop
 800829c:	20001b90 	.word	0x20001b90

080082a0 <_malloc_r>:
 80082a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a4:	1ccd      	adds	r5, r1, #3
 80082a6:	f025 0503 	bic.w	r5, r5, #3
 80082aa:	3508      	adds	r5, #8
 80082ac:	2d0c      	cmp	r5, #12
 80082ae:	bf38      	it	cc
 80082b0:	250c      	movcc	r5, #12
 80082b2:	2d00      	cmp	r5, #0
 80082b4:	4606      	mov	r6, r0
 80082b6:	db01      	blt.n	80082bc <_malloc_r+0x1c>
 80082b8:	42a9      	cmp	r1, r5
 80082ba:	d904      	bls.n	80082c6 <_malloc_r+0x26>
 80082bc:	230c      	movs	r3, #12
 80082be:	6033      	str	r3, [r6, #0]
 80082c0:	2000      	movs	r0, #0
 80082c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800839c <_malloc_r+0xfc>
 80082ca:	f000 f869 	bl	80083a0 <__malloc_lock>
 80082ce:	f8d8 3000 	ldr.w	r3, [r8]
 80082d2:	461c      	mov	r4, r3
 80082d4:	bb44      	cbnz	r4, 8008328 <_malloc_r+0x88>
 80082d6:	4629      	mov	r1, r5
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff ffbf 	bl	800825c <sbrk_aligned>
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	4604      	mov	r4, r0
 80082e2:	d158      	bne.n	8008396 <_malloc_r+0xf6>
 80082e4:	f8d8 4000 	ldr.w	r4, [r8]
 80082e8:	4627      	mov	r7, r4
 80082ea:	2f00      	cmp	r7, #0
 80082ec:	d143      	bne.n	8008376 <_malloc_r+0xd6>
 80082ee:	2c00      	cmp	r4, #0
 80082f0:	d04b      	beq.n	800838a <_malloc_r+0xea>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	4639      	mov	r1, r7
 80082f6:	4630      	mov	r0, r6
 80082f8:	eb04 0903 	add.w	r9, r4, r3
 80082fc:	f000 f864 	bl	80083c8 <_sbrk_r>
 8008300:	4581      	cmp	r9, r0
 8008302:	d142      	bne.n	800838a <_malloc_r+0xea>
 8008304:	6821      	ldr	r1, [r4, #0]
 8008306:	1a6d      	subs	r5, r5, r1
 8008308:	4629      	mov	r1, r5
 800830a:	4630      	mov	r0, r6
 800830c:	f7ff ffa6 	bl	800825c <sbrk_aligned>
 8008310:	3001      	adds	r0, #1
 8008312:	d03a      	beq.n	800838a <_malloc_r+0xea>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	442b      	add	r3, r5
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	f8d8 3000 	ldr.w	r3, [r8]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	bb62      	cbnz	r2, 800837c <_malloc_r+0xdc>
 8008322:	f8c8 7000 	str.w	r7, [r8]
 8008326:	e00f      	b.n	8008348 <_malloc_r+0xa8>
 8008328:	6822      	ldr	r2, [r4, #0]
 800832a:	1b52      	subs	r2, r2, r5
 800832c:	d420      	bmi.n	8008370 <_malloc_r+0xd0>
 800832e:	2a0b      	cmp	r2, #11
 8008330:	d917      	bls.n	8008362 <_malloc_r+0xc2>
 8008332:	1961      	adds	r1, r4, r5
 8008334:	42a3      	cmp	r3, r4
 8008336:	6025      	str	r5, [r4, #0]
 8008338:	bf18      	it	ne
 800833a:	6059      	strne	r1, [r3, #4]
 800833c:	6863      	ldr	r3, [r4, #4]
 800833e:	bf08      	it	eq
 8008340:	f8c8 1000 	streq.w	r1, [r8]
 8008344:	5162      	str	r2, [r4, r5]
 8008346:	604b      	str	r3, [r1, #4]
 8008348:	4630      	mov	r0, r6
 800834a:	f000 f82f 	bl	80083ac <__malloc_unlock>
 800834e:	f104 000b 	add.w	r0, r4, #11
 8008352:	1d23      	adds	r3, r4, #4
 8008354:	f020 0007 	bic.w	r0, r0, #7
 8008358:	1ac2      	subs	r2, r0, r3
 800835a:	bf1c      	itt	ne
 800835c:	1a1b      	subne	r3, r3, r0
 800835e:	50a3      	strne	r3, [r4, r2]
 8008360:	e7af      	b.n	80082c2 <_malloc_r+0x22>
 8008362:	6862      	ldr	r2, [r4, #4]
 8008364:	42a3      	cmp	r3, r4
 8008366:	bf0c      	ite	eq
 8008368:	f8c8 2000 	streq.w	r2, [r8]
 800836c:	605a      	strne	r2, [r3, #4]
 800836e:	e7eb      	b.n	8008348 <_malloc_r+0xa8>
 8008370:	4623      	mov	r3, r4
 8008372:	6864      	ldr	r4, [r4, #4]
 8008374:	e7ae      	b.n	80082d4 <_malloc_r+0x34>
 8008376:	463c      	mov	r4, r7
 8008378:	687f      	ldr	r7, [r7, #4]
 800837a:	e7b6      	b.n	80082ea <_malloc_r+0x4a>
 800837c:	461a      	mov	r2, r3
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	42a3      	cmp	r3, r4
 8008382:	d1fb      	bne.n	800837c <_malloc_r+0xdc>
 8008384:	2300      	movs	r3, #0
 8008386:	6053      	str	r3, [r2, #4]
 8008388:	e7de      	b.n	8008348 <_malloc_r+0xa8>
 800838a:	230c      	movs	r3, #12
 800838c:	6033      	str	r3, [r6, #0]
 800838e:	4630      	mov	r0, r6
 8008390:	f000 f80c 	bl	80083ac <__malloc_unlock>
 8008394:	e794      	b.n	80082c0 <_malloc_r+0x20>
 8008396:	6005      	str	r5, [r0, #0]
 8008398:	e7d6      	b.n	8008348 <_malloc_r+0xa8>
 800839a:	bf00      	nop
 800839c:	20001b94 	.word	0x20001b94

080083a0 <__malloc_lock>:
 80083a0:	4801      	ldr	r0, [pc, #4]	@ (80083a8 <__malloc_lock+0x8>)
 80083a2:	f000 b84b 	b.w	800843c <__retarget_lock_acquire_recursive>
 80083a6:	bf00      	nop
 80083a8:	20001cd4 	.word	0x20001cd4

080083ac <__malloc_unlock>:
 80083ac:	4801      	ldr	r0, [pc, #4]	@ (80083b4 <__malloc_unlock+0x8>)
 80083ae:	f000 b846 	b.w	800843e <__retarget_lock_release_recursive>
 80083b2:	bf00      	nop
 80083b4:	20001cd4 	.word	0x20001cd4

080083b8 <memset>:
 80083b8:	4402      	add	r2, r0
 80083ba:	4603      	mov	r3, r0
 80083bc:	4293      	cmp	r3, r2
 80083be:	d100      	bne.n	80083c2 <memset+0xa>
 80083c0:	4770      	bx	lr
 80083c2:	f803 1b01 	strb.w	r1, [r3], #1
 80083c6:	e7f9      	b.n	80083bc <memset+0x4>

080083c8 <_sbrk_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d06      	ldr	r5, [pc, #24]	@ (80083e4 <_sbrk_r+0x1c>)
 80083cc:	2300      	movs	r3, #0
 80083ce:	4604      	mov	r4, r0
 80083d0:	4608      	mov	r0, r1
 80083d2:	602b      	str	r3, [r5, #0]
 80083d4:	f7f8 fad4 	bl	8000980 <_sbrk>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d102      	bne.n	80083e2 <_sbrk_r+0x1a>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	b103      	cbz	r3, 80083e2 <_sbrk_r+0x1a>
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	20001cd0 	.word	0x20001cd0

080083e8 <__errno>:
 80083e8:	4b01      	ldr	r3, [pc, #4]	@ (80083f0 <__errno+0x8>)
 80083ea:	6818      	ldr	r0, [r3, #0]
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	2000010c 	.word	0x2000010c

080083f4 <__libc_init_array>:
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	4d0d      	ldr	r5, [pc, #52]	@ (800842c <__libc_init_array+0x38>)
 80083f8:	4c0d      	ldr	r4, [pc, #52]	@ (8008430 <__libc_init_array+0x3c>)
 80083fa:	1b64      	subs	r4, r4, r5
 80083fc:	10a4      	asrs	r4, r4, #2
 80083fe:	2600      	movs	r6, #0
 8008400:	42a6      	cmp	r6, r4
 8008402:	d109      	bne.n	8008418 <__libc_init_array+0x24>
 8008404:	4d0b      	ldr	r5, [pc, #44]	@ (8008434 <__libc_init_array+0x40>)
 8008406:	4c0c      	ldr	r4, [pc, #48]	@ (8008438 <__libc_init_array+0x44>)
 8008408:	f000 f864 	bl	80084d4 <_init>
 800840c:	1b64      	subs	r4, r4, r5
 800840e:	10a4      	asrs	r4, r4, #2
 8008410:	2600      	movs	r6, #0
 8008412:	42a6      	cmp	r6, r4
 8008414:	d105      	bne.n	8008422 <__libc_init_array+0x2e>
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	f855 3b04 	ldr.w	r3, [r5], #4
 800841c:	4798      	blx	r3
 800841e:	3601      	adds	r6, #1
 8008420:	e7ee      	b.n	8008400 <__libc_init_array+0xc>
 8008422:	f855 3b04 	ldr.w	r3, [r5], #4
 8008426:	4798      	blx	r3
 8008428:	3601      	adds	r6, #1
 800842a:	e7f2      	b.n	8008412 <__libc_init_array+0x1e>
 800842c:	0800854c 	.word	0x0800854c
 8008430:	0800854c 	.word	0x0800854c
 8008434:	0800854c 	.word	0x0800854c
 8008438:	08008550 	.word	0x08008550

0800843c <__retarget_lock_acquire_recursive>:
 800843c:	4770      	bx	lr

0800843e <__retarget_lock_release_recursive>:
 800843e:	4770      	bx	lr

08008440 <_free_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4605      	mov	r5, r0
 8008444:	2900      	cmp	r1, #0
 8008446:	d041      	beq.n	80084cc <_free_r+0x8c>
 8008448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844c:	1f0c      	subs	r4, r1, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	bfb8      	it	lt
 8008452:	18e4      	addlt	r4, r4, r3
 8008454:	f7ff ffa4 	bl	80083a0 <__malloc_lock>
 8008458:	4a1d      	ldr	r2, [pc, #116]	@ (80084d0 <_free_r+0x90>)
 800845a:	6813      	ldr	r3, [r2, #0]
 800845c:	b933      	cbnz	r3, 800846c <_free_r+0x2c>
 800845e:	6063      	str	r3, [r4, #4]
 8008460:	6014      	str	r4, [r2, #0]
 8008462:	4628      	mov	r0, r5
 8008464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008468:	f7ff bfa0 	b.w	80083ac <__malloc_unlock>
 800846c:	42a3      	cmp	r3, r4
 800846e:	d908      	bls.n	8008482 <_free_r+0x42>
 8008470:	6820      	ldr	r0, [r4, #0]
 8008472:	1821      	adds	r1, r4, r0
 8008474:	428b      	cmp	r3, r1
 8008476:	bf01      	itttt	eq
 8008478:	6819      	ldreq	r1, [r3, #0]
 800847a:	685b      	ldreq	r3, [r3, #4]
 800847c:	1809      	addeq	r1, r1, r0
 800847e:	6021      	streq	r1, [r4, #0]
 8008480:	e7ed      	b.n	800845e <_free_r+0x1e>
 8008482:	461a      	mov	r2, r3
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	b10b      	cbz	r3, 800848c <_free_r+0x4c>
 8008488:	42a3      	cmp	r3, r4
 800848a:	d9fa      	bls.n	8008482 <_free_r+0x42>
 800848c:	6811      	ldr	r1, [r2, #0]
 800848e:	1850      	adds	r0, r2, r1
 8008490:	42a0      	cmp	r0, r4
 8008492:	d10b      	bne.n	80084ac <_free_r+0x6c>
 8008494:	6820      	ldr	r0, [r4, #0]
 8008496:	4401      	add	r1, r0
 8008498:	1850      	adds	r0, r2, r1
 800849a:	4283      	cmp	r3, r0
 800849c:	6011      	str	r1, [r2, #0]
 800849e:	d1e0      	bne.n	8008462 <_free_r+0x22>
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	6053      	str	r3, [r2, #4]
 80084a6:	4408      	add	r0, r1
 80084a8:	6010      	str	r0, [r2, #0]
 80084aa:	e7da      	b.n	8008462 <_free_r+0x22>
 80084ac:	d902      	bls.n	80084b4 <_free_r+0x74>
 80084ae:	230c      	movs	r3, #12
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	e7d6      	b.n	8008462 <_free_r+0x22>
 80084b4:	6820      	ldr	r0, [r4, #0]
 80084b6:	1821      	adds	r1, r4, r0
 80084b8:	428b      	cmp	r3, r1
 80084ba:	bf04      	itt	eq
 80084bc:	6819      	ldreq	r1, [r3, #0]
 80084be:	685b      	ldreq	r3, [r3, #4]
 80084c0:	6063      	str	r3, [r4, #4]
 80084c2:	bf04      	itt	eq
 80084c4:	1809      	addeq	r1, r1, r0
 80084c6:	6021      	streq	r1, [r4, #0]
 80084c8:	6054      	str	r4, [r2, #4]
 80084ca:	e7ca      	b.n	8008462 <_free_r+0x22>
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	20001b94 	.word	0x20001b94

080084d4 <_init>:
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	bf00      	nop
 80084d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084da:	bc08      	pop	{r3}
 80084dc:	469e      	mov	lr, r3
 80084de:	4770      	bx	lr

080084e0 <_fini>:
 80084e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e2:	bf00      	nop
 80084e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e6:	bc08      	pop	{r3}
 80084e8:	469e      	mov	lr, r3
 80084ea:	4770      	bx	lr
